name: Run Acceptance Tests from PR
on:
  repository_dispatch:
    types: [run-acceptance-tests-command]
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-west-2
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GOLANGCI_LINT_VERSION: v1.31
  GOLANGCI_LINT_TIMEOUT: 10m
  GOOGLE_PROJECT: pulumi-development
  GOOGLE_REGION: us-central1
  GOOGLE_ZONE: us-central1-a
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  PROVIDER: kubernetes
  PULUMI_TEST_OWNER: moolumi
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  VERSION_PREFIX: 3.0.0

jobs:
  comment-notification:
    # We only care about adding the result to the PR if it's a repository_dispatch event
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      - name: Update with Result
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            Please view the PR build - ${{ steps.vars.outputs.run-url }}
  build-test-cluster:
    name: build-test-infrastructure
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
        go-version: [ 1.16.x ]
        node-version: [ 14.x ]
        python-version: [ 3.7 ]
        dotnet-version: [ 3.1.x ]
    runs-on: ${{ matrix.platform }}
    outputs:
      stack-name: ${{ steps.vars.outputs.stack-name }}
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Install DotNet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python Deps
        run: |
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Install Kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: ${{ env.GOOGLE_PROJECT }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Login to Google Cloud Registry
        run: |
          gcloud --quiet auth configure-docker
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
        with:
          pulumi-version: 3.0.0-rc.1
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - id: vars
        run: echo "::set-output name=stack-name::${{ secrets.PULUMI_TEST_OWNER }}/${{ github.sha }}-$(date +%s)"
      - name: Create test infra
        run: |
          ./scripts/ci-cluster-create.sh ${{ steps.vars.outputs.stack-name }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: config
          path: ~/.kube/config
  prerequisities:
    name: build-provider
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.1.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
        with:
          pulumi-version: 3.0.0-rc.1
      - name: Build K8sgen
        run: make k8sgen
      - name: Prepare openapi file
        run: make openapi_file
      - name: Prepare Schema
        run: make schema
      - name: Make Kubernetes Provider
        run: make k8sprovider
      - name: Tar provider binaries
        run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin/ pulumi-resource-${{ env.PROVIDER }} pulumi-gen-${{ env.PROVIDER
          }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz
      - name: Test provider
        run: make test_provider
  build_sdks:
    name: build-language-sdks
    runs-on: ubuntu-latest
    needs: prerequisities
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Checkout Scripts Repo
        uses: actions/checkout@v2
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.goversion }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.1.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
        with:
          pulumi-version: 3.0.0-rc.1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.nodeversion}}
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{matrix.dotnetverson}}
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.pythonversion}}
      - name: Download provider + gen binaries
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run: find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Build SDK
        run: make ${{ matrix.language }}_sdk
      - name: Check worktree clean
        run: ./ci-scripts/ci/check-worktree-is-clean
      - name: Compress SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }}
          .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
    strategy:
      fail-fast: true
      matrix:
        dotnetversion:
          - 3.1.x
        goversion:
          - 1.16.x
        language:
          - nodejs
          - python
          - dotnet
          - go
        nodeversion:
          - 14.x
        pythonversion:
          - 3.7
  test-sdks:
    name: test-language-sdks
    runs-on: ubuntu-latest
    needs: [build_sdks, build-test-cluster]
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Checkout Scripts Repo
        uses: actions/checkout@v2
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.goversion }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.1.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
        with:
          pulumi-version: 3.0.0-rc.1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.nodeversion}}
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{matrix.dotnetverson}}
      - run: dotnet nuget add source ${{ github.workspace }}/nuget
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.pythonversion}}
      - name: Download provider + gen binaries
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run: find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Download SDK
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/${{ matrix.language}}.tar.gz -C ${{
          github.workspace}}/sdk/${{ matrix.language}}
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
      - name: Install Python deps
        run: |-
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Install dependencies
        run: make install_${{ matrix.language}}_sdk
      - run: mkdir -p "$HOME/.kube/"
      - name: Download Kubeconfig
        uses: actions/download-artifact@v2
        with:
          name: config
          path: "~/.kube/"
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: ${{ env.GOOGLE_PROJECT }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Install Kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin
      - name: Install helm
        run: |
          curl -LO  https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz
          tar -xvf helm-v3.2.1-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin
      - name: Configure helm
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo update
      - name: Run tests
        run: cd tests/sdk/${{ matrix.language }} && go test -v -count=1 -cover -timeout 2h -parallel 4 ./...
    strategy:
      fail-fast: false
      matrix:
        dotnetversion:
          - 3.1.x
        goversion:
          - 1.15.x
        language:
          - nodejs
          - python
          - dotnet
          - go
        nodeversion:
          - 13.x
        pythonversion:
          - 3.7
  cleanup-infra:
    name: cleanup-test-infra
    needs: [test-sdks, build-test-cluster]
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
        go-version: [ 1.15.x ]
        node-version: [ 14.x ]
        python-version: [ 3.7 ]
        dotnet-version: [ 3.1.x ]
    runs-on: ${{ matrix.platform }}
    if: ${{ always() }} && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Install DotNet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python Deps
        run: |
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Install Kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: ${{ env.GOOGLE_PROJECT }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Login to Google Cloud Registry
        run: |
          gcloud --quiet auth configure-docker
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
        with:
          pulumi-version: 3.0.0-rc.1
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Destroy test infra
        run: |
          ./scripts/ci-cluster-destroy.sh ${{needs.build-test-cluster.outputs.stack-name}}
      - if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: config
  golangci:
    name: lint
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint-provider-pkg
        uses: golangci/golangci-lint-action@v1
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: -c ../../.golangci.yml --timeout ${{ env.GOLANGCI_LINT_TIMEOUT }}
          working-directory: provider/pkg
