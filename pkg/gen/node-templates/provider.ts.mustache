// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fs from "fs";

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "./types/input";
import * as outputApi from "./types/output";
import * as jsyaml from "js-yaml";
import * as glob from "glob";

export namespace yaml {
    export interface ConfigGroupOpts {
        files?: string[] | string;
        yaml?: string[] | string;
        transformations?: ((o: any) => void)[];
    }

    export interface ConfigFileOpts {
        file?: string;
        transformations?: ((o: any) => void)[];
    }

    export interface ConfigOpts {
        objs: any[];
        transformations?: ((o: any) => void)[];
    }

    export function parse(
        config: ConfigGroupOpts, opts?: pulumi.CustomResourceOptions
    ): {[key: string]: pulumi.CustomResource} {
        let resources: {[key: string]: pulumi.CustomResource} = {};

        if (config.files !== undefined) {
            let files: string[] = [];
            if (typeof config.files === 'string') {
                files = glob.sync(config.files);
            } else {
                for (const file of config.files) {
                    files.push(...glob.sync(file));
                }
            }

            for (const file of files) {
                const cf = new ConfigFile(file,
                    {file: file, transformations: config.transformations}, opts);
                if (cf != null) {
                    resources = {...resources, ...cf.resources}
                }
            }
        }

        if (config.yaml !== undefined) {
            let yamlTexts: string[] = [];
            if (typeof config.yaml === 'string') {
                yamlTexts.push(config.yaml);
            } else {
                yamlTexts.push(...config.yaml);
            }

            for (const text of yamlTexts) {
                const objs = jsyaml.safeLoadAll(text);
                const docResources = parseYamlDocument(
                    {objs: objs, transformations: config.transformations}, opts);
                resources = {...resources, ...docResources};
            }
        }

        return resources;
    }

    export abstract class CollectionComponentResource extends pulumi.ComponentResource {
        resources: { [key: string]: pulumi.CustomResource };

        constructor(
            resourceType: string, name: string, config: any, opts?: pulumi.ComponentResourceOptions,
        ) {
            super(resourceType, name, config, opts);
        }

        {{#Groups}}
        {{#Versions}}
        {{#Kinds}}
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", name: string): {{Group}}.{{Version}}.{{Kind}};
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", namespace: string, name: string): {{Group}}.{{Version}}.{{Kind}};
        {{/Kinds}}
        {{/Versions}}
        {{/Groups}}
        public getResource<T extends pulumi.CustomResource>(
            groupVersionKind: string, namespaceOrName: string, name?: string,
        ): T {
            // `id` will either be `${name}` or `${namespace}/${name}`.
            let id = namespaceOrName;
            if (name !== undefined) {
                id = `${namespaceOrName}/${name}`;
            }

            return <T>this.resources[`${groupVersionKind}::${id}`];
        }
    }

    /**
     * ConfigGroup creates a set of Kubernetes resources from Kubernetes YAML text. The YAML text
     * may be supplied using any of the following `ConfigGroupOpts`:
     *
     *   1. Using a filename or a list of filenames:
     *        a. `{files: "foo.yaml"}`
     *        b. `{files: ["foo.yaml", "bar.yaml"]}`
     *   2. Using a file pattern or a list of file patterns:
     *        a. `{files: "*.yaml"}`
     *        b. `{files: ["foo/*.yaml", "bar/*.yaml"]}`
     *   3. Using a literal string containing YAML, or a list of such strings:
     *        a. `{yaml: "(LITERAL YAML HERE)"}`
     *        b. `{yaml: ["(LITERAL YAML HERE)", "(MORE YAML)"]}`
     *   4. Any combination of files, patterns, or YAML strings:
     *        a. `{files: "foo.yaml", yaml: "(LITERAL YAML HERE)"}`
     */
    export class ConfigGroup extends CollectionComponentResource {
        constructor(name: string, config: ConfigGroupOpts, opts?: pulumi.ComponentResourceOptions) {
            super("kubernetes:yaml:ConfigGroup", name, config, opts);
            this.resources = parse(config, {parent: this});
        }
    }

    /**
     * ConfigFile creates a set of Kubernetes resources from Kubernetes YAML file. If `config.name`
     * is not specified, `ConfigFile` assumes the argument `name` is the filename.
     */
    export class ConfigFile extends CollectionComponentResource {
        constructor(name: string, config?: ConfigFileOpts, opts?: pulumi.ComponentResourceOptions) {
            super("kubernetes:yaml:ConfigFile", name, config, opts);
            const text = fs.readFileSync(config && config.file || name).toString();
            const objs = jsyaml.safeLoadAll(text);
            this.resources = parseYamlDocument({
                objs: objs,
                transformations: config && config.transformations || []
            }, {parent: this});
        }
    }

    function parseYamlDocument(
        config: ConfigOpts, opts?: pulumi.CustomResourceOptions,
    ):  {[key: string]: pulumi.CustomResource} {
        let resources: {[key: string]: pulumi.CustomResource} = {};

        for (const obj of config.objs) {
            const fileObject = parseYamlObject(obj, config.transformations, opts);
            if (fileObject != null) {
                resources[fileObject.name] = fileObject.resource;
            }
        }

        return resources;
    }

    function parseYamlObject(
        obj: any, transformations?: ((o: any) => void)[], opts?: pulumi.CustomResourceOptions,
    ): {name: string, resource: pulumi.CustomResource} | null {
        if (obj == null || Object.keys(obj).length == 0) {
            return null;
        }

        for (const t of transformations || []) {
            t(obj);
        }

        const kind = obj["kind"];
        const apiVersion = obj["apiVersion"];
        if (kind == null || apiVersion == null) {
            return null;
        }

        let id: string = obj["metadata"]["name"];
        const namespace = obj["metadata"]["namespace"] || undefined;
        if (namespace !== undefined) {
            id = `${namespace}/${id}`;
        }
        switch (`${apiVersion}/${kind}`) {
            {{#Groups}}
            {{#Versions}}
            {{#Kinds}}
            case "{{RawAPIVersion}}/{{Kind}}":
                return {
                    name: `{{RawAPIVersion}}/{{Kind}}::${id}`,
                    resource: new {{Group}}.{{Version}}.{{Kind}}(id, obj, opts),
                };
            {{/Kinds}}
            {{/Versions}}
            {{/Groups}}
            default:
                return {
                    name: `${apiVersion}/${kind}::${id}`,
                    resource: new apiextensions.CustomResource(id, obj, opts),
                };
        }
    }
}

export namespace apiextensions {
    export class CustomResource extends pulumi.CustomResource {
      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
       */
      public readonly apiVersion: pulumi.Output<string>;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
       */
      public readonly kind: pulumi.Output<string>;

      /**
       * Standard list metadata. More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
       */
      public readonly metadata: pulumi.Output<outputApi.meta.v1.ListMeta>;


      public getInputs(): inputApi.apps.v1.DaemonSetList { return this.__inputs; }
      private readonly __inputs: any;

      /**
      * Create a CustomResource resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
      constructor(name: string, args: {
          apiVersion: pulumi.Input<string>,
          kind: pulumi.Input<string>
          metadata?: pulumi.Input<outputApi.meta.v1.ListMeta>;
      }, opts?: pulumi.CustomResourceOptions) {
          let inputs: pulumi.Inputs = {};
          for (const key of Object.keys(args)) {
              inputs[key] = (args as any)[key];
          }
          super(`kubernetes:${args.apiVersion}:${args.kind}`, name, inputs, opts);
          this.__inputs = args;
      }
    }
}

/**
 * The provider type for the kubernetes package.
 */
export class Provider extends pulumi.ProviderResource {
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {
            "cluster": args ? args.cluster : undefined,
            "context": args ? args.context : undefined,
            "kubeconfig": args ? args.kubeconfig : undefined,
            "namespace": args ? args.namespace : undefined,
        };
        super("kubernetes", name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider.
 */
export interface ProviderArgs {
    /**
     * If present, the name of the kubeconfig cluster to use.
     */
    readonly cluster?: pulumi.Input<string>;
    /**
     * If present, the name of the kubeconfig context to use.
     */
    readonly context?: pulumi.Input<string>;
    /**
     * The contents of a kubeconfig file. If this is set, this config will be used instead of $KUBECONFIG.
     */
    readonly kubeconfig?: pulumi.Input<string>;
    /**
     * If present, the namespace scope to use.
     */
    readonly namespace?: pulumi.Input<string>;
}

{{#Groups}}
export namespace {{Group}} {
  {{#Versions}}
  export namespace {{Version}} {
    {{#Kinds}}
    {{{Comment}}}
    export class {{Kind}} extends pulumi.CustomResource {
      {{#Properties}}
      {{{Comment}}}
      public readonly {{Name}}: pulumi.Output<{{{PropType}}}>;

      {{/Properties}}

      public getInputs(): inputApi.{{Group}}.{{Version}}.{{Kind}} { return this.__inputs; }
      private readonly __inputs: inputApi.{{Group}}.{{Version}}.{{Kind}};

      /**
      * Create a {{Group}}.{{Version}}.{{Kind}} resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
      constructor(name: string, args: inputApi.{{Group}}.{{Version}}.{{Kind}}, opts?: pulumi.CustomResourceOptions) {
          let inputs: pulumi.Inputs = {};
          {{#Properties}}
          inputs["{{Name}}"] = {{{DefaultValue}}};
          {{/Properties}}
          super("kubernetes:{{APIVersion}}:{{Kind}}", name, inputs, opts);
          this.__inputs = args;
      }
    }

    {{/Kinds}}
  }

  {{/Versions}}
}

{{/Groups}}
