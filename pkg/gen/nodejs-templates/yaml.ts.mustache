// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as fs from "fs";
import * as glob from "glob";
import * as jsyaml from "js-yaml";
import fetch from "node-fetch";
import * as k8s from "../index";
import * as outputApi from "../types/output";

    export interface ConfigGroupOpts {
        /** Set of paths or a URLs that uniquely identify files. */
        files?: string[] | string;

        /** YAML text containing Kubernetes resource definitions. */
        yaml?: string[] | string;

        /** JavaScript objects representing Kubernetes resources. */
        objs?: any[] | any;

        /**
         * A set of transformations to apply to Kubernetes resource definitions before registering
         * with engine.
         */
        transformations?: ((o: any, opts: pulumi.CustomResourceOptions) => void)[];

        /**
         * An optional prefix for the auto-generated resource names.
         * Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
         */
        resourcePrefix?: string;
    }

    export interface ConfigFileOpts {
        /** Path or a URL that uniquely identifies a file. */
        file?: string;

        /**
         * A set of transformations to apply to Kubernetes resource definitions before registering
         * with engine.
         */
        transformations?: ((o: any, opts: pulumi.CustomResourceOptions) => void)[];

        /**
         * An optional prefix for the auto-generated resource names.
         * Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
         */
        resourcePrefix?: string;
    }

    export interface ConfigOpts {
        /** JavaScript objects representing Kubernetes resources. */
        objs: any[];

        /**
         * A set of transformations to apply to Kubernetes resource definitions before registering
         * with engine.
         */
        transformations?: ((o: any, opts: pulumi.CustomResourceOptions) => void)[];

        /**
         * An optional prefix for the auto-generated resource names.
         * Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
         */
        resourcePrefix?: string;
    }

    /** @ignore */ export function parse(
        config: ConfigGroupOpts, opts?: pulumi.CustomResourceOptions
    ): pulumi.Output<{[key: string]: pulumi.CustomResource}> {
        let resources = pulumi.output<{[key: string]: pulumi.CustomResource}>({});

        if (config.files !== undefined) {
            let files: string[] = [];
            if (typeof config.files === 'string') {
                if (isUrl(config.files)) {
                    files = [config.files];
                } else {
                    files = glob.sync(config.files);
                }
            } else {
                for (const file of config.files) {
                    if (isUrl(file)) {
                        files.push(file);
                    } else {
                        files.push(...glob.sync(file));
                    }
                }
            }

            for (const file of files) {
                const cf = new ConfigFile(
                    file,
                    {
                        file: file,
                        transformations: config.transformations,
                        resourcePrefix: config.resourcePrefix
                    },
                    opts
                );
                resources = pulumi.all([resources, cf.resources]).apply(([rs, cfrs]) => ({...rs, ...cfrs}));
            }
        }

        if (config.yaml !== undefined) {
            let yamlTexts: string[] = [];
            if (typeof config.yaml === 'string') {
                yamlTexts.push(config.yaml);
            } else {
                yamlTexts.push(...config.yaml);
            }

            for (const text of yamlTexts) {
                const objs = jsyaml.safeLoadAll(text);
                const docResources = parseYamlDocument({
                        objs: objs,
                        transformations: config.transformations,
                        resourcePrefix: config.resourcePrefix
                    },
                    opts);
                resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => ({...rs, ...drs}));
            }
        }

        if (config.objs !== undefined) {
            const objs= Array.isArray(config.objs) ? config.objs: [config.objs];
                const docResources = parseYamlDocument({objs: objs, transformations: config.transformations}, opts);
                resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => ({...rs, ...drs}));
        }

        return resources;
    }

    export abstract class CollectionComponentResource extends pulumi.ComponentResource {
        resources: pulumi.Output<{ [key: string]: pulumi.CustomResource }>;

        constructor(
            resourceType: string, name: string, config: any, opts?: pulumi.ComponentResourceOptions,
        ) {
            super(resourceType, name, config, opts);
        }

        /**
         * getResource returns a resource defined by a built-in Kubernetes group/version/kind and name.
         *
         * For example:
         *     getResource("apps/v1/Deployment", "nginx")
         */
        {{#Groups}}
        {{#Versions}}
        {{#KindsAndAliases}}
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", name: string): pulumi.Output<k8s.{{Group}}.{{Version}}.{{Kind}}>;
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", namespace: string, name: string): pulumi.Output<k8s.{{Group}}.{{Version}}.{{Kind}}>;
        {{/KindsAndAliases}}
        {{/Versions}}
        {{/Groups}}
        public getResource(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
        }

        /**
         * getResourceProperty returns a single property of a resource defined by a built-in Kubernetes group/version/kind and name.
         *
         * For example:
         *     getResourceProperty("v1/Service", "nginx", "spec")
         */
        {{#Groups}}
        {{#Versions}}
        {{#KindsAndAliases}}
        {{#Properties}}
        public getResourceProperty(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", name: string, property: "{{LanguageName}}"): pulumi.Output<{{{PropType}}}>;
        public getResourceProperty(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", namespace: string, name: string, property: "{{LanguageName}}"): pulumi.Output<{{{PropType}}}>;
        {{/Properties}}
        {{/KindsAndAliases}}
        {{/Versions}}
        {{/Groups}}
        public getResourceProperty(groupVersionKind: string, namespaceOrName: string, nameOrProperty: string, property?: string): pulumi.Output<any> {
            const name = property !== undefined ? nameOrProperty : undefined;
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name)
                .apply(r => (<any>r)[property || nameOrProperty]);
        }

        /**
         * getCustomResource returns a resource defined by a CRD with the given group/version/kind and name.
         *
         * For example:
         *     getCustomResource("monitoring.coreos.com/v1/ServiceMonitor", "kube-prometheus-exporter-kubernetes")
         */
        public getCustomResource<T extends pulumi.CustomResource>(groupVersionKind: string, namespace: string): pulumi.Output<T>;
        public getCustomResource<T extends pulumi.CustomResource>(groupVersionKind: string, namespace: string, name: string): pulumi.Output<T>;
        public getCustomResource(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
        }

        private getResourceImpl(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            // `id` will either be `${name}` or `${namespace}/${name}`.
            let id = namespaceOrName;
            if (name !== undefined) {
                id = `${namespaceOrName}/${name}`;
            }

            return this.resources.apply(r => r[`${groupVersionKind}::${id}`]);
        }
    }

    /**
     * ConfigGroup creates a set of Kubernetes resources from Kubernetes YAML text. The YAML text
     * may be supplied using any of the following `ConfigGroupOpts`:
     *
     *   1. Using a filename or a list of filenames:
     *        a. `{files: "foo.yaml"}`
     *        b. `{files: ["foo.yaml", "bar.yaml"]}`
     *   2. Using a file pattern or a list of file patterns:
     *        a. `{files: "*.yaml"}`
     *        b. `{files: ["foo/*.yaml", "bar/*.yaml"]}`
     *   3. Using a literal string containing YAML, or a list of such strings:
     *        a. `{yaml: "(LITERAL YAML HERE)"}`
     *        b. `{yaml: ["(LITERAL YAML HERE)", "(MORE YAML)"]}`
     *   4. Any combination of files, patterns, or YAML strings:
     *        a. `{files: "foo.yaml", yaml: "(LITERAL YAML HERE)"}`
     */
    export class ConfigGroup extends CollectionComponentResource {
        constructor(name: string, config: ConfigGroupOpts, opts?: pulumi.ComponentResourceOptions) {
            super("kubernetes:yaml:ConfigGroup", name, config, opts);
            this.resources = parse(config, {parent: this});
        }
    }

    /**
     * ConfigFile creates a set of Kubernetes resources from Kubernetes YAML file. If `config.name`
     * is not specified, `ConfigFile` assumes the argument `name` is the filename.
     */
    export class ConfigFile extends CollectionComponentResource {
        constructor(
            name: string,
            config?: ConfigFileOpts,
            opts?: pulumi.ComponentResourceOptions
        ) {
            if (config && config.resourcePrefix !== undefined) {
                name = `${config.resourcePrefix}-${name}`
            }
            super("kubernetes:yaml:ConfigFile", name, config, opts);
            const fileId = config && config.file || name;
            let text: Promise<string>;
            if (isUrl(fileId)) {
                text = fetch(fileId).then(r => r.text())
            } else {
                text = Promise.resolve(fs.readFileSync(fileId).toString());
            }

            this.resources = pulumi.output(text.then(t => parseYamlDocument({
                objs: jsyaml.safeLoadAll(t),
                transformations: config && config.transformations || [],
                resourcePrefix: config && config.resourcePrefix || undefined
            }, {parent: this})));
        }
    }

    /** @ignore */ function isUrl(s: string): boolean {
        return s.startsWith("http://") || s.startsWith("https://")
    }

    /** @ignore */ function parseYamlDocument(
        config: ConfigOpts,
        opts?: pulumi.CustomResourceOptions,
    ):  pulumi.Output<{[key: string]: pulumi.CustomResource}> {
        const objs: pulumi.Output<{name: string, resource: pulumi.CustomResource}>[] = [];

        for (const obj of config.objs) {
            const fileObjects: pulumi.Output<{name: string, resource: pulumi.CustomResource}>[] =
                parseYamlObject(obj, config.transformations, config.resourcePrefix, opts);
            for (const fileObject of fileObjects) {
                objs.push(fileObject);
            }
        }
        return pulumi.all(objs).apply(xs => {
            let resources: {[key: string]: pulumi.CustomResource} = {};
            for (const x of xs) {
                resources[x.name] = x.resource
            }

            return resources;
        });
    }

    /** @ignore */ function parseYamlObject(
        obj: any,
        transformations?: ((o: any, opts: pulumi.CustomResourceOptions) => void)[],
        resourcePrefix?: string,
        opts?: pulumi.CustomResourceOptions,
    ): pulumi.Output<{name: string, resource: pulumi.CustomResource}>[] {
        if (obj == null || Object.keys(obj).length == 0) {
            return [];
        }

        // Create a copy of opts to pass into potentially mutating transforms that will be applied to this resource.
        opts = Object.assign({}, opts);

        // Allow users to change API objects before any validation.
        for (const t of transformations || []) {
            t(obj, opts);
        }

        if (!("kind" in obj && "apiVersion" in obj)) {
            throw new Error(`Kubernetes resources require a kind and apiVersion: ${JSON.stringify(obj)}`)
        }

        const kind = obj["kind"];
        const apiVersion = obj["apiVersion"];

        // Recursively traverse built-in Kubernetes list types into a single set of "naked" resource
        // definitions that we can register with the Pulumi engine.
        //
        // Kubernetes does not instantiate list types like `v1.List`. When the API server receives
        // a list, it will recursively traverse it and perform the necessary operations on the
        // each "instantiable" resource it finds. For example, `kubectl apply` on a
        // `v1.ConfigMapList` will cause the API server to traverse the list, and `apply` each
        // `v1.ConfigMap` it finds.
        //
        // Since Kubernetes does not instantiate list types directly, Pulumi also traverses lists
        // for resource definitions that can be managed by Kubernetes, and registers those with the
        // engine instead.
        if (
               (apiVersion == "v1" && kind == "List")
            {{#Groups}}
            {{#Versions}}
            {{#ListKindsAndAliases}}
            || (apiVersion == "{{RawAPIVersion}}" && kind == "{{Kind}}")
            {{/ListKindsAndAliases}}
            {{/Versions}}
            {{/Groups}}
        ) {
            const objs = [];
            const items = obj["items"] || [];
            for (const item of items) {
                objs.push(...parseYamlObject(item, transformations, resourcePrefix, opts));
            }
            return objs;
        }

        if (!("metadata" in obj) || !("name" in obj["metadata"])) {
            throw new Error(`YAML object does not have a .metadata.name: ${obj.apiVersion}/${obj.kind} ${JSON.stringify(obj.metadata)}`)
        }

        const meta = obj["metadata"];
        let id: pulumi.Output<any> = pulumi.output(meta["name"]);
        const namespace = meta["namespace"] || undefined;
        if (namespace !== undefined) {
            id = pulumi.concat(namespace, "/", id);
        }
        if (resourcePrefix !== undefined) {
            id = pulumi.concat(resourcePrefix, "-", id);
        }
        switch (`${apiVersion}/${kind}`) {
            {{#Groups}}
            {{#Versions}}
            {{#KindsAndAliases}}
            case "{{RawAPIVersion}}/{{Kind}}":
                return [id.apply(id => ({
                    name: `{{RawAPIVersion}}/{{Kind}}::${id}`,
                    resource: new k8s.{{Group}}.{{Version}}.{{Kind}}(id, obj, opts),
                }))];
            {{/KindsAndAliases}}
            {{/Versions}}
            {{/Groups}}
            default:
                return [id.apply(id => ({
                    name: `${apiVersion}/${kind}::${id}`,
                    resource: new k8s.apiextensions.CustomResource(id, obj, opts),
                }))];
        }
    }
