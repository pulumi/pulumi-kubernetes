// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { core } from "../..";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import { getVersion } from "../../version";

    /**
     * {{{Comment}}}{{{PulumiComment}}}
     */
    export class {{Kind}} extends pulumi.CustomResource {
      {{#Properties}}
      {{{Comment}}}
      public readonly {{Name}}: {{{PropType}}};

      {{/Properties}}
      /**
       * Get the state of an existing `{{Kind}}` resource, as identified by `id`.
       * The ID is of the form `[namespace]/<name>`; if `namespace` is omitted, then (per
       * Kubernetes convention) the ID becomes `default/<name>`.
       *
       * Pulumi will keep track of this resource using `name` as the Pulumi ID.
       *
       * @param name _Unique_ name used to register this resource with Pulumi.
       * @param id An ID for the Kubernetes resource to retrieve. Takes the form `[namespace]/<name>`.
       * @param opts Uniquely specifies a CustomResource to select.
       */
      public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): {{Kind}} {
          return new {{Kind}}(name, undefined, { ...opts, id: id });
      }

      /** @internal */
      private static readonly __pulumiType = "kubernetes:{{URNAPIVersion}}:{{Kind}}";

      /**
       * Returns true if the given object is an instance of {{Kind}}.  This is designed to work even
       * when multiple copies of the Pulumi SDK have been loaded into the same process.
       */
      public static isInstance(obj: any): obj is {{Kind}} {
          if (obj === undefined || obj === null) {
              return false;
          }

          return obj["__pulumiType"] === {{Kind}}.__pulumiType;
      }

      /**
       * Create a {{Group}}.{{Version}}.{{Kind}} resource with the given unique name, arguments, and options.
       *
       * @param name The _unique_ name of the resource.
       * @param args The arguments to use to populate this resource's properties.
       * @param opts A bag of options that control this resource's behavior.
       */
      constructor(name: string, args?: inputs.{{Group}}.{{Version}}.{{Kind}}, opts?: pulumi.CustomResourceOptions) {
          const props: pulumi.Inputs = {};
          {{#RequiredInputProperties}}
          props["{{Name}}"] = {{{DefaultValue}}};
          {{/RequiredInputProperties}}

          {{#OptionalInputProperties}}
          props["{{Name}}"] = {{{DefaultValue}}};
          {{/OptionalInputProperties}}

          props["status"] = undefined;

          if (!opts) {
              opts = {};
          }

          if (!opts.version) {
              opts.version = getVersion();
          }

          opts.additionalSecretOutputs = [
              {{#AdditionalSecretOutputs}}
              "{{.}}",
              {{/AdditionalSecretOutputs}}
              ...((opts && opts.additionalSecretOutputs) || []),

          ];

          opts.aliases = [
          {{#Aliases}}
              { parent: opts.parent, type: "{{.}}", name: name },
          {{/Aliases}}
              ...((opts && opts.aliases) || []),
          ];

          super({{Kind}}.__pulumiType, name, props, opts);
      }
    }
