// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fs from "fs";

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "./types/input";
import * as outputApi from "./types/output";
import * as jsyaml from "js-yaml";
import * as glob from "glob";

export namespace yaml {
    export interface ConfigGroupOpts {
        files?: string[] | string;
        yaml?: string[] | string;
        objs?: any[] | any;
        transformations?: ((o: any) => void)[];
    }

    export interface ConfigFileOpts {
        file?: string;
        transformations?: ((o: any) => void)[];
    }

    export interface ConfigOpts {
        objs: any[];
        transformations?: ((o: any) => void)[];
    }

    export function parse(
        config: ConfigGroupOpts, opts?: pulumi.CustomResourceOptions
    ): pulumi.Output<{[key: string]: pulumi.CustomResource}> {
        let resources = pulumi.output<{[key: string]: pulumi.CustomResource}>({});

        if (config.files !== undefined) {
            let files: string[] = [];
            if (typeof config.files === 'string') {
                files = glob.sync(config.files);
            } else {
                for (const file of config.files) {
                    files.push(...glob.sync(file));
                }
            }

            for (const file of files) {
                const cf = new ConfigFile(file, {file: file, transformations: config.transformations}, opts);
                resources = pulumi.all([resources, cf.resources]).apply(([rs, cfrs]) => ({...rs, ...cfrs}));
            }
        }

        if (config.yaml !== undefined) {
            let yamlTexts: string[] = [];
            if (typeof config.yaml === 'string') {
                yamlTexts.push(config.yaml);
            } else {
                yamlTexts.push(...config.yaml);
            }

            for (const text of yamlTexts) {
                const objs = jsyaml.safeLoadAll(text);
                const docResources = parseYamlDocument({objs: objs, transformations: config.transformations}, opts);
                resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => ({...rs, ...drs}));
            }
        }

        if (config.objs !== undefined) {
            const objs= Array.isArray(config.objs) ? config.objs: [config.objs];
                const docResources = parseYamlDocument({objs: objs, transformations: config.transformations}, opts);
                resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => ({...rs, ...drs}));
        }

        return resources;
    }

    export abstract class CollectionComponentResource extends pulumi.ComponentResource {
        resources: pulumi.Output<{ [key: string]: pulumi.CustomResource }>;

        constructor(
            resourceType: string, name: string, config: any, opts?: pulumi.ComponentResourceOptions,
        ) {
            super(resourceType, name, config, opts);
        }

        /**
         * getResource returns a resource defined by a built-in Kubernetes group/version/kind and name.
         *
         * For example:
         *     getResource("apps/v1/Deployment", "nginx")
         */
        {{#Groups}}
        {{#Versions}}
        {{#KindsAndAliases}}
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", name: string): pulumi.Output<{{Group}}.{{Version}}.{{Kind}}>;
        public getResource(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", namespace: string, name: string): pulumi.Output<{{Group}}.{{Version}}.{{Kind}}>;
        {{/KindsAndAliases}}
        {{/Versions}}
        {{/Groups}}
        public getResource(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
        }

        /**
         * getResourceProperty returns a single property of a resource defined by a built-in Kubernetes group/version/kind and name.
         *
         * For example:
         *     getResourceProperty("v1/Service", "nginx", "spec")
         */
        {{#Groups}}
        {{#Versions}}
        {{#KindsAndAliases}}
        {{#Properties}}
        public getResourceProperty(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", name: string, property: "{{LanguageName}}"): pulumi.Output<{{{PropType}}}>;
        public getResourceProperty(groupVersionKind: "{{RawAPIVersion}}/{{Kind}}", namespace: string, name: string, property: "{{LanguageName}}"): pulumi.Output<{{{PropType}}}>;
        {{/Properties}}
        {{/KindsAndAliases}}
        {{/Versions}}
        {{/Groups}}
        public getResourceProperty(groupVersionKind: string, namespaceOrName: string, nameOrProperty: string, property?: string): pulumi.Output<any> {
            const name = property !== undefined ? nameOrProperty : undefined;
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name)
                .apply(r => (<any>r)[property || nameOrProperty]);
        }

        /**
         * getCustomResource returns a resource defined by a CRD with the given group/version/kind and name.
         *
         * For example:
         *     getCustomResource("monitoring.coreos.com/v1/ServiceMonitor", "kube-prometheus-exporter-kubernetes")
         */
        public getCustomResource<T extends pulumi.CustomResource>(groupVersionKind: string, namespace: string): pulumi.Output<T>;
        public getCustomResource<T extends pulumi.CustomResource>(groupVersionKind: string, namespace: string, name: string): pulumi.Output<T>;
        public getCustomResource(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
        }

        private getResourceImpl(groupVersionKind: string, namespaceOrName: string, name?: string): pulumi.Output<pulumi.CustomResource> {
            // `id` will either be `${name}` or `${namespace}/${name}`.
            let id = namespaceOrName;
            if (name !== undefined) {
                id = `${namespaceOrName}/${name}`;
            }

            return this.resources.apply(resources => resources[`${groupVersionKind}::${id}`]);
        }
    }

    /**
     * ConfigGroup creates a set of Kubernetes resources from Kubernetes YAML text. The YAML text
     * may be supplied using any of the following `ConfigGroupOpts`:
     *
     *   1. Using a filename or a list of filenames:
     *        a. `{files: "foo.yaml"}`
     *        b. `{files: ["foo.yaml", "bar.yaml"]}`
     *   2. Using a file pattern or a list of file patterns:
     *        a. `{files: "*.yaml"}`
     *        b. `{files: ["foo/*.yaml", "bar/*.yaml"]}`
     *   3. Using a literal string containing YAML, or a list of such strings:
     *        a. `{yaml: "(LITERAL YAML HERE)"}`
     *        b. `{yaml: ["(LITERAL YAML HERE)", "(MORE YAML)"]}`
     *   4. Any combination of files, patterns, or YAML strings:
     *        a. `{files: "foo.yaml", yaml: "(LITERAL YAML HERE)"}`
     */
    export class ConfigGroup extends CollectionComponentResource {
        constructor(name: string, config: ConfigGroupOpts, opts?: pulumi.ComponentResourceOptions) {
            super("kubernetes:yaml:ConfigGroup", name, config, opts);
            this.resources = parse(config, {parent: this});
        }
    }

    /**
     * ConfigFile creates a set of Kubernetes resources from Kubernetes YAML file. If `config.name`
     * is not specified, `ConfigFile` assumes the argument `name` is the filename.
     */
    export class ConfigFile extends CollectionComponentResource {
        constructor(name: string, config?: ConfigFileOpts, opts?: pulumi.ComponentResourceOptions) {
            super("kubernetes:yaml:ConfigFile", name, config, opts);
            const text = fs.readFileSync(config && config.file || name).toString();
            const objs = jsyaml.safeLoadAll(text);
            this.resources = pulumi.output(parseYamlDocument({
                objs: objs,
                transformations: config && config.transformations || []
            }, {parent: this}));
        }
    }

    function parseYamlDocument(
        config: ConfigOpts, opts?: pulumi.CustomResourceOptions,
    ):  {[key: string]: pulumi.CustomResource} {
        let resources: {[key: string]: pulumi.CustomResource} = {};

        for (const obj of config.objs) {
            const fileObjects = parseYamlObject(obj, config.transformations, opts);
            for (const fileObject of fileObjects) {
                resources[fileObject.name] = fileObject.resource;
            }
        }

        return resources;
    }

    function parseYamlObject(
        obj: any, transformations?: ((o: any) => void)[], opts?: pulumi.CustomResourceOptions,
    ): {name: string, resource: pulumi.CustomResource}[] {
        if (obj == null || Object.keys(obj).length == 0) {
            return [];
        }

        // Allow users to change API objects before any validation.
        for (const t of transformations || []) {
            t(obj);
        }

        if (!("kind" in obj && "apiVersion" in obj)) {
            throw new Error(`Kubernetes resources require a kind and apiVersion: ${JSON.stringify(obj)}`)
        }

        const kind = obj["kind"];
        const apiVersion = obj["apiVersion"];

        // Recursively traverse built-in Kubernetes list types into a single set of "naked" resource
        // definitions that we can register with the Pulumi engine.
        //
        // Kubernetes does not instantiate list types like `v1.List`. When the API server receives
        // a list, it will recursively traverse it and perform the necessary operations on the
        // each "instantiable" resource it finds. For example, `kubectl apply` on a
        // `v1.ConfigMapList` will cause the API server to traverse the list, and `apply` each
        // `v1.ConfigMap` it finds.
        //
        // Since Kubernetes does not instantiate list types directly, Pulumi also traverses lists
        // for resource definitions that can be managed by Kubernetes, and registers those with the
        // engine instead.
        if (
               (apiVersion == "v1" && kind == "List")
            {{#Groups}}
            {{#Versions}}
            {{#ListKindsAndAliases}}
            || (apiVersion == "{{RawAPIVersion}}" && kind == "{{Kind}}")
            {{/ListKindsAndAliases}}
            {{/Versions}}
            {{/Groups}}
        ) {
            const objs = [];
            const items = obj["items"] || [];
            for (const item of items) {
                objs.push(...parseYamlObject(item, transformations, opts));
            }
            return objs;
        }

        if (!("metadata" in obj) || !("name" in obj["metadata"])) {
            throw new Error(`YAML object does not have a .metadata.name: ${obj.apiVersion}/${obj.kind} ${JSON.stringify(obj.metadata)}`)
        }

        const meta = obj["metadata"];
        let id: string = meta["name"];
        const namespace = meta["namespace"] || undefined;
        if (namespace !== undefined) {
            id = `${namespace}/${id}`;
        }
        switch (`${apiVersion}/${kind}`) {
            {{#Groups}}
            {{#Versions}}
            {{#KindsAndAliases}}
            case "{{RawAPIVersion}}/{{Kind}}":
                return [{
                    name: `{{RawAPIVersion}}/{{Kind}}::${id}`,
                    resource: new {{Group}}.{{Version}}.{{Kind}}(id, obj, opts),
                }];
            {{/KindsAndAliases}}
            {{/Versions}}
            {{/Groups}}
            default:
                return [{
                    name: `${apiVersion}/${kind}::${id}`,
                    resource: new apiextensions.CustomResource(id, obj, opts),
                }];
        }
    }
}

export namespace apiextensions {
    /**
     * CustomResourceArgs represents a resource definiton we'd use to create an instance of a
     * Kubernetes CustomResourceDefinition (CRD). For example, the CoreOS Prometheus operator
     * exposes a CRD `monitoring.coreos.com/ServiceMonitor`; to create a `ServiceMonitor`, we'd
     * pass a `CustomResourceArgs` containing the `ServiceMonitor` definition to
     * `apiextensions.CustomResource`.
     *
     * NOTE: This type is fairly loose, since other than `apiVersion` and `kind`, there are no
     * fields required across all CRDs.
     */
    export interface CustomResourceArgs {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should
         * convert recognized schemas to the latest internal value, and may reject unrecognized
         * values. More info:
         * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
         */
        apiVersion: pulumi.Input<string>;

        /**
         * Kind is a string value representing the REST resource this object represents. Servers may
         * infer this from the endpoint the client submits requests to. Cannot be updated. In
         * CamelCase. More info:
         * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
         */
        kind: pulumi.Input<string>;

        /**
         * Standard object metadata; More info:
         * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
         */
        metadata?: pulumi.Input<inputApi.meta.v1.ObjectMeta>;
        [othersFields: string]: pulumi.Input<any>;
    }

    /**
     * CustomResourceGetOptions uniquely identifies a Kubernetes CustomResource, primarily for use
     * in supplied to `apiextensions.CustomResource#get`.
     */
    export interface CustomResourceGetOptions {
        /**
         * apiVersion is the API version of the apiExtensions.CustomResource we wish to select,
         * as specified by the CustomResourceDefinition that defines it on the API server.
         */
        apiVersion: pulumi.Input<string>;

        /**
         * kind is the kind of the apiextensions.CustomResource we wish to select, as specified by
         * the CustomResourceDefinition that defines it on the API server.
         */
        kind: pulumi.Input<string>

        /**
         * An ID for the Kubernetes resource to retrive. Takes the form <namespace>/<name> or
         * <name>.
         */
        id: pulumi.Input<pulumi.ID>;
    }

    /**
     * CustomResource represents an instance of a CustomResourceDefinition (CRD). For example, the
     * CoreOS Prometheus operator exposes a CRD `monitoring.coreos.com/ServiceMonitor`; to
     * instantiate this as a Pulumi resource, one could call `new CustomResource`, passing the
     * `ServiceMonitor` resource definition as an argument.
     */
    export class CustomResource extends pulumi.CustomResource {
      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
       */
      public readonly apiVersion: pulumi.Output<string>;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
       */
      public readonly kind: pulumi.Output<string>;

      /**
       * Standard object metadata; More info:
       * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
       */
      public readonly metadata: pulumi.Output<outputApi.meta.v1.ObjectMeta>;

      /**
       * Get the state of an existing `CustomResource`, as identified by `id`.
       * Typically this ID  is of the form <namespace>/<name>; if <namespace> is omitted, then (per
       * Kubernetes convention) the ID becomes default/<name>.
       *
       * Pulumi will keep track of this resource using `name` as the Pulumi ID.
       *
       * @param name _Unique_ name used to register this resource with Pulumi.
       * @param opts Uniquely specifies a CustomResource to select.
       */
      public static get(name: string, opts: CustomResourceGetOptions): CustomResource {
          return new CustomResource(name, {apiVersion: opts.apiVersion, kind: opts.kind}, { id: opts.id });
      }

      public getInputs(): CustomResourceArgs { return this.__inputs; }
      private readonly __inputs: CustomResourceArgs;

      /**
      * Create a CustomResource resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
      constructor(name: string, args: CustomResourceArgs, opts?: pulumi.CustomResourceOptions) {
          let inputs: pulumi.Inputs = {};
          for (const key of Object.keys(args)) {
              inputs[key] = (args as any)[key];
          }
          super(`kubernetes:${args.apiVersion}:${args.kind}`, name, inputs, opts);
          this.__inputs = args;
      }
    }
}

/**
 * The provider type for the kubernetes package.
 */
export class Provider extends pulumi.ProviderResource {
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {
            "cluster": args ? args.cluster : undefined,
            "context": args ? args.context : undefined,
            "kubeconfig": args ? args.kubeconfig : undefined,
            "namespace": args ? args.namespace : undefined,
        };
        super("kubernetes", name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider.
 */
export interface ProviderArgs {
    /**
     * If present, the name of the kubeconfig cluster to use.
     */
    readonly cluster?: pulumi.Input<string>;
    /**
     * If present, the name of the kubeconfig context to use.
     */
    readonly context?: pulumi.Input<string>;
    /**
     * The contents of a kubeconfig file. If this is set, this config will be used instead of $KUBECONFIG.
     */
    readonly kubeconfig?: pulumi.Input<string>;
    /**
     * If present, the namespace scope to use.
     */
    readonly namespace?: pulumi.Input<string>;
}

{{#Groups}}
export namespace {{Group}} {
  {{#Versions}}
  export namespace {{Version}} {
    {{#Kinds}}
    {{{Comment}}}
    export class {{Kind}} extends pulumi.CustomResource {
      {{#Properties}}
      {{{Comment}}}
      public readonly {{Name}}: pulumi.Output<{{{PropType}}}>;

      {{/Properties}}

      /**
       * Get the state of an existing `{{Kind}}` resource, as identified by `id`.
       * Typically this ID  is of the form <namespace>/<name>; if <namespace> is omitted, then (per
       * Kubernetes convention) the ID becomes default/<name>.
       *
       * Pulumi will keep track of this resource using `name` as the Pulumi ID.
       *
       * @param name _Unique_ name used to register this resource with Pulumi.
       * @param id An ID for the Kubernetes resource to retrive. Takes the form
       *  <namespace>/<name> or <name>.
       */
      public static get(name: string, id: pulumi.Input<pulumi.ID>): {{Kind}} {
          return new {{Kind}}(name, undefined, { id: id });
      }

      public getInputs(): inputApi.{{Group}}.{{Version}}.{{Kind}} { return this.__inputs; }
      private readonly __inputs: inputApi.{{Group}}.{{Version}}.{{Kind}};

      /**
      * Create a {{Group}}.{{Version}}.{{Kind}} resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
      constructor(name: string, args?: inputApi.{{Group}}.{{Version}}.{{Kind}}, opts?: pulumi.CustomResourceOptions) {
          let inputs: pulumi.Inputs = {};
          {{#Properties}}
          inputs["{{Name}}"] = {{{DefaultValue}}};
          {{/Properties}}
          super("kubernetes:{{URNAPIVersion}}:{{Kind}}", name, inputs, opts);
          this.__inputs = <any>args;
      }
    }

    {{/Kinds}}
  }

  {{/Versions}}
}

{{/Groups}}
