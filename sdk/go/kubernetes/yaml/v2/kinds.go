// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"fmt"

	admissionregistrationv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/admissionregistration/v1"
	admissionregistrationv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/admissionregistration/v1alpha1"
	admissionregistrationv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/admissionregistration/v1beta1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apiextensions"
	apiextensionsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apiextensions/v1"
	apiextensionsv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apiextensions/v1beta1"
	apiregistrationv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apiregistration/v1"
	apiregistrationv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apiregistration/v1beta1"
	appsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apps/v1"
	appsv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apps/v1beta1"
	appsv1beta2 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apps/v1beta2"
	auditregistrationv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/auditregistration/v1alpha1"
	autoscalingv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/autoscaling/v1"
	autoscalingv2 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/autoscaling/v2"
	autoscalingv2beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/autoscaling/v2beta1"
	autoscalingv2beta2 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/autoscaling/v2beta2"
	batchv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/batch/v1"
	batchv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/batch/v1beta1"
	batchv2alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/batch/v2alpha1"
	certificatesv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/certificates/v1"
	certificatesv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/certificates/v1alpha1"
	certificatesv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/certificates/v1beta1"
	coordinationv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/coordination/v1"
	coordinationv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/coordination/v1beta1"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	discoveryv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/discovery/v1"
	discoveryv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/discovery/v1beta1"
	eventsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/events/v1"
	eventsv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/events/v1beta1"
	extensionsv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/extensions/v1beta1"
	flowcontrolv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/flowcontrol/v1"
	flowcontrolv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/flowcontrol/v1alpha1"
	flowcontrolv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/flowcontrol/v1beta1"
	flowcontrolv1beta2 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/flowcontrol/v1beta2"
	flowcontrolv1beta3 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/flowcontrol/v1beta3"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	networkingv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/networking/v1"
	networkingv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/networking/v1alpha1"
	networkingv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/networking/v1beta1"
	nodev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/node/v1"
	nodev1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/node/v1alpha1"
	nodev1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/node/v1beta1"
	policyv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/policy/v1"
	policyv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/policy/v1beta1"
	rbacv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/rbac/v1"
	rbacv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/rbac/v1alpha1"
	rbacv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/rbac/v1beta1"
	resourcev1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/resource/v1alpha1"
	resourcev1alpha2 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/resource/v1alpha2"
	schedulingv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/scheduling/v1"
	schedulingv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/scheduling/v1alpha1"
	schedulingv1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/scheduling/v1beta1"
	settingsv1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/settings/v1alpha1"
	storagev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/storage/v1"
	storagev1alpha1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/storage/v1alpha1"
	storagev1beta1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/storage/v1beta1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func IsListKind(apiVersion, kind string) bool {
	fullKind := fmt.Sprintf("%s/%s", apiVersion, kind)
	switch fullKind {
	case "v1/List",
		"admissionregistration.k8s.io/v1/MutatingWebhookConfigurationList",
		"admissionregistration.k8s.io/v1/ValidatingWebhookConfigurationList",
		"admissionregistration.k8s.io/v1alpha1/ValidatingAdmissionPolicyBindingList",
		"admissionregistration.k8s.io/v1alpha1/ValidatingAdmissionPolicyList",
		"admissionregistration.k8s.io/v1beta1/MutatingWebhookConfigurationList",
		"admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicyBindingList",
		"admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicyList",
		"admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfigurationList",
		"apiextensions.k8s.io/v1/CustomResourceDefinitionList",
		"apiextensions.k8s.io/v1beta1/CustomResourceDefinitionList",
		"apiregistration.k8s.io/v1/APIServiceList",
		"apiregistration.k8s.io/v1beta1/APIServiceList",
		"apps/v1/ControllerRevisionList",
		"apps/v1/DaemonSetList",
		"apps/v1/DeploymentList",
		"apps/v1/ReplicaSetList",
		"apps/v1/StatefulSetList",
		"apps/v1beta1/ControllerRevisionList",
		"apps/v1beta1/DeploymentList",
		"apps/v1beta1/StatefulSetList",
		"apps/v1beta2/ControllerRevisionList",
		"apps/v1beta2/DaemonSetList",
		"apps/v1beta2/DeploymentList",
		"apps/v1beta2/ReplicaSetList",
		"apps/v1beta2/StatefulSetList",
		"auditregistration.k8s.io/v1alpha1/AuditSinkList",
		"autoscaling/v1/HorizontalPodAutoscalerList",
		"autoscaling/v2/HorizontalPodAutoscalerList",
		"autoscaling/v2beta1/HorizontalPodAutoscalerList",
		"autoscaling/v2beta2/HorizontalPodAutoscalerList",
		"batch/v1/CronJobList",
		"batch/v1/JobList",
		"batch/v1beta1/CronJobList",
		"batch/v2alpha1/CronJobList",
		"certificates.k8s.io/v1/CertificateSigningRequestList",
		"certificates.k8s.io/v1alpha1/ClusterTrustBundleList",
		"certificates.k8s.io/v1beta1/CertificateSigningRequestList",
		"coordination.k8s.io/v1/LeaseList",
		"coordination.k8s.io/v1beta1/LeaseList",
		"v1/ConfigMapList",
		"v1/EndpointsList",
		"v1/EventList",
		"v1/LimitRangeList",
		"v1/NamespaceList",
		"v1/NodeList",
		"v1/PersistentVolumeClaimList",
		"v1/PersistentVolumeList",
		"v1/PodList",
		"v1/PodTemplateList",
		"v1/ReplicationControllerList",
		"v1/ResourceQuotaList",
		"v1/SecretList",
		"v1/ServiceAccountList",
		"v1/ServiceList",
		"discovery.k8s.io/v1/EndpointSliceList",
		"discovery.k8s.io/v1beta1/EndpointSliceList",
		"events.k8s.io/v1/EventList",
		"events.k8s.io/v1beta1/EventList",
		"extensions/v1beta1/DaemonSetList",
		"extensions/v1beta1/DeploymentList",
		"extensions/v1beta1/IngressList",
		"extensions/v1beta1/NetworkPolicyList",
		"extensions/v1beta1/PodSecurityPolicyList",
		"extensions/v1beta1/ReplicaSetList",
		"flowcontrol.apiserver.k8s.io/v1/FlowSchemaList",
		"flowcontrol.apiserver.k8s.io/v1/PriorityLevelConfigurationList",
		"flowcontrol.apiserver.k8s.io/v1alpha1/FlowSchemaList",
		"flowcontrol.apiserver.k8s.io/v1alpha1/PriorityLevelConfigurationList",
		"flowcontrol.apiserver.k8s.io/v1beta1/FlowSchemaList",
		"flowcontrol.apiserver.k8s.io/v1beta1/PriorityLevelConfigurationList",
		"flowcontrol.apiserver.k8s.io/v1beta2/FlowSchemaList",
		"flowcontrol.apiserver.k8s.io/v1beta2/PriorityLevelConfigurationList",
		"flowcontrol.apiserver.k8s.io/v1beta3/FlowSchemaList",
		"flowcontrol.apiserver.k8s.io/v1beta3/PriorityLevelConfigurationList",
		"networking.k8s.io/v1/IngressClassList",
		"networking.k8s.io/v1/IngressList",
		"networking.k8s.io/v1/NetworkPolicyList",
		"networking.k8s.io/v1alpha1/ClusterCIDRList",
		"networking.k8s.io/v1alpha1/IPAddressList",
		"networking.k8s.io/v1alpha1/ServiceCIDRList",
		"networking.k8s.io/v1beta1/IngressClassList",
		"networking.k8s.io/v1beta1/IngressList",
		"node.k8s.io/v1/RuntimeClassList",
		"node.k8s.io/v1alpha1/RuntimeClassList",
		"node.k8s.io/v1beta1/RuntimeClassList",
		"policy/v1/PodDisruptionBudgetList",
		"policy/v1beta1/PodDisruptionBudgetList",
		"policy/v1beta1/PodSecurityPolicyList",
		"rbac.authorization.k8s.io/v1/ClusterRoleBindingList",
		"rbac.authorization.k8s.io/v1/ClusterRoleList",
		"rbac.authorization.k8s.io/v1/RoleBindingList",
		"rbac.authorization.k8s.io/v1/RoleList",
		"rbac.authorization.k8s.io/v1alpha1/ClusterRoleBindingList",
		"rbac.authorization.k8s.io/v1alpha1/ClusterRoleList",
		"rbac.authorization.k8s.io/v1alpha1/RoleBindingList",
		"rbac.authorization.k8s.io/v1alpha1/RoleList",
		"rbac.authorization.k8s.io/v1beta1/ClusterRoleBindingList",
		"rbac.authorization.k8s.io/v1beta1/ClusterRoleList",
		"rbac.authorization.k8s.io/v1beta1/RoleBindingList",
		"rbac.authorization.k8s.io/v1beta1/RoleList",
		"resource.k8s.io/v1alpha1/PodSchedulingList",
		"resource.k8s.io/v1alpha1/ResourceClaimList",
		"resource.k8s.io/v1alpha1/ResourceClaimTemplateList",
		"resource.k8s.io/v1alpha1/ResourceClassList",
		"resource.k8s.io/v1alpha2/PodSchedulingContextList",
		"resource.k8s.io/v1alpha2/ResourceClaimList",
		"resource.k8s.io/v1alpha2/ResourceClaimTemplateList",
		"resource.k8s.io/v1alpha2/ResourceClassList",
		"scheduling.k8s.io/v1/PriorityClassList",
		"scheduling.k8s.io/v1alpha1/PriorityClassList",
		"scheduling.k8s.io/v1beta1/PriorityClassList",
		"settings.k8s.io/v1alpha1/PodPresetList",
		"storage.k8s.io/v1/CSIDriverList",
		"storage.k8s.io/v1/CSINodeList",
		"storage.k8s.io/v1/CSIStorageCapacityList",
		"storage.k8s.io/v1/StorageClassList",
		"storage.k8s.io/v1/VolumeAttachmentList",
		"storage.k8s.io/v1alpha1/VolumeAttachmentList",
		"storage.k8s.io/v1alpha1/VolumeAttributesClassList",
		"storage.k8s.io/v1beta1/CSIDriverList",
		"storage.k8s.io/v1beta1/CSINodeList",
		"storage.k8s.io/v1beta1/CSIStorageCapacityList",
		"storage.k8s.io/v1beta1/StorageClassList",
		"storage.k8s.io/v1beta1/VolumeAttachmentList":
		return true
	default:
		return false
	}
}

func RegisterResource(ctx *pulumi.Context, apiVersion, kind, name string, props pulumi.Input,
	opts ...pulumi.ResourceOption) (pulumi.CustomResource, error) {
	fullKind := fmt.Sprintf("%s/%s", apiVersion, kind)
	switch fullKind {
	case "admissionregistration.k8s.io/v1/MutatingWebhookConfiguration":
		var res admissionregistrationv1.MutatingWebhookConfiguration
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1/ValidatingWebhookConfiguration":
		var res admissionregistrationv1.ValidatingWebhookConfiguration
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1alpha1/ValidatingAdmissionPolicy":
		var res admissionregistrationv1alpha1.ValidatingAdmissionPolicy
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1alpha1/ValidatingAdmissionPolicyBinding":
		var res admissionregistrationv1alpha1.ValidatingAdmissionPolicyBinding
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicyBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1beta1/MutatingWebhookConfiguration":
		var res admissionregistrationv1beta1.MutatingWebhookConfiguration
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicy":
		var res admissionregistrationv1beta1.ValidatingAdmissionPolicy
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicyBinding":
		var res admissionregistrationv1beta1.ValidatingAdmissionPolicyBinding
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicyBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfiguration":
		var res admissionregistrationv1beta1.ValidatingWebhookConfiguration
		err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apiextensions.k8s.io/v1/CustomResourceDefinition":
		var res apiextensionsv1.CustomResourceDefinition
		err := ctx.RegisterResource("kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apiextensions.k8s.io/v1beta1/CustomResourceDefinition":
		var res apiextensionsv1beta1.CustomResourceDefinition
		err := ctx.RegisterResource("kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinition", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apiregistration.k8s.io/v1/APIService":
		var res apiregistrationv1.APIService
		err := ctx.RegisterResource("kubernetes:apiregistration.k8s.io/v1:APIService", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apiregistration.k8s.io/v1beta1/APIService":
		var res apiregistrationv1beta1.APIService
		err := ctx.RegisterResource("kubernetes:apiregistration.k8s.io/v1beta1:APIService", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1/ControllerRevision":
		var res appsv1.ControllerRevision
		err := ctx.RegisterResource("kubernetes:apps/v1:ControllerRevision", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1/DaemonSet":
		var res appsv1.DaemonSet
		err := ctx.RegisterResource("kubernetes:apps/v1:DaemonSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1/Deployment":
		var res appsv1.Deployment
		err := ctx.RegisterResource("kubernetes:apps/v1:Deployment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1/ReplicaSet":
		var res appsv1.ReplicaSet
		err := ctx.RegisterResource("kubernetes:apps/v1:ReplicaSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1/StatefulSet":
		var res appsv1.StatefulSet
		err := ctx.RegisterResource("kubernetes:apps/v1:StatefulSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta1/ControllerRevision":
		var res appsv1beta1.ControllerRevision
		err := ctx.RegisterResource("kubernetes:apps/v1beta1:ControllerRevision", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta1/Deployment":
		var res appsv1beta1.Deployment
		err := ctx.RegisterResource("kubernetes:apps/v1beta1:Deployment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta1/StatefulSet":
		var res appsv1beta1.StatefulSet
		err := ctx.RegisterResource("kubernetes:apps/v1beta1:StatefulSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta2/ControllerRevision":
		var res appsv1beta2.ControllerRevision
		err := ctx.RegisterResource("kubernetes:apps/v1beta2:ControllerRevision", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta2/DaemonSet":
		var res appsv1beta2.DaemonSet
		err := ctx.RegisterResource("kubernetes:apps/v1beta2:DaemonSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta2/Deployment":
		var res appsv1beta2.Deployment
		err := ctx.RegisterResource("kubernetes:apps/v1beta2:Deployment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta2/ReplicaSet":
		var res appsv1beta2.ReplicaSet
		err := ctx.RegisterResource("kubernetes:apps/v1beta2:ReplicaSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "apps/v1beta2/StatefulSet":
		var res appsv1beta2.StatefulSet
		err := ctx.RegisterResource("kubernetes:apps/v1beta2:StatefulSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "auditregistration.k8s.io/v1alpha1/AuditSink":
		var res auditregistrationv1alpha1.AuditSink
		err := ctx.RegisterResource("kubernetes:auditregistration.k8s.io/v1alpha1:AuditSink", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "autoscaling/v1/HorizontalPodAutoscaler":
		var res autoscalingv1.HorizontalPodAutoscaler
		err := ctx.RegisterResource("kubernetes:autoscaling/v1:HorizontalPodAutoscaler", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "autoscaling/v2/HorizontalPodAutoscaler":
		var res autoscalingv2.HorizontalPodAutoscaler
		err := ctx.RegisterResource("kubernetes:autoscaling/v2:HorizontalPodAutoscaler", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "autoscaling/v2beta1/HorizontalPodAutoscaler":
		var res autoscalingv2beta1.HorizontalPodAutoscaler
		err := ctx.RegisterResource("kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "autoscaling/v2beta2/HorizontalPodAutoscaler":
		var res autoscalingv2beta2.HorizontalPodAutoscaler
		err := ctx.RegisterResource("kubernetes:autoscaling/v2beta2:HorizontalPodAutoscaler", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "batch/v1/CronJob":
		var res batchv1.CronJob
		err := ctx.RegisterResource("kubernetes:batch/v1:CronJob", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "batch/v1/Job":
		var res batchv1.Job
		err := ctx.RegisterResource("kubernetes:batch/v1:Job", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "batch/v1beta1/CronJob":
		var res batchv1beta1.CronJob
		err := ctx.RegisterResource("kubernetes:batch/v1beta1:CronJob", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "batch/v2alpha1/CronJob":
		var res batchv2alpha1.CronJob
		err := ctx.RegisterResource("kubernetes:batch/v2alpha1:CronJob", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "certificates.k8s.io/v1/CertificateSigningRequest":
		var res certificatesv1.CertificateSigningRequest
		err := ctx.RegisterResource("kubernetes:certificates.k8s.io/v1:CertificateSigningRequest", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "certificates.k8s.io/v1alpha1/ClusterTrustBundle":
		var res certificatesv1alpha1.ClusterTrustBundle
		err := ctx.RegisterResource("kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundle", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "certificates.k8s.io/v1beta1/CertificateSigningRequest":
		var res certificatesv1beta1.CertificateSigningRequest
		err := ctx.RegisterResource("kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequest", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "coordination.k8s.io/v1/Lease":
		var res coordinationv1.Lease
		err := ctx.RegisterResource("kubernetes:coordination.k8s.io/v1:Lease", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "coordination.k8s.io/v1beta1/Lease":
		var res coordinationv1beta1.Lease
		err := ctx.RegisterResource("kubernetes:coordination.k8s.io/v1beta1:Lease", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Binding":
		var res corev1.Binding
		err := ctx.RegisterResource("kubernetes:core/v1:Binding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/ConfigMap":
		var res corev1.ConfigMap
		err := ctx.RegisterResource("kubernetes:core/v1:ConfigMap", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Endpoints":
		var res corev1.Endpoints
		err := ctx.RegisterResource("kubernetes:core/v1:Endpoints", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Event":
		var res corev1.Event
		err := ctx.RegisterResource("kubernetes:core/v1:Event", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/LimitRange":
		var res corev1.LimitRange
		err := ctx.RegisterResource("kubernetes:core/v1:LimitRange", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Namespace":
		var res corev1.Namespace
		err := ctx.RegisterResource("kubernetes:core/v1:Namespace", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Node":
		var res corev1.Node
		err := ctx.RegisterResource("kubernetes:core/v1:Node", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/PersistentVolume":
		var res corev1.PersistentVolume
		err := ctx.RegisterResource("kubernetes:core/v1:PersistentVolume", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/PersistentVolumeClaim":
		var res corev1.PersistentVolumeClaim
		err := ctx.RegisterResource("kubernetes:core/v1:PersistentVolumeClaim", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Pod":
		var res corev1.Pod
		err := ctx.RegisterResource("kubernetes:core/v1:Pod", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/PodTemplate":
		var res corev1.PodTemplate
		err := ctx.RegisterResource("kubernetes:core/v1:PodTemplate", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/ReplicationController":
		var res corev1.ReplicationController
		err := ctx.RegisterResource("kubernetes:core/v1:ReplicationController", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/ResourceQuota":
		var res corev1.ResourceQuota
		err := ctx.RegisterResource("kubernetes:core/v1:ResourceQuota", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Secret":
		var res corev1.Secret
		err := ctx.RegisterResource("kubernetes:core/v1:Secret", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/Service":
		var res corev1.Service
		err := ctx.RegisterResource("kubernetes:core/v1:Service", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "v1/ServiceAccount":
		var res corev1.ServiceAccount
		err := ctx.RegisterResource("kubernetes:core/v1:ServiceAccount", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "discovery.k8s.io/v1/EndpointSlice":
		var res discoveryv1.EndpointSlice
		err := ctx.RegisterResource("kubernetes:discovery.k8s.io/v1:EndpointSlice", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "discovery.k8s.io/v1beta1/EndpointSlice":
		var res discoveryv1beta1.EndpointSlice
		err := ctx.RegisterResource("kubernetes:discovery.k8s.io/v1beta1:EndpointSlice", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "events.k8s.io/v1/Event":
		var res eventsv1.Event
		err := ctx.RegisterResource("kubernetes:events.k8s.io/v1:Event", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "events.k8s.io/v1beta1/Event":
		var res eventsv1beta1.Event
		err := ctx.RegisterResource("kubernetes:events.k8s.io/v1beta1:Event", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/DaemonSet":
		var res extensionsv1beta1.DaemonSet
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:DaemonSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/Deployment":
		var res extensionsv1beta1.Deployment
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:Deployment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/Ingress":
		var res extensionsv1beta1.Ingress
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:Ingress", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/NetworkPolicy":
		var res extensionsv1beta1.NetworkPolicy
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:NetworkPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/PodSecurityPolicy":
		var res extensionsv1beta1.PodSecurityPolicy
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:PodSecurityPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "extensions/v1beta1/ReplicaSet":
		var res extensionsv1beta1.ReplicaSet
		err := ctx.RegisterResource("kubernetes:extensions/v1beta1:ReplicaSet", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1/FlowSchema":
		var res flowcontrolv1.FlowSchema
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1:FlowSchema", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1/PriorityLevelConfiguration":
		var res flowcontrolv1.PriorityLevelConfiguration
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1:PriorityLevelConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1alpha1/FlowSchema":
		var res flowcontrolv1alpha1.FlowSchema
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:FlowSchema", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1alpha1/PriorityLevelConfiguration":
		var res flowcontrolv1alpha1.PriorityLevelConfiguration
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:PriorityLevelConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta1/FlowSchema":
		var res flowcontrolv1beta1.FlowSchema
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:FlowSchema", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta1/PriorityLevelConfiguration":
		var res flowcontrolv1beta1.PriorityLevelConfiguration
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:PriorityLevelConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta2/FlowSchema":
		var res flowcontrolv1beta2.FlowSchema
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:FlowSchema", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta2/PriorityLevelConfiguration":
		var res flowcontrolv1beta2.PriorityLevelConfiguration
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:PriorityLevelConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta3/FlowSchema":
		var res flowcontrolv1beta3.FlowSchema
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:FlowSchema", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "flowcontrol.apiserver.k8s.io/v1beta3/PriorityLevelConfiguration":
		var res flowcontrolv1beta3.PriorityLevelConfiguration
		err := ctx.RegisterResource("kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:PriorityLevelConfiguration", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "meta/v1/Status":
		var res metav1.Status
		err := ctx.RegisterResource("kubernetes:meta/v1:Status", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1/Ingress":
		var res networkingv1.Ingress
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1:Ingress", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1/IngressClass":
		var res networkingv1.IngressClass
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1:IngressClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1/NetworkPolicy":
		var res networkingv1.NetworkPolicy
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1:NetworkPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1alpha1/ClusterCIDR":
		var res networkingv1alpha1.ClusterCIDR
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:ClusterCIDR", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1alpha1/IPAddress":
		var res networkingv1alpha1.IPAddress
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:IPAddress", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1alpha1/ServiceCIDR":
		var res networkingv1alpha1.ServiceCIDR
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:ServiceCIDR", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1beta1/Ingress":
		var res networkingv1beta1.Ingress
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1beta1:Ingress", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "networking.k8s.io/v1beta1/IngressClass":
		var res networkingv1beta1.IngressClass
		err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1beta1:IngressClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "node.k8s.io/v1/RuntimeClass":
		var res nodev1.RuntimeClass
		err := ctx.RegisterResource("kubernetes:node.k8s.io/v1:RuntimeClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "node.k8s.io/v1alpha1/RuntimeClass":
		var res nodev1alpha1.RuntimeClass
		err := ctx.RegisterResource("kubernetes:node.k8s.io/v1alpha1:RuntimeClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "node.k8s.io/v1beta1/RuntimeClass":
		var res nodev1beta1.RuntimeClass
		err := ctx.RegisterResource("kubernetes:node.k8s.io/v1beta1:RuntimeClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "policy/v1/PodDisruptionBudget":
		var res policyv1.PodDisruptionBudget
		err := ctx.RegisterResource("kubernetes:policy/v1:PodDisruptionBudget", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "policy/v1beta1/PodDisruptionBudget":
		var res policyv1beta1.PodDisruptionBudget
		err := ctx.RegisterResource("kubernetes:policy/v1beta1:PodDisruptionBudget", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "policy/v1beta1/PodSecurityPolicy":
		var res policyv1beta1.PodSecurityPolicy
		err := ctx.RegisterResource("kubernetes:policy/v1beta1:PodSecurityPolicy", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1/ClusterRole":
		var res rbacv1.ClusterRole
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:ClusterRole", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1/ClusterRoleBinding":
		var res rbacv1.ClusterRoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1/Role":
		var res rbacv1.Role
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:Role", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1/RoleBinding":
		var res rbacv1.RoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1:RoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1alpha1/ClusterRole":
		var res rbacv1alpha1.ClusterRole
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1alpha1/ClusterRoleBinding":
		var res rbacv1alpha1.ClusterRoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1alpha1/Role":
		var res rbacv1alpha1.Role
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1alpha1:Role", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1alpha1/RoleBinding":
		var res rbacv1alpha1.RoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1beta1/ClusterRole":
		var res rbacv1beta1.ClusterRole
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1beta1/ClusterRoleBinding":
		var res rbacv1beta1.ClusterRoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1beta1/Role":
		var res rbacv1beta1.Role
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1beta1:Role", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "rbac.authorization.k8s.io/v1beta1/RoleBinding":
		var res rbacv1beta1.RoleBinding
		err := ctx.RegisterResource("kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha1/PodScheduling":
		var res resourcev1alpha1.PodScheduling
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha1:PodScheduling", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha1/ResourceClaim":
		var res resourcev1alpha1.ResourceClaim
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha1:ResourceClaim", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha1/ResourceClaimTemplate":
		var res resourcev1alpha1.ResourceClaimTemplate
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplate", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha1/ResourceClass":
		var res resourcev1alpha1.ResourceClass
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha1:ResourceClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha2/PodSchedulingContext":
		var res resourcev1alpha2.PodSchedulingContext
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:PodSchedulingContext", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha2/ResourceClaim":
		var res resourcev1alpha2.ResourceClaim
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaim", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha2/ResourceClaimTemplate":
		var res resourcev1alpha2.ResourceClaimTemplate
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaimTemplate", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "resource.k8s.io/v1alpha2/ResourceClass":
		var res resourcev1alpha2.ResourceClass
		err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "scheduling.k8s.io/v1/PriorityClass":
		var res schedulingv1.PriorityClass
		err := ctx.RegisterResource("kubernetes:scheduling.k8s.io/v1:PriorityClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "scheduling.k8s.io/v1alpha1/PriorityClass":
		var res schedulingv1alpha1.PriorityClass
		err := ctx.RegisterResource("kubernetes:scheduling.k8s.io/v1alpha1:PriorityClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "scheduling.k8s.io/v1beta1/PriorityClass":
		var res schedulingv1beta1.PriorityClass
		err := ctx.RegisterResource("kubernetes:scheduling.k8s.io/v1beta1:PriorityClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "settings.k8s.io/v1alpha1/PodPreset":
		var res settingsv1alpha1.PodPreset
		err := ctx.RegisterResource("kubernetes:settings.k8s.io/v1alpha1:PodPreset", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1/CSIDriver":
		var res storagev1.CSIDriver
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:CSIDriver", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1/CSINode":
		var res storagev1.CSINode
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:CSINode", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1/CSIStorageCapacity":
		var res storagev1.CSIStorageCapacity
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:CSIStorageCapacity", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1/StorageClass":
		var res storagev1.StorageClass
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:StorageClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1/VolumeAttachment":
		var res storagev1.VolumeAttachment
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1:VolumeAttachment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1alpha1/VolumeAttachment":
		var res storagev1alpha1.VolumeAttachment
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1alpha1:VolumeAttachment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1alpha1/VolumeAttributesClass":
		var res storagev1alpha1.VolumeAttributesClass
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1alpha1:VolumeAttributesClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1beta1/CSIDriver":
		var res storagev1beta1.CSIDriver
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:CSIDriver", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1beta1/CSINode":
		var res storagev1beta1.CSINode
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:CSINode", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1beta1/CSIStorageCapacity":
		var res storagev1beta1.CSIStorageCapacity
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:CSIStorageCapacity", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1beta1/StorageClass":
		var res storagev1beta1.StorageClass
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:StorageClass", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	case "storage.k8s.io/v1beta1/VolumeAttachment":
		var res storagev1beta1.VolumeAttachment
		err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1beta1:VolumeAttachment", name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	default:
		var res apiextensions.CustomResource
		err := ctx.RegisterResource(fmt.Sprintf("kubernetes:%s:%s", apiVersion, kind), name, props, &res, opts...)
		if err != nil {
			return nil, err
		}
		return &res, nil
	}
}
