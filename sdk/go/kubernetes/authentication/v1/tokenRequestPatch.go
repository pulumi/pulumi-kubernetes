// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/installation-configuration/#server-side-apply) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// TokenRequest requests a token for a given service account.
type TokenRequestPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenRequestSpecPatchPtrOutput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the token can be authenticated.
	Status TokenRequestStatusPatchPtrOutput `pulumi:"status"`
}

// NewTokenRequestPatch registers a new resource with the given unique name, arguments, and options.
func NewTokenRequestPatch(ctx *pulumi.Context,
	name string, args *TokenRequestPatchArgs, opts ...pulumi.ResourceOption) (*TokenRequestPatch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	args.ApiVersion = pulumi.StringPtr("authentication.k8s.io/v1")
	args.Kind = pulumi.StringPtr("TokenRequest")
	var resource TokenRequestPatch
	err := ctx.RegisterResource("kubernetes:authentication.k8s.io/v1:TokenRequestPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTokenRequestPatch gets an existing TokenRequestPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTokenRequestPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenRequestPatchState, opts ...pulumi.ResourceOption) (*TokenRequestPatch, error) {
	var resource TokenRequestPatch
	err := ctx.ReadResource("kubernetes:authentication.k8s.io/v1:TokenRequestPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TokenRequestPatch resources.
type tokenRequestPatchState struct {
}

type TokenRequestPatchState struct {
}

func (TokenRequestPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenRequestPatchState)(nil)).Elem()
}

type tokenRequestPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec *TokenRequestSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a TokenRequestPatch resource.
type TokenRequestPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchInput
	// Spec holds information about the request being evaluated
	Spec TokenRequestSpecPatchPtrInput
}

func (TokenRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenRequestPatchArgs)(nil)).Elem()
}

type TokenRequestPatchInput interface {
	pulumi.Input

	ToTokenRequestPatchOutput() TokenRequestPatchOutput
	ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput
}

func (*TokenRequestPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestPatch)(nil)).Elem()
}

func (i *TokenRequestPatch) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return i.ToTokenRequestPatchOutputWithContext(context.Background())
}

func (i *TokenRequestPatch) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchOutput)
}

// TokenRequestPatchArrayInput is an input type that accepts TokenRequestPatchArray and TokenRequestPatchArrayOutput values.
// You can construct a concrete instance of `TokenRequestPatchArrayInput` via:
//
//          TokenRequestPatchArray{ TokenRequestPatchArgs{...} }
type TokenRequestPatchArrayInput interface {
	pulumi.Input

	ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput
	ToTokenRequestPatchArrayOutputWithContext(context.Context) TokenRequestPatchArrayOutput
}

type TokenRequestPatchArray []TokenRequestPatchInput

func (TokenRequestPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenRequestPatch)(nil)).Elem()
}

func (i TokenRequestPatchArray) ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput {
	return i.ToTokenRequestPatchArrayOutputWithContext(context.Background())
}

func (i TokenRequestPatchArray) ToTokenRequestPatchArrayOutputWithContext(ctx context.Context) TokenRequestPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchArrayOutput)
}

// TokenRequestPatchMapInput is an input type that accepts TokenRequestPatchMap and TokenRequestPatchMapOutput values.
// You can construct a concrete instance of `TokenRequestPatchMapInput` via:
//
//          TokenRequestPatchMap{ "key": TokenRequestPatchArgs{...} }
type TokenRequestPatchMapInput interface {
	pulumi.Input

	ToTokenRequestPatchMapOutput() TokenRequestPatchMapOutput
	ToTokenRequestPatchMapOutputWithContext(context.Context) TokenRequestPatchMapOutput
}

type TokenRequestPatchMap map[string]TokenRequestPatchInput

func (TokenRequestPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenRequestPatch)(nil)).Elem()
}

func (i TokenRequestPatchMap) ToTokenRequestPatchMapOutput() TokenRequestPatchMapOutput {
	return i.ToTokenRequestPatchMapOutputWithContext(context.Background())
}

func (i TokenRequestPatchMap) ToTokenRequestPatchMapOutputWithContext(ctx context.Context) TokenRequestPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchMapOutput)
}

type TokenRequestPatchOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return o
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenRequestPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenRequestPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TokenRequestPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *TokenRequestPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated
func (o TokenRequestPatchOutput) Spec() TokenRequestSpecPatchPtrOutput {
	return o.ApplyT(func(v *TokenRequestPatch) TokenRequestSpecPatchPtrOutput { return v.Spec }).(TokenRequestSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the token can be authenticated.
func (o TokenRequestPatchOutput) Status() TokenRequestStatusPatchPtrOutput {
	return o.ApplyT(func(v *TokenRequestPatch) TokenRequestStatusPatchPtrOutput { return v.Status }).(TokenRequestStatusPatchPtrOutput)
}

type TokenRequestPatchArrayOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchArrayOutput) ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput {
	return o
}

func (o TokenRequestPatchArrayOutput) ToTokenRequestPatchArrayOutputWithContext(ctx context.Context) TokenRequestPatchArrayOutput {
	return o
}

func (o TokenRequestPatchArrayOutput) Index(i pulumi.IntInput) TokenRequestPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TokenRequestPatch {
		return vs[0].([]*TokenRequestPatch)[vs[1].(int)]
	}).(TokenRequestPatchOutput)
}

type TokenRequestPatchMapOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchMapOutput) ToTokenRequestPatchMapOutput() TokenRequestPatchMapOutput {
	return o
}

func (o TokenRequestPatchMapOutput) ToTokenRequestPatchMapOutputWithContext(ctx context.Context) TokenRequestPatchMapOutput {
	return o
}

func (o TokenRequestPatchMapOutput) MapIndex(k pulumi.StringInput) TokenRequestPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TokenRequestPatch {
		return vs[0].(map[string]*TokenRequestPatch)[vs[1].(string)]
	}).(TokenRequestPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchInput)(nil)).Elem(), &TokenRequestPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchArrayInput)(nil)).Elem(), TokenRequestPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchMapInput)(nil)).Elem(), TokenRequestPatchMap{})
	pulumi.RegisterOutputType(TokenRequestPatchOutput{})
	pulumi.RegisterOutputType(TokenRequestPatchArrayOutput{})
	pulumi.RegisterOutputType(TokenRequestPatchMapOutput{})
}
