// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// UID of the referent.
	Uid *string `pulumi:"uid"`
}

type BoundObjectReferenceInput interface {
	pulumi.Input

	ToBoundObjectReferenceOutput() BoundObjectReferenceOutput
	ToBoundObjectReferenceOutputWithContext(context.Context) BoundObjectReferenceOutput
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BoundObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return i.ToBoundObjectReferenceOutputWithContext(context.Background())
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferenceOutput)
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceOutput struct { *pulumi.OutputState }

func (BoundObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return o
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return o
}

// API version of the referent.
func (o BoundObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BoundObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BoundObjectReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BoundObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BoundObjectReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpec struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []string `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef *BoundObjectReference `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

type TokenRequestSpecInput interface {
	pulumi.Input

	ToTokenRequestSpecOutput() TokenRequestSpecOutput
	ToTokenRequestSpecOutputWithContext(context.Context) TokenRequestSpecOutput
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecArgs struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef BoundObjectReferencePtrInput `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return i.ToTokenRequestSpecOutputWithContext(context.Background())
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecOutput struct { *pulumi.OutputState }

func (TokenRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return o
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return o
}

// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func (v TokenRequestSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecOutput) BoundObjectRef() BoundObjectReferencePtrOutput {
	return o.ApplyT(func (v TokenRequestSpec) *BoundObjectReference { return v.BoundObjectRef }).(BoundObjectReferencePtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TokenRequestSpec) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatus struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp *string `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

type TokenRequestStatusInput interface {
	pulumi.Input

	ToTokenRequestStatusOutput() TokenRequestStatusOutput
	ToTokenRequestStatusOutputWithContext(context.Context) TokenRequestStatusOutput
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusArgs struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp pulumi.StringPtrInput `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return i.ToTokenRequestStatusOutputWithContext(context.Background())
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusOutput struct { *pulumi.OutputState }

func (TokenRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return o
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return o
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusOutput) ExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TokenRequestStatus) *string { return v.ExpirationTimestamp }).(pulumi.StringPtrOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TokenRequestStatus) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpec struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []string `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

type TokenReviewSpecInput interface {
	pulumi.Input

	ToTokenReviewSpecOutput() TokenReviewSpecOutput
	ToTokenReviewSpecOutputWithContext(context.Context) TokenReviewSpecOutput
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecArgs struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return i.ToTokenReviewSpecOutputWithContext(context.Background())
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecOutput struct { *pulumi.OutputState }

func (TokenReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return o
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return o
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func (v TokenReviewSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TokenReviewSpec) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatus struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []string `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error *string `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User *UserInfo `pulumi:"user"`
}

type TokenReviewStatusInput interface {
	pulumi.Input

	ToTokenReviewStatusOutput() TokenReviewStatusOutput
	ToTokenReviewStatusOutputWithContext(context.Context) TokenReviewStatusOutput
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusArgs struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated pulumi.BoolPtrInput `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error pulumi.StringPtrInput `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User UserInfoPtrInput `pulumi:"user"`
}

func (TokenReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return i.ToTokenReviewStatusOutputWithContext(context.Background())
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusOutput struct { *pulumi.OutputState }

func (TokenReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return o
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return o
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func (v TokenReviewStatus) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v TokenReviewStatus) *bool { return v.Authenticated }).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TokenReviewStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusOutput) User() UserInfoPtrOutput {
	return o.ApplyT(func (v TokenReviewStatus) *UserInfo { return v.User }).(UserInfoPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfo struct {
	// Any additional information provided by the authenticator.
	Extra map[string][]string `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid *string `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username *string `pulumi:"username"`
}

type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoArgs struct {
	// Any additional information provided by the authenticator.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoOutput struct { *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

// Any additional information provided by the authenticator.
func (o UserInfoOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func (v UserInfo) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v UserInfo) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func (v UserInfo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func (v UserInfo) *string { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BoundObjectReferenceOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
}
