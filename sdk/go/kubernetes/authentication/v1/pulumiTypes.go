// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// UID of the referent.
	Uid *string `pulumi:"uid"`
}

// BoundObjectReferenceInput is an input type that accepts BoundObjectReferenceArgs and BoundObjectReferenceOutput values.
// You can construct a concrete instance of `BoundObjectReferenceInput` via:
//
//	BoundObjectReferenceArgs{...}
type BoundObjectReferenceInput interface {
	pulumi.Input

	ToBoundObjectReferenceOutput() BoundObjectReferenceOutput
	ToBoundObjectReferenceOutputWithContext(context.Context) BoundObjectReferenceOutput
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BoundObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return i.ToBoundObjectReferenceOutputWithContext(context.Background())
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferenceOutput)
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return i.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferenceOutput).ToBoundObjectReferencePtrOutputWithContext(ctx)
}

// BoundObjectReferencePtrInput is an input type that accepts BoundObjectReferenceArgs, BoundObjectReferencePtr and BoundObjectReferencePtrOutput values.
// You can construct a concrete instance of `BoundObjectReferencePtrInput` via:
//
//	        BoundObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type BoundObjectReferencePtrInput interface {
	pulumi.Input

	ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput
	ToBoundObjectReferencePtrOutputWithContext(context.Context) BoundObjectReferencePtrOutput
}

type boundObjectReferencePtrType BoundObjectReferenceArgs

func BoundObjectReferencePtr(v *BoundObjectReferenceArgs) BoundObjectReferencePtrInput {
	return (*boundObjectReferencePtrType)(v)
}

func (*boundObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReference)(nil)).Elem()
}

func (i *boundObjectReferencePtrType) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return i.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (i *boundObjectReferencePtrType) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferencePtrOutput)
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceOutput struct{ *pulumi.OutputState }

func (BoundObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return o
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return o
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return o.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BoundObjectReference) *BoundObjectReference {
		return &v
	}).(BoundObjectReferencePtrOutput)
}

// API version of the referent.
func (o BoundObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type BoundObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (BoundObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReference)(nil)).Elem()
}

func (o BoundObjectReferencePtrOutput) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return o
}

func (o BoundObjectReferencePtrOutput) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return o
}

func (o BoundObjectReferencePtrOutput) Elem() BoundObjectReferenceOutput {
	return o.ApplyT(func(v *BoundObjectReference) BoundObjectReference {
		if v != nil {
			return *v
		}
		var ret BoundObjectReference
		return ret
	}).(BoundObjectReferenceOutput)
}

// API version of the referent.
func (o BoundObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferencePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferencePatch struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// UID of the referent.
	Uid *string `pulumi:"uid"`
}

// BoundObjectReferencePatchInput is an input type that accepts BoundObjectReferencePatchArgs and BoundObjectReferencePatchOutput values.
// You can construct a concrete instance of `BoundObjectReferencePatchInput` via:
//
//	BoundObjectReferencePatchArgs{...}
type BoundObjectReferencePatchInput interface {
	pulumi.Input

	ToBoundObjectReferencePatchOutput() BoundObjectReferencePatchOutput
	ToBoundObjectReferencePatchOutputWithContext(context.Context) BoundObjectReferencePatchOutput
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferencePatchArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BoundObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReferencePatch)(nil)).Elem()
}

func (i BoundObjectReferencePatchArgs) ToBoundObjectReferencePatchOutput() BoundObjectReferencePatchOutput {
	return i.ToBoundObjectReferencePatchOutputWithContext(context.Background())
}

func (i BoundObjectReferencePatchArgs) ToBoundObjectReferencePatchOutputWithContext(ctx context.Context) BoundObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferencePatchOutput)
}

func (i BoundObjectReferencePatchArgs) ToBoundObjectReferencePatchPtrOutput() BoundObjectReferencePatchPtrOutput {
	return i.ToBoundObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i BoundObjectReferencePatchArgs) ToBoundObjectReferencePatchPtrOutputWithContext(ctx context.Context) BoundObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferencePatchOutput).ToBoundObjectReferencePatchPtrOutputWithContext(ctx)
}

// BoundObjectReferencePatchPtrInput is an input type that accepts BoundObjectReferencePatchArgs, BoundObjectReferencePatchPtr and BoundObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `BoundObjectReferencePatchPtrInput` via:
//
//	        BoundObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type BoundObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToBoundObjectReferencePatchPtrOutput() BoundObjectReferencePatchPtrOutput
	ToBoundObjectReferencePatchPtrOutputWithContext(context.Context) BoundObjectReferencePatchPtrOutput
}

type boundObjectReferencePatchPtrType BoundObjectReferencePatchArgs

func BoundObjectReferencePatchPtr(v *BoundObjectReferencePatchArgs) BoundObjectReferencePatchPtrInput {
	return (*boundObjectReferencePatchPtrType)(v)
}

func (*boundObjectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReferencePatch)(nil)).Elem()
}

func (i *boundObjectReferencePatchPtrType) ToBoundObjectReferencePatchPtrOutput() BoundObjectReferencePatchPtrOutput {
	return i.ToBoundObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *boundObjectReferencePatchPtrType) ToBoundObjectReferencePatchPtrOutputWithContext(ctx context.Context) BoundObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferencePatchPtrOutput)
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (BoundObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReferencePatch)(nil)).Elem()
}

func (o BoundObjectReferencePatchOutput) ToBoundObjectReferencePatchOutput() BoundObjectReferencePatchOutput {
	return o
}

func (o BoundObjectReferencePatchOutput) ToBoundObjectReferencePatchOutputWithContext(ctx context.Context) BoundObjectReferencePatchOutput {
	return o
}

func (o BoundObjectReferencePatchOutput) ToBoundObjectReferencePatchPtrOutput() BoundObjectReferencePatchPtrOutput {
	return o.ToBoundObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o BoundObjectReferencePatchOutput) ToBoundObjectReferencePatchPtrOutputWithContext(ctx context.Context) BoundObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BoundObjectReferencePatch) *BoundObjectReferencePatch {
		return &v
	}).(BoundObjectReferencePatchPtrOutput)
}

// API version of the referent.
func (o BoundObjectReferencePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReferencePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type BoundObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (BoundObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReferencePatch)(nil)).Elem()
}

func (o BoundObjectReferencePatchPtrOutput) ToBoundObjectReferencePatchPtrOutput() BoundObjectReferencePatchPtrOutput {
	return o
}

func (o BoundObjectReferencePatchPtrOutput) ToBoundObjectReferencePatchPtrOutputWithContext(ctx context.Context) BoundObjectReferencePatchPtrOutput {
	return o
}

func (o BoundObjectReferencePatchPtrOutput) Elem() BoundObjectReferencePatchOutput {
	return o.ApplyT(func(v *BoundObjectReferencePatch) BoundObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret BoundObjectReferencePatch
		return ret
	}).(BoundObjectReferencePatchOutput)
}

// API version of the referent.
func (o BoundObjectReferencePatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferencePatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Status is filled in by the server with the user attributes.
	Status *SelfSubjectReviewStatus `pulumi:"status"`
}

// SelfSubjectReviewInput is an input type that accepts SelfSubjectReviewArgs and SelfSubjectReviewOutput values.
// You can construct a concrete instance of `SelfSubjectReviewInput` via:
//
//	SelfSubjectReviewArgs{...}
type SelfSubjectReviewInput interface {
	pulumi.Input

	ToSelfSubjectReviewOutput() SelfSubjectReviewOutput
	ToSelfSubjectReviewOutputWithContext(context.Context) SelfSubjectReviewOutput
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Status is filled in by the server with the user attributes.
	Status SelfSubjectReviewStatusPtrInput `pulumi:"status"`
}

func (SelfSubjectReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReview)(nil)).Elem()
}

func (i SelfSubjectReviewArgs) ToSelfSubjectReviewOutput() SelfSubjectReviewOutput {
	return i.ToSelfSubjectReviewOutputWithContext(context.Background())
}

func (i SelfSubjectReviewArgs) ToSelfSubjectReviewOutputWithContext(ctx context.Context) SelfSubjectReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewOutput)
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReview)(nil)).Elem()
}

func (o SelfSubjectReviewOutput) ToSelfSubjectReviewOutput() SelfSubjectReviewOutput {
	return o
}

func (o SelfSubjectReviewOutput) ToSelfSubjectReviewOutputWithContext(ctx context.Context) SelfSubjectReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SelfSubjectReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SelfSubjectReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Status is filled in by the server with the user attributes.
func (o SelfSubjectReviewOutput) Status() SelfSubjectReviewStatusPtrOutput {
	return o.ApplyT(func(v SelfSubjectReview) *SelfSubjectReviewStatus { return v.Status }).(SelfSubjectReviewStatusPtrOutput)
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Status is filled in by the server with the user attributes.
	Status *SelfSubjectReviewStatusPatch `pulumi:"status"`
}

// SelfSubjectReviewPatchInput is an input type that accepts SelfSubjectReviewPatchArgs and SelfSubjectReviewPatchOutput values.
// You can construct a concrete instance of `SelfSubjectReviewPatchInput` via:
//
//	SelfSubjectReviewPatchArgs{...}
type SelfSubjectReviewPatchInput interface {
	pulumi.Input

	ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput
	ToSelfSubjectReviewPatchOutputWithContext(context.Context) SelfSubjectReviewPatchOutput
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Status is filled in by the server with the user attributes.
	Status SelfSubjectReviewStatusPatchPtrInput `pulumi:"status"`
}

func (SelfSubjectReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewPatch)(nil)).Elem()
}

func (i SelfSubjectReviewPatchArgs) ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput {
	return i.ToSelfSubjectReviewPatchOutputWithContext(context.Background())
}

func (i SelfSubjectReviewPatchArgs) ToSelfSubjectReviewPatchOutputWithContext(ctx context.Context) SelfSubjectReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewPatchOutput)
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewPatch)(nil)).Elem()
}

func (o SelfSubjectReviewPatchOutput) ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput {
	return o
}

func (o SelfSubjectReviewPatchOutput) ToSelfSubjectReviewPatchOutputWithContext(ctx context.Context) SelfSubjectReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SelfSubjectReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Status is filled in by the server with the user attributes.
func (o SelfSubjectReviewPatchOutput) Status() SelfSubjectReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewPatch) *SelfSubjectReviewStatusPatch { return v.Status }).(SelfSubjectReviewStatusPatchPtrOutput)
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatus struct {
	// User attributes of the user making this request.
	UserInfo *UserInfo `pulumi:"userInfo"`
}

// SelfSubjectReviewStatusInput is an input type that accepts SelfSubjectReviewStatusArgs and SelfSubjectReviewStatusOutput values.
// You can construct a concrete instance of `SelfSubjectReviewStatusInput` via:
//
//	SelfSubjectReviewStatusArgs{...}
type SelfSubjectReviewStatusInput interface {
	pulumi.Input

	ToSelfSubjectReviewStatusOutput() SelfSubjectReviewStatusOutput
	ToSelfSubjectReviewStatusOutputWithContext(context.Context) SelfSubjectReviewStatusOutput
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatusArgs struct {
	// User attributes of the user making this request.
	UserInfo UserInfoPtrInput `pulumi:"userInfo"`
}

func (SelfSubjectReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewStatus)(nil)).Elem()
}

func (i SelfSubjectReviewStatusArgs) ToSelfSubjectReviewStatusOutput() SelfSubjectReviewStatusOutput {
	return i.ToSelfSubjectReviewStatusOutputWithContext(context.Background())
}

func (i SelfSubjectReviewStatusArgs) ToSelfSubjectReviewStatusOutputWithContext(ctx context.Context) SelfSubjectReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusOutput)
}

func (i SelfSubjectReviewStatusArgs) ToSelfSubjectReviewStatusPtrOutput() SelfSubjectReviewStatusPtrOutput {
	return i.ToSelfSubjectReviewStatusPtrOutputWithContext(context.Background())
}

func (i SelfSubjectReviewStatusArgs) ToSelfSubjectReviewStatusPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusOutput).ToSelfSubjectReviewStatusPtrOutputWithContext(ctx)
}

// SelfSubjectReviewStatusPtrInput is an input type that accepts SelfSubjectReviewStatusArgs, SelfSubjectReviewStatusPtr and SelfSubjectReviewStatusPtrOutput values.
// You can construct a concrete instance of `SelfSubjectReviewStatusPtrInput` via:
//
//	        SelfSubjectReviewStatusArgs{...}
//
//	or:
//
//	        nil
type SelfSubjectReviewStatusPtrInput interface {
	pulumi.Input

	ToSelfSubjectReviewStatusPtrOutput() SelfSubjectReviewStatusPtrOutput
	ToSelfSubjectReviewStatusPtrOutputWithContext(context.Context) SelfSubjectReviewStatusPtrOutput
}

type selfSubjectReviewStatusPtrType SelfSubjectReviewStatusArgs

func SelfSubjectReviewStatusPtr(v *SelfSubjectReviewStatusArgs) SelfSubjectReviewStatusPtrInput {
	return (*selfSubjectReviewStatusPtrType)(v)
}

func (*selfSubjectReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewStatus)(nil)).Elem()
}

func (i *selfSubjectReviewStatusPtrType) ToSelfSubjectReviewStatusPtrOutput() SelfSubjectReviewStatusPtrOutput {
	return i.ToSelfSubjectReviewStatusPtrOutputWithContext(context.Background())
}

func (i *selfSubjectReviewStatusPtrType) ToSelfSubjectReviewStatusPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusPtrOutput)
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatusOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewStatus)(nil)).Elem()
}

func (o SelfSubjectReviewStatusOutput) ToSelfSubjectReviewStatusOutput() SelfSubjectReviewStatusOutput {
	return o
}

func (o SelfSubjectReviewStatusOutput) ToSelfSubjectReviewStatusOutputWithContext(ctx context.Context) SelfSubjectReviewStatusOutput {
	return o
}

func (o SelfSubjectReviewStatusOutput) ToSelfSubjectReviewStatusPtrOutput() SelfSubjectReviewStatusPtrOutput {
	return o.ToSelfSubjectReviewStatusPtrOutputWithContext(context.Background())
}

func (o SelfSubjectReviewStatusOutput) ToSelfSubjectReviewStatusPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfSubjectReviewStatus) *SelfSubjectReviewStatus {
		return &v
	}).(SelfSubjectReviewStatusPtrOutput)
}

// User attributes of the user making this request.
func (o SelfSubjectReviewStatusOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewStatus) *UserInfo { return v.UserInfo }).(UserInfoPtrOutput)
}

type SelfSubjectReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewStatus)(nil)).Elem()
}

func (o SelfSubjectReviewStatusPtrOutput) ToSelfSubjectReviewStatusPtrOutput() SelfSubjectReviewStatusPtrOutput {
	return o
}

func (o SelfSubjectReviewStatusPtrOutput) ToSelfSubjectReviewStatusPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPtrOutput {
	return o
}

func (o SelfSubjectReviewStatusPtrOutput) Elem() SelfSubjectReviewStatusOutput {
	return o.ApplyT(func(v *SelfSubjectReviewStatus) SelfSubjectReviewStatus {
		if v != nil {
			return *v
		}
		var ret SelfSubjectReviewStatus
		return ret
	}).(SelfSubjectReviewStatusOutput)
}

// User attributes of the user making this request.
func (o SelfSubjectReviewStatusPtrOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewStatus) *UserInfo {
		if v == nil {
			return nil
		}
		return v.UserInfo
	}).(UserInfoPtrOutput)
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatusPatch struct {
	// User attributes of the user making this request.
	UserInfo *UserInfoPatch `pulumi:"userInfo"`
}

// SelfSubjectReviewStatusPatchInput is an input type that accepts SelfSubjectReviewStatusPatchArgs and SelfSubjectReviewStatusPatchOutput values.
// You can construct a concrete instance of `SelfSubjectReviewStatusPatchInput` via:
//
//	SelfSubjectReviewStatusPatchArgs{...}
type SelfSubjectReviewStatusPatchInput interface {
	pulumi.Input

	ToSelfSubjectReviewStatusPatchOutput() SelfSubjectReviewStatusPatchOutput
	ToSelfSubjectReviewStatusPatchOutputWithContext(context.Context) SelfSubjectReviewStatusPatchOutput
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatusPatchArgs struct {
	// User attributes of the user making this request.
	UserInfo UserInfoPatchPtrInput `pulumi:"userInfo"`
}

func (SelfSubjectReviewStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewStatusPatch)(nil)).Elem()
}

func (i SelfSubjectReviewStatusPatchArgs) ToSelfSubjectReviewStatusPatchOutput() SelfSubjectReviewStatusPatchOutput {
	return i.ToSelfSubjectReviewStatusPatchOutputWithContext(context.Background())
}

func (i SelfSubjectReviewStatusPatchArgs) ToSelfSubjectReviewStatusPatchOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusPatchOutput)
}

func (i SelfSubjectReviewStatusPatchArgs) ToSelfSubjectReviewStatusPatchPtrOutput() SelfSubjectReviewStatusPatchPtrOutput {
	return i.ToSelfSubjectReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i SelfSubjectReviewStatusPatchArgs) ToSelfSubjectReviewStatusPatchPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusPatchOutput).ToSelfSubjectReviewStatusPatchPtrOutputWithContext(ctx)
}

// SelfSubjectReviewStatusPatchPtrInput is an input type that accepts SelfSubjectReviewStatusPatchArgs, SelfSubjectReviewStatusPatchPtr and SelfSubjectReviewStatusPatchPtrOutput values.
// You can construct a concrete instance of `SelfSubjectReviewStatusPatchPtrInput` via:
//
//	        SelfSubjectReviewStatusPatchArgs{...}
//
//	or:
//
//	        nil
type SelfSubjectReviewStatusPatchPtrInput interface {
	pulumi.Input

	ToSelfSubjectReviewStatusPatchPtrOutput() SelfSubjectReviewStatusPatchPtrOutput
	ToSelfSubjectReviewStatusPatchPtrOutputWithContext(context.Context) SelfSubjectReviewStatusPatchPtrOutput
}

type selfSubjectReviewStatusPatchPtrType SelfSubjectReviewStatusPatchArgs

func SelfSubjectReviewStatusPatchPtr(v *SelfSubjectReviewStatusPatchArgs) SelfSubjectReviewStatusPatchPtrInput {
	return (*selfSubjectReviewStatusPatchPtrType)(v)
}

func (*selfSubjectReviewStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewStatusPatch)(nil)).Elem()
}

func (i *selfSubjectReviewStatusPatchPtrType) ToSelfSubjectReviewStatusPatchPtrOutput() SelfSubjectReviewStatusPatchPtrOutput {
	return i.ToSelfSubjectReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i *selfSubjectReviewStatusPatchPtrType) ToSelfSubjectReviewStatusPatchPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewStatusPatchPtrOutput)
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type SelfSubjectReviewStatusPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectReviewStatusPatch)(nil)).Elem()
}

func (o SelfSubjectReviewStatusPatchOutput) ToSelfSubjectReviewStatusPatchOutput() SelfSubjectReviewStatusPatchOutput {
	return o
}

func (o SelfSubjectReviewStatusPatchOutput) ToSelfSubjectReviewStatusPatchOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchOutput {
	return o
}

func (o SelfSubjectReviewStatusPatchOutput) ToSelfSubjectReviewStatusPatchPtrOutput() SelfSubjectReviewStatusPatchPtrOutput {
	return o.ToSelfSubjectReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (o SelfSubjectReviewStatusPatchOutput) ToSelfSubjectReviewStatusPatchPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfSubjectReviewStatusPatch) *SelfSubjectReviewStatusPatch {
		return &v
	}).(SelfSubjectReviewStatusPatchPtrOutput)
}

// User attributes of the user making this request.
func (o SelfSubjectReviewStatusPatchOutput) UserInfo() UserInfoPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectReviewStatusPatch) *UserInfoPatch { return v.UserInfo }).(UserInfoPatchPtrOutput)
}

type SelfSubjectReviewStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewStatusPatch)(nil)).Elem()
}

func (o SelfSubjectReviewStatusPatchPtrOutput) ToSelfSubjectReviewStatusPatchPtrOutput() SelfSubjectReviewStatusPatchPtrOutput {
	return o
}

func (o SelfSubjectReviewStatusPatchPtrOutput) ToSelfSubjectReviewStatusPatchPtrOutputWithContext(ctx context.Context) SelfSubjectReviewStatusPatchPtrOutput {
	return o
}

func (o SelfSubjectReviewStatusPatchPtrOutput) Elem() SelfSubjectReviewStatusPatchOutput {
	return o.ApplyT(func(v *SelfSubjectReviewStatusPatch) SelfSubjectReviewStatusPatch {
		if v != nil {
			return *v
		}
		var ret SelfSubjectReviewStatusPatch
		return ret
	}).(SelfSubjectReviewStatusPatchOutput)
}

// User attributes of the user making this request.
func (o SelfSubjectReviewStatusPatchPtrOutput) UserInfo() UserInfoPatchPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewStatusPatch) *UserInfoPatch {
		if v == nil {
			return nil
		}
		return v.UserInfo
	}).(UserInfoPatchPtrOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenRequestSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the token can be authenticated.
	Status *TokenRequestStatus `pulumi:"status"`
}

// TokenRequestInput is an input type that accepts TokenRequestArgs and TokenRequestOutput values.
// You can construct a concrete instance of `TokenRequestInput` via:
//
//	TokenRequestArgs{...}
type TokenRequestInput interface {
	pulumi.Input

	ToTokenRequestOutput() TokenRequestOutput
	ToTokenRequestOutputWithContext(context.Context) TokenRequestOutput
}

// TokenRequest requests a token for a given service account.
type TokenRequestArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenRequestSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the token can be authenticated.
	Status TokenRequestStatusPtrInput `pulumi:"status"`
}

func (TokenRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequest)(nil)).Elem()
}

func (i TokenRequestArgs) ToTokenRequestOutput() TokenRequestOutput {
	return i.ToTokenRequestOutputWithContext(context.Background())
}

func (i TokenRequestArgs) ToTokenRequestOutputWithContext(ctx context.Context) TokenRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequestOutput struct{ *pulumi.OutputState }

func (TokenRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequest)(nil)).Elem()
}

func (o TokenRequestOutput) ToTokenRequestOutput() TokenRequestOutput {
	return o
}

func (o TokenRequestOutput) ToTokenRequestOutputWithContext(ctx context.Context) TokenRequestOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenRequestOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequest) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenRequestOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequest) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TokenRequestOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TokenRequest) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated
func (o TokenRequestOutput) Spec() TokenRequestSpecOutput {
	return o.ApplyT(func(v TokenRequest) TokenRequestSpec { return v.Spec }).(TokenRequestSpecOutput)
}

// Status is filled in by the server and indicates whether the token can be authenticated.
func (o TokenRequestOutput) Status() TokenRequestStatusPtrOutput {
	return o.ApplyT(func(v TokenRequest) *TokenRequestStatus { return v.Status }).(TokenRequestStatusPtrOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequestPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec *TokenRequestSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the token can be authenticated.
	Status *TokenRequestStatusPatch `pulumi:"status"`
}

// TokenRequestPatchInput is an input type that accepts TokenRequestPatchArgs and TokenRequestPatchOutput values.
// You can construct a concrete instance of `TokenRequestPatchInput` via:
//
//	TokenRequestPatchArgs{...}
type TokenRequestPatchInput interface {
	pulumi.Input

	ToTokenRequestPatchOutput() TokenRequestPatchOutput
	ToTokenRequestPatchOutputWithContext(context.Context) TokenRequestPatchOutput
}

// TokenRequest requests a token for a given service account.
type TokenRequestPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenRequestSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the token can be authenticated.
	Status TokenRequestStatusPatchPtrInput `pulumi:"status"`
}

func (TokenRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestPatch)(nil)).Elem()
}

func (i TokenRequestPatchArgs) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return i.ToTokenRequestPatchOutputWithContext(context.Background())
}

func (i TokenRequestPatchArgs) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequestPatchOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return o
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenRequestPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenRequestPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TokenRequestPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated
func (o TokenRequestPatchOutput) Spec() TokenRequestSpecPatchPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *TokenRequestSpecPatch { return v.Spec }).(TokenRequestSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the token can be authenticated.
func (o TokenRequestPatchOutput) Status() TokenRequestStatusPatchPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *TokenRequestStatusPatch { return v.Status }).(TokenRequestStatusPatchPtrOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpec struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []string `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef *BoundObjectReference `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

// TokenRequestSpecInput is an input type that accepts TokenRequestSpecArgs and TokenRequestSpecOutput values.
// You can construct a concrete instance of `TokenRequestSpecInput` via:
//
//	TokenRequestSpecArgs{...}
type TokenRequestSpecInput interface {
	pulumi.Input

	ToTokenRequestSpecOutput() TokenRequestSpecOutput
	ToTokenRequestSpecOutputWithContext(context.Context) TokenRequestSpecOutput
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecArgs struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef BoundObjectReferencePtrInput `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return i.ToTokenRequestSpecOutputWithContext(context.Background())
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecOutput struct{ *pulumi.OutputState }

func (TokenRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return o
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return o
}

// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenRequestSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecOutput) BoundObjectRef() BoundObjectReferencePtrOutput {
	return o.ApplyT(func(v TokenRequestSpec) *BoundObjectReference { return v.BoundObjectRef }).(BoundObjectReferencePtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TokenRequestSpec) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecPatch struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []string `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef *BoundObjectReferencePatch `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

// TokenRequestSpecPatchInput is an input type that accepts TokenRequestSpecPatchArgs and TokenRequestSpecPatchOutput values.
// You can construct a concrete instance of `TokenRequestSpecPatchInput` via:
//
//	TokenRequestSpecPatchArgs{...}
type TokenRequestSpecPatchInput interface {
	pulumi.Input

	ToTokenRequestSpecPatchOutput() TokenRequestSpecPatchOutput
	ToTokenRequestSpecPatchOutputWithContext(context.Context) TokenRequestSpecPatchOutput
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecPatchArgs struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef BoundObjectReferencePatchPtrInput `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpecPatch)(nil)).Elem()
}

func (i TokenRequestSpecPatchArgs) ToTokenRequestSpecPatchOutput() TokenRequestSpecPatchOutput {
	return i.ToTokenRequestSpecPatchOutputWithContext(context.Background())
}

func (i TokenRequestSpecPatchArgs) ToTokenRequestSpecPatchOutputWithContext(ctx context.Context) TokenRequestSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecPatchOutput)
}

func (i TokenRequestSpecPatchArgs) ToTokenRequestSpecPatchPtrOutput() TokenRequestSpecPatchPtrOutput {
	return i.ToTokenRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (i TokenRequestSpecPatchArgs) ToTokenRequestSpecPatchPtrOutputWithContext(ctx context.Context) TokenRequestSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecPatchOutput).ToTokenRequestSpecPatchPtrOutputWithContext(ctx)
}

// TokenRequestSpecPatchPtrInput is an input type that accepts TokenRequestSpecPatchArgs, TokenRequestSpecPatchPtr and TokenRequestSpecPatchPtrOutput values.
// You can construct a concrete instance of `TokenRequestSpecPatchPtrInput` via:
//
//	        TokenRequestSpecPatchArgs{...}
//
//	or:
//
//	        nil
type TokenRequestSpecPatchPtrInput interface {
	pulumi.Input

	ToTokenRequestSpecPatchPtrOutput() TokenRequestSpecPatchPtrOutput
	ToTokenRequestSpecPatchPtrOutputWithContext(context.Context) TokenRequestSpecPatchPtrOutput
}

type tokenRequestSpecPatchPtrType TokenRequestSpecPatchArgs

func TokenRequestSpecPatchPtr(v *TokenRequestSpecPatchArgs) TokenRequestSpecPatchPtrInput {
	return (*tokenRequestSpecPatchPtrType)(v)
}

func (*tokenRequestSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestSpecPatch)(nil)).Elem()
}

func (i *tokenRequestSpecPatchPtrType) ToTokenRequestSpecPatchPtrOutput() TokenRequestSpecPatchPtrOutput {
	return i.ToTokenRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (i *tokenRequestSpecPatchPtrType) ToTokenRequestSpecPatchPtrOutputWithContext(ctx context.Context) TokenRequestSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecPatchPtrOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecPatchOutput struct{ *pulumi.OutputState }

func (TokenRequestSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpecPatch)(nil)).Elem()
}

func (o TokenRequestSpecPatchOutput) ToTokenRequestSpecPatchOutput() TokenRequestSpecPatchOutput {
	return o
}

func (o TokenRequestSpecPatchOutput) ToTokenRequestSpecPatchOutputWithContext(ctx context.Context) TokenRequestSpecPatchOutput {
	return o
}

func (o TokenRequestSpecPatchOutput) ToTokenRequestSpecPatchPtrOutput() TokenRequestSpecPatchPtrOutput {
	return o.ToTokenRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (o TokenRequestSpecPatchOutput) ToTokenRequestSpecPatchPtrOutputWithContext(ctx context.Context) TokenRequestSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenRequestSpecPatch) *TokenRequestSpecPatch {
		return &v
	}).(TokenRequestSpecPatchPtrOutput)
}

// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenRequestSpecPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecPatchOutput) BoundObjectRef() BoundObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v TokenRequestSpecPatch) *BoundObjectReferencePatch { return v.BoundObjectRef }).(BoundObjectReferencePatchPtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TokenRequestSpecPatch) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

type TokenRequestSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (TokenRequestSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestSpecPatch)(nil)).Elem()
}

func (o TokenRequestSpecPatchPtrOutput) ToTokenRequestSpecPatchPtrOutput() TokenRequestSpecPatchPtrOutput {
	return o
}

func (o TokenRequestSpecPatchPtrOutput) ToTokenRequestSpecPatchPtrOutputWithContext(ctx context.Context) TokenRequestSpecPatchPtrOutput {
	return o
}

func (o TokenRequestSpecPatchPtrOutput) Elem() TokenRequestSpecPatchOutput {
	return o.ApplyT(func(v *TokenRequestSpecPatch) TokenRequestSpecPatch {
		if v != nil {
			return *v
		}
		var ret TokenRequestSpecPatch
		return ret
	}).(TokenRequestSpecPatchOutput)
}

// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenRequestSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecPatchPtrOutput) BoundObjectRef() BoundObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *TokenRequestSpecPatch) *BoundObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.BoundObjectRef
	}).(BoundObjectReferencePatchPtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecPatchPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TokenRequestSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatus struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp string `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token string `pulumi:"token"`
}

// TokenRequestStatusInput is an input type that accepts TokenRequestStatusArgs and TokenRequestStatusOutput values.
// You can construct a concrete instance of `TokenRequestStatusInput` via:
//
//	TokenRequestStatusArgs{...}
type TokenRequestStatusInput interface {
	pulumi.Input

	ToTokenRequestStatusOutput() TokenRequestStatusOutput
	ToTokenRequestStatusOutputWithContext(context.Context) TokenRequestStatusOutput
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusArgs struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp pulumi.StringInput `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token pulumi.StringInput `pulumi:"token"`
}

func (TokenRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return i.ToTokenRequestStatusOutputWithContext(context.Background())
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusOutput)
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return i.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusOutput).ToTokenRequestStatusPtrOutputWithContext(ctx)
}

// TokenRequestStatusPtrInput is an input type that accepts TokenRequestStatusArgs, TokenRequestStatusPtr and TokenRequestStatusPtrOutput values.
// You can construct a concrete instance of `TokenRequestStatusPtrInput` via:
//
//	        TokenRequestStatusArgs{...}
//
//	or:
//
//	        nil
type TokenRequestStatusPtrInput interface {
	pulumi.Input

	ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput
	ToTokenRequestStatusPtrOutputWithContext(context.Context) TokenRequestStatusPtrOutput
}

type tokenRequestStatusPtrType TokenRequestStatusArgs

func TokenRequestStatusPtr(v *TokenRequestStatusArgs) TokenRequestStatusPtrInput {
	return (*tokenRequestStatusPtrType)(v)
}

func (*tokenRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatus)(nil)).Elem()
}

func (i *tokenRequestStatusPtrType) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return i.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (i *tokenRequestStatusPtrType) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return o
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return o
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return o.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenRequestStatus) *TokenRequestStatus {
		return &v
	}).(TokenRequestStatusPtrOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusOutput) ExpirationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestStatus) string { return v.ExpirationTimestamp }).(pulumi.StringOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestStatus) string { return v.Token }).(pulumi.StringOutput)
}

type TokenRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatus)(nil)).Elem()
}

func (o TokenRequestStatusPtrOutput) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return o
}

func (o TokenRequestStatusPtrOutput) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return o
}

func (o TokenRequestStatusPtrOutput) Elem() TokenRequestStatusOutput {
	return o.ApplyT(func(v *TokenRequestStatus) TokenRequestStatus {
		if v != nil {
			return *v
		}
		var ret TokenRequestStatus
		return ret
	}).(TokenRequestStatusOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusPtrOutput) ExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatus) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusPatch struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp *string `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

// TokenRequestStatusPatchInput is an input type that accepts TokenRequestStatusPatchArgs and TokenRequestStatusPatchOutput values.
// You can construct a concrete instance of `TokenRequestStatusPatchInput` via:
//
//	TokenRequestStatusPatchArgs{...}
type TokenRequestStatusPatchInput interface {
	pulumi.Input

	ToTokenRequestStatusPatchOutput() TokenRequestStatusPatchOutput
	ToTokenRequestStatusPatchOutputWithContext(context.Context) TokenRequestStatusPatchOutput
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusPatchArgs struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp pulumi.StringPtrInput `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenRequestStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatusPatch)(nil)).Elem()
}

func (i TokenRequestStatusPatchArgs) ToTokenRequestStatusPatchOutput() TokenRequestStatusPatchOutput {
	return i.ToTokenRequestStatusPatchOutputWithContext(context.Background())
}

func (i TokenRequestStatusPatchArgs) ToTokenRequestStatusPatchOutputWithContext(ctx context.Context) TokenRequestStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusPatchOutput)
}

func (i TokenRequestStatusPatchArgs) ToTokenRequestStatusPatchPtrOutput() TokenRequestStatusPatchPtrOutput {
	return i.ToTokenRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (i TokenRequestStatusPatchArgs) ToTokenRequestStatusPatchPtrOutputWithContext(ctx context.Context) TokenRequestStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusPatchOutput).ToTokenRequestStatusPatchPtrOutputWithContext(ctx)
}

// TokenRequestStatusPatchPtrInput is an input type that accepts TokenRequestStatusPatchArgs, TokenRequestStatusPatchPtr and TokenRequestStatusPatchPtrOutput values.
// You can construct a concrete instance of `TokenRequestStatusPatchPtrInput` via:
//
//	        TokenRequestStatusPatchArgs{...}
//
//	or:
//
//	        nil
type TokenRequestStatusPatchPtrInput interface {
	pulumi.Input

	ToTokenRequestStatusPatchPtrOutput() TokenRequestStatusPatchPtrOutput
	ToTokenRequestStatusPatchPtrOutputWithContext(context.Context) TokenRequestStatusPatchPtrOutput
}

type tokenRequestStatusPatchPtrType TokenRequestStatusPatchArgs

func TokenRequestStatusPatchPtr(v *TokenRequestStatusPatchArgs) TokenRequestStatusPatchPtrInput {
	return (*tokenRequestStatusPatchPtrType)(v)
}

func (*tokenRequestStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatusPatch)(nil)).Elem()
}

func (i *tokenRequestStatusPatchPtrType) ToTokenRequestStatusPatchPtrOutput() TokenRequestStatusPatchPtrOutput {
	return i.ToTokenRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (i *tokenRequestStatusPatchPtrType) ToTokenRequestStatusPatchPtrOutputWithContext(ctx context.Context) TokenRequestStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusPatchPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusPatchOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatusPatch)(nil)).Elem()
}

func (o TokenRequestStatusPatchOutput) ToTokenRequestStatusPatchOutput() TokenRequestStatusPatchOutput {
	return o
}

func (o TokenRequestStatusPatchOutput) ToTokenRequestStatusPatchOutputWithContext(ctx context.Context) TokenRequestStatusPatchOutput {
	return o
}

func (o TokenRequestStatusPatchOutput) ToTokenRequestStatusPatchPtrOutput() TokenRequestStatusPatchPtrOutput {
	return o.ToTokenRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (o TokenRequestStatusPatchOutput) ToTokenRequestStatusPatchPtrOutputWithContext(ctx context.Context) TokenRequestStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenRequestStatusPatch) *TokenRequestStatusPatch {
		return &v
	}).(TokenRequestStatusPatchPtrOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusPatchOutput) ExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequestStatusPatch) *string { return v.ExpirationTimestamp }).(pulumi.StringPtrOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusPatchOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequestStatusPatch) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type TokenRequestStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatusPatch)(nil)).Elem()
}

func (o TokenRequestStatusPatchPtrOutput) ToTokenRequestStatusPatchPtrOutput() TokenRequestStatusPatchPtrOutput {
	return o
}

func (o TokenRequestStatusPatchPtrOutput) ToTokenRequestStatusPatchPtrOutputWithContext(ctx context.Context) TokenRequestStatusPatchPtrOutput {
	return o
}

func (o TokenRequestStatusPatchPtrOutput) Elem() TokenRequestStatusPatchOutput {
	return o.ApplyT(func(v *TokenRequestStatusPatch) TokenRequestStatusPatch {
		if v != nil {
			return *v
		}
		var ret TokenRequestStatusPatch
		return ret
	}).(TokenRequestStatusPatchOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusPatchPtrOutput) ExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusPatchPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status *TokenReviewStatus `pulumi:"status"`
}

// TokenReviewInput is an input type that accepts TokenReviewArgs and TokenReviewOutput values.
// You can construct a concrete instance of `TokenReviewInput` via:
//
//	TokenReviewArgs{...}
type TokenReviewInput interface {
	pulumi.Input

	ToTokenReviewOutput() TokenReviewOutput
	ToTokenReviewOutputWithContext(context.Context) TokenReviewOutput
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status TokenReviewStatusPtrInput `pulumi:"status"`
}

func (TokenReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReview)(nil)).Elem()
}

func (i TokenReviewArgs) ToTokenReviewOutput() TokenReviewOutput {
	return i.ToTokenReviewOutputWithContext(context.Background())
}

func (i TokenReviewArgs) ToTokenReviewOutputWithContext(ctx context.Context) TokenReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewOutput struct{ *pulumi.OutputState }

func (TokenReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReview)(nil)).Elem()
}

func (o TokenReviewOutput) ToTokenReviewOutput() TokenReviewOutput {
	return o
}

func (o TokenReviewOutput) ToTokenReviewOutputWithContext(ctx context.Context) TokenReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TokenReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TokenReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated
func (o TokenReviewOutput) Spec() TokenReviewSpecOutput {
	return o.ApplyT(func(v TokenReview) TokenReviewSpec { return v.Spec }).(TokenReviewSpecOutput)
}

// Status is filled in by the server and indicates whether the request can be authenticated.
func (o TokenReviewOutput) Status() TokenReviewStatusPtrOutput {
	return o.ApplyT(func(v TokenReview) *TokenReviewStatus { return v.Status }).(TokenReviewStatusPtrOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec *TokenReviewSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status *TokenReviewStatusPatch `pulumi:"status"`
}

// TokenReviewPatchInput is an input type that accepts TokenReviewPatchArgs and TokenReviewPatchOutput values.
// You can construct a concrete instance of `TokenReviewPatchInput` via:
//
//	TokenReviewPatchArgs{...}
type TokenReviewPatchInput interface {
	pulumi.Input

	ToTokenReviewPatchOutput() TokenReviewPatchOutput
	ToTokenReviewPatchOutputWithContext(context.Context) TokenReviewPatchOutput
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenReviewSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status TokenReviewStatusPatchPtrInput `pulumi:"status"`
}

func (TokenReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewPatch)(nil)).Elem()
}

func (i TokenReviewPatchArgs) ToTokenReviewPatchOutput() TokenReviewPatchOutput {
	return i.ToTokenReviewPatchOutputWithContext(context.Background())
}

func (i TokenReviewPatchArgs) ToTokenReviewPatchOutputWithContext(ctx context.Context) TokenReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewPatchOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewPatchOutput struct{ *pulumi.OutputState }

func (TokenReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewPatch)(nil)).Elem()
}

func (o TokenReviewPatchOutput) ToTokenReviewPatchOutput() TokenReviewPatchOutput {
	return o
}

func (o TokenReviewPatchOutput) ToTokenReviewPatchOutputWithContext(ctx context.Context) TokenReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TokenReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v TokenReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated
func (o TokenReviewPatchOutput) Spec() TokenReviewSpecPatchPtrOutput {
	return o.ApplyT(func(v TokenReviewPatch) *TokenReviewSpecPatch { return v.Spec }).(TokenReviewSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the request can be authenticated.
func (o TokenReviewPatchOutput) Status() TokenReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v TokenReviewPatch) *TokenReviewStatusPatch { return v.Status }).(TokenReviewStatusPatchPtrOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpec struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []string `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

// TokenReviewSpecInput is an input type that accepts TokenReviewSpecArgs and TokenReviewSpecOutput values.
// You can construct a concrete instance of `TokenReviewSpecInput` via:
//
//	TokenReviewSpecArgs{...}
type TokenReviewSpecInput interface {
	pulumi.Input

	ToTokenReviewSpecOutput() TokenReviewSpecOutput
	ToTokenReviewSpecOutputWithContext(context.Context) TokenReviewSpecOutput
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecArgs struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return i.ToTokenReviewSpecOutputWithContext(context.Background())
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecOutput struct{ *pulumi.OutputState }

func (TokenReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return o
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return o
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewSpec) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecPatch struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []string `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

// TokenReviewSpecPatchInput is an input type that accepts TokenReviewSpecPatchArgs and TokenReviewSpecPatchOutput values.
// You can construct a concrete instance of `TokenReviewSpecPatchInput` via:
//
//	TokenReviewSpecPatchArgs{...}
type TokenReviewSpecPatchInput interface {
	pulumi.Input

	ToTokenReviewSpecPatchOutput() TokenReviewSpecPatchOutput
	ToTokenReviewSpecPatchOutputWithContext(context.Context) TokenReviewSpecPatchOutput
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecPatchArgs struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenReviewSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpecPatch)(nil)).Elem()
}

func (i TokenReviewSpecPatchArgs) ToTokenReviewSpecPatchOutput() TokenReviewSpecPatchOutput {
	return i.ToTokenReviewSpecPatchOutputWithContext(context.Background())
}

func (i TokenReviewSpecPatchArgs) ToTokenReviewSpecPatchOutputWithContext(ctx context.Context) TokenReviewSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecPatchOutput)
}

func (i TokenReviewSpecPatchArgs) ToTokenReviewSpecPatchPtrOutput() TokenReviewSpecPatchPtrOutput {
	return i.ToTokenReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i TokenReviewSpecPatchArgs) ToTokenReviewSpecPatchPtrOutputWithContext(ctx context.Context) TokenReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecPatchOutput).ToTokenReviewSpecPatchPtrOutputWithContext(ctx)
}

// TokenReviewSpecPatchPtrInput is an input type that accepts TokenReviewSpecPatchArgs, TokenReviewSpecPatchPtr and TokenReviewSpecPatchPtrOutput values.
// You can construct a concrete instance of `TokenReviewSpecPatchPtrInput` via:
//
//	        TokenReviewSpecPatchArgs{...}
//
//	or:
//
//	        nil
type TokenReviewSpecPatchPtrInput interface {
	pulumi.Input

	ToTokenReviewSpecPatchPtrOutput() TokenReviewSpecPatchPtrOutput
	ToTokenReviewSpecPatchPtrOutputWithContext(context.Context) TokenReviewSpecPatchPtrOutput
}

type tokenReviewSpecPatchPtrType TokenReviewSpecPatchArgs

func TokenReviewSpecPatchPtr(v *TokenReviewSpecPatchArgs) TokenReviewSpecPatchPtrInput {
	return (*tokenReviewSpecPatchPtrType)(v)
}

func (*tokenReviewSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewSpecPatch)(nil)).Elem()
}

func (i *tokenReviewSpecPatchPtrType) ToTokenReviewSpecPatchPtrOutput() TokenReviewSpecPatchPtrOutput {
	return i.ToTokenReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i *tokenReviewSpecPatchPtrType) ToTokenReviewSpecPatchPtrOutputWithContext(ctx context.Context) TokenReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecPatchPtrOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecPatchOutput struct{ *pulumi.OutputState }

func (TokenReviewSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpecPatch)(nil)).Elem()
}

func (o TokenReviewSpecPatchOutput) ToTokenReviewSpecPatchOutput() TokenReviewSpecPatchOutput {
	return o
}

func (o TokenReviewSpecPatchOutput) ToTokenReviewSpecPatchOutputWithContext(ctx context.Context) TokenReviewSpecPatchOutput {
	return o
}

func (o TokenReviewSpecPatchOutput) ToTokenReviewSpecPatchPtrOutput() TokenReviewSpecPatchPtrOutput {
	return o.ToTokenReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (o TokenReviewSpecPatchOutput) ToTokenReviewSpecPatchPtrOutputWithContext(ctx context.Context) TokenReviewSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenReviewSpecPatch) *TokenReviewSpecPatch {
		return &v
	}).(TokenReviewSpecPatchPtrOutput)
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewSpecPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecPatchOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewSpecPatch) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type TokenReviewSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (TokenReviewSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewSpecPatch)(nil)).Elem()
}

func (o TokenReviewSpecPatchPtrOutput) ToTokenReviewSpecPatchPtrOutput() TokenReviewSpecPatchPtrOutput {
	return o
}

func (o TokenReviewSpecPatchPtrOutput) ToTokenReviewSpecPatchPtrOutputWithContext(ctx context.Context) TokenReviewSpecPatchPtrOutput {
	return o
}

func (o TokenReviewSpecPatchPtrOutput) Elem() TokenReviewSpecPatchOutput {
	return o.ApplyT(func(v *TokenReviewSpecPatch) TokenReviewSpecPatch {
		if v != nil {
			return *v
		}
		var ret TokenReviewSpecPatch
		return ret
	}).(TokenReviewSpecPatchOutput)
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenReviewSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecPatchPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenReviewSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatus struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []string `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error *string `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User *UserInfo `pulumi:"user"`
}

// TokenReviewStatusInput is an input type that accepts TokenReviewStatusArgs and TokenReviewStatusOutput values.
// You can construct a concrete instance of `TokenReviewStatusInput` via:
//
//	TokenReviewStatusArgs{...}
type TokenReviewStatusInput interface {
	pulumi.Input

	ToTokenReviewStatusOutput() TokenReviewStatusOutput
	ToTokenReviewStatusOutputWithContext(context.Context) TokenReviewStatusOutput
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusArgs struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated pulumi.BoolPtrInput `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error pulumi.StringPtrInput `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User UserInfoPtrInput `pulumi:"user"`
}

func (TokenReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return i.ToTokenReviewStatusOutputWithContext(context.Background())
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusOutput)
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return i.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusOutput).ToTokenReviewStatusPtrOutputWithContext(ctx)
}

// TokenReviewStatusPtrInput is an input type that accepts TokenReviewStatusArgs, TokenReviewStatusPtr and TokenReviewStatusPtrOutput values.
// You can construct a concrete instance of `TokenReviewStatusPtrInput` via:
//
//	        TokenReviewStatusArgs{...}
//
//	or:
//
//	        nil
type TokenReviewStatusPtrInput interface {
	pulumi.Input

	ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput
	ToTokenReviewStatusPtrOutputWithContext(context.Context) TokenReviewStatusPtrOutput
}

type tokenReviewStatusPtrType TokenReviewStatusArgs

func TokenReviewStatusPtr(v *TokenReviewStatusArgs) TokenReviewStatusPtrInput {
	return (*tokenReviewStatusPtrType)(v)
}

func (*tokenReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatus)(nil)).Elem()
}

func (i *tokenReviewStatusPtrType) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return i.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (i *tokenReviewStatusPtrType) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return o
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return o
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return o.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenReviewStatus) *TokenReviewStatus {
		return &v
	}).(TokenReviewStatusPtrOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewStatus) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *bool { return v.Authenticated }).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusOutput) User() UserInfoPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *UserInfo { return v.User }).(UserInfoPtrOutput)
}

type TokenReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatus)(nil)).Elem()
}

func (o TokenReviewStatusPtrOutput) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return o
}

func (o TokenReviewStatusPtrOutput) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return o
}

func (o TokenReviewStatusPtrOutput) Elem() TokenReviewStatusOutput {
	return o.ApplyT(func(v *TokenReviewStatus) TokenReviewStatus {
		if v != nil {
			return *v
		}
		var ret TokenReviewStatus
		return ret
	}).(TokenReviewStatusOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenReviewStatus) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusPtrOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Authenticated
	}).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusPtrOutput) User() UserInfoPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *UserInfo {
		if v == nil {
			return nil
		}
		return v.User
	}).(UserInfoPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusPatch struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []string `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error *string `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User *UserInfoPatch `pulumi:"user"`
}

// TokenReviewStatusPatchInput is an input type that accepts TokenReviewStatusPatchArgs and TokenReviewStatusPatchOutput values.
// You can construct a concrete instance of `TokenReviewStatusPatchInput` via:
//
//	TokenReviewStatusPatchArgs{...}
type TokenReviewStatusPatchInput interface {
	pulumi.Input

	ToTokenReviewStatusPatchOutput() TokenReviewStatusPatchOutput
	ToTokenReviewStatusPatchOutputWithContext(context.Context) TokenReviewStatusPatchOutput
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusPatchArgs struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated pulumi.BoolPtrInput `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error pulumi.StringPtrInput `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User UserInfoPatchPtrInput `pulumi:"user"`
}

func (TokenReviewStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatusPatch)(nil)).Elem()
}

func (i TokenReviewStatusPatchArgs) ToTokenReviewStatusPatchOutput() TokenReviewStatusPatchOutput {
	return i.ToTokenReviewStatusPatchOutputWithContext(context.Background())
}

func (i TokenReviewStatusPatchArgs) ToTokenReviewStatusPatchOutputWithContext(ctx context.Context) TokenReviewStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusPatchOutput)
}

func (i TokenReviewStatusPatchArgs) ToTokenReviewStatusPatchPtrOutput() TokenReviewStatusPatchPtrOutput {
	return i.ToTokenReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i TokenReviewStatusPatchArgs) ToTokenReviewStatusPatchPtrOutputWithContext(ctx context.Context) TokenReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusPatchOutput).ToTokenReviewStatusPatchPtrOutputWithContext(ctx)
}

// TokenReviewStatusPatchPtrInput is an input type that accepts TokenReviewStatusPatchArgs, TokenReviewStatusPatchPtr and TokenReviewStatusPatchPtrOutput values.
// You can construct a concrete instance of `TokenReviewStatusPatchPtrInput` via:
//
//	        TokenReviewStatusPatchArgs{...}
//
//	or:
//
//	        nil
type TokenReviewStatusPatchPtrInput interface {
	pulumi.Input

	ToTokenReviewStatusPatchPtrOutput() TokenReviewStatusPatchPtrOutput
	ToTokenReviewStatusPatchPtrOutputWithContext(context.Context) TokenReviewStatusPatchPtrOutput
}

type tokenReviewStatusPatchPtrType TokenReviewStatusPatchArgs

func TokenReviewStatusPatchPtr(v *TokenReviewStatusPatchArgs) TokenReviewStatusPatchPtrInput {
	return (*tokenReviewStatusPatchPtrType)(v)
}

func (*tokenReviewStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatusPatch)(nil)).Elem()
}

func (i *tokenReviewStatusPatchPtrType) ToTokenReviewStatusPatchPtrOutput() TokenReviewStatusPatchPtrOutput {
	return i.ToTokenReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i *tokenReviewStatusPatchPtrType) ToTokenReviewStatusPatchPtrOutputWithContext(ctx context.Context) TokenReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusPatchPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusPatchOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatusPatch)(nil)).Elem()
}

func (o TokenReviewStatusPatchOutput) ToTokenReviewStatusPatchOutput() TokenReviewStatusPatchOutput {
	return o
}

func (o TokenReviewStatusPatchOutput) ToTokenReviewStatusPatchOutputWithContext(ctx context.Context) TokenReviewStatusPatchOutput {
	return o
}

func (o TokenReviewStatusPatchOutput) ToTokenReviewStatusPatchPtrOutput() TokenReviewStatusPatchPtrOutput {
	return o.ToTokenReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (o TokenReviewStatusPatchOutput) ToTokenReviewStatusPatchPtrOutputWithContext(ctx context.Context) TokenReviewStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenReviewStatusPatch) *TokenReviewStatusPatch {
		return &v
	}).(TokenReviewStatusPatchPtrOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewStatusPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusPatchOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenReviewStatusPatch) *bool { return v.Authenticated }).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusPatchOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewStatusPatch) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusPatchOutput) User() UserInfoPatchPtrOutput {
	return o.ApplyT(func(v TokenReviewStatusPatch) *UserInfoPatch { return v.User }).(UserInfoPatchPtrOutput)
}

type TokenReviewStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatusPatch)(nil)).Elem()
}

func (o TokenReviewStatusPatchPtrOutput) ToTokenReviewStatusPatchPtrOutput() TokenReviewStatusPatchPtrOutput {
	return o
}

func (o TokenReviewStatusPatchPtrOutput) ToTokenReviewStatusPatchPtrOutputWithContext(ctx context.Context) TokenReviewStatusPatchPtrOutput {
	return o
}

func (o TokenReviewStatusPatchPtrOutput) Elem() TokenReviewStatusPatchOutput {
	return o.ApplyT(func(v *TokenReviewStatusPatch) TokenReviewStatusPatch {
		if v != nil {
			return *v
		}
		var ret TokenReviewStatusPatch
		return ret
	}).(TokenReviewStatusPatchOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenReviewStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusPatchPtrOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Authenticated
	}).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusPatchPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusPatchPtrOutput) User() UserInfoPatchPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatusPatch) *UserInfoPatch {
		if v == nil {
			return nil
		}
		return v.User
	}).(UserInfoPatchPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfo struct {
	// Any additional information provided by the authenticator.
	Extra map[string][]string `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid *string `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username *string `pulumi:"username"`
}

// UserInfoInput is an input type that accepts UserInfoArgs and UserInfoOutput values.
// You can construct a concrete instance of `UserInfoInput` via:
//
//	UserInfoArgs{...}
type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoArgs struct {
	// Any additional information provided by the authenticator.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

func (i UserInfoArgs) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput).ToUserInfoPtrOutputWithContext(ctx)
}

// UserInfoPtrInput is an input type that accepts UserInfoArgs, UserInfoPtr and UserInfoPtrOutput values.
// You can construct a concrete instance of `UserInfoPtrInput` via:
//
//	        UserInfoArgs{...}
//
//	or:
//
//	        nil
type UserInfoPtrInput interface {
	pulumi.Input

	ToUserInfoPtrOutput() UserInfoPtrOutput
	ToUserInfoPtrOutputWithContext(context.Context) UserInfoPtrOutput
}

type userInfoPtrType UserInfoArgs

func UserInfoPtr(v *UserInfoArgs) UserInfoPtrInput {
	return (*userInfoPtrType)(v)
}

func (*userInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (i *userInfoPtrType) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i *userInfoPtrType) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoOutput struct{ *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o.ToUserInfoPtrOutputWithContext(context.Background())
}

func (o UserInfoOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInfo) *UserInfo {
		return &v
	}).(UserInfoPtrOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v UserInfo) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserInfo) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserInfoPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) Elem() UserInfoOutput {
	return o.ApplyT(func(v *UserInfo) UserInfo {
		if v != nil {
			return *v
		}
		var ret UserInfo
		return ret
	}).(UserInfoOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *UserInfo) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserInfo) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoPatch struct {
	// Any additional information provided by the authenticator.
	Extra map[string][]string `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid *string `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username *string `pulumi:"username"`
}

// UserInfoPatchInput is an input type that accepts UserInfoPatchArgs and UserInfoPatchOutput values.
// You can construct a concrete instance of `UserInfoPatchInput` via:
//
//	UserInfoPatchArgs{...}
type UserInfoPatchInput interface {
	pulumi.Input

	ToUserInfoPatchOutput() UserInfoPatchOutput
	ToUserInfoPatchOutputWithContext(context.Context) UserInfoPatchOutput
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoPatchArgs struct {
	// Any additional information provided by the authenticator.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserInfoPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoPatch)(nil)).Elem()
}

func (i UserInfoPatchArgs) ToUserInfoPatchOutput() UserInfoPatchOutput {
	return i.ToUserInfoPatchOutputWithContext(context.Background())
}

func (i UserInfoPatchArgs) ToUserInfoPatchOutputWithContext(ctx context.Context) UserInfoPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPatchOutput)
}

func (i UserInfoPatchArgs) ToUserInfoPatchPtrOutput() UserInfoPatchPtrOutput {
	return i.ToUserInfoPatchPtrOutputWithContext(context.Background())
}

func (i UserInfoPatchArgs) ToUserInfoPatchPtrOutputWithContext(ctx context.Context) UserInfoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPatchOutput).ToUserInfoPatchPtrOutputWithContext(ctx)
}

// UserInfoPatchPtrInput is an input type that accepts UserInfoPatchArgs, UserInfoPatchPtr and UserInfoPatchPtrOutput values.
// You can construct a concrete instance of `UserInfoPatchPtrInput` via:
//
//	        UserInfoPatchArgs{...}
//
//	or:
//
//	        nil
type UserInfoPatchPtrInput interface {
	pulumi.Input

	ToUserInfoPatchPtrOutput() UserInfoPatchPtrOutput
	ToUserInfoPatchPtrOutputWithContext(context.Context) UserInfoPatchPtrOutput
}

type userInfoPatchPtrType UserInfoPatchArgs

func UserInfoPatchPtr(v *UserInfoPatchArgs) UserInfoPatchPtrInput {
	return (*userInfoPatchPtrType)(v)
}

func (*userInfoPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfoPatch)(nil)).Elem()
}

func (i *userInfoPatchPtrType) ToUserInfoPatchPtrOutput() UserInfoPatchPtrOutput {
	return i.ToUserInfoPatchPtrOutputWithContext(context.Background())
}

func (i *userInfoPatchPtrType) ToUserInfoPatchPtrOutputWithContext(ctx context.Context) UserInfoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPatchPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoPatchOutput struct{ *pulumi.OutputState }

func (UserInfoPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoPatch)(nil)).Elem()
}

func (o UserInfoPatchOutput) ToUserInfoPatchOutput() UserInfoPatchOutput {
	return o
}

func (o UserInfoPatchOutput) ToUserInfoPatchOutputWithContext(ctx context.Context) UserInfoPatchOutput {
	return o
}

func (o UserInfoPatchOutput) ToUserInfoPatchPtrOutput() UserInfoPatchPtrOutput {
	return o.ToUserInfoPatchPtrOutputWithContext(context.Background())
}

func (o UserInfoPatchOutput) ToUserInfoPatchPtrOutputWithContext(ctx context.Context) UserInfoPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInfoPatch) *UserInfoPatch {
		return &v
	}).(UserInfoPatchPtrOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoPatchOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v UserInfoPatch) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoPatchOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserInfoPatch) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserInfoPatchPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfoPatch)(nil)).Elem()
}

func (o UserInfoPatchPtrOutput) ToUserInfoPatchPtrOutput() UserInfoPatchPtrOutput {
	return o
}

func (o UserInfoPatchPtrOutput) ToUserInfoPatchPtrOutputWithContext(ctx context.Context) UserInfoPatchPtrOutput {
	return o
}

func (o UserInfoPatchPtrOutput) Elem() UserInfoPatchOutput {
	return o.ApplyT(func(v *UserInfoPatch) UserInfoPatch {
		if v != nil {
			return *v
		}
		var ret UserInfoPatch
		return ret
	}).(UserInfoPatchOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoPatchPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *UserInfoPatch) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoPatchPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserInfoPatch) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoundObjectReferenceInput)(nil)).Elem(), BoundObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundObjectReferencePtrInput)(nil)).Elem(), BoundObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundObjectReferencePatchInput)(nil)).Elem(), BoundObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundObjectReferencePatchPtrInput)(nil)).Elem(), BoundObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewInput)(nil)).Elem(), SelfSubjectReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewPatchInput)(nil)).Elem(), SelfSubjectReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewStatusInput)(nil)).Elem(), SelfSubjectReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewStatusPtrInput)(nil)).Elem(), SelfSubjectReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewStatusPatchInput)(nil)).Elem(), SelfSubjectReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewStatusPatchPtrInput)(nil)).Elem(), SelfSubjectReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestInput)(nil)).Elem(), TokenRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchInput)(nil)).Elem(), TokenRequestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestSpecInput)(nil)).Elem(), TokenRequestSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestSpecPatchInput)(nil)).Elem(), TokenRequestSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestSpecPatchPtrInput)(nil)).Elem(), TokenRequestSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestStatusInput)(nil)).Elem(), TokenRequestStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestStatusPtrInput)(nil)).Elem(), TokenRequestStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestStatusPatchInput)(nil)).Elem(), TokenRequestStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestStatusPatchPtrInput)(nil)).Elem(), TokenRequestStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewInput)(nil)).Elem(), TokenReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewPatchInput)(nil)).Elem(), TokenReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewSpecInput)(nil)).Elem(), TokenReviewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewSpecPatchInput)(nil)).Elem(), TokenReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewSpecPatchPtrInput)(nil)).Elem(), TokenReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewStatusInput)(nil)).Elem(), TokenReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewStatusPtrInput)(nil)).Elem(), TokenReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewStatusPatchInput)(nil)).Elem(), TokenReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenReviewStatusPatchPtrInput)(nil)).Elem(), TokenReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInfoInput)(nil)).Elem(), UserInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInfoPtrInput)(nil)).Elem(), UserInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInfoPatchInput)(nil)).Elem(), UserInfoPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInfoPatchPtrInput)(nil)).Elem(), UserInfoPatchArgs{})
	pulumi.RegisterOutputType(BoundObjectReferenceOutput{})
	pulumi.RegisterOutputType(BoundObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(BoundObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(BoundObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewStatusOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewStatusPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(TokenRequestOutput{})
	pulumi.RegisterOutputType(TokenRequestPatchOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecPatchOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusPatchOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(TokenReviewOutput{})
	pulumi.RegisterOutputType(TokenReviewPatchOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecPatchOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusPatchOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
	pulumi.RegisterOutputType(UserInfoPtrOutput{})
	pulumi.RegisterOutputType(UserInfoPatchOutput{})
	pulumi.RegisterOutputType(UserInfoPatchPtrOutput{})
}
