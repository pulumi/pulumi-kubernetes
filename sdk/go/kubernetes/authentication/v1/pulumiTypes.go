// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// UID of the referent.
	Uid *string `pulumi:"uid"`
}

// BoundObjectReferenceInput is an input type that accepts BoundObjectReferenceArgs and BoundObjectReferenceOutput values.
// You can construct a concrete instance of `BoundObjectReferenceInput` via:
//
// 		 BoundObjectReferenceArgs{...}
//
type BoundObjectReferenceInput interface {
	pulumi.Input

	ToBoundObjectReferenceOutput() BoundObjectReferenceOutput
	ToBoundObjectReferenceOutputWithContext(context.Context) BoundObjectReferenceOutput
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BoundObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return i.ToBoundObjectReferenceOutputWithContext(context.Background())
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferenceOutput)
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return i.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (i BoundObjectReferenceArgs) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferenceOutput).ToBoundObjectReferencePtrOutputWithContext(ctx)
}

// BoundObjectReferencePtrInput is an input type that accepts BoundObjectReferenceArgs, BoundObjectReferencePtr and BoundObjectReferencePtrOutput values.
// You can construct a concrete instance of `BoundObjectReferencePtrInput` via:
//
// 		 BoundObjectReferenceArgs{...}
//
//  or:
//
// 		 nil
//
type BoundObjectReferencePtrInput interface {
	pulumi.Input

	ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput
	ToBoundObjectReferencePtrOutputWithContext(context.Context) BoundObjectReferencePtrOutput
}

type boundObjectReferencePtrType BoundObjectReferenceArgs

func BoundObjectReferencePtr(v *BoundObjectReferenceArgs) BoundObjectReferencePtrInput {
	return (*boundObjectReferencePtrType)(v)
}

func (*boundObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReference)(nil)).Elem()
}

func (i *boundObjectReferencePtrType) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return i.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (i *boundObjectReferencePtrType) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundObjectReferencePtrOutput)
}

// BoundObjectReference is a reference to an object that a token is bound to.
type BoundObjectReferenceOutput struct{ *pulumi.OutputState }

func (BoundObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoundObjectReference)(nil)).Elem()
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutput() BoundObjectReferenceOutput {
	return o
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferenceOutputWithContext(ctx context.Context) BoundObjectReferenceOutput {
	return o
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return o.ToBoundObjectReferencePtrOutputWithContext(context.Background())
}

func (o BoundObjectReferenceOutput) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *BoundObjectReference {
		return &v
	}).(BoundObjectReferencePtrOutput)
}

// API version of the referent.
func (o BoundObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoundObjectReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type BoundObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (BoundObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundObjectReference)(nil)).Elem()
}

func (o BoundObjectReferencePtrOutput) ToBoundObjectReferencePtrOutput() BoundObjectReferencePtrOutput {
	return o
}

func (o BoundObjectReferencePtrOutput) ToBoundObjectReferencePtrOutputWithContext(ctx context.Context) BoundObjectReferencePtrOutput {
	return o
}

func (o BoundObjectReferencePtrOutput) Elem() BoundObjectReferenceOutput {
	return o.ApplyT(func(v *BoundObjectReference) BoundObjectReference { return *v }).(BoundObjectReferenceOutput)
}

// API version of the referent.
func (o BoundObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
func (o BoundObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o BoundObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// UID of the referent.
func (o BoundObjectReferencePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequestType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     string             `pulumi:"kind"`
	Metadata metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     TokenRequestSpec   `pulumi:"spec"`
	Status   TokenRequestStatus `pulumi:"status"`
}

// TokenRequestTypeInput is an input type that accepts TokenRequestTypeArgs and TokenRequestTypeOutput values.
// You can construct a concrete instance of `TokenRequestTypeInput` via:
//
// 		 TokenRequestTypeArgs{...}
//
type TokenRequestTypeInput interface {
	pulumi.Input

	ToTokenRequestTypeOutput() TokenRequestTypeOutput
	ToTokenRequestTypeOutputWithContext(context.Context) TokenRequestTypeOutput
}

// TokenRequest requests a token for a given service account.
type TokenRequestTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringInput      `pulumi:"kind"`
	Metadata metav1.ObjectMetaInput  `pulumi:"metadata"`
	Spec     TokenRequestSpecInput   `pulumi:"spec"`
	Status   TokenRequestStatusInput `pulumi:"status"`
}

func (TokenRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestType)(nil)).Elem()
}

func (i TokenRequestTypeArgs) ToTokenRequestTypeOutput() TokenRequestTypeOutput {
	return i.ToTokenRequestTypeOutputWithContext(context.Background())
}

func (i TokenRequestTypeArgs) ToTokenRequestTypeOutputWithContext(ctx context.Context) TokenRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestTypeOutput)
}

// TokenRequest requests a token for a given service account.
type TokenRequestTypeOutput struct{ *pulumi.OutputState }

func (TokenRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestType)(nil)).Elem()
}

func (o TokenRequestTypeOutput) ToTokenRequestTypeOutput() TokenRequestTypeOutput {
	return o
}

func (o TokenRequestTypeOutput) ToTokenRequestTypeOutputWithContext(ctx context.Context) TokenRequestTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenRequestTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenRequestTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestType) string { return v.Kind }).(pulumi.StringOutput)
}

func (o TokenRequestTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v TokenRequestType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o TokenRequestTypeOutput) Spec() TokenRequestSpecOutput {
	return o.ApplyT(func(v TokenRequestType) TokenRequestSpec { return v.Spec }).(TokenRequestSpecOutput)
}

func (o TokenRequestTypeOutput) Status() TokenRequestStatusOutput {
	return o.ApplyT(func(v TokenRequestType) TokenRequestStatus { return v.Status }).(TokenRequestStatusOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpec struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []string `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef *BoundObjectReference `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

// TokenRequestSpecInput is an input type that accepts TokenRequestSpecArgs and TokenRequestSpecOutput values.
// You can construct a concrete instance of `TokenRequestSpecInput` via:
//
// 		 TokenRequestSpecArgs{...}
//
type TokenRequestSpecInput interface {
	pulumi.Input

	ToTokenRequestSpecOutput() TokenRequestSpecOutput
	ToTokenRequestSpecOutputWithContext(context.Context) TokenRequestSpecOutput
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecArgs struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
	BoundObjectRef BoundObjectReferencePtrInput `pulumi:"boundObjectRef"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return i.ToTokenRequestSpecOutputWithContext(context.Background())
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecOutput)
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecPtrOutput() TokenRequestSpecPtrOutput {
	return i.ToTokenRequestSpecPtrOutputWithContext(context.Background())
}

func (i TokenRequestSpecArgs) ToTokenRequestSpecPtrOutputWithContext(ctx context.Context) TokenRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecOutput).ToTokenRequestSpecPtrOutputWithContext(ctx)
}

// TokenRequestSpecPtrInput is an input type that accepts TokenRequestSpecArgs, TokenRequestSpecPtr and TokenRequestSpecPtrOutput values.
// You can construct a concrete instance of `TokenRequestSpecPtrInput` via:
//
// 		 TokenRequestSpecArgs{...}
//
//  or:
//
// 		 nil
//
type TokenRequestSpecPtrInput interface {
	pulumi.Input

	ToTokenRequestSpecPtrOutput() TokenRequestSpecPtrOutput
	ToTokenRequestSpecPtrOutputWithContext(context.Context) TokenRequestSpecPtrOutput
}

type tokenRequestSpecPtrType TokenRequestSpecArgs

func TokenRequestSpecPtr(v *TokenRequestSpecArgs) TokenRequestSpecPtrInput {
	return (*tokenRequestSpecPtrType)(v)
}

func (*tokenRequestSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestSpec)(nil)).Elem()
}

func (i *tokenRequestSpecPtrType) ToTokenRequestSpecPtrOutput() TokenRequestSpecPtrOutput {
	return i.ToTokenRequestSpecPtrOutputWithContext(context.Background())
}

func (i *tokenRequestSpecPtrType) ToTokenRequestSpecPtrOutputWithContext(ctx context.Context) TokenRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestSpecPtrOutput)
}

// TokenRequestSpec contains client provided parameters of a token request.
type TokenRequestSpecOutput struct{ *pulumi.OutputState }

func (TokenRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestSpec)(nil)).Elem()
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutput() TokenRequestSpecOutput {
	return o
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecOutputWithContext(ctx context.Context) TokenRequestSpecOutput {
	return o
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecPtrOutput() TokenRequestSpecPtrOutput {
	return o.ToTokenRequestSpecPtrOutputWithContext(context.Background())
}

func (o TokenRequestSpecOutput) ToTokenRequestSpecPtrOutputWithContext(ctx context.Context) TokenRequestSpecPtrOutput {
	return o.ApplyT(func(v TokenRequestSpec) *TokenRequestSpec {
		return &v
	}).(TokenRequestSpecPtrOutput)
}

// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenRequestSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecOutput) BoundObjectRef() BoundObjectReferencePtrOutput {
	return o.ApplyT(func(v TokenRequestSpec) *BoundObjectReference { return v.BoundObjectRef }).(BoundObjectReferencePtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TokenRequestSpec) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

type TokenRequestSpecPtrOutput struct{ *pulumi.OutputState }

func (TokenRequestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestSpec)(nil)).Elem()
}

func (o TokenRequestSpecPtrOutput) ToTokenRequestSpecPtrOutput() TokenRequestSpecPtrOutput {
	return o
}

func (o TokenRequestSpecPtrOutput) ToTokenRequestSpecPtrOutputWithContext(ctx context.Context) TokenRequestSpecPtrOutput {
	return o
}

func (o TokenRequestSpecPtrOutput) Elem() TokenRequestSpecOutput {
	return o.ApplyT(func(v *TokenRequestSpec) TokenRequestSpec { return *v }).(TokenRequestSpecOutput)
}

// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
func (o TokenRequestSpecPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenRequestSpec) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
func (o TokenRequestSpecPtrOutput) BoundObjectRef() BoundObjectReferencePtrOutput {
	return o.ApplyT(func(v *TokenRequestSpec) *BoundObjectReference {
		if v == nil {
			return nil
		}
		return v.BoundObjectRef
	}).(BoundObjectReferencePtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
func (o TokenRequestSpecPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TokenRequestSpec) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatus struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp string `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token string `pulumi:"token"`
}

// TokenRequestStatusInput is an input type that accepts TokenRequestStatusArgs and TokenRequestStatusOutput values.
// You can construct a concrete instance of `TokenRequestStatusInput` via:
//
// 		 TokenRequestStatusArgs{...}
//
type TokenRequestStatusInput interface {
	pulumi.Input

	ToTokenRequestStatusOutput() TokenRequestStatusOutput
	ToTokenRequestStatusOutputWithContext(context.Context) TokenRequestStatusOutput
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusArgs struct {
	// ExpirationTimestamp is the time of expiration of the returned token.
	ExpirationTimestamp pulumi.StringInput `pulumi:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token pulumi.StringInput `pulumi:"token"`
}

func (TokenRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return i.ToTokenRequestStatusOutputWithContext(context.Background())
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusOutput)
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return i.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (i TokenRequestStatusArgs) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusOutput).ToTokenRequestStatusPtrOutputWithContext(ctx)
}

// TokenRequestStatusPtrInput is an input type that accepts TokenRequestStatusArgs, TokenRequestStatusPtr and TokenRequestStatusPtrOutput values.
// You can construct a concrete instance of `TokenRequestStatusPtrInput` via:
//
// 		 TokenRequestStatusArgs{...}
//
//  or:
//
// 		 nil
//
type TokenRequestStatusPtrInput interface {
	pulumi.Input

	ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput
	ToTokenRequestStatusPtrOutputWithContext(context.Context) TokenRequestStatusPtrOutput
}

type tokenRequestStatusPtrType TokenRequestStatusArgs

func TokenRequestStatusPtr(v *TokenRequestStatusArgs) TokenRequestStatusPtrInput {
	return (*tokenRequestStatusPtrType)(v)
}

func (*tokenRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatus)(nil)).Elem()
}

func (i *tokenRequestStatusPtrType) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return i.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (i *tokenRequestStatusPtrType) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestStatusPtrOutput)
}

// TokenRequestStatus is the result of a token request.
type TokenRequestStatusOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestStatus)(nil)).Elem()
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutput() TokenRequestStatusOutput {
	return o
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusOutputWithContext(ctx context.Context) TokenRequestStatusOutput {
	return o
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return o.ToTokenRequestStatusPtrOutputWithContext(context.Background())
}

func (o TokenRequestStatusOutput) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return o.ApplyT(func(v TokenRequestStatus) *TokenRequestStatus {
		return &v
	}).(TokenRequestStatusPtrOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusOutput) ExpirationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestStatus) string { return v.ExpirationTimestamp }).(pulumi.StringOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequestStatus) string { return v.Token }).(pulumi.StringOutput)
}

type TokenRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (TokenRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenRequestStatus)(nil)).Elem()
}

func (o TokenRequestStatusPtrOutput) ToTokenRequestStatusPtrOutput() TokenRequestStatusPtrOutput {
	return o
}

func (o TokenRequestStatusPtrOutput) ToTokenRequestStatusPtrOutputWithContext(ctx context.Context) TokenRequestStatusPtrOutput {
	return o
}

func (o TokenRequestStatusPtrOutput) Elem() TokenRequestStatusOutput {
	return o.ApplyT(func(v *TokenRequestStatus) TokenRequestStatus { return *v }).(TokenRequestStatusOutput)
}

// ExpirationTimestamp is the time of expiration of the returned token.
func (o TokenRequestStatusPtrOutput) ExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatus) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Token is the opaque bearer token.
func (o TokenRequestStatusPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenRequestStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     string            `pulumi:"kind"`
	Metadata metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status TokenReviewStatus `pulumi:"status"`
}

// TokenReviewTypeInput is an input type that accepts TokenReviewTypeArgs and TokenReviewTypeOutput values.
// You can construct a concrete instance of `TokenReviewTypeInput` via:
//
// 		 TokenReviewTypeArgs{...}
//
type TokenReviewTypeInput interface {
	pulumi.Input

	ToTokenReviewTypeOutput() TokenReviewTypeOutput
	ToTokenReviewTypeOutputWithContext(context.Context) TokenReviewTypeOutput
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec TokenReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request can be authenticated.
	Status TokenReviewStatusInput `pulumi:"status"`
}

func (TokenReviewTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewType)(nil)).Elem()
}

func (i TokenReviewTypeArgs) ToTokenReviewTypeOutput() TokenReviewTypeOutput {
	return i.ToTokenReviewTypeOutputWithContext(context.Background())
}

func (i TokenReviewTypeArgs) ToTokenReviewTypeOutputWithContext(ctx context.Context) TokenReviewTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewTypeOutput)
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type TokenReviewTypeOutput struct{ *pulumi.OutputState }

func (TokenReviewTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewType)(nil)).Elem()
}

func (o TokenReviewTypeOutput) ToTokenReviewTypeOutput() TokenReviewTypeOutput {
	return o
}

func (o TokenReviewTypeOutput) ToTokenReviewTypeOutputWithContext(ctx context.Context) TokenReviewTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TokenReviewTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TokenReviewType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TokenReviewTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TokenReviewType) string { return v.Kind }).(pulumi.StringOutput)
}

func (o TokenReviewTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v TokenReviewType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Spec holds information about the request being evaluated
func (o TokenReviewTypeOutput) Spec() TokenReviewSpecOutput {
	return o.ApplyT(func(v TokenReviewType) TokenReviewSpec { return v.Spec }).(TokenReviewSpecOutput)
}

// Status is filled in by the server and indicates whether the request can be authenticated.
func (o TokenReviewTypeOutput) Status() TokenReviewStatusOutput {
	return o.ApplyT(func(v TokenReviewType) TokenReviewStatus { return v.Status }).(TokenReviewStatusOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpec struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []string `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token *string `pulumi:"token"`
}

// TokenReviewSpecInput is an input type that accepts TokenReviewSpecArgs and TokenReviewSpecOutput values.
// You can construct a concrete instance of `TokenReviewSpecInput` via:
//
// 		 TokenReviewSpecArgs{...}
//
type TokenReviewSpecInput interface {
	pulumi.Input

	ToTokenReviewSpecOutput() TokenReviewSpecOutput
	ToTokenReviewSpecOutputWithContext(context.Context) TokenReviewSpecOutput
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecArgs struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Token is the opaque bearer token.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (TokenReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return i.ToTokenReviewSpecOutputWithContext(context.Background())
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecOutput)
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecPtrOutput() TokenReviewSpecPtrOutput {
	return i.ToTokenReviewSpecPtrOutputWithContext(context.Background())
}

func (i TokenReviewSpecArgs) ToTokenReviewSpecPtrOutputWithContext(ctx context.Context) TokenReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecOutput).ToTokenReviewSpecPtrOutputWithContext(ctx)
}

// TokenReviewSpecPtrInput is an input type that accepts TokenReviewSpecArgs, TokenReviewSpecPtr and TokenReviewSpecPtrOutput values.
// You can construct a concrete instance of `TokenReviewSpecPtrInput` via:
//
// 		 TokenReviewSpecArgs{...}
//
//  or:
//
// 		 nil
//
type TokenReviewSpecPtrInput interface {
	pulumi.Input

	ToTokenReviewSpecPtrOutput() TokenReviewSpecPtrOutput
	ToTokenReviewSpecPtrOutputWithContext(context.Context) TokenReviewSpecPtrOutput
}

type tokenReviewSpecPtrType TokenReviewSpecArgs

func TokenReviewSpecPtr(v *TokenReviewSpecArgs) TokenReviewSpecPtrInput {
	return (*tokenReviewSpecPtrType)(v)
}

func (*tokenReviewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewSpec)(nil)).Elem()
}

func (i *tokenReviewSpecPtrType) ToTokenReviewSpecPtrOutput() TokenReviewSpecPtrOutput {
	return i.ToTokenReviewSpecPtrOutputWithContext(context.Background())
}

func (i *tokenReviewSpecPtrType) ToTokenReviewSpecPtrOutputWithContext(ctx context.Context) TokenReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewSpecPtrOutput)
}

// TokenReviewSpec is a description of the token authentication request.
type TokenReviewSpecOutput struct{ *pulumi.OutputState }

func (TokenReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewSpec)(nil)).Elem()
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutput() TokenReviewSpecOutput {
	return o
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecOutputWithContext(ctx context.Context) TokenReviewSpecOutput {
	return o
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecPtrOutput() TokenReviewSpecPtrOutput {
	return o.ToTokenReviewSpecPtrOutputWithContext(context.Background())
}

func (o TokenReviewSpecOutput) ToTokenReviewSpecPtrOutputWithContext(ctx context.Context) TokenReviewSpecPtrOutput {
	return o.ApplyT(func(v TokenReviewSpec) *TokenReviewSpec {
		return &v
	}).(TokenReviewSpecPtrOutput)
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewSpec) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewSpec) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type TokenReviewSpecPtrOutput struct{ *pulumi.OutputState }

func (TokenReviewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewSpec)(nil)).Elem()
}

func (o TokenReviewSpecPtrOutput) ToTokenReviewSpecPtrOutput() TokenReviewSpecPtrOutput {
	return o
}

func (o TokenReviewSpecPtrOutput) ToTokenReviewSpecPtrOutputWithContext(ctx context.Context) TokenReviewSpecPtrOutput {
	return o
}

func (o TokenReviewSpecPtrOutput) Elem() TokenReviewSpecOutput {
	return o.ApplyT(func(v *TokenReviewSpec) TokenReviewSpec { return *v }).(TokenReviewSpecOutput)
}

// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
func (o TokenReviewSpecPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenReviewSpec) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Token is the opaque bearer token.
func (o TokenReviewSpecPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenReviewSpec) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatus struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []string `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error *string `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User *UserInfo `pulumi:"user"`
}

// TokenReviewStatusInput is an input type that accepts TokenReviewStatusArgs and TokenReviewStatusOutput values.
// You can construct a concrete instance of `TokenReviewStatusInput` via:
//
// 		 TokenReviewStatusArgs{...}
//
type TokenReviewStatusInput interface {
	pulumi.Input

	ToTokenReviewStatusOutput() TokenReviewStatusOutput
	ToTokenReviewStatusOutputWithContext(context.Context) TokenReviewStatusOutput
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusArgs struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated pulumi.BoolPtrInput `pulumi:"authenticated"`
	// Error indicates that the token couldn't be checked
	Error pulumi.StringPtrInput `pulumi:"error"`
	// User is the UserInfo associated with the provided token.
	User UserInfoPtrInput `pulumi:"user"`
}

func (TokenReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return i.ToTokenReviewStatusOutputWithContext(context.Background())
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusOutput)
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return i.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (i TokenReviewStatusArgs) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusOutput).ToTokenReviewStatusPtrOutputWithContext(ctx)
}

// TokenReviewStatusPtrInput is an input type that accepts TokenReviewStatusArgs, TokenReviewStatusPtr and TokenReviewStatusPtrOutput values.
// You can construct a concrete instance of `TokenReviewStatusPtrInput` via:
//
// 		 TokenReviewStatusArgs{...}
//
//  or:
//
// 		 nil
//
type TokenReviewStatusPtrInput interface {
	pulumi.Input

	ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput
	ToTokenReviewStatusPtrOutputWithContext(context.Context) TokenReviewStatusPtrOutput
}

type tokenReviewStatusPtrType TokenReviewStatusArgs

func TokenReviewStatusPtr(v *TokenReviewStatusArgs) TokenReviewStatusPtrInput {
	return (*tokenReviewStatusPtrType)(v)
}

func (*tokenReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatus)(nil)).Elem()
}

func (i *tokenReviewStatusPtrType) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return i.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (i *tokenReviewStatusPtrType) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenReviewStatusPtrOutput)
}

// TokenReviewStatus is the result of the token authentication request.
type TokenReviewStatusOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenReviewStatus)(nil)).Elem()
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutput() TokenReviewStatusOutput {
	return o
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusOutputWithContext(ctx context.Context) TokenReviewStatusOutput {
	return o
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return o.ToTokenReviewStatusPtrOutputWithContext(context.Background())
}

func (o TokenReviewStatusOutput) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *TokenReviewStatus {
		return &v
	}).(TokenReviewStatusPtrOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TokenReviewStatus) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *bool { return v.Authenticated }).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusOutput) User() UserInfoPtrOutput {
	return o.ApplyT(func(v TokenReviewStatus) *UserInfo { return v.User }).(UserInfoPtrOutput)
}

type TokenReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (TokenReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenReviewStatus)(nil)).Elem()
}

func (o TokenReviewStatusPtrOutput) ToTokenReviewStatusPtrOutput() TokenReviewStatusPtrOutput {
	return o
}

func (o TokenReviewStatusPtrOutput) ToTokenReviewStatusPtrOutputWithContext(ctx context.Context) TokenReviewStatusPtrOutput {
	return o
}

func (o TokenReviewStatusPtrOutput) Elem() TokenReviewStatusOutput {
	return o.ApplyT(func(v *TokenReviewStatus) TokenReviewStatus { return *v }).(TokenReviewStatusOutput)
}

// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
func (o TokenReviewStatusPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TokenReviewStatus) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Authenticated indicates that the token was associated with a known user.
func (o TokenReviewStatusPtrOutput) Authenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Authenticated
	}).(pulumi.BoolPtrOutput)
}

// Error indicates that the token couldn't be checked
func (o TokenReviewStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// User is the UserInfo associated with the provided token.
func (o TokenReviewStatusPtrOutput) User() UserInfoPtrOutput {
	return o.ApplyT(func(v *TokenReviewStatus) *UserInfo {
		if v == nil {
			return nil
		}
		return v.User
	}).(UserInfoPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfo struct {
	// Any additional information provided by the authenticator.
	Extra map[string][]string `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid *string `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username *string `pulumi:"username"`
}

// UserInfoInput is an input type that accepts UserInfoArgs and UserInfoOutput values.
// You can construct a concrete instance of `UserInfoInput` via:
//
// 		 UserInfoArgs{...}
//
type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoArgs struct {
	// Any additional information provided by the authenticator.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// The names of groups this user is a part of.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The name that uniquely identifies this user among all active users.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

func (i UserInfoArgs) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput).ToUserInfoPtrOutputWithContext(ctx)
}

// UserInfoPtrInput is an input type that accepts UserInfoArgs, UserInfoPtr and UserInfoPtrOutput values.
// You can construct a concrete instance of `UserInfoPtrInput` via:
//
// 		 UserInfoArgs{...}
//
//  or:
//
// 		 nil
//
type UserInfoPtrInput interface {
	pulumi.Input

	ToUserInfoPtrOutput() UserInfoPtrOutput
	ToUserInfoPtrOutputWithContext(context.Context) UserInfoPtrOutput
}

type userInfoPtrType UserInfoArgs

func UserInfoPtr(v *UserInfoArgs) UserInfoPtrInput {
	return (*userInfoPtrType)(v)
}

func (*userInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (i *userInfoPtrType) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i *userInfoPtrType) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPtrOutput)
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type UserInfoOutput struct{ *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o.ToUserInfoPtrOutputWithContext(context.Background())
}

func (o UserInfoOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o.ApplyT(func(v UserInfo) *UserInfo {
		return &v
	}).(UserInfoPtrOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v UserInfo) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserInfo) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserInfoPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) Elem() UserInfoOutput {
	return o.ApplyT(func(v *UserInfo) UserInfo { return *v }).(UserInfoOutput)
}

// Any additional information provided by the authenticator.
func (o UserInfoPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *UserInfo) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// The names of groups this user is a part of.
func (o UserInfoPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserInfo) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
func (o UserInfoPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// The name that uniquely identifies this user among all active users.
func (o UserInfoPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BoundObjectReferenceOutput{})
	pulumi.RegisterOutputType(BoundObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(TokenRequestTypeOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecOutput{})
	pulumi.RegisterOutputType(TokenRequestSpecPtrOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusOutput{})
	pulumi.RegisterOutputType(TokenRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(TokenReviewTypeOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecOutput{})
	pulumi.RegisterOutputType(TokenReviewSpecPtrOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusOutput{})
	pulumi.RegisterOutputType(TokenReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
	pulumi.RegisterOutputType(UserInfoPtrOutput{})
}
