// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type SelfSubjectReviewPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Status is filled in by the server with the user attributes.
	Status SelfSubjectReviewStatusPatchPtrOutput `pulumi:"status"`
}

// NewSelfSubjectReviewPatch registers a new resource with the given unique name, arguments, and options.
func NewSelfSubjectReviewPatch(ctx *pulumi.Context,
	name string, args *SelfSubjectReviewPatchArgs, opts ...pulumi.ResourceOption) (*SelfSubjectReviewPatch, error) {
	if args == nil {
		args = &SelfSubjectReviewPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("authentication.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("SelfSubjectReview")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:authentication.k8s.io/v1beta1:SelfSubjectReviewPatch"),
		},
	})
	opts = append(opts, aliases)
	var resource SelfSubjectReviewPatch
	err := ctx.RegisterResource("kubernetes:authentication.k8s.io/v1alpha1:SelfSubjectReviewPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSelfSubjectReviewPatch gets an existing SelfSubjectReviewPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSelfSubjectReviewPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SelfSubjectReviewPatchState, opts ...pulumi.ResourceOption) (*SelfSubjectReviewPatch, error) {
	var resource SelfSubjectReviewPatch
	err := ctx.ReadResource("kubernetes:authentication.k8s.io/v1alpha1:SelfSubjectReviewPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SelfSubjectReviewPatch resources.
type selfSubjectReviewPatchState struct {
}

type SelfSubjectReviewPatchState struct {
}

func (SelfSubjectReviewPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*selfSubjectReviewPatchState)(nil)).Elem()
}

type selfSubjectReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// The set of arguments for constructing a SelfSubjectReviewPatch resource.
type SelfSubjectReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
}

func (SelfSubjectReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*selfSubjectReviewPatchArgs)(nil)).Elem()
}

type SelfSubjectReviewPatchInput interface {
	pulumi.Input

	ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput
	ToSelfSubjectReviewPatchOutputWithContext(ctx context.Context) SelfSubjectReviewPatchOutput
}

func (*SelfSubjectReviewPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewPatch)(nil)).Elem()
}

func (i *SelfSubjectReviewPatch) ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput {
	return i.ToSelfSubjectReviewPatchOutputWithContext(context.Background())
}

func (i *SelfSubjectReviewPatch) ToSelfSubjectReviewPatchOutputWithContext(ctx context.Context) SelfSubjectReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewPatchOutput)
}

// SelfSubjectReviewPatchArrayInput is an input type that accepts SelfSubjectReviewPatchArray and SelfSubjectReviewPatchArrayOutput values.
// You can construct a concrete instance of `SelfSubjectReviewPatchArrayInput` via:
//
//	SelfSubjectReviewPatchArray{ SelfSubjectReviewPatchArgs{...} }
type SelfSubjectReviewPatchArrayInput interface {
	pulumi.Input

	ToSelfSubjectReviewPatchArrayOutput() SelfSubjectReviewPatchArrayOutput
	ToSelfSubjectReviewPatchArrayOutputWithContext(context.Context) SelfSubjectReviewPatchArrayOutput
}

type SelfSubjectReviewPatchArray []SelfSubjectReviewPatchInput

func (SelfSubjectReviewPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SelfSubjectReviewPatch)(nil)).Elem()
}

func (i SelfSubjectReviewPatchArray) ToSelfSubjectReviewPatchArrayOutput() SelfSubjectReviewPatchArrayOutput {
	return i.ToSelfSubjectReviewPatchArrayOutputWithContext(context.Background())
}

func (i SelfSubjectReviewPatchArray) ToSelfSubjectReviewPatchArrayOutputWithContext(ctx context.Context) SelfSubjectReviewPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewPatchArrayOutput)
}

// SelfSubjectReviewPatchMapInput is an input type that accepts SelfSubjectReviewPatchMap and SelfSubjectReviewPatchMapOutput values.
// You can construct a concrete instance of `SelfSubjectReviewPatchMapInput` via:
//
//	SelfSubjectReviewPatchMap{ "key": SelfSubjectReviewPatchArgs{...} }
type SelfSubjectReviewPatchMapInput interface {
	pulumi.Input

	ToSelfSubjectReviewPatchMapOutput() SelfSubjectReviewPatchMapOutput
	ToSelfSubjectReviewPatchMapOutputWithContext(context.Context) SelfSubjectReviewPatchMapOutput
}

type SelfSubjectReviewPatchMap map[string]SelfSubjectReviewPatchInput

func (SelfSubjectReviewPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SelfSubjectReviewPatch)(nil)).Elem()
}

func (i SelfSubjectReviewPatchMap) ToSelfSubjectReviewPatchMapOutput() SelfSubjectReviewPatchMapOutput {
	return i.ToSelfSubjectReviewPatchMapOutputWithContext(context.Background())
}

func (i SelfSubjectReviewPatchMap) ToSelfSubjectReviewPatchMapOutputWithContext(ctx context.Context) SelfSubjectReviewPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectReviewPatchMapOutput)
}

type SelfSubjectReviewPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectReviewPatch)(nil)).Elem()
}

func (o SelfSubjectReviewPatchOutput) ToSelfSubjectReviewPatchOutput() SelfSubjectReviewPatchOutput {
	return o
}

func (o SelfSubjectReviewPatchOutput) ToSelfSubjectReviewPatchOutputWithContext(ctx context.Context) SelfSubjectReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SelfSubjectReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Status is filled in by the server with the user attributes.
func (o SelfSubjectReviewPatchOutput) Status() SelfSubjectReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v *SelfSubjectReviewPatch) SelfSubjectReviewStatusPatchPtrOutput { return v.Status }).(SelfSubjectReviewStatusPatchPtrOutput)
}

type SelfSubjectReviewPatchArrayOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SelfSubjectReviewPatch)(nil)).Elem()
}

func (o SelfSubjectReviewPatchArrayOutput) ToSelfSubjectReviewPatchArrayOutput() SelfSubjectReviewPatchArrayOutput {
	return o
}

func (o SelfSubjectReviewPatchArrayOutput) ToSelfSubjectReviewPatchArrayOutputWithContext(ctx context.Context) SelfSubjectReviewPatchArrayOutput {
	return o
}

func (o SelfSubjectReviewPatchArrayOutput) Index(i pulumi.IntInput) SelfSubjectReviewPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SelfSubjectReviewPatch {
		return vs[0].([]*SelfSubjectReviewPatch)[vs[1].(int)]
	}).(SelfSubjectReviewPatchOutput)
}

type SelfSubjectReviewPatchMapOutput struct{ *pulumi.OutputState }

func (SelfSubjectReviewPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SelfSubjectReviewPatch)(nil)).Elem()
}

func (o SelfSubjectReviewPatchMapOutput) ToSelfSubjectReviewPatchMapOutput() SelfSubjectReviewPatchMapOutput {
	return o
}

func (o SelfSubjectReviewPatchMapOutput) ToSelfSubjectReviewPatchMapOutputWithContext(ctx context.Context) SelfSubjectReviewPatchMapOutput {
	return o
}

func (o SelfSubjectReviewPatchMapOutput) MapIndex(k pulumi.StringInput) SelfSubjectReviewPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SelfSubjectReviewPatch {
		return vs[0].(map[string]*SelfSubjectReviewPatch)[vs[1].(string)]
	}).(SelfSubjectReviewPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewPatchInput)(nil)).Elem(), &SelfSubjectReviewPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewPatchArrayInput)(nil)).Elem(), SelfSubjectReviewPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectReviewPatchMapInput)(nil)).Elem(), SelfSubjectReviewPatchMap{})
	pulumi.RegisterOutputType(SelfSubjectReviewPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewPatchArrayOutput{})
	pulumi.RegisterOutputType(SelfSubjectReviewPatchMapOutput{})
}
