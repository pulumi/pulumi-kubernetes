// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec SubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

// LocalSubjectAccessReviewInput is an input type that accepts LocalSubjectAccessReviewArgs and LocalSubjectAccessReviewOutput values.
// You can construct a concrete instance of `LocalSubjectAccessReviewInput` via:
//
//	LocalSubjectAccessReviewArgs{...}
type LocalSubjectAccessReviewInput interface {
	pulumi.Input

	ToLocalSubjectAccessReviewOutput() LocalSubjectAccessReviewOutput
	ToLocalSubjectAccessReviewOutputWithContext(context.Context) LocalSubjectAccessReviewOutput
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec SubjectAccessReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (LocalSubjectAccessReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReview)(nil)).Elem()
}

func (i LocalSubjectAccessReviewArgs) ToLocalSubjectAccessReviewOutput() LocalSubjectAccessReviewOutput {
	return i.ToLocalSubjectAccessReviewOutputWithContext(context.Background())
}

func (i LocalSubjectAccessReviewArgs) ToLocalSubjectAccessReviewOutputWithContext(ctx context.Context) LocalSubjectAccessReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalSubjectAccessReviewOutput)
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewOutput struct{ *pulumi.OutputState }

func (LocalSubjectAccessReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReview)(nil)).Elem()
}

func (o LocalSubjectAccessReviewOutput) ToLocalSubjectAccessReviewOutput() LocalSubjectAccessReviewOutput {
	return o
}

func (o LocalSubjectAccessReviewOutput) ToLocalSubjectAccessReviewOutputWithContext(ctx context.Context) LocalSubjectAccessReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LocalSubjectAccessReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LocalSubjectAccessReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LocalSubjectAccessReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
func (o LocalSubjectAccessReviewOutput) Spec() SubjectAccessReviewSpecOutput {
	return o.ApplyT(func(v LocalSubjectAccessReview) SubjectAccessReviewSpec { return v.Spec }).(SubjectAccessReviewSpecOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o LocalSubjectAccessReviewOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReview) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec *SubjectAccessReviewSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatusPatch `pulumi:"status"`
}

// LocalSubjectAccessReviewPatchInput is an input type that accepts LocalSubjectAccessReviewPatchArgs and LocalSubjectAccessReviewPatchOutput values.
// You can construct a concrete instance of `LocalSubjectAccessReviewPatchInput` via:
//
//	LocalSubjectAccessReviewPatchArgs{...}
type LocalSubjectAccessReviewPatchInput interface {
	pulumi.Input

	ToLocalSubjectAccessReviewPatchOutput() LocalSubjectAccessReviewPatchOutput
	ToLocalSubjectAccessReviewPatchOutputWithContext(context.Context) LocalSubjectAccessReviewPatchOutput
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec SubjectAccessReviewSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPatchPtrInput `pulumi:"status"`
}

func (LocalSubjectAccessReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReviewPatch)(nil)).Elem()
}

func (i LocalSubjectAccessReviewPatchArgs) ToLocalSubjectAccessReviewPatchOutput() LocalSubjectAccessReviewPatchOutput {
	return i.ToLocalSubjectAccessReviewPatchOutputWithContext(context.Background())
}

func (i LocalSubjectAccessReviewPatchArgs) ToLocalSubjectAccessReviewPatchOutputWithContext(ctx context.Context) LocalSubjectAccessReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalSubjectAccessReviewPatchOutput)
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewPatchOutput struct{ *pulumi.OutputState }

func (LocalSubjectAccessReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReviewPatch)(nil)).Elem()
}

func (o LocalSubjectAccessReviewPatchOutput) ToLocalSubjectAccessReviewPatchOutput() LocalSubjectAccessReviewPatchOutput {
	return o
}

func (o LocalSubjectAccessReviewPatchOutput) ToLocalSubjectAccessReviewPatchOutputWithContext(ctx context.Context) LocalSubjectAccessReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LocalSubjectAccessReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LocalSubjectAccessReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LocalSubjectAccessReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
func (o LocalSubjectAccessReviewPatchOutput) Spec() SubjectAccessReviewSpecPatchPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewPatch) *SubjectAccessReviewSpecPatch { return v.Spec }).(SubjectAccessReviewSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o LocalSubjectAccessReviewPatchOutput) Status() SubjectAccessReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewPatch) *SubjectAccessReviewStatusPatch { return v.Status }).(SubjectAccessReviewStatusPatchPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributes struct {
	// Path is the URL path of the request
	Path *string `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb *string `pulumi:"verb"`
}

// NonResourceAttributesInput is an input type that accepts NonResourceAttributesArgs and NonResourceAttributesOutput values.
// You can construct a concrete instance of `NonResourceAttributesInput` via:
//
//	NonResourceAttributesArgs{...}
type NonResourceAttributesInput interface {
	pulumi.Input

	ToNonResourceAttributesOutput() NonResourceAttributesOutput
	ToNonResourceAttributesOutputWithContext(context.Context) NonResourceAttributesOutput
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesArgs struct {
	// Path is the URL path of the request
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb pulumi.StringPtrInput `pulumi:"verb"`
}

func (NonResourceAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributes)(nil)).Elem()
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesOutput() NonResourceAttributesOutput {
	return i.ToNonResourceAttributesOutputWithContext(context.Background())
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesOutputWithContext(ctx context.Context) NonResourceAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesOutput)
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return i.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesOutput).ToNonResourceAttributesPtrOutputWithContext(ctx)
}

// NonResourceAttributesPtrInput is an input type that accepts NonResourceAttributesArgs, NonResourceAttributesPtr and NonResourceAttributesPtrOutput values.
// You can construct a concrete instance of `NonResourceAttributesPtrInput` via:
//
//	        NonResourceAttributesArgs{...}
//
//	or:
//
//	        nil
type NonResourceAttributesPtrInput interface {
	pulumi.Input

	ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput
	ToNonResourceAttributesPtrOutputWithContext(context.Context) NonResourceAttributesPtrOutput
}

type nonResourceAttributesPtrType NonResourceAttributesArgs

func NonResourceAttributesPtr(v *NonResourceAttributesArgs) NonResourceAttributesPtrInput {
	return (*nonResourceAttributesPtrType)(v)
}

func (*nonResourceAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributes)(nil)).Elem()
}

func (i *nonResourceAttributesPtrType) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return i.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (i *nonResourceAttributesPtrType) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributes)(nil)).Elem()
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesOutput() NonResourceAttributesOutput {
	return o
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesOutputWithContext(ctx context.Context) NonResourceAttributesOutput {
	return o
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return o.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NonResourceAttributes) *NonResourceAttributes {
		return &v
	}).(NonResourceAttributesPtrOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

type NonResourceAttributesPtrOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributes)(nil)).Elem()
}

func (o NonResourceAttributesPtrOutput) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return o
}

func (o NonResourceAttributesPtrOutput) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return o
}

func (o NonResourceAttributesPtrOutput) Elem() NonResourceAttributesOutput {
	return o.ApplyT(func(v *NonResourceAttributes) NonResourceAttributes {
		if v != nil {
			return *v
		}
		var ret NonResourceAttributes
		return ret
	}).(NonResourceAttributesOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Verb
	}).(pulumi.StringPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesPatch struct {
	// Path is the URL path of the request
	Path *string `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb *string `pulumi:"verb"`
}

// NonResourceAttributesPatchInput is an input type that accepts NonResourceAttributesPatchArgs and NonResourceAttributesPatchOutput values.
// You can construct a concrete instance of `NonResourceAttributesPatchInput` via:
//
//	NonResourceAttributesPatchArgs{...}
type NonResourceAttributesPatchInput interface {
	pulumi.Input

	ToNonResourceAttributesPatchOutput() NonResourceAttributesPatchOutput
	ToNonResourceAttributesPatchOutputWithContext(context.Context) NonResourceAttributesPatchOutput
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesPatchArgs struct {
	// Path is the URL path of the request
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb pulumi.StringPtrInput `pulumi:"verb"`
}

func (NonResourceAttributesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributesPatch)(nil)).Elem()
}

func (i NonResourceAttributesPatchArgs) ToNonResourceAttributesPatchOutput() NonResourceAttributesPatchOutput {
	return i.ToNonResourceAttributesPatchOutputWithContext(context.Background())
}

func (i NonResourceAttributesPatchArgs) ToNonResourceAttributesPatchOutputWithContext(ctx context.Context) NonResourceAttributesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesPatchOutput)
}

func (i NonResourceAttributesPatchArgs) ToNonResourceAttributesPatchPtrOutput() NonResourceAttributesPatchPtrOutput {
	return i.ToNonResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (i NonResourceAttributesPatchArgs) ToNonResourceAttributesPatchPtrOutputWithContext(ctx context.Context) NonResourceAttributesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesPatchOutput).ToNonResourceAttributesPatchPtrOutputWithContext(ctx)
}

// NonResourceAttributesPatchPtrInput is an input type that accepts NonResourceAttributesPatchArgs, NonResourceAttributesPatchPtr and NonResourceAttributesPatchPtrOutput values.
// You can construct a concrete instance of `NonResourceAttributesPatchPtrInput` via:
//
//	        NonResourceAttributesPatchArgs{...}
//
//	or:
//
//	        nil
type NonResourceAttributesPatchPtrInput interface {
	pulumi.Input

	ToNonResourceAttributesPatchPtrOutput() NonResourceAttributesPatchPtrOutput
	ToNonResourceAttributesPatchPtrOutputWithContext(context.Context) NonResourceAttributesPatchPtrOutput
}

type nonResourceAttributesPatchPtrType NonResourceAttributesPatchArgs

func NonResourceAttributesPatchPtr(v *NonResourceAttributesPatchArgs) NonResourceAttributesPatchPtrInput {
	return (*nonResourceAttributesPatchPtrType)(v)
}

func (*nonResourceAttributesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributesPatch)(nil)).Elem()
}

func (i *nonResourceAttributesPatchPtrType) ToNonResourceAttributesPatchPtrOutput() NonResourceAttributesPatchPtrOutput {
	return i.ToNonResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (i *nonResourceAttributesPatchPtrType) ToNonResourceAttributesPatchPtrOutputWithContext(ctx context.Context) NonResourceAttributesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesPatchPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesPatchOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributesPatch)(nil)).Elem()
}

func (o NonResourceAttributesPatchOutput) ToNonResourceAttributesPatchOutput() NonResourceAttributesPatchOutput {
	return o
}

func (o NonResourceAttributesPatchOutput) ToNonResourceAttributesPatchOutputWithContext(ctx context.Context) NonResourceAttributesPatchOutput {
	return o
}

func (o NonResourceAttributesPatchOutput) ToNonResourceAttributesPatchPtrOutput() NonResourceAttributesPatchPtrOutput {
	return o.ToNonResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (o NonResourceAttributesPatchOutput) ToNonResourceAttributesPatchPtrOutputWithContext(ctx context.Context) NonResourceAttributesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NonResourceAttributesPatch) *NonResourceAttributesPatch {
		return &v
	}).(NonResourceAttributesPatchPtrOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributesPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesPatchOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributesPatch) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

type NonResourceAttributesPatchPtrOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributesPatch)(nil)).Elem()
}

func (o NonResourceAttributesPatchPtrOutput) ToNonResourceAttributesPatchPtrOutput() NonResourceAttributesPatchPtrOutput {
	return o
}

func (o NonResourceAttributesPatchPtrOutput) ToNonResourceAttributesPatchPtrOutputWithContext(ctx context.Context) NonResourceAttributesPatchPtrOutput {
	return o
}

func (o NonResourceAttributesPatchPtrOutput) Elem() NonResourceAttributesPatchOutput {
	return o.ApplyT(func(v *NonResourceAttributesPatch) NonResourceAttributesPatch {
		if v != nil {
			return *v
		}
		var ret NonResourceAttributesPatch
		return ret
	}).(NonResourceAttributesPatchOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesPatchPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Verb
	}).(pulumi.StringPtrOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRule struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

// NonResourceRuleInput is an input type that accepts NonResourceRuleArgs and NonResourceRuleOutput values.
// You can construct a concrete instance of `NonResourceRuleInput` via:
//
//	NonResourceRuleArgs{...}
type NonResourceRuleInput interface {
	pulumi.Input

	ToNonResourceRuleOutput() NonResourceRuleOutput
	ToNonResourceRuleOutputWithContext(context.Context) NonResourceRuleOutput
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRuleArgs struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (NonResourceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRule)(nil)).Elem()
}

func (i NonResourceRuleArgs) ToNonResourceRuleOutput() NonResourceRuleOutput {
	return i.ToNonResourceRuleOutputWithContext(context.Background())
}

func (i NonResourceRuleArgs) ToNonResourceRuleOutputWithContext(ctx context.Context) NonResourceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRuleOutput)
}

// NonResourceRuleArrayInput is an input type that accepts NonResourceRuleArray and NonResourceRuleArrayOutput values.
// You can construct a concrete instance of `NonResourceRuleArrayInput` via:
//
//	NonResourceRuleArray{ NonResourceRuleArgs{...} }
type NonResourceRuleArrayInput interface {
	pulumi.Input

	ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput
	ToNonResourceRuleArrayOutputWithContext(context.Context) NonResourceRuleArrayOutput
}

type NonResourceRuleArray []NonResourceRuleInput

func (NonResourceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRule)(nil)).Elem()
}

func (i NonResourceRuleArray) ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput {
	return i.ToNonResourceRuleArrayOutputWithContext(context.Background())
}

func (i NonResourceRuleArray) ToNonResourceRuleArrayOutputWithContext(ctx context.Context) NonResourceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRuleArrayOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRuleOutput struct{ *pulumi.OutputState }

func (NonResourceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRule)(nil)).Elem()
}

func (o NonResourceRuleOutput) ToNonResourceRuleOutput() NonResourceRuleOutput {
	return o
}

func (o NonResourceRuleOutput) ToNonResourceRuleOutputWithContext(ctx context.Context) NonResourceRuleOutput {
	return o
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
func (o NonResourceRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
func (o NonResourceRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type NonResourceRuleArrayOutput struct{ *pulumi.OutputState }

func (NonResourceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRule)(nil)).Elem()
}

func (o NonResourceRuleArrayOutput) ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput {
	return o
}

func (o NonResourceRuleArrayOutput) ToNonResourceRuleArrayOutputWithContext(ctx context.Context) NonResourceRuleArrayOutput {
	return o
}

func (o NonResourceRuleArrayOutput) Index(i pulumi.IntInput) NonResourceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonResourceRule {
		return vs[0].([]NonResourceRule)[vs[1].(int)]
	}).(NonResourceRuleOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRulePatch struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

// NonResourceRulePatchInput is an input type that accepts NonResourceRulePatchArgs and NonResourceRulePatchOutput values.
// You can construct a concrete instance of `NonResourceRulePatchInput` via:
//
//	NonResourceRulePatchArgs{...}
type NonResourceRulePatchInput interface {
	pulumi.Input

	ToNonResourceRulePatchOutput() NonResourceRulePatchOutput
	ToNonResourceRulePatchOutputWithContext(context.Context) NonResourceRulePatchOutput
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRulePatchArgs struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (NonResourceRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRulePatch)(nil)).Elem()
}

func (i NonResourceRulePatchArgs) ToNonResourceRulePatchOutput() NonResourceRulePatchOutput {
	return i.ToNonResourceRulePatchOutputWithContext(context.Background())
}

func (i NonResourceRulePatchArgs) ToNonResourceRulePatchOutputWithContext(ctx context.Context) NonResourceRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRulePatchOutput)
}

// NonResourceRulePatchArrayInput is an input type that accepts NonResourceRulePatchArray and NonResourceRulePatchArrayOutput values.
// You can construct a concrete instance of `NonResourceRulePatchArrayInput` via:
//
//	NonResourceRulePatchArray{ NonResourceRulePatchArgs{...} }
type NonResourceRulePatchArrayInput interface {
	pulumi.Input

	ToNonResourceRulePatchArrayOutput() NonResourceRulePatchArrayOutput
	ToNonResourceRulePatchArrayOutputWithContext(context.Context) NonResourceRulePatchArrayOutput
}

type NonResourceRulePatchArray []NonResourceRulePatchInput

func (NonResourceRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRulePatch)(nil)).Elem()
}

func (i NonResourceRulePatchArray) ToNonResourceRulePatchArrayOutput() NonResourceRulePatchArrayOutput {
	return i.ToNonResourceRulePatchArrayOutputWithContext(context.Background())
}

func (i NonResourceRulePatchArray) ToNonResourceRulePatchArrayOutputWithContext(ctx context.Context) NonResourceRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRulePatchArrayOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRulePatchOutput struct{ *pulumi.OutputState }

func (NonResourceRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRulePatch)(nil)).Elem()
}

func (o NonResourceRulePatchOutput) ToNonResourceRulePatchOutput() NonResourceRulePatchOutput {
	return o
}

func (o NonResourceRulePatchOutput) ToNonResourceRulePatchOutputWithContext(ctx context.Context) NonResourceRulePatchOutput {
	return o
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
func (o NonResourceRulePatchOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRulePatch) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
func (o NonResourceRulePatchOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRulePatch) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type NonResourceRulePatchArrayOutput struct{ *pulumi.OutputState }

func (NonResourceRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRulePatch)(nil)).Elem()
}

func (o NonResourceRulePatchArrayOutput) ToNonResourceRulePatchArrayOutput() NonResourceRulePatchArrayOutput {
	return o
}

func (o NonResourceRulePatchArrayOutput) ToNonResourceRulePatchArrayOutputWithContext(ctx context.Context) NonResourceRulePatchArrayOutput {
	return o
}

func (o NonResourceRulePatchArrayOutput) Index(i pulumi.IntInput) NonResourceRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonResourceRulePatch {
		return vs[0].([]NonResourceRulePatch)[vs[1].(int)]
	}).(NonResourceRulePatchOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributes struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group *string `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace *string `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource *string `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource *string `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb *string `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version *string `pulumi:"version"`
}

// ResourceAttributesInput is an input type that accepts ResourceAttributesArgs and ResourceAttributesOutput values.
// You can construct a concrete instance of `ResourceAttributesInput` via:
//
//	ResourceAttributesArgs{...}
type ResourceAttributesInput interface {
	pulumi.Input

	ToResourceAttributesOutput() ResourceAttributesOutput
	ToResourceAttributesOutputWithContext(context.Context) ResourceAttributesOutput
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesArgs struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource pulumi.StringPtrInput `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb pulumi.StringPtrInput `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ResourceAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributes)(nil)).Elem()
}

func (i ResourceAttributesArgs) ToResourceAttributesOutput() ResourceAttributesOutput {
	return i.ToResourceAttributesOutputWithContext(context.Background())
}

func (i ResourceAttributesArgs) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesOutput)
}

func (i ResourceAttributesArgs) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return i.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (i ResourceAttributesArgs) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesOutput).ToResourceAttributesPtrOutputWithContext(ctx)
}

// ResourceAttributesPtrInput is an input type that accepts ResourceAttributesArgs, ResourceAttributesPtr and ResourceAttributesPtrOutput values.
// You can construct a concrete instance of `ResourceAttributesPtrInput` via:
//
//	        ResourceAttributesArgs{...}
//
//	or:
//
//	        nil
type ResourceAttributesPtrInput interface {
	pulumi.Input

	ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput
	ToResourceAttributesPtrOutputWithContext(context.Context) ResourceAttributesPtrOutput
}

type resourceAttributesPtrType ResourceAttributesArgs

func ResourceAttributesPtr(v *ResourceAttributesArgs) ResourceAttributesPtrInput {
	return (*resourceAttributesPtrType)(v)
}

func (*resourceAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (i *resourceAttributesPtrType) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return i.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (i *resourceAttributesPtrType) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesPtrOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesOutput struct{ *pulumi.OutputState }

func (ResourceAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesOutput) ToResourceAttributesOutput() ResourceAttributesOutput {
	return o
}

func (o ResourceAttributesOutput) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return o
}

func (o ResourceAttributesOutput) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return o.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (o ResourceAttributesOutput) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAttributes) *ResourceAttributes {
		return &v
	}).(ResourceAttributesPtrOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ResourceAttributesPtrOutput struct{ *pulumi.OutputState }

func (ResourceAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesPtrOutput) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return o
}

func (o ResourceAttributesPtrOutput) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return o
}

func (o ResourceAttributesPtrOutput) Elem() ResourceAttributesOutput {
	return o.ApplyT(func(v *ResourceAttributes) ResourceAttributes {
		if v != nil {
			return *v
		}
		var ret ResourceAttributes
		return ret
	}).(ResourceAttributesOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesPtrOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Subresource
	}).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Verb
	}).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesPatch struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group *string `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace *string `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource *string `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource *string `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb *string `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version *string `pulumi:"version"`
}

// ResourceAttributesPatchInput is an input type that accepts ResourceAttributesPatchArgs and ResourceAttributesPatchOutput values.
// You can construct a concrete instance of `ResourceAttributesPatchInput` via:
//
//	ResourceAttributesPatchArgs{...}
type ResourceAttributesPatchInput interface {
	pulumi.Input

	ToResourceAttributesPatchOutput() ResourceAttributesPatchOutput
	ToResourceAttributesPatchOutputWithContext(context.Context) ResourceAttributesPatchOutput
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesPatchArgs struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource pulumi.StringPtrInput `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb pulumi.StringPtrInput `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ResourceAttributesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributesPatch)(nil)).Elem()
}

func (i ResourceAttributesPatchArgs) ToResourceAttributesPatchOutput() ResourceAttributesPatchOutput {
	return i.ToResourceAttributesPatchOutputWithContext(context.Background())
}

func (i ResourceAttributesPatchArgs) ToResourceAttributesPatchOutputWithContext(ctx context.Context) ResourceAttributesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesPatchOutput)
}

func (i ResourceAttributesPatchArgs) ToResourceAttributesPatchPtrOutput() ResourceAttributesPatchPtrOutput {
	return i.ToResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (i ResourceAttributesPatchArgs) ToResourceAttributesPatchPtrOutputWithContext(ctx context.Context) ResourceAttributesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesPatchOutput).ToResourceAttributesPatchPtrOutputWithContext(ctx)
}

// ResourceAttributesPatchPtrInput is an input type that accepts ResourceAttributesPatchArgs, ResourceAttributesPatchPtr and ResourceAttributesPatchPtrOutput values.
// You can construct a concrete instance of `ResourceAttributesPatchPtrInput` via:
//
//	        ResourceAttributesPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceAttributesPatchPtrInput interface {
	pulumi.Input

	ToResourceAttributesPatchPtrOutput() ResourceAttributesPatchPtrOutput
	ToResourceAttributesPatchPtrOutputWithContext(context.Context) ResourceAttributesPatchPtrOutput
}

type resourceAttributesPatchPtrType ResourceAttributesPatchArgs

func ResourceAttributesPatchPtr(v *ResourceAttributesPatchArgs) ResourceAttributesPatchPtrInput {
	return (*resourceAttributesPatchPtrType)(v)
}

func (*resourceAttributesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributesPatch)(nil)).Elem()
}

func (i *resourceAttributesPatchPtrType) ToResourceAttributesPatchPtrOutput() ResourceAttributesPatchPtrOutput {
	return i.ToResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (i *resourceAttributesPatchPtrType) ToResourceAttributesPatchPtrOutputWithContext(ctx context.Context) ResourceAttributesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesPatchPtrOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesPatchOutput struct{ *pulumi.OutputState }

func (ResourceAttributesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributesPatch)(nil)).Elem()
}

func (o ResourceAttributesPatchOutput) ToResourceAttributesPatchOutput() ResourceAttributesPatchOutput {
	return o
}

func (o ResourceAttributesPatchOutput) ToResourceAttributesPatchOutputWithContext(ctx context.Context) ResourceAttributesPatchOutput {
	return o
}

func (o ResourceAttributesPatchOutput) ToResourceAttributesPatchPtrOutput() ResourceAttributesPatchPtrOutput {
	return o.ToResourceAttributesPatchPtrOutputWithContext(context.Background())
}

func (o ResourceAttributesPatchOutput) ToResourceAttributesPatchPtrOutputWithContext(ctx context.Context) ResourceAttributesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAttributesPatch) *ResourceAttributesPatch {
		return &v
	}).(ResourceAttributesPatchPtrOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesPatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesPatchOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesPatchOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributesPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ResourceAttributesPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceAttributesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributesPatch)(nil)).Elem()
}

func (o ResourceAttributesPatchPtrOutput) ToResourceAttributesPatchPtrOutput() ResourceAttributesPatchPtrOutput {
	return o
}

func (o ResourceAttributesPatchPtrOutput) ToResourceAttributesPatchPtrOutputWithContext(ctx context.Context) ResourceAttributesPatchPtrOutput {
	return o
}

func (o ResourceAttributesPatchPtrOutput) Elem() ResourceAttributesPatchOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) ResourceAttributesPatch {
		if v != nil {
			return *v
		}
		var ret ResourceAttributesPatch
		return ret
	}).(ResourceAttributesPatchOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesPatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesPatchPtrOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Subresource
	}).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesPatchPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Verb
	}).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAttributesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups []string `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

// ResourceRuleInput is an input type that accepts ResourceRuleArgs and ResourceRuleOutput values.
// You can construct a concrete instance of `ResourceRuleInput` via:
//
//	ResourceRuleArgs{...}
type ResourceRuleInput interface {
	pulumi.Input

	ToResourceRuleOutput() ResourceRuleOutput
	ToResourceRuleOutputWithContext(context.Context) ResourceRuleOutput
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRuleArgs struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (ResourceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRule)(nil)).Elem()
}

func (i ResourceRuleArgs) ToResourceRuleOutput() ResourceRuleOutput {
	return i.ToResourceRuleOutputWithContext(context.Background())
}

func (i ResourceRuleArgs) ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRuleOutput)
}

// ResourceRuleArrayInput is an input type that accepts ResourceRuleArray and ResourceRuleArrayOutput values.
// You can construct a concrete instance of `ResourceRuleArrayInput` via:
//
//	ResourceRuleArray{ ResourceRuleArgs{...} }
type ResourceRuleArrayInput interface {
	pulumi.Input

	ToResourceRuleArrayOutput() ResourceRuleArrayOutput
	ToResourceRuleArrayOutputWithContext(context.Context) ResourceRuleArrayOutput
}

type ResourceRuleArray []ResourceRuleInput

func (ResourceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRule)(nil)).Elem()
}

func (i ResourceRuleArray) ToResourceRuleArrayOutput() ResourceRuleArrayOutput {
	return i.ToResourceRuleArrayOutputWithContext(context.Background())
}

func (i ResourceRuleArray) ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRuleArrayOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRuleOutput struct{ *pulumi.OutputState }

func (ResourceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRule)(nil)).Elem()
}

func (o ResourceRuleOutput) ToResourceRuleOutput() ResourceRuleOutput {
	return o
}

func (o ResourceRuleOutput) ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput {
	return o
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
func (o ResourceRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
func (o ResourceRuleOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
//
//	"*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
func (o ResourceRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type ResourceRuleArrayOutput struct{ *pulumi.OutputState }

func (ResourceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRule)(nil)).Elem()
}

func (o ResourceRuleArrayOutput) ToResourceRuleArrayOutput() ResourceRuleArrayOutput {
	return o
}

func (o ResourceRuleArrayOutput) ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput {
	return o
}

func (o ResourceRuleArrayOutput) Index(i pulumi.IntInput) ResourceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRule {
		return vs[0].([]ResourceRule)[vs[1].(int)]
	}).(ResourceRuleOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRulePatch struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups []string `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

// ResourceRulePatchInput is an input type that accepts ResourceRulePatchArgs and ResourceRulePatchOutput values.
// You can construct a concrete instance of `ResourceRulePatchInput` via:
//
//	ResourceRulePatchArgs{...}
type ResourceRulePatchInput interface {
	pulumi.Input

	ToResourceRulePatchOutput() ResourceRulePatchOutput
	ToResourceRulePatchOutputWithContext(context.Context) ResourceRulePatchOutput
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRulePatchArgs struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (ResourceRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRulePatch)(nil)).Elem()
}

func (i ResourceRulePatchArgs) ToResourceRulePatchOutput() ResourceRulePatchOutput {
	return i.ToResourceRulePatchOutputWithContext(context.Background())
}

func (i ResourceRulePatchArgs) ToResourceRulePatchOutputWithContext(ctx context.Context) ResourceRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRulePatchOutput)
}

// ResourceRulePatchArrayInput is an input type that accepts ResourceRulePatchArray and ResourceRulePatchArrayOutput values.
// You can construct a concrete instance of `ResourceRulePatchArrayInput` via:
//
//	ResourceRulePatchArray{ ResourceRulePatchArgs{...} }
type ResourceRulePatchArrayInput interface {
	pulumi.Input

	ToResourceRulePatchArrayOutput() ResourceRulePatchArrayOutput
	ToResourceRulePatchArrayOutputWithContext(context.Context) ResourceRulePatchArrayOutput
}

type ResourceRulePatchArray []ResourceRulePatchInput

func (ResourceRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRulePatch)(nil)).Elem()
}

func (i ResourceRulePatchArray) ToResourceRulePatchArrayOutput() ResourceRulePatchArrayOutput {
	return i.ToResourceRulePatchArrayOutputWithContext(context.Background())
}

func (i ResourceRulePatchArray) ToResourceRulePatchArrayOutputWithContext(ctx context.Context) ResourceRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRulePatchArrayOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRulePatchOutput struct{ *pulumi.OutputState }

func (ResourceRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRulePatch)(nil)).Elem()
}

func (o ResourceRulePatchOutput) ToResourceRulePatchOutput() ResourceRulePatchOutput {
	return o
}

func (o ResourceRulePatchOutput) ToResourceRulePatchOutputWithContext(ctx context.Context) ResourceRulePatchOutput {
	return o
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
func (o ResourceRulePatchOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRulePatch) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
func (o ResourceRulePatchOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRulePatch) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
//
//	"*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
func (o ResourceRulePatchOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRulePatch) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceRulePatchOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRulePatch) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type ResourceRulePatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRulePatch)(nil)).Elem()
}

func (o ResourceRulePatchArrayOutput) ToResourceRulePatchArrayOutput() ResourceRulePatchArrayOutput {
	return o
}

func (o ResourceRulePatchArrayOutput) ToResourceRulePatchArrayOutputWithContext(ctx context.Context) ResourceRulePatchArrayOutput {
	return o
}

func (o ResourceRulePatchArrayOutput) Index(i pulumi.IntInput) ResourceRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRulePatch {
		return vs[0].([]ResourceRulePatch)[vs[1].(int)]
	}).(ResourceRulePatchOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec SelfSubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

// SelfSubjectAccessReviewInput is an input type that accepts SelfSubjectAccessReviewArgs and SelfSubjectAccessReviewOutput values.
// You can construct a concrete instance of `SelfSubjectAccessReviewInput` via:
//
//	SelfSubjectAccessReviewArgs{...}
type SelfSubjectAccessReviewInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewOutput() SelfSubjectAccessReviewOutput
	ToSelfSubjectAccessReviewOutputWithContext(context.Context) SelfSubjectAccessReviewOutput
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec SelfSubjectAccessReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (SelfSubjectAccessReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReview)(nil)).Elem()
}

func (i SelfSubjectAccessReviewArgs) ToSelfSubjectAccessReviewOutput() SelfSubjectAccessReviewOutput {
	return i.ToSelfSubjectAccessReviewOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewArgs) ToSelfSubjectAccessReviewOutputWithContext(ctx context.Context) SelfSubjectAccessReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReview)(nil)).Elem()
}

func (o SelfSubjectAccessReviewOutput) ToSelfSubjectAccessReviewOutput() SelfSubjectAccessReviewOutput {
	return o
}

func (o SelfSubjectAccessReviewOutput) ToSelfSubjectAccessReviewOutputWithContext(ctx context.Context) SelfSubjectAccessReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectAccessReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectAccessReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectAccessReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.  user and groups must be empty
func (o SelfSubjectAccessReviewOutput) Spec() SelfSubjectAccessReviewSpecOutput {
	return o.ApplyT(func(v SelfSubjectAccessReview) SelfSubjectAccessReviewSpec { return v.Spec }).(SelfSubjectAccessReviewSpecOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SelfSubjectAccessReviewOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReview) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec *SelfSubjectAccessReviewSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatusPatch `pulumi:"status"`
}

// SelfSubjectAccessReviewPatchInput is an input type that accepts SelfSubjectAccessReviewPatchArgs and SelfSubjectAccessReviewPatchOutput values.
// You can construct a concrete instance of `SelfSubjectAccessReviewPatchInput` via:
//
//	SelfSubjectAccessReviewPatchArgs{...}
type SelfSubjectAccessReviewPatchInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewPatchOutput() SelfSubjectAccessReviewPatchOutput
	ToSelfSubjectAccessReviewPatchOutputWithContext(context.Context) SelfSubjectAccessReviewPatchOutput
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec SelfSubjectAccessReviewSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPatchPtrInput `pulumi:"status"`
}

func (SelfSubjectAccessReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewPatch)(nil)).Elem()
}

func (i SelfSubjectAccessReviewPatchArgs) ToSelfSubjectAccessReviewPatchOutput() SelfSubjectAccessReviewPatchOutput {
	return i.ToSelfSubjectAccessReviewPatchOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewPatchArgs) ToSelfSubjectAccessReviewPatchOutputWithContext(ctx context.Context) SelfSubjectAccessReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewPatchOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewPatch)(nil)).Elem()
}

func (o SelfSubjectAccessReviewPatchOutput) ToSelfSubjectAccessReviewPatchOutput() SelfSubjectAccessReviewPatchOutput {
	return o
}

func (o SelfSubjectAccessReviewPatchOutput) ToSelfSubjectAccessReviewPatchOutputWithContext(ctx context.Context) SelfSubjectAccessReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectAccessReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectAccessReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectAccessReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated.  user and groups must be empty
func (o SelfSubjectAccessReviewPatchOutput) Spec() SelfSubjectAccessReviewSpecPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewPatch) *SelfSubjectAccessReviewSpecPatch { return v.Spec }).(SelfSubjectAccessReviewSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SelfSubjectAccessReviewPatchOutput) Status() SubjectAccessReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewPatch) *SubjectAccessReviewStatusPatch { return v.Status }).(SubjectAccessReviewStatusPatchPtrOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpec struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributes `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributes `pulumi:"resourceAttributes"`
}

// SelfSubjectAccessReviewSpecInput is an input type that accepts SelfSubjectAccessReviewSpecArgs and SelfSubjectAccessReviewSpecOutput values.
// You can construct a concrete instance of `SelfSubjectAccessReviewSpecInput` via:
//
//	SelfSubjectAccessReviewSpecArgs{...}
type SelfSubjectAccessReviewSpecInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput
	ToSelfSubjectAccessReviewSpecOutputWithContext(context.Context) SelfSubjectAccessReviewSpecOutput
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecArgs struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPtrInput `pulumi:"resourceAttributes"`
}

func (SelfSubjectAccessReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput {
	return i.ToSelfSubjectAccessReviewSpecOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecOutput {
	return o
}

// NonResourceAttributes describes information for a non-resource access request
func (o SelfSubjectAccessReviewSpecOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SelfSubjectAccessReviewSpecOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecPatch struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributesPatch `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributesPatch `pulumi:"resourceAttributes"`
}

// SelfSubjectAccessReviewSpecPatchInput is an input type that accepts SelfSubjectAccessReviewSpecPatchArgs and SelfSubjectAccessReviewSpecPatchOutput values.
// You can construct a concrete instance of `SelfSubjectAccessReviewSpecPatchInput` via:
//
//	SelfSubjectAccessReviewSpecPatchArgs{...}
type SelfSubjectAccessReviewSpecPatchInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewSpecPatchOutput() SelfSubjectAccessReviewSpecPatchOutput
	ToSelfSubjectAccessReviewSpecPatchOutputWithContext(context.Context) SelfSubjectAccessReviewSpecPatchOutput
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecPatchArgs struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPatchPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPatchPtrInput `pulumi:"resourceAttributes"`
}

func (SelfSubjectAccessReviewSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (i SelfSubjectAccessReviewSpecPatchArgs) ToSelfSubjectAccessReviewSpecPatchOutput() SelfSubjectAccessReviewSpecPatchOutput {
	return i.ToSelfSubjectAccessReviewSpecPatchOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewSpecPatchArgs) ToSelfSubjectAccessReviewSpecPatchOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecPatchOutput)
}

func (i SelfSubjectAccessReviewSpecPatchArgs) ToSelfSubjectAccessReviewSpecPatchPtrOutput() SelfSubjectAccessReviewSpecPatchPtrOutput {
	return i.ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewSpecPatchArgs) ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecPatchOutput).ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx)
}

// SelfSubjectAccessReviewSpecPatchPtrInput is an input type that accepts SelfSubjectAccessReviewSpecPatchArgs, SelfSubjectAccessReviewSpecPatchPtr and SelfSubjectAccessReviewSpecPatchPtrOutput values.
// You can construct a concrete instance of `SelfSubjectAccessReviewSpecPatchPtrInput` via:
//
//	        SelfSubjectAccessReviewSpecPatchArgs{...}
//
//	or:
//
//	        nil
type SelfSubjectAccessReviewSpecPatchPtrInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewSpecPatchPtrOutput() SelfSubjectAccessReviewSpecPatchPtrOutput
	ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Context) SelfSubjectAccessReviewSpecPatchPtrOutput
}

type selfSubjectAccessReviewSpecPatchPtrType SelfSubjectAccessReviewSpecPatchArgs

func SelfSubjectAccessReviewSpecPatchPtr(v *SelfSubjectAccessReviewSpecPatchArgs) SelfSubjectAccessReviewSpecPatchPtrInput {
	return (*selfSubjectAccessReviewSpecPatchPtrType)(v)
}

func (*selfSubjectAccessReviewSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (i *selfSubjectAccessReviewSpecPatchPtrType) ToSelfSubjectAccessReviewSpecPatchPtrOutput() SelfSubjectAccessReviewSpecPatchPtrOutput {
	return i.ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i *selfSubjectAccessReviewSpecPatchPtrType) ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecPatchPtrOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (o SelfSubjectAccessReviewSpecPatchOutput) ToSelfSubjectAccessReviewSpecPatchOutput() SelfSubjectAccessReviewSpecPatchOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPatchOutput) ToSelfSubjectAccessReviewSpecPatchOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPatchOutput) ToSelfSubjectAccessReviewSpecPatchPtrOutput() SelfSubjectAccessReviewSpecPatchPtrOutput {
	return o.ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (o SelfSubjectAccessReviewSpecPatchOutput) ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfSubjectAccessReviewSpecPatch) *SelfSubjectAccessReviewSpecPatch {
		return &v
	}).(SelfSubjectAccessReviewSpecPatchPtrOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SelfSubjectAccessReviewSpecPatchOutput) NonResourceAttributes() NonResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpecPatch) *NonResourceAttributesPatch { return v.NonResourceAttributes }).(NonResourceAttributesPatchPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SelfSubjectAccessReviewSpecPatchOutput) ResourceAttributes() ResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpecPatch) *ResourceAttributesPatch { return v.ResourceAttributes }).(ResourceAttributesPatchPtrOutput)
}

type SelfSubjectAccessReviewSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (o SelfSubjectAccessReviewSpecPatchPtrOutput) ToSelfSubjectAccessReviewSpecPatchPtrOutput() SelfSubjectAccessReviewSpecPatchPtrOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPatchPtrOutput) ToSelfSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPatchPtrOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPatchPtrOutput) Elem() SelfSubjectAccessReviewSpecPatchOutput {
	return o.ApplyT(func(v *SelfSubjectAccessReviewSpecPatch) SelfSubjectAccessReviewSpecPatch {
		if v != nil {
			return *v
		}
		var ret SelfSubjectAccessReviewSpecPatch
		return ret
	}).(SelfSubjectAccessReviewSpecPatchOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SelfSubjectAccessReviewSpecPatchPtrOutput) NonResourceAttributes() NonResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v *SelfSubjectAccessReviewSpecPatch) *NonResourceAttributesPatch {
		if v == nil {
			return nil
		}
		return v.NonResourceAttributes
	}).(NonResourceAttributesPatchPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SelfSubjectAccessReviewSpecPatchPtrOutput) ResourceAttributes() ResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v *SelfSubjectAccessReviewSpecPatch) *ResourceAttributesPatch {
		if v == nil {
			return nil
		}
		return v.ResourceAttributes
	}).(ResourceAttributesPatchPtrOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec SelfSubjectRulesReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status *SubjectRulesReviewStatus `pulumi:"status"`
}

// SelfSubjectRulesReviewInput is an input type that accepts SelfSubjectRulesReviewArgs and SelfSubjectRulesReviewOutput values.
// You can construct a concrete instance of `SelfSubjectRulesReviewInput` via:
//
//	SelfSubjectRulesReviewArgs{...}
type SelfSubjectRulesReviewInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewOutput() SelfSubjectRulesReviewOutput
	ToSelfSubjectRulesReviewOutputWithContext(context.Context) SelfSubjectRulesReviewOutput
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec SelfSubjectRulesReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status SubjectRulesReviewStatusPtrInput `pulumi:"status"`
}

func (SelfSubjectRulesReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReview)(nil)).Elem()
}

func (i SelfSubjectRulesReviewArgs) ToSelfSubjectRulesReviewOutput() SelfSubjectRulesReviewOutput {
	return i.ToSelfSubjectRulesReviewOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewArgs) ToSelfSubjectRulesReviewOutputWithContext(ctx context.Context) SelfSubjectRulesReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReview)(nil)).Elem()
}

func (o SelfSubjectRulesReviewOutput) ToSelfSubjectRulesReviewOutput() SelfSubjectRulesReviewOutput {
	return o
}

func (o SelfSubjectRulesReviewOutput) ToSelfSubjectRulesReviewOutputWithContext(ctx context.Context) SelfSubjectRulesReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectRulesReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectRulesReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectRulesReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.
func (o SelfSubjectRulesReviewOutput) Spec() SelfSubjectRulesReviewSpecOutput {
	return o.ApplyT(func(v SelfSubjectRulesReview) SelfSubjectRulesReviewSpec { return v.Spec }).(SelfSubjectRulesReviewSpecOutput)
}

// Status is filled in by the server and indicates the set of actions a user can perform.
func (o SelfSubjectRulesReviewOutput) Status() SubjectRulesReviewStatusPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReview) *SubjectRulesReviewStatus { return v.Status }).(SubjectRulesReviewStatusPtrOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec *SelfSubjectRulesReviewSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status *SubjectRulesReviewStatusPatch `pulumi:"status"`
}

// SelfSubjectRulesReviewPatchInput is an input type that accepts SelfSubjectRulesReviewPatchArgs and SelfSubjectRulesReviewPatchOutput values.
// You can construct a concrete instance of `SelfSubjectRulesReviewPatchInput` via:
//
//	SelfSubjectRulesReviewPatchArgs{...}
type SelfSubjectRulesReviewPatchInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewPatchOutput() SelfSubjectRulesReviewPatchOutput
	ToSelfSubjectRulesReviewPatchOutputWithContext(context.Context) SelfSubjectRulesReviewPatchOutput
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec SelfSubjectRulesReviewSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status SubjectRulesReviewStatusPatchPtrInput `pulumi:"status"`
}

func (SelfSubjectRulesReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewPatch)(nil)).Elem()
}

func (i SelfSubjectRulesReviewPatchArgs) ToSelfSubjectRulesReviewPatchOutput() SelfSubjectRulesReviewPatchOutput {
	return i.ToSelfSubjectRulesReviewPatchOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewPatchArgs) ToSelfSubjectRulesReviewPatchOutputWithContext(ctx context.Context) SelfSubjectRulesReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewPatchOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewPatch)(nil)).Elem()
}

func (o SelfSubjectRulesReviewPatchOutput) ToSelfSubjectRulesReviewPatchOutput() SelfSubjectRulesReviewPatchOutput {
	return o
}

func (o SelfSubjectRulesReviewPatchOutput) ToSelfSubjectRulesReviewPatchOutputWithContext(ctx context.Context) SelfSubjectRulesReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectRulesReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectRulesReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectRulesReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated.
func (o SelfSubjectRulesReviewPatchOutput) Spec() SelfSubjectRulesReviewSpecPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewPatch) *SelfSubjectRulesReviewSpecPatch { return v.Spec }).(SelfSubjectRulesReviewSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates the set of actions a user can perform.
func (o SelfSubjectRulesReviewPatchOutput) Status() SubjectRulesReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewPatch) *SubjectRulesReviewStatusPatch { return v.Status }).(SubjectRulesReviewStatusPatchPtrOutput)
}

type SelfSubjectRulesReviewSpec struct {
	// Namespace to evaluate rules for. Required.
	Namespace *string `pulumi:"namespace"`
}

// SelfSubjectRulesReviewSpecInput is an input type that accepts SelfSubjectRulesReviewSpecArgs and SelfSubjectRulesReviewSpecOutput values.
// You can construct a concrete instance of `SelfSubjectRulesReviewSpecInput` via:
//
//	SelfSubjectRulesReviewSpecArgs{...}
type SelfSubjectRulesReviewSpecInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput
	ToSelfSubjectRulesReviewSpecOutputWithContext(context.Context) SelfSubjectRulesReviewSpecOutput
}

type SelfSubjectRulesReviewSpecArgs struct {
	// Namespace to evaluate rules for. Required.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SelfSubjectRulesReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput {
	return i.ToSelfSubjectRulesReviewSpecOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecOutput)
}

type SelfSubjectRulesReviewSpecOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecOutput {
	return o
}

// Namespace to evaluate rules for. Required.
func (o SelfSubjectRulesReviewSpecOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewSpec) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SelfSubjectRulesReviewSpecPatch struct {
	// Namespace to evaluate rules for. Required.
	Namespace *string `pulumi:"namespace"`
}

// SelfSubjectRulesReviewSpecPatchInput is an input type that accepts SelfSubjectRulesReviewSpecPatchArgs and SelfSubjectRulesReviewSpecPatchOutput values.
// You can construct a concrete instance of `SelfSubjectRulesReviewSpecPatchInput` via:
//
//	SelfSubjectRulesReviewSpecPatchArgs{...}
type SelfSubjectRulesReviewSpecPatchInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewSpecPatchOutput() SelfSubjectRulesReviewSpecPatchOutput
	ToSelfSubjectRulesReviewSpecPatchOutputWithContext(context.Context) SelfSubjectRulesReviewSpecPatchOutput
}

type SelfSubjectRulesReviewSpecPatchArgs struct {
	// Namespace to evaluate rules for. Required.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SelfSubjectRulesReviewSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpecPatch)(nil)).Elem()
}

func (i SelfSubjectRulesReviewSpecPatchArgs) ToSelfSubjectRulesReviewSpecPatchOutput() SelfSubjectRulesReviewSpecPatchOutput {
	return i.ToSelfSubjectRulesReviewSpecPatchOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewSpecPatchArgs) ToSelfSubjectRulesReviewSpecPatchOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecPatchOutput)
}

func (i SelfSubjectRulesReviewSpecPatchArgs) ToSelfSubjectRulesReviewSpecPatchPtrOutput() SelfSubjectRulesReviewSpecPatchPtrOutput {
	return i.ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewSpecPatchArgs) ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecPatchOutput).ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(ctx)
}

// SelfSubjectRulesReviewSpecPatchPtrInput is an input type that accepts SelfSubjectRulesReviewSpecPatchArgs, SelfSubjectRulesReviewSpecPatchPtr and SelfSubjectRulesReviewSpecPatchPtrOutput values.
// You can construct a concrete instance of `SelfSubjectRulesReviewSpecPatchPtrInput` via:
//
//	        SelfSubjectRulesReviewSpecPatchArgs{...}
//
//	or:
//
//	        nil
type SelfSubjectRulesReviewSpecPatchPtrInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewSpecPatchPtrOutput() SelfSubjectRulesReviewSpecPatchPtrOutput
	ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(context.Context) SelfSubjectRulesReviewSpecPatchPtrOutput
}

type selfSubjectRulesReviewSpecPatchPtrType SelfSubjectRulesReviewSpecPatchArgs

func SelfSubjectRulesReviewSpecPatchPtr(v *SelfSubjectRulesReviewSpecPatchArgs) SelfSubjectRulesReviewSpecPatchPtrInput {
	return (*selfSubjectRulesReviewSpecPatchPtrType)(v)
}

func (*selfSubjectRulesReviewSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectRulesReviewSpecPatch)(nil)).Elem()
}

func (i *selfSubjectRulesReviewSpecPatchPtrType) ToSelfSubjectRulesReviewSpecPatchPtrOutput() SelfSubjectRulesReviewSpecPatchPtrOutput {
	return i.ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i *selfSubjectRulesReviewSpecPatchPtrType) ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecPatchPtrOutput)
}

type SelfSubjectRulesReviewSpecPatchOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpecPatch)(nil)).Elem()
}

func (o SelfSubjectRulesReviewSpecPatchOutput) ToSelfSubjectRulesReviewSpecPatchOutput() SelfSubjectRulesReviewSpecPatchOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPatchOutput) ToSelfSubjectRulesReviewSpecPatchOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPatchOutput) ToSelfSubjectRulesReviewSpecPatchPtrOutput() SelfSubjectRulesReviewSpecPatchPtrOutput {
	return o.ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (o SelfSubjectRulesReviewSpecPatchOutput) ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfSubjectRulesReviewSpecPatch) *SelfSubjectRulesReviewSpecPatch {
		return &v
	}).(SelfSubjectRulesReviewSpecPatchPtrOutput)
}

// Namespace to evaluate rules for. Required.
func (o SelfSubjectRulesReviewSpecPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewSpecPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SelfSubjectRulesReviewSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectRulesReviewSpecPatch)(nil)).Elem()
}

func (o SelfSubjectRulesReviewSpecPatchPtrOutput) ToSelfSubjectRulesReviewSpecPatchPtrOutput() SelfSubjectRulesReviewSpecPatchPtrOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPatchPtrOutput) ToSelfSubjectRulesReviewSpecPatchPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPatchPtrOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPatchPtrOutput) Elem() SelfSubjectRulesReviewSpecPatchOutput {
	return o.ApplyT(func(v *SelfSubjectRulesReviewSpecPatch) SelfSubjectRulesReviewSpecPatch {
		if v != nil {
			return *v
		}
		var ret SelfSubjectRulesReviewSpecPatch
		return ret
	}).(SelfSubjectRulesReviewSpecPatchOutput)
}

// Namespace to evaluate rules for. Required.
func (o SelfSubjectRulesReviewSpecPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfSubjectRulesReviewSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec SubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

// SubjectAccessReviewInput is an input type that accepts SubjectAccessReviewArgs and SubjectAccessReviewOutput values.
// You can construct a concrete instance of `SubjectAccessReviewInput` via:
//
//	SubjectAccessReviewArgs{...}
type SubjectAccessReviewInput interface {
	pulumi.Input

	ToSubjectAccessReviewOutput() SubjectAccessReviewOutput
	ToSubjectAccessReviewOutputWithContext(context.Context) SubjectAccessReviewOutput
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec SubjectAccessReviewSpecInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (SubjectAccessReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReview)(nil)).Elem()
}

func (i SubjectAccessReviewArgs) ToSubjectAccessReviewOutput() SubjectAccessReviewOutput {
	return i.ToSubjectAccessReviewOutputWithContext(context.Background())
}

func (i SubjectAccessReviewArgs) ToSubjectAccessReviewOutputWithContext(ctx context.Context) SubjectAccessReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReview)(nil)).Elem()
}

func (o SubjectAccessReviewOutput) ToSubjectAccessReviewOutput() SubjectAccessReviewOutput {
	return o
}

func (o SubjectAccessReviewOutput) ToSubjectAccessReviewOutputWithContext(ctx context.Context) SubjectAccessReviewOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SubjectAccessReviewOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReview) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubjectAccessReviewOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReview) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SubjectAccessReviewOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SubjectAccessReview) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated
func (o SubjectAccessReviewOutput) Spec() SubjectAccessReviewSpecOutput {
	return o.ApplyT(func(v SubjectAccessReview) SubjectAccessReviewSpec { return v.Spec }).(SubjectAccessReviewSpecOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SubjectAccessReviewOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v SubjectAccessReview) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec *SubjectAccessReviewSpecPatch `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatusPatch `pulumi:"status"`
}

// SubjectAccessReviewPatchInput is an input type that accepts SubjectAccessReviewPatchArgs and SubjectAccessReviewPatchOutput values.
// You can construct a concrete instance of `SubjectAccessReviewPatchInput` via:
//
//	SubjectAccessReviewPatchArgs{...}
type SubjectAccessReviewPatchInput interface {
	pulumi.Input

	ToSubjectAccessReviewPatchOutput() SubjectAccessReviewPatchOutput
	ToSubjectAccessReviewPatchOutputWithContext(context.Context) SubjectAccessReviewPatchOutput
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec SubjectAccessReviewSpecPatchPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPatchPtrInput `pulumi:"status"`
}

func (SubjectAccessReviewPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewPatch)(nil)).Elem()
}

func (i SubjectAccessReviewPatchArgs) ToSubjectAccessReviewPatchOutput() SubjectAccessReviewPatchOutput {
	return i.ToSubjectAccessReviewPatchOutputWithContext(context.Background())
}

func (i SubjectAccessReviewPatchArgs) ToSubjectAccessReviewPatchOutputWithContext(ctx context.Context) SubjectAccessReviewPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewPatchOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewPatchOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewPatch)(nil)).Elem()
}

func (o SubjectAccessReviewPatchOutput) ToSubjectAccessReviewPatchOutput() SubjectAccessReviewPatchOutput {
	return o
}

func (o SubjectAccessReviewPatchOutput) ToSubjectAccessReviewPatchOutputWithContext(ctx context.Context) SubjectAccessReviewPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SubjectAccessReviewPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubjectAccessReviewPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SubjectAccessReviewPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec holds information about the request being evaluated
func (o SubjectAccessReviewPatchOutput) Spec() SubjectAccessReviewSpecPatchPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewPatch) *SubjectAccessReviewSpecPatch { return v.Spec }).(SubjectAccessReviewSpecPatchPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SubjectAccessReviewPatchOutput) Status() SubjectAccessReviewStatusPatchPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewPatch) *SubjectAccessReviewStatusPatch { return v.Status }).(SubjectAccessReviewStatusPatchPtrOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpec struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra map[string][]string `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group []string `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributes `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributes `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid *string `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User *string `pulumi:"user"`
}

// SubjectAccessReviewSpecInput is an input type that accepts SubjectAccessReviewSpecArgs and SubjectAccessReviewSpecOutput values.
// You can construct a concrete instance of `SubjectAccessReviewSpecInput` via:
//
//	SubjectAccessReviewSpecArgs{...}
type SubjectAccessReviewSpecInput interface {
	pulumi.Input

	ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput
	ToSubjectAccessReviewSpecOutputWithContext(context.Context) SubjectAccessReviewSpecOutput
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecArgs struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group pulumi.StringArrayInput `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPtrInput `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (SubjectAccessReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpec)(nil)).Elem()
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput {
	return i.ToSubjectAccessReviewSpecOutputWithContext(context.Background())
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SubjectAccessReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpec)(nil)).Elem()
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput {
	return o
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SubjectAccessReviewSpecOutput {
	return o
}

// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
func (o SubjectAccessReviewSpecOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Groups is the groups you're testing for.
func (o SubjectAccessReviewSpecOutput) Group() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) []string { return v.Group }).(pulumi.StringArrayOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SubjectAccessReviewSpecOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SubjectAccessReviewSpecOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

// UID information about the requesting user.
func (o SubjectAccessReviewSpecOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
func (o SubjectAccessReviewSpecOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.User }).(pulumi.StringPtrOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecPatch struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra map[string][]string `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group []string `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributesPatch `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributesPatch `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid *string `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User *string `pulumi:"user"`
}

// SubjectAccessReviewSpecPatchInput is an input type that accepts SubjectAccessReviewSpecPatchArgs and SubjectAccessReviewSpecPatchOutput values.
// You can construct a concrete instance of `SubjectAccessReviewSpecPatchInput` via:
//
//	SubjectAccessReviewSpecPatchArgs{...}
type SubjectAccessReviewSpecPatchInput interface {
	pulumi.Input

	ToSubjectAccessReviewSpecPatchOutput() SubjectAccessReviewSpecPatchOutput
	ToSubjectAccessReviewSpecPatchOutputWithContext(context.Context) SubjectAccessReviewSpecPatchOutput
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecPatchArgs struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group pulumi.StringArrayInput `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPatchPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPatchPtrInput `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (SubjectAccessReviewSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (i SubjectAccessReviewSpecPatchArgs) ToSubjectAccessReviewSpecPatchOutput() SubjectAccessReviewSpecPatchOutput {
	return i.ToSubjectAccessReviewSpecPatchOutputWithContext(context.Background())
}

func (i SubjectAccessReviewSpecPatchArgs) ToSubjectAccessReviewSpecPatchOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecPatchOutput)
}

func (i SubjectAccessReviewSpecPatchArgs) ToSubjectAccessReviewSpecPatchPtrOutput() SubjectAccessReviewSpecPatchPtrOutput {
	return i.ToSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i SubjectAccessReviewSpecPatchArgs) ToSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecPatchOutput).ToSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx)
}

// SubjectAccessReviewSpecPatchPtrInput is an input type that accepts SubjectAccessReviewSpecPatchArgs, SubjectAccessReviewSpecPatchPtr and SubjectAccessReviewSpecPatchPtrOutput values.
// You can construct a concrete instance of `SubjectAccessReviewSpecPatchPtrInput` via:
//
//	        SubjectAccessReviewSpecPatchArgs{...}
//
//	or:
//
//	        nil
type SubjectAccessReviewSpecPatchPtrInput interface {
	pulumi.Input

	ToSubjectAccessReviewSpecPatchPtrOutput() SubjectAccessReviewSpecPatchPtrOutput
	ToSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Context) SubjectAccessReviewSpecPatchPtrOutput
}

type subjectAccessReviewSpecPatchPtrType SubjectAccessReviewSpecPatchArgs

func SubjectAccessReviewSpecPatchPtr(v *SubjectAccessReviewSpecPatchArgs) SubjectAccessReviewSpecPatchPtrInput {
	return (*subjectAccessReviewSpecPatchPtrType)(v)
}

func (*subjectAccessReviewSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (i *subjectAccessReviewSpecPatchPtrType) ToSubjectAccessReviewSpecPatchPtrOutput() SubjectAccessReviewSpecPatchPtrOutput {
	return i.ToSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (i *subjectAccessReviewSpecPatchPtrType) ToSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecPatchPtrOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecPatchOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (o SubjectAccessReviewSpecPatchOutput) ToSubjectAccessReviewSpecPatchOutput() SubjectAccessReviewSpecPatchOutput {
	return o
}

func (o SubjectAccessReviewSpecPatchOutput) ToSubjectAccessReviewSpecPatchOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchOutput {
	return o
}

func (o SubjectAccessReviewSpecPatchOutput) ToSubjectAccessReviewSpecPatchPtrOutput() SubjectAccessReviewSpecPatchPtrOutput {
	return o.ToSubjectAccessReviewSpecPatchPtrOutputWithContext(context.Background())
}

func (o SubjectAccessReviewSpecPatchOutput) ToSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectAccessReviewSpecPatch) *SubjectAccessReviewSpecPatch {
		return &v
	}).(SubjectAccessReviewSpecPatchPtrOutput)
}

// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
func (o SubjectAccessReviewSpecPatchOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Groups is the groups you're testing for.
func (o SubjectAccessReviewSpecPatchOutput) Group() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) []string { return v.Group }).(pulumi.StringArrayOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SubjectAccessReviewSpecPatchOutput) NonResourceAttributes() NonResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) *NonResourceAttributesPatch { return v.NonResourceAttributes }).(NonResourceAttributesPatchPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SubjectAccessReviewSpecPatchOutput) ResourceAttributes() ResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) *ResourceAttributesPatch { return v.ResourceAttributes }).(ResourceAttributesPatchPtrOutput)
}

// UID information about the requesting user.
func (o SubjectAccessReviewSpecPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
func (o SubjectAccessReviewSpecPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpecPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type SubjectAccessReviewSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewSpecPatch)(nil)).Elem()
}

func (o SubjectAccessReviewSpecPatchPtrOutput) ToSubjectAccessReviewSpecPatchPtrOutput() SubjectAccessReviewSpecPatchPtrOutput {
	return o
}

func (o SubjectAccessReviewSpecPatchPtrOutput) ToSubjectAccessReviewSpecPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPatchPtrOutput {
	return o
}

func (o SubjectAccessReviewSpecPatchPtrOutput) Elem() SubjectAccessReviewSpecPatchOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) SubjectAccessReviewSpecPatch {
		if v != nil {
			return *v
		}
		var ret SubjectAccessReviewSpecPatch
		return ret
	}).(SubjectAccessReviewSpecPatchOutput)
}

// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
func (o SubjectAccessReviewSpecPatchPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// Groups is the groups you're testing for.
func (o SubjectAccessReviewSpecPatchPtrOutput) Group() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringArrayOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SubjectAccessReviewSpecPatchPtrOutput) NonResourceAttributes() NonResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) *NonResourceAttributesPatch {
		if v == nil {
			return nil
		}
		return v.NonResourceAttributes
	}).(NonResourceAttributesPatchPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SubjectAccessReviewSpecPatchPtrOutput) ResourceAttributes() ResourceAttributesPatchPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) *ResourceAttributesPatch {
		if v == nil {
			return nil
		}
		return v.ResourceAttributes
	}).(ResourceAttributesPatchPtrOutput)
}

// UID information about the requesting user.
func (o SubjectAccessReviewSpecPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
func (o SubjectAccessReviewSpecPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatus struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed bool `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied *bool `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError *string `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `pulumi:"reason"`
}

// SubjectAccessReviewStatusInput is an input type that accepts SubjectAccessReviewStatusArgs and SubjectAccessReviewStatusOutput values.
// You can construct a concrete instance of `SubjectAccessReviewStatusInput` via:
//
//	SubjectAccessReviewStatusArgs{...}
type SubjectAccessReviewStatusInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput
	ToSubjectAccessReviewStatusOutputWithContext(context.Context) SubjectAccessReviewStatusOutput
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusArgs struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed pulumi.BoolInput `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied pulumi.BoolPtrInput `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (SubjectAccessReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatus)(nil)).Elem()
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput {
	return i.ToSubjectAccessReviewStatusOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusOutput)
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return i.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusOutput).ToSubjectAccessReviewStatusPtrOutputWithContext(ctx)
}

// SubjectAccessReviewStatusPtrInput is an input type that accepts SubjectAccessReviewStatusArgs, SubjectAccessReviewStatusPtr and SubjectAccessReviewStatusPtrOutput values.
// You can construct a concrete instance of `SubjectAccessReviewStatusPtrInput` via:
//
//	        SubjectAccessReviewStatusArgs{...}
//
//	or:
//
//	        nil
type SubjectAccessReviewStatusPtrInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput
	ToSubjectAccessReviewStatusPtrOutputWithContext(context.Context) SubjectAccessReviewStatusPtrOutput
}

type subjectAccessReviewStatusPtrType SubjectAccessReviewStatusArgs

func SubjectAccessReviewStatusPtr(v *SubjectAccessReviewStatusArgs) SubjectAccessReviewStatusPtrInput {
	return (*subjectAccessReviewStatusPtrType)(v)
}

func (*subjectAccessReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatus)(nil)).Elem()
}

func (i *subjectAccessReviewStatusPtrType) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return i.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (i *subjectAccessReviewStatusPtrType) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatus)(nil)).Elem()
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput {
	return o
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput {
	return o
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return o.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectAccessReviewStatus) *SubjectAccessReviewStatus {
		return &v
	}).(SubjectAccessReviewStatusPtrOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusOutput) Allowed() pulumi.BoolOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) bool { return v.Allowed }).(pulumi.BoolOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *bool { return v.Denied }).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type SubjectAccessReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatus)(nil)).Elem()
}

func (o SubjectAccessReviewStatusPtrOutput) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPtrOutput) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPtrOutput) Elem() SubjectAccessReviewStatusOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) SubjectAccessReviewStatus {
		if v != nil {
			return *v
		}
		var ret SubjectAccessReviewStatus
		return ret
	}).(SubjectAccessReviewStatusOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusPtrOutput) Allowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Allowed
	}).(pulumi.BoolPtrOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusPtrOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Denied
	}).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationError
	}).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusPatch struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed *bool `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied *bool `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError *string `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `pulumi:"reason"`
}

// SubjectAccessReviewStatusPatchInput is an input type that accepts SubjectAccessReviewStatusPatchArgs and SubjectAccessReviewStatusPatchOutput values.
// You can construct a concrete instance of `SubjectAccessReviewStatusPatchInput` via:
//
//	SubjectAccessReviewStatusPatchArgs{...}
type SubjectAccessReviewStatusPatchInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusPatchOutput() SubjectAccessReviewStatusPatchOutput
	ToSubjectAccessReviewStatusPatchOutputWithContext(context.Context) SubjectAccessReviewStatusPatchOutput
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusPatchArgs struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed pulumi.BoolPtrInput `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied pulumi.BoolPtrInput `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (SubjectAccessReviewStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatusPatch)(nil)).Elem()
}

func (i SubjectAccessReviewStatusPatchArgs) ToSubjectAccessReviewStatusPatchOutput() SubjectAccessReviewStatusPatchOutput {
	return i.ToSubjectAccessReviewStatusPatchOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusPatchArgs) ToSubjectAccessReviewStatusPatchOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusPatchOutput)
}

func (i SubjectAccessReviewStatusPatchArgs) ToSubjectAccessReviewStatusPatchPtrOutput() SubjectAccessReviewStatusPatchPtrOutput {
	return i.ToSubjectAccessReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusPatchArgs) ToSubjectAccessReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusPatchOutput).ToSubjectAccessReviewStatusPatchPtrOutputWithContext(ctx)
}

// SubjectAccessReviewStatusPatchPtrInput is an input type that accepts SubjectAccessReviewStatusPatchArgs, SubjectAccessReviewStatusPatchPtr and SubjectAccessReviewStatusPatchPtrOutput values.
// You can construct a concrete instance of `SubjectAccessReviewStatusPatchPtrInput` via:
//
//	        SubjectAccessReviewStatusPatchArgs{...}
//
//	or:
//
//	        nil
type SubjectAccessReviewStatusPatchPtrInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusPatchPtrOutput() SubjectAccessReviewStatusPatchPtrOutput
	ToSubjectAccessReviewStatusPatchPtrOutputWithContext(context.Context) SubjectAccessReviewStatusPatchPtrOutput
}

type subjectAccessReviewStatusPatchPtrType SubjectAccessReviewStatusPatchArgs

func SubjectAccessReviewStatusPatchPtr(v *SubjectAccessReviewStatusPatchArgs) SubjectAccessReviewStatusPatchPtrInput {
	return (*subjectAccessReviewStatusPatchPtrType)(v)
}

func (*subjectAccessReviewStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatusPatch)(nil)).Elem()
}

func (i *subjectAccessReviewStatusPatchPtrType) ToSubjectAccessReviewStatusPatchPtrOutput() SubjectAccessReviewStatusPatchPtrOutput {
	return i.ToSubjectAccessReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i *subjectAccessReviewStatusPatchPtrType) ToSubjectAccessReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusPatchPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusPatchOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatusPatch)(nil)).Elem()
}

func (o SubjectAccessReviewStatusPatchOutput) ToSubjectAccessReviewStatusPatchOutput() SubjectAccessReviewStatusPatchOutput {
	return o
}

func (o SubjectAccessReviewStatusPatchOutput) ToSubjectAccessReviewStatusPatchOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchOutput {
	return o
}

func (o SubjectAccessReviewStatusPatchOutput) ToSubjectAccessReviewStatusPatchPtrOutput() SubjectAccessReviewStatusPatchPtrOutput {
	return o.ToSubjectAccessReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (o SubjectAccessReviewStatusPatchOutput) ToSubjectAccessReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectAccessReviewStatusPatch) *SubjectAccessReviewStatusPatch {
		return &v
	}).(SubjectAccessReviewStatusPatchPtrOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusPatchOutput) Allowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatusPatch) *bool { return v.Allowed }).(pulumi.BoolPtrOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusPatchOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatusPatch) *bool { return v.Denied }).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusPatchOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatusPatch) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatusPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type SubjectAccessReviewStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatusPatch)(nil)).Elem()
}

func (o SubjectAccessReviewStatusPatchPtrOutput) ToSubjectAccessReviewStatusPatchPtrOutput() SubjectAccessReviewStatusPatchPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPatchPtrOutput) ToSubjectAccessReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPatchPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPatchPtrOutput) Elem() SubjectAccessReviewStatusPatchOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatusPatch) SubjectAccessReviewStatusPatch {
		if v != nil {
			return *v
		}
		var ret SubjectAccessReviewStatusPatch
		return ret
	}).(SubjectAccessReviewStatusPatchOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusPatchPtrOutput) Allowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Allowed
	}).(pulumi.BoolPtrOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusPatchPtrOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Denied
	}).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusPatchPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationError
	}).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusPatchPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatus struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete bool `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []NonResourceRule `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []ResourceRule `pulumi:"resourceRules"`
}

// SubjectRulesReviewStatusInput is an input type that accepts SubjectRulesReviewStatusArgs and SubjectRulesReviewStatusOutput values.
// You can construct a concrete instance of `SubjectRulesReviewStatusInput` via:
//
//	SubjectRulesReviewStatusArgs{...}
type SubjectRulesReviewStatusInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput
	ToSubjectRulesReviewStatusOutputWithContext(context.Context) SubjectRulesReviewStatusOutput
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusArgs struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete pulumi.BoolInput `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules NonResourceRuleArrayInput `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules ResourceRuleArrayInput `pulumi:"resourceRules"`
}

func (SubjectRulesReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatus)(nil)).Elem()
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput {
	return i.ToSubjectRulesReviewStatusOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusOutputWithContext(ctx context.Context) SubjectRulesReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusOutput)
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return i.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusOutput).ToSubjectRulesReviewStatusPtrOutputWithContext(ctx)
}

// SubjectRulesReviewStatusPtrInput is an input type that accepts SubjectRulesReviewStatusArgs, SubjectRulesReviewStatusPtr and SubjectRulesReviewStatusPtrOutput values.
// You can construct a concrete instance of `SubjectRulesReviewStatusPtrInput` via:
//
//	        SubjectRulesReviewStatusArgs{...}
//
//	or:
//
//	        nil
type SubjectRulesReviewStatusPtrInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput
	ToSubjectRulesReviewStatusPtrOutputWithContext(context.Context) SubjectRulesReviewStatusPtrOutput
}

type subjectRulesReviewStatusPtrType SubjectRulesReviewStatusArgs

func SubjectRulesReviewStatusPtr(v *SubjectRulesReviewStatusArgs) SubjectRulesReviewStatusPtrInput {
	return (*subjectRulesReviewStatusPtrType)(v)
}

func (*subjectRulesReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatus)(nil)).Elem()
}

func (i *subjectRulesReviewStatusPtrType) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return i.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (i *subjectRulesReviewStatusPtrType) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusPtrOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatus)(nil)).Elem()
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput {
	return o
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusOutputWithContext(ctx context.Context) SubjectRulesReviewStatusOutput {
	return o
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return o.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectRulesReviewStatus) *SubjectRulesReviewStatus {
		return &v
	}).(SubjectRulesReviewStatusPtrOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusOutput) Incomplete() pulumi.BoolOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) bool { return v.Incomplete }).(pulumi.BoolOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusOutput) NonResourceRules() NonResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []NonResourceRule { return v.NonResourceRules }).(NonResourceRuleArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusOutput) ResourceRules() ResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []ResourceRule { return v.ResourceRules }).(ResourceRuleArrayOutput)
}

type SubjectRulesReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatus)(nil)).Elem()
}

func (o SubjectRulesReviewStatusPtrOutput) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPtrOutput) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPtrOutput) Elem() SubjectRulesReviewStatusOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) SubjectRulesReviewStatus {
		if v != nil {
			return *v
		}
		var ret SubjectRulesReviewStatus
		return ret
	}).(SubjectRulesReviewStatusOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationError
	}).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusPtrOutput) Incomplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Incomplete
	}).(pulumi.BoolPtrOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) NonResourceRules() NonResourceRuleArrayOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) []NonResourceRule {
		if v == nil {
			return nil
		}
		return v.NonResourceRules
	}).(NonResourceRuleArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) ResourceRules() ResourceRuleArrayOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) []ResourceRule {
		if v == nil {
			return nil
		}
		return v.ResourceRules
	}).(ResourceRuleArrayOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusPatch struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete *bool `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []NonResourceRulePatch `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []ResourceRulePatch `pulumi:"resourceRules"`
}

// SubjectRulesReviewStatusPatchInput is an input type that accepts SubjectRulesReviewStatusPatchArgs and SubjectRulesReviewStatusPatchOutput values.
// You can construct a concrete instance of `SubjectRulesReviewStatusPatchInput` via:
//
//	SubjectRulesReviewStatusPatchArgs{...}
type SubjectRulesReviewStatusPatchInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusPatchOutput() SubjectRulesReviewStatusPatchOutput
	ToSubjectRulesReviewStatusPatchOutputWithContext(context.Context) SubjectRulesReviewStatusPatchOutput
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusPatchArgs struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete pulumi.BoolPtrInput `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules NonResourceRulePatchArrayInput `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules ResourceRulePatchArrayInput `pulumi:"resourceRules"`
}

func (SubjectRulesReviewStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatusPatch)(nil)).Elem()
}

func (i SubjectRulesReviewStatusPatchArgs) ToSubjectRulesReviewStatusPatchOutput() SubjectRulesReviewStatusPatchOutput {
	return i.ToSubjectRulesReviewStatusPatchOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusPatchArgs) ToSubjectRulesReviewStatusPatchOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusPatchOutput)
}

func (i SubjectRulesReviewStatusPatchArgs) ToSubjectRulesReviewStatusPatchPtrOutput() SubjectRulesReviewStatusPatchPtrOutput {
	return i.ToSubjectRulesReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusPatchArgs) ToSubjectRulesReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusPatchOutput).ToSubjectRulesReviewStatusPatchPtrOutputWithContext(ctx)
}

// SubjectRulesReviewStatusPatchPtrInput is an input type that accepts SubjectRulesReviewStatusPatchArgs, SubjectRulesReviewStatusPatchPtr and SubjectRulesReviewStatusPatchPtrOutput values.
// You can construct a concrete instance of `SubjectRulesReviewStatusPatchPtrInput` via:
//
//	        SubjectRulesReviewStatusPatchArgs{...}
//
//	or:
//
//	        nil
type SubjectRulesReviewStatusPatchPtrInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusPatchPtrOutput() SubjectRulesReviewStatusPatchPtrOutput
	ToSubjectRulesReviewStatusPatchPtrOutputWithContext(context.Context) SubjectRulesReviewStatusPatchPtrOutput
}

type subjectRulesReviewStatusPatchPtrType SubjectRulesReviewStatusPatchArgs

func SubjectRulesReviewStatusPatchPtr(v *SubjectRulesReviewStatusPatchArgs) SubjectRulesReviewStatusPatchPtrInput {
	return (*subjectRulesReviewStatusPatchPtrType)(v)
}

func (*subjectRulesReviewStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatusPatch)(nil)).Elem()
}

func (i *subjectRulesReviewStatusPatchPtrType) ToSubjectRulesReviewStatusPatchPtrOutput() SubjectRulesReviewStatusPatchPtrOutput {
	return i.ToSubjectRulesReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (i *subjectRulesReviewStatusPatchPtrType) ToSubjectRulesReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusPatchPtrOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusPatchOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatusPatch)(nil)).Elem()
}

func (o SubjectRulesReviewStatusPatchOutput) ToSubjectRulesReviewStatusPatchOutput() SubjectRulesReviewStatusPatchOutput {
	return o
}

func (o SubjectRulesReviewStatusPatchOutput) ToSubjectRulesReviewStatusPatchOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchOutput {
	return o
}

func (o SubjectRulesReviewStatusPatchOutput) ToSubjectRulesReviewStatusPatchPtrOutput() SubjectRulesReviewStatusPatchPtrOutput {
	return o.ToSubjectRulesReviewStatusPatchPtrOutputWithContext(context.Background())
}

func (o SubjectRulesReviewStatusPatchOutput) ToSubjectRulesReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectRulesReviewStatusPatch) *SubjectRulesReviewStatusPatch {
		return &v
	}).(SubjectRulesReviewStatusPatchPtrOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusPatchOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatusPatch) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusPatchOutput) Incomplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatusPatch) *bool { return v.Incomplete }).(pulumi.BoolPtrOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPatchOutput) NonResourceRules() NonResourceRulePatchArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatusPatch) []NonResourceRulePatch { return v.NonResourceRules }).(NonResourceRulePatchArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPatchOutput) ResourceRules() ResourceRulePatchArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatusPatch) []ResourceRulePatch { return v.ResourceRules }).(ResourceRulePatchArrayOutput)
}

type SubjectRulesReviewStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatusPatch)(nil)).Elem()
}

func (o SubjectRulesReviewStatusPatchPtrOutput) ToSubjectRulesReviewStatusPatchPtrOutput() SubjectRulesReviewStatusPatchPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPatchPtrOutput) ToSubjectRulesReviewStatusPatchPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPatchPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPatchPtrOutput) Elem() SubjectRulesReviewStatusPatchOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatusPatch) SubjectRulesReviewStatusPatch {
		if v != nil {
			return *v
		}
		var ret SubjectRulesReviewStatusPatch
		return ret
	}).(SubjectRulesReviewStatusPatchOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusPatchPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationError
	}).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusPatchPtrOutput) Incomplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Incomplete
	}).(pulumi.BoolPtrOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPatchPtrOutput) NonResourceRules() NonResourceRulePatchArrayOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatusPatch) []NonResourceRulePatch {
		if v == nil {
			return nil
		}
		return v.NonResourceRules
	}).(NonResourceRulePatchArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPatchPtrOutput) ResourceRules() ResourceRulePatchArrayOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatusPatch) []ResourceRulePatch {
		if v == nil {
			return nil
		}
		return v.ResourceRules
	}).(ResourceRulePatchArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalSubjectAccessReviewInput)(nil)).Elem(), LocalSubjectAccessReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalSubjectAccessReviewPatchInput)(nil)).Elem(), LocalSubjectAccessReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceAttributesInput)(nil)).Elem(), NonResourceAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceAttributesPtrInput)(nil)).Elem(), NonResourceAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceAttributesPatchInput)(nil)).Elem(), NonResourceAttributesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceAttributesPatchPtrInput)(nil)).Elem(), NonResourceAttributesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceRuleInput)(nil)).Elem(), NonResourceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceRuleArrayInput)(nil)).Elem(), NonResourceRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceRulePatchInput)(nil)).Elem(), NonResourceRulePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonResourceRulePatchArrayInput)(nil)).Elem(), NonResourceRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesInput)(nil)).Elem(), ResourceAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesPtrInput)(nil)).Elem(), ResourceAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesPatchInput)(nil)).Elem(), ResourceAttributesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesPatchPtrInput)(nil)).Elem(), ResourceAttributesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRuleInput)(nil)).Elem(), ResourceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRuleArrayInput)(nil)).Elem(), ResourceRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRulePatchInput)(nil)).Elem(), ResourceRulePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRulePatchArrayInput)(nil)).Elem(), ResourceRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectAccessReviewInput)(nil)).Elem(), SelfSubjectAccessReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectAccessReviewPatchInput)(nil)).Elem(), SelfSubjectAccessReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectAccessReviewSpecInput)(nil)).Elem(), SelfSubjectAccessReviewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectAccessReviewSpecPatchInput)(nil)).Elem(), SelfSubjectAccessReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectAccessReviewSpecPatchPtrInput)(nil)).Elem(), SelfSubjectAccessReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectRulesReviewInput)(nil)).Elem(), SelfSubjectRulesReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectRulesReviewPatchInput)(nil)).Elem(), SelfSubjectRulesReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectRulesReviewSpecInput)(nil)).Elem(), SelfSubjectRulesReviewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectRulesReviewSpecPatchInput)(nil)).Elem(), SelfSubjectRulesReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfSubjectRulesReviewSpecPatchPtrInput)(nil)).Elem(), SelfSubjectRulesReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewInput)(nil)).Elem(), SubjectAccessReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewPatchInput)(nil)).Elem(), SubjectAccessReviewPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewSpecInput)(nil)).Elem(), SubjectAccessReviewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewSpecPatchInput)(nil)).Elem(), SubjectAccessReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewSpecPatchPtrInput)(nil)).Elem(), SubjectAccessReviewSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewStatusInput)(nil)).Elem(), SubjectAccessReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewStatusPtrInput)(nil)).Elem(), SubjectAccessReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewStatusPatchInput)(nil)).Elem(), SubjectAccessReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectAccessReviewStatusPatchPtrInput)(nil)).Elem(), SubjectAccessReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectRulesReviewStatusInput)(nil)).Elem(), SubjectRulesReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectRulesReviewStatusPtrInput)(nil)).Elem(), SubjectRulesReviewStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectRulesReviewStatusPatchInput)(nil)).Elem(), SubjectRulesReviewStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectRulesReviewStatusPatchPtrInput)(nil)).Elem(), SubjectRulesReviewStatusPatchArgs{})
	pulumi.RegisterOutputType(LocalSubjectAccessReviewOutput{})
	pulumi.RegisterOutputType(LocalSubjectAccessReviewPatchOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesPtrOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesPatchOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesPatchPtrOutput{})
	pulumi.RegisterOutputType(NonResourceRuleOutput{})
	pulumi.RegisterOutputType(NonResourceRuleArrayOutput{})
	pulumi.RegisterOutputType(NonResourceRulePatchOutput{})
	pulumi.RegisterOutputType(NonResourceRulePatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceAttributesOutput{})
	pulumi.RegisterOutputType(ResourceAttributesPtrOutput{})
	pulumi.RegisterOutputType(ResourceAttributesPatchOutput{})
	pulumi.RegisterOutputType(ResourceAttributesPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceRuleOutput{})
	pulumi.RegisterOutputType(ResourceRuleArrayOutput{})
	pulumi.RegisterOutputType(ResourceRulePatchOutput{})
	pulumi.RegisterOutputType(ResourceRulePatchArrayOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewSpecOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewSpecPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewSpecOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewSpecPatchOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewPatchOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewSpecOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewSpecPatchOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusPatchOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusPatchOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusPatchPtrOutput{})
}
