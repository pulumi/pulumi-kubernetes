// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec *SubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

type LocalSubjectAccessReviewTypeInput interface {
	pulumi.Input

	ToLocalSubjectAccessReviewTypeOutput() LocalSubjectAccessReviewTypeOutput
	ToLocalSubjectAccessReviewTypeOutputWithContext(context.Context) LocalSubjectAccessReviewTypeOutput
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
	Spec SubjectAccessReviewSpecPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (LocalSubjectAccessReviewTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReviewType)(nil)).Elem()
}

func (i LocalSubjectAccessReviewTypeArgs) ToLocalSubjectAccessReviewTypeOutput() LocalSubjectAccessReviewTypeOutput {
	return i.ToLocalSubjectAccessReviewTypeOutputWithContext(context.Background())
}

func (i LocalSubjectAccessReviewTypeArgs) ToLocalSubjectAccessReviewTypeOutputWithContext(ctx context.Context) LocalSubjectAccessReviewTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalSubjectAccessReviewTypeOutput)
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type LocalSubjectAccessReviewTypeOutput struct{ *pulumi.OutputState }

func (LocalSubjectAccessReviewTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalSubjectAccessReviewType)(nil)).Elem()
}

func (o LocalSubjectAccessReviewTypeOutput) ToLocalSubjectAccessReviewTypeOutput() LocalSubjectAccessReviewTypeOutput {
	return o
}

func (o LocalSubjectAccessReviewTypeOutput) ToLocalSubjectAccessReviewTypeOutputWithContext(ctx context.Context) LocalSubjectAccessReviewTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LocalSubjectAccessReviewTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LocalSubjectAccessReviewTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LocalSubjectAccessReviewTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
func (o LocalSubjectAccessReviewTypeOutput) Spec() SubjectAccessReviewSpecPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewType) *SubjectAccessReviewSpec { return v.Spec }).(SubjectAccessReviewSpecPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o LocalSubjectAccessReviewTypeOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v LocalSubjectAccessReviewType) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributes struct {
	// Path is the URL path of the request
	Path *string `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb *string `pulumi:"verb"`
}

type NonResourceAttributesInput interface {
	pulumi.Input

	ToNonResourceAttributesOutput() NonResourceAttributesOutput
	ToNonResourceAttributesOutputWithContext(context.Context) NonResourceAttributesOutput
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesArgs struct {
	// Path is the URL path of the request
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Verb is the standard HTTP verb
	Verb pulumi.StringPtrInput `pulumi:"verb"`
}

func (NonResourceAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributes)(nil)).Elem()
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesOutput() NonResourceAttributesOutput {
	return i.ToNonResourceAttributesOutputWithContext(context.Background())
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesOutputWithContext(ctx context.Context) NonResourceAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesOutput)
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return i.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (i NonResourceAttributesArgs) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesOutput).ToNonResourceAttributesPtrOutputWithContext(ctx)
}

type NonResourceAttributesPtrInput interface {
	pulumi.Input

	ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput
	ToNonResourceAttributesPtrOutputWithContext(context.Context) NonResourceAttributesPtrOutput
}

type nonResourceAttributesPtrType NonResourceAttributesArgs

func NonResourceAttributesPtr(v *NonResourceAttributesArgs) NonResourceAttributesPtrInput {
	return (*nonResourceAttributesPtrType)(v)
}

func (*nonResourceAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributes)(nil)).Elem()
}

func (i *nonResourceAttributesPtrType) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return i.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (i *nonResourceAttributesPtrType) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceAttributesPtrOutput)
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type NonResourceAttributesOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceAttributes)(nil)).Elem()
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesOutput() NonResourceAttributesOutput {
	return o
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesOutputWithContext(ctx context.Context) NonResourceAttributesOutput {
	return o
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return o.ToNonResourceAttributesPtrOutputWithContext(context.Background())
}

func (o NonResourceAttributesOutput) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *NonResourceAttributes {
		return &v
	}).(NonResourceAttributesPtrOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

type NonResourceAttributesPtrOutput struct{ *pulumi.OutputState }

func (NonResourceAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NonResourceAttributes)(nil)).Elem()
}

func (o NonResourceAttributesPtrOutput) ToNonResourceAttributesPtrOutput() NonResourceAttributesPtrOutput {
	return o
}

func (o NonResourceAttributesPtrOutput) ToNonResourceAttributesPtrOutputWithContext(ctx context.Context) NonResourceAttributesPtrOutput {
	return o
}

func (o NonResourceAttributesPtrOutput) Elem() NonResourceAttributesOutput {
	return o.ApplyT(func(v *NonResourceAttributes) NonResourceAttributes { return *v }).(NonResourceAttributesOutput)
}

// Path is the URL path of the request
func (o NonResourceAttributesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Verb is the standard HTTP verb
func (o NonResourceAttributesPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRule struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

type NonResourceRuleInput interface {
	pulumi.Input

	ToNonResourceRuleOutput() NonResourceRuleOutput
	ToNonResourceRuleOutputWithContext(context.Context) NonResourceRuleOutput
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRuleArgs struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (NonResourceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRule)(nil)).Elem()
}

func (i NonResourceRuleArgs) ToNonResourceRuleOutput() NonResourceRuleOutput {
	return i.ToNonResourceRuleOutputWithContext(context.Background())
}

func (i NonResourceRuleArgs) ToNonResourceRuleOutputWithContext(ctx context.Context) NonResourceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRuleOutput)
}

type NonResourceRuleArrayInput interface {
	pulumi.Input

	ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput
	ToNonResourceRuleArrayOutputWithContext(context.Context) NonResourceRuleArrayOutput
}

type NonResourceRuleArray []NonResourceRuleInput

func (NonResourceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRule)(nil)).Elem()
}

func (i NonResourceRuleArray) ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput {
	return i.ToNonResourceRuleArrayOutputWithContext(context.Background())
}

func (i NonResourceRuleArray) ToNonResourceRuleArrayOutputWithContext(ctx context.Context) NonResourceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourceRuleArrayOutput)
}

// NonResourceRule holds information that describes a rule for the non-resource
type NonResourceRuleOutput struct{ *pulumi.OutputState }

func (NonResourceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourceRule)(nil)).Elem()
}

func (o NonResourceRuleOutput) ToNonResourceRuleOutput() NonResourceRuleOutput {
	return o
}

func (o NonResourceRuleOutput) ToNonResourceRuleOutputWithContext(ctx context.Context) NonResourceRuleOutput {
	return o
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
func (o NonResourceRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
func (o NonResourceRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourceRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type NonResourceRuleArrayOutput struct{ *pulumi.OutputState }

func (NonResourceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourceRule)(nil)).Elem()
}

func (o NonResourceRuleArrayOutput) ToNonResourceRuleArrayOutput() NonResourceRuleArrayOutput {
	return o
}

func (o NonResourceRuleArrayOutput) ToNonResourceRuleArrayOutputWithContext(ctx context.Context) NonResourceRuleArrayOutput {
	return o
}

func (o NonResourceRuleArrayOutput) Index(i pulumi.IntInput) NonResourceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonResourceRule {
		return vs[0].([]NonResourceRule)[vs[1].(int)]
	}).(NonResourceRuleOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributes struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group *string `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace *string `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource *string `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource *string `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb *string `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version *string `pulumi:"version"`
}

type ResourceAttributesInput interface {
	pulumi.Input

	ToResourceAttributesOutput() ResourceAttributesOutput
	ToResourceAttributesOutputWithContext(context.Context) ResourceAttributesOutput
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesArgs struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource pulumi.StringPtrInput `pulumi:"subresource"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb pulumi.StringPtrInput `pulumi:"verb"`
	// Version is the API Version of the Resource.  "*" means all.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ResourceAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributes)(nil)).Elem()
}

func (i ResourceAttributesArgs) ToResourceAttributesOutput() ResourceAttributesOutput {
	return i.ToResourceAttributesOutputWithContext(context.Background())
}

func (i ResourceAttributesArgs) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesOutput)
}

func (i ResourceAttributesArgs) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return i.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (i ResourceAttributesArgs) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesOutput).ToResourceAttributesPtrOutputWithContext(ctx)
}

type ResourceAttributesPtrInput interface {
	pulumi.Input

	ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput
	ToResourceAttributesPtrOutputWithContext(context.Context) ResourceAttributesPtrOutput
}

type resourceAttributesPtrType ResourceAttributesArgs

func ResourceAttributesPtr(v *ResourceAttributesArgs) ResourceAttributesPtrInput {
	return (*resourceAttributesPtrType)(v)
}

func (*resourceAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (i *resourceAttributesPtrType) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return i.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (i *resourceAttributesPtrType) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesPtrOutput)
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type ResourceAttributesOutput struct{ *pulumi.OutputState }

func (ResourceAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesOutput) ToResourceAttributesOutput() ResourceAttributesOutput {
	return o
}

func (o ResourceAttributesOutput) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return o
}

func (o ResourceAttributesOutput) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return o.ToResourceAttributesPtrOutputWithContext(context.Background())
}

func (o ResourceAttributesOutput) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *ResourceAttributes {
		return &v
	}).(ResourceAttributesPtrOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ResourceAttributesPtrOutput struct{ *pulumi.OutputState }

func (ResourceAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesPtrOutput) ToResourceAttributesPtrOutput() ResourceAttributesPtrOutput {
	return o
}

func (o ResourceAttributesPtrOutput) ToResourceAttributesPtrOutputWithContext(ctx context.Context) ResourceAttributesPtrOutput {
	return o
}

func (o ResourceAttributesPtrOutput) Elem() ResourceAttributesOutput {
	return o.ApplyT(func(v *ResourceAttributes) ResourceAttributes { return *v }).(ResourceAttributesOutput)
}

// Group is the API Group of the Resource.  "*" means all.
func (o ResourceAttributesPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (o ResourceAttributesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (o ResourceAttributesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is one of the existing resource types.  "*" means all.
func (o ResourceAttributesPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Subresource is one of the existing resource types.  "" means none.
func (o ResourceAttributesPtrOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceAttributesPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Verb }).(pulumi.StringPtrOutput)
}

// Version is the API Version of the Resource.  "*" means all.
func (o ResourceAttributesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAttributes) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups []string `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs []string `pulumi:"verbs"`
}

type ResourceRuleInput interface {
	pulumi.Input

	ToResourceRuleOutput() ResourceRuleOutput
	ToResourceRuleOutputWithContext(context.Context) ResourceRuleOutput
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRuleArgs struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (ResourceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRule)(nil)).Elem()
}

func (i ResourceRuleArgs) ToResourceRuleOutput() ResourceRuleOutput {
	return i.ToResourceRuleOutputWithContext(context.Background())
}

func (i ResourceRuleArgs) ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRuleOutput)
}

type ResourceRuleArrayInput interface {
	pulumi.Input

	ToResourceRuleArrayOutput() ResourceRuleArrayOutput
	ToResourceRuleArrayOutputWithContext(context.Context) ResourceRuleArrayOutput
}

type ResourceRuleArray []ResourceRuleInput

func (ResourceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRule)(nil)).Elem()
}

func (i ResourceRuleArray) ToResourceRuleArrayOutput() ResourceRuleArrayOutput {
	return i.ToResourceRuleArrayOutputWithContext(context.Background())
}

func (i ResourceRuleArray) ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRuleArrayOutput)
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type ResourceRuleOutput struct{ *pulumi.OutputState }

func (ResourceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRule)(nil)).Elem()
}

func (o ResourceRuleOutput) ToResourceRuleOutput() ResourceRuleOutput {
	return o
}

func (o ResourceRuleOutput) ToResourceRuleOutputWithContext(ctx context.Context) ResourceRuleOutput {
	return o
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
func (o ResourceRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
func (o ResourceRuleOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
func (o ResourceRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (o ResourceRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type ResourceRuleArrayOutput struct{ *pulumi.OutputState }

func (ResourceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRule)(nil)).Elem()
}

func (o ResourceRuleArrayOutput) ToResourceRuleArrayOutput() ResourceRuleArrayOutput {
	return o
}

func (o ResourceRuleArrayOutput) ToResourceRuleArrayOutputWithContext(ctx context.Context) ResourceRuleArrayOutput {
	return o
}

func (o ResourceRuleArrayOutput) Index(i pulumi.IntInput) ResourceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRule {
		return vs[0].([]ResourceRule)[vs[1].(int)]
	}).(ResourceRuleOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec *SelfSubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

type SelfSubjectAccessReviewTypeInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewTypeOutput() SelfSubjectAccessReviewTypeOutput
	ToSelfSubjectAccessReviewTypeOutputWithContext(context.Context) SelfSubjectAccessReviewTypeOutput
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.  user and groups must be empty
	Spec SelfSubjectAccessReviewSpecPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (SelfSubjectAccessReviewTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewType)(nil)).Elem()
}

func (i SelfSubjectAccessReviewTypeArgs) ToSelfSubjectAccessReviewTypeOutput() SelfSubjectAccessReviewTypeOutput {
	return i.ToSelfSubjectAccessReviewTypeOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewTypeArgs) ToSelfSubjectAccessReviewTypeOutputWithContext(ctx context.Context) SelfSubjectAccessReviewTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewTypeOutput)
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type SelfSubjectAccessReviewTypeOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewType)(nil)).Elem()
}

func (o SelfSubjectAccessReviewTypeOutput) ToSelfSubjectAccessReviewTypeOutput() SelfSubjectAccessReviewTypeOutput {
	return o
}

func (o SelfSubjectAccessReviewTypeOutput) ToSelfSubjectAccessReviewTypeOutputWithContext(ctx context.Context) SelfSubjectAccessReviewTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectAccessReviewTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectAccessReviewTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectAccessReviewTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.  user and groups must be empty
func (o SelfSubjectAccessReviewTypeOutput) Spec() SelfSubjectAccessReviewSpecPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewType) *SelfSubjectAccessReviewSpec { return v.Spec }).(SelfSubjectAccessReviewSpecPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SelfSubjectAccessReviewTypeOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewType) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpec struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributes `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributes `pulumi:"resourceAttributes"`
}

type SelfSubjectAccessReviewSpecInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput
	ToSelfSubjectAccessReviewSpecOutputWithContext(context.Context) SelfSubjectAccessReviewSpecOutput
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecArgs struct {
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPtrInput `pulumi:"resourceAttributes"`
}

func (SelfSubjectAccessReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput {
	return i.ToSelfSubjectAccessReviewSpecOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecOutput)
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecPtrOutput() SelfSubjectAccessReviewSpecPtrOutput {
	return i.ToSelfSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (i SelfSubjectAccessReviewSpecArgs) ToSelfSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecOutput).ToSelfSubjectAccessReviewSpecPtrOutputWithContext(ctx)
}

type SelfSubjectAccessReviewSpecPtrInput interface {
	pulumi.Input

	ToSelfSubjectAccessReviewSpecPtrOutput() SelfSubjectAccessReviewSpecPtrOutput
	ToSelfSubjectAccessReviewSpecPtrOutputWithContext(context.Context) SelfSubjectAccessReviewSpecPtrOutput
}

type selfSubjectAccessReviewSpecPtrType SelfSubjectAccessReviewSpecArgs

func SelfSubjectAccessReviewSpecPtr(v *SelfSubjectAccessReviewSpecArgs) SelfSubjectAccessReviewSpecPtrInput {
	return (*selfSubjectAccessReviewSpecPtrType)(v)
}

func (*selfSubjectAccessReviewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (i *selfSubjectAccessReviewSpecPtrType) ToSelfSubjectAccessReviewSpecPtrOutput() SelfSubjectAccessReviewSpecPtrOutput {
	return i.ToSelfSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (i *selfSubjectAccessReviewSpecPtrType) ToSelfSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectAccessReviewSpecPtrOutput)
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SelfSubjectAccessReviewSpecOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecOutput() SelfSubjectAccessReviewSpecOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecPtrOutput() SelfSubjectAccessReviewSpecPtrOutput {
	return o.ToSelfSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (o SelfSubjectAccessReviewSpecOutput) ToSelfSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewSpec {
		return &v
	}).(SelfSubjectAccessReviewSpecPtrOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SelfSubjectAccessReviewSpecOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SelfSubjectAccessReviewSpecOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

type SelfSubjectAccessReviewSpecPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectAccessReviewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectAccessReviewSpec)(nil)).Elem()
}

func (o SelfSubjectAccessReviewSpecPtrOutput) ToSelfSubjectAccessReviewSpecPtrOutput() SelfSubjectAccessReviewSpecPtrOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPtrOutput) ToSelfSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectAccessReviewSpecPtrOutput {
	return o
}

func (o SelfSubjectAccessReviewSpecPtrOutput) Elem() SelfSubjectAccessReviewSpecOutput {
	return o.ApplyT(func(v *SelfSubjectAccessReviewSpec) SelfSubjectAccessReviewSpec { return *v }).(SelfSubjectAccessReviewSpecOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SelfSubjectAccessReviewSpecPtrOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SelfSubjectAccessReviewSpecPtrOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SelfSubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec *SelfSubjectRulesReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status *SubjectRulesReviewStatus `pulumi:"status"`
}

type SelfSubjectRulesReviewTypeInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewTypeOutput() SelfSubjectRulesReviewTypeOutput
	ToSelfSubjectRulesReviewTypeOutputWithContext(context.Context) SelfSubjectRulesReviewTypeOutput
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated.
	Spec SelfSubjectRulesReviewSpecPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates the set of actions a user can perform.
	Status SubjectRulesReviewStatusPtrInput `pulumi:"status"`
}

func (SelfSubjectRulesReviewTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewType)(nil)).Elem()
}

func (i SelfSubjectRulesReviewTypeArgs) ToSelfSubjectRulesReviewTypeOutput() SelfSubjectRulesReviewTypeOutput {
	return i.ToSelfSubjectRulesReviewTypeOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewTypeArgs) ToSelfSubjectRulesReviewTypeOutputWithContext(ctx context.Context) SelfSubjectRulesReviewTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewTypeOutput)
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type SelfSubjectRulesReviewTypeOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewType)(nil)).Elem()
}

func (o SelfSubjectRulesReviewTypeOutput) ToSelfSubjectRulesReviewTypeOutput() SelfSubjectRulesReviewTypeOutput {
	return o
}

func (o SelfSubjectRulesReviewTypeOutput) ToSelfSubjectRulesReviewTypeOutputWithContext(ctx context.Context) SelfSubjectRulesReviewTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SelfSubjectRulesReviewTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SelfSubjectRulesReviewTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SelfSubjectRulesReviewTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated.
func (o SelfSubjectRulesReviewTypeOutput) Spec() SelfSubjectRulesReviewSpecPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewType) *SelfSubjectRulesReviewSpec { return v.Spec }).(SelfSubjectRulesReviewSpecPtrOutput)
}

// Status is filled in by the server and indicates the set of actions a user can perform.
func (o SelfSubjectRulesReviewTypeOutput) Status() SubjectRulesReviewStatusPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewType) *SubjectRulesReviewStatus { return v.Status }).(SubjectRulesReviewStatusPtrOutput)
}

type SelfSubjectRulesReviewSpec struct {
	// Namespace to evaluate rules for. Required.
	Namespace *string `pulumi:"namespace"`
}

type SelfSubjectRulesReviewSpecInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput
	ToSelfSubjectRulesReviewSpecOutputWithContext(context.Context) SelfSubjectRulesReviewSpecOutput
}

type SelfSubjectRulesReviewSpecArgs struct {
	// Namespace to evaluate rules for. Required.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SelfSubjectRulesReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput {
	return i.ToSelfSubjectRulesReviewSpecOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecOutput)
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecPtrOutput() SelfSubjectRulesReviewSpecPtrOutput {
	return i.ToSelfSubjectRulesReviewSpecPtrOutputWithContext(context.Background())
}

func (i SelfSubjectRulesReviewSpecArgs) ToSelfSubjectRulesReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecOutput).ToSelfSubjectRulesReviewSpecPtrOutputWithContext(ctx)
}

type SelfSubjectRulesReviewSpecPtrInput interface {
	pulumi.Input

	ToSelfSubjectRulesReviewSpecPtrOutput() SelfSubjectRulesReviewSpecPtrOutput
	ToSelfSubjectRulesReviewSpecPtrOutputWithContext(context.Context) SelfSubjectRulesReviewSpecPtrOutput
}

type selfSubjectRulesReviewSpecPtrType SelfSubjectRulesReviewSpecArgs

func SelfSubjectRulesReviewSpecPtr(v *SelfSubjectRulesReviewSpecArgs) SelfSubjectRulesReviewSpecPtrInput {
	return (*selfSubjectRulesReviewSpecPtrType)(v)
}

func (*selfSubjectRulesReviewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (i *selfSubjectRulesReviewSpecPtrType) ToSelfSubjectRulesReviewSpecPtrOutput() SelfSubjectRulesReviewSpecPtrOutput {
	return i.ToSelfSubjectRulesReviewSpecPtrOutputWithContext(context.Background())
}

func (i *selfSubjectRulesReviewSpecPtrType) ToSelfSubjectRulesReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfSubjectRulesReviewSpecPtrOutput)
}

type SelfSubjectRulesReviewSpecOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecOutput() SelfSubjectRulesReviewSpecOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecPtrOutput() SelfSubjectRulesReviewSpecPtrOutput {
	return o.ToSelfSubjectRulesReviewSpecPtrOutputWithContext(context.Background())
}

func (o SelfSubjectRulesReviewSpecOutput) ToSelfSubjectRulesReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewSpec {
		return &v
	}).(SelfSubjectRulesReviewSpecPtrOutput)
}

// Namespace to evaluate rules for. Required.
func (o SelfSubjectRulesReviewSpecOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewSpec) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SelfSubjectRulesReviewSpecPtrOutput struct{ *pulumi.OutputState }

func (SelfSubjectRulesReviewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfSubjectRulesReviewSpec)(nil)).Elem()
}

func (o SelfSubjectRulesReviewSpecPtrOutput) ToSelfSubjectRulesReviewSpecPtrOutput() SelfSubjectRulesReviewSpecPtrOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPtrOutput) ToSelfSubjectRulesReviewSpecPtrOutputWithContext(ctx context.Context) SelfSubjectRulesReviewSpecPtrOutput {
	return o
}

func (o SelfSubjectRulesReviewSpecPtrOutput) Elem() SelfSubjectRulesReviewSpecOutput {
	return o.ApplyT(func(v *SelfSubjectRulesReviewSpec) SelfSubjectRulesReviewSpec { return *v }).(SelfSubjectRulesReviewSpecOutput)
}

// Namespace to evaluate rules for. Required.
func (o SelfSubjectRulesReviewSpecPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfSubjectRulesReviewSpec) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec *SubjectAccessReviewSpec `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status *SubjectAccessReviewStatus `pulumi:"status"`
}

type SubjectAccessReviewTypeInput interface {
	pulumi.Input

	ToSubjectAccessReviewTypeOutput() SubjectAccessReviewTypeOutput
	ToSubjectAccessReviewTypeOutputWithContext(context.Context) SubjectAccessReviewTypeOutput
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec holds information about the request being evaluated
	Spec SubjectAccessReviewSpecPtrInput `pulumi:"spec"`
	// Status is filled in by the server and indicates whether the request is allowed or not
	Status SubjectAccessReviewStatusPtrInput `pulumi:"status"`
}

func (SubjectAccessReviewTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewType)(nil)).Elem()
}

func (i SubjectAccessReviewTypeArgs) ToSubjectAccessReviewTypeOutput() SubjectAccessReviewTypeOutput {
	return i.ToSubjectAccessReviewTypeOutputWithContext(context.Background())
}

func (i SubjectAccessReviewTypeArgs) ToSubjectAccessReviewTypeOutputWithContext(ctx context.Context) SubjectAccessReviewTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewTypeOutput)
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type SubjectAccessReviewTypeOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewType)(nil)).Elem()
}

func (o SubjectAccessReviewTypeOutput) ToSubjectAccessReviewTypeOutput() SubjectAccessReviewTypeOutput {
	return o
}

func (o SubjectAccessReviewTypeOutput) ToSubjectAccessReviewTypeOutputWithContext(ctx context.Context) SubjectAccessReviewTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SubjectAccessReviewTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubjectAccessReviewTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SubjectAccessReviewTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec holds information about the request being evaluated
func (o SubjectAccessReviewTypeOutput) Spec() SubjectAccessReviewSpecPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewType) *SubjectAccessReviewSpec { return v.Spec }).(SubjectAccessReviewSpecPtrOutput)
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (o SubjectAccessReviewTypeOutput) Status() SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewType) *SubjectAccessReviewStatus { return v.Status }).(SubjectAccessReviewStatusPtrOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpec struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra map[string][]string `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group []string `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes *NonResourceAttributes `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes *ResourceAttributes `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid *string `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User *string `pulumi:"user"`
}

type SubjectAccessReviewSpecInput interface {
	pulumi.Input

	ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput
	ToSubjectAccessReviewSpecOutputWithContext(context.Context) SubjectAccessReviewSpecOutput
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecArgs struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Groups is the groups you're testing for.
	Group pulumi.StringArrayInput `pulumi:"group"`
	// NonResourceAttributes describes information for a non-resource access request
	NonResourceAttributes NonResourceAttributesPtrInput `pulumi:"nonResourceAttributes"`
	// ResourceAuthorizationAttributes describes information for a resource access request
	ResourceAttributes ResourceAttributesPtrInput `pulumi:"resourceAttributes"`
	// UID information about the requesting user.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (SubjectAccessReviewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpec)(nil)).Elem()
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput {
	return i.ToSubjectAccessReviewSpecOutputWithContext(context.Background())
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SubjectAccessReviewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecOutput)
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecPtrOutput() SubjectAccessReviewSpecPtrOutput {
	return i.ToSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (i SubjectAccessReviewSpecArgs) ToSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecOutput).ToSubjectAccessReviewSpecPtrOutputWithContext(ctx)
}

type SubjectAccessReviewSpecPtrInput interface {
	pulumi.Input

	ToSubjectAccessReviewSpecPtrOutput() SubjectAccessReviewSpecPtrOutput
	ToSubjectAccessReviewSpecPtrOutputWithContext(context.Context) SubjectAccessReviewSpecPtrOutput
}

type subjectAccessReviewSpecPtrType SubjectAccessReviewSpecArgs

func SubjectAccessReviewSpecPtr(v *SubjectAccessReviewSpecArgs) SubjectAccessReviewSpecPtrInput {
	return (*subjectAccessReviewSpecPtrType)(v)
}

func (*subjectAccessReviewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewSpec)(nil)).Elem()
}

func (i *subjectAccessReviewSpecPtrType) ToSubjectAccessReviewSpecPtrOutput() SubjectAccessReviewSpecPtrOutput {
	return i.ToSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (i *subjectAccessReviewSpecPtrType) ToSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewSpecPtrOutput)
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type SubjectAccessReviewSpecOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewSpec)(nil)).Elem()
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecOutput() SubjectAccessReviewSpecOutput {
	return o
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecOutputWithContext(ctx context.Context) SubjectAccessReviewSpecOutput {
	return o
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecPtrOutput() SubjectAccessReviewSpecPtrOutput {
	return o.ToSubjectAccessReviewSpecPtrOutputWithContext(context.Background())
}

func (o SubjectAccessReviewSpecOutput) ToSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *SubjectAccessReviewSpec {
		return &v
	}).(SubjectAccessReviewSpecPtrOutput)
}

// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
func (o SubjectAccessReviewSpecOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Groups is the groups you're testing for.
func (o SubjectAccessReviewSpecOutput) Group() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) []string { return v.Group }).(pulumi.StringArrayOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SubjectAccessReviewSpecOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SubjectAccessReviewSpecOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

// UID information about the requesting user.
func (o SubjectAccessReviewSpecOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
func (o SubjectAccessReviewSpecOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.User }).(pulumi.StringPtrOutput)
}

type SubjectAccessReviewSpecPtrOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewSpec)(nil)).Elem()
}

func (o SubjectAccessReviewSpecPtrOutput) ToSubjectAccessReviewSpecPtrOutput() SubjectAccessReviewSpecPtrOutput {
	return o
}

func (o SubjectAccessReviewSpecPtrOutput) ToSubjectAccessReviewSpecPtrOutputWithContext(ctx context.Context) SubjectAccessReviewSpecPtrOutput {
	return o
}

func (o SubjectAccessReviewSpecPtrOutput) Elem() SubjectAccessReviewSpecOutput {
	return o.ApplyT(func(v *SubjectAccessReviewSpec) SubjectAccessReviewSpec { return *v }).(SubjectAccessReviewSpecOutput)
}

// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
func (o SubjectAccessReviewSpecPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Groups is the groups you're testing for.
func (o SubjectAccessReviewSpecPtrOutput) Group() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) []string { return v.Group }).(pulumi.StringArrayOutput)
}

// NonResourceAttributes describes information for a non-resource access request
func (o SubjectAccessReviewSpecPtrOutput) NonResourceAttributes() NonResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *NonResourceAttributes { return v.NonResourceAttributes }).(NonResourceAttributesPtrOutput)
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (o SubjectAccessReviewSpecPtrOutput) ResourceAttributes() ResourceAttributesPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *ResourceAttributes { return v.ResourceAttributes }).(ResourceAttributesPtrOutput)
}

// UID information about the requesting user.
func (o SubjectAccessReviewSpecPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
func (o SubjectAccessReviewSpecPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewSpec) *string { return v.User }).(pulumi.StringPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatus struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed *bool `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied *bool `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError *string `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `pulumi:"reason"`
}

type SubjectAccessReviewStatusInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput
	ToSubjectAccessReviewStatusOutputWithContext(context.Context) SubjectAccessReviewStatusOutput
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusArgs struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed pulumi.BoolPtrInput `pulumi:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied pulumi.BoolPtrInput `pulumi:"denied"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (SubjectAccessReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatus)(nil)).Elem()
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput {
	return i.ToSubjectAccessReviewStatusOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusOutput)
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return i.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (i SubjectAccessReviewStatusArgs) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusOutput).ToSubjectAccessReviewStatusPtrOutputWithContext(ctx)
}

type SubjectAccessReviewStatusPtrInput interface {
	pulumi.Input

	ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput
	ToSubjectAccessReviewStatusPtrOutputWithContext(context.Context) SubjectAccessReviewStatusPtrOutput
}

type subjectAccessReviewStatusPtrType SubjectAccessReviewStatusArgs

func SubjectAccessReviewStatusPtr(v *SubjectAccessReviewStatusArgs) SubjectAccessReviewStatusPtrInput {
	return (*subjectAccessReviewStatusPtrType)(v)
}

func (*subjectAccessReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatus)(nil)).Elem()
}

func (i *subjectAccessReviewStatusPtrType) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return i.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (i *subjectAccessReviewStatusPtrType) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAccessReviewStatusPtrOutput)
}

// SubjectAccessReviewStatus
type SubjectAccessReviewStatusOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAccessReviewStatus)(nil)).Elem()
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusOutput() SubjectAccessReviewStatusOutput {
	return o
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusOutputWithContext(ctx context.Context) SubjectAccessReviewStatusOutput {
	return o
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return o.ToSubjectAccessReviewStatusPtrOutputWithContext(context.Background())
}

func (o SubjectAccessReviewStatusOutput) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *SubjectAccessReviewStatus {
		return &v
	}).(SubjectAccessReviewStatusPtrOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusOutput) Allowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *bool { return v.Allowed }).(pulumi.BoolPtrOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *bool { return v.Denied }).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type SubjectAccessReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (SubjectAccessReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAccessReviewStatus)(nil)).Elem()
}

func (o SubjectAccessReviewStatusPtrOutput) ToSubjectAccessReviewStatusPtrOutput() SubjectAccessReviewStatusPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPtrOutput) ToSubjectAccessReviewStatusPtrOutputWithContext(ctx context.Context) SubjectAccessReviewStatusPtrOutput {
	return o
}

func (o SubjectAccessReviewStatusPtrOutput) Elem() SubjectAccessReviewStatusOutput {
	return o.ApplyT(func(v *SubjectAccessReviewStatus) SubjectAccessReviewStatus { return *v }).(SubjectAccessReviewStatusOutput)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (o SubjectAccessReviewStatusPtrOutput) Allowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *bool { return v.Allowed }).(pulumi.BoolPtrOutput)
}

// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
func (o SubjectAccessReviewStatusPtrOutput) Denied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *bool { return v.Denied }).(pulumi.BoolPtrOutput)
}

// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (o SubjectAccessReviewStatusPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (o SubjectAccessReviewStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectAccessReviewStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatus struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete *bool `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []NonResourceRule `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []ResourceRule `pulumi:"resourceRules"`
}

type SubjectRulesReviewStatusInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput
	ToSubjectRulesReviewStatusOutputWithContext(context.Context) SubjectRulesReviewStatusOutput
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusArgs struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError pulumi.StringPtrInput `pulumi:"evaluationError"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete pulumi.BoolPtrInput `pulumi:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules NonResourceRuleArrayInput `pulumi:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules ResourceRuleArrayInput `pulumi:"resourceRules"`
}

func (SubjectRulesReviewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatus)(nil)).Elem()
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput {
	return i.ToSubjectRulesReviewStatusOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusOutputWithContext(ctx context.Context) SubjectRulesReviewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusOutput)
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return i.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (i SubjectRulesReviewStatusArgs) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusOutput).ToSubjectRulesReviewStatusPtrOutputWithContext(ctx)
}

type SubjectRulesReviewStatusPtrInput interface {
	pulumi.Input

	ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput
	ToSubjectRulesReviewStatusPtrOutputWithContext(context.Context) SubjectRulesReviewStatusPtrOutput
}

type subjectRulesReviewStatusPtrType SubjectRulesReviewStatusArgs

func SubjectRulesReviewStatusPtr(v *SubjectRulesReviewStatusArgs) SubjectRulesReviewStatusPtrInput {
	return (*subjectRulesReviewStatusPtrType)(v)
}

func (*subjectRulesReviewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatus)(nil)).Elem()
}

func (i *subjectRulesReviewStatusPtrType) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return i.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (i *subjectRulesReviewStatusPtrType) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectRulesReviewStatusPtrOutput)
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type SubjectRulesReviewStatusOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectRulesReviewStatus)(nil)).Elem()
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusOutput() SubjectRulesReviewStatusOutput {
	return o
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusOutputWithContext(ctx context.Context) SubjectRulesReviewStatusOutput {
	return o
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return o.ToSubjectRulesReviewStatusPtrOutputWithContext(context.Background())
}

func (o SubjectRulesReviewStatusOutput) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *SubjectRulesReviewStatus {
		return &v
	}).(SubjectRulesReviewStatusPtrOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusOutput) Incomplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *bool { return v.Incomplete }).(pulumi.BoolPtrOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusOutput) NonResourceRules() NonResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []NonResourceRule { return v.NonResourceRules }).(NonResourceRuleArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusOutput) ResourceRules() ResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []ResourceRule { return v.ResourceRules }).(ResourceRuleArrayOutput)
}

type SubjectRulesReviewStatusPtrOutput struct{ *pulumi.OutputState }

func (SubjectRulesReviewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectRulesReviewStatus)(nil)).Elem()
}

func (o SubjectRulesReviewStatusPtrOutput) ToSubjectRulesReviewStatusPtrOutput() SubjectRulesReviewStatusPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPtrOutput) ToSubjectRulesReviewStatusPtrOutputWithContext(ctx context.Context) SubjectRulesReviewStatusPtrOutput {
	return o
}

func (o SubjectRulesReviewStatusPtrOutput) Elem() SubjectRulesReviewStatusOutput {
	return o.ApplyT(func(v *SubjectRulesReviewStatus) SubjectRulesReviewStatus { return *v }).(SubjectRulesReviewStatusOutput)
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) EvaluationError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *string { return v.EvaluationError }).(pulumi.StringPtrOutput)
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (o SubjectRulesReviewStatusPtrOutput) Incomplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) *bool { return v.Incomplete }).(pulumi.BoolPtrOutput)
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) NonResourceRules() NonResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []NonResourceRule { return v.NonResourceRules }).(NonResourceRuleArrayOutput)
}

// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (o SubjectRulesReviewStatusPtrOutput) ResourceRules() ResourceRuleArrayOutput {
	return o.ApplyT(func(v SubjectRulesReviewStatus) []ResourceRule { return v.ResourceRules }).(ResourceRuleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LocalSubjectAccessReviewTypeOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesOutput{})
	pulumi.RegisterOutputType(NonResourceAttributesPtrOutput{})
	pulumi.RegisterOutputType(NonResourceRuleOutput{})
	pulumi.RegisterOutputType(NonResourceRuleArrayOutput{})
	pulumi.RegisterOutputType(ResourceAttributesOutput{})
	pulumi.RegisterOutputType(ResourceAttributesPtrOutput{})
	pulumi.RegisterOutputType(ResourceRuleOutput{})
	pulumi.RegisterOutputType(ResourceRuleArrayOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewTypeOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewSpecOutput{})
	pulumi.RegisterOutputType(SelfSubjectAccessReviewSpecPtrOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewTypeOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewSpecOutput{})
	pulumi.RegisterOutputType(SelfSubjectRulesReviewSpecPtrOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewTypeOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewSpecOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewSpecPtrOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusOutput{})
	pulumi.RegisterOutputType(SubjectAccessReviewStatusPtrOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusOutput{})
	pulumi.RegisterOutputType(SubjectRulesReviewStatusPtrOutput{})
}
