// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []metav1.LabelSelector `pulumi:"clusterRoleSelectors"`
}

// AggregationRuleInput is an input type that accepts AggregationRuleArgs and AggregationRuleOutput values.
// You can construct a concrete instance of `AggregationRuleInput` via:
//
//          AggregationRuleArgs{...}
type AggregationRuleInput interface {
	pulumi.Input

	ToAggregationRuleOutput() AggregationRuleOutput
	ToAggregationRuleOutputWithContext(context.Context) AggregationRuleOutput
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRuleArgs struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors metav1.LabelSelectorArrayInput `pulumi:"clusterRoleSelectors"`
}

func (AggregationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationRule)(nil)).Elem()
}

func (i AggregationRuleArgs) ToAggregationRuleOutput() AggregationRuleOutput {
	return i.ToAggregationRuleOutputWithContext(context.Background())
}

func (i AggregationRuleArgs) ToAggregationRuleOutputWithContext(ctx context.Context) AggregationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRuleOutput)
}

func (i AggregationRuleArgs) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return i.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (i AggregationRuleArgs) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRuleOutput).ToAggregationRulePtrOutputWithContext(ctx)
}

// AggregationRulePtrInput is an input type that accepts AggregationRuleArgs, AggregationRulePtr and AggregationRulePtrOutput values.
// You can construct a concrete instance of `AggregationRulePtrInput` via:
//
//          AggregationRuleArgs{...}
//
//  or:
//
//          nil
type AggregationRulePtrInput interface {
	pulumi.Input

	ToAggregationRulePtrOutput() AggregationRulePtrOutput
	ToAggregationRulePtrOutputWithContext(context.Context) AggregationRulePtrOutput
}

type aggregationRulePtrType AggregationRuleArgs

func AggregationRulePtr(v *AggregationRuleArgs) AggregationRulePtrInput {
	return (*aggregationRulePtrType)(v)
}

func (*aggregationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationRule)(nil)).Elem()
}

func (i *aggregationRulePtrType) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return i.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (i *aggregationRulePtrType) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRulePtrOutput)
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRuleOutput struct{ *pulumi.OutputState }

func (AggregationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationRule)(nil)).Elem()
}

func (o AggregationRuleOutput) ToAggregationRuleOutput() AggregationRuleOutput {
	return o
}

func (o AggregationRuleOutput) ToAggregationRuleOutputWithContext(ctx context.Context) AggregationRuleOutput {
	return o
}

func (o AggregationRuleOutput) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return o.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (o AggregationRuleOutput) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return o.ApplyT(func(v AggregationRule) *AggregationRule {
		return &v
	}).(AggregationRulePtrOutput)
}

// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
func (o AggregationRuleOutput) ClusterRoleSelectors() metav1.LabelSelectorArrayOutput {
	return o.ApplyT(func(v AggregationRule) []metav1.LabelSelector { return v.ClusterRoleSelectors }).(metav1.LabelSelectorArrayOutput)
}

type AggregationRulePtrOutput struct{ *pulumi.OutputState }

func (AggregationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationRule)(nil)).Elem()
}

func (o AggregationRulePtrOutput) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return o
}

func (o AggregationRulePtrOutput) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return o
}

func (o AggregationRulePtrOutput) Elem() AggregationRuleOutput {
	return o.ApplyT(func(v *AggregationRule) AggregationRule { return *v }).(AggregationRuleOutput)
}

// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
func (o AggregationRulePtrOutput) ClusterRoleSelectors() metav1.LabelSelectorArrayOutput {
	return o.ApplyT(func(v *AggregationRule) []metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.ClusterRoleSelectors
	}).(metav1.LabelSelectorArrayOutput)
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
type ClusterRoleType struct {
	// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
	AggregationRule *AggregationRule `pulumi:"aggregationRule"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules []PolicyRule `pulumi:"rules"`
}

// ClusterRoleTypeInput is an input type that accepts ClusterRoleTypeArgs and ClusterRoleTypeOutput values.
// You can construct a concrete instance of `ClusterRoleTypeInput` via:
//
//          ClusterRoleTypeArgs{...}
type ClusterRoleTypeInput interface {
	pulumi.Input

	ToClusterRoleTypeOutput() ClusterRoleTypeOutput
	ToClusterRoleTypeOutputWithContext(context.Context) ClusterRoleTypeOutput
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
type ClusterRoleTypeArgs struct {
	// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
	AggregationRule AggregationRulePtrInput `pulumi:"aggregationRule"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules PolicyRuleArrayInput `pulumi:"rules"`
}

func (ClusterRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleType)(nil)).Elem()
}

func (i ClusterRoleTypeArgs) ToClusterRoleTypeOutput() ClusterRoleTypeOutput {
	return i.ToClusterRoleTypeOutputWithContext(context.Background())
}

func (i ClusterRoleTypeArgs) ToClusterRoleTypeOutputWithContext(ctx context.Context) ClusterRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleTypeOutput)
}

// ClusterRoleTypeArrayInput is an input type that accepts ClusterRoleTypeArray and ClusterRoleTypeArrayOutput values.
// You can construct a concrete instance of `ClusterRoleTypeArrayInput` via:
//
//          ClusterRoleTypeArray{ ClusterRoleTypeArgs{...} }
type ClusterRoleTypeArrayInput interface {
	pulumi.Input

	ToClusterRoleTypeArrayOutput() ClusterRoleTypeArrayOutput
	ToClusterRoleTypeArrayOutputWithContext(context.Context) ClusterRoleTypeArrayOutput
}

type ClusterRoleTypeArray []ClusterRoleTypeInput

func (ClusterRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleType)(nil)).Elem()
}

func (i ClusterRoleTypeArray) ToClusterRoleTypeArrayOutput() ClusterRoleTypeArrayOutput {
	return i.ToClusterRoleTypeArrayOutputWithContext(context.Background())
}

func (i ClusterRoleTypeArray) ToClusterRoleTypeArrayOutputWithContext(ctx context.Context) ClusterRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleTypeArrayOutput)
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
type ClusterRoleTypeOutput struct{ *pulumi.OutputState }

func (ClusterRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleType)(nil)).Elem()
}

func (o ClusterRoleTypeOutput) ToClusterRoleTypeOutput() ClusterRoleTypeOutput {
	return o
}

func (o ClusterRoleTypeOutput) ToClusterRoleTypeOutputWithContext(ctx context.Context) ClusterRoleTypeOutput {
	return o
}

// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
func (o ClusterRoleTypeOutput) AggregationRule() AggregationRulePtrOutput {
	return o.ApplyT(func(v ClusterRoleType) *AggregationRule { return v.AggregationRule }).(AggregationRulePtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterRoleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Rules holds all the PolicyRules for this ClusterRole
func (o ClusterRoleTypeOutput) Rules() PolicyRuleArrayOutput {
	return o.ApplyT(func(v ClusterRoleType) []PolicyRule { return v.Rules }).(PolicyRuleArrayOutput)
}

type ClusterRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleType)(nil)).Elem()
}

func (o ClusterRoleTypeArrayOutput) ToClusterRoleTypeArrayOutput() ClusterRoleTypeArrayOutput {
	return o
}

func (o ClusterRoleTypeArrayOutput) ToClusterRoleTypeArrayOutputWithContext(ctx context.Context) ClusterRoleTypeArrayOutput {
	return o
}

func (o ClusterRoleTypeArrayOutput) Index(i pulumi.IntInput) ClusterRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterRoleType {
		return vs[0].([]ClusterRoleType)[vs[1].(int)]
	}).(ClusterRoleTypeOutput)
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
type ClusterRoleBindingType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRef `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []Subject `pulumi:"subjects"`
}

// ClusterRoleBindingTypeInput is an input type that accepts ClusterRoleBindingTypeArgs and ClusterRoleBindingTypeOutput values.
// You can construct a concrete instance of `ClusterRoleBindingTypeInput` via:
//
//          ClusterRoleBindingTypeArgs{...}
type ClusterRoleBindingTypeInput interface {
	pulumi.Input

	ToClusterRoleBindingTypeOutput() ClusterRoleBindingTypeOutput
	ToClusterRoleBindingTypeOutputWithContext(context.Context) ClusterRoleBindingTypeOutput
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
type ClusterRoleBindingTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRefInput `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (ClusterRoleBindingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingType)(nil)).Elem()
}

func (i ClusterRoleBindingTypeArgs) ToClusterRoleBindingTypeOutput() ClusterRoleBindingTypeOutput {
	return i.ToClusterRoleBindingTypeOutputWithContext(context.Background())
}

func (i ClusterRoleBindingTypeArgs) ToClusterRoleBindingTypeOutputWithContext(ctx context.Context) ClusterRoleBindingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingTypeOutput)
}

// ClusterRoleBindingTypeArrayInput is an input type that accepts ClusterRoleBindingTypeArray and ClusterRoleBindingTypeArrayOutput values.
// You can construct a concrete instance of `ClusterRoleBindingTypeArrayInput` via:
//
//          ClusterRoleBindingTypeArray{ ClusterRoleBindingTypeArgs{...} }
type ClusterRoleBindingTypeArrayInput interface {
	pulumi.Input

	ToClusterRoleBindingTypeArrayOutput() ClusterRoleBindingTypeArrayOutput
	ToClusterRoleBindingTypeArrayOutputWithContext(context.Context) ClusterRoleBindingTypeArrayOutput
}

type ClusterRoleBindingTypeArray []ClusterRoleBindingTypeInput

func (ClusterRoleBindingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleBindingType)(nil)).Elem()
}

func (i ClusterRoleBindingTypeArray) ToClusterRoleBindingTypeArrayOutput() ClusterRoleBindingTypeArrayOutput {
	return i.ToClusterRoleBindingTypeArrayOutputWithContext(context.Background())
}

func (i ClusterRoleBindingTypeArray) ToClusterRoleBindingTypeArrayOutputWithContext(ctx context.Context) ClusterRoleBindingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingTypeArrayOutput)
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
type ClusterRoleBindingTypeOutput struct{ *pulumi.OutputState }

func (ClusterRoleBindingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingType)(nil)).Elem()
}

func (o ClusterRoleBindingTypeOutput) ToClusterRoleBindingTypeOutput() ClusterRoleBindingTypeOutput {
	return o
}

func (o ClusterRoleBindingTypeOutput) ToClusterRoleBindingTypeOutputWithContext(ctx context.Context) ClusterRoleBindingTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleBindingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleBindingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleBindingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
func (o ClusterRoleBindingTypeOutput) RoleRef() RoleRefOutput {
	return o.ApplyT(func(v ClusterRoleBindingType) RoleRef { return v.RoleRef }).(RoleRefOutput)
}

// Subjects holds references to the objects the role applies to.
func (o ClusterRoleBindingTypeOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func(v ClusterRoleBindingType) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

type ClusterRoleBindingTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterRoleBindingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleBindingType)(nil)).Elem()
}

func (o ClusterRoleBindingTypeArrayOutput) ToClusterRoleBindingTypeArrayOutput() ClusterRoleBindingTypeArrayOutput {
	return o
}

func (o ClusterRoleBindingTypeArrayOutput) ToClusterRoleBindingTypeArrayOutputWithContext(ctx context.Context) ClusterRoleBindingTypeArrayOutput {
	return o
}

func (o ClusterRoleBindingTypeArrayOutput) Index(i pulumi.IntInput) ClusterRoleBindingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterRoleBindingType {
		return vs[0].([]ClusterRoleBindingType)[vs[1].(int)]
	}).(ClusterRoleBindingTypeOutput)
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.
type ClusterRoleBindingListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of ClusterRoleBindings
	Items []ClusterRoleBindingType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClusterRoleBindingListTypeInput is an input type that accepts ClusterRoleBindingListTypeArgs and ClusterRoleBindingListTypeOutput values.
// You can construct a concrete instance of `ClusterRoleBindingListTypeInput` via:
//
//          ClusterRoleBindingListTypeArgs{...}
type ClusterRoleBindingListTypeInput interface {
	pulumi.Input

	ToClusterRoleBindingListTypeOutput() ClusterRoleBindingListTypeOutput
	ToClusterRoleBindingListTypeOutputWithContext(context.Context) ClusterRoleBindingListTypeOutput
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.
type ClusterRoleBindingListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of ClusterRoleBindings
	Items ClusterRoleBindingTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterRoleBindingListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingListType)(nil)).Elem()
}

func (i ClusterRoleBindingListTypeArgs) ToClusterRoleBindingListTypeOutput() ClusterRoleBindingListTypeOutput {
	return i.ToClusterRoleBindingListTypeOutputWithContext(context.Background())
}

func (i ClusterRoleBindingListTypeArgs) ToClusterRoleBindingListTypeOutputWithContext(ctx context.Context) ClusterRoleBindingListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingListTypeOutput)
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.
type ClusterRoleBindingListTypeOutput struct{ *pulumi.OutputState }

func (ClusterRoleBindingListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingListType)(nil)).Elem()
}

func (o ClusterRoleBindingListTypeOutput) ToClusterRoleBindingListTypeOutput() ClusterRoleBindingListTypeOutput {
	return o
}

func (o ClusterRoleBindingListTypeOutput) ToClusterRoleBindingListTypeOutputWithContext(ctx context.Context) ClusterRoleBindingListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleBindingListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of ClusterRoleBindings
func (o ClusterRoleBindingListTypeOutput) Items() ClusterRoleBindingTypeArrayOutput {
	return o.ApplyT(func(v ClusterRoleBindingListType) []ClusterRoleBindingType { return v.Items }).(ClusterRoleBindingTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleBindingListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleBindingListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClusterRoleBindingListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
type ClusterRoleListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of ClusterRoles
	Items []ClusterRoleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClusterRoleListTypeInput is an input type that accepts ClusterRoleListTypeArgs and ClusterRoleListTypeOutput values.
// You can construct a concrete instance of `ClusterRoleListTypeInput` via:
//
//          ClusterRoleListTypeArgs{...}
type ClusterRoleListTypeInput interface {
	pulumi.Input

	ToClusterRoleListTypeOutput() ClusterRoleListTypeOutput
	ToClusterRoleListTypeOutputWithContext(context.Context) ClusterRoleListTypeOutput
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
type ClusterRoleListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of ClusterRoles
	Items ClusterRoleTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterRoleListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleListType)(nil)).Elem()
}

func (i ClusterRoleListTypeArgs) ToClusterRoleListTypeOutput() ClusterRoleListTypeOutput {
	return i.ToClusterRoleListTypeOutputWithContext(context.Background())
}

func (i ClusterRoleListTypeArgs) ToClusterRoleListTypeOutputWithContext(ctx context.Context) ClusterRoleListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleListTypeOutput)
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
type ClusterRoleListTypeOutput struct{ *pulumi.OutputState }

func (ClusterRoleListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleListType)(nil)).Elem()
}

func (o ClusterRoleListTypeOutput) ToClusterRoleListTypeOutput() ClusterRoleListTypeOutput {
	return o
}

func (o ClusterRoleListTypeOutput) ToClusterRoleListTypeOutputWithContext(ctx context.Context) ClusterRoleListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of ClusterRoles
func (o ClusterRoleListTypeOutput) Items() ClusterRoleTypeArrayOutput {
	return o.ApplyT(func(v ClusterRoleListType) []ClusterRoleType { return v.Items }).(ClusterRoleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRoleListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClusterRoleListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
	ApiGroups []string `pulumi:"apiGroups"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
	Verbs []string `pulumi:"verbs"`
}

// PolicyRuleInput is an input type that accepts PolicyRuleArgs and PolicyRuleOutput values.
// You can construct a concrete instance of `PolicyRuleInput` via:
//
//          PolicyRuleArgs{...}
type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRuleArgs struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (PolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArgs) ToPolicyRuleOutput() PolicyRuleOutput {
	return i.ToPolicyRuleOutputWithContext(context.Background())
}

func (i PolicyRuleArgs) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleOutput)
}

// PolicyRuleArrayInput is an input type that accepts PolicyRuleArray and PolicyRuleArrayOutput values.
// You can construct a concrete instance of `PolicyRuleArrayInput` via:
//
//          PolicyRuleArray{ PolicyRuleArgs{...} }
type PolicyRuleArrayInput interface {
	pulumi.Input

	ToPolicyRuleArrayOutput() PolicyRuleArrayOutput
	ToPolicyRuleArrayOutputWithContext(context.Context) PolicyRuleArrayOutput
}

type PolicyRuleArray []PolicyRuleInput

func (PolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return i.ToPolicyRuleArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArrayOutput)
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRuleOutput struct{ *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
func (o PolicyRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
func (o PolicyRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
func (o PolicyRuleOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
func (o PolicyRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
func (o PolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type PolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) Index(i pulumi.IntInput) PolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRule {
		return vs[0].([]PolicyRule)[vs[1].(int)]
	}).(PolicyRuleOutput)
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
type RoleType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this Role
	Rules []PolicyRule `pulumi:"rules"`
}

// RoleTypeInput is an input type that accepts RoleTypeArgs and RoleTypeOutput values.
// You can construct a concrete instance of `RoleTypeInput` via:
//
//          RoleTypeArgs{...}
type RoleTypeInput interface {
	pulumi.Input

	ToRoleTypeOutput() RoleTypeOutput
	ToRoleTypeOutputWithContext(context.Context) RoleTypeOutput
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
type RoleTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this Role
	Rules PolicyRuleArrayInput `pulumi:"rules"`
}

func (RoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleType)(nil)).Elem()
}

func (i RoleTypeArgs) ToRoleTypeOutput() RoleTypeOutput {
	return i.ToRoleTypeOutputWithContext(context.Background())
}

func (i RoleTypeArgs) ToRoleTypeOutputWithContext(ctx context.Context) RoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTypeOutput)
}

// RoleTypeArrayInput is an input type that accepts RoleTypeArray and RoleTypeArrayOutput values.
// You can construct a concrete instance of `RoleTypeArrayInput` via:
//
//          RoleTypeArray{ RoleTypeArgs{...} }
type RoleTypeArrayInput interface {
	pulumi.Input

	ToRoleTypeArrayOutput() RoleTypeArrayOutput
	ToRoleTypeArrayOutputWithContext(context.Context) RoleTypeArrayOutput
}

type RoleTypeArray []RoleTypeInput

func (RoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleType)(nil)).Elem()
}

func (i RoleTypeArray) ToRoleTypeArrayOutput() RoleTypeArrayOutput {
	return i.ToRoleTypeArrayOutputWithContext(context.Background())
}

func (i RoleTypeArray) ToRoleTypeArrayOutputWithContext(ctx context.Context) RoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTypeArrayOutput)
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
type RoleTypeOutput struct{ *pulumi.OutputState }

func (RoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleType)(nil)).Elem()
}

func (o RoleTypeOutput) ToRoleTypeOutput() RoleTypeOutput {
	return o
}

func (o RoleTypeOutput) ToRoleTypeOutputWithContext(ctx context.Context) RoleTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RoleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Rules holds all the PolicyRules for this Role
func (o RoleTypeOutput) Rules() PolicyRuleArrayOutput {
	return o.ApplyT(func(v RoleType) []PolicyRule { return v.Rules }).(PolicyRuleArrayOutput)
}

type RoleTypeArrayOutput struct{ *pulumi.OutputState }

func (RoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleType)(nil)).Elem()
}

func (o RoleTypeArrayOutput) ToRoleTypeArrayOutput() RoleTypeArrayOutput {
	return o
}

func (o RoleTypeArrayOutput) ToRoleTypeArrayOutputWithContext(ctx context.Context) RoleTypeArrayOutput {
	return o
}

func (o RoleTypeArrayOutput) Index(i pulumi.IntInput) RoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleType {
		return vs[0].([]RoleType)[vs[1].(int)]
	}).(RoleTypeOutput)
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
type RoleBindingType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRef `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []Subject `pulumi:"subjects"`
}

// RoleBindingTypeInput is an input type that accepts RoleBindingTypeArgs and RoleBindingTypeOutput values.
// You can construct a concrete instance of `RoleBindingTypeInput` via:
//
//          RoleBindingTypeArgs{...}
type RoleBindingTypeInput interface {
	pulumi.Input

	ToRoleBindingTypeOutput() RoleBindingTypeOutput
	ToRoleBindingTypeOutputWithContext(context.Context) RoleBindingTypeOutput
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
type RoleBindingTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRefInput `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (RoleBindingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingType)(nil)).Elem()
}

func (i RoleBindingTypeArgs) ToRoleBindingTypeOutput() RoleBindingTypeOutput {
	return i.ToRoleBindingTypeOutputWithContext(context.Background())
}

func (i RoleBindingTypeArgs) ToRoleBindingTypeOutputWithContext(ctx context.Context) RoleBindingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingTypeOutput)
}

// RoleBindingTypeArrayInput is an input type that accepts RoleBindingTypeArray and RoleBindingTypeArrayOutput values.
// You can construct a concrete instance of `RoleBindingTypeArrayInput` via:
//
//          RoleBindingTypeArray{ RoleBindingTypeArgs{...} }
type RoleBindingTypeArrayInput interface {
	pulumi.Input

	ToRoleBindingTypeArrayOutput() RoleBindingTypeArrayOutput
	ToRoleBindingTypeArrayOutputWithContext(context.Context) RoleBindingTypeArrayOutput
}

type RoleBindingTypeArray []RoleBindingTypeInput

func (RoleBindingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingType)(nil)).Elem()
}

func (i RoleBindingTypeArray) ToRoleBindingTypeArrayOutput() RoleBindingTypeArrayOutput {
	return i.ToRoleBindingTypeArrayOutputWithContext(context.Background())
}

func (i RoleBindingTypeArray) ToRoleBindingTypeArrayOutputWithContext(ctx context.Context) RoleBindingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingTypeArrayOutput)
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
type RoleBindingTypeOutput struct{ *pulumi.OutputState }

func (RoleBindingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingType)(nil)).Elem()
}

func (o RoleBindingTypeOutput) ToRoleBindingTypeOutput() RoleBindingTypeOutput {
	return o
}

func (o RoleBindingTypeOutput) ToRoleBindingTypeOutputWithContext(ctx context.Context) RoleBindingTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleBindingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleBindingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleBindingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RoleBindingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
func (o RoleBindingTypeOutput) RoleRef() RoleRefOutput {
	return o.ApplyT(func(v RoleBindingType) RoleRef { return v.RoleRef }).(RoleRefOutput)
}

// Subjects holds references to the objects the role applies to.
func (o RoleBindingTypeOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func(v RoleBindingType) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

type RoleBindingTypeArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingType)(nil)).Elem()
}

func (o RoleBindingTypeArrayOutput) ToRoleBindingTypeArrayOutput() RoleBindingTypeArrayOutput {
	return o
}

func (o RoleBindingTypeArrayOutput) ToRoleBindingTypeArrayOutputWithContext(ctx context.Context) RoleBindingTypeArrayOutput {
	return o
}

func (o RoleBindingTypeArrayOutput) Index(i pulumi.IntInput) RoleBindingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleBindingType {
		return vs[0].([]RoleBindingType)[vs[1].(int)]
	}).(RoleBindingTypeOutput)
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
type RoleBindingListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of RoleBindings
	Items []RoleBindingType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// RoleBindingListTypeInput is an input type that accepts RoleBindingListTypeArgs and RoleBindingListTypeOutput values.
// You can construct a concrete instance of `RoleBindingListTypeInput` via:
//
//          RoleBindingListTypeArgs{...}
type RoleBindingListTypeInput interface {
	pulumi.Input

	ToRoleBindingListTypeOutput() RoleBindingListTypeOutput
	ToRoleBindingListTypeOutputWithContext(context.Context) RoleBindingListTypeOutput
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
type RoleBindingListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of RoleBindings
	Items RoleBindingTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (RoleBindingListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingListType)(nil)).Elem()
}

func (i RoleBindingListTypeArgs) ToRoleBindingListTypeOutput() RoleBindingListTypeOutput {
	return i.ToRoleBindingListTypeOutputWithContext(context.Background())
}

func (i RoleBindingListTypeArgs) ToRoleBindingListTypeOutputWithContext(ctx context.Context) RoleBindingListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingListTypeOutput)
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
type RoleBindingListTypeOutput struct{ *pulumi.OutputState }

func (RoleBindingListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingListType)(nil)).Elem()
}

func (o RoleBindingListTypeOutput) ToRoleBindingListTypeOutput() RoleBindingListTypeOutput {
	return o
}

func (o RoleBindingListTypeOutput) ToRoleBindingListTypeOutputWithContext(ctx context.Context) RoleBindingListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleBindingListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of RoleBindings
func (o RoleBindingListTypeOutput) Items() RoleBindingTypeArrayOutput {
	return o.ApplyT(func(v RoleBindingListType) []RoleBindingType { return v.Items }).(RoleBindingTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleBindingListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleBindingListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v RoleBindingListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
type RoleListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of Roles
	Items []RoleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// RoleListTypeInput is an input type that accepts RoleListTypeArgs and RoleListTypeOutput values.
// You can construct a concrete instance of `RoleListTypeInput` via:
//
//          RoleListTypeArgs{...}
type RoleListTypeInput interface {
	pulumi.Input

	ToRoleListTypeOutput() RoleListTypeOutput
	ToRoleListTypeOutputWithContext(context.Context) RoleListTypeOutput
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
type RoleListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of Roles
	Items RoleTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (RoleListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleListType)(nil)).Elem()
}

func (i RoleListTypeArgs) ToRoleListTypeOutput() RoleListTypeOutput {
	return i.ToRoleListTypeOutputWithContext(context.Background())
}

func (i RoleListTypeArgs) ToRoleListTypeOutputWithContext(ctx context.Context) RoleListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleListTypeOutput)
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
type RoleListTypeOutput struct{ *pulumi.OutputState }

func (RoleListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleListType)(nil)).Elem()
}

func (o RoleListTypeOutput) ToRoleListTypeOutput() RoleListTypeOutput {
	return o
}

func (o RoleListTypeOutput) ToRoleListTypeOutputWithContext(ctx context.Context) RoleListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of Roles
func (o RoleListTypeOutput) Items() RoleTypeArrayOutput {
	return o.ApplyT(func(v RoleListType) []RoleType { return v.Items }).(RoleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v RoleListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// RoleRef contains information that points to the role being used
type RoleRef struct {
	// APIGroup is the group for the resource being referenced
	ApiGroup string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// RoleRefInput is an input type that accepts RoleRefArgs and RoleRefOutput values.
// You can construct a concrete instance of `RoleRefInput` via:
//
//          RoleRefArgs{...}
type RoleRefInput interface {
	pulumi.Input

	ToRoleRefOutput() RoleRefOutput
	ToRoleRefOutputWithContext(context.Context) RoleRefOutput
}

// RoleRef contains information that points to the role being used
type RoleRefArgs struct {
	// APIGroup is the group for the resource being referenced
	ApiGroup pulumi.StringInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (RoleRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleRef)(nil)).Elem()
}

func (i RoleRefArgs) ToRoleRefOutput() RoleRefOutput {
	return i.ToRoleRefOutputWithContext(context.Background())
}

func (i RoleRefArgs) ToRoleRefOutputWithContext(ctx context.Context) RoleRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefOutput)
}

func (i RoleRefArgs) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return i.ToRoleRefPtrOutputWithContext(context.Background())
}

func (i RoleRefArgs) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefOutput).ToRoleRefPtrOutputWithContext(ctx)
}

// RoleRefPtrInput is an input type that accepts RoleRefArgs, RoleRefPtr and RoleRefPtrOutput values.
// You can construct a concrete instance of `RoleRefPtrInput` via:
//
//          RoleRefArgs{...}
//
//  or:
//
//          nil
type RoleRefPtrInput interface {
	pulumi.Input

	ToRoleRefPtrOutput() RoleRefPtrOutput
	ToRoleRefPtrOutputWithContext(context.Context) RoleRefPtrOutput
}

type roleRefPtrType RoleRefArgs

func RoleRefPtr(v *RoleRefArgs) RoleRefPtrInput {
	return (*roleRefPtrType)(v)
}

func (*roleRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleRef)(nil)).Elem()
}

func (i *roleRefPtrType) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return i.ToRoleRefPtrOutputWithContext(context.Background())
}

func (i *roleRefPtrType) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefPtrOutput)
}

// RoleRef contains information that points to the role being used
type RoleRefOutput struct{ *pulumi.OutputState }

func (RoleRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleRef)(nil)).Elem()
}

func (o RoleRefOutput) ToRoleRefOutput() RoleRefOutput {
	return o
}

func (o RoleRefOutput) ToRoleRefOutputWithContext(ctx context.Context) RoleRefOutput {
	return o
}

func (o RoleRefOutput) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return o.ToRoleRefPtrOutputWithContext(context.Background())
}

func (o RoleRefOutput) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return o.ApplyT(func(v RoleRef) *RoleRef {
		return &v
	}).(RoleRefPtrOutput)
}

// APIGroup is the group for the resource being referenced
func (o RoleRefOutput) ApiGroup() pulumi.StringOutput {
	return o.ApplyT(func(v RoleRef) string { return v.ApiGroup }).(pulumi.StringOutput)
}

// Kind is the type of resource being referenced
func (o RoleRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RoleRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o RoleRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RoleRef) string { return v.Name }).(pulumi.StringOutput)
}

type RoleRefPtrOutput struct{ *pulumi.OutputState }

func (RoleRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleRef)(nil)).Elem()
}

func (o RoleRefPtrOutput) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return o
}

func (o RoleRefPtrOutput) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return o
}

func (o RoleRefPtrOutput) Elem() RoleRefOutput {
	return o.ApplyT(func(v *RoleRef) RoleRef { return *v }).(RoleRefOutput)
}

// APIGroup is the group for the resource being referenced
func (o RoleRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleRef) *string {
		if v == nil {
			return nil
		}
		return &v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RoleRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RoleRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type Subject struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind string `pulumi:"kind"`
	// Name of the object being referenced.
	Name string `pulumi:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace *string `pulumi:"namespace"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//          SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type SubjectArgs struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the object being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
//          SubjectArray{ SubjectArgs{...} }
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
func (o SubjectOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
func (o SubjectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v Subject) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the object being referenced.
func (o SubjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Subject) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
func (o SubjectOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

func init() {
	pulumi.RegisterOutputType(AggregationRuleOutput{})
	pulumi.RegisterOutputType(AggregationRulePtrOutput{})
	pulumi.RegisterOutputType(ClusterRoleTypeOutput{})
	pulumi.RegisterOutputType(ClusterRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingTypeOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingListTypeOutput{})
	pulumi.RegisterOutputType(ClusterRoleListTypeOutput{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(RoleTypeOutput{})
	pulumi.RegisterOutputType(RoleTypeArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingTypeOutput{})
	pulumi.RegisterOutputType(RoleBindingTypeArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingListTypeOutput{})
	pulumi.RegisterOutputType(RoleListTypeOutput{})
	pulumi.RegisterOutputType(RoleRefOutput{})
	pulumi.RegisterOutputType(RoleRefPtrOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
}
