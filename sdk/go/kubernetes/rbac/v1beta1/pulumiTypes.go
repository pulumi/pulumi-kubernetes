// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []metav1.LabelSelector `pulumi:"clusterRoleSelectors"`
}

type AggregationRuleInput interface {
	pulumi.Input

	ToAggregationRuleOutput() AggregationRuleOutput
	ToAggregationRuleOutputWithContext(context.Context) AggregationRuleOutput
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRuleArgs struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors metav1.LabelSelectorArrayInput `pulumi:"clusterRoleSelectors"`
}

func (AggregationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationRule)(nil)).Elem()
}

func (i AggregationRuleArgs) ToAggregationRuleOutput() AggregationRuleOutput {
	return i.ToAggregationRuleOutputWithContext(context.Background())
}

func (i AggregationRuleArgs) ToAggregationRuleOutputWithContext(ctx context.Context) AggregationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRuleOutput)
}

func (i AggregationRuleArgs) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return i.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (i AggregationRuleArgs) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRuleOutput).ToAggregationRulePtrOutputWithContext(ctx)
}

type AggregationRulePtrInput interface {
	pulumi.Input

	ToAggregationRulePtrOutput() AggregationRulePtrOutput
	ToAggregationRulePtrOutputWithContext(context.Context) AggregationRulePtrOutput
}

type aggregationRulePtrType AggregationRuleArgs

func AggregationRulePtr(v *AggregationRuleArgs) AggregationRulePtrInput {	return (*aggregationRulePtrType)(v)
}

func (*aggregationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationRule)(nil)).Elem()
}

func (i *aggregationRulePtrType) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return i.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (i *aggregationRulePtrType) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationRulePtrOutput)
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type AggregationRuleOutput struct { *pulumi.OutputState }

func (AggregationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationRule)(nil)).Elem()
}

func (o AggregationRuleOutput) ToAggregationRuleOutput() AggregationRuleOutput {
	return o
}

func (o AggregationRuleOutput) ToAggregationRuleOutputWithContext(ctx context.Context) AggregationRuleOutput {
	return o
}

func (o AggregationRuleOutput) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return o.ToAggregationRulePtrOutputWithContext(context.Background())
}

func (o AggregationRuleOutput) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return o.ApplyT(func(v AggregationRule) *AggregationRule {
		return &v
	}).(AggregationRulePtrOutput)
}
// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
func (o AggregationRuleOutput) ClusterRoleSelectors() metav1.LabelSelectorArrayOutput {
	return o.ApplyT(func (v AggregationRule) []metav1.LabelSelector { return v.ClusterRoleSelectors }).(metav1.LabelSelectorArrayOutput)
}

type AggregationRulePtrOutput struct { *pulumi.OutputState }

func (AggregationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationRule)(nil)).Elem()
}

func (o AggregationRulePtrOutput) ToAggregationRulePtrOutput() AggregationRulePtrOutput {
	return o
}

func (o AggregationRulePtrOutput) ToAggregationRulePtrOutputWithContext(ctx context.Context) AggregationRulePtrOutput {
	return o
}

func (o AggregationRulePtrOutput) Elem() AggregationRuleOutput {
	return o.ApplyT(func (v *AggregationRule) AggregationRule { return *v }).(AggregationRuleOutput)
}

// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
func (o AggregationRulePtrOutput) ClusterRoleSelectors() metav1.LabelSelectorArrayOutput {
	return o.ApplyT(func (v AggregationRule) []metav1.LabelSelector { return v.ClusterRoleSelectors }).(metav1.LabelSelectorArrayOutput)
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20.
type ClusterRole struct {
	// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
	AggregationRule *AggregationRule `pulumi:"aggregationRule"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules []PolicyRule `pulumi:"rules"`
}

type ClusterRoleInput interface {
	pulumi.Input

	ToClusterRoleOutput() ClusterRoleOutput
	ToClusterRoleOutputWithContext(context.Context) ClusterRoleOutput
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20.
type ClusterRoleArgs struct {
	// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
	AggregationRule AggregationRulePtrInput `pulumi:"aggregationRule"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules PolicyRuleArrayInput `pulumi:"rules"`
}

func (ClusterRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRole)(nil)).Elem()
}

func (i ClusterRoleArgs) ToClusterRoleOutput() ClusterRoleOutput {
	return i.ToClusterRoleOutputWithContext(context.Background())
}

func (i ClusterRoleArgs) ToClusterRoleOutputWithContext(ctx context.Context) ClusterRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleOutput)
}

type ClusterRoleArrayInput interface {
	pulumi.Input

	ToClusterRoleArrayOutput() ClusterRoleArrayOutput
	ToClusterRoleArrayOutputWithContext(context.Context) ClusterRoleArrayOutput
}

type ClusterRoleArray []ClusterRoleInput

func (ClusterRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRole)(nil)).Elem()
}

func (i ClusterRoleArray) ToClusterRoleArrayOutput() ClusterRoleArrayOutput {
	return i.ToClusterRoleArrayOutputWithContext(context.Background())
}

func (i ClusterRoleArray) ToClusterRoleArrayOutputWithContext(ctx context.Context) ClusterRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleArrayOutput)
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20.
type ClusterRoleOutput struct { *pulumi.OutputState }

func (ClusterRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRole)(nil)).Elem()
}

func (o ClusterRoleOutput) ToClusterRoleOutput() ClusterRoleOutput {
	return o
}

func (o ClusterRoleOutput) ToClusterRoleOutputWithContext(ctx context.Context) ClusterRoleOutput {
	return o
}

// AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
func (o ClusterRoleOutput) AggregationRule() AggregationRulePtrOutput {
	return o.ApplyT(func (v ClusterRole) *AggregationRule { return v.AggregationRule }).(AggregationRulePtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRole) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRole) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v ClusterRole) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Rules holds all the PolicyRules for this ClusterRole
func (o ClusterRoleOutput) Rules() PolicyRuleArrayOutput {
	return o.ApplyT(func (v ClusterRole) []PolicyRule { return v.Rules }).(PolicyRuleArrayOutput)
}

type ClusterRoleArrayOutput struct { *pulumi.OutputState }

func (ClusterRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRole)(nil)).Elem()
}

func (o ClusterRoleArrayOutput) ToClusterRoleArrayOutput() ClusterRoleArrayOutput {
	return o
}

func (o ClusterRoleArrayOutput) ToClusterRoleArrayOutputWithContext(ctx context.Context) ClusterRoleArrayOutput {
	return o
}

func (o ClusterRoleArrayOutput) Index(i pulumi.IntInput) ClusterRoleOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ClusterRole {
		return vs[0].([]ClusterRole)[vs[1].(int)]
	}).(ClusterRoleOutput)
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20.
type ClusterRoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef *RoleRef `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []Subject `pulumi:"subjects"`
}

type ClusterRoleBindingInput interface {
	pulumi.Input

	ToClusterRoleBindingOutput() ClusterRoleBindingOutput
	ToClusterRoleBindingOutputWithContext(context.Context) ClusterRoleBindingOutput
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20.
type ClusterRoleBindingArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRefPtrInput `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (ClusterRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBinding)(nil)).Elem()
}

func (i ClusterRoleBindingArgs) ToClusterRoleBindingOutput() ClusterRoleBindingOutput {
	return i.ToClusterRoleBindingOutputWithContext(context.Background())
}

func (i ClusterRoleBindingArgs) ToClusterRoleBindingOutputWithContext(ctx context.Context) ClusterRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingOutput)
}

type ClusterRoleBindingArrayInput interface {
	pulumi.Input

	ToClusterRoleBindingArrayOutput() ClusterRoleBindingArrayOutput
	ToClusterRoleBindingArrayOutputWithContext(context.Context) ClusterRoleBindingArrayOutput
}

type ClusterRoleBindingArray []ClusterRoleBindingInput

func (ClusterRoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleBinding)(nil)).Elem()
}

func (i ClusterRoleBindingArray) ToClusterRoleBindingArrayOutput() ClusterRoleBindingArrayOutput {
	return i.ToClusterRoleBindingArrayOutputWithContext(context.Background())
}

func (i ClusterRoleBindingArray) ToClusterRoleBindingArrayOutputWithContext(ctx context.Context) ClusterRoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingArrayOutput)
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20.
type ClusterRoleBindingOutput struct { *pulumi.OutputState }

func (ClusterRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBinding)(nil)).Elem()
}

func (o ClusterRoleBindingOutput) ToClusterRoleBindingOutput() ClusterRoleBindingOutput {
	return o
}

func (o ClusterRoleBindingOutput) ToClusterRoleBindingOutputWithContext(ctx context.Context) ClusterRoleBindingOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleBindingOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleBinding) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleBindingOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleBinding) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleBindingOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v ClusterRoleBinding) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
func (o ClusterRoleBindingOutput) RoleRef() RoleRefPtrOutput {
	return o.ApplyT(func (v ClusterRoleBinding) *RoleRef { return v.RoleRef }).(RoleRefPtrOutput)
}

// Subjects holds references to the objects the role applies to.
func (o ClusterRoleBindingOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func (v ClusterRoleBinding) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

type ClusterRoleBindingArrayOutput struct { *pulumi.OutputState }

func (ClusterRoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRoleBinding)(nil)).Elem()
}

func (o ClusterRoleBindingArrayOutput) ToClusterRoleBindingArrayOutput() ClusterRoleBindingArrayOutput {
	return o
}

func (o ClusterRoleBindingArrayOutput) ToClusterRoleBindingArrayOutputWithContext(ctx context.Context) ClusterRoleBindingArrayOutput {
	return o
}

func (o ClusterRoleBindingArrayOutput) Index(i pulumi.IntInput) ClusterRoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ClusterRoleBinding {
		return vs[0].([]ClusterRoleBinding)[vs[1].(int)]
	}).(ClusterRoleBindingOutput)
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.20.
type ClusterRoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of ClusterRoleBindings
	Items []ClusterRoleBinding `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type ClusterRoleBindingListInput interface {
	pulumi.Input

	ToClusterRoleBindingListOutput() ClusterRoleBindingListOutput
	ToClusterRoleBindingListOutputWithContext(context.Context) ClusterRoleBindingListOutput
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.20.
type ClusterRoleBindingListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of ClusterRoleBindings
	Items ClusterRoleBindingArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterRoleBindingListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingList)(nil)).Elem()
}

func (i ClusterRoleBindingListArgs) ToClusterRoleBindingListOutput() ClusterRoleBindingListOutput {
	return i.ToClusterRoleBindingListOutputWithContext(context.Background())
}

func (i ClusterRoleBindingListArgs) ToClusterRoleBindingListOutputWithContext(ctx context.Context) ClusterRoleBindingListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleBindingListOutput)
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.20.
type ClusterRoleBindingListOutput struct { *pulumi.OutputState }

func (ClusterRoleBindingListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleBindingList)(nil)).Elem()
}

func (o ClusterRoleBindingListOutput) ToClusterRoleBindingListOutput() ClusterRoleBindingListOutput {
	return o
}

func (o ClusterRoleBindingListOutput) ToClusterRoleBindingListOutputWithContext(ctx context.Context) ClusterRoleBindingListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleBindingListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleBindingList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of ClusterRoleBindings
func (o ClusterRoleBindingListOutput) Items() ClusterRoleBindingArrayOutput {
	return o.ApplyT(func (v ClusterRoleBindingList) []ClusterRoleBinding { return v.Items }).(ClusterRoleBindingArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleBindingListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleBindingList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleBindingListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v ClusterRoleBindingList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20.
type ClusterRoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of ClusterRoles
	Items []ClusterRole `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type ClusterRoleListInput interface {
	pulumi.Input

	ToClusterRoleListOutput() ClusterRoleListOutput
	ToClusterRoleListOutputWithContext(context.Context) ClusterRoleListOutput
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20.
type ClusterRoleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of ClusterRoles
	Items ClusterRoleArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterRoleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleList)(nil)).Elem()
}

func (i ClusterRoleListArgs) ToClusterRoleListOutput() ClusterRoleListOutput {
	return i.ToClusterRoleListOutputWithContext(context.Background())
}

func (i ClusterRoleListArgs) ToClusterRoleListOutputWithContext(ctx context.Context) ClusterRoleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleListOutput)
}

// ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20.
type ClusterRoleListOutput struct { *pulumi.OutputState }

func (ClusterRoleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRoleList)(nil)).Elem()
}

func (o ClusterRoleListOutput) ToClusterRoleListOutput() ClusterRoleListOutput {
	return o
}

func (o ClusterRoleListOutput) ToClusterRoleListOutputWithContext(ctx context.Context) ClusterRoleListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterRoleListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of ClusterRoles
func (o ClusterRoleListOutput) Items() ClusterRoleArrayOutput {
	return o.ApplyT(func (v ClusterRoleList) []ClusterRole { return v.Items }).(ClusterRoleArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterRoleListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterRoleList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o ClusterRoleListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v ClusterRoleList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
	ApiGroups []string `pulumi:"apiGroups"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []string `pulumi:"resources"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
	Verbs []string `pulumi:"verbs"`
}

type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRuleArgs struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (PolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArgs) ToPolicyRuleOutput() PolicyRuleOutput {
	return i.ToPolicyRuleOutputWithContext(context.Background())
}

func (i PolicyRuleArgs) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleOutput)
}

type PolicyRuleArrayInput interface {
	pulumi.Input

	ToPolicyRuleArrayOutput() PolicyRuleArrayOutput
	ToPolicyRuleArrayOutputWithContext(context.Context) PolicyRuleArrayOutput
}

type PolicyRuleArray []PolicyRuleInput

func (PolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return i.ToPolicyRuleArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArrayOutput)
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type PolicyRuleOutput struct { *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
func (o PolicyRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v PolicyRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
func (o PolicyRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v PolicyRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
func (o PolicyRuleOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func (v PolicyRule) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
func (o PolicyRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func (v PolicyRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
func (o PolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v PolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type PolicyRuleArrayOutput struct { *pulumi.OutputState }

func (PolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) Index(i pulumi.IntInput) PolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) PolicyRule {
		return vs[0].([]PolicyRule)[vs[1].(int)]
	}).(PolicyRuleOutput)
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20.
type Role struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this Role
	Rules []PolicyRule `pulumi:"rules"`
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(context.Context) RoleOutput
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20.
type RoleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Rules holds all the PolicyRules for this Role
	Rules PolicyRuleArrayInput `pulumi:"rules"`
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i RoleArgs) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i RoleArgs) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20.
type RoleOutput struct { *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Role) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Role) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v Role) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Rules holds all the PolicyRules for this Role
func (o RoleOutput) Rules() PolicyRuleArrayOutput {
	return o.ApplyT(func (v Role) []PolicyRule { return v.Rules }).(PolicyRuleArrayOutput)
}

type RoleArrayOutput struct { *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Role {
		return vs[0].([]Role)[vs[1].(int)]
	}).(RoleOutput)
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20.
type RoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef *RoleRef `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []Subject `pulumi:"subjects"`
}

type RoleBindingInput interface {
	pulumi.Input

	ToRoleBindingOutput() RoleBindingOutput
	ToRoleBindingOutputWithContext(context.Context) RoleBindingOutput
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20.
type RoleBindingArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	RoleRef RoleRefPtrInput `pulumi:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (RoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBinding)(nil)).Elem()
}

func (i RoleBindingArgs) ToRoleBindingOutput() RoleBindingOutput {
	return i.ToRoleBindingOutputWithContext(context.Background())
}

func (i RoleBindingArgs) ToRoleBindingOutputWithContext(ctx context.Context) RoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingOutput)
}

type RoleBindingArrayInput interface {
	pulumi.Input

	ToRoleBindingArrayOutput() RoleBindingArrayOutput
	ToRoleBindingArrayOutputWithContext(context.Context) RoleBindingArrayOutput
}

type RoleBindingArray []RoleBindingInput

func (RoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBinding)(nil)).Elem()
}

func (i RoleBindingArray) ToRoleBindingArrayOutput() RoleBindingArrayOutput {
	return i.ToRoleBindingArrayOutputWithContext(context.Background())
}

func (i RoleBindingArray) ToRoleBindingArrayOutputWithContext(ctx context.Context) RoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingArrayOutput)
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20.
type RoleBindingOutput struct { *pulumi.OutputState }

func (RoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBinding)(nil)).Elem()
}

func (o RoleBindingOutput) ToRoleBindingOutput() RoleBindingOutput {
	return o
}

func (o RoleBindingOutput) ToRoleBindingOutputWithContext(ctx context.Context) RoleBindingOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleBindingOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleBinding) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleBindingOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleBinding) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleBindingOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v RoleBinding) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
func (o RoleBindingOutput) RoleRef() RoleRefPtrOutput {
	return o.ApplyT(func (v RoleBinding) *RoleRef { return v.RoleRef }).(RoleRefPtrOutput)
}

// Subjects holds references to the objects the role applies to.
func (o RoleBindingOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func (v RoleBinding) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

type RoleBindingArrayOutput struct { *pulumi.OutputState }

func (RoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBinding)(nil)).Elem()
}

func (o RoleBindingArrayOutput) ToRoleBindingArrayOutput() RoleBindingArrayOutput {
	return o
}

func (o RoleBindingArrayOutput) ToRoleBindingArrayOutputWithContext(ctx context.Context) RoleBindingArrayOutput {
	return o
}

func (o RoleBindingArrayOutput) Index(i pulumi.IntInput) RoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RoleBinding {
		return vs[0].([]RoleBinding)[vs[1].(int)]
	}).(RoleBindingOutput)
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20.
type RoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of RoleBindings
	Items []RoleBinding `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type RoleBindingListInput interface {
	pulumi.Input

	ToRoleBindingListOutput() RoleBindingListOutput
	ToRoleBindingListOutputWithContext(context.Context) RoleBindingListOutput
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20.
type RoleBindingListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of RoleBindings
	Items RoleBindingArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (RoleBindingListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingList)(nil)).Elem()
}

func (i RoleBindingListArgs) ToRoleBindingListOutput() RoleBindingListOutput {
	return i.ToRoleBindingListOutputWithContext(context.Background())
}

func (i RoleBindingListArgs) ToRoleBindingListOutputWithContext(ctx context.Context) RoleBindingListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingListOutput)
}

// RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20.
type RoleBindingListOutput struct { *pulumi.OutputState }

func (RoleBindingListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingList)(nil)).Elem()
}

func (o RoleBindingListOutput) ToRoleBindingListOutput() RoleBindingListOutput {
	return o
}

func (o RoleBindingListOutput) ToRoleBindingListOutputWithContext(ctx context.Context) RoleBindingListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleBindingListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleBindingList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of RoleBindings
func (o RoleBindingListOutput) Items() RoleBindingArrayOutput {
	return o.ApplyT(func (v RoleBindingList) []RoleBinding { return v.Items }).(RoleBindingArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleBindingListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleBindingList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleBindingListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v RoleBindingList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20.
type RoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of Roles
	Items []Role `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type RoleListInput interface {
	pulumi.Input

	ToRoleListOutput() RoleListOutput
	ToRoleListOutputWithContext(context.Context) RoleListOutput
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20.
type RoleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of Roles
	Items RoleArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (RoleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleList)(nil)).Elem()
}

func (i RoleListArgs) ToRoleListOutput() RoleListOutput {
	return i.ToRoleListOutputWithContext(context.Background())
}

func (i RoleListArgs) ToRoleListOutputWithContext(ctx context.Context) RoleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleListOutput)
}

// RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20.
type RoleListOutput struct { *pulumi.OutputState }

func (RoleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleList)(nil)).Elem()
}

func (o RoleListOutput) ToRoleListOutput() RoleListOutput {
	return o
}

func (o RoleListOutput) ToRoleListOutputWithContext(ctx context.Context) RoleListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RoleListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of Roles
func (o RoleListOutput) Items() RoleArrayOutput {
	return o.ApplyT(func (v RoleList) []Role { return v.Items }).(RoleArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RoleListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o RoleListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v RoleList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// RoleRef contains information that points to the role being used
type RoleRef struct {
	// APIGroup is the group for the resource being referenced
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

type RoleRefInput interface {
	pulumi.Input

	ToRoleRefOutput() RoleRefOutput
	ToRoleRefOutputWithContext(context.Context) RoleRefOutput
}

// RoleRef contains information that points to the role being used
type RoleRefArgs struct {
	// APIGroup is the group for the resource being referenced
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RoleRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleRef)(nil)).Elem()
}

func (i RoleRefArgs) ToRoleRefOutput() RoleRefOutput {
	return i.ToRoleRefOutputWithContext(context.Background())
}

func (i RoleRefArgs) ToRoleRefOutputWithContext(ctx context.Context) RoleRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefOutput)
}

func (i RoleRefArgs) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return i.ToRoleRefPtrOutputWithContext(context.Background())
}

func (i RoleRefArgs) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefOutput).ToRoleRefPtrOutputWithContext(ctx)
}

type RoleRefPtrInput interface {
	pulumi.Input

	ToRoleRefPtrOutput() RoleRefPtrOutput
	ToRoleRefPtrOutputWithContext(context.Context) RoleRefPtrOutput
}

type roleRefPtrType RoleRefArgs

func RoleRefPtr(v *RoleRefArgs) RoleRefPtrInput {	return (*roleRefPtrType)(v)
}

func (*roleRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleRef)(nil)).Elem()
}

func (i *roleRefPtrType) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return i.ToRoleRefPtrOutputWithContext(context.Background())
}

func (i *roleRefPtrType) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleRefPtrOutput)
}

// RoleRef contains information that points to the role being used
type RoleRefOutput struct { *pulumi.OutputState }

func (RoleRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleRef)(nil)).Elem()
}

func (o RoleRefOutput) ToRoleRefOutput() RoleRefOutput {
	return o
}

func (o RoleRefOutput) ToRoleRefOutputWithContext(ctx context.Context) RoleRefOutput {
	return o
}

func (o RoleRefOutput) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return o.ToRoleRefPtrOutputWithContext(context.Background())
}

func (o RoleRefOutput) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return o.ApplyT(func(v RoleRef) *RoleRef {
		return &v
	}).(RoleRefPtrOutput)
}
// APIGroup is the group for the resource being referenced
func (o RoleRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RoleRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RoleRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RoleRefPtrOutput struct { *pulumi.OutputState }

func (RoleRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleRef)(nil)).Elem()
}

func (o RoleRefPtrOutput) ToRoleRefPtrOutput() RoleRefPtrOutput {
	return o
}

func (o RoleRefPtrOutput) ToRoleRefPtrOutputWithContext(ctx context.Context) RoleRefPtrOutput {
	return o
}

func (o RoleRefPtrOutput) Elem() RoleRefOutput {
	return o.ApplyT(func (v *RoleRef) RoleRef { return *v }).(RoleRefOutput)
}

// APIGroup is the group for the resource being referenced
func (o RoleRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RoleRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RoleRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RoleRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type Subject struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind *string `pulumi:"kind"`
	// Name of the object being referenced.
	Name *string `pulumi:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace *string `pulumi:"namespace"`
}

type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type SubjectArgs struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the object being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type SubjectOutput struct { *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
func (o SubjectOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Subject) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
func (o SubjectOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Subject) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the object being referenced.
func (o SubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Subject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
func (o SubjectOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Subject) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct { *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

func init() {
	pulumi.RegisterOutputType(AggregationRuleOutput{})
	pulumi.RegisterOutputType(AggregationRulePtrOutput{})
	pulumi.RegisterOutputType(ClusterRoleOutput{})
	pulumi.RegisterOutputType(ClusterRoleArrayOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingArrayOutput{})
	pulumi.RegisterOutputType(ClusterRoleBindingListOutput{})
	pulumi.RegisterOutputType(ClusterRoleListOutput{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingOutput{})
	pulumi.RegisterOutputType(RoleBindingArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingListOutput{})
	pulumi.RegisterOutputType(RoleListOutput{})
	pulumi.RegisterOutputType(RoleRefOutput{})
	pulumi.RegisterOutputType(RoleRefPtrOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
}
