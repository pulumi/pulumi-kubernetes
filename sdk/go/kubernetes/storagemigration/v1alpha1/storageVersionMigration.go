// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigration struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Specification of the migration.
	Spec StorageVersionMigrationSpecOutput `pulumi:"spec"`
	// Status of the migration.
	Status StorageVersionMigrationStatusPtrOutput `pulumi:"status"`
}

// NewStorageVersionMigration registers a new resource with the given unique name, arguments, and options.
func NewStorageVersionMigration(ctx *pulumi.Context,
	name string, args *StorageVersionMigrationArgs, opts ...pulumi.ResourceOption) (*StorageVersionMigration, error) {
	if args == nil {
		args = &StorageVersionMigrationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("storagemigration.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("StorageVersionMigration")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StorageVersionMigration
	err := ctx.RegisterResource("kubernetes:storagemigration.k8s.io/v1alpha1:StorageVersionMigration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageVersionMigration gets an existing StorageVersionMigration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageVersionMigration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageVersionMigrationState, opts ...pulumi.ResourceOption) (*StorageVersionMigration, error) {
	var resource StorageVersionMigration
	err := ctx.ReadResource("kubernetes:storagemigration.k8s.io/v1alpha1:StorageVersionMigration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageVersionMigration resources.
type storageVersionMigrationState struct {
}

type StorageVersionMigrationState struct {
}

func (StorageVersionMigrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageVersionMigrationState)(nil)).Elem()
}

type storageVersionMigrationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the migration.
	Spec *StorageVersionMigrationSpec `pulumi:"spec"`
}

// The set of arguments for constructing a StorageVersionMigration resource.
type StorageVersionMigrationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// Specification of the migration.
	Spec StorageVersionMigrationSpecPtrInput
}

func (StorageVersionMigrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageVersionMigrationArgs)(nil)).Elem()
}

type StorageVersionMigrationInput interface {
	pulumi.Input

	ToStorageVersionMigrationOutput() StorageVersionMigrationOutput
	ToStorageVersionMigrationOutputWithContext(ctx context.Context) StorageVersionMigrationOutput
}

func (*StorageVersionMigration) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigration)(nil)).Elem()
}

func (i *StorageVersionMigration) ToStorageVersionMigrationOutput() StorageVersionMigrationOutput {
	return i.ToStorageVersionMigrationOutputWithContext(context.Background())
}

func (i *StorageVersionMigration) ToStorageVersionMigrationOutputWithContext(ctx context.Context) StorageVersionMigrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationOutput)
}

// StorageVersionMigrationArrayInput is an input type that accepts StorageVersionMigrationArray and StorageVersionMigrationArrayOutput values.
// You can construct a concrete instance of `StorageVersionMigrationArrayInput` via:
//
//	StorageVersionMigrationArray{ StorageVersionMigrationArgs{...} }
type StorageVersionMigrationArrayInput interface {
	pulumi.Input

	ToStorageVersionMigrationArrayOutput() StorageVersionMigrationArrayOutput
	ToStorageVersionMigrationArrayOutputWithContext(context.Context) StorageVersionMigrationArrayOutput
}

type StorageVersionMigrationArray []StorageVersionMigrationInput

func (StorageVersionMigrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageVersionMigration)(nil)).Elem()
}

func (i StorageVersionMigrationArray) ToStorageVersionMigrationArrayOutput() StorageVersionMigrationArrayOutput {
	return i.ToStorageVersionMigrationArrayOutputWithContext(context.Background())
}

func (i StorageVersionMigrationArray) ToStorageVersionMigrationArrayOutputWithContext(ctx context.Context) StorageVersionMigrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationArrayOutput)
}

// StorageVersionMigrationMapInput is an input type that accepts StorageVersionMigrationMap and StorageVersionMigrationMapOutput values.
// You can construct a concrete instance of `StorageVersionMigrationMapInput` via:
//
//	StorageVersionMigrationMap{ "key": StorageVersionMigrationArgs{...} }
type StorageVersionMigrationMapInput interface {
	pulumi.Input

	ToStorageVersionMigrationMapOutput() StorageVersionMigrationMapOutput
	ToStorageVersionMigrationMapOutputWithContext(context.Context) StorageVersionMigrationMapOutput
}

type StorageVersionMigrationMap map[string]StorageVersionMigrationInput

func (StorageVersionMigrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageVersionMigration)(nil)).Elem()
}

func (i StorageVersionMigrationMap) ToStorageVersionMigrationMapOutput() StorageVersionMigrationMapOutput {
	return i.ToStorageVersionMigrationMapOutputWithContext(context.Background())
}

func (i StorageVersionMigrationMap) ToStorageVersionMigrationMapOutputWithContext(ctx context.Context) StorageVersionMigrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationMapOutput)
}

type StorageVersionMigrationOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigration)(nil)).Elem()
}

func (o StorageVersionMigrationOutput) ToStorageVersionMigrationOutput() StorageVersionMigrationOutput {
	return o
}

func (o StorageVersionMigrationOutput) ToStorageVersionMigrationOutputWithContext(ctx context.Context) StorageVersionMigrationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageVersionMigrationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageVersionMigration) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageVersionMigrationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageVersionMigration) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageVersionMigrationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *StorageVersionMigration) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Specification of the migration.
func (o StorageVersionMigrationOutput) Spec() StorageVersionMigrationSpecOutput {
	return o.ApplyT(func(v *StorageVersionMigration) StorageVersionMigrationSpecOutput { return v.Spec }).(StorageVersionMigrationSpecOutput)
}

// Status of the migration.
func (o StorageVersionMigrationOutput) Status() StorageVersionMigrationStatusPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigration) StorageVersionMigrationStatusPtrOutput { return v.Status }).(StorageVersionMigrationStatusPtrOutput)
}

type StorageVersionMigrationArrayOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageVersionMigration)(nil)).Elem()
}

func (o StorageVersionMigrationArrayOutput) ToStorageVersionMigrationArrayOutput() StorageVersionMigrationArrayOutput {
	return o
}

func (o StorageVersionMigrationArrayOutput) ToStorageVersionMigrationArrayOutputWithContext(ctx context.Context) StorageVersionMigrationArrayOutput {
	return o
}

func (o StorageVersionMigrationArrayOutput) Index(i pulumi.IntInput) StorageVersionMigrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageVersionMigration {
		return vs[0].([]*StorageVersionMigration)[vs[1].(int)]
	}).(StorageVersionMigrationOutput)
}

type StorageVersionMigrationMapOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageVersionMigration)(nil)).Elem()
}

func (o StorageVersionMigrationMapOutput) ToStorageVersionMigrationMapOutput() StorageVersionMigrationMapOutput {
	return o
}

func (o StorageVersionMigrationMapOutput) ToStorageVersionMigrationMapOutputWithContext(ctx context.Context) StorageVersionMigrationMapOutput {
	return o
}

func (o StorageVersionMigrationMapOutput) MapIndex(k pulumi.StringInput) StorageVersionMigrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageVersionMigration {
		return vs[0].(map[string]*StorageVersionMigration)[vs[1].(string)]
	}).(StorageVersionMigrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationInput)(nil)).Elem(), &StorageVersionMigration{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationArrayInput)(nil)).Elem(), StorageVersionMigrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationMapInput)(nil)).Elem(), StorageVersionMigrationMap{})
	pulumi.RegisterOutputType(StorageVersionMigrationOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationArrayOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationMapOutput{})
}
