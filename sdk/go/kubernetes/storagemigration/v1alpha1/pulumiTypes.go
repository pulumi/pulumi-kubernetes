// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The names of the group, the version, and the resource.
type GroupVersionResource struct {
	// The name of the group.
	Group *string `pulumi:"group"`
	// The name of the resource.
	Resource *string `pulumi:"resource"`
	// The name of the version.
	Version *string `pulumi:"version"`
}

// GroupVersionResourceInput is an input type that accepts GroupVersionResourceArgs and GroupVersionResourceOutput values.
// You can construct a concrete instance of `GroupVersionResourceInput` via:
//
//	GroupVersionResourceArgs{...}
type GroupVersionResourceInput interface {
	pulumi.Input

	ToGroupVersionResourceOutput() GroupVersionResourceOutput
	ToGroupVersionResourceOutputWithContext(context.Context) GroupVersionResourceOutput
}

// The names of the group, the version, and the resource.
type GroupVersionResourceArgs struct {
	// The name of the group.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The name of the resource.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The name of the version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GroupVersionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersionResource)(nil)).Elem()
}

func (i GroupVersionResourceArgs) ToGroupVersionResourceOutput() GroupVersionResourceOutput {
	return i.ToGroupVersionResourceOutputWithContext(context.Background())
}

func (i GroupVersionResourceArgs) ToGroupVersionResourceOutputWithContext(ctx context.Context) GroupVersionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourceOutput)
}

func (i GroupVersionResourceArgs) ToGroupVersionResourcePtrOutput() GroupVersionResourcePtrOutput {
	return i.ToGroupVersionResourcePtrOutputWithContext(context.Background())
}

func (i GroupVersionResourceArgs) ToGroupVersionResourcePtrOutputWithContext(ctx context.Context) GroupVersionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourceOutput).ToGroupVersionResourcePtrOutputWithContext(ctx)
}

// GroupVersionResourcePtrInput is an input type that accepts GroupVersionResourceArgs, GroupVersionResourcePtr and GroupVersionResourcePtrOutput values.
// You can construct a concrete instance of `GroupVersionResourcePtrInput` via:
//
//	        GroupVersionResourceArgs{...}
//
//	or:
//
//	        nil
type GroupVersionResourcePtrInput interface {
	pulumi.Input

	ToGroupVersionResourcePtrOutput() GroupVersionResourcePtrOutput
	ToGroupVersionResourcePtrOutputWithContext(context.Context) GroupVersionResourcePtrOutput
}

type groupVersionResourcePtrType GroupVersionResourceArgs

func GroupVersionResourcePtr(v *GroupVersionResourceArgs) GroupVersionResourcePtrInput {
	return (*groupVersionResourcePtrType)(v)
}

func (*groupVersionResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupVersionResource)(nil)).Elem()
}

func (i *groupVersionResourcePtrType) ToGroupVersionResourcePtrOutput() GroupVersionResourcePtrOutput {
	return i.ToGroupVersionResourcePtrOutputWithContext(context.Background())
}

func (i *groupVersionResourcePtrType) ToGroupVersionResourcePtrOutputWithContext(ctx context.Context) GroupVersionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourcePtrOutput)
}

// The names of the group, the version, and the resource.
type GroupVersionResourceOutput struct{ *pulumi.OutputState }

func (GroupVersionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersionResource)(nil)).Elem()
}

func (o GroupVersionResourceOutput) ToGroupVersionResourceOutput() GroupVersionResourceOutput {
	return o
}

func (o GroupVersionResourceOutput) ToGroupVersionResourceOutputWithContext(ctx context.Context) GroupVersionResourceOutput {
	return o
}

func (o GroupVersionResourceOutput) ToGroupVersionResourcePtrOutput() GroupVersionResourcePtrOutput {
	return o.ToGroupVersionResourcePtrOutputWithContext(context.Background())
}

func (o GroupVersionResourceOutput) ToGroupVersionResourcePtrOutputWithContext(ctx context.Context) GroupVersionResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupVersionResource) *GroupVersionResource {
		return &v
	}).(GroupVersionResourcePtrOutput)
}

// The name of the group.
func (o GroupVersionResourceOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResource) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o GroupVersionResourceOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResource) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The name of the version.
func (o GroupVersionResourceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResource) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GroupVersionResourcePtrOutput struct{ *pulumi.OutputState }

func (GroupVersionResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupVersionResource)(nil)).Elem()
}

func (o GroupVersionResourcePtrOutput) ToGroupVersionResourcePtrOutput() GroupVersionResourcePtrOutput {
	return o
}

func (o GroupVersionResourcePtrOutput) ToGroupVersionResourcePtrOutputWithContext(ctx context.Context) GroupVersionResourcePtrOutput {
	return o
}

func (o GroupVersionResourcePtrOutput) Elem() GroupVersionResourceOutput {
	return o.ApplyT(func(v *GroupVersionResource) GroupVersionResource {
		if v != nil {
			return *v
		}
		var ret GroupVersionResource
		return ret
	}).(GroupVersionResourceOutput)
}

// The name of the group.
func (o GroupVersionResourcePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResource) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o GroupVersionResourcePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResource) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// The name of the version.
func (o GroupVersionResourcePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResource) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The names of the group, the version, and the resource.
type GroupVersionResourcePatch struct {
	// The name of the group.
	Group *string `pulumi:"group"`
	// The name of the resource.
	Resource *string `pulumi:"resource"`
	// The name of the version.
	Version *string `pulumi:"version"`
}

// GroupVersionResourcePatchInput is an input type that accepts GroupVersionResourcePatchArgs and GroupVersionResourcePatchOutput values.
// You can construct a concrete instance of `GroupVersionResourcePatchInput` via:
//
//	GroupVersionResourcePatchArgs{...}
type GroupVersionResourcePatchInput interface {
	pulumi.Input

	ToGroupVersionResourcePatchOutput() GroupVersionResourcePatchOutput
	ToGroupVersionResourcePatchOutputWithContext(context.Context) GroupVersionResourcePatchOutput
}

// The names of the group, the version, and the resource.
type GroupVersionResourcePatchArgs struct {
	// The name of the group.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The name of the resource.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The name of the version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GroupVersionResourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersionResourcePatch)(nil)).Elem()
}

func (i GroupVersionResourcePatchArgs) ToGroupVersionResourcePatchOutput() GroupVersionResourcePatchOutput {
	return i.ToGroupVersionResourcePatchOutputWithContext(context.Background())
}

func (i GroupVersionResourcePatchArgs) ToGroupVersionResourcePatchOutputWithContext(ctx context.Context) GroupVersionResourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourcePatchOutput)
}

func (i GroupVersionResourcePatchArgs) ToGroupVersionResourcePatchPtrOutput() GroupVersionResourcePatchPtrOutput {
	return i.ToGroupVersionResourcePatchPtrOutputWithContext(context.Background())
}

func (i GroupVersionResourcePatchArgs) ToGroupVersionResourcePatchPtrOutputWithContext(ctx context.Context) GroupVersionResourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourcePatchOutput).ToGroupVersionResourcePatchPtrOutputWithContext(ctx)
}

// GroupVersionResourcePatchPtrInput is an input type that accepts GroupVersionResourcePatchArgs, GroupVersionResourcePatchPtr and GroupVersionResourcePatchPtrOutput values.
// You can construct a concrete instance of `GroupVersionResourcePatchPtrInput` via:
//
//	        GroupVersionResourcePatchArgs{...}
//
//	or:
//
//	        nil
type GroupVersionResourcePatchPtrInput interface {
	pulumi.Input

	ToGroupVersionResourcePatchPtrOutput() GroupVersionResourcePatchPtrOutput
	ToGroupVersionResourcePatchPtrOutputWithContext(context.Context) GroupVersionResourcePatchPtrOutput
}

type groupVersionResourcePatchPtrType GroupVersionResourcePatchArgs

func GroupVersionResourcePatchPtr(v *GroupVersionResourcePatchArgs) GroupVersionResourcePatchPtrInput {
	return (*groupVersionResourcePatchPtrType)(v)
}

func (*groupVersionResourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupVersionResourcePatch)(nil)).Elem()
}

func (i *groupVersionResourcePatchPtrType) ToGroupVersionResourcePatchPtrOutput() GroupVersionResourcePatchPtrOutput {
	return i.ToGroupVersionResourcePatchPtrOutputWithContext(context.Background())
}

func (i *groupVersionResourcePatchPtrType) ToGroupVersionResourcePatchPtrOutputWithContext(ctx context.Context) GroupVersionResourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionResourcePatchPtrOutput)
}

// The names of the group, the version, and the resource.
type GroupVersionResourcePatchOutput struct{ *pulumi.OutputState }

func (GroupVersionResourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersionResourcePatch)(nil)).Elem()
}

func (o GroupVersionResourcePatchOutput) ToGroupVersionResourcePatchOutput() GroupVersionResourcePatchOutput {
	return o
}

func (o GroupVersionResourcePatchOutput) ToGroupVersionResourcePatchOutputWithContext(ctx context.Context) GroupVersionResourcePatchOutput {
	return o
}

func (o GroupVersionResourcePatchOutput) ToGroupVersionResourcePatchPtrOutput() GroupVersionResourcePatchPtrOutput {
	return o.ToGroupVersionResourcePatchPtrOutputWithContext(context.Background())
}

func (o GroupVersionResourcePatchOutput) ToGroupVersionResourcePatchPtrOutputWithContext(ctx context.Context) GroupVersionResourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupVersionResourcePatch) *GroupVersionResourcePatch {
		return &v
	}).(GroupVersionResourcePatchPtrOutput)
}

// The name of the group.
func (o GroupVersionResourcePatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResourcePatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o GroupVersionResourcePatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResourcePatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The name of the version.
func (o GroupVersionResourcePatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupVersionResourcePatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GroupVersionResourcePatchPtrOutput struct{ *pulumi.OutputState }

func (GroupVersionResourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupVersionResourcePatch)(nil)).Elem()
}

func (o GroupVersionResourcePatchPtrOutput) ToGroupVersionResourcePatchPtrOutput() GroupVersionResourcePatchPtrOutput {
	return o
}

func (o GroupVersionResourcePatchPtrOutput) ToGroupVersionResourcePatchPtrOutputWithContext(ctx context.Context) GroupVersionResourcePatchPtrOutput {
	return o
}

func (o GroupVersionResourcePatchPtrOutput) Elem() GroupVersionResourcePatchOutput {
	return o.ApplyT(func(v *GroupVersionResourcePatch) GroupVersionResourcePatch {
		if v != nil {
			return *v
		}
		var ret GroupVersionResourcePatch
		return ret
	}).(GroupVersionResourcePatchOutput)
}

// The name of the group.
func (o GroupVersionResourcePatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o GroupVersionResourcePatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// The name of the version.
func (o GroupVersionResourcePatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupVersionResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Describes the state of a migration at a certain point.
type MigrationCondition struct {
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of the condition.
	Type string `pulumi:"type"`
}

// MigrationConditionInput is an input type that accepts MigrationConditionArgs and MigrationConditionOutput values.
// You can construct a concrete instance of `MigrationConditionInput` via:
//
//	MigrationConditionArgs{...}
type MigrationConditionInput interface {
	pulumi.Input

	ToMigrationConditionOutput() MigrationConditionOutput
	ToMigrationConditionOutputWithContext(context.Context) MigrationConditionOutput
}

// Describes the state of a migration at a certain point.
type MigrationConditionArgs struct {
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of the condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MigrationConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationCondition)(nil)).Elem()
}

func (i MigrationConditionArgs) ToMigrationConditionOutput() MigrationConditionOutput {
	return i.ToMigrationConditionOutputWithContext(context.Background())
}

func (i MigrationConditionArgs) ToMigrationConditionOutputWithContext(ctx context.Context) MigrationConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConditionOutput)
}

// MigrationConditionArrayInput is an input type that accepts MigrationConditionArray and MigrationConditionArrayOutput values.
// You can construct a concrete instance of `MigrationConditionArrayInput` via:
//
//	MigrationConditionArray{ MigrationConditionArgs{...} }
type MigrationConditionArrayInput interface {
	pulumi.Input

	ToMigrationConditionArrayOutput() MigrationConditionArrayOutput
	ToMigrationConditionArrayOutputWithContext(context.Context) MigrationConditionArrayOutput
}

type MigrationConditionArray []MigrationConditionInput

func (MigrationConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrationCondition)(nil)).Elem()
}

func (i MigrationConditionArray) ToMigrationConditionArrayOutput() MigrationConditionArrayOutput {
	return i.ToMigrationConditionArrayOutputWithContext(context.Background())
}

func (i MigrationConditionArray) ToMigrationConditionArrayOutputWithContext(ctx context.Context) MigrationConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConditionArrayOutput)
}

// Describes the state of a migration at a certain point.
type MigrationConditionOutput struct{ *pulumi.OutputState }

func (MigrationConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationCondition)(nil)).Elem()
}

func (o MigrationConditionOutput) ToMigrationConditionOutput() MigrationConditionOutput {
	return o
}

func (o MigrationConditionOutput) ToMigrationConditionOutputWithContext(ctx context.Context) MigrationConditionOutput {
	return o
}

// The last time this condition was updated.
func (o MigrationConditionOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationCondition) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o MigrationConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o MigrationConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o MigrationConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of the condition.
func (o MigrationConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationCondition) string { return v.Type }).(pulumi.StringOutput)
}

type MigrationConditionArrayOutput struct{ *pulumi.OutputState }

func (MigrationConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrationCondition)(nil)).Elem()
}

func (o MigrationConditionArrayOutput) ToMigrationConditionArrayOutput() MigrationConditionArrayOutput {
	return o
}

func (o MigrationConditionArrayOutput) ToMigrationConditionArrayOutputWithContext(ctx context.Context) MigrationConditionArrayOutput {
	return o
}

func (o MigrationConditionArrayOutput) Index(i pulumi.IntInput) MigrationConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrationCondition {
		return vs[0].([]MigrationCondition)[vs[1].(int)]
	}).(MigrationConditionOutput)
}

// Describes the state of a migration at a certain point.
type MigrationConditionPatch struct {
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of the condition.
	Type *string `pulumi:"type"`
}

// MigrationConditionPatchInput is an input type that accepts MigrationConditionPatchArgs and MigrationConditionPatchOutput values.
// You can construct a concrete instance of `MigrationConditionPatchInput` via:
//
//	MigrationConditionPatchArgs{...}
type MigrationConditionPatchInput interface {
	pulumi.Input

	ToMigrationConditionPatchOutput() MigrationConditionPatchOutput
	ToMigrationConditionPatchOutputWithContext(context.Context) MigrationConditionPatchOutput
}

// Describes the state of a migration at a certain point.
type MigrationConditionPatchArgs struct {
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of the condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MigrationConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConditionPatch)(nil)).Elem()
}

func (i MigrationConditionPatchArgs) ToMigrationConditionPatchOutput() MigrationConditionPatchOutput {
	return i.ToMigrationConditionPatchOutputWithContext(context.Background())
}

func (i MigrationConditionPatchArgs) ToMigrationConditionPatchOutputWithContext(ctx context.Context) MigrationConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConditionPatchOutput)
}

// MigrationConditionPatchArrayInput is an input type that accepts MigrationConditionPatchArray and MigrationConditionPatchArrayOutput values.
// You can construct a concrete instance of `MigrationConditionPatchArrayInput` via:
//
//	MigrationConditionPatchArray{ MigrationConditionPatchArgs{...} }
type MigrationConditionPatchArrayInput interface {
	pulumi.Input

	ToMigrationConditionPatchArrayOutput() MigrationConditionPatchArrayOutput
	ToMigrationConditionPatchArrayOutputWithContext(context.Context) MigrationConditionPatchArrayOutput
}

type MigrationConditionPatchArray []MigrationConditionPatchInput

func (MigrationConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrationConditionPatch)(nil)).Elem()
}

func (i MigrationConditionPatchArray) ToMigrationConditionPatchArrayOutput() MigrationConditionPatchArrayOutput {
	return i.ToMigrationConditionPatchArrayOutputWithContext(context.Background())
}

func (i MigrationConditionPatchArray) ToMigrationConditionPatchArrayOutputWithContext(ctx context.Context) MigrationConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConditionPatchArrayOutput)
}

// Describes the state of a migration at a certain point.
type MigrationConditionPatchOutput struct{ *pulumi.OutputState }

func (MigrationConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConditionPatch)(nil)).Elem()
}

func (o MigrationConditionPatchOutput) ToMigrationConditionPatchOutput() MigrationConditionPatchOutput {
	return o
}

func (o MigrationConditionPatchOutput) ToMigrationConditionPatchOutputWithContext(ctx context.Context) MigrationConditionPatchOutput {
	return o
}

// The last time this condition was updated.
func (o MigrationConditionPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationConditionPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o MigrationConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o MigrationConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o MigrationConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of the condition.
func (o MigrationConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MigrationConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (MigrationConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrationConditionPatch)(nil)).Elem()
}

func (o MigrationConditionPatchArrayOutput) ToMigrationConditionPatchArrayOutput() MigrationConditionPatchArrayOutput {
	return o
}

func (o MigrationConditionPatchArrayOutput) ToMigrationConditionPatchArrayOutputWithContext(ctx context.Context) MigrationConditionPatchArrayOutput {
	return o
}

func (o MigrationConditionPatchArrayOutput) Index(i pulumi.IntInput) MigrationConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrationConditionPatch {
		return vs[0].([]MigrationConditionPatch)[vs[1].(int)]
	}).(MigrationConditionPatchOutput)
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the migration.
	Spec *StorageVersionMigrationSpec `pulumi:"spec"`
	// Status of the migration.
	Status *StorageVersionMigrationStatus `pulumi:"status"`
}

// StorageVersionMigrationTypeInput is an input type that accepts StorageVersionMigrationTypeArgs and StorageVersionMigrationTypeOutput values.
// You can construct a concrete instance of `StorageVersionMigrationTypeInput` via:
//
//	StorageVersionMigrationTypeArgs{...}
type StorageVersionMigrationTypeInput interface {
	pulumi.Input

	ToStorageVersionMigrationTypeOutput() StorageVersionMigrationTypeOutput
	ToStorageVersionMigrationTypeOutputWithContext(context.Context) StorageVersionMigrationTypeOutput
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the migration.
	Spec StorageVersionMigrationSpecPtrInput `pulumi:"spec"`
	// Status of the migration.
	Status StorageVersionMigrationStatusPtrInput `pulumi:"status"`
}

func (StorageVersionMigrationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationType)(nil)).Elem()
}

func (i StorageVersionMigrationTypeArgs) ToStorageVersionMigrationTypeOutput() StorageVersionMigrationTypeOutput {
	return i.ToStorageVersionMigrationTypeOutputWithContext(context.Background())
}

func (i StorageVersionMigrationTypeArgs) ToStorageVersionMigrationTypeOutputWithContext(ctx context.Context) StorageVersionMigrationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationTypeOutput)
}

// StorageVersionMigrationTypeArrayInput is an input type that accepts StorageVersionMigrationTypeArray and StorageVersionMigrationTypeArrayOutput values.
// You can construct a concrete instance of `StorageVersionMigrationTypeArrayInput` via:
//
//	StorageVersionMigrationTypeArray{ StorageVersionMigrationTypeArgs{...} }
type StorageVersionMigrationTypeArrayInput interface {
	pulumi.Input

	ToStorageVersionMigrationTypeArrayOutput() StorageVersionMigrationTypeArrayOutput
	ToStorageVersionMigrationTypeArrayOutputWithContext(context.Context) StorageVersionMigrationTypeArrayOutput
}

type StorageVersionMigrationTypeArray []StorageVersionMigrationTypeInput

func (StorageVersionMigrationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageVersionMigrationType)(nil)).Elem()
}

func (i StorageVersionMigrationTypeArray) ToStorageVersionMigrationTypeArrayOutput() StorageVersionMigrationTypeArrayOutput {
	return i.ToStorageVersionMigrationTypeArrayOutputWithContext(context.Background())
}

func (i StorageVersionMigrationTypeArray) ToStorageVersionMigrationTypeArrayOutputWithContext(ctx context.Context) StorageVersionMigrationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationTypeArrayOutput)
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationTypeOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationType)(nil)).Elem()
}

func (o StorageVersionMigrationTypeOutput) ToStorageVersionMigrationTypeOutput() StorageVersionMigrationTypeOutput {
	return o
}

func (o StorageVersionMigrationTypeOutput) ToStorageVersionMigrationTypeOutputWithContext(ctx context.Context) StorageVersionMigrationTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageVersionMigrationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageVersionMigrationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageVersionMigrationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the migration.
func (o StorageVersionMigrationTypeOutput) Spec() StorageVersionMigrationSpecPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationType) *StorageVersionMigrationSpec { return v.Spec }).(StorageVersionMigrationSpecPtrOutput)
}

// Status of the migration.
func (o StorageVersionMigrationTypeOutput) Status() StorageVersionMigrationStatusPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationType) *StorageVersionMigrationStatus { return v.Status }).(StorageVersionMigrationStatusPtrOutput)
}

type StorageVersionMigrationTypeArrayOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageVersionMigrationType)(nil)).Elem()
}

func (o StorageVersionMigrationTypeArrayOutput) ToStorageVersionMigrationTypeArrayOutput() StorageVersionMigrationTypeArrayOutput {
	return o
}

func (o StorageVersionMigrationTypeArrayOutput) ToStorageVersionMigrationTypeArrayOutputWithContext(ctx context.Context) StorageVersionMigrationTypeArrayOutput {
	return o
}

func (o StorageVersionMigrationTypeArrayOutput) Index(i pulumi.IntInput) StorageVersionMigrationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageVersionMigrationType {
		return vs[0].([]StorageVersionMigrationType)[vs[1].(int)]
	}).(StorageVersionMigrationTypeOutput)
}

// StorageVersionMigrationList is a collection of storage version migrations.
type StorageVersionMigrationListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of StorageVersionMigration
	Items []StorageVersionMigrationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// StorageVersionMigrationListTypeInput is an input type that accepts StorageVersionMigrationListTypeArgs and StorageVersionMigrationListTypeOutput values.
// You can construct a concrete instance of `StorageVersionMigrationListTypeInput` via:
//
//	StorageVersionMigrationListTypeArgs{...}
type StorageVersionMigrationListTypeInput interface {
	pulumi.Input

	ToStorageVersionMigrationListTypeOutput() StorageVersionMigrationListTypeOutput
	ToStorageVersionMigrationListTypeOutputWithContext(context.Context) StorageVersionMigrationListTypeOutput
}

// StorageVersionMigrationList is a collection of storage version migrations.
type StorageVersionMigrationListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of StorageVersionMigration
	Items StorageVersionMigrationTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (StorageVersionMigrationListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationListType)(nil)).Elem()
}

func (i StorageVersionMigrationListTypeArgs) ToStorageVersionMigrationListTypeOutput() StorageVersionMigrationListTypeOutput {
	return i.ToStorageVersionMigrationListTypeOutputWithContext(context.Background())
}

func (i StorageVersionMigrationListTypeArgs) ToStorageVersionMigrationListTypeOutputWithContext(ctx context.Context) StorageVersionMigrationListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationListTypeOutput)
}

// StorageVersionMigrationList is a collection of storage version migrations.
type StorageVersionMigrationListTypeOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationListType)(nil)).Elem()
}

func (o StorageVersionMigrationListTypeOutput) ToStorageVersionMigrationListTypeOutput() StorageVersionMigrationListTypeOutput {
	return o
}

func (o StorageVersionMigrationListTypeOutput) ToStorageVersionMigrationListTypeOutputWithContext(ctx context.Context) StorageVersionMigrationListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageVersionMigrationListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of StorageVersionMigration
func (o StorageVersionMigrationListTypeOutput) Items() StorageVersionMigrationTypeArrayOutput {
	return o.ApplyT(func(v StorageVersionMigrationListType) []StorageVersionMigrationType { return v.Items }).(StorageVersionMigrationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageVersionMigrationListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageVersionMigrationListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the migration.
	Spec *StorageVersionMigrationSpecPatch `pulumi:"spec"`
	// Status of the migration.
	Status *StorageVersionMigrationStatusPatch `pulumi:"status"`
}

// StorageVersionMigrationPatchTypeInput is an input type that accepts StorageVersionMigrationPatchTypeArgs and StorageVersionMigrationPatchTypeOutput values.
// You can construct a concrete instance of `StorageVersionMigrationPatchTypeInput` via:
//
//	StorageVersionMigrationPatchTypeArgs{...}
type StorageVersionMigrationPatchTypeInput interface {
	pulumi.Input

	ToStorageVersionMigrationPatchTypeOutput() StorageVersionMigrationPatchTypeOutput
	ToStorageVersionMigrationPatchTypeOutputWithContext(context.Context) StorageVersionMigrationPatchTypeOutput
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the migration.
	Spec StorageVersionMigrationSpecPatchPtrInput `pulumi:"spec"`
	// Status of the migration.
	Status StorageVersionMigrationStatusPatchPtrInput `pulumi:"status"`
}

func (StorageVersionMigrationPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationPatchType)(nil)).Elem()
}

func (i StorageVersionMigrationPatchTypeArgs) ToStorageVersionMigrationPatchTypeOutput() StorageVersionMigrationPatchTypeOutput {
	return i.ToStorageVersionMigrationPatchTypeOutputWithContext(context.Background())
}

func (i StorageVersionMigrationPatchTypeArgs) ToStorageVersionMigrationPatchTypeOutputWithContext(ctx context.Context) StorageVersionMigrationPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationPatchTypeOutput)
}

// StorageVersionMigration represents a migration of stored data to the latest storage version.
type StorageVersionMigrationPatchTypeOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationPatchType)(nil)).Elem()
}

func (o StorageVersionMigrationPatchTypeOutput) ToStorageVersionMigrationPatchTypeOutput() StorageVersionMigrationPatchTypeOutput {
	return o
}

func (o StorageVersionMigrationPatchTypeOutput) ToStorageVersionMigrationPatchTypeOutputWithContext(ctx context.Context) StorageVersionMigrationPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageVersionMigrationPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageVersionMigrationPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageVersionMigrationPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the migration.
func (o StorageVersionMigrationPatchTypeOutput) Spec() StorageVersionMigrationSpecPatchPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationPatchType) *StorageVersionMigrationSpecPatch { return v.Spec }).(StorageVersionMigrationSpecPatchPtrOutput)
}

// Status of the migration.
func (o StorageVersionMigrationPatchTypeOutput) Status() StorageVersionMigrationStatusPatchPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationPatchType) *StorageVersionMigrationStatusPatch { return v.Status }).(StorageVersionMigrationStatusPatchPtrOutput)
}

// Spec of the storage version migration.
type StorageVersionMigrationSpec struct {
	// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
	ContinueToken *string `pulumi:"continueToken"`
	// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
	Resource GroupVersionResource `pulumi:"resource"`
}

// StorageVersionMigrationSpecInput is an input type that accepts StorageVersionMigrationSpecArgs and StorageVersionMigrationSpecOutput values.
// You can construct a concrete instance of `StorageVersionMigrationSpecInput` via:
//
//	StorageVersionMigrationSpecArgs{...}
type StorageVersionMigrationSpecInput interface {
	pulumi.Input

	ToStorageVersionMigrationSpecOutput() StorageVersionMigrationSpecOutput
	ToStorageVersionMigrationSpecOutputWithContext(context.Context) StorageVersionMigrationSpecOutput
}

// Spec of the storage version migration.
type StorageVersionMigrationSpecArgs struct {
	// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
	ContinueToken pulumi.StringPtrInput `pulumi:"continueToken"`
	// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
	Resource GroupVersionResourceInput `pulumi:"resource"`
}

func (StorageVersionMigrationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationSpec)(nil)).Elem()
}

func (i StorageVersionMigrationSpecArgs) ToStorageVersionMigrationSpecOutput() StorageVersionMigrationSpecOutput {
	return i.ToStorageVersionMigrationSpecOutputWithContext(context.Background())
}

func (i StorageVersionMigrationSpecArgs) ToStorageVersionMigrationSpecOutputWithContext(ctx context.Context) StorageVersionMigrationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecOutput)
}

func (i StorageVersionMigrationSpecArgs) ToStorageVersionMigrationSpecPtrOutput() StorageVersionMigrationSpecPtrOutput {
	return i.ToStorageVersionMigrationSpecPtrOutputWithContext(context.Background())
}

func (i StorageVersionMigrationSpecArgs) ToStorageVersionMigrationSpecPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecOutput).ToStorageVersionMigrationSpecPtrOutputWithContext(ctx)
}

// StorageVersionMigrationSpecPtrInput is an input type that accepts StorageVersionMigrationSpecArgs, StorageVersionMigrationSpecPtr and StorageVersionMigrationSpecPtrOutput values.
// You can construct a concrete instance of `StorageVersionMigrationSpecPtrInput` via:
//
//	        StorageVersionMigrationSpecArgs{...}
//
//	or:
//
//	        nil
type StorageVersionMigrationSpecPtrInput interface {
	pulumi.Input

	ToStorageVersionMigrationSpecPtrOutput() StorageVersionMigrationSpecPtrOutput
	ToStorageVersionMigrationSpecPtrOutputWithContext(context.Context) StorageVersionMigrationSpecPtrOutput
}

type storageVersionMigrationSpecPtrType StorageVersionMigrationSpecArgs

func StorageVersionMigrationSpecPtr(v *StorageVersionMigrationSpecArgs) StorageVersionMigrationSpecPtrInput {
	return (*storageVersionMigrationSpecPtrType)(v)
}

func (*storageVersionMigrationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationSpec)(nil)).Elem()
}

func (i *storageVersionMigrationSpecPtrType) ToStorageVersionMigrationSpecPtrOutput() StorageVersionMigrationSpecPtrOutput {
	return i.ToStorageVersionMigrationSpecPtrOutputWithContext(context.Background())
}

func (i *storageVersionMigrationSpecPtrType) ToStorageVersionMigrationSpecPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecPtrOutput)
}

// Spec of the storage version migration.
type StorageVersionMigrationSpecOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationSpec)(nil)).Elem()
}

func (o StorageVersionMigrationSpecOutput) ToStorageVersionMigrationSpecOutput() StorageVersionMigrationSpecOutput {
	return o
}

func (o StorageVersionMigrationSpecOutput) ToStorageVersionMigrationSpecOutputWithContext(ctx context.Context) StorageVersionMigrationSpecOutput {
	return o
}

func (o StorageVersionMigrationSpecOutput) ToStorageVersionMigrationSpecPtrOutput() StorageVersionMigrationSpecPtrOutput {
	return o.ToStorageVersionMigrationSpecPtrOutputWithContext(context.Background())
}

func (o StorageVersionMigrationSpecOutput) ToStorageVersionMigrationSpecPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageVersionMigrationSpec) *StorageVersionMigrationSpec {
		return &v
	}).(StorageVersionMigrationSpecPtrOutput)
}

// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
func (o StorageVersionMigrationSpecOutput) ContinueToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationSpec) *string { return v.ContinueToken }).(pulumi.StringPtrOutput)
}

// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
func (o StorageVersionMigrationSpecOutput) Resource() GroupVersionResourceOutput {
	return o.ApplyT(func(v StorageVersionMigrationSpec) GroupVersionResource { return v.Resource }).(GroupVersionResourceOutput)
}

type StorageVersionMigrationSpecPtrOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationSpec)(nil)).Elem()
}

func (o StorageVersionMigrationSpecPtrOutput) ToStorageVersionMigrationSpecPtrOutput() StorageVersionMigrationSpecPtrOutput {
	return o
}

func (o StorageVersionMigrationSpecPtrOutput) ToStorageVersionMigrationSpecPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPtrOutput {
	return o
}

func (o StorageVersionMigrationSpecPtrOutput) Elem() StorageVersionMigrationSpecOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpec) StorageVersionMigrationSpec {
		if v != nil {
			return *v
		}
		var ret StorageVersionMigrationSpec
		return ret
	}).(StorageVersionMigrationSpecOutput)
}

// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
func (o StorageVersionMigrationSpecPtrOutput) ContinueToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpec) *string {
		if v == nil {
			return nil
		}
		return v.ContinueToken
	}).(pulumi.StringPtrOutput)
}

// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
func (o StorageVersionMigrationSpecPtrOutput) Resource() GroupVersionResourcePtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpec) *GroupVersionResource {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(GroupVersionResourcePtrOutput)
}

// Spec of the storage version migration.
type StorageVersionMigrationSpecPatch struct {
	// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
	ContinueToken *string `pulumi:"continueToken"`
	// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
	Resource *GroupVersionResourcePatch `pulumi:"resource"`
}

// StorageVersionMigrationSpecPatchInput is an input type that accepts StorageVersionMigrationSpecPatchArgs and StorageVersionMigrationSpecPatchOutput values.
// You can construct a concrete instance of `StorageVersionMigrationSpecPatchInput` via:
//
//	StorageVersionMigrationSpecPatchArgs{...}
type StorageVersionMigrationSpecPatchInput interface {
	pulumi.Input

	ToStorageVersionMigrationSpecPatchOutput() StorageVersionMigrationSpecPatchOutput
	ToStorageVersionMigrationSpecPatchOutputWithContext(context.Context) StorageVersionMigrationSpecPatchOutput
}

// Spec of the storage version migration.
type StorageVersionMigrationSpecPatchArgs struct {
	// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
	ContinueToken pulumi.StringPtrInput `pulumi:"continueToken"`
	// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
	Resource GroupVersionResourcePatchPtrInput `pulumi:"resource"`
}

func (StorageVersionMigrationSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationSpecPatch)(nil)).Elem()
}

func (i StorageVersionMigrationSpecPatchArgs) ToStorageVersionMigrationSpecPatchOutput() StorageVersionMigrationSpecPatchOutput {
	return i.ToStorageVersionMigrationSpecPatchOutputWithContext(context.Background())
}

func (i StorageVersionMigrationSpecPatchArgs) ToStorageVersionMigrationSpecPatchOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecPatchOutput)
}

func (i StorageVersionMigrationSpecPatchArgs) ToStorageVersionMigrationSpecPatchPtrOutput() StorageVersionMigrationSpecPatchPtrOutput {
	return i.ToStorageVersionMigrationSpecPatchPtrOutputWithContext(context.Background())
}

func (i StorageVersionMigrationSpecPatchArgs) ToStorageVersionMigrationSpecPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecPatchOutput).ToStorageVersionMigrationSpecPatchPtrOutputWithContext(ctx)
}

// StorageVersionMigrationSpecPatchPtrInput is an input type that accepts StorageVersionMigrationSpecPatchArgs, StorageVersionMigrationSpecPatchPtr and StorageVersionMigrationSpecPatchPtrOutput values.
// You can construct a concrete instance of `StorageVersionMigrationSpecPatchPtrInput` via:
//
//	        StorageVersionMigrationSpecPatchArgs{...}
//
//	or:
//
//	        nil
type StorageVersionMigrationSpecPatchPtrInput interface {
	pulumi.Input

	ToStorageVersionMigrationSpecPatchPtrOutput() StorageVersionMigrationSpecPatchPtrOutput
	ToStorageVersionMigrationSpecPatchPtrOutputWithContext(context.Context) StorageVersionMigrationSpecPatchPtrOutput
}

type storageVersionMigrationSpecPatchPtrType StorageVersionMigrationSpecPatchArgs

func StorageVersionMigrationSpecPatchPtr(v *StorageVersionMigrationSpecPatchArgs) StorageVersionMigrationSpecPatchPtrInput {
	return (*storageVersionMigrationSpecPatchPtrType)(v)
}

func (*storageVersionMigrationSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationSpecPatch)(nil)).Elem()
}

func (i *storageVersionMigrationSpecPatchPtrType) ToStorageVersionMigrationSpecPatchPtrOutput() StorageVersionMigrationSpecPatchPtrOutput {
	return i.ToStorageVersionMigrationSpecPatchPtrOutputWithContext(context.Background())
}

func (i *storageVersionMigrationSpecPatchPtrType) ToStorageVersionMigrationSpecPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationSpecPatchPtrOutput)
}

// Spec of the storage version migration.
type StorageVersionMigrationSpecPatchOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationSpecPatch)(nil)).Elem()
}

func (o StorageVersionMigrationSpecPatchOutput) ToStorageVersionMigrationSpecPatchOutput() StorageVersionMigrationSpecPatchOutput {
	return o
}

func (o StorageVersionMigrationSpecPatchOutput) ToStorageVersionMigrationSpecPatchOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchOutput {
	return o
}

func (o StorageVersionMigrationSpecPatchOutput) ToStorageVersionMigrationSpecPatchPtrOutput() StorageVersionMigrationSpecPatchPtrOutput {
	return o.ToStorageVersionMigrationSpecPatchPtrOutputWithContext(context.Background())
}

func (o StorageVersionMigrationSpecPatchOutput) ToStorageVersionMigrationSpecPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageVersionMigrationSpecPatch) *StorageVersionMigrationSpecPatch {
		return &v
	}).(StorageVersionMigrationSpecPatchPtrOutput)
}

// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
func (o StorageVersionMigrationSpecPatchOutput) ContinueToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationSpecPatch) *string { return v.ContinueToken }).(pulumi.StringPtrOutput)
}

// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
func (o StorageVersionMigrationSpecPatchOutput) Resource() GroupVersionResourcePatchPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationSpecPatch) *GroupVersionResourcePatch { return v.Resource }).(GroupVersionResourcePatchPtrOutput)
}

type StorageVersionMigrationSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationSpecPatch)(nil)).Elem()
}

func (o StorageVersionMigrationSpecPatchPtrOutput) ToStorageVersionMigrationSpecPatchPtrOutput() StorageVersionMigrationSpecPatchPtrOutput {
	return o
}

func (o StorageVersionMigrationSpecPatchPtrOutput) ToStorageVersionMigrationSpecPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationSpecPatchPtrOutput {
	return o
}

func (o StorageVersionMigrationSpecPatchPtrOutput) Elem() StorageVersionMigrationSpecPatchOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpecPatch) StorageVersionMigrationSpecPatch {
		if v != nil {
			return *v
		}
		var ret StorageVersionMigrationSpecPatch
		return ret
	}).(StorageVersionMigrationSpecPatchOutput)
}

// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
func (o StorageVersionMigrationSpecPatchPtrOutput) ContinueToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContinueToken
	}).(pulumi.StringPtrOutput)
}

// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
func (o StorageVersionMigrationSpecPatchPtrOutput) Resource() GroupVersionResourcePatchPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationSpecPatch) *GroupVersionResourcePatch {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(GroupVersionResourcePatchPtrOutput)
}

// Status of the storage version migration.
type StorageVersionMigrationStatus struct {
	// The latest available observations of the migration's current state.
	Conditions []MigrationCondition `pulumi:"conditions"`
	// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
	ResourceVersion *string `pulumi:"resourceVersion"`
}

// StorageVersionMigrationStatusInput is an input type that accepts StorageVersionMigrationStatusArgs and StorageVersionMigrationStatusOutput values.
// You can construct a concrete instance of `StorageVersionMigrationStatusInput` via:
//
//	StorageVersionMigrationStatusArgs{...}
type StorageVersionMigrationStatusInput interface {
	pulumi.Input

	ToStorageVersionMigrationStatusOutput() StorageVersionMigrationStatusOutput
	ToStorageVersionMigrationStatusOutputWithContext(context.Context) StorageVersionMigrationStatusOutput
}

// Status of the storage version migration.
type StorageVersionMigrationStatusArgs struct {
	// The latest available observations of the migration's current state.
	Conditions MigrationConditionArrayInput `pulumi:"conditions"`
	// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
}

func (StorageVersionMigrationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationStatus)(nil)).Elem()
}

func (i StorageVersionMigrationStatusArgs) ToStorageVersionMigrationStatusOutput() StorageVersionMigrationStatusOutput {
	return i.ToStorageVersionMigrationStatusOutputWithContext(context.Background())
}

func (i StorageVersionMigrationStatusArgs) ToStorageVersionMigrationStatusOutputWithContext(ctx context.Context) StorageVersionMigrationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusOutput)
}

func (i StorageVersionMigrationStatusArgs) ToStorageVersionMigrationStatusPtrOutput() StorageVersionMigrationStatusPtrOutput {
	return i.ToStorageVersionMigrationStatusPtrOutputWithContext(context.Background())
}

func (i StorageVersionMigrationStatusArgs) ToStorageVersionMigrationStatusPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusOutput).ToStorageVersionMigrationStatusPtrOutputWithContext(ctx)
}

// StorageVersionMigrationStatusPtrInput is an input type that accepts StorageVersionMigrationStatusArgs, StorageVersionMigrationStatusPtr and StorageVersionMigrationStatusPtrOutput values.
// You can construct a concrete instance of `StorageVersionMigrationStatusPtrInput` via:
//
//	        StorageVersionMigrationStatusArgs{...}
//
//	or:
//
//	        nil
type StorageVersionMigrationStatusPtrInput interface {
	pulumi.Input

	ToStorageVersionMigrationStatusPtrOutput() StorageVersionMigrationStatusPtrOutput
	ToStorageVersionMigrationStatusPtrOutputWithContext(context.Context) StorageVersionMigrationStatusPtrOutput
}

type storageVersionMigrationStatusPtrType StorageVersionMigrationStatusArgs

func StorageVersionMigrationStatusPtr(v *StorageVersionMigrationStatusArgs) StorageVersionMigrationStatusPtrInput {
	return (*storageVersionMigrationStatusPtrType)(v)
}

func (*storageVersionMigrationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationStatus)(nil)).Elem()
}

func (i *storageVersionMigrationStatusPtrType) ToStorageVersionMigrationStatusPtrOutput() StorageVersionMigrationStatusPtrOutput {
	return i.ToStorageVersionMigrationStatusPtrOutputWithContext(context.Background())
}

func (i *storageVersionMigrationStatusPtrType) ToStorageVersionMigrationStatusPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusPtrOutput)
}

// Status of the storage version migration.
type StorageVersionMigrationStatusOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationStatus)(nil)).Elem()
}

func (o StorageVersionMigrationStatusOutput) ToStorageVersionMigrationStatusOutput() StorageVersionMigrationStatusOutput {
	return o
}

func (o StorageVersionMigrationStatusOutput) ToStorageVersionMigrationStatusOutputWithContext(ctx context.Context) StorageVersionMigrationStatusOutput {
	return o
}

func (o StorageVersionMigrationStatusOutput) ToStorageVersionMigrationStatusPtrOutput() StorageVersionMigrationStatusPtrOutput {
	return o.ToStorageVersionMigrationStatusPtrOutputWithContext(context.Background())
}

func (o StorageVersionMigrationStatusOutput) ToStorageVersionMigrationStatusPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageVersionMigrationStatus) *StorageVersionMigrationStatus {
		return &v
	}).(StorageVersionMigrationStatusPtrOutput)
}

// The latest available observations of the migration's current state.
func (o StorageVersionMigrationStatusOutput) Conditions() MigrationConditionArrayOutput {
	return o.ApplyT(func(v StorageVersionMigrationStatus) []MigrationCondition { return v.Conditions }).(MigrationConditionArrayOutput)
}

// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
func (o StorageVersionMigrationStatusOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationStatus) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

type StorageVersionMigrationStatusPtrOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationStatus)(nil)).Elem()
}

func (o StorageVersionMigrationStatusPtrOutput) ToStorageVersionMigrationStatusPtrOutput() StorageVersionMigrationStatusPtrOutput {
	return o
}

func (o StorageVersionMigrationStatusPtrOutput) ToStorageVersionMigrationStatusPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPtrOutput {
	return o
}

func (o StorageVersionMigrationStatusPtrOutput) Elem() StorageVersionMigrationStatusOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatus) StorageVersionMigrationStatus {
		if v != nil {
			return *v
		}
		var ret StorageVersionMigrationStatus
		return ret
	}).(StorageVersionMigrationStatusOutput)
}

// The latest available observations of the migration's current state.
func (o StorageVersionMigrationStatusPtrOutput) Conditions() MigrationConditionArrayOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatus) []MigrationCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MigrationConditionArrayOutput)
}

// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
func (o StorageVersionMigrationStatusPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Status of the storage version migration.
type StorageVersionMigrationStatusPatch struct {
	// The latest available observations of the migration's current state.
	Conditions []MigrationConditionPatch `pulumi:"conditions"`
	// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
	ResourceVersion *string `pulumi:"resourceVersion"`
}

// StorageVersionMigrationStatusPatchInput is an input type that accepts StorageVersionMigrationStatusPatchArgs and StorageVersionMigrationStatusPatchOutput values.
// You can construct a concrete instance of `StorageVersionMigrationStatusPatchInput` via:
//
//	StorageVersionMigrationStatusPatchArgs{...}
type StorageVersionMigrationStatusPatchInput interface {
	pulumi.Input

	ToStorageVersionMigrationStatusPatchOutput() StorageVersionMigrationStatusPatchOutput
	ToStorageVersionMigrationStatusPatchOutputWithContext(context.Context) StorageVersionMigrationStatusPatchOutput
}

// Status of the storage version migration.
type StorageVersionMigrationStatusPatchArgs struct {
	// The latest available observations of the migration's current state.
	Conditions MigrationConditionPatchArrayInput `pulumi:"conditions"`
	// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
}

func (StorageVersionMigrationStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationStatusPatch)(nil)).Elem()
}

func (i StorageVersionMigrationStatusPatchArgs) ToStorageVersionMigrationStatusPatchOutput() StorageVersionMigrationStatusPatchOutput {
	return i.ToStorageVersionMigrationStatusPatchOutputWithContext(context.Background())
}

func (i StorageVersionMigrationStatusPatchArgs) ToStorageVersionMigrationStatusPatchOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusPatchOutput)
}

func (i StorageVersionMigrationStatusPatchArgs) ToStorageVersionMigrationStatusPatchPtrOutput() StorageVersionMigrationStatusPatchPtrOutput {
	return i.ToStorageVersionMigrationStatusPatchPtrOutputWithContext(context.Background())
}

func (i StorageVersionMigrationStatusPatchArgs) ToStorageVersionMigrationStatusPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusPatchOutput).ToStorageVersionMigrationStatusPatchPtrOutputWithContext(ctx)
}

// StorageVersionMigrationStatusPatchPtrInput is an input type that accepts StorageVersionMigrationStatusPatchArgs, StorageVersionMigrationStatusPatchPtr and StorageVersionMigrationStatusPatchPtrOutput values.
// You can construct a concrete instance of `StorageVersionMigrationStatusPatchPtrInput` via:
//
//	        StorageVersionMigrationStatusPatchArgs{...}
//
//	or:
//
//	        nil
type StorageVersionMigrationStatusPatchPtrInput interface {
	pulumi.Input

	ToStorageVersionMigrationStatusPatchPtrOutput() StorageVersionMigrationStatusPatchPtrOutput
	ToStorageVersionMigrationStatusPatchPtrOutputWithContext(context.Context) StorageVersionMigrationStatusPatchPtrOutput
}

type storageVersionMigrationStatusPatchPtrType StorageVersionMigrationStatusPatchArgs

func StorageVersionMigrationStatusPatchPtr(v *StorageVersionMigrationStatusPatchArgs) StorageVersionMigrationStatusPatchPtrInput {
	return (*storageVersionMigrationStatusPatchPtrType)(v)
}

func (*storageVersionMigrationStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationStatusPatch)(nil)).Elem()
}

func (i *storageVersionMigrationStatusPatchPtrType) ToStorageVersionMigrationStatusPatchPtrOutput() StorageVersionMigrationStatusPatchPtrOutput {
	return i.ToStorageVersionMigrationStatusPatchPtrOutputWithContext(context.Background())
}

func (i *storageVersionMigrationStatusPatchPtrType) ToStorageVersionMigrationStatusPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageVersionMigrationStatusPatchPtrOutput)
}

// Status of the storage version migration.
type StorageVersionMigrationStatusPatchOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageVersionMigrationStatusPatch)(nil)).Elem()
}

func (o StorageVersionMigrationStatusPatchOutput) ToStorageVersionMigrationStatusPatchOutput() StorageVersionMigrationStatusPatchOutput {
	return o
}

func (o StorageVersionMigrationStatusPatchOutput) ToStorageVersionMigrationStatusPatchOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchOutput {
	return o
}

func (o StorageVersionMigrationStatusPatchOutput) ToStorageVersionMigrationStatusPatchPtrOutput() StorageVersionMigrationStatusPatchPtrOutput {
	return o.ToStorageVersionMigrationStatusPatchPtrOutputWithContext(context.Background())
}

func (o StorageVersionMigrationStatusPatchOutput) ToStorageVersionMigrationStatusPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageVersionMigrationStatusPatch) *StorageVersionMigrationStatusPatch {
		return &v
	}).(StorageVersionMigrationStatusPatchPtrOutput)
}

// The latest available observations of the migration's current state.
func (o StorageVersionMigrationStatusPatchOutput) Conditions() MigrationConditionPatchArrayOutput {
	return o.ApplyT(func(v StorageVersionMigrationStatusPatch) []MigrationConditionPatch { return v.Conditions }).(MigrationConditionPatchArrayOutput)
}

// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
func (o StorageVersionMigrationStatusPatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageVersionMigrationStatusPatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

type StorageVersionMigrationStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (StorageVersionMigrationStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageVersionMigrationStatusPatch)(nil)).Elem()
}

func (o StorageVersionMigrationStatusPatchPtrOutput) ToStorageVersionMigrationStatusPatchPtrOutput() StorageVersionMigrationStatusPatchPtrOutput {
	return o
}

func (o StorageVersionMigrationStatusPatchPtrOutput) ToStorageVersionMigrationStatusPatchPtrOutputWithContext(ctx context.Context) StorageVersionMigrationStatusPatchPtrOutput {
	return o
}

func (o StorageVersionMigrationStatusPatchPtrOutput) Elem() StorageVersionMigrationStatusPatchOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatusPatch) StorageVersionMigrationStatusPatch {
		if v != nil {
			return *v
		}
		var ret StorageVersionMigrationStatusPatch
		return ret
	}).(StorageVersionMigrationStatusPatchOutput)
}

// The latest available observations of the migration's current state.
func (o StorageVersionMigrationStatusPatchPtrOutput) Conditions() MigrationConditionPatchArrayOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatusPatch) []MigrationConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MigrationConditionPatchArrayOutput)
}

// ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
func (o StorageVersionMigrationStatusPatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageVersionMigrationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupVersionResourceInput)(nil)).Elem(), GroupVersionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupVersionResourcePtrInput)(nil)).Elem(), GroupVersionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupVersionResourcePatchInput)(nil)).Elem(), GroupVersionResourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupVersionResourcePatchPtrInput)(nil)).Elem(), GroupVersionResourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationConditionInput)(nil)).Elem(), MigrationConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationConditionArrayInput)(nil)).Elem(), MigrationConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationConditionPatchInput)(nil)).Elem(), MigrationConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationConditionPatchArrayInput)(nil)).Elem(), MigrationConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationTypeInput)(nil)).Elem(), StorageVersionMigrationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationTypeArrayInput)(nil)).Elem(), StorageVersionMigrationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationListTypeInput)(nil)).Elem(), StorageVersionMigrationListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationPatchTypeInput)(nil)).Elem(), StorageVersionMigrationPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationSpecInput)(nil)).Elem(), StorageVersionMigrationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationSpecPtrInput)(nil)).Elem(), StorageVersionMigrationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationSpecPatchInput)(nil)).Elem(), StorageVersionMigrationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationSpecPatchPtrInput)(nil)).Elem(), StorageVersionMigrationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationStatusInput)(nil)).Elem(), StorageVersionMigrationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationStatusPtrInput)(nil)).Elem(), StorageVersionMigrationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationStatusPatchInput)(nil)).Elem(), StorageVersionMigrationStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageVersionMigrationStatusPatchPtrInput)(nil)).Elem(), StorageVersionMigrationStatusPatchArgs{})
	pulumi.RegisterOutputType(GroupVersionResourceOutput{})
	pulumi.RegisterOutputType(GroupVersionResourcePtrOutput{})
	pulumi.RegisterOutputType(GroupVersionResourcePatchOutput{})
	pulumi.RegisterOutputType(GroupVersionResourcePatchPtrOutput{})
	pulumi.RegisterOutputType(MigrationConditionOutput{})
	pulumi.RegisterOutputType(MigrationConditionArrayOutput{})
	pulumi.RegisterOutputType(MigrationConditionPatchOutput{})
	pulumi.RegisterOutputType(MigrationConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationTypeOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationTypeArrayOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationListTypeOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationPatchTypeOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationSpecOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationSpecPtrOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationSpecPatchOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationStatusOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationStatusPtrOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationStatusPatchOutput{})
	pulumi.RegisterOutputType(StorageVersionMigrationStatusPatchPtrOutput{})
}
