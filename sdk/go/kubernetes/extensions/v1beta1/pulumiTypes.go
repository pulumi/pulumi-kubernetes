// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriver struct {
	// Name is the registered name of the CSI driver
	Name *string `pulumi:"name"`
}

// AllowedCSIDriverInput is an input type that accepts AllowedCSIDriverArgs and AllowedCSIDriverOutput values.
// You can construct a concrete instance of `AllowedCSIDriverInput` via:
//
// 		 AllowedCSIDriverArgs{...}
//
type AllowedCSIDriverInput interface {
	pulumi.Input

	ToAllowedCSIDriverOutput() AllowedCSIDriverOutput
	ToAllowedCSIDriverOutputWithContext(context.Context) AllowedCSIDriverOutput
}

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriverArgs struct {
	// Name is the registered name of the CSI driver
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AllowedCSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedCSIDriver)(nil)).Elem()
}

func (i AllowedCSIDriverArgs) ToAllowedCSIDriverOutput() AllowedCSIDriverOutput {
	return i.ToAllowedCSIDriverOutputWithContext(context.Background())
}

func (i AllowedCSIDriverArgs) ToAllowedCSIDriverOutputWithContext(ctx context.Context) AllowedCSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedCSIDriverOutput)
}

// AllowedCSIDriverArrayInput is an input type that accepts AllowedCSIDriverArray and AllowedCSIDriverArrayOutput values.
// You can construct a concrete instance of `AllowedCSIDriverArrayInput` via:
//
// 		 AllowedCSIDriverArray{ AllowedCSIDriverArgs{...} }
//
type AllowedCSIDriverArrayInput interface {
	pulumi.Input

	ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput
	ToAllowedCSIDriverArrayOutputWithContext(context.Context) AllowedCSIDriverArrayOutput
}

type AllowedCSIDriverArray []AllowedCSIDriverInput

func (AllowedCSIDriverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedCSIDriver)(nil)).Elem()
}

func (i AllowedCSIDriverArray) ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput {
	return i.ToAllowedCSIDriverArrayOutputWithContext(context.Background())
}

func (i AllowedCSIDriverArray) ToAllowedCSIDriverArrayOutputWithContext(ctx context.Context) AllowedCSIDriverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedCSIDriverArrayOutput)
}

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriverOutput struct{ *pulumi.OutputState }

func (AllowedCSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedCSIDriver)(nil)).Elem()
}

func (o AllowedCSIDriverOutput) ToAllowedCSIDriverOutput() AllowedCSIDriverOutput {
	return o
}

func (o AllowedCSIDriverOutput) ToAllowedCSIDriverOutputWithContext(ctx context.Context) AllowedCSIDriverOutput {
	return o
}

// Name is the registered name of the CSI driver
func (o AllowedCSIDriverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedCSIDriver) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AllowedCSIDriverArrayOutput struct{ *pulumi.OutputState }

func (AllowedCSIDriverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedCSIDriver)(nil)).Elem()
}

func (o AllowedCSIDriverArrayOutput) ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput {
	return o
}

func (o AllowedCSIDriverArrayOutput) ToAllowedCSIDriverArrayOutputWithContext(ctx context.Context) AllowedCSIDriverArrayOutput {
	return o
}

func (o AllowedCSIDriverArrayOutput) Index(i pulumi.IntInput) AllowedCSIDriverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedCSIDriver {
		return vs[0].([]AllowedCSIDriver)[vs[1].(int)]
	}).(AllowedCSIDriverOutput)
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used. Deprecated: use AllowedFlexVolume from policy API Group instead.
type AllowedFlexVolume struct {
	// driver is the name of the Flexvolume driver.
	Driver *string `pulumi:"driver"`
}

// AllowedFlexVolumeInput is an input type that accepts AllowedFlexVolumeArgs and AllowedFlexVolumeOutput values.
// You can construct a concrete instance of `AllowedFlexVolumeInput` via:
//
// 		 AllowedFlexVolumeArgs{...}
//
type AllowedFlexVolumeInput interface {
	pulumi.Input

	ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput
	ToAllowedFlexVolumeOutputWithContext(context.Context) AllowedFlexVolumeOutput
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used. Deprecated: use AllowedFlexVolume from policy API Group instead.
type AllowedFlexVolumeArgs struct {
	// driver is the name of the Flexvolume driver.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
}

func (AllowedFlexVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedFlexVolume)(nil)).Elem()
}

func (i AllowedFlexVolumeArgs) ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput {
	return i.ToAllowedFlexVolumeOutputWithContext(context.Background())
}

func (i AllowedFlexVolumeArgs) ToAllowedFlexVolumeOutputWithContext(ctx context.Context) AllowedFlexVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedFlexVolumeOutput)
}

// AllowedFlexVolumeArrayInput is an input type that accepts AllowedFlexVolumeArray and AllowedFlexVolumeArrayOutput values.
// You can construct a concrete instance of `AllowedFlexVolumeArrayInput` via:
//
// 		 AllowedFlexVolumeArray{ AllowedFlexVolumeArgs{...} }
//
type AllowedFlexVolumeArrayInput interface {
	pulumi.Input

	ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput
	ToAllowedFlexVolumeArrayOutputWithContext(context.Context) AllowedFlexVolumeArrayOutput
}

type AllowedFlexVolumeArray []AllowedFlexVolumeInput

func (AllowedFlexVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedFlexVolume)(nil)).Elem()
}

func (i AllowedFlexVolumeArray) ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput {
	return i.ToAllowedFlexVolumeArrayOutputWithContext(context.Background())
}

func (i AllowedFlexVolumeArray) ToAllowedFlexVolumeArrayOutputWithContext(ctx context.Context) AllowedFlexVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedFlexVolumeArrayOutput)
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used. Deprecated: use AllowedFlexVolume from policy API Group instead.
type AllowedFlexVolumeOutput struct{ *pulumi.OutputState }

func (AllowedFlexVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedFlexVolume)(nil)).Elem()
}

func (o AllowedFlexVolumeOutput) ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput {
	return o
}

func (o AllowedFlexVolumeOutput) ToAllowedFlexVolumeOutputWithContext(ctx context.Context) AllowedFlexVolumeOutput {
	return o
}

// driver is the name of the Flexvolume driver.
func (o AllowedFlexVolumeOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedFlexVolume) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

type AllowedFlexVolumeArrayOutput struct{ *pulumi.OutputState }

func (AllowedFlexVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedFlexVolume)(nil)).Elem()
}

func (o AllowedFlexVolumeArrayOutput) ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput {
	return o
}

func (o AllowedFlexVolumeArrayOutput) ToAllowedFlexVolumeArrayOutputWithContext(ctx context.Context) AllowedFlexVolumeArrayOutput {
	return o
}

func (o AllowedFlexVolumeArrayOutput) Index(i pulumi.IntInput) AllowedFlexVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedFlexVolume {
		return vs[0].([]AllowedFlexVolume)[vs[1].(int)]
	}).(AllowedFlexVolumeOutput)
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. Deprecated: use AllowedHostPath from policy API Group instead.
type AllowedHostPath struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
	//
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
	PathPrefix *string `pulumi:"pathPrefix"`
	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AllowedHostPathInput is an input type that accepts AllowedHostPathArgs and AllowedHostPathOutput values.
// You can construct a concrete instance of `AllowedHostPathInput` via:
//
// 		 AllowedHostPathArgs{...}
//
type AllowedHostPathInput interface {
	pulumi.Input

	ToAllowedHostPathOutput() AllowedHostPathOutput
	ToAllowedHostPathOutputWithContext(context.Context) AllowedHostPathOutput
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. Deprecated: use AllowedHostPath from policy API Group instead.
type AllowedHostPathArgs struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
	//
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
	PathPrefix pulumi.StringPtrInput `pulumi:"pathPrefix"`
	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AllowedHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedHostPath)(nil)).Elem()
}

func (i AllowedHostPathArgs) ToAllowedHostPathOutput() AllowedHostPathOutput {
	return i.ToAllowedHostPathOutputWithContext(context.Background())
}

func (i AllowedHostPathArgs) ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedHostPathOutput)
}

// AllowedHostPathArrayInput is an input type that accepts AllowedHostPathArray and AllowedHostPathArrayOutput values.
// You can construct a concrete instance of `AllowedHostPathArrayInput` via:
//
// 		 AllowedHostPathArray{ AllowedHostPathArgs{...} }
//
type AllowedHostPathArrayInput interface {
	pulumi.Input

	ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput
	ToAllowedHostPathArrayOutputWithContext(context.Context) AllowedHostPathArrayOutput
}

type AllowedHostPathArray []AllowedHostPathInput

func (AllowedHostPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedHostPath)(nil)).Elem()
}

func (i AllowedHostPathArray) ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput {
	return i.ToAllowedHostPathArrayOutputWithContext(context.Background())
}

func (i AllowedHostPathArray) ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedHostPathArrayOutput)
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. Deprecated: use AllowedHostPath from policy API Group instead.
type AllowedHostPathOutput struct{ *pulumi.OutputState }

func (AllowedHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedHostPath)(nil)).Elem()
}

func (o AllowedHostPathOutput) ToAllowedHostPathOutput() AllowedHostPathOutput {
	return o
}

func (o AllowedHostPathOutput) ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput {
	return o
}

// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
//
// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
func (o AllowedHostPathOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedHostPath) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
func (o AllowedHostPathOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedHostPath) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AllowedHostPathArrayOutput struct{ *pulumi.OutputState }

func (AllowedHostPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedHostPath)(nil)).Elem()
}

func (o AllowedHostPathArrayOutput) ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput {
	return o
}

func (o AllowedHostPathArrayOutput) ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput {
	return o
}

func (o AllowedHostPathArrayOutput) Index(i pulumi.IntInput) AllowedHostPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedHostPath {
		return vs[0].([]AllowedHostPath)[vs[1].(int)]
	}).(AllowedHostPathOutput)
}

// DaemonSet represents the configuration of a daemon set.
type DaemonSetType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *DaemonSetSpec `pulumi:"spec"`
	// The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *DaemonSetStatus `pulumi:"status"`
}

// DaemonSetTypeInput is an input type that accepts DaemonSetTypeArgs and DaemonSetTypeOutput values.
// You can construct a concrete instance of `DaemonSetTypeInput` via:
//
// 		 DaemonSetTypeArgs{...}
//
type DaemonSetTypeInput interface {
	pulumi.Input

	ToDaemonSetTypeOutput() DaemonSetTypeOutput
	ToDaemonSetTypeOutputWithContext(context.Context) DaemonSetTypeOutput
}

// DaemonSet represents the configuration of a daemon set.
type DaemonSetTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec DaemonSetSpecPtrInput `pulumi:"spec"`
	// The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status DaemonSetStatusPtrInput `pulumi:"status"`
}

func (DaemonSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetType)(nil)).Elem()
}

func (i DaemonSetTypeArgs) ToDaemonSetTypeOutput() DaemonSetTypeOutput {
	return i.ToDaemonSetTypeOutputWithContext(context.Background())
}

func (i DaemonSetTypeArgs) ToDaemonSetTypeOutputWithContext(ctx context.Context) DaemonSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetTypeOutput)
}

// DaemonSetTypeArrayInput is an input type that accepts DaemonSetTypeArray and DaemonSetTypeArrayOutput values.
// You can construct a concrete instance of `DaemonSetTypeArrayInput` via:
//
// 		 DaemonSetTypeArray{ DaemonSetTypeArgs{...} }
//
type DaemonSetTypeArrayInput interface {
	pulumi.Input

	ToDaemonSetTypeArrayOutput() DaemonSetTypeArrayOutput
	ToDaemonSetTypeArrayOutputWithContext(context.Context) DaemonSetTypeArrayOutput
}

type DaemonSetTypeArray []DaemonSetTypeInput

func (DaemonSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaemonSetType)(nil)).Elem()
}

func (i DaemonSetTypeArray) ToDaemonSetTypeArrayOutput() DaemonSetTypeArrayOutput {
	return i.ToDaemonSetTypeArrayOutputWithContext(context.Background())
}

func (i DaemonSetTypeArray) ToDaemonSetTypeArrayOutputWithContext(ctx context.Context) DaemonSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetTypeArrayOutput)
}

// DaemonSet represents the configuration of a daemon set.
type DaemonSetTypeOutput struct{ *pulumi.OutputState }

func (DaemonSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetType)(nil)).Elem()
}

func (o DaemonSetTypeOutput) ToDaemonSetTypeOutput() DaemonSetTypeOutput {
	return o
}

func (o DaemonSetTypeOutput) ToDaemonSetTypeOutputWithContext(ctx context.Context) DaemonSetTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DaemonSetTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DaemonSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DaemonSetTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DaemonSetType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o DaemonSetTypeOutput) Spec() DaemonSetSpecPtrOutput {
	return o.ApplyT(func(v DaemonSetType) *DaemonSetSpec { return v.Spec }).(DaemonSetSpecPtrOutput)
}

// The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o DaemonSetTypeOutput) Status() DaemonSetStatusPtrOutput {
	return o.ApplyT(func(v DaemonSetType) *DaemonSetStatus { return v.Status }).(DaemonSetStatusPtrOutput)
}

type DaemonSetTypeArrayOutput struct{ *pulumi.OutputState }

func (DaemonSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaemonSetType)(nil)).Elem()
}

func (o DaemonSetTypeArrayOutput) ToDaemonSetTypeArrayOutput() DaemonSetTypeArrayOutput {
	return o
}

func (o DaemonSetTypeArrayOutput) ToDaemonSetTypeArrayOutputWithContext(ctx context.Context) DaemonSetTypeArrayOutput {
	return o
}

func (o DaemonSetTypeArrayOutput) Index(i pulumi.IntInput) DaemonSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaemonSetType {
		return vs[0].([]DaemonSetType)[vs[1].(int)]
	}).(DaemonSetTypeOutput)
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type DaemonSetCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of DaemonSet condition.
	Type *string `pulumi:"type"`
}

// DaemonSetConditionInput is an input type that accepts DaemonSetConditionArgs and DaemonSetConditionOutput values.
// You can construct a concrete instance of `DaemonSetConditionInput` via:
//
// 		 DaemonSetConditionArgs{...}
//
type DaemonSetConditionInput interface {
	pulumi.Input

	ToDaemonSetConditionOutput() DaemonSetConditionOutput
	ToDaemonSetConditionOutputWithContext(context.Context) DaemonSetConditionOutput
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type DaemonSetConditionArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of DaemonSet condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DaemonSetConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetCondition)(nil)).Elem()
}

func (i DaemonSetConditionArgs) ToDaemonSetConditionOutput() DaemonSetConditionOutput {
	return i.ToDaemonSetConditionOutputWithContext(context.Background())
}

func (i DaemonSetConditionArgs) ToDaemonSetConditionOutputWithContext(ctx context.Context) DaemonSetConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetConditionOutput)
}

// DaemonSetConditionArrayInput is an input type that accepts DaemonSetConditionArray and DaemonSetConditionArrayOutput values.
// You can construct a concrete instance of `DaemonSetConditionArrayInput` via:
//
// 		 DaemonSetConditionArray{ DaemonSetConditionArgs{...} }
//
type DaemonSetConditionArrayInput interface {
	pulumi.Input

	ToDaemonSetConditionArrayOutput() DaemonSetConditionArrayOutput
	ToDaemonSetConditionArrayOutputWithContext(context.Context) DaemonSetConditionArrayOutput
}

type DaemonSetConditionArray []DaemonSetConditionInput

func (DaemonSetConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaemonSetCondition)(nil)).Elem()
}

func (i DaemonSetConditionArray) ToDaemonSetConditionArrayOutput() DaemonSetConditionArrayOutput {
	return i.ToDaemonSetConditionArrayOutputWithContext(context.Background())
}

func (i DaemonSetConditionArray) ToDaemonSetConditionArrayOutputWithContext(ctx context.Context) DaemonSetConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetConditionArrayOutput)
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type DaemonSetConditionOutput struct{ *pulumi.OutputState }

func (DaemonSetConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetCondition)(nil)).Elem()
}

func (o DaemonSetConditionOutput) ToDaemonSetConditionOutput() DaemonSetConditionOutput {
	return o
}

func (o DaemonSetConditionOutput) ToDaemonSetConditionOutputWithContext(ctx context.Context) DaemonSetConditionOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o DaemonSetConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o DaemonSetConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o DaemonSetConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o DaemonSetConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of DaemonSet condition.
func (o DaemonSetConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DaemonSetConditionArrayOutput struct{ *pulumi.OutputState }

func (DaemonSetConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaemonSetCondition)(nil)).Elem()
}

func (o DaemonSetConditionArrayOutput) ToDaemonSetConditionArrayOutput() DaemonSetConditionArrayOutput {
	return o
}

func (o DaemonSetConditionArrayOutput) ToDaemonSetConditionArrayOutputWithContext(ctx context.Context) DaemonSetConditionArrayOutput {
	return o
}

func (o DaemonSetConditionArrayOutput) Index(i pulumi.IntInput) DaemonSetConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaemonSetCondition {
		return vs[0].([]DaemonSetCondition)[vs[1].(int)]
	}).(DaemonSetConditionOutput)
}

// DaemonSetList is a collection of daemon sets.
type DaemonSetListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// A list of daemon sets.
	Items []DaemonSetType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// DaemonSetListTypeInput is an input type that accepts DaemonSetListTypeArgs and DaemonSetListTypeOutput values.
// You can construct a concrete instance of `DaemonSetListTypeInput` via:
//
// 		 DaemonSetListTypeArgs{...}
//
type DaemonSetListTypeInput interface {
	pulumi.Input

	ToDaemonSetListTypeOutput() DaemonSetListTypeOutput
	ToDaemonSetListTypeOutputWithContext(context.Context) DaemonSetListTypeOutput
}

// DaemonSetList is a collection of daemon sets.
type DaemonSetListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// A list of daemon sets.
	Items DaemonSetTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (DaemonSetListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetListType)(nil)).Elem()
}

func (i DaemonSetListTypeArgs) ToDaemonSetListTypeOutput() DaemonSetListTypeOutput {
	return i.ToDaemonSetListTypeOutputWithContext(context.Background())
}

func (i DaemonSetListTypeArgs) ToDaemonSetListTypeOutputWithContext(ctx context.Context) DaemonSetListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetListTypeOutput)
}

// DaemonSetList is a collection of daemon sets.
type DaemonSetListTypeOutput struct{ *pulumi.OutputState }

func (DaemonSetListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetListType)(nil)).Elem()
}

func (o DaemonSetListTypeOutput) ToDaemonSetListTypeOutput() DaemonSetListTypeOutput {
	return o
}

func (o DaemonSetListTypeOutput) ToDaemonSetListTypeOutputWithContext(ctx context.Context) DaemonSetListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DaemonSetListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// A list of daemon sets.
func (o DaemonSetListTypeOutput) Items() DaemonSetTypeArrayOutput {
	return o.ApplyT(func(v DaemonSetListType) []DaemonSetType { return v.Items }).(DaemonSetTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DaemonSetListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DaemonSetListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v DaemonSetListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// DaemonSetSpec is the specification of a daemon set.
type DaemonSetSpec struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template *corev1.PodTemplateSpec `pulumi:"template"`
	// DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
	TemplateGeneration *int `pulumi:"templateGeneration"`
	// An update strategy to replace existing DaemonSet pods with new pods.
	UpdateStrategy *DaemonSetUpdateStrategy `pulumi:"updateStrategy"`
}

// DaemonSetSpecInput is an input type that accepts DaemonSetSpecArgs and DaemonSetSpecOutput values.
// You can construct a concrete instance of `DaemonSetSpecInput` via:
//
// 		 DaemonSetSpecArgs{...}
//
type DaemonSetSpecInput interface {
	pulumi.Input

	ToDaemonSetSpecOutput() DaemonSetSpecOutput
	ToDaemonSetSpecOutputWithContext(context.Context) DaemonSetSpecOutput
}

// DaemonSetSpec is the specification of a daemon set.
type DaemonSetSpecArgs struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template corev1.PodTemplateSpecPtrInput `pulumi:"template"`
	// DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
	TemplateGeneration pulumi.IntPtrInput `pulumi:"templateGeneration"`
	// An update strategy to replace existing DaemonSet pods with new pods.
	UpdateStrategy DaemonSetUpdateStrategyPtrInput `pulumi:"updateStrategy"`
}

func (DaemonSetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetSpec)(nil)).Elem()
}

func (i DaemonSetSpecArgs) ToDaemonSetSpecOutput() DaemonSetSpecOutput {
	return i.ToDaemonSetSpecOutputWithContext(context.Background())
}

func (i DaemonSetSpecArgs) ToDaemonSetSpecOutputWithContext(ctx context.Context) DaemonSetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetSpecOutput)
}

func (i DaemonSetSpecArgs) ToDaemonSetSpecPtrOutput() DaemonSetSpecPtrOutput {
	return i.ToDaemonSetSpecPtrOutputWithContext(context.Background())
}

func (i DaemonSetSpecArgs) ToDaemonSetSpecPtrOutputWithContext(ctx context.Context) DaemonSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetSpecOutput).ToDaemonSetSpecPtrOutputWithContext(ctx)
}

// DaemonSetSpecPtrInput is an input type that accepts DaemonSetSpecArgs, DaemonSetSpecPtr and DaemonSetSpecPtrOutput values.
// You can construct a concrete instance of `DaemonSetSpecPtrInput` via:
//
// 		 DaemonSetSpecArgs{...}
//
//  or:
//
// 		 nil
//
type DaemonSetSpecPtrInput interface {
	pulumi.Input

	ToDaemonSetSpecPtrOutput() DaemonSetSpecPtrOutput
	ToDaemonSetSpecPtrOutputWithContext(context.Context) DaemonSetSpecPtrOutput
}

type daemonSetSpecPtrType DaemonSetSpecArgs

func DaemonSetSpecPtr(v *DaemonSetSpecArgs) DaemonSetSpecPtrInput {
	return (*daemonSetSpecPtrType)(v)
}

func (*daemonSetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetSpec)(nil)).Elem()
}

func (i *daemonSetSpecPtrType) ToDaemonSetSpecPtrOutput() DaemonSetSpecPtrOutput {
	return i.ToDaemonSetSpecPtrOutputWithContext(context.Background())
}

func (i *daemonSetSpecPtrType) ToDaemonSetSpecPtrOutputWithContext(ctx context.Context) DaemonSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetSpecPtrOutput)
}

// DaemonSetSpec is the specification of a daemon set.
type DaemonSetSpecOutput struct{ *pulumi.OutputState }

func (DaemonSetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetSpec)(nil)).Elem()
}

func (o DaemonSetSpecOutput) ToDaemonSetSpecOutput() DaemonSetSpecOutput {
	return o
}

func (o DaemonSetSpecOutput) ToDaemonSetSpecOutputWithContext(ctx context.Context) DaemonSetSpecOutput {
	return o
}

func (o DaemonSetSpecOutput) ToDaemonSetSpecPtrOutput() DaemonSetSpecPtrOutput {
	return o.ToDaemonSetSpecPtrOutputWithContext(context.Background())
}

func (o DaemonSetSpecOutput) ToDaemonSetSpecPtrOutputWithContext(ctx context.Context) DaemonSetSpecPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *DaemonSetSpec {
		return &v
	}).(DaemonSetSpecPtrOutput)
}

// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
func (o DaemonSetSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
func (o DaemonSetSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o DaemonSetSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o DaemonSetSpecOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

// DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
func (o DaemonSetSpecOutput) TemplateGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.TemplateGeneration }).(pulumi.IntPtrOutput)
}

// An update strategy to replace existing DaemonSet pods with new pods.
func (o DaemonSetSpecOutput) UpdateStrategy() DaemonSetUpdateStrategyPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *DaemonSetUpdateStrategy { return v.UpdateStrategy }).(DaemonSetUpdateStrategyPtrOutput)
}

type DaemonSetSpecPtrOutput struct{ *pulumi.OutputState }

func (DaemonSetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetSpec)(nil)).Elem()
}

func (o DaemonSetSpecPtrOutput) ToDaemonSetSpecPtrOutput() DaemonSetSpecPtrOutput {
	return o
}

func (o DaemonSetSpecPtrOutput) ToDaemonSetSpecPtrOutputWithContext(ctx context.Context) DaemonSetSpecPtrOutput {
	return o
}

func (o DaemonSetSpecPtrOutput) Elem() DaemonSetSpecOutput {
	return o.ApplyT(func(v *DaemonSetSpec) DaemonSetSpec { return *v }).(DaemonSetSpecOutput)
}

// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
func (o DaemonSetSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
func (o DaemonSetSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o DaemonSetSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o DaemonSetSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

// DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
func (o DaemonSetSpecPtrOutput) TemplateGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *int { return v.TemplateGeneration }).(pulumi.IntPtrOutput)
}

// An update strategy to replace existing DaemonSet pods with new pods.
func (o DaemonSetSpecPtrOutput) UpdateStrategy() DaemonSetUpdateStrategyPtrOutput {
	return o.ApplyT(func(v DaemonSetSpec) *DaemonSetUpdateStrategy { return v.UpdateStrategy }).(DaemonSetUpdateStrategyPtrOutput)
}

// DaemonSetStatus represents the current status of a daemon set.
type DaemonSetStatus struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []DaemonSetCondition `pulumi:"conditions"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled *int `pulumi:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled *int `pulumi:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable *int `pulumi:"numberAvailable"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled *int `pulumi:"numberMisscheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
	NumberReady *int `pulumi:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable *int `pulumi:"numberUnavailable"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled *int `pulumi:"updatedNumberScheduled"`
}

// DaemonSetStatusInput is an input type that accepts DaemonSetStatusArgs and DaemonSetStatusOutput values.
// You can construct a concrete instance of `DaemonSetStatusInput` via:
//
// 		 DaemonSetStatusArgs{...}
//
type DaemonSetStatusInput interface {
	pulumi.Input

	ToDaemonSetStatusOutput() DaemonSetStatusOutput
	ToDaemonSetStatusOutputWithContext(context.Context) DaemonSetStatusOutput
}

// DaemonSetStatus represents the current status of a daemon set.
type DaemonSetStatusArgs struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions DaemonSetConditionArrayInput `pulumi:"conditions"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled pulumi.IntPtrInput `pulumi:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled pulumi.IntPtrInput `pulumi:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable pulumi.IntPtrInput `pulumi:"numberAvailable"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled pulumi.IntPtrInput `pulumi:"numberMisscheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
	NumberReady pulumi.IntPtrInput `pulumi:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable pulumi.IntPtrInput `pulumi:"numberUnavailable"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled pulumi.IntPtrInput `pulumi:"updatedNumberScheduled"`
}

func (DaemonSetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetStatus)(nil)).Elem()
}

func (i DaemonSetStatusArgs) ToDaemonSetStatusOutput() DaemonSetStatusOutput {
	return i.ToDaemonSetStatusOutputWithContext(context.Background())
}

func (i DaemonSetStatusArgs) ToDaemonSetStatusOutputWithContext(ctx context.Context) DaemonSetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetStatusOutput)
}

func (i DaemonSetStatusArgs) ToDaemonSetStatusPtrOutput() DaemonSetStatusPtrOutput {
	return i.ToDaemonSetStatusPtrOutputWithContext(context.Background())
}

func (i DaemonSetStatusArgs) ToDaemonSetStatusPtrOutputWithContext(ctx context.Context) DaemonSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetStatusOutput).ToDaemonSetStatusPtrOutputWithContext(ctx)
}

// DaemonSetStatusPtrInput is an input type that accepts DaemonSetStatusArgs, DaemonSetStatusPtr and DaemonSetStatusPtrOutput values.
// You can construct a concrete instance of `DaemonSetStatusPtrInput` via:
//
// 		 DaemonSetStatusArgs{...}
//
//  or:
//
// 		 nil
//
type DaemonSetStatusPtrInput interface {
	pulumi.Input

	ToDaemonSetStatusPtrOutput() DaemonSetStatusPtrOutput
	ToDaemonSetStatusPtrOutputWithContext(context.Context) DaemonSetStatusPtrOutput
}

type daemonSetStatusPtrType DaemonSetStatusArgs

func DaemonSetStatusPtr(v *DaemonSetStatusArgs) DaemonSetStatusPtrInput {
	return (*daemonSetStatusPtrType)(v)
}

func (*daemonSetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetStatus)(nil)).Elem()
}

func (i *daemonSetStatusPtrType) ToDaemonSetStatusPtrOutput() DaemonSetStatusPtrOutput {
	return i.ToDaemonSetStatusPtrOutputWithContext(context.Background())
}

func (i *daemonSetStatusPtrType) ToDaemonSetStatusPtrOutputWithContext(ctx context.Context) DaemonSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetStatusPtrOutput)
}

// DaemonSetStatus represents the current status of a daemon set.
type DaemonSetStatusOutput struct{ *pulumi.OutputState }

func (DaemonSetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetStatus)(nil)).Elem()
}

func (o DaemonSetStatusOutput) ToDaemonSetStatusOutput() DaemonSetStatusOutput {
	return o
}

func (o DaemonSetStatusOutput) ToDaemonSetStatusOutputWithContext(ctx context.Context) DaemonSetStatusOutput {
	return o
}

func (o DaemonSetStatusOutput) ToDaemonSetStatusPtrOutput() DaemonSetStatusPtrOutput {
	return o.ToDaemonSetStatusPtrOutputWithContext(context.Background())
}

func (o DaemonSetStatusOutput) ToDaemonSetStatusPtrOutputWithContext(ctx context.Context) DaemonSetStatusPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *DaemonSetStatus {
		return &v
	}).(DaemonSetStatusPtrOutput)
}

// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o DaemonSetStatusOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a DaemonSet's current state.
func (o DaemonSetStatusOutput) Conditions() DaemonSetConditionArrayOutput {
	return o.ApplyT(func(v DaemonSetStatus) []DaemonSetCondition { return v.Conditions }).(DaemonSetConditionArrayOutput)
}

// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusOutput) CurrentNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.CurrentNumberScheduled }).(pulumi.IntPtrOutput)
}

// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusOutput) DesiredNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.DesiredNumberScheduled }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
func (o DaemonSetStatusOutput) NumberAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberAvailable }).(pulumi.IntPtrOutput)
}

// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusOutput) NumberMisscheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberMisscheduled }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
func (o DaemonSetStatusOutput) NumberReady() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberReady }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
func (o DaemonSetStatusOutput) NumberUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberUnavailable }).(pulumi.IntPtrOutput)
}

// The most recent generation observed by the daemon set controller.
func (o DaemonSetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The total number of nodes that are running updated daemon pod
func (o DaemonSetStatusOutput) UpdatedNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.UpdatedNumberScheduled }).(pulumi.IntPtrOutput)
}

type DaemonSetStatusPtrOutput struct{ *pulumi.OutputState }

func (DaemonSetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetStatus)(nil)).Elem()
}

func (o DaemonSetStatusPtrOutput) ToDaemonSetStatusPtrOutput() DaemonSetStatusPtrOutput {
	return o
}

func (o DaemonSetStatusPtrOutput) ToDaemonSetStatusPtrOutputWithContext(ctx context.Context) DaemonSetStatusPtrOutput {
	return o
}

func (o DaemonSetStatusPtrOutput) Elem() DaemonSetStatusOutput {
	return o.ApplyT(func(v *DaemonSetStatus) DaemonSetStatus { return *v }).(DaemonSetStatusOutput)
}

// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o DaemonSetStatusPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a DaemonSet's current state.
func (o DaemonSetStatusPtrOutput) Conditions() DaemonSetConditionArrayOutput {
	return o.ApplyT(func(v DaemonSetStatus) []DaemonSetCondition { return v.Conditions }).(DaemonSetConditionArrayOutput)
}

// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusPtrOutput) CurrentNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.CurrentNumberScheduled }).(pulumi.IntPtrOutput)
}

// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusPtrOutput) DesiredNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.DesiredNumberScheduled }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
func (o DaemonSetStatusPtrOutput) NumberAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberAvailable }).(pulumi.IntPtrOutput)
}

// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
func (o DaemonSetStatusPtrOutput) NumberMisscheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberMisscheduled }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
func (o DaemonSetStatusPtrOutput) NumberReady() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberReady }).(pulumi.IntPtrOutput)
}

// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
func (o DaemonSetStatusPtrOutput) NumberUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.NumberUnavailable }).(pulumi.IntPtrOutput)
}

// The most recent generation observed by the daemon set controller.
func (o DaemonSetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The total number of nodes that are running updated daemon pod
func (o DaemonSetStatusPtrOutput) UpdatedNumberScheduled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonSetStatus) *int { return v.UpdatedNumberScheduled }).(pulumi.IntPtrOutput)
}

type DaemonSetUpdateStrategy struct {
	// Rolling update config params. Present only if type = "RollingUpdate".
	RollingUpdate *RollingUpdateDaemonSet `pulumi:"rollingUpdate"`
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is OnDelete.
	Type *string `pulumi:"type"`
}

// DaemonSetUpdateStrategyInput is an input type that accepts DaemonSetUpdateStrategyArgs and DaemonSetUpdateStrategyOutput values.
// You can construct a concrete instance of `DaemonSetUpdateStrategyInput` via:
//
// 		 DaemonSetUpdateStrategyArgs{...}
//
type DaemonSetUpdateStrategyInput interface {
	pulumi.Input

	ToDaemonSetUpdateStrategyOutput() DaemonSetUpdateStrategyOutput
	ToDaemonSetUpdateStrategyOutputWithContext(context.Context) DaemonSetUpdateStrategyOutput
}

type DaemonSetUpdateStrategyArgs struct {
	// Rolling update config params. Present only if type = "RollingUpdate".
	RollingUpdate RollingUpdateDaemonSetPtrInput `pulumi:"rollingUpdate"`
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is OnDelete.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DaemonSetUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetUpdateStrategy)(nil)).Elem()
}

func (i DaemonSetUpdateStrategyArgs) ToDaemonSetUpdateStrategyOutput() DaemonSetUpdateStrategyOutput {
	return i.ToDaemonSetUpdateStrategyOutputWithContext(context.Background())
}

func (i DaemonSetUpdateStrategyArgs) ToDaemonSetUpdateStrategyOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetUpdateStrategyOutput)
}

func (i DaemonSetUpdateStrategyArgs) ToDaemonSetUpdateStrategyPtrOutput() DaemonSetUpdateStrategyPtrOutput {
	return i.ToDaemonSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i DaemonSetUpdateStrategyArgs) ToDaemonSetUpdateStrategyPtrOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetUpdateStrategyOutput).ToDaemonSetUpdateStrategyPtrOutputWithContext(ctx)
}

// DaemonSetUpdateStrategyPtrInput is an input type that accepts DaemonSetUpdateStrategyArgs, DaemonSetUpdateStrategyPtr and DaemonSetUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `DaemonSetUpdateStrategyPtrInput` via:
//
// 		 DaemonSetUpdateStrategyArgs{...}
//
//  or:
//
// 		 nil
//
type DaemonSetUpdateStrategyPtrInput interface {
	pulumi.Input

	ToDaemonSetUpdateStrategyPtrOutput() DaemonSetUpdateStrategyPtrOutput
	ToDaemonSetUpdateStrategyPtrOutputWithContext(context.Context) DaemonSetUpdateStrategyPtrOutput
}

type daemonSetUpdateStrategyPtrType DaemonSetUpdateStrategyArgs

func DaemonSetUpdateStrategyPtr(v *DaemonSetUpdateStrategyArgs) DaemonSetUpdateStrategyPtrInput {
	return (*daemonSetUpdateStrategyPtrType)(v)
}

func (*daemonSetUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetUpdateStrategy)(nil)).Elem()
}

func (i *daemonSetUpdateStrategyPtrType) ToDaemonSetUpdateStrategyPtrOutput() DaemonSetUpdateStrategyPtrOutput {
	return i.ToDaemonSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *daemonSetUpdateStrategyPtrType) ToDaemonSetUpdateStrategyPtrOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonSetUpdateStrategyPtrOutput)
}

type DaemonSetUpdateStrategyOutput struct{ *pulumi.OutputState }

func (DaemonSetUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonSetUpdateStrategy)(nil)).Elem()
}

func (o DaemonSetUpdateStrategyOutput) ToDaemonSetUpdateStrategyOutput() DaemonSetUpdateStrategyOutput {
	return o
}

func (o DaemonSetUpdateStrategyOutput) ToDaemonSetUpdateStrategyOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyOutput {
	return o
}

func (o DaemonSetUpdateStrategyOutput) ToDaemonSetUpdateStrategyPtrOutput() DaemonSetUpdateStrategyPtrOutput {
	return o.ToDaemonSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o DaemonSetUpdateStrategyOutput) ToDaemonSetUpdateStrategyPtrOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyPtrOutput {
	return o.ApplyT(func(v DaemonSetUpdateStrategy) *DaemonSetUpdateStrategy {
		return &v
	}).(DaemonSetUpdateStrategyPtrOutput)
}

// Rolling update config params. Present only if type = "RollingUpdate".
func (o DaemonSetUpdateStrategyOutput) RollingUpdate() RollingUpdateDaemonSetPtrOutput {
	return o.ApplyT(func(v DaemonSetUpdateStrategy) *RollingUpdateDaemonSet { return v.RollingUpdate }).(RollingUpdateDaemonSetPtrOutput)
}

// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is OnDelete.
func (o DaemonSetUpdateStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetUpdateStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DaemonSetUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (DaemonSetUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonSetUpdateStrategy)(nil)).Elem()
}

func (o DaemonSetUpdateStrategyPtrOutput) ToDaemonSetUpdateStrategyPtrOutput() DaemonSetUpdateStrategyPtrOutput {
	return o
}

func (o DaemonSetUpdateStrategyPtrOutput) ToDaemonSetUpdateStrategyPtrOutputWithContext(ctx context.Context) DaemonSetUpdateStrategyPtrOutput {
	return o
}

func (o DaemonSetUpdateStrategyPtrOutput) Elem() DaemonSetUpdateStrategyOutput {
	return o.ApplyT(func(v *DaemonSetUpdateStrategy) DaemonSetUpdateStrategy { return *v }).(DaemonSetUpdateStrategyOutput)
}

// Rolling update config params. Present only if type = "RollingUpdate".
func (o DaemonSetUpdateStrategyPtrOutput) RollingUpdate() RollingUpdateDaemonSetPtrOutput {
	return o.ApplyT(func(v DaemonSetUpdateStrategy) *RollingUpdateDaemonSet { return v.RollingUpdate }).(RollingUpdateDaemonSetPtrOutput)
}

// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is OnDelete.
func (o DaemonSetUpdateStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaemonSetUpdateStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Deployment has begun to be updated by the Deployment controller. If the current
//    generation of the Deployment is > 1, then this means that the current generation must
//    be different from the generation reported by the last outputs.
// 2. There exists a ReplicaSet whose revision is equal to the current revision of the
//    Deployment.
// 3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//    member is set to 'True'.
// 4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//    'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//    'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//    because it doesn't do a rollout (i.e., it simply creates the Deployment and
//    corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec *DeploymentSpec `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status *DeploymentStatus `pulumi:"status"`
}

// DeploymentTypeInput is an input type that accepts DeploymentTypeArgs and DeploymentTypeOutput values.
// You can construct a concrete instance of `DeploymentTypeInput` via:
//
// 		 DeploymentTypeArgs{...}
//
type DeploymentTypeInput interface {
	pulumi.Input

	ToDeploymentTypeOutput() DeploymentTypeOutput
	ToDeploymentTypeOutputWithContext(context.Context) DeploymentTypeOutput
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Deployment has begun to be updated by the Deployment controller. If the current
//    generation of the Deployment is > 1, then this means that the current generation must
//    be different from the generation reported by the last outputs.
// 2. There exists a ReplicaSet whose revision is equal to the current revision of the
//    Deployment.
// 3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//    member is set to 'True'.
// 4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//    'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//    'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//    because it doesn't do a rollout (i.e., it simply creates the Deployment and
//    corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status DeploymentStatusPtrInput `pulumi:"status"`
}

func (DeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentType)(nil)).Elem()
}

func (i DeploymentTypeArgs) ToDeploymentTypeOutput() DeploymentTypeOutput {
	return i.ToDeploymentTypeOutputWithContext(context.Background())
}

func (i DeploymentTypeArgs) ToDeploymentTypeOutputWithContext(ctx context.Context) DeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTypeOutput)
}

// DeploymentTypeArrayInput is an input type that accepts DeploymentTypeArray and DeploymentTypeArrayOutput values.
// You can construct a concrete instance of `DeploymentTypeArrayInput` via:
//
// 		 DeploymentTypeArray{ DeploymentTypeArgs{...} }
//
type DeploymentTypeArrayInput interface {
	pulumi.Input

	ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput
	ToDeploymentTypeArrayOutputWithContext(context.Context) DeploymentTypeArrayOutput
}

type DeploymentTypeArray []DeploymentTypeInput

func (DeploymentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentType)(nil)).Elem()
}

func (i DeploymentTypeArray) ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput {
	return i.ToDeploymentTypeArrayOutputWithContext(context.Background())
}

func (i DeploymentTypeArray) ToDeploymentTypeArrayOutputWithContext(ctx context.Context) DeploymentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTypeArrayOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Deployment has begun to be updated by the Deployment controller. If the current
//    generation of the Deployment is > 1, then this means that the current generation must
//    be different from the generation reported by the last outputs.
// 2. There exists a ReplicaSet whose revision is equal to the current revision of the
//    Deployment.
// 3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//    member is set to 'True'.
// 4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//    'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//    'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//    because it doesn't do a rollout (i.e., it simply creates the Deployment and
//    corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentTypeOutput struct{ *pulumi.OutputState }

func (DeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentType)(nil)).Elem()
}

func (o DeploymentTypeOutput) ToDeploymentTypeOutput() DeploymentTypeOutput {
	return o
}

func (o DeploymentTypeOutput) ToDeploymentTypeOutputWithContext(ctx context.Context) DeploymentTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata.
func (o DeploymentTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DeploymentType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the Deployment.
func (o DeploymentTypeOutput) Spec() DeploymentSpecPtrOutput {
	return o.ApplyT(func(v DeploymentType) *DeploymentSpec { return v.Spec }).(DeploymentSpecPtrOutput)
}

// Most recently observed status of the Deployment.
func (o DeploymentTypeOutput) Status() DeploymentStatusPtrOutput {
	return o.ApplyT(func(v DeploymentType) *DeploymentStatus { return v.Status }).(DeploymentStatusPtrOutput)
}

type DeploymentTypeArrayOutput struct{ *pulumi.OutputState }

func (DeploymentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentType)(nil)).Elem()
}

func (o DeploymentTypeArrayOutput) ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput {
	return o
}

func (o DeploymentTypeArrayOutput) ToDeploymentTypeArrayOutputWithContext(ctx context.Context) DeploymentTypeArrayOutput {
	return o
}

func (o DeploymentTypeArrayOutput) Index(i pulumi.IntInput) DeploymentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentType {
		return vs[0].([]DeploymentType)[vs[1].(int)]
	}).(DeploymentTypeOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of deployment condition.
	Type *string `pulumi:"type"`
}

// DeploymentConditionInput is an input type that accepts DeploymentConditionArgs and DeploymentConditionOutput values.
// You can construct a concrete instance of `DeploymentConditionInput` via:
//
// 		 DeploymentConditionArgs{...}
//
type DeploymentConditionInput interface {
	pulumi.Input

	ToDeploymentConditionOutput() DeploymentConditionOutput
	ToDeploymentConditionOutputWithContext(context.Context) DeploymentConditionOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeploymentConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentCondition)(nil)).Elem()
}

func (i DeploymentConditionArgs) ToDeploymentConditionOutput() DeploymentConditionOutput {
	return i.ToDeploymentConditionOutputWithContext(context.Background())
}

func (i DeploymentConditionArgs) ToDeploymentConditionOutputWithContext(ctx context.Context) DeploymentConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionOutput)
}

// DeploymentConditionArrayInput is an input type that accepts DeploymentConditionArray and DeploymentConditionArrayOutput values.
// You can construct a concrete instance of `DeploymentConditionArrayInput` via:
//
// 		 DeploymentConditionArray{ DeploymentConditionArgs{...} }
//
type DeploymentConditionArrayInput interface {
	pulumi.Input

	ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput
	ToDeploymentConditionArrayOutputWithContext(context.Context) DeploymentConditionArrayOutput
}

type DeploymentConditionArray []DeploymentConditionInput

func (DeploymentConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentCondition)(nil)).Elem()
}

func (i DeploymentConditionArray) ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput {
	return i.ToDeploymentConditionArrayOutputWithContext(context.Background())
}

func (i DeploymentConditionArray) ToDeploymentConditionArrayOutputWithContext(ctx context.Context) DeploymentConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionOutput struct{ *pulumi.OutputState }

func (DeploymentConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentCondition)(nil)).Elem()
}

func (o DeploymentConditionOutput) ToDeploymentConditionOutput() DeploymentConditionOutput {
	return o
}

func (o DeploymentConditionOutput) ToDeploymentConditionOutputWithContext(ctx context.Context) DeploymentConditionOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o DeploymentConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o DeploymentConditionOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o DeploymentConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o DeploymentConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o DeploymentConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of deployment condition.
func (o DeploymentConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeploymentConditionArrayOutput struct{ *pulumi.OutputState }

func (DeploymentConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentCondition)(nil)).Elem()
}

func (o DeploymentConditionArrayOutput) ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput {
	return o
}

func (o DeploymentConditionArrayOutput) ToDeploymentConditionArrayOutputWithContext(ctx context.Context) DeploymentConditionArrayOutput {
	return o
}

func (o DeploymentConditionArrayOutput) Index(i pulumi.IntInput) DeploymentConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentCondition {
		return vs[0].([]DeploymentCondition)[vs[1].(int)]
	}).(DeploymentConditionOutput)
}

// DeploymentList is a list of Deployments.
type DeploymentListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of Deployments.
	Items []DeploymentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// DeploymentListTypeInput is an input type that accepts DeploymentListTypeArgs and DeploymentListTypeOutput values.
// You can construct a concrete instance of `DeploymentListTypeInput` via:
//
// 		 DeploymentListTypeArgs{...}
//
type DeploymentListTypeInput interface {
	pulumi.Input

	ToDeploymentListTypeOutput() DeploymentListTypeOutput
	ToDeploymentListTypeOutputWithContext(context.Context) DeploymentListTypeOutput
}

// DeploymentList is a list of Deployments.
type DeploymentListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of Deployments.
	Items DeploymentTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (DeploymentListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentListType)(nil)).Elem()
}

func (i DeploymentListTypeArgs) ToDeploymentListTypeOutput() DeploymentListTypeOutput {
	return i.ToDeploymentListTypeOutputWithContext(context.Background())
}

func (i DeploymentListTypeArgs) ToDeploymentListTypeOutputWithContext(ctx context.Context) DeploymentListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentListTypeOutput)
}

// DeploymentList is a list of Deployments.
type DeploymentListTypeOutput struct{ *pulumi.OutputState }

func (DeploymentListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentListType)(nil)).Elem()
}

func (o DeploymentListTypeOutput) ToDeploymentListTypeOutput() DeploymentListTypeOutput {
	return o
}

func (o DeploymentListTypeOutput) ToDeploymentListTypeOutputWithContext(ctx context.Context) DeploymentListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of Deployments.
func (o DeploymentListTypeOutput) Items() DeploymentTypeArrayOutput {
	return o.ApplyT(func(v DeploymentListType) []DeploymentType { return v.Items }).(DeploymentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o DeploymentListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollback struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name *string `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo *RollbackConfig `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations map[string]string `pulumi:"updatedAnnotations"`
}

// DeploymentRollbackInput is an input type that accepts DeploymentRollbackArgs and DeploymentRollbackOutput values.
// You can construct a concrete instance of `DeploymentRollbackInput` via:
//
// 		 DeploymentRollbackArgs{...}
//
type DeploymentRollbackInput interface {
	pulumi.Input

	ToDeploymentRollbackOutput() DeploymentRollbackOutput
	ToDeploymentRollbackOutputWithContext(context.Context) DeploymentRollbackOutput
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo RollbackConfigPtrInput `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations pulumi.StringMapInput `pulumi:"updatedAnnotations"`
}

func (DeploymentRollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollback)(nil)).Elem()
}

func (i DeploymentRollbackArgs) ToDeploymentRollbackOutput() DeploymentRollbackOutput {
	return i.ToDeploymentRollbackOutputWithContext(context.Background())
}

func (i DeploymentRollbackArgs) ToDeploymentRollbackOutputWithContext(ctx context.Context) DeploymentRollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRollbackOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackOutput struct{ *pulumi.OutputState }

func (DeploymentRollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollback)(nil)).Elem()
}

func (o DeploymentRollbackOutput) ToDeploymentRollbackOutput() DeploymentRollbackOutput {
	return o
}

func (o DeploymentRollbackOutput) ToDeploymentRollbackOutputWithContext(ctx context.Context) DeploymentRollbackOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentRollbackOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentRollbackOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Required: This must match the Name of a deployment.
func (o DeploymentRollbackOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The config of this deployment rollback.
func (o DeploymentRollbackOutput) RollbackTo() RollbackConfigPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *RollbackConfig { return v.RollbackTo }).(RollbackConfigPtrOutput)
}

// The annotations to be updated to a deployment
func (o DeploymentRollbackOutput) UpdatedAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeploymentRollback) map[string]string { return v.UpdatedAnnotations }).(pulumi.StringMapOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused and will not be processed by the deployment controller.
	Paused *bool `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is set to the max value of int32 (i.e. 2147483647) by default, which means "no deadline".
	ProgressDeadlineSeconds *int `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. This is set to the max value of int32 (i.e. 2147483647) by default, which means "retaining all old RelicaSets".
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo *RollbackConfig `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy *DeploymentStrategy `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template *corev1.PodTemplateSpec `pulumi:"template"`
}

// DeploymentSpecInput is an input type that accepts DeploymentSpecArgs and DeploymentSpecOutput values.
// You can construct a concrete instance of `DeploymentSpecInput` via:
//
// 		 DeploymentSpecArgs{...}
//
type DeploymentSpecInput interface {
	pulumi.Input

	ToDeploymentSpecOutput() DeploymentSpecOutput
	ToDeploymentSpecOutputWithContext(context.Context) DeploymentSpecOutput
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused and will not be processed by the deployment controller.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is set to the max value of int32 (i.e. 2147483647) by default, which means "no deadline".
	ProgressDeadlineSeconds pulumi.IntPtrInput `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. This is set to the max value of int32 (i.e. 2147483647) by default, which means "retaining all old RelicaSets".
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo RollbackConfigPtrInput `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy DeploymentStrategyPtrInput `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template corev1.PodTemplateSpecPtrInput `pulumi:"template"`
}

func (DeploymentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpec)(nil)).Elem()
}

func (i DeploymentSpecArgs) ToDeploymentSpecOutput() DeploymentSpecOutput {
	return i.ToDeploymentSpecOutputWithContext(context.Background())
}

func (i DeploymentSpecArgs) ToDeploymentSpecOutputWithContext(ctx context.Context) DeploymentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecOutput)
}

func (i DeploymentSpecArgs) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return i.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i DeploymentSpecArgs) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecOutput).ToDeploymentSpecPtrOutputWithContext(ctx)
}

// DeploymentSpecPtrInput is an input type that accepts DeploymentSpecArgs, DeploymentSpecPtr and DeploymentSpecPtrOutput values.
// You can construct a concrete instance of `DeploymentSpecPtrInput` via:
//
// 		 DeploymentSpecArgs{...}
//
//  or:
//
// 		 nil
//
type DeploymentSpecPtrInput interface {
	pulumi.Input

	ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput
	ToDeploymentSpecPtrOutputWithContext(context.Context) DeploymentSpecPtrOutput
}

type deploymentSpecPtrType DeploymentSpecArgs

func DeploymentSpecPtr(v *DeploymentSpecArgs) DeploymentSpecPtrInput {
	return (*deploymentSpecPtrType)(v)
}

func (*deploymentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpec)(nil)).Elem()
}

func (i *deploymentSpecPtrType) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return i.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i *deploymentSpecPtrType) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecPtrOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecOutput struct{ *pulumi.OutputState }

func (DeploymentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpec)(nil)).Elem()
}

func (o DeploymentSpecOutput) ToDeploymentSpecOutput() DeploymentSpecOutput {
	return o
}

func (o DeploymentSpecOutput) ToDeploymentSpecOutputWithContext(ctx context.Context) DeploymentSpecOutput {
	return o
}

func (o DeploymentSpecOutput) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return o.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (o DeploymentSpecOutput) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *DeploymentSpec {
		return &v
	}).(DeploymentSpecPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused and will not be processed by the deployment controller.
func (o DeploymentSpecOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is set to the max value of int32 (i.e. 2147483647) by default, which means "no deadline".
func (o DeploymentSpecOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.ProgressDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. This is set to the max value of int32 (i.e. 2147483647) by default, which means "retaining all old RelicaSets".
func (o DeploymentSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecOutput) RollbackTo() RollbackConfigPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *RollbackConfig { return v.RollbackTo }).(RollbackConfigPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecOutput) Strategy() DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *DeploymentStrategy { return v.Strategy }).(DeploymentStrategyPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

type DeploymentSpecPtrOutput struct{ *pulumi.OutputState }

func (DeploymentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpec)(nil)).Elem()
}

func (o DeploymentSpecPtrOutput) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return o
}

func (o DeploymentSpecPtrOutput) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return o
}

func (o DeploymentSpecPtrOutput) Elem() DeploymentSpecOutput {
	return o.ApplyT(func(v *DeploymentSpec) DeploymentSpec { return *v }).(DeploymentSpecOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused and will not be processed by the deployment controller.
func (o DeploymentSpecPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is set to the max value of int32 (i.e. 2147483647) by default, which means "no deadline".
func (o DeploymentSpecPtrOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.ProgressDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. This is set to the max value of int32 (i.e. 2147483647) by default, which means "retaining all old RelicaSets".
func (o DeploymentSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecPtrOutput) RollbackTo() RollbackConfigPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *RollbackConfig { return v.RollbackTo }).(RollbackConfigPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecPtrOutput) Strategy() DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *DeploymentStrategy { return v.Strategy }).(DeploymentStrategyPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []DeploymentCondition `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// DeploymentStatusInput is an input type that accepts DeploymentStatusArgs and DeploymentStatusOutput values.
// You can construct a concrete instance of `DeploymentStatusInput` via:
//
// 		 DeploymentStatusArgs{...}
//
type DeploymentStatusInput interface {
	pulumi.Input

	ToDeploymentStatusOutput() DeploymentStatusOutput
	ToDeploymentStatusOutputWithContext(context.Context) DeploymentStatusOutput
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusArgs struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions DeploymentConditionArrayInput `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (DeploymentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatus)(nil)).Elem()
}

func (i DeploymentStatusArgs) ToDeploymentStatusOutput() DeploymentStatusOutput {
	return i.ToDeploymentStatusOutputWithContext(context.Background())
}

func (i DeploymentStatusArgs) ToDeploymentStatusOutputWithContext(ctx context.Context) DeploymentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusOutput)
}

func (i DeploymentStatusArgs) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return i.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i DeploymentStatusArgs) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusOutput).ToDeploymentStatusPtrOutputWithContext(ctx)
}

// DeploymentStatusPtrInput is an input type that accepts DeploymentStatusArgs, DeploymentStatusPtr and DeploymentStatusPtrOutput values.
// You can construct a concrete instance of `DeploymentStatusPtrInput` via:
//
// 		 DeploymentStatusArgs{...}
//
//  or:
//
// 		 nil
//
type DeploymentStatusPtrInput interface {
	pulumi.Input

	ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput
	ToDeploymentStatusPtrOutputWithContext(context.Context) DeploymentStatusPtrOutput
}

type deploymentStatusPtrType DeploymentStatusArgs

func DeploymentStatusPtr(v *DeploymentStatusArgs) DeploymentStatusPtrInput {
	return (*deploymentStatusPtrType)(v)
}

func (*deploymentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatus)(nil)).Elem()
}

func (i *deploymentStatusPtrType) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return i.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i *deploymentStatusPtrType) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusOutput struct{ *pulumi.OutputState }

func (DeploymentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatus)(nil)).Elem()
}

func (o DeploymentStatusOutput) ToDeploymentStatusOutput() DeploymentStatusOutput {
	return o
}

func (o DeploymentStatusOutput) ToDeploymentStatusOutputWithContext(ctx context.Context) DeploymentStatusOutput {
	return o
}

func (o DeploymentStatusOutput) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return o.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (o DeploymentStatusOutput) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *DeploymentStatus {
		return &v
	}).(DeploymentStatusPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusOutput) Conditions() DeploymentConditionArrayOutput {
	return o.ApplyT(func(v DeploymentStatus) []DeploymentCondition { return v.Conditions }).(DeploymentConditionArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type DeploymentStatusPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatus)(nil)).Elem()
}

func (o DeploymentStatusPtrOutput) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return o
}

func (o DeploymentStatusPtrOutput) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return o
}

func (o DeploymentStatusPtrOutput) Elem() DeploymentStatusOutput {
	return o.ApplyT(func(v *DeploymentStatus) DeploymentStatus { return *v }).(DeploymentStatusOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusPtrOutput) Conditions() DeploymentConditionArrayOutput {
	return o.ApplyT(func(v DeploymentStatus) []DeploymentCondition { return v.Conditions }).(DeploymentConditionArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategy struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate *RollingUpdateDeployment `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// DeploymentStrategyInput is an input type that accepts DeploymentStrategyArgs and DeploymentStrategyOutput values.
// You can construct a concrete instance of `DeploymentStrategyInput` via:
//
// 		 DeploymentStrategyArgs{...}
//
type DeploymentStrategyInput interface {
	pulumi.Input

	ToDeploymentStrategyOutput() DeploymentStrategyOutput
	ToDeploymentStrategyOutputWithContext(context.Context) DeploymentStrategyOutput
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyArgs struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate RollingUpdateDeploymentPtrInput `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeploymentStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategy)(nil)).Elem()
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return i.ToDeploymentStrategyOutputWithContext(context.Background())
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyOutput)
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return i.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyOutput).ToDeploymentStrategyPtrOutputWithContext(ctx)
}

// DeploymentStrategyPtrInput is an input type that accepts DeploymentStrategyArgs, DeploymentStrategyPtr and DeploymentStrategyPtrOutput values.
// You can construct a concrete instance of `DeploymentStrategyPtrInput` via:
//
// 		 DeploymentStrategyArgs{...}
//
//  or:
//
// 		 nil
//
type DeploymentStrategyPtrInput interface {
	pulumi.Input

	ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput
	ToDeploymentStrategyPtrOutputWithContext(context.Context) DeploymentStrategyPtrOutput
}

type deploymentStrategyPtrType DeploymentStrategyArgs

func DeploymentStrategyPtr(v *DeploymentStrategyArgs) DeploymentStrategyPtrInput {
	return (*deploymentStrategyPtrType)(v)
}

func (*deploymentStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (i *deploymentStrategyPtrType) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return i.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (i *deploymentStrategyPtrType) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategy)(nil)).Elem()
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return o
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return o
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return o.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *DeploymentStrategy {
		return &v
	}).(DeploymentStrategyPtrOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyOutput) RollingUpdate() RollingUpdateDeploymentPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *RollingUpdateDeployment { return v.RollingUpdate }).(RollingUpdateDeploymentPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeploymentStrategyPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (o DeploymentStrategyPtrOutput) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return o
}

func (o DeploymentStrategyPtrOutput) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return o
}

func (o DeploymentStrategyPtrOutput) Elem() DeploymentStrategyOutput {
	return o.ApplyT(func(v *DeploymentStrategy) DeploymentStrategy { return *v }).(DeploymentStrategyOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyPtrOutput) RollingUpdate() RollingUpdateDeploymentPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *RollingUpdateDeployment { return v.RollingUpdate }).(RollingUpdateDeploymentPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use FSGroupStrategyOptions from policy API Group instead.
type FSGroupStrategyOptions struct {
	// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	Rule *string `pulumi:"rule"`
}

// FSGroupStrategyOptionsInput is an input type that accepts FSGroupStrategyOptionsArgs and FSGroupStrategyOptionsOutput values.
// You can construct a concrete instance of `FSGroupStrategyOptionsInput` via:
//
// 		 FSGroupStrategyOptionsArgs{...}
//
type FSGroupStrategyOptionsInput interface {
	pulumi.Input

	ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput
	ToFSGroupStrategyOptionsOutputWithContext(context.Context) FSGroupStrategyOptionsOutput
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use FSGroupStrategyOptions from policy API Group instead.
type FSGroupStrategyOptionsArgs struct {
	// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (FSGroupStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FSGroupStrategyOptions)(nil)).Elem()
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput {
	return i.ToFSGroupStrategyOptionsOutputWithContext(context.Background())
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsOutputWithContext(ctx context.Context) FSGroupStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsOutput)
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return i.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsOutput).ToFSGroupStrategyOptionsPtrOutputWithContext(ctx)
}

// FSGroupStrategyOptionsPtrInput is an input type that accepts FSGroupStrategyOptionsArgs, FSGroupStrategyOptionsPtr and FSGroupStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `FSGroupStrategyOptionsPtrInput` via:
//
// 		 FSGroupStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type FSGroupStrategyOptionsPtrInput interface {
	pulumi.Input

	ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput
	ToFSGroupStrategyOptionsPtrOutputWithContext(context.Context) FSGroupStrategyOptionsPtrOutput
}

type fsgroupStrategyOptionsPtrType FSGroupStrategyOptionsArgs

func FSGroupStrategyOptionsPtr(v *FSGroupStrategyOptionsArgs) FSGroupStrategyOptionsPtrInput {
	return (*fsgroupStrategyOptionsPtrType)(v)
}

func (*fsgroupStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FSGroupStrategyOptions)(nil)).Elem()
}

func (i *fsgroupStrategyOptionsPtrType) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return i.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *fsgroupStrategyOptionsPtrType) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsPtrOutput)
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use FSGroupStrategyOptions from policy API Group instead.
type FSGroupStrategyOptionsOutput struct{ *pulumi.OutputState }

func (FSGroupStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FSGroupStrategyOptions)(nil)).Elem()
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput {
	return o
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsOutputWithContext(ctx context.Context) FSGroupStrategyOptionsOutput {
	return o
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return o.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) *FSGroupStrategyOptions {
		return &v
	}).(FSGroupStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
func (o FSGroupStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
func (o FSGroupStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type FSGroupStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (FSGroupStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FSGroupStrategyOptions)(nil)).Elem()
}

func (o FSGroupStrategyOptionsPtrOutput) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return o
}

func (o FSGroupStrategyOptionsPtrOutput) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return o
}

func (o FSGroupStrategyOptionsPtrOutput) Elem() FSGroupStrategyOptionsOutput {
	return o.ApplyT(func(v *FSGroupStrategyOptions) FSGroupStrategyOptions { return *v }).(FSGroupStrategyOptionsOutput)
}

// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
func (o FSGroupStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
func (o FSGroupStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPath struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend *IngressBackend `pulumi:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
	Path *string `pulumi:"path"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types. Defaults to ImplementationSpecific.
	PathType *string `pulumi:"pathType"`
}

// HTTPIngressPathInput is an input type that accepts HTTPIngressPathArgs and HTTPIngressPathOutput values.
// You can construct a concrete instance of `HTTPIngressPathInput` via:
//
// 		 HTTPIngressPathArgs{...}
//
type HTTPIngressPathInput interface {
	pulumi.Input

	ToHTTPIngressPathOutput() HTTPIngressPathOutput
	ToHTTPIngressPathOutputWithContext(context.Context) HTTPIngressPathOutput
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPathArgs struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend IngressBackendPtrInput `pulumi:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types. Defaults to ImplementationSpecific.
	PathType pulumi.StringPtrInput `pulumi:"pathType"`
}

func (HTTPIngressPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressPath)(nil)).Elem()
}

func (i HTTPIngressPathArgs) ToHTTPIngressPathOutput() HTTPIngressPathOutput {
	return i.ToHTTPIngressPathOutputWithContext(context.Background())
}

func (i HTTPIngressPathArgs) ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressPathOutput)
}

// HTTPIngressPathArrayInput is an input type that accepts HTTPIngressPathArray and HTTPIngressPathArrayOutput values.
// You can construct a concrete instance of `HTTPIngressPathArrayInput` via:
//
// 		 HTTPIngressPathArray{ HTTPIngressPathArgs{...} }
//
type HTTPIngressPathArrayInput interface {
	pulumi.Input

	ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput
	ToHTTPIngressPathArrayOutputWithContext(context.Context) HTTPIngressPathArrayOutput
}

type HTTPIngressPathArray []HTTPIngressPathInput

func (HTTPIngressPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPIngressPath)(nil)).Elem()
}

func (i HTTPIngressPathArray) ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput {
	return i.ToHTTPIngressPathArrayOutputWithContext(context.Background())
}

func (i HTTPIngressPathArray) ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressPathArrayOutput)
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPathOutput struct{ *pulumi.OutputState }

func (HTTPIngressPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressPath)(nil)).Elem()
}

func (o HTTPIngressPathOutput) ToHTTPIngressPathOutput() HTTPIngressPathOutput {
	return o
}

func (o HTTPIngressPathOutput) ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput {
	return o
}

// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
func (o HTTPIngressPathOutput) Backend() IngressBackendPtrOutput {
	return o.ApplyT(func(v HTTPIngressPath) *IngressBackend { return v.Backend }).(IngressBackendPtrOutput)
}

// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
func (o HTTPIngressPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPIngressPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
//   done on a path element by element basis. A path element refers is the
//   list of labels in the path split by the '/' separator. A request is a
//   match for path p if every p is an element-wise prefix of p of the
//   request path. Note that if the last element of the path is a substring
//   of the last element in request path, it is not a match (e.g. /foo/bar
//   matches /foo/bar/baz, but does not match /foo/barbaz).
// * ImplementationSpecific: Interpretation of the Path matching is up to
//   the IngressClass. Implementations can treat this as a separate PathType
//   or treat it identically to Prefix or Exact path types.
// Implementations are required to support all path types. Defaults to ImplementationSpecific.
func (o HTTPIngressPathOutput) PathType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPIngressPath) *string { return v.PathType }).(pulumi.StringPtrOutput)
}

type HTTPIngressPathArrayOutput struct{ *pulumi.OutputState }

func (HTTPIngressPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPIngressPath)(nil)).Elem()
}

func (o HTTPIngressPathArrayOutput) ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput {
	return o
}

func (o HTTPIngressPathArrayOutput) ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput {
	return o
}

func (o HTTPIngressPathArrayOutput) Index(i pulumi.IntInput) HTTPIngressPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPIngressPath {
		return vs[0].([]HTTPIngressPath)[vs[1].(int)]
	}).(HTTPIngressPathOutput)
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValue struct {
	// A collection of paths that map requests to backends.
	Paths []HTTPIngressPath `pulumi:"paths"`
}

// HTTPIngressRuleValueInput is an input type that accepts HTTPIngressRuleValueArgs and HTTPIngressRuleValueOutput values.
// You can construct a concrete instance of `HTTPIngressRuleValueInput` via:
//
// 		 HTTPIngressRuleValueArgs{...}
//
type HTTPIngressRuleValueInput interface {
	pulumi.Input

	ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput
	ToHTTPIngressRuleValueOutputWithContext(context.Context) HTTPIngressRuleValueOutput
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValueArgs struct {
	// A collection of paths that map requests to backends.
	Paths HTTPIngressPathArrayInput `pulumi:"paths"`
}

func (HTTPIngressRuleValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressRuleValue)(nil)).Elem()
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput {
	return i.ToHTTPIngressRuleValueOutputWithContext(context.Background())
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValueOutputWithContext(ctx context.Context) HTTPIngressRuleValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValueOutput)
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return i.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValueOutput).ToHTTPIngressRuleValuePtrOutputWithContext(ctx)
}

// HTTPIngressRuleValuePtrInput is an input type that accepts HTTPIngressRuleValueArgs, HTTPIngressRuleValuePtr and HTTPIngressRuleValuePtrOutput values.
// You can construct a concrete instance of `HTTPIngressRuleValuePtrInput` via:
//
// 		 HTTPIngressRuleValueArgs{...}
//
//  or:
//
// 		 nil
//
type HTTPIngressRuleValuePtrInput interface {
	pulumi.Input

	ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput
	ToHTTPIngressRuleValuePtrOutputWithContext(context.Context) HTTPIngressRuleValuePtrOutput
}

type httpingressRuleValuePtrType HTTPIngressRuleValueArgs

func HTTPIngressRuleValuePtr(v *HTTPIngressRuleValueArgs) HTTPIngressRuleValuePtrInput {
	return (*httpingressRuleValuePtrType)(v)
}

func (*httpingressRuleValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPIngressRuleValue)(nil)).Elem()
}

func (i *httpingressRuleValuePtrType) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return i.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (i *httpingressRuleValuePtrType) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValuePtrOutput)
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValueOutput struct{ *pulumi.OutputState }

func (HTTPIngressRuleValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressRuleValue)(nil)).Elem()
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput {
	return o
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValueOutputWithContext(ctx context.Context) HTTPIngressRuleValueOutput {
	return o
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return o.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return o.ApplyT(func(v HTTPIngressRuleValue) *HTTPIngressRuleValue {
		return &v
	}).(HTTPIngressRuleValuePtrOutput)
}

// A collection of paths that map requests to backends.
func (o HTTPIngressRuleValueOutput) Paths() HTTPIngressPathArrayOutput {
	return o.ApplyT(func(v HTTPIngressRuleValue) []HTTPIngressPath { return v.Paths }).(HTTPIngressPathArrayOutput)
}

type HTTPIngressRuleValuePtrOutput struct{ *pulumi.OutputState }

func (HTTPIngressRuleValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPIngressRuleValue)(nil)).Elem()
}

func (o HTTPIngressRuleValuePtrOutput) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return o
}

func (o HTTPIngressRuleValuePtrOutput) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return o
}

func (o HTTPIngressRuleValuePtrOutput) Elem() HTTPIngressRuleValueOutput {
	return o.ApplyT(func(v *HTTPIngressRuleValue) HTTPIngressRuleValue { return *v }).(HTTPIngressRuleValueOutput)
}

// A collection of paths that map requests to backends.
func (o HTTPIngressRuleValuePtrOutput) Paths() HTTPIngressPathArrayOutput {
	return o.ApplyT(func(v HTTPIngressRuleValue) []HTTPIngressPath { return v.Paths }).(HTTPIngressPathArrayOutput)
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined. Deprecated: use HostPortRange from policy API Group instead.
type HostPortRange struct {
	// max is the end of the range, inclusive.
	Max *int `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min *int `pulumi:"min"`
}

// HostPortRangeInput is an input type that accepts HostPortRangeArgs and HostPortRangeOutput values.
// You can construct a concrete instance of `HostPortRangeInput` via:
//
// 		 HostPortRangeArgs{...}
//
type HostPortRangeInput interface {
	pulumi.Input

	ToHostPortRangeOutput() HostPortRangeOutput
	ToHostPortRangeOutputWithContext(context.Context) HostPortRangeOutput
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined. Deprecated: use HostPortRange from policy API Group instead.
type HostPortRangeArgs struct {
	// max is the end of the range, inclusive.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (HostPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortRange)(nil)).Elem()
}

func (i HostPortRangeArgs) ToHostPortRangeOutput() HostPortRangeOutput {
	return i.ToHostPortRangeOutputWithContext(context.Background())
}

func (i HostPortRangeArgs) ToHostPortRangeOutputWithContext(ctx context.Context) HostPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortRangeOutput)
}

// HostPortRangeArrayInput is an input type that accepts HostPortRangeArray and HostPortRangeArrayOutput values.
// You can construct a concrete instance of `HostPortRangeArrayInput` via:
//
// 		 HostPortRangeArray{ HostPortRangeArgs{...} }
//
type HostPortRangeArrayInput interface {
	pulumi.Input

	ToHostPortRangeArrayOutput() HostPortRangeArrayOutput
	ToHostPortRangeArrayOutputWithContext(context.Context) HostPortRangeArrayOutput
}

type HostPortRangeArray []HostPortRangeInput

func (HostPortRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPortRange)(nil)).Elem()
}

func (i HostPortRangeArray) ToHostPortRangeArrayOutput() HostPortRangeArrayOutput {
	return i.ToHostPortRangeArrayOutputWithContext(context.Background())
}

func (i HostPortRangeArray) ToHostPortRangeArrayOutputWithContext(ctx context.Context) HostPortRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortRangeArrayOutput)
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined. Deprecated: use HostPortRange from policy API Group instead.
type HostPortRangeOutput struct{ *pulumi.OutputState }

func (HostPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortRange)(nil)).Elem()
}

func (o HostPortRangeOutput) ToHostPortRangeOutput() HostPortRangeOutput {
	return o
}

func (o HostPortRangeOutput) ToHostPortRangeOutputWithContext(ctx context.Context) HostPortRangeOutput {
	return o
}

// max is the end of the range, inclusive.
func (o HostPortRangeOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HostPortRange) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// min is the start of the range, inclusive.
func (o HostPortRangeOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HostPortRange) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type HostPortRangeArrayOutput struct{ *pulumi.OutputState }

func (HostPortRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPortRange)(nil)).Elem()
}

func (o HostPortRangeArrayOutput) ToHostPortRangeArrayOutput() HostPortRangeArrayOutput {
	return o
}

func (o HostPortRangeArrayOutput) ToHostPortRangeArrayOutputWithContext(ctx context.Context) HostPortRangeArrayOutput {
	return o
}

func (o HostPortRangeArrayOutput) Index(i pulumi.IntInput) HostPortRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostPortRange {
		return vs[0].([]HostPortRange)[vs[1].(int)]
	}).(HostPortRangeOutput)
}

// IDRange provides a min/max of an allowed range of IDs. Deprecated: use IDRange from policy API Group instead.
type IDRange struct {
	// max is the end of the range, inclusive.
	Max *int `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min *int `pulumi:"min"`
}

// IDRangeInput is an input type that accepts IDRangeArgs and IDRangeOutput values.
// You can construct a concrete instance of `IDRangeInput` via:
//
// 		 IDRangeArgs{...}
//
type IDRangeInput interface {
	pulumi.Input

	ToIDRangeOutput() IDRangeOutput
	ToIDRangeOutputWithContext(context.Context) IDRangeOutput
}

// IDRange provides a min/max of an allowed range of IDs. Deprecated: use IDRange from policy API Group instead.
type IDRangeArgs struct {
	// max is the end of the range, inclusive.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (IDRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IDRange)(nil)).Elem()
}

func (i IDRangeArgs) ToIDRangeOutput() IDRangeOutput {
	return i.ToIDRangeOutputWithContext(context.Background())
}

func (i IDRangeArgs) ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IDRangeOutput)
}

// IDRangeArrayInput is an input type that accepts IDRangeArray and IDRangeArrayOutput values.
// You can construct a concrete instance of `IDRangeArrayInput` via:
//
// 		 IDRangeArray{ IDRangeArgs{...} }
//
type IDRangeArrayInput interface {
	pulumi.Input

	ToIDRangeArrayOutput() IDRangeArrayOutput
	ToIDRangeArrayOutputWithContext(context.Context) IDRangeArrayOutput
}

type IDRangeArray []IDRangeInput

func (IDRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IDRange)(nil)).Elem()
}

func (i IDRangeArray) ToIDRangeArrayOutput() IDRangeArrayOutput {
	return i.ToIDRangeArrayOutputWithContext(context.Background())
}

func (i IDRangeArray) ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IDRangeArrayOutput)
}

// IDRange provides a min/max of an allowed range of IDs. Deprecated: use IDRange from policy API Group instead.
type IDRangeOutput struct{ *pulumi.OutputState }

func (IDRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IDRange)(nil)).Elem()
}

func (o IDRangeOutput) ToIDRangeOutput() IDRangeOutput {
	return o
}

func (o IDRangeOutput) ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput {
	return o
}

// max is the end of the range, inclusive.
func (o IDRangeOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IDRange) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// min is the start of the range, inclusive.
func (o IDRangeOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IDRange) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type IDRangeArrayOutput struct{ *pulumi.OutputState }

func (IDRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IDRange)(nil)).Elem()
}

func (o IDRangeArrayOutput) ToIDRangeArrayOutput() IDRangeArrayOutput {
	return o
}

func (o IDRangeArrayOutput) ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput {
	return o
}

func (o IDRangeArrayOutput) Index(i pulumi.IntInput) IDRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IDRange {
		return vs[0].([]IDRange)[vs[1].(int)]
	}).(IDRangeOutput)
}

// DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlock struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
	Cidr *string `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
	Except []string `pulumi:"except"`
}

// IPBlockInput is an input type that accepts IPBlockArgs and IPBlockOutput values.
// You can construct a concrete instance of `IPBlockInput` via:
//
// 		 IPBlockArgs{...}
//
type IPBlockInput interface {
	pulumi.Input

	ToIPBlockOutput() IPBlockOutput
	ToIPBlockOutputWithContext(context.Context) IPBlockOutput
}

// DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockArgs struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
	Except pulumi.StringArrayInput `pulumi:"except"`
}

func (IPBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (i IPBlockArgs) ToIPBlockOutput() IPBlockOutput {
	return i.ToIPBlockOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput)
}

func (i IPBlockArgs) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput).ToIPBlockPtrOutputWithContext(ctx)
}

// IPBlockPtrInput is an input type that accepts IPBlockArgs, IPBlockPtr and IPBlockPtrOutput values.
// You can construct a concrete instance of `IPBlockPtrInput` via:
//
// 		 IPBlockArgs{...}
//
//  or:
//
// 		 nil
//
type IPBlockPtrInput interface {
	pulumi.Input

	ToIPBlockPtrOutput() IPBlockPtrOutput
	ToIPBlockPtrOutputWithContext(context.Context) IPBlockPtrOutput
}

type ipblockPtrType IPBlockArgs

func IPBlockPtr(v *IPBlockArgs) IPBlockPtrInput {
	return (*ipblockPtrType)(v)
}

func (*ipblockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (i *ipblockPtrType) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i *ipblockPtrType) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockPtrOutput)
}

// DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockOutput struct{ *pulumi.OutputState }

func (IPBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (o IPBlockOutput) ToIPBlockOutput() IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o.ToIPBlockPtrOutputWithContext(context.Background())
}

func (o IPBlockOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o.ApplyT(func(v IPBlock) *IPBlock {
		return &v
	}).(IPBlockPtrOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
func (o IPBlockOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlock) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
func (o IPBlockOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IPBlock) []string { return v.Except }).(pulumi.StringArrayOutput)
}

type IPBlockPtrOutput struct{ *pulumi.OutputState }

func (IPBlockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) Elem() IPBlockOutput {
	return o.ApplyT(func(v *IPBlock) IPBlock { return *v }).(IPBlockOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
func (o IPBlockPtrOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlock) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
func (o IPBlockPtrOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IPBlock) []string { return v.Except }).(pulumi.StringArrayOutput)
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IngressSpec `pulumi:"spec"`
	// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *IngressStatus `pulumi:"status"`
}

// IngressTypeInput is an input type that accepts IngressTypeArgs and IngressTypeOutput values.
// You can construct a concrete instance of `IngressTypeInput` via:
//
// 		 IngressTypeArgs{...}
//
type IngressTypeInput interface {
	pulumi.Input

	ToIngressTypeOutput() IngressTypeOutput
	ToIngressTypeOutputWithContext(context.Context) IngressTypeOutput
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressSpecPtrInput `pulumi:"spec"`
	// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status IngressStatusPtrInput `pulumi:"status"`
}

func (IngressTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressType)(nil)).Elem()
}

func (i IngressTypeArgs) ToIngressTypeOutput() IngressTypeOutput {
	return i.ToIngressTypeOutputWithContext(context.Background())
}

func (i IngressTypeArgs) ToIngressTypeOutputWithContext(ctx context.Context) IngressTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTypeOutput)
}

// IngressTypeArrayInput is an input type that accepts IngressTypeArray and IngressTypeArrayOutput values.
// You can construct a concrete instance of `IngressTypeArrayInput` via:
//
// 		 IngressTypeArray{ IngressTypeArgs{...} }
//
type IngressTypeArrayInput interface {
	pulumi.Input

	ToIngressTypeArrayOutput() IngressTypeArrayOutput
	ToIngressTypeArrayOutputWithContext(context.Context) IngressTypeArrayOutput
}

type IngressTypeArray []IngressTypeInput

func (IngressTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressType)(nil)).Elem()
}

func (i IngressTypeArray) ToIngressTypeArrayOutput() IngressTypeArrayOutput {
	return i.ToIngressTypeArrayOutputWithContext(context.Background())
}

func (i IngressTypeArray) ToIngressTypeArrayOutputWithContext(ctx context.Context) IngressTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTypeArrayOutput)
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressTypeOutput struct{ *pulumi.OutputState }

func (IngressTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressType)(nil)).Elem()
}

func (o IngressTypeOutput) ToIngressTypeOutput() IngressTypeOutput {
	return o
}

func (o IngressTypeOutput) ToIngressTypeOutputWithContext(ctx context.Context) IngressTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IngressTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v IngressType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IngressTypeOutput) Spec() IngressSpecPtrOutput {
	return o.ApplyT(func(v IngressType) *IngressSpec { return v.Spec }).(IngressSpecPtrOutput)
}

// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IngressTypeOutput) Status() IngressStatusPtrOutput {
	return o.ApplyT(func(v IngressType) *IngressStatus { return v.Status }).(IngressStatusPtrOutput)
}

type IngressTypeArrayOutput struct{ *pulumi.OutputState }

func (IngressTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressType)(nil)).Elem()
}

func (o IngressTypeArrayOutput) ToIngressTypeArrayOutput() IngressTypeArrayOutput {
	return o
}

func (o IngressTypeArrayOutput) ToIngressTypeArrayOutputWithContext(ctx context.Context) IngressTypeArrayOutput {
	return o
}

func (o IngressTypeArrayOutput) Index(i pulumi.IntInput) IngressTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressType {
		return vs[0].([]IngressType)[vs[1].(int)]
	}).(IngressTypeOutput)
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackend struct {
	// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
	Resource *corev1.TypedLocalObjectReference `pulumi:"resource"`
	// Specifies the name of the referenced service.
	ServiceName *string `pulumi:"serviceName"`
	// Specifies the port of the referenced service.
	ServicePort interface{} `pulumi:"servicePort"`
}

// IngressBackendInput is an input type that accepts IngressBackendArgs and IngressBackendOutput values.
// You can construct a concrete instance of `IngressBackendInput` via:
//
// 		 IngressBackendArgs{...}
//
type IngressBackendInput interface {
	pulumi.Input

	ToIngressBackendOutput() IngressBackendOutput
	ToIngressBackendOutputWithContext(context.Context) IngressBackendOutput
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackendArgs struct {
	// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
	Resource corev1.TypedLocalObjectReferencePtrInput `pulumi:"resource"`
	// Specifies the name of the referenced service.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Specifies the port of the referenced service.
	ServicePort pulumi.Input `pulumi:"servicePort"`
}

func (IngressBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressBackend)(nil)).Elem()
}

func (i IngressBackendArgs) ToIngressBackendOutput() IngressBackendOutput {
	return i.ToIngressBackendOutputWithContext(context.Background())
}

func (i IngressBackendArgs) ToIngressBackendOutputWithContext(ctx context.Context) IngressBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendOutput)
}

func (i IngressBackendArgs) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return i.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (i IngressBackendArgs) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendOutput).ToIngressBackendPtrOutputWithContext(ctx)
}

// IngressBackendPtrInput is an input type that accepts IngressBackendArgs, IngressBackendPtr and IngressBackendPtrOutput values.
// You can construct a concrete instance of `IngressBackendPtrInput` via:
//
// 		 IngressBackendArgs{...}
//
//  or:
//
// 		 nil
//
type IngressBackendPtrInput interface {
	pulumi.Input

	ToIngressBackendPtrOutput() IngressBackendPtrOutput
	ToIngressBackendPtrOutputWithContext(context.Context) IngressBackendPtrOutput
}

type ingressBackendPtrType IngressBackendArgs

func IngressBackendPtr(v *IngressBackendArgs) IngressBackendPtrInput {
	return (*ingressBackendPtrType)(v)
}

func (*ingressBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressBackend)(nil)).Elem()
}

func (i *ingressBackendPtrType) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return i.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (i *ingressBackendPtrType) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendPtrOutput)
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackendOutput struct{ *pulumi.OutputState }

func (IngressBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressBackend)(nil)).Elem()
}

func (o IngressBackendOutput) ToIngressBackendOutput() IngressBackendOutput {
	return o
}

func (o IngressBackendOutput) ToIngressBackendOutputWithContext(ctx context.Context) IngressBackendOutput {
	return o
}

func (o IngressBackendOutput) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return o.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (o IngressBackendOutput) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return o.ApplyT(func(v IngressBackend) *IngressBackend {
		return &v
	}).(IngressBackendPtrOutput)
}

// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
func (o IngressBackendOutput) Resource() corev1.TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v IngressBackend) *corev1.TypedLocalObjectReference { return v.Resource }).(corev1.TypedLocalObjectReferencePtrOutput)
}

// Specifies the name of the referenced service.
func (o IngressBackendOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressBackend) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the port of the referenced service.
func (o IngressBackendOutput) ServicePort() pulumi.AnyOutput {
	return o.ApplyT(func(v IngressBackend) interface{} { return v.ServicePort }).(pulumi.AnyOutput)
}

type IngressBackendPtrOutput struct{ *pulumi.OutputState }

func (IngressBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressBackend)(nil)).Elem()
}

func (o IngressBackendPtrOutput) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return o
}

func (o IngressBackendPtrOutput) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return o
}

func (o IngressBackendPtrOutput) Elem() IngressBackendOutput {
	return o.ApplyT(func(v *IngressBackend) IngressBackend { return *v }).(IngressBackendOutput)
}

// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
func (o IngressBackendPtrOutput) Resource() corev1.TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v IngressBackend) *corev1.TypedLocalObjectReference { return v.Resource }).(corev1.TypedLocalObjectReferencePtrOutput)
}

// Specifies the name of the referenced service.
func (o IngressBackendPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressBackend) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the port of the referenced service.
func (o IngressBackendPtrOutput) ServicePort() pulumi.AnyOutput {
	return o.ApplyT(func(v IngressBackend) interface{} { return v.ServicePort }).(pulumi.AnyOutput)
}

// IngressList is a collection of Ingress.
type IngressListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of Ingress.
	Items []IngressType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// IngressListTypeInput is an input type that accepts IngressListTypeArgs and IngressListTypeOutput values.
// You can construct a concrete instance of `IngressListTypeInput` via:
//
// 		 IngressListTypeArgs{...}
//
type IngressListTypeInput interface {
	pulumi.Input

	ToIngressListTypeOutput() IngressListTypeOutput
	ToIngressListTypeOutputWithContext(context.Context) IngressListTypeOutput
}

// IngressList is a collection of Ingress.
type IngressListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of Ingress.
	Items IngressTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (IngressListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressListType)(nil)).Elem()
}

func (i IngressListTypeArgs) ToIngressListTypeOutput() IngressListTypeOutput {
	return i.ToIngressListTypeOutputWithContext(context.Background())
}

func (i IngressListTypeArgs) ToIngressListTypeOutputWithContext(ctx context.Context) IngressListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressListTypeOutput)
}

// IngressList is a collection of Ingress.
type IngressListTypeOutput struct{ *pulumi.OutputState }

func (IngressListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressListType)(nil)).Elem()
}

func (o IngressListTypeOutput) ToIngressListTypeOutput() IngressListTypeOutput {
	return o
}

func (o IngressListTypeOutput) ToIngressListTypeOutputWithContext(ctx context.Context) IngressListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of Ingress.
func (o IngressListTypeOutput) Items() IngressTypeArrayOutput {
	return o.ApplyT(func(v IngressListType) []IngressType { return v.Items }).(IngressTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IngressListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v IngressListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRule struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host *string               `pulumi:"host"`
	Http *HTTPIngressRuleValue `pulumi:"http"`
}

// IngressRuleInput is an input type that accepts IngressRuleArgs and IngressRuleOutput values.
// You can construct a concrete instance of `IngressRuleInput` via:
//
// 		 IngressRuleArgs{...}
//
type IngressRuleInput interface {
	pulumi.Input

	ToIngressRuleOutput() IngressRuleOutput
	ToIngressRuleOutputWithContext(context.Context) IngressRuleOutput
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRuleArgs struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host pulumi.StringPtrInput        `pulumi:"host"`
	Http HTTPIngressRuleValuePtrInput `pulumi:"http"`
}

func (IngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (i IngressRuleArgs) ToIngressRuleOutput() IngressRuleOutput {
	return i.ToIngressRuleOutputWithContext(context.Background())
}

func (i IngressRuleArgs) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleOutput)
}

// IngressRuleArrayInput is an input type that accepts IngressRuleArray and IngressRuleArrayOutput values.
// You can construct a concrete instance of `IngressRuleArrayInput` via:
//
// 		 IngressRuleArray{ IngressRuleArgs{...} }
//
type IngressRuleArrayInput interface {
	pulumi.Input

	ToIngressRuleArrayOutput() IngressRuleArrayOutput
	ToIngressRuleArrayOutputWithContext(context.Context) IngressRuleArrayOutput
}

type IngressRuleArray []IngressRuleInput

func (IngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (i IngressRuleArray) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return i.ToIngressRuleArrayOutputWithContext(context.Background())
}

func (i IngressRuleArray) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleArrayOutput)
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRuleOutput struct{ *pulumi.OutputState }

func (IngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (o IngressRuleOutput) ToIngressRuleOutput() IngressRuleOutput {
	return o
}

func (o IngressRuleOutput) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return o
}

// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
//    the IP in the Spec of the parent Ingress.
// 2. The `:` delimiter is not respected because ports are not allowed.
// 	  Currently the port of an Ingress is implicitly :80 for http and
// 	  :443 for https.
// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
//
// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
func (o IngressRuleOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressRule) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o IngressRuleOutput) Http() HTTPIngressRuleValuePtrOutput {
	return o.ApplyT(func(v IngressRule) *HTTPIngressRuleValue { return v.Http }).(HTTPIngressRuleValuePtrOutput)
}

type IngressRuleArrayOutput struct{ *pulumi.OutputState }

func (IngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) Index(i pulumi.IntInput) IngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressRule {
		return vs[0].([]IngressRule)[vs[1].(int)]
	}).(IngressRuleOutput)
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpec struct {
	// A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
	Backend *IngressBackend `pulumi:"backend"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName *string `pulumi:"ingressClassName"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules []IngressRule `pulumi:"rules"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []IngressTLS `pulumi:"tls"`
}

// IngressSpecInput is an input type that accepts IngressSpecArgs and IngressSpecOutput values.
// You can construct a concrete instance of `IngressSpecInput` via:
//
// 		 IngressSpecArgs{...}
//
type IngressSpecInput interface {
	pulumi.Input

	ToIngressSpecOutput() IngressSpecOutput
	ToIngressSpecOutputWithContext(context.Context) IngressSpecOutput
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpecArgs struct {
	// A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
	Backend IngressBackendPtrInput `pulumi:"backend"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName pulumi.StringPtrInput `pulumi:"ingressClassName"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules IngressRuleArrayInput `pulumi:"rules"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls IngressTLSArrayInput `pulumi:"tls"`
}

func (IngressSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressSpec)(nil)).Elem()
}

func (i IngressSpecArgs) ToIngressSpecOutput() IngressSpecOutput {
	return i.ToIngressSpecOutputWithContext(context.Background())
}

func (i IngressSpecArgs) ToIngressSpecOutputWithContext(ctx context.Context) IngressSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecOutput)
}

func (i IngressSpecArgs) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return i.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (i IngressSpecArgs) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecOutput).ToIngressSpecPtrOutputWithContext(ctx)
}

// IngressSpecPtrInput is an input type that accepts IngressSpecArgs, IngressSpecPtr and IngressSpecPtrOutput values.
// You can construct a concrete instance of `IngressSpecPtrInput` via:
//
// 		 IngressSpecArgs{...}
//
//  or:
//
// 		 nil
//
type IngressSpecPtrInput interface {
	pulumi.Input

	ToIngressSpecPtrOutput() IngressSpecPtrOutput
	ToIngressSpecPtrOutputWithContext(context.Context) IngressSpecPtrOutput
}

type ingressSpecPtrType IngressSpecArgs

func IngressSpecPtr(v *IngressSpecArgs) IngressSpecPtrInput {
	return (*ingressSpecPtrType)(v)
}

func (*ingressSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressSpec)(nil)).Elem()
}

func (i *ingressSpecPtrType) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return i.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (i *ingressSpecPtrType) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecPtrOutput)
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpecOutput struct{ *pulumi.OutputState }

func (IngressSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressSpec)(nil)).Elem()
}

func (o IngressSpecOutput) ToIngressSpecOutput() IngressSpecOutput {
	return o
}

func (o IngressSpecOutput) ToIngressSpecOutputWithContext(ctx context.Context) IngressSpecOutput {
	return o
}

func (o IngressSpecOutput) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return o.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (o IngressSpecOutput) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return o.ApplyT(func(v IngressSpec) *IngressSpec {
		return &v
	}).(IngressSpecPtrOutput)
}

// A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
func (o IngressSpecOutput) Backend() IngressBackendPtrOutput {
	return o.ApplyT(func(v IngressSpec) *IngressBackend { return v.Backend }).(IngressBackendPtrOutput)
}

// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
func (o IngressSpecOutput) IngressClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressSpec) *string { return v.IngressClassName }).(pulumi.StringPtrOutput)
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (o IngressSpecOutput) Rules() IngressRuleArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressRule { return v.Rules }).(IngressRuleArrayOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o IngressSpecOutput) Tls() IngressTLSArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressTLS { return v.Tls }).(IngressTLSArrayOutput)
}

type IngressSpecPtrOutput struct{ *pulumi.OutputState }

func (IngressSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressSpec)(nil)).Elem()
}

func (o IngressSpecPtrOutput) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return o
}

func (o IngressSpecPtrOutput) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return o
}

func (o IngressSpecPtrOutput) Elem() IngressSpecOutput {
	return o.ApplyT(func(v *IngressSpec) IngressSpec { return *v }).(IngressSpecOutput)
}

// A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
func (o IngressSpecPtrOutput) Backend() IngressBackendPtrOutput {
	return o.ApplyT(func(v IngressSpec) *IngressBackend { return v.Backend }).(IngressBackendPtrOutput)
}

// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
func (o IngressSpecPtrOutput) IngressClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressSpec) *string { return v.IngressClassName }).(pulumi.StringPtrOutput)
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (o IngressSpecPtrOutput) Rules() IngressRuleArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressRule { return v.Rules }).(IngressRuleArrayOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o IngressSpecPtrOutput) Tls() IngressTLSArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressTLS { return v.Tls }).(IngressTLSArrayOutput)
}

// IngressStatus describe the current state of the Ingress.
type IngressStatus struct {
	// LoadBalancer contains the current status of the load-balancer.
	LoadBalancer *corev1.LoadBalancerStatus `pulumi:"loadBalancer"`
}

// IngressStatusInput is an input type that accepts IngressStatusArgs and IngressStatusOutput values.
// You can construct a concrete instance of `IngressStatusInput` via:
//
// 		 IngressStatusArgs{...}
//
type IngressStatusInput interface {
	pulumi.Input

	ToIngressStatusOutput() IngressStatusOutput
	ToIngressStatusOutputWithContext(context.Context) IngressStatusOutput
}

// IngressStatus describe the current state of the Ingress.
type IngressStatusArgs struct {
	// LoadBalancer contains the current status of the load-balancer.
	LoadBalancer corev1.LoadBalancerStatusPtrInput `pulumi:"loadBalancer"`
}

func (IngressStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStatus)(nil)).Elem()
}

func (i IngressStatusArgs) ToIngressStatusOutput() IngressStatusOutput {
	return i.ToIngressStatusOutputWithContext(context.Background())
}

func (i IngressStatusArgs) ToIngressStatusOutputWithContext(ctx context.Context) IngressStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusOutput)
}

func (i IngressStatusArgs) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return i.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (i IngressStatusArgs) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusOutput).ToIngressStatusPtrOutputWithContext(ctx)
}

// IngressStatusPtrInput is an input type that accepts IngressStatusArgs, IngressStatusPtr and IngressStatusPtrOutput values.
// You can construct a concrete instance of `IngressStatusPtrInput` via:
//
// 		 IngressStatusArgs{...}
//
//  or:
//
// 		 nil
//
type IngressStatusPtrInput interface {
	pulumi.Input

	ToIngressStatusPtrOutput() IngressStatusPtrOutput
	ToIngressStatusPtrOutputWithContext(context.Context) IngressStatusPtrOutput
}

type ingressStatusPtrType IngressStatusArgs

func IngressStatusPtr(v *IngressStatusArgs) IngressStatusPtrInput {
	return (*ingressStatusPtrType)(v)
}

func (*ingressStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStatus)(nil)).Elem()
}

func (i *ingressStatusPtrType) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return i.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (i *ingressStatusPtrType) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusPtrOutput)
}

// IngressStatus describe the current state of the Ingress.
type IngressStatusOutput struct{ *pulumi.OutputState }

func (IngressStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStatus)(nil)).Elem()
}

func (o IngressStatusOutput) ToIngressStatusOutput() IngressStatusOutput {
	return o
}

func (o IngressStatusOutput) ToIngressStatusOutputWithContext(ctx context.Context) IngressStatusOutput {
	return o
}

func (o IngressStatusOutput) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return o.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (o IngressStatusOutput) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return o.ApplyT(func(v IngressStatus) *IngressStatus {
		return &v
	}).(IngressStatusPtrOutput)
}

// LoadBalancer contains the current status of the load-balancer.
func (o IngressStatusOutput) LoadBalancer() corev1.LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v IngressStatus) *corev1.LoadBalancerStatus { return v.LoadBalancer }).(corev1.LoadBalancerStatusPtrOutput)
}

type IngressStatusPtrOutput struct{ *pulumi.OutputState }

func (IngressStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStatus)(nil)).Elem()
}

func (o IngressStatusPtrOutput) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return o
}

func (o IngressStatusPtrOutput) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return o
}

func (o IngressStatusPtrOutput) Elem() IngressStatusOutput {
	return o.ApplyT(func(v *IngressStatus) IngressStatus { return *v }).(IngressStatusOutput)
}

// LoadBalancer contains the current status of the load-balancer.
func (o IngressStatusPtrOutput) LoadBalancer() corev1.LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v IngressStatus) *corev1.LoadBalancerStatus { return v.LoadBalancer }).(corev1.LoadBalancerStatusPtrOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLS struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// IngressTLSInput is an input type that accepts IngressTLSArgs and IngressTLSOutput values.
// You can construct a concrete instance of `IngressTLSInput` via:
//
// 		 IngressTLSArgs{...}
//
type IngressTLSInput interface {
	pulumi.Input

	ToIngressTLSOutput() IngressTLSOutput
	ToIngressTLSOutputWithContext(context.Context) IngressTLSOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLSArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (IngressTLSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressTLS)(nil)).Elem()
}

func (i IngressTLSArgs) ToIngressTLSOutput() IngressTLSOutput {
	return i.ToIngressTLSOutputWithContext(context.Background())
}

func (i IngressTLSArgs) ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTLSOutput)
}

// IngressTLSArrayInput is an input type that accepts IngressTLSArray and IngressTLSArrayOutput values.
// You can construct a concrete instance of `IngressTLSArrayInput` via:
//
// 		 IngressTLSArray{ IngressTLSArgs{...} }
//
type IngressTLSArrayInput interface {
	pulumi.Input

	ToIngressTLSArrayOutput() IngressTLSArrayOutput
	ToIngressTLSArrayOutputWithContext(context.Context) IngressTLSArrayOutput
}

type IngressTLSArray []IngressTLSInput

func (IngressTLSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressTLS)(nil)).Elem()
}

func (i IngressTLSArray) ToIngressTLSArrayOutput() IngressTLSArrayOutput {
	return i.ToIngressTLSArrayOutputWithContext(context.Background())
}

func (i IngressTLSArray) ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTLSArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLSOutput struct{ *pulumi.OutputState }

func (IngressTLSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressTLS)(nil)).Elem()
}

func (o IngressTLSOutput) ToIngressTLSOutput() IngressTLSOutput {
	return o
}

func (o IngressTLSOutput) ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o IngressTLSOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IngressTLS) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o IngressTLSOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressTLS) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type IngressTLSArrayOutput struct{ *pulumi.OutputState }

func (IngressTLSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressTLS)(nil)).Elem()
}

func (o IngressTLSArrayOutput) ToIngressTLSArrayOutput() IngressTLSArrayOutput {
	return o
}

func (o IngressTLSArrayOutput) ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput {
	return o
}

func (o IngressTLSArrayOutput) Index(i pulumi.IntInput) IngressTLSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressTLS {
		return vs[0].([]IngressTLS)[vs[1].(int)]
	}).(IngressTLSOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec *NetworkPolicySpec `pulumi:"spec"`
}

// NetworkPolicyTypeInput is an input type that accepts NetworkPolicyTypeArgs and NetworkPolicyTypeOutput values.
// You can construct a concrete instance of `NetworkPolicyTypeInput` via:
//
// 		 NetworkPolicyTypeArgs{...}
//
type NetworkPolicyTypeInput interface {
	pulumi.Input

	ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput
	ToNetworkPolicyTypeOutputWithContext(context.Context) NetworkPolicyTypeOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec NetworkPolicySpecPtrInput `pulumi:"spec"`
}

func (NetworkPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return i.ToNetworkPolicyTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeOutput)
}

// NetworkPolicyTypeArrayInput is an input type that accepts NetworkPolicyTypeArray and NetworkPolicyTypeArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyTypeArrayInput` via:
//
// 		 NetworkPolicyTypeArray{ NetworkPolicyTypeArgs{...} }
//
type NetworkPolicyTypeArrayInput interface {
	pulumi.Input

	ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput
	ToNetworkPolicyTypeArrayOutputWithContext(context.Context) NetworkPolicyTypeArrayOutput
}

type NetworkPolicyTypeArray []NetworkPolicyTypeInput

func (NetworkPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return i.ToNetworkPolicyTypeArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeArrayOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return o
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior for this NetworkPolicy.
func (o NetworkPolicyTypeOutput) Spec() NetworkPolicySpecPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *NetworkPolicySpec { return v.Spec }).(NetworkPolicySpecPtrOutput)
}

type NetworkPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) Index(i pulumi.IntInput) NetworkPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyType {
		return vs[0].([]NetworkPolicyType)[vs[1].(int)]
	}).(NetworkPolicyTypeOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRule struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To []NetworkPolicyPeer `pulumi:"to"`
}

// NetworkPolicyEgressRuleInput is an input type that accepts NetworkPolicyEgressRuleArgs and NetworkPolicyEgressRuleOutput values.
// You can construct a concrete instance of `NetworkPolicyEgressRuleInput` via:
//
// 		 NetworkPolicyEgressRuleArgs{...}
//
type NetworkPolicyEgressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput
	ToNetworkPolicyEgressRuleOutputWithContext(context.Context) NetworkPolicyEgressRuleOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleArgs struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To NetworkPolicyPeerArrayInput `pulumi:"to"`
}

func (NetworkPolicyEgressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return i.ToNetworkPolicyEgressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleOutput)
}

// NetworkPolicyEgressRuleArrayInput is an input type that accepts NetworkPolicyEgressRuleArray and NetworkPolicyEgressRuleArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyEgressRuleArrayInput` via:
//
// 		 NetworkPolicyEgressRuleArray{ NetworkPolicyEgressRuleArgs{...} }
//
type NetworkPolicyEgressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput
	ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Context) NetworkPolicyEgressRuleArrayOutput
}

type NetworkPolicyEgressRuleArray []NetworkPolicyEgressRuleInput

func (NetworkPolicyEgressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return i.ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleArrayOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return o
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return o
}

// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyEgressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
func (o NetworkPolicyEgressRuleOutput) To() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPeer { return v.To }).(NetworkPolicyPeerArrayOutput)
}

type NetworkPolicyEgressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyEgressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyEgressRule {
		return vs[0].([]NetworkPolicyEgressRule)[vs[1].(int)]
	}).(NetworkPolicyEgressRuleOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.
type NetworkPolicyIngressRule struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []NetworkPolicyPeer `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
}

// NetworkPolicyIngressRuleInput is an input type that accepts NetworkPolicyIngressRuleArgs and NetworkPolicyIngressRuleOutput values.
// You can construct a concrete instance of `NetworkPolicyIngressRuleInput` via:
//
// 		 NetworkPolicyIngressRuleArgs{...}
//
type NetworkPolicyIngressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput
	ToNetworkPolicyIngressRuleOutputWithContext(context.Context) NetworkPolicyIngressRuleOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.
type NetworkPolicyIngressRuleArgs struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From NetworkPolicyPeerArrayInput `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
}

func (NetworkPolicyIngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return i.ToNetworkPolicyIngressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleOutput)
}

// NetworkPolicyIngressRuleArrayInput is an input type that accepts NetworkPolicyIngressRuleArray and NetworkPolicyIngressRuleArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyIngressRuleArrayInput` via:
//
// 		 NetworkPolicyIngressRuleArray{ NetworkPolicyIngressRuleArgs{...} }
//
type NetworkPolicyIngressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput
	ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Context) NetworkPolicyIngressRuleArrayOutput
}

type NetworkPolicyIngressRuleArray []NetworkPolicyIngressRuleInput

func (NetworkPolicyIngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return i.ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleArrayOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.
type NetworkPolicyIngressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return o
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return o
}

// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
func (o NetworkPolicyIngressRuleOutput) From() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPeer { return v.From }).(NetworkPolicyPeerArrayOutput)
}

// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyIngressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

type NetworkPolicyIngressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyIngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyIngressRule {
		return vs[0].([]NetworkPolicyIngressRule)[vs[1].(int)]
	}).(NetworkPolicyIngressRuleOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.
type NetworkPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []NetworkPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// NetworkPolicyListTypeInput is an input type that accepts NetworkPolicyListTypeArgs and NetworkPolicyListTypeOutput values.
// You can construct a concrete instance of `NetworkPolicyListTypeInput` via:
//
// 		 NetworkPolicyListTypeArgs{...}
//
type NetworkPolicyListTypeInput interface {
	pulumi.Input

	ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput
	ToNetworkPolicyListTypeOutputWithContext(context.Context) NetworkPolicyListTypeOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.
type NetworkPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items NetworkPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (NetworkPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return i.ToNetworkPolicyListTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyListTypeOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.
type NetworkPolicyListTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return o
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o NetworkPolicyListTypeOutput) Items() NetworkPolicyTypeArrayOutput {
	return o.ApplyT(func(v NetworkPolicyListType) []NetworkPolicyType { return v.Items }).(NetworkPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.
type NetworkPolicyPeer struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock *IPBlock `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector *metav1.LabelSelector `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector *metav1.LabelSelector `pulumi:"podSelector"`
}

// NetworkPolicyPeerInput is an input type that accepts NetworkPolicyPeerArgs and NetworkPolicyPeerOutput values.
// You can construct a concrete instance of `NetworkPolicyPeerInput` via:
//
// 		 NetworkPolicyPeerArgs{...}
//
type NetworkPolicyPeerInput interface {
	pulumi.Input

	ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput
	ToNetworkPolicyPeerOutputWithContext(context.Context) NetworkPolicyPeerOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.
type NetworkPolicyPeerArgs struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock IPBlockPtrInput `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector metav1.LabelSelectorPtrInput `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector metav1.LabelSelectorPtrInput `pulumi:"podSelector"`
}

func (NetworkPolicyPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return i.ToNetworkPolicyPeerOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerOutput)
}

// NetworkPolicyPeerArrayInput is an input type that accepts NetworkPolicyPeerArray and NetworkPolicyPeerArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyPeerArrayInput` via:
//
// 		 NetworkPolicyPeerArray{ NetworkPolicyPeerArgs{...} }
//
type NetworkPolicyPeerArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput
	ToNetworkPolicyPeerArrayOutputWithContext(context.Context) NetworkPolicyPeerArrayOutput
}

type NetworkPolicyPeerArray []NetworkPolicyPeerInput

func (NetworkPolicyPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return i.ToNetworkPolicyPeerArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerArrayOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.
type NetworkPolicyPeerOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return o
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return o
}

// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
func (o NetworkPolicyPeerOutput) IpBlock() IPBlockPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *IPBlock { return v.IpBlock }).(IPBlockPtrOutput)
}

// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
//
// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
func (o NetworkPolicyPeerOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.NamespaceSelector }).(metav1.LabelSelectorPtrOutput)
}

// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
//
// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
func (o NetworkPolicyPeerOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

type NetworkPolicyPeerArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPeer {
		return vs[0].([]NetworkPolicyPeer)[vs[1].(int)]
	}).(NetworkPolicyPeerOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.
type NetworkPolicyPort struct {
	// If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
	Port interface{} `pulumi:"port"`
	// Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol *string `pulumi:"protocol"`
}

// NetworkPolicyPortInput is an input type that accepts NetworkPolicyPortArgs and NetworkPolicyPortOutput values.
// You can construct a concrete instance of `NetworkPolicyPortInput` via:
//
// 		 NetworkPolicyPortArgs{...}
//
type NetworkPolicyPortInput interface {
	pulumi.Input

	ToNetworkPolicyPortOutput() NetworkPolicyPortOutput
	ToNetworkPolicyPortOutputWithContext(context.Context) NetworkPolicyPortOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.
type NetworkPolicyPortArgs struct {
	// If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
	Port pulumi.Input `pulumi:"port"`
	// Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkPolicyPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return i.ToNetworkPolicyPortOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortOutput)
}

// NetworkPolicyPortArrayInput is an input type that accepts NetworkPolicyPortArray and NetworkPolicyPortArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyPortArrayInput` via:
//
// 		 NetworkPolicyPortArray{ NetworkPolicyPortArgs{...} }
//
type NetworkPolicyPortArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput
	ToNetworkPolicyPortArrayOutputWithContext(context.Context) NetworkPolicyPortArrayOutput
}

type NetworkPolicyPortArray []NetworkPolicyPortInput

func (NetworkPolicyPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return i.ToNetworkPolicyPortArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortArrayOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.
type NetworkPolicyPortOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return o
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return o
}

// If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
func (o NetworkPolicyPortOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v NetworkPolicyPort) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
func (o NetworkPolicyPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkPolicyPortArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPort {
		return vs[0].([]NetworkPolicyPort)[vs[1].(int)]
	}).(NetworkPolicyPortOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.
type NetworkPolicySpec struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress []NetworkPolicyEgressRule `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
	Ingress []NetworkPolicyIngressRule `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector *metav1.LabelSelector `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes []string `pulumi:"policyTypes"`
}

// NetworkPolicySpecInput is an input type that accepts NetworkPolicySpecArgs and NetworkPolicySpecOutput values.
// You can construct a concrete instance of `NetworkPolicySpecInput` via:
//
// 		 NetworkPolicySpecArgs{...}
//
type NetworkPolicySpecInput interface {
	pulumi.Input

	ToNetworkPolicySpecOutput() NetworkPolicySpecOutput
	ToNetworkPolicySpecOutputWithContext(context.Context) NetworkPolicySpecOutput
}

// DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.
type NetworkPolicySpecArgs struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress NetworkPolicyEgressRuleArrayInput `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
	Ingress NetworkPolicyIngressRuleArrayInput `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector metav1.LabelSelectorPtrInput `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes pulumi.StringArrayInput `pulumi:"policyTypes"`
}

func (NetworkPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return i.ToNetworkPolicySpecOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput)
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput).ToNetworkPolicySpecPtrOutputWithContext(ctx)
}

// NetworkPolicySpecPtrInput is an input type that accepts NetworkPolicySpecArgs, NetworkPolicySpecPtr and NetworkPolicySpecPtrOutput values.
// You can construct a concrete instance of `NetworkPolicySpecPtrInput` via:
//
// 		 NetworkPolicySpecArgs{...}
//
//  or:
//
// 		 nil
//
type NetworkPolicySpecPtrInput interface {
	pulumi.Input

	ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput
	ToNetworkPolicySpecPtrOutputWithContext(context.Context) NetworkPolicySpecPtrOutput
}

type networkPolicySpecPtrType NetworkPolicySpecArgs

func NetworkPolicySpecPtr(v *NetworkPolicySpecArgs) NetworkPolicySpecPtrInput {
	return (*networkPolicySpecPtrType)(v)
}

func (*networkPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecPtrOutput)
}

// DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.
type NetworkPolicySpecOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *NetworkPolicySpec {
		return &v
	}).(NetworkPolicySpecPtrOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyEgressRule { return v.Egress }).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
func (o NetworkPolicySpecOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyIngressRule { return v.Ingress }).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []string { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

type NetworkPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) Elem() NetworkPolicySpecOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) NetworkPolicySpec { return *v }).(NetworkPolicySpecOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyEgressRule { return v.Egress }).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
func (o NetworkPolicySpecPtrOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyIngressRule { return v.Ingress }).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecPtrOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []string { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated: use PodSecurityPolicy from policy API Group instead.
type PodSecurityPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the policy enforced.
	Spec *PodSecurityPolicySpec `pulumi:"spec"`
}

// PodSecurityPolicyTypeInput is an input type that accepts PodSecurityPolicyTypeArgs and PodSecurityPolicyTypeOutput values.
// You can construct a concrete instance of `PodSecurityPolicyTypeInput` via:
//
// 		 PodSecurityPolicyTypeArgs{...}
//
type PodSecurityPolicyTypeInput interface {
	pulumi.Input

	ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput
	ToPodSecurityPolicyTypeOutputWithContext(context.Context) PodSecurityPolicyTypeOutput
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated: use PodSecurityPolicy from policy API Group instead.
type PodSecurityPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the policy enforced.
	Spec PodSecurityPolicySpecPtrInput `pulumi:"spec"`
}

func (PodSecurityPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyType)(nil)).Elem()
}

func (i PodSecurityPolicyTypeArgs) ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput {
	return i.ToPodSecurityPolicyTypeOutputWithContext(context.Background())
}

func (i PodSecurityPolicyTypeArgs) ToPodSecurityPolicyTypeOutputWithContext(ctx context.Context) PodSecurityPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyTypeOutput)
}

// PodSecurityPolicyTypeArrayInput is an input type that accepts PodSecurityPolicyTypeArray and PodSecurityPolicyTypeArrayOutput values.
// You can construct a concrete instance of `PodSecurityPolicyTypeArrayInput` via:
//
// 		 PodSecurityPolicyTypeArray{ PodSecurityPolicyTypeArgs{...} }
//
type PodSecurityPolicyTypeArrayInput interface {
	pulumi.Input

	ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput
	ToPodSecurityPolicyTypeArrayOutputWithContext(context.Context) PodSecurityPolicyTypeArrayOutput
}

type PodSecurityPolicyTypeArray []PodSecurityPolicyTypeInput

func (PodSecurityPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSecurityPolicyType)(nil)).Elem()
}

func (i PodSecurityPolicyTypeArray) ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput {
	return i.ToPodSecurityPolicyTypeArrayOutputWithContext(context.Background())
}

func (i PodSecurityPolicyTypeArray) ToPodSecurityPolicyTypeArrayOutputWithContext(ctx context.Context) PodSecurityPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyTypeArrayOutput)
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated: use PodSecurityPolicy from policy API Group instead.
type PodSecurityPolicyTypeOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyType)(nil)).Elem()
}

func (o PodSecurityPolicyTypeOutput) ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput {
	return o
}

func (o PodSecurityPolicyTypeOutput) ToPodSecurityPolicyTypeOutputWithContext(ctx context.Context) PodSecurityPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSecurityPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSecurityPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodSecurityPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the policy enforced.
func (o PodSecurityPolicyTypeOutput) Spec() PodSecurityPolicySpecPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *PodSecurityPolicySpec { return v.Spec }).(PodSecurityPolicySpecPtrOutput)
}

type PodSecurityPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSecurityPolicyType)(nil)).Elem()
}

func (o PodSecurityPolicyTypeArrayOutput) ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput {
	return o
}

func (o PodSecurityPolicyTypeArrayOutput) ToPodSecurityPolicyTypeArrayOutputWithContext(ctx context.Context) PodSecurityPolicyTypeArrayOutput {
	return o
}

func (o PodSecurityPolicyTypeArrayOutput) Index(i pulumi.IntInput) PodSecurityPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSecurityPolicyType {
		return vs[0].([]PodSecurityPolicyType)[vs[1].(int)]
	}).(PodSecurityPolicyTypeOutput)
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects. Deprecated: use PodSecurityPolicyList from policy API Group instead.
type PodSecurityPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items []PodSecurityPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodSecurityPolicyListTypeInput is an input type that accepts PodSecurityPolicyListTypeArgs and PodSecurityPolicyListTypeOutput values.
// You can construct a concrete instance of `PodSecurityPolicyListTypeInput` via:
//
// 		 PodSecurityPolicyListTypeArgs{...}
//
type PodSecurityPolicyListTypeInput interface {
	pulumi.Input

	ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput
	ToPodSecurityPolicyListTypeOutputWithContext(context.Context) PodSecurityPolicyListTypeOutput
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects. Deprecated: use PodSecurityPolicyList from policy API Group instead.
type PodSecurityPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items PodSecurityPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodSecurityPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyListType)(nil)).Elem()
}

func (i PodSecurityPolicyListTypeArgs) ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput {
	return i.ToPodSecurityPolicyListTypeOutputWithContext(context.Background())
}

func (i PodSecurityPolicyListTypeArgs) ToPodSecurityPolicyListTypeOutputWithContext(ctx context.Context) PodSecurityPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyListTypeOutput)
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects. Deprecated: use PodSecurityPolicyList from policy API Group instead.
type PodSecurityPolicyListTypeOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyListType)(nil)).Elem()
}

func (o PodSecurityPolicyListTypeOutput) ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput {
	return o
}

func (o PodSecurityPolicyListTypeOutput) ToPodSecurityPolicyListTypeOutputWithContext(ctx context.Context) PodSecurityPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSecurityPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of schema objects.
func (o PodSecurityPolicyListTypeOutput) Items() PodSecurityPolicyTypeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) []PodSecurityPolicyType { return v.Items }).(PodSecurityPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSecurityPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodSecurityPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.
type PodSecurityPolicySpec struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
	AllowedCSIDrivers []AllowedCSIDriver `pulumi:"allowedCSIDrivers"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
	AllowedCapabilities []string `pulumi:"allowedCapabilities"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes []AllowedFlexVolume `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths []AllowedHostPath `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes []string `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	//
	// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
	DefaultAddCapabilities []string `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
	DefaultAllowPrivilegeEscalation *bool `pulumi:"defaultAllowPrivilegeEscalation"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
	//
	// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
	ForbiddenSysctls []string `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup *FSGroupStrategyOptions `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIPC *bool `pulumi:"hostIPC"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPID *bool `pulumi:"hostPID"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts []HostPortRange `pulumi:"hostPorts"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged *bool `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
	RequiredDropCapabilities []string `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup *RunAsGroupStrategyOptions `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser *RunAsUserStrategyOptions `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
	RuntimeClass *RuntimeClassStrategyOptions `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux *SELinuxStrategyOptions `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroups *SupplementalGroupsStrategyOptions `pulumi:"supplementalGroups"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
	Volumes []string `pulumi:"volumes"`
}

// PodSecurityPolicySpecInput is an input type that accepts PodSecurityPolicySpecArgs and PodSecurityPolicySpecOutput values.
// You can construct a concrete instance of `PodSecurityPolicySpecInput` via:
//
// 		 PodSecurityPolicySpecArgs{...}
//
type PodSecurityPolicySpecInput interface {
	pulumi.Input

	ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput
	ToPodSecurityPolicySpecOutputWithContext(context.Context) PodSecurityPolicySpecOutput
}

// PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.
type PodSecurityPolicySpecArgs struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
	AllowedCSIDrivers AllowedCSIDriverArrayInput `pulumi:"allowedCSIDrivers"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
	AllowedCapabilities pulumi.StringArrayInput `pulumi:"allowedCapabilities"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes AllowedFlexVolumeArrayInput `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths AllowedHostPathArrayInput `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes pulumi.StringArrayInput `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	//
	// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
	AllowedUnsafeSysctls pulumi.StringArrayInput `pulumi:"allowedUnsafeSysctls"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
	DefaultAddCapabilities pulumi.StringArrayInput `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
	DefaultAllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"defaultAllowPrivilegeEscalation"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
	//
	// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
	ForbiddenSysctls pulumi.StringArrayInput `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup FSGroupStrategyOptionsPtrInput `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIPC pulumi.BoolPtrInput `pulumi:"hostIPC"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPID pulumi.BoolPtrInput `pulumi:"hostPID"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts HostPortRangeArrayInput `pulumi:"hostPorts"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
	RequiredDropCapabilities pulumi.StringArrayInput `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup RunAsGroupStrategyOptionsPtrInput `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser RunAsUserStrategyOptionsPtrInput `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
	RuntimeClass RuntimeClassStrategyOptionsPtrInput `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux SELinuxStrategyOptionsPtrInput `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroups SupplementalGroupsStrategyOptionsPtrInput `pulumi:"supplementalGroups"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
	Volumes pulumi.StringArrayInput `pulumi:"volumes"`
}

func (PodSecurityPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicySpec)(nil)).Elem()
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput {
	return i.ToPodSecurityPolicySpecOutputWithContext(context.Background())
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecOutputWithContext(ctx context.Context) PodSecurityPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecOutput)
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return i.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecOutput).ToPodSecurityPolicySpecPtrOutputWithContext(ctx)
}

// PodSecurityPolicySpecPtrInput is an input type that accepts PodSecurityPolicySpecArgs, PodSecurityPolicySpecPtr and PodSecurityPolicySpecPtrOutput values.
// You can construct a concrete instance of `PodSecurityPolicySpecPtrInput` via:
//
// 		 PodSecurityPolicySpecArgs{...}
//
//  or:
//
// 		 nil
//
type PodSecurityPolicySpecPtrInput interface {
	pulumi.Input

	ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput
	ToPodSecurityPolicySpecPtrOutputWithContext(context.Context) PodSecurityPolicySpecPtrOutput
}

type podSecurityPolicySpecPtrType PodSecurityPolicySpecArgs

func PodSecurityPolicySpecPtr(v *PodSecurityPolicySpecArgs) PodSecurityPolicySpecPtrInput {
	return (*podSecurityPolicySpecPtrType)(v)
}

func (*podSecurityPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicySpec)(nil)).Elem()
}

func (i *podSecurityPolicySpecPtrType) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return i.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (i *podSecurityPolicySpecPtrType) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecPtrOutput)
}

// PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.
type PodSecurityPolicySpecOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicySpec)(nil)).Elem()
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput {
	return o
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecOutputWithContext(ctx context.Context) PodSecurityPolicySpecOutput {
	return o
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return o.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *PodSecurityPolicySpec {
		return &v
	}).(PodSecurityPolicySpecPtrOutput)
}

// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
func (o PodSecurityPolicySpecOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
func (o PodSecurityPolicySpecOutput) AllowedCSIDrivers() AllowedCSIDriverArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedCSIDriver { return v.AllowedCSIDrivers }).(AllowedCSIDriverArrayOutput)
}

// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
func (o PodSecurityPolicySpecOutput) AllowedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedCapabilities }).(pulumi.StringArrayOutput)
}

// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
func (o PodSecurityPolicySpecOutput) AllowedFlexVolumes() AllowedFlexVolumeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedFlexVolume { return v.AllowedFlexVolumes }).(AllowedFlexVolumeArrayOutput)
}

// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
func (o PodSecurityPolicySpecOutput) AllowedHostPaths() AllowedHostPathArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedHostPath { return v.AllowedHostPaths }).(AllowedHostPathArrayOutput)
}

// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
func (o PodSecurityPolicySpecOutput) AllowedProcMountTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedProcMountTypes }).(pulumi.StringArrayOutput)
}

// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
//
// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
func (o PodSecurityPolicySpecOutput) DefaultAddCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.DefaultAddCapabilities }).(pulumi.StringArrayOutput)
}

// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
func (o PodSecurityPolicySpecOutput) DefaultAllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.DefaultAllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
//
// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecOutput) ForbiddenSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.ForbiddenSysctls }).(pulumi.StringArrayOutput)
}

// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
func (o PodSecurityPolicySpecOutput) FsGroup() FSGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *FSGroupStrategyOptions { return v.FsGroup }).(FSGroupStrategyOptionsPtrOutput)
}

// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
func (o PodSecurityPolicySpecOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostIPC }).(pulumi.BoolPtrOutput)
}

// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
func (o PodSecurityPolicySpecOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// hostPID determines if the policy allows the use of HostPID in the pod spec.
func (o PodSecurityPolicySpecOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostPID }).(pulumi.BoolPtrOutput)
}

// hostPorts determines which host port ranges are allowed to be exposed.
func (o PodSecurityPolicySpecOutput) HostPorts() HostPortRangeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []HostPortRange { return v.HostPorts }).(HostPortRangeArrayOutput)
}

// privileged determines if a pod can request to be run as privileged.
func (o PodSecurityPolicySpecOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
func (o PodSecurityPolicySpecOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
func (o PodSecurityPolicySpecOutput) RequiredDropCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.RequiredDropCapabilities }).(pulumi.StringArrayOutput)
}

// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
func (o PodSecurityPolicySpecOutput) RunAsGroup() RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RunAsGroupStrategyOptions { return v.RunAsGroup }).(RunAsGroupStrategyOptionsPtrOutput)
}

// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o PodSecurityPolicySpecOutput) RunAsUser() RunAsUserStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RunAsUserStrategyOptions { return v.RunAsUser }).(RunAsUserStrategyOptionsPtrOutput)
}

// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
func (o PodSecurityPolicySpecOutput) RuntimeClass() RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RuntimeClassStrategyOptions { return v.RuntimeClass }).(RuntimeClassStrategyOptionsPtrOutput)
}

// seLinux is the strategy that will dictate the allowable labels that may be set.
func (o PodSecurityPolicySpecOutput) SeLinux() SELinuxStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *SELinuxStrategyOptions { return v.SeLinux }).(SELinuxStrategyOptionsPtrOutput)
}

// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
func (o PodSecurityPolicySpecOutput) SupplementalGroups() SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *SupplementalGroupsStrategyOptions { return v.SupplementalGroups }).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
func (o PodSecurityPolicySpecOutput) Volumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.Volumes }).(pulumi.StringArrayOutput)
}

type PodSecurityPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicySpec)(nil)).Elem()
}

func (o PodSecurityPolicySpecPtrOutput) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return o
}

func (o PodSecurityPolicySpecPtrOutput) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return o
}

func (o PodSecurityPolicySpecPtrOutput) Elem() PodSecurityPolicySpecOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) PodSecurityPolicySpec { return *v }).(PodSecurityPolicySpecOutput)
}

// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
func (o PodSecurityPolicySpecPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
func (o PodSecurityPolicySpecPtrOutput) AllowedCSIDrivers() AllowedCSIDriverArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedCSIDriver { return v.AllowedCSIDrivers }).(AllowedCSIDriverArrayOutput)
}

// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
func (o PodSecurityPolicySpecPtrOutput) AllowedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedCapabilities }).(pulumi.StringArrayOutput)
}

// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
func (o PodSecurityPolicySpecPtrOutput) AllowedFlexVolumes() AllowedFlexVolumeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedFlexVolume { return v.AllowedFlexVolumes }).(AllowedFlexVolumeArrayOutput)
}

// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
func (o PodSecurityPolicySpecPtrOutput) AllowedHostPaths() AllowedHostPathArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedHostPath { return v.AllowedHostPaths }).(AllowedHostPathArrayOutput)
}

// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
func (o PodSecurityPolicySpecPtrOutput) AllowedProcMountTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedProcMountTypes }).(pulumi.StringArrayOutput)
}

// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
//
// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecPtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
func (o PodSecurityPolicySpecPtrOutput) DefaultAddCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.DefaultAddCapabilities }).(pulumi.StringArrayOutput)
}

// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
func (o PodSecurityPolicySpecPtrOutput) DefaultAllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.DefaultAllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
//
// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecPtrOutput) ForbiddenSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.ForbiddenSysctls }).(pulumi.StringArrayOutput)
}

// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
func (o PodSecurityPolicySpecPtrOutput) FsGroup() FSGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *FSGroupStrategyOptions { return v.FsGroup }).(FSGroupStrategyOptionsPtrOutput)
}

// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostIPC }).(pulumi.BoolPtrOutput)
}

// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// hostPID determines if the policy allows the use of HostPID in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostPID }).(pulumi.BoolPtrOutput)
}

// hostPorts determines which host port ranges are allowed to be exposed.
func (o PodSecurityPolicySpecPtrOutput) HostPorts() HostPortRangeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []HostPortRange { return v.HostPorts }).(HostPortRangeArrayOutput)
}

// privileged determines if a pod can request to be run as privileged.
func (o PodSecurityPolicySpecPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
func (o PodSecurityPolicySpecPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
func (o PodSecurityPolicySpecPtrOutput) RequiredDropCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.RequiredDropCapabilities }).(pulumi.StringArrayOutput)
}

// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
func (o PodSecurityPolicySpecPtrOutput) RunAsGroup() RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RunAsGroupStrategyOptions { return v.RunAsGroup }).(RunAsGroupStrategyOptionsPtrOutput)
}

// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o PodSecurityPolicySpecPtrOutput) RunAsUser() RunAsUserStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RunAsUserStrategyOptions { return v.RunAsUser }).(RunAsUserStrategyOptionsPtrOutput)
}

// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
func (o PodSecurityPolicySpecPtrOutput) RuntimeClass() RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RuntimeClassStrategyOptions { return v.RuntimeClass }).(RuntimeClassStrategyOptionsPtrOutput)
}

// seLinux is the strategy that will dictate the allowable labels that may be set.
func (o PodSecurityPolicySpecPtrOutput) SeLinux() SELinuxStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *SELinuxStrategyOptions { return v.SeLinux }).(SELinuxStrategyOptionsPtrOutput)
}

// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
func (o PodSecurityPolicySpecPtrOutput) SupplementalGroups() SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *SupplementalGroupsStrategyOptions { return v.SupplementalGroups }).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
func (o PodSecurityPolicySpecPtrOutput) Volumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.Volumes }).(pulumi.StringArrayOutput)
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSetType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ReplicaSetSpec `pulumi:"spec"`
	// Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ReplicaSetStatus `pulumi:"status"`
}

// ReplicaSetTypeInput is an input type that accepts ReplicaSetTypeArgs and ReplicaSetTypeOutput values.
// You can construct a concrete instance of `ReplicaSetTypeInput` via:
//
// 		 ReplicaSetTypeArgs{...}
//
type ReplicaSetTypeInput interface {
	pulumi.Input

	ToReplicaSetTypeOutput() ReplicaSetTypeOutput
	ToReplicaSetTypeOutputWithContext(context.Context) ReplicaSetTypeOutput
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSetTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicaSetSpecPtrInput `pulumi:"spec"`
	// Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicaSetStatusPtrInput `pulumi:"status"`
}

func (ReplicaSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetType)(nil)).Elem()
}

func (i ReplicaSetTypeArgs) ToReplicaSetTypeOutput() ReplicaSetTypeOutput {
	return i.ToReplicaSetTypeOutputWithContext(context.Background())
}

func (i ReplicaSetTypeArgs) ToReplicaSetTypeOutputWithContext(ctx context.Context) ReplicaSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetTypeOutput)
}

// ReplicaSetTypeArrayInput is an input type that accepts ReplicaSetTypeArray and ReplicaSetTypeArrayOutput values.
// You can construct a concrete instance of `ReplicaSetTypeArrayInput` via:
//
// 		 ReplicaSetTypeArray{ ReplicaSetTypeArgs{...} }
//
type ReplicaSetTypeArrayInput interface {
	pulumi.Input

	ToReplicaSetTypeArrayOutput() ReplicaSetTypeArrayOutput
	ToReplicaSetTypeArrayOutputWithContext(context.Context) ReplicaSetTypeArrayOutput
}

type ReplicaSetTypeArray []ReplicaSetTypeInput

func (ReplicaSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSetType)(nil)).Elem()
}

func (i ReplicaSetTypeArray) ToReplicaSetTypeArrayOutput() ReplicaSetTypeArrayOutput {
	return i.ToReplicaSetTypeArrayOutputWithContext(context.Background())
}

func (i ReplicaSetTypeArray) ToReplicaSetTypeArrayOutputWithContext(ctx context.Context) ReplicaSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetTypeArrayOutput)
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type ReplicaSetTypeOutput struct{ *pulumi.OutputState }

func (ReplicaSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetType)(nil)).Elem()
}

func (o ReplicaSetTypeOutput) ToReplicaSetTypeOutput() ReplicaSetTypeOutput {
	return o
}

func (o ReplicaSetTypeOutput) ToReplicaSetTypeOutputWithContext(ctx context.Context) ReplicaSetTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReplicaSetTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicaSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReplicaSetTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ReplicaSetType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicaSetTypeOutput) Spec() ReplicaSetSpecPtrOutput {
	return o.ApplyT(func(v ReplicaSetType) *ReplicaSetSpec { return v.Spec }).(ReplicaSetSpecPtrOutput)
}

// Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicaSetTypeOutput) Status() ReplicaSetStatusPtrOutput {
	return o.ApplyT(func(v ReplicaSetType) *ReplicaSetStatus { return v.Status }).(ReplicaSetStatusPtrOutput)
}

type ReplicaSetTypeArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSetType)(nil)).Elem()
}

func (o ReplicaSetTypeArrayOutput) ToReplicaSetTypeArrayOutput() ReplicaSetTypeArrayOutput {
	return o
}

func (o ReplicaSetTypeArrayOutput) ToReplicaSetTypeArrayOutputWithContext(ctx context.Context) ReplicaSetTypeArrayOutput {
	return o
}

func (o ReplicaSetTypeArrayOutput) Index(i pulumi.IntInput) ReplicaSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaSetType {
		return vs[0].([]ReplicaSetType)[vs[1].(int)]
	}).(ReplicaSetTypeOutput)
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type ReplicaSetCondition struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of replica set condition.
	Type *string `pulumi:"type"`
}

// ReplicaSetConditionInput is an input type that accepts ReplicaSetConditionArgs and ReplicaSetConditionOutput values.
// You can construct a concrete instance of `ReplicaSetConditionInput` via:
//
// 		 ReplicaSetConditionArgs{...}
//
type ReplicaSetConditionInput interface {
	pulumi.Input

	ToReplicaSetConditionOutput() ReplicaSetConditionOutput
	ToReplicaSetConditionOutputWithContext(context.Context) ReplicaSetConditionOutput
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type ReplicaSetConditionArgs struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of replica set condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReplicaSetConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetCondition)(nil)).Elem()
}

func (i ReplicaSetConditionArgs) ToReplicaSetConditionOutput() ReplicaSetConditionOutput {
	return i.ToReplicaSetConditionOutputWithContext(context.Background())
}

func (i ReplicaSetConditionArgs) ToReplicaSetConditionOutputWithContext(ctx context.Context) ReplicaSetConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetConditionOutput)
}

// ReplicaSetConditionArrayInput is an input type that accepts ReplicaSetConditionArray and ReplicaSetConditionArrayOutput values.
// You can construct a concrete instance of `ReplicaSetConditionArrayInput` via:
//
// 		 ReplicaSetConditionArray{ ReplicaSetConditionArgs{...} }
//
type ReplicaSetConditionArrayInput interface {
	pulumi.Input

	ToReplicaSetConditionArrayOutput() ReplicaSetConditionArrayOutput
	ToReplicaSetConditionArrayOutputWithContext(context.Context) ReplicaSetConditionArrayOutput
}

type ReplicaSetConditionArray []ReplicaSetConditionInput

func (ReplicaSetConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSetCondition)(nil)).Elem()
}

func (i ReplicaSetConditionArray) ToReplicaSetConditionArrayOutput() ReplicaSetConditionArrayOutput {
	return i.ToReplicaSetConditionArrayOutputWithContext(context.Background())
}

func (i ReplicaSetConditionArray) ToReplicaSetConditionArrayOutputWithContext(ctx context.Context) ReplicaSetConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetConditionArrayOutput)
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type ReplicaSetConditionOutput struct{ *pulumi.OutputState }

func (ReplicaSetConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetCondition)(nil)).Elem()
}

func (o ReplicaSetConditionOutput) ToReplicaSetConditionOutput() ReplicaSetConditionOutput {
	return o
}

func (o ReplicaSetConditionOutput) ToReplicaSetConditionOutputWithContext(ctx context.Context) ReplicaSetConditionOutput {
	return o
}

// The last time the condition transitioned from one status to another.
func (o ReplicaSetConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o ReplicaSetConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o ReplicaSetConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ReplicaSetConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of replica set condition.
func (o ReplicaSetConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReplicaSetConditionArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSetCondition)(nil)).Elem()
}

func (o ReplicaSetConditionArrayOutput) ToReplicaSetConditionArrayOutput() ReplicaSetConditionArrayOutput {
	return o
}

func (o ReplicaSetConditionArrayOutput) ToReplicaSetConditionArrayOutputWithContext(ctx context.Context) ReplicaSetConditionArrayOutput {
	return o
}

func (o ReplicaSetConditionArrayOutput) Index(i pulumi.IntInput) ReplicaSetConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaSetCondition {
		return vs[0].([]ReplicaSetCondition)[vs[1].(int)]
	}).(ReplicaSetConditionOutput)
}

// ReplicaSetList is a collection of ReplicaSets.
type ReplicaSetListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items []ReplicaSetType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ReplicaSetListTypeInput is an input type that accepts ReplicaSetListTypeArgs and ReplicaSetListTypeOutput values.
// You can construct a concrete instance of `ReplicaSetListTypeInput` via:
//
// 		 ReplicaSetListTypeArgs{...}
//
type ReplicaSetListTypeInput interface {
	pulumi.Input

	ToReplicaSetListTypeOutput() ReplicaSetListTypeOutput
	ToReplicaSetListTypeOutputWithContext(context.Context) ReplicaSetListTypeOutput
}

// ReplicaSetList is a collection of ReplicaSets.
type ReplicaSetListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items ReplicaSetTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ReplicaSetListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetListType)(nil)).Elem()
}

func (i ReplicaSetListTypeArgs) ToReplicaSetListTypeOutput() ReplicaSetListTypeOutput {
	return i.ToReplicaSetListTypeOutputWithContext(context.Background())
}

func (i ReplicaSetListTypeArgs) ToReplicaSetListTypeOutputWithContext(ctx context.Context) ReplicaSetListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetListTypeOutput)
}

// ReplicaSetList is a collection of ReplicaSets.
type ReplicaSetListTypeOutput struct{ *pulumi.OutputState }

func (ReplicaSetListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetListType)(nil)).Elem()
}

func (o ReplicaSetListTypeOutput) ToReplicaSetListTypeOutput() ReplicaSetListTypeOutput {
	return o
}

func (o ReplicaSetListTypeOutput) ToReplicaSetListTypeOutputWithContext(ctx context.Context) ReplicaSetListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReplicaSetListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
func (o ReplicaSetListTypeOutput) Items() ReplicaSetTypeArrayOutput {
	return o.ApplyT(func(v ReplicaSetListType) []ReplicaSetType { return v.Items }).(ReplicaSetTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicaSetListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicaSetListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ReplicaSetListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type ReplicaSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas *int `pulumi:"replicas"`
	// Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template *corev1.PodTemplateSpec `pulumi:"template"`
}

// ReplicaSetSpecInput is an input type that accepts ReplicaSetSpecArgs and ReplicaSetSpecOutput values.
// You can construct a concrete instance of `ReplicaSetSpecInput` via:
//
// 		 ReplicaSetSpecArgs{...}
//
type ReplicaSetSpecInput interface {
	pulumi.Input

	ToReplicaSetSpecOutput() ReplicaSetSpecOutput
	ToReplicaSetSpecOutputWithContext(context.Context) ReplicaSetSpecOutput
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type ReplicaSetSpecArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template corev1.PodTemplateSpecPtrInput `pulumi:"template"`
}

func (ReplicaSetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetSpec)(nil)).Elem()
}

func (i ReplicaSetSpecArgs) ToReplicaSetSpecOutput() ReplicaSetSpecOutput {
	return i.ToReplicaSetSpecOutputWithContext(context.Background())
}

func (i ReplicaSetSpecArgs) ToReplicaSetSpecOutputWithContext(ctx context.Context) ReplicaSetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetSpecOutput)
}

func (i ReplicaSetSpecArgs) ToReplicaSetSpecPtrOutput() ReplicaSetSpecPtrOutput {
	return i.ToReplicaSetSpecPtrOutputWithContext(context.Background())
}

func (i ReplicaSetSpecArgs) ToReplicaSetSpecPtrOutputWithContext(ctx context.Context) ReplicaSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetSpecOutput).ToReplicaSetSpecPtrOutputWithContext(ctx)
}

// ReplicaSetSpecPtrInput is an input type that accepts ReplicaSetSpecArgs, ReplicaSetSpecPtr and ReplicaSetSpecPtrOutput values.
// You can construct a concrete instance of `ReplicaSetSpecPtrInput` via:
//
// 		 ReplicaSetSpecArgs{...}
//
//  or:
//
// 		 nil
//
type ReplicaSetSpecPtrInput interface {
	pulumi.Input

	ToReplicaSetSpecPtrOutput() ReplicaSetSpecPtrOutput
	ToReplicaSetSpecPtrOutputWithContext(context.Context) ReplicaSetSpecPtrOutput
}

type replicaSetSpecPtrType ReplicaSetSpecArgs

func ReplicaSetSpecPtr(v *ReplicaSetSpecArgs) ReplicaSetSpecPtrInput {
	return (*replicaSetSpecPtrType)(v)
}

func (*replicaSetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetSpec)(nil)).Elem()
}

func (i *replicaSetSpecPtrType) ToReplicaSetSpecPtrOutput() ReplicaSetSpecPtrOutput {
	return i.ToReplicaSetSpecPtrOutputWithContext(context.Background())
}

func (i *replicaSetSpecPtrType) ToReplicaSetSpecPtrOutputWithContext(ctx context.Context) ReplicaSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetSpecPtrOutput)
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type ReplicaSetSpecOutput struct{ *pulumi.OutputState }

func (ReplicaSetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetSpec)(nil)).Elem()
}

func (o ReplicaSetSpecOutput) ToReplicaSetSpecOutput() ReplicaSetSpecOutput {
	return o
}

func (o ReplicaSetSpecOutput) ToReplicaSetSpecOutputWithContext(ctx context.Context) ReplicaSetSpecOutput {
	return o
}

func (o ReplicaSetSpecOutput) ToReplicaSetSpecPtrOutput() ReplicaSetSpecPtrOutput {
	return o.ToReplicaSetSpecPtrOutputWithContext(context.Background())
}

func (o ReplicaSetSpecOutput) ToReplicaSetSpecPtrOutputWithContext(ctx context.Context) ReplicaSetSpecPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *ReplicaSetSpec {
		return &v
	}).(ReplicaSetSpecPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicaSetSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
func (o ReplicaSetSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicaSetSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicaSetSpecOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

type ReplicaSetSpecPtrOutput struct{ *pulumi.OutputState }

func (ReplicaSetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetSpec)(nil)).Elem()
}

func (o ReplicaSetSpecPtrOutput) ToReplicaSetSpecPtrOutput() ReplicaSetSpecPtrOutput {
	return o
}

func (o ReplicaSetSpecPtrOutput) ToReplicaSetSpecPtrOutputWithContext(ctx context.Context) ReplicaSetSpecPtrOutput {
	return o
}

func (o ReplicaSetSpecPtrOutput) Elem() ReplicaSetSpecOutput {
	return o.ApplyT(func(v *ReplicaSetSpec) ReplicaSetSpec { return *v }).(ReplicaSetSpecOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicaSetSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
func (o ReplicaSetSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicaSetSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicaSetSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v ReplicaSetSpec) *corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecPtrOutput)
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type ReplicaSetStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replica set's current state.
	Conditions []ReplicaSetCondition `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas *int `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The number of ready replicas for this replica set.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas *int `pulumi:"replicas"`
}

// ReplicaSetStatusInput is an input type that accepts ReplicaSetStatusArgs and ReplicaSetStatusOutput values.
// You can construct a concrete instance of `ReplicaSetStatusInput` via:
//
// 		 ReplicaSetStatusArgs{...}
//
type ReplicaSetStatusInput interface {
	pulumi.Input

	ToReplicaSetStatusOutput() ReplicaSetStatusOutput
	ToReplicaSetStatusOutputWithContext(context.Context) ReplicaSetStatusOutput
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type ReplicaSetStatusArgs struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replica set's current state.
	Conditions ReplicaSetConditionArrayInput `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas pulumi.IntPtrInput `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The number of ready replicas for this replica set.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ReplicaSetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetStatus)(nil)).Elem()
}

func (i ReplicaSetStatusArgs) ToReplicaSetStatusOutput() ReplicaSetStatusOutput {
	return i.ToReplicaSetStatusOutputWithContext(context.Background())
}

func (i ReplicaSetStatusArgs) ToReplicaSetStatusOutputWithContext(ctx context.Context) ReplicaSetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetStatusOutput)
}

func (i ReplicaSetStatusArgs) ToReplicaSetStatusPtrOutput() ReplicaSetStatusPtrOutput {
	return i.ToReplicaSetStatusPtrOutputWithContext(context.Background())
}

func (i ReplicaSetStatusArgs) ToReplicaSetStatusPtrOutputWithContext(ctx context.Context) ReplicaSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetStatusOutput).ToReplicaSetStatusPtrOutputWithContext(ctx)
}

// ReplicaSetStatusPtrInput is an input type that accepts ReplicaSetStatusArgs, ReplicaSetStatusPtr and ReplicaSetStatusPtrOutput values.
// You can construct a concrete instance of `ReplicaSetStatusPtrInput` via:
//
// 		 ReplicaSetStatusArgs{...}
//
//  or:
//
// 		 nil
//
type ReplicaSetStatusPtrInput interface {
	pulumi.Input

	ToReplicaSetStatusPtrOutput() ReplicaSetStatusPtrOutput
	ToReplicaSetStatusPtrOutputWithContext(context.Context) ReplicaSetStatusPtrOutput
}

type replicaSetStatusPtrType ReplicaSetStatusArgs

func ReplicaSetStatusPtr(v *ReplicaSetStatusArgs) ReplicaSetStatusPtrInput {
	return (*replicaSetStatusPtrType)(v)
}

func (*replicaSetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetStatus)(nil)).Elem()
}

func (i *replicaSetStatusPtrType) ToReplicaSetStatusPtrOutput() ReplicaSetStatusPtrOutput {
	return i.ToReplicaSetStatusPtrOutputWithContext(context.Background())
}

func (i *replicaSetStatusPtrType) ToReplicaSetStatusPtrOutputWithContext(ctx context.Context) ReplicaSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetStatusPtrOutput)
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type ReplicaSetStatusOutput struct{ *pulumi.OutputState }

func (ReplicaSetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetStatus)(nil)).Elem()
}

func (o ReplicaSetStatusOutput) ToReplicaSetStatusOutput() ReplicaSetStatusOutput {
	return o
}

func (o ReplicaSetStatusOutput) ToReplicaSetStatusOutputWithContext(ctx context.Context) ReplicaSetStatusOutput {
	return o
}

func (o ReplicaSetStatusOutput) ToReplicaSetStatusPtrOutput() ReplicaSetStatusPtrOutput {
	return o.ToReplicaSetStatusPtrOutputWithContext(context.Background())
}

func (o ReplicaSetStatusOutput) ToReplicaSetStatusPtrOutputWithContext(ctx context.Context) ReplicaSetStatusPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *ReplicaSetStatus {
		return &v
	}).(ReplicaSetStatusPtrOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replica set.
func (o ReplicaSetStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replica set's current state.
func (o ReplicaSetStatusOutput) Conditions() ReplicaSetConditionArrayOutput {
	return o.ApplyT(func(v ReplicaSetStatus) []ReplicaSetCondition { return v.Conditions }).(ReplicaSetConditionArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replicaset.
func (o ReplicaSetStatusOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.FullyLabeledReplicas }).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
func (o ReplicaSetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replica set.
func (o ReplicaSetStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
func (o ReplicaSetStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ReplicaSetStatusPtrOutput struct{ *pulumi.OutputState }

func (ReplicaSetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetStatus)(nil)).Elem()
}

func (o ReplicaSetStatusPtrOutput) ToReplicaSetStatusPtrOutput() ReplicaSetStatusPtrOutput {
	return o
}

func (o ReplicaSetStatusPtrOutput) ToReplicaSetStatusPtrOutputWithContext(ctx context.Context) ReplicaSetStatusPtrOutput {
	return o
}

func (o ReplicaSetStatusPtrOutput) Elem() ReplicaSetStatusOutput {
	return o.ApplyT(func(v *ReplicaSetStatus) ReplicaSetStatus { return *v }).(ReplicaSetStatusOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replica set.
func (o ReplicaSetStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replica set's current state.
func (o ReplicaSetStatusPtrOutput) Conditions() ReplicaSetConditionArrayOutput {
	return o.ApplyT(func(v ReplicaSetStatus) []ReplicaSetCondition { return v.Conditions }).(ReplicaSetConditionArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replicaset.
func (o ReplicaSetStatusPtrOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.FullyLabeledReplicas }).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
func (o ReplicaSetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replica set.
func (o ReplicaSetStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
func (o ReplicaSetStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicaSetStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// DEPRECATED.
type RollbackConfig struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision *int `pulumi:"revision"`
}

// RollbackConfigInput is an input type that accepts RollbackConfigArgs and RollbackConfigOutput values.
// You can construct a concrete instance of `RollbackConfigInput` via:
//
// 		 RollbackConfigArgs{...}
//
type RollbackConfigInput interface {
	pulumi.Input

	ToRollbackConfigOutput() RollbackConfigOutput
	ToRollbackConfigOutputWithContext(context.Context) RollbackConfigOutput
}

// DEPRECATED.
type RollbackConfigArgs struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (RollbackConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfig)(nil)).Elem()
}

func (i RollbackConfigArgs) ToRollbackConfigOutput() RollbackConfigOutput {
	return i.ToRollbackConfigOutputWithContext(context.Background())
}

func (i RollbackConfigArgs) ToRollbackConfigOutputWithContext(ctx context.Context) RollbackConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigOutput)
}

func (i RollbackConfigArgs) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return i.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (i RollbackConfigArgs) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigOutput).ToRollbackConfigPtrOutputWithContext(ctx)
}

// RollbackConfigPtrInput is an input type that accepts RollbackConfigArgs, RollbackConfigPtr and RollbackConfigPtrOutput values.
// You can construct a concrete instance of `RollbackConfigPtrInput` via:
//
// 		 RollbackConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RollbackConfigPtrInput interface {
	pulumi.Input

	ToRollbackConfigPtrOutput() RollbackConfigPtrOutput
	ToRollbackConfigPtrOutputWithContext(context.Context) RollbackConfigPtrOutput
}

type rollbackConfigPtrType RollbackConfigArgs

func RollbackConfigPtr(v *RollbackConfigArgs) RollbackConfigPtrInput {
	return (*rollbackConfigPtrType)(v)
}

func (*rollbackConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfig)(nil)).Elem()
}

func (i *rollbackConfigPtrType) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return i.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (i *rollbackConfigPtrType) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigPtrOutput)
}

// DEPRECATED.
type RollbackConfigOutput struct{ *pulumi.OutputState }

func (RollbackConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfig)(nil)).Elem()
}

func (o RollbackConfigOutput) ToRollbackConfigOutput() RollbackConfigOutput {
	return o
}

func (o RollbackConfigOutput) ToRollbackConfigOutputWithContext(ctx context.Context) RollbackConfigOutput {
	return o
}

func (o RollbackConfigOutput) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return o.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (o RollbackConfigOutput) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return o.ApplyT(func(v RollbackConfig) *RollbackConfig {
		return &v
	}).(RollbackConfigPtrOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollbackConfig) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type RollbackConfigPtrOutput struct{ *pulumi.OutputState }

func (RollbackConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfig)(nil)).Elem()
}

func (o RollbackConfigPtrOutput) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return o
}

func (o RollbackConfigPtrOutput) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return o
}

func (o RollbackConfigPtrOutput) Elem() RollbackConfigOutput {
	return o.ApplyT(func(v *RollbackConfig) RollbackConfig { return *v }).(RollbackConfigOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollbackConfig) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Spec to control the desired behavior of daemon set rolling update.
type RollingUpdateDaemonSet struct {
	// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// RollingUpdateDaemonSetInput is an input type that accepts RollingUpdateDaemonSetArgs and RollingUpdateDaemonSetOutput values.
// You can construct a concrete instance of `RollingUpdateDaemonSetInput` via:
//
// 		 RollingUpdateDaemonSetArgs{...}
//
type RollingUpdateDaemonSetInput interface {
	pulumi.Input

	ToRollingUpdateDaemonSetOutput() RollingUpdateDaemonSetOutput
	ToRollingUpdateDaemonSetOutputWithContext(context.Context) RollingUpdateDaemonSetOutput
}

// Spec to control the desired behavior of daemon set rolling update.
type RollingUpdateDaemonSetArgs struct {
	// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (RollingUpdateDaemonSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDaemonSet)(nil)).Elem()
}

func (i RollingUpdateDaemonSetArgs) ToRollingUpdateDaemonSetOutput() RollingUpdateDaemonSetOutput {
	return i.ToRollingUpdateDaemonSetOutputWithContext(context.Background())
}

func (i RollingUpdateDaemonSetArgs) ToRollingUpdateDaemonSetOutputWithContext(ctx context.Context) RollingUpdateDaemonSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDaemonSetOutput)
}

func (i RollingUpdateDaemonSetArgs) ToRollingUpdateDaemonSetPtrOutput() RollingUpdateDaemonSetPtrOutput {
	return i.ToRollingUpdateDaemonSetPtrOutputWithContext(context.Background())
}

func (i RollingUpdateDaemonSetArgs) ToRollingUpdateDaemonSetPtrOutputWithContext(ctx context.Context) RollingUpdateDaemonSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDaemonSetOutput).ToRollingUpdateDaemonSetPtrOutputWithContext(ctx)
}

// RollingUpdateDaemonSetPtrInput is an input type that accepts RollingUpdateDaemonSetArgs, RollingUpdateDaemonSetPtr and RollingUpdateDaemonSetPtrOutput values.
// You can construct a concrete instance of `RollingUpdateDaemonSetPtrInput` via:
//
// 		 RollingUpdateDaemonSetArgs{...}
//
//  or:
//
// 		 nil
//
type RollingUpdateDaemonSetPtrInput interface {
	pulumi.Input

	ToRollingUpdateDaemonSetPtrOutput() RollingUpdateDaemonSetPtrOutput
	ToRollingUpdateDaemonSetPtrOutputWithContext(context.Context) RollingUpdateDaemonSetPtrOutput
}

type rollingUpdateDaemonSetPtrType RollingUpdateDaemonSetArgs

func RollingUpdateDaemonSetPtr(v *RollingUpdateDaemonSetArgs) RollingUpdateDaemonSetPtrInput {
	return (*rollingUpdateDaemonSetPtrType)(v)
}

func (*rollingUpdateDaemonSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDaemonSet)(nil)).Elem()
}

func (i *rollingUpdateDaemonSetPtrType) ToRollingUpdateDaemonSetPtrOutput() RollingUpdateDaemonSetPtrOutput {
	return i.ToRollingUpdateDaemonSetPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateDaemonSetPtrType) ToRollingUpdateDaemonSetPtrOutputWithContext(ctx context.Context) RollingUpdateDaemonSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDaemonSetPtrOutput)
}

// Spec to control the desired behavior of daemon set rolling update.
type RollingUpdateDaemonSetOutput struct{ *pulumi.OutputState }

func (RollingUpdateDaemonSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDaemonSet)(nil)).Elem()
}

func (o RollingUpdateDaemonSetOutput) ToRollingUpdateDaemonSetOutput() RollingUpdateDaemonSetOutput {
	return o
}

func (o RollingUpdateDaemonSetOutput) ToRollingUpdateDaemonSetOutputWithContext(ctx context.Context) RollingUpdateDaemonSetOutput {
	return o
}

func (o RollingUpdateDaemonSetOutput) ToRollingUpdateDaemonSetPtrOutput() RollingUpdateDaemonSetPtrOutput {
	return o.ToRollingUpdateDaemonSetPtrOutputWithContext(context.Background())
}

func (o RollingUpdateDaemonSetOutput) ToRollingUpdateDaemonSetPtrOutputWithContext(ctx context.Context) RollingUpdateDaemonSetPtrOutput {
	return o.ApplyT(func(v RollingUpdateDaemonSet) *RollingUpdateDaemonSet {
		return &v
	}).(RollingUpdateDaemonSetPtrOutput)
}

// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
func (o RollingUpdateDaemonSetOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDaemonSet) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type RollingUpdateDaemonSetPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateDaemonSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDaemonSet)(nil)).Elem()
}

func (o RollingUpdateDaemonSetPtrOutput) ToRollingUpdateDaemonSetPtrOutput() RollingUpdateDaemonSetPtrOutput {
	return o
}

func (o RollingUpdateDaemonSetPtrOutput) ToRollingUpdateDaemonSetPtrOutputWithContext(ctx context.Context) RollingUpdateDaemonSetPtrOutput {
	return o
}

func (o RollingUpdateDaemonSetPtrOutput) Elem() RollingUpdateDaemonSetOutput {
	return o.ApplyT(func(v *RollingUpdateDaemonSet) RollingUpdateDaemonSet { return *v }).(RollingUpdateDaemonSetOutput)
}

// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
func (o RollingUpdateDaemonSetPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDaemonSet) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeployment struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge interface{} `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// RollingUpdateDeploymentInput is an input type that accepts RollingUpdateDeploymentArgs and RollingUpdateDeploymentOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentInput` via:
//
// 		 RollingUpdateDeploymentArgs{...}
//
type RollingUpdateDeploymentInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput
	ToRollingUpdateDeploymentOutputWithContext(context.Context) RollingUpdateDeploymentOutput
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentArgs struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge pulumi.Input `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (RollingUpdateDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeployment)(nil)).Elem()
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput {
	return i.ToRollingUpdateDeploymentOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentOutputWithContext(ctx context.Context) RollingUpdateDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentOutput)
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return i.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentOutput).ToRollingUpdateDeploymentPtrOutputWithContext(ctx)
}

// RollingUpdateDeploymentPtrInput is an input type that accepts RollingUpdateDeploymentArgs, RollingUpdateDeploymentPtr and RollingUpdateDeploymentPtrOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentPtrInput` via:
//
// 		 RollingUpdateDeploymentArgs{...}
//
//  or:
//
// 		 nil
//
type RollingUpdateDeploymentPtrInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput
	ToRollingUpdateDeploymentPtrOutputWithContext(context.Context) RollingUpdateDeploymentPtrOutput
}

type rollingUpdateDeploymentPtrType RollingUpdateDeploymentArgs

func RollingUpdateDeploymentPtr(v *RollingUpdateDeploymentArgs) RollingUpdateDeploymentPtrInput {
	return (*rollingUpdateDeploymentPtrType)(v)
}

func (*rollingUpdateDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeployment)(nil)).Elem()
}

func (i *rollingUpdateDeploymentPtrType) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return i.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateDeploymentPtrType) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentPtrOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeployment)(nil)).Elem()
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput {
	return o
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentOutputWithContext(ctx context.Context) RollingUpdateDeploymentOutput {
	return o
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return o.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) *RollingUpdateDeployment {
		return &v
	}).(RollingUpdateDeploymentPtrOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type RollingUpdateDeploymentPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeployment)(nil)).Elem()
}

func (o RollingUpdateDeploymentPtrOutput) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPtrOutput) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPtrOutput) Elem() RollingUpdateDeploymentOutput {
	return o.ApplyT(func(v *RollingUpdateDeployment) RollingUpdateDeployment { return *v }).(RollingUpdateDeploymentOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentPtrOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsGroupStrategyOptions from policy API Group instead.
type RunAsGroupStrategyOptions struct {
	// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
	Rule *string `pulumi:"rule"`
}

// RunAsGroupStrategyOptionsInput is an input type that accepts RunAsGroupStrategyOptionsArgs and RunAsGroupStrategyOptionsOutput values.
// You can construct a concrete instance of `RunAsGroupStrategyOptionsInput` via:
//
// 		 RunAsGroupStrategyOptionsArgs{...}
//
type RunAsGroupStrategyOptionsInput interface {
	pulumi.Input

	ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput
	ToRunAsGroupStrategyOptionsOutputWithContext(context.Context) RunAsGroupStrategyOptionsOutput
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsGroupStrategyOptions from policy API Group instead.
type RunAsGroupStrategyOptionsArgs struct {
	// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (RunAsGroupStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsGroupStrategyOptions)(nil)).Elem()
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput {
	return i.ToRunAsGroupStrategyOptionsOutputWithContext(context.Background())
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsOutput)
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return i.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsOutput).ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx)
}

// RunAsGroupStrategyOptionsPtrInput is an input type that accepts RunAsGroupStrategyOptionsArgs, RunAsGroupStrategyOptionsPtr and RunAsGroupStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RunAsGroupStrategyOptionsPtrInput` via:
//
// 		 RunAsGroupStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RunAsGroupStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput
	ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Context) RunAsGroupStrategyOptionsPtrOutput
}

type runAsGroupStrategyOptionsPtrType RunAsGroupStrategyOptionsArgs

func RunAsGroupStrategyOptionsPtr(v *RunAsGroupStrategyOptionsArgs) RunAsGroupStrategyOptionsPtrInput {
	return (*runAsGroupStrategyOptionsPtrType)(v)
}

func (*runAsGroupStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsGroupStrategyOptions)(nil)).Elem()
}

func (i *runAsGroupStrategyOptionsPtrType) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return i.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runAsGroupStrategyOptionsPtrType) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsPtrOutput)
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsGroupStrategyOptions from policy API Group instead.
type RunAsGroupStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RunAsGroupStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsGroupStrategyOptions)(nil)).Elem()
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput {
	return o
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsOutput {
	return o
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return o.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) *RunAsGroupStrategyOptions {
		return &v
	}).(RunAsGroupStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsGroupStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
func (o RunAsGroupStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type RunAsGroupStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RunAsGroupStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsGroupStrategyOptions)(nil)).Elem()
}

func (o RunAsGroupStrategyOptionsPtrOutput) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return o
}

func (o RunAsGroupStrategyOptionsPtrOutput) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return o
}

func (o RunAsGroupStrategyOptionsPtrOutput) Elem() RunAsGroupStrategyOptionsOutput {
	return o.ApplyT(func(v *RunAsGroupStrategyOptions) RunAsGroupStrategyOptions { return *v }).(RunAsGroupStrategyOptionsOutput)
}

// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsGroupStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
func (o RunAsGroupStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsUserStrategyOptions from policy API Group instead.
type RunAsUserStrategyOptions struct {
	// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule *string `pulumi:"rule"`
}

// RunAsUserStrategyOptionsInput is an input type that accepts RunAsUserStrategyOptionsArgs and RunAsUserStrategyOptionsOutput values.
// You can construct a concrete instance of `RunAsUserStrategyOptionsInput` via:
//
// 		 RunAsUserStrategyOptionsArgs{...}
//
type RunAsUserStrategyOptionsInput interface {
	pulumi.Input

	ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput
	ToRunAsUserStrategyOptionsOutputWithContext(context.Context) RunAsUserStrategyOptionsOutput
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsUserStrategyOptions from policy API Group instead.
type RunAsUserStrategyOptionsArgs struct {
	// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (RunAsUserStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsUserStrategyOptions)(nil)).Elem()
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput {
	return i.ToRunAsUserStrategyOptionsOutputWithContext(context.Background())
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsOutput)
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return i.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsOutput).ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx)
}

// RunAsUserStrategyOptionsPtrInput is an input type that accepts RunAsUserStrategyOptionsArgs, RunAsUserStrategyOptionsPtr and RunAsUserStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RunAsUserStrategyOptionsPtrInput` via:
//
// 		 RunAsUserStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RunAsUserStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput
	ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Context) RunAsUserStrategyOptionsPtrOutput
}

type runAsUserStrategyOptionsPtrType RunAsUserStrategyOptionsArgs

func RunAsUserStrategyOptionsPtr(v *RunAsUserStrategyOptionsArgs) RunAsUserStrategyOptionsPtrInput {
	return (*runAsUserStrategyOptionsPtrType)(v)
}

func (*runAsUserStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsUserStrategyOptions)(nil)).Elem()
}

func (i *runAsUserStrategyOptionsPtrType) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return i.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runAsUserStrategyOptionsPtrType) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsPtrOutput)
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsUserStrategyOptions from policy API Group instead.
type RunAsUserStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RunAsUserStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsUserStrategyOptions)(nil)).Elem()
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput {
	return o
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsOutput {
	return o
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return o.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) *RunAsUserStrategyOptions {
		return &v
	}).(RunAsUserStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsUserStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o RunAsUserStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type RunAsUserStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RunAsUserStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsUserStrategyOptions)(nil)).Elem()
}

func (o RunAsUserStrategyOptionsPtrOutput) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return o
}

func (o RunAsUserStrategyOptionsPtrOutput) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return o
}

func (o RunAsUserStrategyOptionsPtrOutput) Elem() RunAsUserStrategyOptionsOutput {
	return o.ApplyT(func(v *RunAsUserStrategyOptions) RunAsUserStrategyOptions { return *v }).(RunAsUserStrategyOptionsOutput)
}

// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsUserStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o RunAsUserStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptions struct {
	// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
	AllowedRuntimeClassNames []string `pulumi:"allowedRuntimeClassNames"`
	// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
	DefaultRuntimeClassName *string `pulumi:"defaultRuntimeClassName"`
}

// RuntimeClassStrategyOptionsInput is an input type that accepts RuntimeClassStrategyOptionsArgs and RuntimeClassStrategyOptionsOutput values.
// You can construct a concrete instance of `RuntimeClassStrategyOptionsInput` via:
//
// 		 RuntimeClassStrategyOptionsArgs{...}
//
type RuntimeClassStrategyOptionsInput interface {
	pulumi.Input

	ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput
	ToRuntimeClassStrategyOptionsOutputWithContext(context.Context) RuntimeClassStrategyOptionsOutput
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptionsArgs struct {
	// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
	AllowedRuntimeClassNames pulumi.StringArrayInput `pulumi:"allowedRuntimeClassNames"`
	// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
	DefaultRuntimeClassName pulumi.StringPtrInput `pulumi:"defaultRuntimeClassName"`
}

func (RuntimeClassStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassStrategyOptions)(nil)).Elem()
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput {
	return i.ToRuntimeClassStrategyOptionsOutputWithContext(context.Background())
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsOutput)
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return i.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsOutput).ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx)
}

// RuntimeClassStrategyOptionsPtrInput is an input type that accepts RuntimeClassStrategyOptionsArgs, RuntimeClassStrategyOptionsPtr and RuntimeClassStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RuntimeClassStrategyOptionsPtrInput` via:
//
// 		 RuntimeClassStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RuntimeClassStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput
	ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Context) RuntimeClassStrategyOptionsPtrOutput
}

type runtimeClassStrategyOptionsPtrType RuntimeClassStrategyOptionsArgs

func RuntimeClassStrategyOptionsPtr(v *RuntimeClassStrategyOptionsArgs) RuntimeClassStrategyOptionsPtrInput {
	return (*runtimeClassStrategyOptionsPtrType)(v)
}

func (*runtimeClassStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeClassStrategyOptions)(nil)).Elem()
}

func (i *runtimeClassStrategyOptionsPtrType) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return i.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runtimeClassStrategyOptionsPtrType) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsPtrOutput)
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RuntimeClassStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassStrategyOptions)(nil)).Elem()
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput {
	return o
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsOutput {
	return o
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return o.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) *RuntimeClassStrategyOptions {
		return &v
	}).(RuntimeClassStrategyOptionsPtrOutput)
}

// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
func (o RuntimeClassStrategyOptionsOutput) AllowedRuntimeClassNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) []string { return v.AllowedRuntimeClassNames }).(pulumi.StringArrayOutput)
}

// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
func (o RuntimeClassStrategyOptionsOutput) DefaultRuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) *string { return v.DefaultRuntimeClassName }).(pulumi.StringPtrOutput)
}

type RuntimeClassStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RuntimeClassStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeClassStrategyOptions)(nil)).Elem()
}

func (o RuntimeClassStrategyOptionsPtrOutput) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return o
}

func (o RuntimeClassStrategyOptionsPtrOutput) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return o
}

func (o RuntimeClassStrategyOptionsPtrOutput) Elem() RuntimeClassStrategyOptionsOutput {
	return o.ApplyT(func(v *RuntimeClassStrategyOptions) RuntimeClassStrategyOptions { return *v }).(RuntimeClassStrategyOptionsOutput)
}

// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
func (o RuntimeClassStrategyOptionsPtrOutput) AllowedRuntimeClassNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) []string { return v.AllowedRuntimeClassNames }).(pulumi.StringArrayOutput)
}

// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
func (o RuntimeClassStrategyOptionsPtrOutput) DefaultRuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) *string { return v.DefaultRuntimeClassName }).(pulumi.StringPtrOutput)
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use SELinuxStrategyOptions from policy API Group instead.
type SELinuxStrategyOptions struct {
	// rule is the strategy that will dictate the allowable labels that may be set.
	Rule *string `pulumi:"rule"`
	// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SeLinuxOptions *corev1.SELinuxOptions `pulumi:"seLinuxOptions"`
}

// SELinuxStrategyOptionsInput is an input type that accepts SELinuxStrategyOptionsArgs and SELinuxStrategyOptionsOutput values.
// You can construct a concrete instance of `SELinuxStrategyOptionsInput` via:
//
// 		 SELinuxStrategyOptionsArgs{...}
//
type SELinuxStrategyOptionsInput interface {
	pulumi.Input

	ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput
	ToSELinuxStrategyOptionsOutputWithContext(context.Context) SELinuxStrategyOptionsOutput
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use SELinuxStrategyOptions from policy API Group instead.
type SELinuxStrategyOptionsArgs struct {
	// rule is the strategy that will dictate the allowable labels that may be set.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
	// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SeLinuxOptions corev1.SELinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
}

func (SELinuxStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxStrategyOptions)(nil)).Elem()
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput {
	return i.ToSELinuxStrategyOptionsOutputWithContext(context.Background())
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsOutputWithContext(ctx context.Context) SELinuxStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsOutput)
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return i.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsOutput).ToSELinuxStrategyOptionsPtrOutputWithContext(ctx)
}

// SELinuxStrategyOptionsPtrInput is an input type that accepts SELinuxStrategyOptionsArgs, SELinuxStrategyOptionsPtr and SELinuxStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `SELinuxStrategyOptionsPtrInput` via:
//
// 		 SELinuxStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type SELinuxStrategyOptionsPtrInput interface {
	pulumi.Input

	ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput
	ToSELinuxStrategyOptionsPtrOutputWithContext(context.Context) SELinuxStrategyOptionsPtrOutput
}

type selinuxStrategyOptionsPtrType SELinuxStrategyOptionsArgs

func SELinuxStrategyOptionsPtr(v *SELinuxStrategyOptionsArgs) SELinuxStrategyOptionsPtrInput {
	return (*selinuxStrategyOptionsPtrType)(v)
}

func (*selinuxStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxStrategyOptions)(nil)).Elem()
}

func (i *selinuxStrategyOptionsPtrType) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return i.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *selinuxStrategyOptionsPtrType) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsPtrOutput)
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use SELinuxStrategyOptions from policy API Group instead.
type SELinuxStrategyOptionsOutput struct{ *pulumi.OutputState }

func (SELinuxStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxStrategyOptions)(nil)).Elem()
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput {
	return o
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsOutputWithContext(ctx context.Context) SELinuxStrategyOptionsOutput {
	return o
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return o.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *SELinuxStrategyOptions {
		return &v
	}).(SELinuxStrategyOptionsPtrOutput)
}

// rule is the strategy that will dictate the allowable labels that may be set.
func (o SELinuxStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o SELinuxStrategyOptionsOutput) SeLinuxOptions() corev1.SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *corev1.SELinuxOptions { return v.SeLinuxOptions }).(corev1.SELinuxOptionsPtrOutput)
}

type SELinuxStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (SELinuxStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxStrategyOptions)(nil)).Elem()
}

func (o SELinuxStrategyOptionsPtrOutput) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return o
}

func (o SELinuxStrategyOptionsPtrOutput) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return o
}

func (o SELinuxStrategyOptionsPtrOutput) Elem() SELinuxStrategyOptionsOutput {
	return o.ApplyT(func(v *SELinuxStrategyOptions) SELinuxStrategyOptions { return *v }).(SELinuxStrategyOptionsOutput)
}

// rule is the strategy that will dictate the allowable labels that may be set.
func (o SELinuxStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o SELinuxStrategyOptionsPtrOutput) SeLinuxOptions() corev1.SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *corev1.SELinuxOptions { return v.SeLinuxOptions }).(corev1.SELinuxOptionsPtrOutput)
}

// represents a scaling request for a resource.
type Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpec `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatus `pulumi:"status"`
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
// 		 ScaleArgs{...}
//
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// represents a scaling request for a resource.
type ScaleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPtrInput `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPtrInput `pulumi:"status"`
}

func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

// represents a scaling request for a resource.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScaleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScaleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScaleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Scale) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScaleOutput) Spec() ScaleSpecPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleSpec { return v.Spec }).(ScaleSpecPtrOutput)
}

// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScaleOutput) Status() ScaleStatusPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleStatus { return v.Status }).(ScaleStatusPtrOutput)
}

// describes the attributes of a scale subresource
type ScaleSpec struct {
	// desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecInput is an input type that accepts ScaleSpecArgs and ScaleSpecOutput values.
// You can construct a concrete instance of `ScaleSpecInput` via:
//
// 		 ScaleSpecArgs{...}
//
type ScaleSpecInput interface {
	pulumi.Input

	ToScaleSpecOutput() ScaleSpecOutput
	ToScaleSpecOutputWithContext(context.Context) ScaleSpecOutput
}

// describes the attributes of a scale subresource
type ScaleSpecArgs struct {
	// desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (i ScaleSpecArgs) ToScaleSpecOutput() ScaleSpecOutput {
	return i.ToScaleSpecOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput)
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput).ToScaleSpecPtrOutputWithContext(ctx)
}

// ScaleSpecPtrInput is an input type that accepts ScaleSpecArgs, ScaleSpecPtr and ScaleSpecPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPtrInput` via:
//
// 		 ScaleSpecArgs{...}
//
//  or:
//
// 		 nil
//
type ScaleSpecPtrInput interface {
	pulumi.Input

	ToScaleSpecPtrOutput() ScaleSpecPtrOutput
	ToScaleSpecPtrOutputWithContext(context.Context) ScaleSpecPtrOutput
}

type scaleSpecPtrType ScaleSpecArgs

func ScaleSpecPtr(v *ScaleSpecArgs) ScaleSpecPtrInput {
	return (*scaleSpecPtrType)(v)
}

func (*scaleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPtrOutput)
}

// describes the attributes of a scale subresource
type ScaleSpecOutput struct{ *pulumi.OutputState }

func (ScaleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecOutput) ToScaleSpecOutput() ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *ScaleSpec {
		return &v
	}).(ScaleSpecPtrOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) Elem() ScaleSpecOutput {
	return o.ApplyT(func(v *ScaleSpec) ScaleSpec { return *v }).(ScaleSpecOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// represents the current status of a scale subresource.
type ScaleStatus struct {
	// actual number of observed instances of the scaled object.
	Replicas *int `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector map[string]string `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector *string `pulumi:"targetSelector"`
}

// ScaleStatusInput is an input type that accepts ScaleStatusArgs and ScaleStatusOutput values.
// You can construct a concrete instance of `ScaleStatusInput` via:
//
// 		 ScaleStatusArgs{...}
//
type ScaleStatusInput interface {
	pulumi.Input

	ToScaleStatusOutput() ScaleStatusOutput
	ToScaleStatusOutputWithContext(context.Context) ScaleStatusOutput
}

// represents the current status of a scale subresource.
type ScaleStatusArgs struct {
	// actual number of observed instances of the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector pulumi.StringPtrInput `pulumi:"targetSelector"`
}

func (ScaleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (i ScaleStatusArgs) ToScaleStatusOutput() ScaleStatusOutput {
	return i.ToScaleStatusOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput)
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput).ToScaleStatusPtrOutputWithContext(ctx)
}

// ScaleStatusPtrInput is an input type that accepts ScaleStatusArgs, ScaleStatusPtr and ScaleStatusPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPtrInput` via:
//
// 		 ScaleStatusArgs{...}
//
//  or:
//
// 		 nil
//
type ScaleStatusPtrInput interface {
	pulumi.Input

	ToScaleStatusPtrOutput() ScaleStatusPtrOutput
	ToScaleStatusPtrOutputWithContext(context.Context) ScaleStatusPtrOutput
}

type scaleStatusPtrType ScaleStatusArgs

func ScaleStatusPtr(v *ScaleStatusArgs) ScaleStatusPtrInput {
	return (*scaleStatusPtrType)(v)
}

func (*scaleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPtrOutput)
}

// represents the current status of a scale subresource.
type ScaleStatusOutput struct{ *pulumi.OutputState }

func (ScaleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusOutput) ToScaleStatusOutput() ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *ScaleStatus {
		return &v
	}).(ScaleStatusPtrOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScaleStatus) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.TargetSelector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) Elem() ScaleStatusOutput {
	return o.ApplyT(func(v *ScaleStatus) ScaleStatus { return *v }).(ScaleStatusOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScaleStatus) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusPtrOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.TargetSelector }).(pulumi.StringPtrOutput)
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.
type SupplementalGroupsStrategyOptions struct {
	// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	Rule *string `pulumi:"rule"`
}

// SupplementalGroupsStrategyOptionsInput is an input type that accepts SupplementalGroupsStrategyOptionsArgs and SupplementalGroupsStrategyOptionsOutput values.
// You can construct a concrete instance of `SupplementalGroupsStrategyOptionsInput` via:
//
// 		 SupplementalGroupsStrategyOptionsArgs{...}
//
type SupplementalGroupsStrategyOptionsInput interface {
	pulumi.Input

	ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput
	ToSupplementalGroupsStrategyOptionsOutputWithContext(context.Context) SupplementalGroupsStrategyOptionsOutput
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.
type SupplementalGroupsStrategyOptionsArgs struct {
	// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (SupplementalGroupsStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput {
	return i.ToSupplementalGroupsStrategyOptionsOutputWithContext(context.Background())
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsOutput)
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return i.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsOutput).ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx)
}

// SupplementalGroupsStrategyOptionsPtrInput is an input type that accepts SupplementalGroupsStrategyOptionsArgs, SupplementalGroupsStrategyOptionsPtr and SupplementalGroupsStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `SupplementalGroupsStrategyOptionsPtrInput` via:
//
// 		 SupplementalGroupsStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type SupplementalGroupsStrategyOptionsPtrInput interface {
	pulumi.Input

	ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput
	ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Context) SupplementalGroupsStrategyOptionsPtrOutput
}

type supplementalGroupsStrategyOptionsPtrType SupplementalGroupsStrategyOptionsArgs

func SupplementalGroupsStrategyOptionsPtr(v *SupplementalGroupsStrategyOptionsArgs) SupplementalGroupsStrategyOptionsPtrInput {
	return (*supplementalGroupsStrategyOptionsPtrType)(v)
}

func (*supplementalGroupsStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (i *supplementalGroupsStrategyOptionsPtrType) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return i.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *supplementalGroupsStrategyOptionsPtrType) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.
type SupplementalGroupsStrategyOptionsOutput struct{ *pulumi.OutputState }

func (SupplementalGroupsStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) *SupplementalGroupsStrategyOptions {
		return &v
	}).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
func (o SupplementalGroupsStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
func (o SupplementalGroupsStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type SupplementalGroupsStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (SupplementalGroupsStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) Elem() SupplementalGroupsStrategyOptionsOutput {
	return o.ApplyT(func(v *SupplementalGroupsStrategyOptions) SupplementalGroupsStrategyOptions { return *v }).(SupplementalGroupsStrategyOptionsOutput)
}

// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
func (o SupplementalGroupsStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
func (o SupplementalGroupsStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AllowedCSIDriverOutput{})
	pulumi.RegisterOutputType(AllowedCSIDriverArrayOutput{})
	pulumi.RegisterOutputType(AllowedFlexVolumeOutput{})
	pulumi.RegisterOutputType(AllowedFlexVolumeArrayOutput{})
	pulumi.RegisterOutputType(AllowedHostPathOutput{})
	pulumi.RegisterOutputType(AllowedHostPathArrayOutput{})
	pulumi.RegisterOutputType(DaemonSetTypeOutput{})
	pulumi.RegisterOutputType(DaemonSetTypeArrayOutput{})
	pulumi.RegisterOutputType(DaemonSetConditionOutput{})
	pulumi.RegisterOutputType(DaemonSetConditionArrayOutput{})
	pulumi.RegisterOutputType(DaemonSetListTypeOutput{})
	pulumi.RegisterOutputType(DaemonSetSpecOutput{})
	pulumi.RegisterOutputType(DaemonSetSpecPtrOutput{})
	pulumi.RegisterOutputType(DaemonSetStatusOutput{})
	pulumi.RegisterOutputType(DaemonSetStatusPtrOutput{})
	pulumi.RegisterOutputType(DaemonSetUpdateStrategyOutput{})
	pulumi.RegisterOutputType(DaemonSetUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(DeploymentTypeOutput{})
	pulumi.RegisterOutputType(DeploymentTypeArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConditionOutput{})
	pulumi.RegisterOutputType(DeploymentConditionArrayOutput{})
	pulumi.RegisterOutputType(DeploymentListTypeOutput{})
	pulumi.RegisterOutputType(DeploymentRollbackOutput{})
	pulumi.RegisterOutputType(DeploymentSpecOutput{})
	pulumi.RegisterOutputType(DeploymentSpecPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStatusOutput{})
	pulumi.RegisterOutputType(DeploymentStatusPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyPtrOutput{})
	pulumi.RegisterOutputType(FSGroupStrategyOptionsOutput{})
	pulumi.RegisterOutputType(FSGroupStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(HTTPIngressPathOutput{})
	pulumi.RegisterOutputType(HTTPIngressPathArrayOutput{})
	pulumi.RegisterOutputType(HTTPIngressRuleValueOutput{})
	pulumi.RegisterOutputType(HTTPIngressRuleValuePtrOutput{})
	pulumi.RegisterOutputType(HostPortRangeOutput{})
	pulumi.RegisterOutputType(HostPortRangeArrayOutput{})
	pulumi.RegisterOutputType(IDRangeOutput{})
	pulumi.RegisterOutputType(IDRangeArrayOutput{})
	pulumi.RegisterOutputType(IPBlockOutput{})
	pulumi.RegisterOutputType(IPBlockPtrOutput{})
	pulumi.RegisterOutputType(IngressTypeOutput{})
	pulumi.RegisterOutputType(IngressTypeArrayOutput{})
	pulumi.RegisterOutputType(IngressBackendOutput{})
	pulumi.RegisterOutputType(IngressBackendPtrOutput{})
	pulumi.RegisterOutputType(IngressListTypeOutput{})
	pulumi.RegisterOutputType(IngressRuleOutput{})
	pulumi.RegisterOutputType(IngressRuleArrayOutput{})
	pulumi.RegisterOutputType(IngressSpecOutput{})
	pulumi.RegisterOutputType(IngressSpecPtrOutput{})
	pulumi.RegisterOutputType(IngressStatusOutput{})
	pulumi.RegisterOutputType(IngressStatusPtrOutput{})
	pulumi.RegisterOutputType(IngressTLSOutput{})
	pulumi.RegisterOutputType(IngressTLSArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyListTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyTypeOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyListTypeOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicySpecOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(ReplicaSetTypeOutput{})
	pulumi.RegisterOutputType(ReplicaSetTypeArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetConditionOutput{})
	pulumi.RegisterOutputType(ReplicaSetConditionArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetListTypeOutput{})
	pulumi.RegisterOutputType(ReplicaSetSpecOutput{})
	pulumi.RegisterOutputType(ReplicaSetSpecPtrOutput{})
	pulumi.RegisterOutputType(ReplicaSetStatusOutput{})
	pulumi.RegisterOutputType(ReplicaSetStatusPtrOutput{})
	pulumi.RegisterOutputType(RollbackConfigOutput{})
	pulumi.RegisterOutputType(RollbackConfigPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateDaemonSetOutput{})
	pulumi.RegisterOutputType(RollingUpdateDaemonSetPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentPtrOutput{})
	pulumi.RegisterOutputType(RunAsGroupStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RunAsGroupStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(RunAsUserStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RunAsUserStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(RuntimeClassStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RuntimeClassStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(SELinuxStrategyOptionsOutput{})
	pulumi.RegisterOutputType(SELinuxStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScaleSpecOutput{})
	pulumi.RegisterOutputType(ScaleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusOutput{})
	pulumi.RegisterOutputType(ScaleStatusPtrOutput{})
	pulumi.RegisterOutputType(SupplementalGroupsStrategyOptionsOutput{})
	pulumi.RegisterOutputType(SupplementalGroupsStrategyOptionsPtrOutput{})
}
