// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResources struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules []NamedRuleWithOperations `pulumi:"excludeResourceRules"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `pulumi:"matchPolicy"`
	// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
	//
	// For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "runlevel",
	//       "operator": "NotIn",
	//       "values": [
	//         "0",
	//         "1"
	//       ]
	//     }
	//   ]
	// }
	//
	// If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "environment",
	//       "operator": "In",
	//       "values": [
	//         "prod",
	//         "staging"
	//       ]
	//     }
	//   ]
	// }
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
	//
	// Default to the empty LabelSelector, which matches everything.
	NamespaceSelector *metav1.LabelSelector `pulumi:"namespaceSelector"`
	// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
	ObjectSelector *metav1.LabelSelector `pulumi:"objectSelector"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules []NamedRuleWithOperations `pulumi:"resourceRules"`
}

// MatchResourcesInput is an input type that accepts MatchResourcesArgs and MatchResourcesOutput values.
// You can construct a concrete instance of `MatchResourcesInput` via:
//
//	MatchResourcesArgs{...}
type MatchResourcesInput interface {
	pulumi.Input

	ToMatchResourcesOutput() MatchResourcesOutput
	ToMatchResourcesOutputWithContext(context.Context) MatchResourcesOutput
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResourcesArgs struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules NamedRuleWithOperationsArrayInput `pulumi:"excludeResourceRules"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy pulumi.StringPtrInput `pulumi:"matchPolicy"`
	// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
	//
	// For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "runlevel",
	//       "operator": "NotIn",
	//       "values": [
	//         "0",
	//         "1"
	//       ]
	//     }
	//   ]
	// }
	//
	// If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "environment",
	//       "operator": "In",
	//       "values": [
	//         "prod",
	//         "staging"
	//       ]
	//     }
	//   ]
	// }
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
	//
	// Default to the empty LabelSelector, which matches everything.
	NamespaceSelector metav1.LabelSelectorPtrInput `pulumi:"namespaceSelector"`
	// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
	ObjectSelector metav1.LabelSelectorPtrInput `pulumi:"objectSelector"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules NamedRuleWithOperationsArrayInput `pulumi:"resourceRules"`
}

func (MatchResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchResources)(nil)).Elem()
}

func (i MatchResourcesArgs) ToMatchResourcesOutput() MatchResourcesOutput {
	return i.ToMatchResourcesOutputWithContext(context.Background())
}

func (i MatchResourcesArgs) ToMatchResourcesOutputWithContext(ctx context.Context) MatchResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesOutput)
}

func (i MatchResourcesArgs) ToMatchResourcesPtrOutput() MatchResourcesPtrOutput {
	return i.ToMatchResourcesPtrOutputWithContext(context.Background())
}

func (i MatchResourcesArgs) ToMatchResourcesPtrOutputWithContext(ctx context.Context) MatchResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesOutput).ToMatchResourcesPtrOutputWithContext(ctx)
}

// MatchResourcesPtrInput is an input type that accepts MatchResourcesArgs, MatchResourcesPtr and MatchResourcesPtrOutput values.
// You can construct a concrete instance of `MatchResourcesPtrInput` via:
//
//	        MatchResourcesArgs{...}
//
//	or:
//
//	        nil
type MatchResourcesPtrInput interface {
	pulumi.Input

	ToMatchResourcesPtrOutput() MatchResourcesPtrOutput
	ToMatchResourcesPtrOutputWithContext(context.Context) MatchResourcesPtrOutput
}

type matchResourcesPtrType MatchResourcesArgs

func MatchResourcesPtr(v *MatchResourcesArgs) MatchResourcesPtrInput {
	return (*matchResourcesPtrType)(v)
}

func (*matchResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchResources)(nil)).Elem()
}

func (i *matchResourcesPtrType) ToMatchResourcesPtrOutput() MatchResourcesPtrOutput {
	return i.ToMatchResourcesPtrOutputWithContext(context.Background())
}

func (i *matchResourcesPtrType) ToMatchResourcesPtrOutputWithContext(ctx context.Context) MatchResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesPtrOutput)
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResourcesOutput struct{ *pulumi.OutputState }

func (MatchResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchResources)(nil)).Elem()
}

func (o MatchResourcesOutput) ToMatchResourcesOutput() MatchResourcesOutput {
	return o
}

func (o MatchResourcesOutput) ToMatchResourcesOutputWithContext(ctx context.Context) MatchResourcesOutput {
	return o
}

func (o MatchResourcesOutput) ToMatchResourcesPtrOutput() MatchResourcesPtrOutput {
	return o.ToMatchResourcesPtrOutputWithContext(context.Background())
}

func (o MatchResourcesOutput) ToMatchResourcesPtrOutputWithContext(ctx context.Context) MatchResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchResources) *MatchResources {
		return &v
	}).(MatchResourcesPtrOutput)
}

// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
func (o MatchResourcesOutput) ExcludeResourceRules() NamedRuleWithOperationsArrayOutput {
	return o.ApplyT(func(v MatchResources) []NamedRuleWithOperations { return v.ExcludeResourceRules }).(NamedRuleWithOperationsArrayOutput)
}

// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
//
// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
//
// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
//
// Defaults to "Equivalent"
func (o MatchResourcesOutput) MatchPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MatchResources) *string { return v.MatchPolicy }).(pulumi.StringPtrOutput)
}

// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
//
//	For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "runlevel",
//	      "operator": "NotIn",
//	      "values": [
//	        "0",
//	        "1"
//	      ]
//	    }
//	  ]
//	}
//
//	If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "environment",
//	      "operator": "In",
//	      "values": [
//	        "prod",
//	        "staging"
//	      ]
//	    }
//	  ]
//	}
//
// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
//
// Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v MatchResources) *metav1.LabelSelector { return v.NamespaceSelector }).(metav1.LabelSelectorPtrOutput)
}

// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesOutput) ObjectSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v MatchResources) *metav1.LabelSelector { return v.ObjectSelector }).(metav1.LabelSelectorPtrOutput)
}

// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
func (o MatchResourcesOutput) ResourceRules() NamedRuleWithOperationsArrayOutput {
	return o.ApplyT(func(v MatchResources) []NamedRuleWithOperations { return v.ResourceRules }).(NamedRuleWithOperationsArrayOutput)
}

type MatchResourcesPtrOutput struct{ *pulumi.OutputState }

func (MatchResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchResources)(nil)).Elem()
}

func (o MatchResourcesPtrOutput) ToMatchResourcesPtrOutput() MatchResourcesPtrOutput {
	return o
}

func (o MatchResourcesPtrOutput) ToMatchResourcesPtrOutputWithContext(ctx context.Context) MatchResourcesPtrOutput {
	return o
}

func (o MatchResourcesPtrOutput) Elem() MatchResourcesOutput {
	return o.ApplyT(func(v *MatchResources) MatchResources {
		if v != nil {
			return *v
		}
		var ret MatchResources
		return ret
	}).(MatchResourcesOutput)
}

// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
func (o MatchResourcesPtrOutput) ExcludeResourceRules() NamedRuleWithOperationsArrayOutput {
	return o.ApplyT(func(v *MatchResources) []NamedRuleWithOperations {
		if v == nil {
			return nil
		}
		return v.ExcludeResourceRules
	}).(NamedRuleWithOperationsArrayOutput)
}

// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
//
// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
//
// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
//
// Defaults to "Equivalent"
func (o MatchResourcesPtrOutput) MatchPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchResources) *string {
		if v == nil {
			return nil
		}
		return v.MatchPolicy
	}).(pulumi.StringPtrOutput)
}

// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
//
//	For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "runlevel",
//	      "operator": "NotIn",
//	      "values": [
//	        "0",
//	        "1"
//	      ]
//	    }
//	  ]
//	}
//
//	If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "environment",
//	      "operator": "In",
//	      "values": [
//	        "prod",
//	        "staging"
//	      ]
//	    }
//	  ]
//	}
//
// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
//
// Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPtrOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *MatchResources) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(metav1.LabelSelectorPtrOutput)
}

// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPtrOutput) ObjectSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *MatchResources) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.ObjectSelector
	}).(metav1.LabelSelectorPtrOutput)
}

// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
func (o MatchResourcesPtrOutput) ResourceRules() NamedRuleWithOperationsArrayOutput {
	return o.ApplyT(func(v *MatchResources) []NamedRuleWithOperations {
		if v == nil {
			return nil
		}
		return v.ResourceRules
	}).(NamedRuleWithOperationsArrayOutput)
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResourcesPatch struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules []NamedRuleWithOperationsPatch `pulumi:"excludeResourceRules"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `pulumi:"matchPolicy"`
	// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
	//
	// For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "runlevel",
	//       "operator": "NotIn",
	//       "values": [
	//         "0",
	//         "1"
	//       ]
	//     }
	//   ]
	// }
	//
	// If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "environment",
	//       "operator": "In",
	//       "values": [
	//         "prod",
	//         "staging"
	//       ]
	//     }
	//   ]
	// }
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
	//
	// Default to the empty LabelSelector, which matches everything.
	NamespaceSelector *metav1.LabelSelectorPatch `pulumi:"namespaceSelector"`
	// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
	ObjectSelector *metav1.LabelSelectorPatch `pulumi:"objectSelector"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules []NamedRuleWithOperationsPatch `pulumi:"resourceRules"`
}

// MatchResourcesPatchInput is an input type that accepts MatchResourcesPatchArgs and MatchResourcesPatchOutput values.
// You can construct a concrete instance of `MatchResourcesPatchInput` via:
//
//	MatchResourcesPatchArgs{...}
type MatchResourcesPatchInput interface {
	pulumi.Input

	ToMatchResourcesPatchOutput() MatchResourcesPatchOutput
	ToMatchResourcesPatchOutputWithContext(context.Context) MatchResourcesPatchOutput
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResourcesPatchArgs struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules NamedRuleWithOperationsPatchArrayInput `pulumi:"excludeResourceRules"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy pulumi.StringPtrInput `pulumi:"matchPolicy"`
	// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
	//
	// For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "runlevel",
	//       "operator": "NotIn",
	//       "values": [
	//         "0",
	//         "1"
	//       ]
	//     }
	//   ]
	// }
	//
	// If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
	//   "matchExpressions": [
	//     {
	//       "key": "environment",
	//       "operator": "In",
	//       "values": [
	//         "prod",
	//         "staging"
	//       ]
	//     }
	//   ]
	// }
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
	//
	// Default to the empty LabelSelector, which matches everything.
	NamespaceSelector metav1.LabelSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
	ObjectSelector metav1.LabelSelectorPatchPtrInput `pulumi:"objectSelector"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules NamedRuleWithOperationsPatchArrayInput `pulumi:"resourceRules"`
}

func (MatchResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchResourcesPatch)(nil)).Elem()
}

func (i MatchResourcesPatchArgs) ToMatchResourcesPatchOutput() MatchResourcesPatchOutput {
	return i.ToMatchResourcesPatchOutputWithContext(context.Background())
}

func (i MatchResourcesPatchArgs) ToMatchResourcesPatchOutputWithContext(ctx context.Context) MatchResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesPatchOutput)
}

func (i MatchResourcesPatchArgs) ToMatchResourcesPatchPtrOutput() MatchResourcesPatchPtrOutput {
	return i.ToMatchResourcesPatchPtrOutputWithContext(context.Background())
}

func (i MatchResourcesPatchArgs) ToMatchResourcesPatchPtrOutputWithContext(ctx context.Context) MatchResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesPatchOutput).ToMatchResourcesPatchPtrOutputWithContext(ctx)
}

// MatchResourcesPatchPtrInput is an input type that accepts MatchResourcesPatchArgs, MatchResourcesPatchPtr and MatchResourcesPatchPtrOutput values.
// You can construct a concrete instance of `MatchResourcesPatchPtrInput` via:
//
//	        MatchResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type MatchResourcesPatchPtrInput interface {
	pulumi.Input

	ToMatchResourcesPatchPtrOutput() MatchResourcesPatchPtrOutput
	ToMatchResourcesPatchPtrOutputWithContext(context.Context) MatchResourcesPatchPtrOutput
}

type matchResourcesPatchPtrType MatchResourcesPatchArgs

func MatchResourcesPatchPtr(v *MatchResourcesPatchArgs) MatchResourcesPatchPtrInput {
	return (*matchResourcesPatchPtrType)(v)
}

func (*matchResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchResourcesPatch)(nil)).Elem()
}

func (i *matchResourcesPatchPtrType) ToMatchResourcesPatchPtrOutput() MatchResourcesPatchPtrOutput {
	return i.ToMatchResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *matchResourcesPatchPtrType) ToMatchResourcesPatchPtrOutputWithContext(ctx context.Context) MatchResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchResourcesPatchPtrOutput)
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type MatchResourcesPatchOutput struct{ *pulumi.OutputState }

func (MatchResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchResourcesPatch)(nil)).Elem()
}

func (o MatchResourcesPatchOutput) ToMatchResourcesPatchOutput() MatchResourcesPatchOutput {
	return o
}

func (o MatchResourcesPatchOutput) ToMatchResourcesPatchOutputWithContext(ctx context.Context) MatchResourcesPatchOutput {
	return o
}

func (o MatchResourcesPatchOutput) ToMatchResourcesPatchPtrOutput() MatchResourcesPatchPtrOutput {
	return o.ToMatchResourcesPatchPtrOutputWithContext(context.Background())
}

func (o MatchResourcesPatchOutput) ToMatchResourcesPatchPtrOutputWithContext(ctx context.Context) MatchResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchResourcesPatch) *MatchResourcesPatch {
		return &v
	}).(MatchResourcesPatchPtrOutput)
}

// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
func (o MatchResourcesPatchOutput) ExcludeResourceRules() NamedRuleWithOperationsPatchArrayOutput {
	return o.ApplyT(func(v MatchResourcesPatch) []NamedRuleWithOperationsPatch { return v.ExcludeResourceRules }).(NamedRuleWithOperationsPatchArrayOutput)
}

// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
//
// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
//
// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
//
// Defaults to "Equivalent"
func (o MatchResourcesPatchOutput) MatchPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MatchResourcesPatch) *string { return v.MatchPolicy }).(pulumi.StringPtrOutput)
}

// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
//
//	For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "runlevel",
//	      "operator": "NotIn",
//	      "values": [
//	        "0",
//	        "1"
//	      ]
//	    }
//	  ]
//	}
//
//	If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "environment",
//	      "operator": "In",
//	      "values": [
//	        "prod",
//	        "staging"
//	      ]
//	    }
//	  ]
//	}
//
// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
//
// Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPatchOutput) NamespaceSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v MatchResourcesPatch) *metav1.LabelSelectorPatch { return v.NamespaceSelector }).(metav1.LabelSelectorPatchPtrOutput)
}

// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPatchOutput) ObjectSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v MatchResourcesPatch) *metav1.LabelSelectorPatch { return v.ObjectSelector }).(metav1.LabelSelectorPatchPtrOutput)
}

// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
func (o MatchResourcesPatchOutput) ResourceRules() NamedRuleWithOperationsPatchArrayOutput {
	return o.ApplyT(func(v MatchResourcesPatch) []NamedRuleWithOperationsPatch { return v.ResourceRules }).(NamedRuleWithOperationsPatchArrayOutput)
}

type MatchResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (MatchResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchResourcesPatch)(nil)).Elem()
}

func (o MatchResourcesPatchPtrOutput) ToMatchResourcesPatchPtrOutput() MatchResourcesPatchPtrOutput {
	return o
}

func (o MatchResourcesPatchPtrOutput) ToMatchResourcesPatchPtrOutputWithContext(ctx context.Context) MatchResourcesPatchPtrOutput {
	return o
}

func (o MatchResourcesPatchPtrOutput) Elem() MatchResourcesPatchOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) MatchResourcesPatch {
		if v != nil {
			return *v
		}
		var ret MatchResourcesPatch
		return ret
	}).(MatchResourcesPatchOutput)
}

// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
func (o MatchResourcesPatchPtrOutput) ExcludeResourceRules() NamedRuleWithOperationsPatchArrayOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) []NamedRuleWithOperationsPatch {
		if v == nil {
			return nil
		}
		return v.ExcludeResourceRules
	}).(NamedRuleWithOperationsPatchArrayOutput)
}

// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
//
// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
//
// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
//
// Defaults to "Equivalent"
func (o MatchResourcesPatchPtrOutput) MatchPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) *string {
		if v == nil {
			return nil
		}
		return v.MatchPolicy
	}).(pulumi.StringPtrOutput)
}

// NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
//
//	For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "runlevel",
//	      "operator": "NotIn",
//	      "values": [
//	        "0",
//	        "1"
//	      ]
//	    }
//	  ]
//	}
//
//	If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
//	  "matchExpressions": [
//	    {
//	      "key": "environment",
//	      "operator": "In",
//	      "values": [
//	        "prod",
//	        "staging"
//	      ]
//	    }
//	  ]
//	}
//
// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
//
// Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPatchPtrOutput) NamespaceSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
func (o MatchResourcesPatchPtrOutput) ObjectSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.ObjectSelector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
func (o MatchResourcesPatchPtrOutput) ResourceRules() NamedRuleWithOperationsPatchArrayOutput {
	return o.ApplyT(func(v *MatchResourcesPatch) []NamedRuleWithOperationsPatch {
		if v == nil {
			return nil
		}
		return v.ResourceRules
	}).(NamedRuleWithOperationsPatchArrayOutput)
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	ApiGroups []string `pulumi:"apiGroups"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	ApiVersions []string `pulumi:"apiVersions"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []string `pulumi:"operations"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []string `pulumi:"resources"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `pulumi:"scope"`
}

// NamedRuleWithOperationsInput is an input type that accepts NamedRuleWithOperationsArgs and NamedRuleWithOperationsOutput values.
// You can construct a concrete instance of `NamedRuleWithOperationsInput` via:
//
//	NamedRuleWithOperationsArgs{...}
type NamedRuleWithOperationsInput interface {
	pulumi.Input

	ToNamedRuleWithOperationsOutput() NamedRuleWithOperationsOutput
	ToNamedRuleWithOperationsOutputWithContext(context.Context) NamedRuleWithOperationsOutput
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperationsArgs struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	ApiVersions pulumi.StringArrayInput `pulumi:"apiVersions"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (NamedRuleWithOperationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedRuleWithOperations)(nil)).Elem()
}

func (i NamedRuleWithOperationsArgs) ToNamedRuleWithOperationsOutput() NamedRuleWithOperationsOutput {
	return i.ToNamedRuleWithOperationsOutputWithContext(context.Background())
}

func (i NamedRuleWithOperationsArgs) ToNamedRuleWithOperationsOutputWithContext(ctx context.Context) NamedRuleWithOperationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedRuleWithOperationsOutput)
}

// NamedRuleWithOperationsArrayInput is an input type that accepts NamedRuleWithOperationsArray and NamedRuleWithOperationsArrayOutput values.
// You can construct a concrete instance of `NamedRuleWithOperationsArrayInput` via:
//
//	NamedRuleWithOperationsArray{ NamedRuleWithOperationsArgs{...} }
type NamedRuleWithOperationsArrayInput interface {
	pulumi.Input

	ToNamedRuleWithOperationsArrayOutput() NamedRuleWithOperationsArrayOutput
	ToNamedRuleWithOperationsArrayOutputWithContext(context.Context) NamedRuleWithOperationsArrayOutput
}

type NamedRuleWithOperationsArray []NamedRuleWithOperationsInput

func (NamedRuleWithOperationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedRuleWithOperations)(nil)).Elem()
}

func (i NamedRuleWithOperationsArray) ToNamedRuleWithOperationsArrayOutput() NamedRuleWithOperationsArrayOutput {
	return i.ToNamedRuleWithOperationsArrayOutputWithContext(context.Background())
}

func (i NamedRuleWithOperationsArray) ToNamedRuleWithOperationsArrayOutputWithContext(ctx context.Context) NamedRuleWithOperationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedRuleWithOperationsArrayOutput)
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperationsOutput struct{ *pulumi.OutputState }

func (NamedRuleWithOperationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedRuleWithOperations)(nil)).Elem()
}

func (o NamedRuleWithOperationsOutput) ToNamedRuleWithOperationsOutput() NamedRuleWithOperationsOutput {
	return o
}

func (o NamedRuleWithOperationsOutput) ToNamedRuleWithOperationsOutputWithContext(ctx context.Context) NamedRuleWithOperationsOutput {
	return o
}

// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsOutput) ApiVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) []string { return v.ApiVersions }).(pulumi.StringArrayOutput)
}

// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
func (o NamedRuleWithOperationsOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.
//
// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
//
// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
//
// Depending on the enclosing object, subresources might not be allowed. Required.
func (o NamedRuleWithOperationsOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
func (o NamedRuleWithOperationsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedRuleWithOperations) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type NamedRuleWithOperationsArrayOutput struct{ *pulumi.OutputState }

func (NamedRuleWithOperationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedRuleWithOperations)(nil)).Elem()
}

func (o NamedRuleWithOperationsArrayOutput) ToNamedRuleWithOperationsArrayOutput() NamedRuleWithOperationsArrayOutput {
	return o
}

func (o NamedRuleWithOperationsArrayOutput) ToNamedRuleWithOperationsArrayOutputWithContext(ctx context.Context) NamedRuleWithOperationsArrayOutput {
	return o
}

func (o NamedRuleWithOperationsArrayOutput) Index(i pulumi.IntInput) NamedRuleWithOperationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedRuleWithOperations {
		return vs[0].([]NamedRuleWithOperations)[vs[1].(int)]
	}).(NamedRuleWithOperationsOutput)
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperationsPatch struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	ApiGroups []string `pulumi:"apiGroups"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	ApiVersions []string `pulumi:"apiVersions"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []string `pulumi:"operations"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []string `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []string `pulumi:"resources"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `pulumi:"scope"`
}

// NamedRuleWithOperationsPatchInput is an input type that accepts NamedRuleWithOperationsPatchArgs and NamedRuleWithOperationsPatchOutput values.
// You can construct a concrete instance of `NamedRuleWithOperationsPatchInput` via:
//
//	NamedRuleWithOperationsPatchArgs{...}
type NamedRuleWithOperationsPatchInput interface {
	pulumi.Input

	ToNamedRuleWithOperationsPatchOutput() NamedRuleWithOperationsPatchOutput
	ToNamedRuleWithOperationsPatchOutputWithContext(context.Context) NamedRuleWithOperationsPatchOutput
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperationsPatchArgs struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	ApiVersions pulumi.StringArrayInput `pulumi:"apiVersions"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames pulumi.StringArrayInput `pulumi:"resourceNames"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (NamedRuleWithOperationsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedRuleWithOperationsPatch)(nil)).Elem()
}

func (i NamedRuleWithOperationsPatchArgs) ToNamedRuleWithOperationsPatchOutput() NamedRuleWithOperationsPatchOutput {
	return i.ToNamedRuleWithOperationsPatchOutputWithContext(context.Background())
}

func (i NamedRuleWithOperationsPatchArgs) ToNamedRuleWithOperationsPatchOutputWithContext(ctx context.Context) NamedRuleWithOperationsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedRuleWithOperationsPatchOutput)
}

// NamedRuleWithOperationsPatchArrayInput is an input type that accepts NamedRuleWithOperationsPatchArray and NamedRuleWithOperationsPatchArrayOutput values.
// You can construct a concrete instance of `NamedRuleWithOperationsPatchArrayInput` via:
//
//	NamedRuleWithOperationsPatchArray{ NamedRuleWithOperationsPatchArgs{...} }
type NamedRuleWithOperationsPatchArrayInput interface {
	pulumi.Input

	ToNamedRuleWithOperationsPatchArrayOutput() NamedRuleWithOperationsPatchArrayOutput
	ToNamedRuleWithOperationsPatchArrayOutputWithContext(context.Context) NamedRuleWithOperationsPatchArrayOutput
}

type NamedRuleWithOperationsPatchArray []NamedRuleWithOperationsPatchInput

func (NamedRuleWithOperationsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedRuleWithOperationsPatch)(nil)).Elem()
}

func (i NamedRuleWithOperationsPatchArray) ToNamedRuleWithOperationsPatchArrayOutput() NamedRuleWithOperationsPatchArrayOutput {
	return i.ToNamedRuleWithOperationsPatchArrayOutputWithContext(context.Background())
}

func (i NamedRuleWithOperationsPatchArray) ToNamedRuleWithOperationsPatchArrayOutputWithContext(ctx context.Context) NamedRuleWithOperationsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedRuleWithOperationsPatchArrayOutput)
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type NamedRuleWithOperationsPatchOutput struct{ *pulumi.OutputState }

func (NamedRuleWithOperationsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedRuleWithOperationsPatch)(nil)).Elem()
}

func (o NamedRuleWithOperationsPatchOutput) ToNamedRuleWithOperationsPatchOutput() NamedRuleWithOperationsPatchOutput {
	return o
}

func (o NamedRuleWithOperationsPatchOutput) ToNamedRuleWithOperationsPatchOutputWithContext(ctx context.Context) NamedRuleWithOperationsPatchOutput {
	return o
}

// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsPatchOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsPatchOutput) ApiVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) []string { return v.ApiVersions }).(pulumi.StringArrayOutput)
}

// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
func (o NamedRuleWithOperationsPatchOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
func (o NamedRuleWithOperationsPatchOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) []string { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

// Resources is a list of resources this rule applies to.
//
// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
//
// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
//
// Depending on the enclosing object, subresources might not be allowed. Required.
func (o NamedRuleWithOperationsPatchOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
func (o NamedRuleWithOperationsPatchOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedRuleWithOperationsPatch) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type NamedRuleWithOperationsPatchArrayOutput struct{ *pulumi.OutputState }

func (NamedRuleWithOperationsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedRuleWithOperationsPatch)(nil)).Elem()
}

func (o NamedRuleWithOperationsPatchArrayOutput) ToNamedRuleWithOperationsPatchArrayOutput() NamedRuleWithOperationsPatchArrayOutput {
	return o
}

func (o NamedRuleWithOperationsPatchArrayOutput) ToNamedRuleWithOperationsPatchArrayOutputWithContext(ctx context.Context) NamedRuleWithOperationsPatchArrayOutput {
	return o
}

func (o NamedRuleWithOperationsPatchArrayOutput) Index(i pulumi.IntInput) NamedRuleWithOperationsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedRuleWithOperationsPatch {
		return vs[0].([]NamedRuleWithOperationsPatch)[vs[1].(int)]
	}).(NamedRuleWithOperationsPatchOutput)
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKind struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is the API kind the resources belong to. Required.
	Kind *string `pulumi:"kind"`
}

// ParamKindInput is an input type that accepts ParamKindArgs and ParamKindOutput values.
// You can construct a concrete instance of `ParamKindInput` via:
//
//	ParamKindArgs{...}
type ParamKindInput interface {
	pulumi.Input

	ToParamKindOutput() ParamKindOutput
	ToParamKindOutputWithContext(context.Context) ParamKindOutput
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKindArgs struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is the API kind the resources belong to. Required.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ParamKindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamKind)(nil)).Elem()
}

func (i ParamKindArgs) ToParamKindOutput() ParamKindOutput {
	return i.ToParamKindOutputWithContext(context.Background())
}

func (i ParamKindArgs) ToParamKindOutputWithContext(ctx context.Context) ParamKindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindOutput)
}

func (i ParamKindArgs) ToParamKindPtrOutput() ParamKindPtrOutput {
	return i.ToParamKindPtrOutputWithContext(context.Background())
}

func (i ParamKindArgs) ToParamKindPtrOutputWithContext(ctx context.Context) ParamKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindOutput).ToParamKindPtrOutputWithContext(ctx)
}

// ParamKindPtrInput is an input type that accepts ParamKindArgs, ParamKindPtr and ParamKindPtrOutput values.
// You can construct a concrete instance of `ParamKindPtrInput` via:
//
//	        ParamKindArgs{...}
//
//	or:
//
//	        nil
type ParamKindPtrInput interface {
	pulumi.Input

	ToParamKindPtrOutput() ParamKindPtrOutput
	ToParamKindPtrOutputWithContext(context.Context) ParamKindPtrOutput
}

type paramKindPtrType ParamKindArgs

func ParamKindPtr(v *ParamKindArgs) ParamKindPtrInput {
	return (*paramKindPtrType)(v)
}

func (*paramKindPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamKind)(nil)).Elem()
}

func (i *paramKindPtrType) ToParamKindPtrOutput() ParamKindPtrOutput {
	return i.ToParamKindPtrOutputWithContext(context.Background())
}

func (i *paramKindPtrType) ToParamKindPtrOutputWithContext(ctx context.Context) ParamKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindPtrOutput)
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKindOutput struct{ *pulumi.OutputState }

func (ParamKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamKind)(nil)).Elem()
}

func (o ParamKindOutput) ToParamKindOutput() ParamKindOutput {
	return o
}

func (o ParamKindOutput) ToParamKindOutputWithContext(ctx context.Context) ParamKindOutput {
	return o
}

func (o ParamKindOutput) ToParamKindPtrOutput() ParamKindPtrOutput {
	return o.ToParamKindPtrOutputWithContext(context.Background())
}

func (o ParamKindOutput) ToParamKindPtrOutputWithContext(ctx context.Context) ParamKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParamKind) *ParamKind {
		return &v
	}).(ParamKindPtrOutput)
}

// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
func (o ParamKindOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamKind) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is the API kind the resources belong to. Required.
func (o ParamKindOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamKind) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ParamKindPtrOutput struct{ *pulumi.OutputState }

func (ParamKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamKind)(nil)).Elem()
}

func (o ParamKindPtrOutput) ToParamKindPtrOutput() ParamKindPtrOutput {
	return o
}

func (o ParamKindPtrOutput) ToParamKindPtrOutputWithContext(ctx context.Context) ParamKindPtrOutput {
	return o
}

func (o ParamKindPtrOutput) Elem() ParamKindOutput {
	return o.ApplyT(func(v *ParamKind) ParamKind {
		if v != nil {
			return *v
		}
		var ret ParamKind
		return ret
	}).(ParamKindOutput)
}

// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
func (o ParamKindPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamKind) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is the API kind the resources belong to. Required.
func (o ParamKindPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamKind) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKindPatch struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is the API kind the resources belong to. Required.
	Kind *string `pulumi:"kind"`
}

// ParamKindPatchInput is an input type that accepts ParamKindPatchArgs and ParamKindPatchOutput values.
// You can construct a concrete instance of `ParamKindPatchInput` via:
//
//	ParamKindPatchArgs{...}
type ParamKindPatchInput interface {
	pulumi.Input

	ToParamKindPatchOutput() ParamKindPatchOutput
	ToParamKindPatchOutputWithContext(context.Context) ParamKindPatchOutput
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKindPatchArgs struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is the API kind the resources belong to. Required.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ParamKindPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamKindPatch)(nil)).Elem()
}

func (i ParamKindPatchArgs) ToParamKindPatchOutput() ParamKindPatchOutput {
	return i.ToParamKindPatchOutputWithContext(context.Background())
}

func (i ParamKindPatchArgs) ToParamKindPatchOutputWithContext(ctx context.Context) ParamKindPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindPatchOutput)
}

func (i ParamKindPatchArgs) ToParamKindPatchPtrOutput() ParamKindPatchPtrOutput {
	return i.ToParamKindPatchPtrOutputWithContext(context.Background())
}

func (i ParamKindPatchArgs) ToParamKindPatchPtrOutputWithContext(ctx context.Context) ParamKindPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindPatchOutput).ToParamKindPatchPtrOutputWithContext(ctx)
}

// ParamKindPatchPtrInput is an input type that accepts ParamKindPatchArgs, ParamKindPatchPtr and ParamKindPatchPtrOutput values.
// You can construct a concrete instance of `ParamKindPatchPtrInput` via:
//
//	        ParamKindPatchArgs{...}
//
//	or:
//
//	        nil
type ParamKindPatchPtrInput interface {
	pulumi.Input

	ToParamKindPatchPtrOutput() ParamKindPatchPtrOutput
	ToParamKindPatchPtrOutputWithContext(context.Context) ParamKindPatchPtrOutput
}

type paramKindPatchPtrType ParamKindPatchArgs

func ParamKindPatchPtr(v *ParamKindPatchArgs) ParamKindPatchPtrInput {
	return (*paramKindPatchPtrType)(v)
}

func (*paramKindPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamKindPatch)(nil)).Elem()
}

func (i *paramKindPatchPtrType) ToParamKindPatchPtrOutput() ParamKindPatchPtrOutput {
	return i.ToParamKindPatchPtrOutputWithContext(context.Background())
}

func (i *paramKindPatchPtrType) ToParamKindPatchPtrOutputWithContext(ctx context.Context) ParamKindPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamKindPatchPtrOutput)
}

// ParamKind is a tuple of Group Kind and Version.
type ParamKindPatchOutput struct{ *pulumi.OutputState }

func (ParamKindPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamKindPatch)(nil)).Elem()
}

func (o ParamKindPatchOutput) ToParamKindPatchOutput() ParamKindPatchOutput {
	return o
}

func (o ParamKindPatchOutput) ToParamKindPatchOutputWithContext(ctx context.Context) ParamKindPatchOutput {
	return o
}

func (o ParamKindPatchOutput) ToParamKindPatchPtrOutput() ParamKindPatchPtrOutput {
	return o.ToParamKindPatchPtrOutputWithContext(context.Background())
}

func (o ParamKindPatchOutput) ToParamKindPatchPtrOutputWithContext(ctx context.Context) ParamKindPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParamKindPatch) *ParamKindPatch {
		return &v
	}).(ParamKindPatchPtrOutput)
}

// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
func (o ParamKindPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamKindPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is the API kind the resources belong to. Required.
func (o ParamKindPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamKindPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ParamKindPatchPtrOutput struct{ *pulumi.OutputState }

func (ParamKindPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamKindPatch)(nil)).Elem()
}

func (o ParamKindPatchPtrOutput) ToParamKindPatchPtrOutput() ParamKindPatchPtrOutput {
	return o
}

func (o ParamKindPatchPtrOutput) ToParamKindPatchPtrOutputWithContext(ctx context.Context) ParamKindPatchPtrOutput {
	return o
}

func (o ParamKindPatchPtrOutput) Elem() ParamKindPatchOutput {
	return o.ApplyT(func(v *ParamKindPatch) ParamKindPatch {
		if v != nil {
			return *v
		}
		var ret ParamKindPatch
		return ret
	}).(ParamKindPatchOutput)
}

// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
func (o ParamKindPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamKindPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is the API kind the resources belong to. Required.
func (o ParamKindPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamKindPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// ParamRef references a parameter resource
type ParamRef struct {
	// Name of the resource being referenced.
	Name *string `pulumi:"name"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace *string `pulumi:"namespace"`
}

// ParamRefInput is an input type that accepts ParamRefArgs and ParamRefOutput values.
// You can construct a concrete instance of `ParamRefInput` via:
//
//	ParamRefArgs{...}
type ParamRefInput interface {
	pulumi.Input

	ToParamRefOutput() ParamRefOutput
	ToParamRefOutputWithContext(context.Context) ParamRefOutput
}

// ParamRef references a parameter resource
type ParamRefArgs struct {
	// Name of the resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ParamRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamRef)(nil)).Elem()
}

func (i ParamRefArgs) ToParamRefOutput() ParamRefOutput {
	return i.ToParamRefOutputWithContext(context.Background())
}

func (i ParamRefArgs) ToParamRefOutputWithContext(ctx context.Context) ParamRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefOutput)
}

func (i ParamRefArgs) ToParamRefPtrOutput() ParamRefPtrOutput {
	return i.ToParamRefPtrOutputWithContext(context.Background())
}

func (i ParamRefArgs) ToParamRefPtrOutputWithContext(ctx context.Context) ParamRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefOutput).ToParamRefPtrOutputWithContext(ctx)
}

// ParamRefPtrInput is an input type that accepts ParamRefArgs, ParamRefPtr and ParamRefPtrOutput values.
// You can construct a concrete instance of `ParamRefPtrInput` via:
//
//	        ParamRefArgs{...}
//
//	or:
//
//	        nil
type ParamRefPtrInput interface {
	pulumi.Input

	ToParamRefPtrOutput() ParamRefPtrOutput
	ToParamRefPtrOutputWithContext(context.Context) ParamRefPtrOutput
}

type paramRefPtrType ParamRefArgs

func ParamRefPtr(v *ParamRefArgs) ParamRefPtrInput {
	return (*paramRefPtrType)(v)
}

func (*paramRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamRef)(nil)).Elem()
}

func (i *paramRefPtrType) ToParamRefPtrOutput() ParamRefPtrOutput {
	return i.ToParamRefPtrOutputWithContext(context.Background())
}

func (i *paramRefPtrType) ToParamRefPtrOutputWithContext(ctx context.Context) ParamRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefPtrOutput)
}

// ParamRef references a parameter resource
type ParamRefOutput struct{ *pulumi.OutputState }

func (ParamRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamRef)(nil)).Elem()
}

func (o ParamRefOutput) ToParamRefOutput() ParamRefOutput {
	return o
}

func (o ParamRefOutput) ToParamRefOutputWithContext(ctx context.Context) ParamRefOutput {
	return o
}

func (o ParamRefOutput) ToParamRefPtrOutput() ParamRefPtrOutput {
	return o.ToParamRefPtrOutputWithContext(context.Background())
}

func (o ParamRefOutput) ToParamRefPtrOutputWithContext(ctx context.Context) ParamRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParamRef) *ParamRef {
		return &v
	}).(ParamRefPtrOutput)
}

// Name of the resource being referenced.
func (o ParamRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
func (o ParamRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ParamRefPtrOutput struct{ *pulumi.OutputState }

func (ParamRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamRef)(nil)).Elem()
}

func (o ParamRefPtrOutput) ToParamRefPtrOutput() ParamRefPtrOutput {
	return o
}

func (o ParamRefPtrOutput) ToParamRefPtrOutputWithContext(ctx context.Context) ParamRefPtrOutput {
	return o
}

func (o ParamRefPtrOutput) Elem() ParamRefOutput {
	return o.ApplyT(func(v *ParamRef) ParamRef {
		if v != nil {
			return *v
		}
		var ret ParamRef
		return ret
	}).(ParamRefOutput)
}

// Name of the resource being referenced.
func (o ParamRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
func (o ParamRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ParamRef references a parameter resource
type ParamRefPatch struct {
	// Name of the resource being referenced.
	Name *string `pulumi:"name"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace *string `pulumi:"namespace"`
}

// ParamRefPatchInput is an input type that accepts ParamRefPatchArgs and ParamRefPatchOutput values.
// You can construct a concrete instance of `ParamRefPatchInput` via:
//
//	ParamRefPatchArgs{...}
type ParamRefPatchInput interface {
	pulumi.Input

	ToParamRefPatchOutput() ParamRefPatchOutput
	ToParamRefPatchOutputWithContext(context.Context) ParamRefPatchOutput
}

// ParamRef references a parameter resource
type ParamRefPatchArgs struct {
	// Name of the resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ParamRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamRefPatch)(nil)).Elem()
}

func (i ParamRefPatchArgs) ToParamRefPatchOutput() ParamRefPatchOutput {
	return i.ToParamRefPatchOutputWithContext(context.Background())
}

func (i ParamRefPatchArgs) ToParamRefPatchOutputWithContext(ctx context.Context) ParamRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefPatchOutput)
}

func (i ParamRefPatchArgs) ToParamRefPatchPtrOutput() ParamRefPatchPtrOutput {
	return i.ToParamRefPatchPtrOutputWithContext(context.Background())
}

func (i ParamRefPatchArgs) ToParamRefPatchPtrOutputWithContext(ctx context.Context) ParamRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefPatchOutput).ToParamRefPatchPtrOutputWithContext(ctx)
}

// ParamRefPatchPtrInput is an input type that accepts ParamRefPatchArgs, ParamRefPatchPtr and ParamRefPatchPtrOutput values.
// You can construct a concrete instance of `ParamRefPatchPtrInput` via:
//
//	        ParamRefPatchArgs{...}
//
//	or:
//
//	        nil
type ParamRefPatchPtrInput interface {
	pulumi.Input

	ToParamRefPatchPtrOutput() ParamRefPatchPtrOutput
	ToParamRefPatchPtrOutputWithContext(context.Context) ParamRefPatchPtrOutput
}

type paramRefPatchPtrType ParamRefPatchArgs

func ParamRefPatchPtr(v *ParamRefPatchArgs) ParamRefPatchPtrInput {
	return (*paramRefPatchPtrType)(v)
}

func (*paramRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamRefPatch)(nil)).Elem()
}

func (i *paramRefPatchPtrType) ToParamRefPatchPtrOutput() ParamRefPatchPtrOutput {
	return i.ToParamRefPatchPtrOutputWithContext(context.Background())
}

func (i *paramRefPatchPtrType) ToParamRefPatchPtrOutputWithContext(ctx context.Context) ParamRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamRefPatchPtrOutput)
}

// ParamRef references a parameter resource
type ParamRefPatchOutput struct{ *pulumi.OutputState }

func (ParamRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParamRefPatch)(nil)).Elem()
}

func (o ParamRefPatchOutput) ToParamRefPatchOutput() ParamRefPatchOutput {
	return o
}

func (o ParamRefPatchOutput) ToParamRefPatchOutputWithContext(ctx context.Context) ParamRefPatchOutput {
	return o
}

func (o ParamRefPatchOutput) ToParamRefPatchPtrOutput() ParamRefPatchPtrOutput {
	return o.ToParamRefPatchPtrOutputWithContext(context.Background())
}

func (o ParamRefPatchOutput) ToParamRefPatchPtrOutputWithContext(ctx context.Context) ParamRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParamRefPatch) *ParamRefPatch {
		return &v
	}).(ParamRefPatchPtrOutput)
}

// Name of the resource being referenced.
func (o ParamRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
func (o ParamRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParamRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ParamRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ParamRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamRefPatch)(nil)).Elem()
}

func (o ParamRefPatchPtrOutput) ToParamRefPatchPtrOutput() ParamRefPatchPtrOutput {
	return o
}

func (o ParamRefPatchPtrOutput) ToParamRefPatchPtrOutputWithContext(ctx context.Context) ParamRefPatchPtrOutput {
	return o
}

func (o ParamRefPatchPtrOutput) Elem() ParamRefPatchOutput {
	return o.ApplyT(func(v *ParamRefPatch) ParamRefPatch {
		if v != nil {
			return *v
		}
		var ret ParamRefPatch
		return ret
	}).(ParamRefPatchOutput)
}

// Name of the resource being referenced.
func (o ParamRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
func (o ParamRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicy.
	Spec *ValidatingAdmissionPolicySpec `pulumi:"spec"`
}

// ValidatingAdmissionPolicyTypeInput is an input type that accepts ValidatingAdmissionPolicyTypeArgs and ValidatingAdmissionPolicyTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyTypeInput` via:
//
//	ValidatingAdmissionPolicyTypeArgs{...}
type ValidatingAdmissionPolicyTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyTypeOutput() ValidatingAdmissionPolicyTypeOutput
	ToValidatingAdmissionPolicyTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyTypeOutput
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicy.
	Spec ValidatingAdmissionPolicySpecPtrInput `pulumi:"spec"`
}

func (ValidatingAdmissionPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyTypeArgs) ToValidatingAdmissionPolicyTypeOutput() ValidatingAdmissionPolicyTypeOutput {
	return i.ToValidatingAdmissionPolicyTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyTypeArgs) ToValidatingAdmissionPolicyTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyTypeOutput)
}

// ValidatingAdmissionPolicyTypeArrayInput is an input type that accepts ValidatingAdmissionPolicyTypeArray and ValidatingAdmissionPolicyTypeArrayOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyTypeArrayInput` via:
//
//	ValidatingAdmissionPolicyTypeArray{ ValidatingAdmissionPolicyTypeArgs{...} }
type ValidatingAdmissionPolicyTypeArrayInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyTypeArrayOutput() ValidatingAdmissionPolicyTypeArrayOutput
	ToValidatingAdmissionPolicyTypeArrayOutputWithContext(context.Context) ValidatingAdmissionPolicyTypeArrayOutput
}

type ValidatingAdmissionPolicyTypeArray []ValidatingAdmissionPolicyTypeInput

func (ValidatingAdmissionPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidatingAdmissionPolicyType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyTypeArray) ToValidatingAdmissionPolicyTypeArrayOutput() ValidatingAdmissionPolicyTypeArrayOutput {
	return i.ToValidatingAdmissionPolicyTypeArrayOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyTypeArray) ToValidatingAdmissionPolicyTypeArrayOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyTypeArrayOutput)
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyTypeOutput) ToValidatingAdmissionPolicyTypeOutput() ValidatingAdmissionPolicyTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyTypeOutput) ToValidatingAdmissionPolicyTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ValidatingAdmissionPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the ValidatingAdmissionPolicy.
func (o ValidatingAdmissionPolicyTypeOutput) Spec() ValidatingAdmissionPolicySpecPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyType) *ValidatingAdmissionPolicySpec { return v.Spec }).(ValidatingAdmissionPolicySpecPtrOutput)
}

type ValidatingAdmissionPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidatingAdmissionPolicyType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyTypeArrayOutput) ToValidatingAdmissionPolicyTypeArrayOutput() ValidatingAdmissionPolicyTypeArrayOutput {
	return o
}

func (o ValidatingAdmissionPolicyTypeArrayOutput) ToValidatingAdmissionPolicyTypeArrayOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyTypeArrayOutput {
	return o
}

func (o ValidatingAdmissionPolicyTypeArrayOutput) Index(i pulumi.IntInput) ValidatingAdmissionPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidatingAdmissionPolicyType {
		return vs[0].([]ValidatingAdmissionPolicyType)[vs[1].(int)]
	}).(ValidatingAdmissionPolicyTypeOutput)
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
	Spec *ValidatingAdmissionPolicyBindingSpec `pulumi:"spec"`
}

// ValidatingAdmissionPolicyBindingTypeInput is an input type that accepts ValidatingAdmissionPolicyBindingTypeArgs and ValidatingAdmissionPolicyBindingTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingTypeInput` via:
//
//	ValidatingAdmissionPolicyBindingTypeArgs{...}
type ValidatingAdmissionPolicyBindingTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingTypeOutput() ValidatingAdmissionPolicyBindingTypeOutput
	ToValidatingAdmissionPolicyBindingTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingTypeOutput
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
	Spec ValidatingAdmissionPolicyBindingSpecPtrInput `pulumi:"spec"`
}

func (ValidatingAdmissionPolicyBindingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingTypeArgs) ToValidatingAdmissionPolicyBindingTypeOutput() ValidatingAdmissionPolicyBindingTypeOutput {
	return i.ToValidatingAdmissionPolicyBindingTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingTypeArgs) ToValidatingAdmissionPolicyBindingTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingTypeOutput)
}

// ValidatingAdmissionPolicyBindingTypeArrayInput is an input type that accepts ValidatingAdmissionPolicyBindingTypeArray and ValidatingAdmissionPolicyBindingTypeArrayOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingTypeArrayInput` via:
//
//	ValidatingAdmissionPolicyBindingTypeArray{ ValidatingAdmissionPolicyBindingTypeArgs{...} }
type ValidatingAdmissionPolicyBindingTypeArrayInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingTypeArrayOutput() ValidatingAdmissionPolicyBindingTypeArrayOutput
	ToValidatingAdmissionPolicyBindingTypeArrayOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingTypeArrayOutput
}

type ValidatingAdmissionPolicyBindingTypeArray []ValidatingAdmissionPolicyBindingTypeInput

func (ValidatingAdmissionPolicyBindingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidatingAdmissionPolicyBindingType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingTypeArray) ToValidatingAdmissionPolicyBindingTypeArrayOutput() ValidatingAdmissionPolicyBindingTypeArrayOutput {
	return i.ToValidatingAdmissionPolicyBindingTypeArrayOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingTypeArray) ToValidatingAdmissionPolicyBindingTypeArrayOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingTypeArrayOutput)
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingTypeOutput) ToValidatingAdmissionPolicyBindingTypeOutput() ValidatingAdmissionPolicyBindingTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingTypeOutput) ToValidatingAdmissionPolicyBindingTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyBindingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyBindingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ValidatingAdmissionPolicyBindingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
func (o ValidatingAdmissionPolicyBindingTypeOutput) Spec() ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingType) *ValidatingAdmissionPolicyBindingSpec { return v.Spec }).(ValidatingAdmissionPolicyBindingSpecPtrOutput)
}

type ValidatingAdmissionPolicyBindingTypeArrayOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidatingAdmissionPolicyBindingType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingTypeArrayOutput) ToValidatingAdmissionPolicyBindingTypeArrayOutput() ValidatingAdmissionPolicyBindingTypeArrayOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingTypeArrayOutput) ToValidatingAdmissionPolicyBindingTypeArrayOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingTypeArrayOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingTypeArrayOutput) Index(i pulumi.IntInput) ValidatingAdmissionPolicyBindingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidatingAdmissionPolicyBindingType {
		return vs[0].([]ValidatingAdmissionPolicyBindingType)[vs[1].(int)]
	}).(ValidatingAdmissionPolicyBindingTypeOutput)
}

// ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of PolicyBinding.
	Items []ValidatingAdmissionPolicyBindingType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ValidatingAdmissionPolicyBindingListTypeInput is an input type that accepts ValidatingAdmissionPolicyBindingListTypeArgs and ValidatingAdmissionPolicyBindingListTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingListTypeInput` via:
//
//	ValidatingAdmissionPolicyBindingListTypeArgs{...}
type ValidatingAdmissionPolicyBindingListTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingListTypeOutput() ValidatingAdmissionPolicyBindingListTypeOutput
	ToValidatingAdmissionPolicyBindingListTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingListTypeOutput
}

// ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of PolicyBinding.
	Items ValidatingAdmissionPolicyBindingTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ValidatingAdmissionPolicyBindingListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingListType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingListTypeArgs) ToValidatingAdmissionPolicyBindingListTypeOutput() ValidatingAdmissionPolicyBindingListTypeOutput {
	return i.ToValidatingAdmissionPolicyBindingListTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingListTypeArgs) ToValidatingAdmissionPolicyBindingListTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingListTypeOutput)
}

// ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingListTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingListType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingListTypeOutput) ToValidatingAdmissionPolicyBindingListTypeOutput() ValidatingAdmissionPolicyBindingListTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingListTypeOutput) ToValidatingAdmissionPolicyBindingListTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyBindingListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of PolicyBinding.
func (o ValidatingAdmissionPolicyBindingListTypeOutput) Items() ValidatingAdmissionPolicyBindingTypeArrayOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingListType) []ValidatingAdmissionPolicyBindingType {
		return v.Items
	}).(ValidatingAdmissionPolicyBindingTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyBindingListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyBindingListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
	Spec *ValidatingAdmissionPolicyBindingSpecPatch `pulumi:"spec"`
}

// ValidatingAdmissionPolicyBindingPatchTypeInput is an input type that accepts ValidatingAdmissionPolicyBindingPatchTypeArgs and ValidatingAdmissionPolicyBindingPatchTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingPatchTypeInput` via:
//
//	ValidatingAdmissionPolicyBindingPatchTypeArgs{...}
type ValidatingAdmissionPolicyBindingPatchTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingPatchTypeOutput() ValidatingAdmissionPolicyBindingPatchTypeOutput
	ToValidatingAdmissionPolicyBindingPatchTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingPatchTypeOutput
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
	Spec ValidatingAdmissionPolicyBindingSpecPatchPtrInput `pulumi:"spec"`
}

func (ValidatingAdmissionPolicyBindingPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingPatchType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingPatchTypeArgs) ToValidatingAdmissionPolicyBindingPatchTypeOutput() ValidatingAdmissionPolicyBindingPatchTypeOutput {
	return i.ToValidatingAdmissionPolicyBindingPatchTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingPatchTypeArgs) ToValidatingAdmissionPolicyBindingPatchTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingPatchTypeOutput)
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type ValidatingAdmissionPolicyBindingPatchTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingPatchType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) ToValidatingAdmissionPolicyBindingPatchTypeOutput() ValidatingAdmissionPolicyBindingPatchTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) ToValidatingAdmissionPolicyBindingPatchTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
func (o ValidatingAdmissionPolicyBindingPatchTypeOutput) Spec() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingPatchType) *ValidatingAdmissionPolicyBindingSpecPatch {
		return v.Spec
	}).(ValidatingAdmissionPolicyBindingSpecPatchPtrOutput)
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpec struct {
	// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
	MatchResources *MatchResources `pulumi:"matchResources"`
	// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
	ParamRef *ParamRef `pulumi:"paramRef"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName *string `pulumi:"policyName"`
}

// ValidatingAdmissionPolicyBindingSpecInput is an input type that accepts ValidatingAdmissionPolicyBindingSpecArgs and ValidatingAdmissionPolicyBindingSpecOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingSpecInput` via:
//
//	ValidatingAdmissionPolicyBindingSpecArgs{...}
type ValidatingAdmissionPolicyBindingSpecInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingSpecOutput() ValidatingAdmissionPolicyBindingSpecOutput
	ToValidatingAdmissionPolicyBindingSpecOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingSpecOutput
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpecArgs struct {
	// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
	MatchResources MatchResourcesPtrInput `pulumi:"matchResources"`
	// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
	ParamRef ParamRefPtrInput `pulumi:"paramRef"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (ValidatingAdmissionPolicyBindingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpec)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingSpecArgs) ToValidatingAdmissionPolicyBindingSpecOutput() ValidatingAdmissionPolicyBindingSpecOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingSpecArgs) ToValidatingAdmissionPolicyBindingSpecOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecOutput)
}

func (i ValidatingAdmissionPolicyBindingSpecArgs) ToValidatingAdmissionPolicyBindingSpecPtrOutput() ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingSpecArgs) ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecOutput).ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(ctx)
}

// ValidatingAdmissionPolicyBindingSpecPtrInput is an input type that accepts ValidatingAdmissionPolicyBindingSpecArgs, ValidatingAdmissionPolicyBindingSpecPtr and ValidatingAdmissionPolicyBindingSpecPtrOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingSpecPtrInput` via:
//
//	        ValidatingAdmissionPolicyBindingSpecArgs{...}
//
//	or:
//
//	        nil
type ValidatingAdmissionPolicyBindingSpecPtrInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingSpecPtrOutput() ValidatingAdmissionPolicyBindingSpecPtrOutput
	ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingSpecPtrOutput
}

type validatingAdmissionPolicyBindingSpecPtrType ValidatingAdmissionPolicyBindingSpecArgs

func ValidatingAdmissionPolicyBindingSpecPtr(v *ValidatingAdmissionPolicyBindingSpecArgs) ValidatingAdmissionPolicyBindingSpecPtrInput {
	return (*validatingAdmissionPolicyBindingSpecPtrType)(v)
}

func (*validatingAdmissionPolicyBindingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicyBindingSpec)(nil)).Elem()
}

func (i *validatingAdmissionPolicyBindingSpecPtrType) ToValidatingAdmissionPolicyBindingSpecPtrOutput() ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(context.Background())
}

func (i *validatingAdmissionPolicyBindingSpecPtrType) ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecPtrOutput)
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpecOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpec)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingSpecOutput) ToValidatingAdmissionPolicyBindingSpecOutput() ValidatingAdmissionPolicyBindingSpecOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecOutput) ToValidatingAdmissionPolicyBindingSpecOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecOutput) ToValidatingAdmissionPolicyBindingSpecPtrOutput() ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return o.ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(context.Background())
}

func (o ValidatingAdmissionPolicyBindingSpecOutput) ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidatingAdmissionPolicyBindingSpec) *ValidatingAdmissionPolicyBindingSpec {
		return &v
	}).(ValidatingAdmissionPolicyBindingSpecPtrOutput)
}

// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
func (o ValidatingAdmissionPolicyBindingSpecOutput) MatchResources() MatchResourcesPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpec) *MatchResources { return v.MatchResources }).(MatchResourcesPtrOutput)
}

// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
func (o ValidatingAdmissionPolicyBindingSpecOutput) ParamRef() ParamRefPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpec) *ParamRef { return v.ParamRef }).(ParamRefPtrOutput)
}

// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
func (o ValidatingAdmissionPolicyBindingSpecOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpec) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type ValidatingAdmissionPolicyBindingSpecPtrOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicyBindingSpec)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) ToValidatingAdmissionPolicyBindingSpecPtrOutput() ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) ToValidatingAdmissionPolicyBindingSpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) Elem() ValidatingAdmissionPolicyBindingSpecOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpec) ValidatingAdmissionPolicyBindingSpec {
		if v != nil {
			return *v
		}
		var ret ValidatingAdmissionPolicyBindingSpec
		return ret
	}).(ValidatingAdmissionPolicyBindingSpecOutput)
}

// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) MatchResources() MatchResourcesPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpec) *MatchResources {
		if v == nil {
			return nil
		}
		return v.MatchResources
	}).(MatchResourcesPtrOutput)
}

// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) ParamRef() ParamRefPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpec) *ParamRef {
		if v == nil {
			return nil
		}
		return v.ParamRef
	}).(ParamRefPtrOutput)
}

// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
func (o ValidatingAdmissionPolicyBindingSpecPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpec) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpecPatch struct {
	// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
	MatchResources *MatchResourcesPatch `pulumi:"matchResources"`
	// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
	ParamRef *ParamRefPatch `pulumi:"paramRef"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName *string `pulumi:"policyName"`
}

// ValidatingAdmissionPolicyBindingSpecPatchInput is an input type that accepts ValidatingAdmissionPolicyBindingSpecPatchArgs and ValidatingAdmissionPolicyBindingSpecPatchOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingSpecPatchInput` via:
//
//	ValidatingAdmissionPolicyBindingSpecPatchArgs{...}
type ValidatingAdmissionPolicyBindingSpecPatchInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingSpecPatchOutput() ValidatingAdmissionPolicyBindingSpecPatchOutput
	ToValidatingAdmissionPolicyBindingSpecPatchOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingSpecPatchOutput
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpecPatchArgs struct {
	// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
	MatchResources MatchResourcesPatchPtrInput `pulumi:"matchResources"`
	// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
	ParamRef ParamRefPatchPtrInput `pulumi:"paramRef"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (ValidatingAdmissionPolicyBindingSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecPatch)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyBindingSpecPatchArgs) ToValidatingAdmissionPolicyBindingSpecPatchOutput() ValidatingAdmissionPolicyBindingSpecPatchOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecPatchOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingSpecPatchArgs) ToValidatingAdmissionPolicyBindingSpecPatchOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecPatchOutput)
}

func (i ValidatingAdmissionPolicyBindingSpecPatchArgs) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutput() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyBindingSpecPatchArgs) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecPatchOutput).ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(ctx)
}

// ValidatingAdmissionPolicyBindingSpecPatchPtrInput is an input type that accepts ValidatingAdmissionPolicyBindingSpecPatchArgs, ValidatingAdmissionPolicyBindingSpecPatchPtr and ValidatingAdmissionPolicyBindingSpecPatchPtrOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyBindingSpecPatchPtrInput` via:
//
//	        ValidatingAdmissionPolicyBindingSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ValidatingAdmissionPolicyBindingSpecPatchPtrInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyBindingSpecPatchPtrOutput() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput
	ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(context.Context) ValidatingAdmissionPolicyBindingSpecPatchPtrOutput
}

type validatingAdmissionPolicyBindingSpecPatchPtrType ValidatingAdmissionPolicyBindingSpecPatchArgs

func ValidatingAdmissionPolicyBindingSpecPatchPtr(v *ValidatingAdmissionPolicyBindingSpecPatchArgs) ValidatingAdmissionPolicyBindingSpecPatchPtrInput {
	return (*validatingAdmissionPolicyBindingSpecPatchPtrType)(v)
}

func (*validatingAdmissionPolicyBindingSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicyBindingSpecPatch)(nil)).Elem()
}

func (i *validatingAdmissionPolicyBindingSpecPatchPtrType) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutput() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return i.ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(context.Background())
}

func (i *validatingAdmissionPolicyBindingSpecPatchPtrType) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyBindingSpecPatchPtrOutput)
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type ValidatingAdmissionPolicyBindingSpecPatchOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecPatch)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) ToValidatingAdmissionPolicyBindingSpecPatchOutput() ValidatingAdmissionPolicyBindingSpecPatchOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) ToValidatingAdmissionPolicyBindingSpecPatchOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutput() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o.ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(context.Background())
}

func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidatingAdmissionPolicyBindingSpecPatch) *ValidatingAdmissionPolicyBindingSpecPatch {
		return &v
	}).(ValidatingAdmissionPolicyBindingSpecPatchPtrOutput)
}

// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) MatchResources() MatchResourcesPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpecPatch) *MatchResourcesPatch { return v.MatchResources }).(MatchResourcesPatchPtrOutput)
}

// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) ParamRef() ParamRefPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpecPatch) *ParamRefPatch { return v.ParamRef }).(ParamRefPatchPtrOutput)
}

// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
func (o ValidatingAdmissionPolicyBindingSpecPatchOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyBindingSpecPatch) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type ValidatingAdmissionPolicyBindingSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicyBindingSpecPatch)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutput() ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) ToValidatingAdmissionPolicyBindingSpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) Elem() ValidatingAdmissionPolicyBindingSpecPatchOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpecPatch) ValidatingAdmissionPolicyBindingSpecPatch {
		if v != nil {
			return *v
		}
		var ret ValidatingAdmissionPolicyBindingSpecPatch
		return ret
	}).(ValidatingAdmissionPolicyBindingSpecPatchOutput)
}

// MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) MatchResources() MatchResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpecPatch) *MatchResourcesPatch {
		if v == nil {
			return nil
		}
		return v.MatchResources
	}).(MatchResourcesPatchPtrOutput)
}

// ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) ParamRef() ParamRefPatchPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpecPatch) *ParamRefPatch {
		if v == nil {
			return nil
		}
		return v.ParamRef
	}).(ParamRefPatchPtrOutput)
}

// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
func (o ValidatingAdmissionPolicyBindingSpecPatchPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicyBindingSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
type ValidatingAdmissionPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ValidatingAdmissionPolicy.
	Items []ValidatingAdmissionPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ValidatingAdmissionPolicyListTypeInput is an input type that accepts ValidatingAdmissionPolicyListTypeArgs and ValidatingAdmissionPolicyListTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyListTypeInput` via:
//
//	ValidatingAdmissionPolicyListTypeArgs{...}
type ValidatingAdmissionPolicyListTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyListTypeOutput() ValidatingAdmissionPolicyListTypeOutput
	ToValidatingAdmissionPolicyListTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyListTypeOutput
}

// ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
type ValidatingAdmissionPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ValidatingAdmissionPolicy.
	Items ValidatingAdmissionPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ValidatingAdmissionPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyListType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyListTypeArgs) ToValidatingAdmissionPolicyListTypeOutput() ValidatingAdmissionPolicyListTypeOutput {
	return i.ToValidatingAdmissionPolicyListTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyListTypeArgs) ToValidatingAdmissionPolicyListTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyListTypeOutput)
}

// ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
type ValidatingAdmissionPolicyListTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyListType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyListTypeOutput) ToValidatingAdmissionPolicyListTypeOutput() ValidatingAdmissionPolicyListTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyListTypeOutput) ToValidatingAdmissionPolicyListTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ValidatingAdmissionPolicy.
func (o ValidatingAdmissionPolicyListTypeOutput) Items() ValidatingAdmissionPolicyTypeArrayOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyListType) []ValidatingAdmissionPolicyType { return v.Items }).(ValidatingAdmissionPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicy.
	Spec *ValidatingAdmissionPolicySpecPatch `pulumi:"spec"`
}

// ValidatingAdmissionPolicyPatchTypeInput is an input type that accepts ValidatingAdmissionPolicyPatchTypeArgs and ValidatingAdmissionPolicyPatchTypeOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicyPatchTypeInput` via:
//
//	ValidatingAdmissionPolicyPatchTypeArgs{...}
type ValidatingAdmissionPolicyPatchTypeInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicyPatchTypeOutput() ValidatingAdmissionPolicyPatchTypeOutput
	ToValidatingAdmissionPolicyPatchTypeOutputWithContext(context.Context) ValidatingAdmissionPolicyPatchTypeOutput
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the ValidatingAdmissionPolicy.
	Spec ValidatingAdmissionPolicySpecPatchPtrInput `pulumi:"spec"`
}

func (ValidatingAdmissionPolicyPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyPatchType)(nil)).Elem()
}

func (i ValidatingAdmissionPolicyPatchTypeArgs) ToValidatingAdmissionPolicyPatchTypeOutput() ValidatingAdmissionPolicyPatchTypeOutput {
	return i.ToValidatingAdmissionPolicyPatchTypeOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicyPatchTypeArgs) ToValidatingAdmissionPolicyPatchTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicyPatchTypeOutput)
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type ValidatingAdmissionPolicyPatchTypeOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicyPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicyPatchType)(nil)).Elem()
}

func (o ValidatingAdmissionPolicyPatchTypeOutput) ToValidatingAdmissionPolicyPatchTypeOutput() ValidatingAdmissionPolicyPatchTypeOutput {
	return o
}

func (o ValidatingAdmissionPolicyPatchTypeOutput) ToValidatingAdmissionPolicyPatchTypeOutputWithContext(ctx context.Context) ValidatingAdmissionPolicyPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ValidatingAdmissionPolicyPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ValidatingAdmissionPolicyPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ValidatingAdmissionPolicyPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the ValidatingAdmissionPolicy.
func (o ValidatingAdmissionPolicyPatchTypeOutput) Spec() ValidatingAdmissionPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicyPatchType) *ValidatingAdmissionPolicySpecPatch { return v.Spec }).(ValidatingAdmissionPolicySpecPatchPtrOutput)
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpec struct {
	// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `pulumi:"failurePolicy"`
	// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
	MatchConstraints *MatchResources `pulumi:"matchConstraints"`
	// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
	ParamKind *ParamKind `pulumi:"paramKind"`
	// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
	Validations []Validation `pulumi:"validations"`
}

// ValidatingAdmissionPolicySpecInput is an input type that accepts ValidatingAdmissionPolicySpecArgs and ValidatingAdmissionPolicySpecOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicySpecInput` via:
//
//	ValidatingAdmissionPolicySpecArgs{...}
type ValidatingAdmissionPolicySpecInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicySpecOutput() ValidatingAdmissionPolicySpecOutput
	ToValidatingAdmissionPolicySpecOutputWithContext(context.Context) ValidatingAdmissionPolicySpecOutput
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpecArgs struct {
	// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy pulumi.StringPtrInput `pulumi:"failurePolicy"`
	// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
	MatchConstraints MatchResourcesPtrInput `pulumi:"matchConstraints"`
	// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
	ParamKind ParamKindPtrInput `pulumi:"paramKind"`
	// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
	Validations ValidationArrayInput `pulumi:"validations"`
}

func (ValidatingAdmissionPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicySpec)(nil)).Elem()
}

func (i ValidatingAdmissionPolicySpecArgs) ToValidatingAdmissionPolicySpecOutput() ValidatingAdmissionPolicySpecOutput {
	return i.ToValidatingAdmissionPolicySpecOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicySpecArgs) ToValidatingAdmissionPolicySpecOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecOutput)
}

func (i ValidatingAdmissionPolicySpecArgs) ToValidatingAdmissionPolicySpecPtrOutput() ValidatingAdmissionPolicySpecPtrOutput {
	return i.ToValidatingAdmissionPolicySpecPtrOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicySpecArgs) ToValidatingAdmissionPolicySpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecOutput).ToValidatingAdmissionPolicySpecPtrOutputWithContext(ctx)
}

// ValidatingAdmissionPolicySpecPtrInput is an input type that accepts ValidatingAdmissionPolicySpecArgs, ValidatingAdmissionPolicySpecPtr and ValidatingAdmissionPolicySpecPtrOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicySpecPtrInput` via:
//
//	        ValidatingAdmissionPolicySpecArgs{...}
//
//	or:
//
//	        nil
type ValidatingAdmissionPolicySpecPtrInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicySpecPtrOutput() ValidatingAdmissionPolicySpecPtrOutput
	ToValidatingAdmissionPolicySpecPtrOutputWithContext(context.Context) ValidatingAdmissionPolicySpecPtrOutput
}

type validatingAdmissionPolicySpecPtrType ValidatingAdmissionPolicySpecArgs

func ValidatingAdmissionPolicySpecPtr(v *ValidatingAdmissionPolicySpecArgs) ValidatingAdmissionPolicySpecPtrInput {
	return (*validatingAdmissionPolicySpecPtrType)(v)
}

func (*validatingAdmissionPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicySpec)(nil)).Elem()
}

func (i *validatingAdmissionPolicySpecPtrType) ToValidatingAdmissionPolicySpecPtrOutput() ValidatingAdmissionPolicySpecPtrOutput {
	return i.ToValidatingAdmissionPolicySpecPtrOutputWithContext(context.Background())
}

func (i *validatingAdmissionPolicySpecPtrType) ToValidatingAdmissionPolicySpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecPtrOutput)
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpecOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicySpec)(nil)).Elem()
}

func (o ValidatingAdmissionPolicySpecOutput) ToValidatingAdmissionPolicySpecOutput() ValidatingAdmissionPolicySpecOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecOutput) ToValidatingAdmissionPolicySpecOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecOutput) ToValidatingAdmissionPolicySpecPtrOutput() ValidatingAdmissionPolicySpecPtrOutput {
	return o.ToValidatingAdmissionPolicySpecPtrOutputWithContext(context.Background())
}

func (o ValidatingAdmissionPolicySpecOutput) ToValidatingAdmissionPolicySpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidatingAdmissionPolicySpec) *ValidatingAdmissionPolicySpec {
		return &v
	}).(ValidatingAdmissionPolicySpecPtrOutput)
}

// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
func (o ValidatingAdmissionPolicySpecOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpec) *string { return v.FailurePolicy }).(pulumi.StringPtrOutput)
}

// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
func (o ValidatingAdmissionPolicySpecOutput) MatchConstraints() MatchResourcesPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpec) *MatchResources { return v.MatchConstraints }).(MatchResourcesPtrOutput)
}

// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
func (o ValidatingAdmissionPolicySpecOutput) ParamKind() ParamKindPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpec) *ParamKind { return v.ParamKind }).(ParamKindPtrOutput)
}

// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
func (o ValidatingAdmissionPolicySpecOutput) Validations() ValidationArrayOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpec) []Validation { return v.Validations }).(ValidationArrayOutput)
}

type ValidatingAdmissionPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicySpec)(nil)).Elem()
}

func (o ValidatingAdmissionPolicySpecPtrOutput) ToValidatingAdmissionPolicySpecPtrOutput() ValidatingAdmissionPolicySpecPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPtrOutput) ToValidatingAdmissionPolicySpecPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPtrOutput) Elem() ValidatingAdmissionPolicySpecOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpec) ValidatingAdmissionPolicySpec {
		if v != nil {
			return *v
		}
		var ret ValidatingAdmissionPolicySpec
		return ret
	}).(ValidatingAdmissionPolicySpecOutput)
}

// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
func (o ValidatingAdmissionPolicySpecPtrOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.FailurePolicy
	}).(pulumi.StringPtrOutput)
}

// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
func (o ValidatingAdmissionPolicySpecPtrOutput) MatchConstraints() MatchResourcesPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpec) *MatchResources {
		if v == nil {
			return nil
		}
		return v.MatchConstraints
	}).(MatchResourcesPtrOutput)
}

// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
func (o ValidatingAdmissionPolicySpecPtrOutput) ParamKind() ParamKindPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpec) *ParamKind {
		if v == nil {
			return nil
		}
		return v.ParamKind
	}).(ParamKindPtrOutput)
}

// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
func (o ValidatingAdmissionPolicySpecPtrOutput) Validations() ValidationArrayOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpec) []Validation {
		if v == nil {
			return nil
		}
		return v.Validations
	}).(ValidationArrayOutput)
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpecPatch struct {
	// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `pulumi:"failurePolicy"`
	// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
	MatchConstraints *MatchResourcesPatch `pulumi:"matchConstraints"`
	// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
	ParamKind *ParamKindPatch `pulumi:"paramKind"`
	// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
	Validations []ValidationPatch `pulumi:"validations"`
}

// ValidatingAdmissionPolicySpecPatchInput is an input type that accepts ValidatingAdmissionPolicySpecPatchArgs and ValidatingAdmissionPolicySpecPatchOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicySpecPatchInput` via:
//
//	ValidatingAdmissionPolicySpecPatchArgs{...}
type ValidatingAdmissionPolicySpecPatchInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicySpecPatchOutput() ValidatingAdmissionPolicySpecPatchOutput
	ToValidatingAdmissionPolicySpecPatchOutputWithContext(context.Context) ValidatingAdmissionPolicySpecPatchOutput
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpecPatchArgs struct {
	// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy pulumi.StringPtrInput `pulumi:"failurePolicy"`
	// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
	MatchConstraints MatchResourcesPatchPtrInput `pulumi:"matchConstraints"`
	// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
	ParamKind ParamKindPatchPtrInput `pulumi:"paramKind"`
	// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
	Validations ValidationPatchArrayInput `pulumi:"validations"`
}

func (ValidatingAdmissionPolicySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicySpecPatch)(nil)).Elem()
}

func (i ValidatingAdmissionPolicySpecPatchArgs) ToValidatingAdmissionPolicySpecPatchOutput() ValidatingAdmissionPolicySpecPatchOutput {
	return i.ToValidatingAdmissionPolicySpecPatchOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicySpecPatchArgs) ToValidatingAdmissionPolicySpecPatchOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecPatchOutput)
}

func (i ValidatingAdmissionPolicySpecPatchArgs) ToValidatingAdmissionPolicySpecPatchPtrOutput() ValidatingAdmissionPolicySpecPatchPtrOutput {
	return i.ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i ValidatingAdmissionPolicySpecPatchArgs) ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecPatchOutput).ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(ctx)
}

// ValidatingAdmissionPolicySpecPatchPtrInput is an input type that accepts ValidatingAdmissionPolicySpecPatchArgs, ValidatingAdmissionPolicySpecPatchPtr and ValidatingAdmissionPolicySpecPatchPtrOutput values.
// You can construct a concrete instance of `ValidatingAdmissionPolicySpecPatchPtrInput` via:
//
//	        ValidatingAdmissionPolicySpecPatchArgs{...}
//
//	or:
//
//	        nil
type ValidatingAdmissionPolicySpecPatchPtrInput interface {
	pulumi.Input

	ToValidatingAdmissionPolicySpecPatchPtrOutput() ValidatingAdmissionPolicySpecPatchPtrOutput
	ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(context.Context) ValidatingAdmissionPolicySpecPatchPtrOutput
}

type validatingAdmissionPolicySpecPatchPtrType ValidatingAdmissionPolicySpecPatchArgs

func ValidatingAdmissionPolicySpecPatchPtr(v *ValidatingAdmissionPolicySpecPatchArgs) ValidatingAdmissionPolicySpecPatchPtrInput {
	return (*validatingAdmissionPolicySpecPatchPtrType)(v)
}

func (*validatingAdmissionPolicySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicySpecPatch)(nil)).Elem()
}

func (i *validatingAdmissionPolicySpecPatchPtrType) ToValidatingAdmissionPolicySpecPatchPtrOutput() ValidatingAdmissionPolicySpecPatchPtrOutput {
	return i.ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i *validatingAdmissionPolicySpecPatchPtrType) ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatingAdmissionPolicySpecPatchPtrOutput)
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type ValidatingAdmissionPolicySpecPatchOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidatingAdmissionPolicySpecPatch)(nil)).Elem()
}

func (o ValidatingAdmissionPolicySpecPatchOutput) ToValidatingAdmissionPolicySpecPatchOutput() ValidatingAdmissionPolicySpecPatchOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPatchOutput) ToValidatingAdmissionPolicySpecPatchOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPatchOutput) ToValidatingAdmissionPolicySpecPatchPtrOutput() ValidatingAdmissionPolicySpecPatchPtrOutput {
	return o.ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (o ValidatingAdmissionPolicySpecPatchOutput) ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidatingAdmissionPolicySpecPatch) *ValidatingAdmissionPolicySpecPatch {
		return &v
	}).(ValidatingAdmissionPolicySpecPatchPtrOutput)
}

// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
func (o ValidatingAdmissionPolicySpecPatchOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpecPatch) *string { return v.FailurePolicy }).(pulumi.StringPtrOutput)
}

// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
func (o ValidatingAdmissionPolicySpecPatchOutput) MatchConstraints() MatchResourcesPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpecPatch) *MatchResourcesPatch { return v.MatchConstraints }).(MatchResourcesPatchPtrOutput)
}

// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
func (o ValidatingAdmissionPolicySpecPatchOutput) ParamKind() ParamKindPatchPtrOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpecPatch) *ParamKindPatch { return v.ParamKind }).(ParamKindPatchPtrOutput)
}

// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
func (o ValidatingAdmissionPolicySpecPatchOutput) Validations() ValidationPatchArrayOutput {
	return o.ApplyT(func(v ValidatingAdmissionPolicySpecPatch) []ValidationPatch { return v.Validations }).(ValidationPatchArrayOutput)
}

type ValidatingAdmissionPolicySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ValidatingAdmissionPolicySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidatingAdmissionPolicySpecPatch)(nil)).Elem()
}

func (o ValidatingAdmissionPolicySpecPatchPtrOutput) ToValidatingAdmissionPolicySpecPatchPtrOutput() ValidatingAdmissionPolicySpecPatchPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPatchPtrOutput) ToValidatingAdmissionPolicySpecPatchPtrOutputWithContext(ctx context.Context) ValidatingAdmissionPolicySpecPatchPtrOutput {
	return o
}

func (o ValidatingAdmissionPolicySpecPatchPtrOutput) Elem() ValidatingAdmissionPolicySpecPatchOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpecPatch) ValidatingAdmissionPolicySpecPatch {
		if v != nil {
			return *v
		}
		var ret ValidatingAdmissionPolicySpecPatch
		return ret
	}).(ValidatingAdmissionPolicySpecPatchOutput)
}

// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
func (o ValidatingAdmissionPolicySpecPatchPtrOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.FailurePolicy
	}).(pulumi.StringPtrOutput)
}

// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
func (o ValidatingAdmissionPolicySpecPatchPtrOutput) MatchConstraints() MatchResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpecPatch) *MatchResourcesPatch {
		if v == nil {
			return nil
		}
		return v.MatchConstraints
	}).(MatchResourcesPatchPtrOutput)
}

// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
func (o ValidatingAdmissionPolicySpecPatchPtrOutput) ParamKind() ParamKindPatchPtrOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpecPatch) *ParamKindPatch {
		if v == nil {
			return nil
		}
		return v.ParamKind
	}).(ParamKindPatchPtrOutput)
}

// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
func (o ValidatingAdmissionPolicySpecPatchPtrOutput) Validations() ValidationPatchArrayOutput {
	return o.ApplyT(func(v *ValidatingAdmissionPolicySpecPatch) []ValidationPatch {
		if v == nil {
			return nil
		}
		return v.Validations
	}).(ValidationPatchArrayOutput)
}

// Validation specifies the CEL expression which is used to apply the validation.
type Validation struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	//     Required.
	Expression string `pulumi:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message *string `pulumi:"message"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason *string `pulumi:"reason"`
}

// ValidationInput is an input type that accepts ValidationArgs and ValidationOutput values.
// You can construct a concrete instance of `ValidationInput` via:
//
//	ValidationArgs{...}
type ValidationInput interface {
	pulumi.Input

	ToValidationOutput() ValidationOutput
	ToValidationOutputWithContext(context.Context) ValidationOutput
}

// Validation specifies the CEL expression which is used to apply the validation.
type ValidationArgs struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	//     Required.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Validation)(nil)).Elem()
}

func (i ValidationArgs) ToValidationOutput() ValidationOutput {
	return i.ToValidationOutputWithContext(context.Background())
}

func (i ValidationArgs) ToValidationOutputWithContext(ctx context.Context) ValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationOutput)
}

// ValidationArrayInput is an input type that accepts ValidationArray and ValidationArrayOutput values.
// You can construct a concrete instance of `ValidationArrayInput` via:
//
//	ValidationArray{ ValidationArgs{...} }
type ValidationArrayInput interface {
	pulumi.Input

	ToValidationArrayOutput() ValidationArrayOutput
	ToValidationArrayOutputWithContext(context.Context) ValidationArrayOutput
}

type ValidationArray []ValidationInput

func (ValidationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Validation)(nil)).Elem()
}

func (i ValidationArray) ToValidationArrayOutput() ValidationArrayOutput {
	return i.ToValidationArrayOutputWithContext(context.Background())
}

func (i ValidationArray) ToValidationArrayOutputWithContext(ctx context.Context) ValidationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationArrayOutput)
}

// Validation specifies the CEL expression which is used to apply the validation.
type ValidationOutput struct{ *pulumi.OutputState }

func (ValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Validation)(nil)).Elem()
}

func (o ValidationOutput) ToValidationOutput() ValidationOutput {
	return o
}

func (o ValidationOutput) ToValidationOutputWithContext(ctx context.Context) ValidationOutput {
	return o
}

// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
//
// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
//
// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
//
// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
//
//	"true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
//	"import", "let", "loop", "package", "namespace", "return".
//
// Examples:
//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
//
// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
//     non-intersecting elements in `Y` are appended, retaining their partial order.
//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
//     non-intersecting keys are appended, retaining their partial order.
//     Required.
func (o ValidationOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v Validation) string { return v.Expression }).(pulumi.StringOutput)
}

// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
func (o ValidationOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Validation) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
func (o ValidationOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Validation) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ValidationArrayOutput struct{ *pulumi.OutputState }

func (ValidationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Validation)(nil)).Elem()
}

func (o ValidationArrayOutput) ToValidationArrayOutput() ValidationArrayOutput {
	return o
}

func (o ValidationArrayOutput) ToValidationArrayOutputWithContext(ctx context.Context) ValidationArrayOutput {
	return o
}

func (o ValidationArrayOutput) Index(i pulumi.IntInput) ValidationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Validation {
		return vs[0].([]Validation)[vs[1].(int)]
	}).(ValidationOutput)
}

// Validation specifies the CEL expression which is used to apply the validation.
type ValidationPatch struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	//     Required.
	Expression *string `pulumi:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message *string `pulumi:"message"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason *string `pulumi:"reason"`
}

// ValidationPatchInput is an input type that accepts ValidationPatchArgs and ValidationPatchOutput values.
// You can construct a concrete instance of `ValidationPatchInput` via:
//
//	ValidationPatchArgs{...}
type ValidationPatchInput interface {
	pulumi.Input

	ToValidationPatchOutput() ValidationPatchOutput
	ToValidationPatchOutputWithContext(context.Context) ValidationPatchOutput
}

// Validation specifies the CEL expression which is used to apply the validation.
type ValidationPatchArgs struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	//     Required.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ValidationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationPatch)(nil)).Elem()
}

func (i ValidationPatchArgs) ToValidationPatchOutput() ValidationPatchOutput {
	return i.ToValidationPatchOutputWithContext(context.Background())
}

func (i ValidationPatchArgs) ToValidationPatchOutputWithContext(ctx context.Context) ValidationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationPatchOutput)
}

// ValidationPatchArrayInput is an input type that accepts ValidationPatchArray and ValidationPatchArrayOutput values.
// You can construct a concrete instance of `ValidationPatchArrayInput` via:
//
//	ValidationPatchArray{ ValidationPatchArgs{...} }
type ValidationPatchArrayInput interface {
	pulumi.Input

	ToValidationPatchArrayOutput() ValidationPatchArrayOutput
	ToValidationPatchArrayOutputWithContext(context.Context) ValidationPatchArrayOutput
}

type ValidationPatchArray []ValidationPatchInput

func (ValidationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationPatch)(nil)).Elem()
}

func (i ValidationPatchArray) ToValidationPatchArrayOutput() ValidationPatchArrayOutput {
	return i.ToValidationPatchArrayOutputWithContext(context.Background())
}

func (i ValidationPatchArray) ToValidationPatchArrayOutputWithContext(ctx context.Context) ValidationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationPatchArrayOutput)
}

// Validation specifies the CEL expression which is used to apply the validation.
type ValidationPatchOutput struct{ *pulumi.OutputState }

func (ValidationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationPatch)(nil)).Elem()
}

func (o ValidationPatchOutput) ToValidationPatchOutput() ValidationPatchOutput {
	return o
}

func (o ValidationPatchOutput) ToValidationPatchOutputWithContext(ctx context.Context) ValidationPatchOutput {
	return o
}

// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the Admission request/response, organized into CEL variables as well as some other useful variables:
//
// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
//
// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
//
// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
//
//	"true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
//	"import", "let", "loop", "package", "namespace", "return".
//
// Examples:
//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
//
// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
//     non-intersecting elements in `Y` are appended, retaining their partial order.
//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
//     non-intersecting keys are appended, retaining their partial order.
//     Required.
func (o ValidationPatchOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationPatch) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
func (o ValidationPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
func (o ValidationPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ValidationPatchArrayOutput struct{ *pulumi.OutputState }

func (ValidationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationPatch)(nil)).Elem()
}

func (o ValidationPatchArrayOutput) ToValidationPatchArrayOutput() ValidationPatchArrayOutput {
	return o
}

func (o ValidationPatchArrayOutput) ToValidationPatchArrayOutputWithContext(ctx context.Context) ValidationPatchArrayOutput {
	return o
}

func (o ValidationPatchArrayOutput) Index(i pulumi.IntInput) ValidationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationPatch {
		return vs[0].([]ValidationPatch)[vs[1].(int)]
	}).(ValidationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MatchResourcesInput)(nil)).Elem(), MatchResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchResourcesPtrInput)(nil)).Elem(), MatchResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchResourcesPatchInput)(nil)).Elem(), MatchResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchResourcesPatchPtrInput)(nil)).Elem(), MatchResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedRuleWithOperationsInput)(nil)).Elem(), NamedRuleWithOperationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedRuleWithOperationsArrayInput)(nil)).Elem(), NamedRuleWithOperationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedRuleWithOperationsPatchInput)(nil)).Elem(), NamedRuleWithOperationsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedRuleWithOperationsPatchArrayInput)(nil)).Elem(), NamedRuleWithOperationsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamKindInput)(nil)).Elem(), ParamKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamKindPtrInput)(nil)).Elem(), ParamKindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamKindPatchInput)(nil)).Elem(), ParamKindPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamKindPatchPtrInput)(nil)).Elem(), ParamKindPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamRefInput)(nil)).Elem(), ParamRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamRefPtrInput)(nil)).Elem(), ParamRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamRefPatchInput)(nil)).Elem(), ParamRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamRefPatchPtrInput)(nil)).Elem(), ParamRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyTypeArrayInput)(nil)).Elem(), ValidatingAdmissionPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingTypeArrayInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingListTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingPatchTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecPtrInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecPatchInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyBindingSpecPatchPtrInput)(nil)).Elem(), ValidatingAdmissionPolicyBindingSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyListTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicyPatchTypeInput)(nil)).Elem(), ValidatingAdmissionPolicyPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicySpecInput)(nil)).Elem(), ValidatingAdmissionPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicySpecPtrInput)(nil)).Elem(), ValidatingAdmissionPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicySpecPatchInput)(nil)).Elem(), ValidatingAdmissionPolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatingAdmissionPolicySpecPatchPtrInput)(nil)).Elem(), ValidatingAdmissionPolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationInput)(nil)).Elem(), ValidationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationArrayInput)(nil)).Elem(), ValidationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationPatchInput)(nil)).Elem(), ValidationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationPatchArrayInput)(nil)).Elem(), ValidationPatchArray{})
	pulumi.RegisterOutputType(MatchResourcesOutput{})
	pulumi.RegisterOutputType(MatchResourcesPtrOutput{})
	pulumi.RegisterOutputType(MatchResourcesPatchOutput{})
	pulumi.RegisterOutputType(MatchResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(NamedRuleWithOperationsOutput{})
	pulumi.RegisterOutputType(NamedRuleWithOperationsArrayOutput{})
	pulumi.RegisterOutputType(NamedRuleWithOperationsPatchOutput{})
	pulumi.RegisterOutputType(NamedRuleWithOperationsPatchArrayOutput{})
	pulumi.RegisterOutputType(ParamKindOutput{})
	pulumi.RegisterOutputType(ParamKindPtrOutput{})
	pulumi.RegisterOutputType(ParamKindPatchOutput{})
	pulumi.RegisterOutputType(ParamKindPatchPtrOutput{})
	pulumi.RegisterOutputType(ParamRefOutput{})
	pulumi.RegisterOutputType(ParamRefPtrOutput{})
	pulumi.RegisterOutputType(ParamRefPatchOutput{})
	pulumi.RegisterOutputType(ParamRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingTypeArrayOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingListTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingPatchTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingSpecOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingSpecPtrOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingSpecPatchOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyBindingSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyListTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicyPatchTypeOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicySpecOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicySpecPatchOutput{})
	pulumi.RegisterOutputType(ValidatingAdmissionPolicySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ValidationOutput{})
	pulumi.RegisterOutputType(ValidationArrayOutput{})
	pulumi.RegisterOutputType(ValidationPatchOutput{})
	pulumi.RegisterOutputType(ValidationPatchArrayOutput{})
}
