// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// MutatingAdmissionPolicyBinding binds the MutatingAdmissionPolicy with parametrized resources. MutatingAdmissionPolicyBinding and the optional parameter resource together define how cluster administrators configure policies for clusters.
//
// For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding. Each evaluation is constrained by a [runtime cost budget](https://kubernetes.io/docs/reference/using-api/cel/#runtime-cost-budget).
//
// Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
type MutatingAdmissionPolicyBindingPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
	Spec MutatingAdmissionPolicyBindingSpecPatchPtrOutput `pulumi:"spec"`
}

// NewMutatingAdmissionPolicyBindingPatch registers a new resource with the given unique name, arguments, and options.
func NewMutatingAdmissionPolicyBindingPatch(ctx *pulumi.Context,
	name string, args *MutatingAdmissionPolicyBindingPatchArgs, opts ...pulumi.ResourceOption) (*MutatingAdmissionPolicyBindingPatch, error) {
	if args == nil {
		args = &MutatingAdmissionPolicyBindingPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("admissionregistration.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("MutatingAdmissionPolicyBinding")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MutatingAdmissionPolicyBindingPatch
	err := ctx.RegisterResource("kubernetes:admissionregistration.k8s.io/v1alpha1:MutatingAdmissionPolicyBindingPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMutatingAdmissionPolicyBindingPatch gets an existing MutatingAdmissionPolicyBindingPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMutatingAdmissionPolicyBindingPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MutatingAdmissionPolicyBindingPatchState, opts ...pulumi.ResourceOption) (*MutatingAdmissionPolicyBindingPatch, error) {
	var resource MutatingAdmissionPolicyBindingPatch
	err := ctx.ReadResource("kubernetes:admissionregistration.k8s.io/v1alpha1:MutatingAdmissionPolicyBindingPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MutatingAdmissionPolicyBindingPatch resources.
type mutatingAdmissionPolicyBindingPatchState struct {
}

type MutatingAdmissionPolicyBindingPatchState struct {
}

func (MutatingAdmissionPolicyBindingPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*mutatingAdmissionPolicyBindingPatchState)(nil)).Elem()
}

type mutatingAdmissionPolicyBindingPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
	Spec *MutatingAdmissionPolicyBindingSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a MutatingAdmissionPolicyBindingPatch resource.
type MutatingAdmissionPolicyBindingPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput
	// Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
	Spec MutatingAdmissionPolicyBindingSpecPatchPtrInput
}

func (MutatingAdmissionPolicyBindingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mutatingAdmissionPolicyBindingPatchArgs)(nil)).Elem()
}

type MutatingAdmissionPolicyBindingPatchInput interface {
	pulumi.Input

	ToMutatingAdmissionPolicyBindingPatchOutput() MutatingAdmissionPolicyBindingPatchOutput
	ToMutatingAdmissionPolicyBindingPatchOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchOutput
}

func (*MutatingAdmissionPolicyBindingPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (i *MutatingAdmissionPolicyBindingPatch) ToMutatingAdmissionPolicyBindingPatchOutput() MutatingAdmissionPolicyBindingPatchOutput {
	return i.ToMutatingAdmissionPolicyBindingPatchOutputWithContext(context.Background())
}

func (i *MutatingAdmissionPolicyBindingPatch) ToMutatingAdmissionPolicyBindingPatchOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutatingAdmissionPolicyBindingPatchOutput)
}

// MutatingAdmissionPolicyBindingPatchArrayInput is an input type that accepts MutatingAdmissionPolicyBindingPatchArray and MutatingAdmissionPolicyBindingPatchArrayOutput values.
// You can construct a concrete instance of `MutatingAdmissionPolicyBindingPatchArrayInput` via:
//
//	MutatingAdmissionPolicyBindingPatchArray{ MutatingAdmissionPolicyBindingPatchArgs{...} }
type MutatingAdmissionPolicyBindingPatchArrayInput interface {
	pulumi.Input

	ToMutatingAdmissionPolicyBindingPatchArrayOutput() MutatingAdmissionPolicyBindingPatchArrayOutput
	ToMutatingAdmissionPolicyBindingPatchArrayOutputWithContext(context.Context) MutatingAdmissionPolicyBindingPatchArrayOutput
}

type MutatingAdmissionPolicyBindingPatchArray []MutatingAdmissionPolicyBindingPatchInput

func (MutatingAdmissionPolicyBindingPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (i MutatingAdmissionPolicyBindingPatchArray) ToMutatingAdmissionPolicyBindingPatchArrayOutput() MutatingAdmissionPolicyBindingPatchArrayOutput {
	return i.ToMutatingAdmissionPolicyBindingPatchArrayOutputWithContext(context.Background())
}

func (i MutatingAdmissionPolicyBindingPatchArray) ToMutatingAdmissionPolicyBindingPatchArrayOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutatingAdmissionPolicyBindingPatchArrayOutput)
}

// MutatingAdmissionPolicyBindingPatchMapInput is an input type that accepts MutatingAdmissionPolicyBindingPatchMap and MutatingAdmissionPolicyBindingPatchMapOutput values.
// You can construct a concrete instance of `MutatingAdmissionPolicyBindingPatchMapInput` via:
//
//	MutatingAdmissionPolicyBindingPatchMap{ "key": MutatingAdmissionPolicyBindingPatchArgs{...} }
type MutatingAdmissionPolicyBindingPatchMapInput interface {
	pulumi.Input

	ToMutatingAdmissionPolicyBindingPatchMapOutput() MutatingAdmissionPolicyBindingPatchMapOutput
	ToMutatingAdmissionPolicyBindingPatchMapOutputWithContext(context.Context) MutatingAdmissionPolicyBindingPatchMapOutput
}

type MutatingAdmissionPolicyBindingPatchMap map[string]MutatingAdmissionPolicyBindingPatchInput

func (MutatingAdmissionPolicyBindingPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (i MutatingAdmissionPolicyBindingPatchMap) ToMutatingAdmissionPolicyBindingPatchMapOutput() MutatingAdmissionPolicyBindingPatchMapOutput {
	return i.ToMutatingAdmissionPolicyBindingPatchMapOutputWithContext(context.Background())
}

func (i MutatingAdmissionPolicyBindingPatchMap) ToMutatingAdmissionPolicyBindingPatchMapOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutatingAdmissionPolicyBindingPatchMapOutput)
}

type MutatingAdmissionPolicyBindingPatchOutput struct{ *pulumi.OutputState }

func (MutatingAdmissionPolicyBindingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (o MutatingAdmissionPolicyBindingPatchOutput) ToMutatingAdmissionPolicyBindingPatchOutput() MutatingAdmissionPolicyBindingPatchOutput {
	return o
}

func (o MutatingAdmissionPolicyBindingPatchOutput) ToMutatingAdmissionPolicyBindingPatchOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o MutatingAdmissionPolicyBindingPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MutatingAdmissionPolicyBindingPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MutatingAdmissionPolicyBindingPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MutatingAdmissionPolicyBindingPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o MutatingAdmissionPolicyBindingPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *MutatingAdmissionPolicyBindingPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the MutatingAdmissionPolicyBinding.
func (o MutatingAdmissionPolicyBindingPatchOutput) Spec() MutatingAdmissionPolicyBindingSpecPatchPtrOutput {
	return o.ApplyT(func(v *MutatingAdmissionPolicyBindingPatch) MutatingAdmissionPolicyBindingSpecPatchPtrOutput {
		return v.Spec
	}).(MutatingAdmissionPolicyBindingSpecPatchPtrOutput)
}

type MutatingAdmissionPolicyBindingPatchArrayOutput struct{ *pulumi.OutputState }

func (MutatingAdmissionPolicyBindingPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (o MutatingAdmissionPolicyBindingPatchArrayOutput) ToMutatingAdmissionPolicyBindingPatchArrayOutput() MutatingAdmissionPolicyBindingPatchArrayOutput {
	return o
}

func (o MutatingAdmissionPolicyBindingPatchArrayOutput) ToMutatingAdmissionPolicyBindingPatchArrayOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchArrayOutput {
	return o
}

func (o MutatingAdmissionPolicyBindingPatchArrayOutput) Index(i pulumi.IntInput) MutatingAdmissionPolicyBindingPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MutatingAdmissionPolicyBindingPatch {
		return vs[0].([]*MutatingAdmissionPolicyBindingPatch)[vs[1].(int)]
	}).(MutatingAdmissionPolicyBindingPatchOutput)
}

type MutatingAdmissionPolicyBindingPatchMapOutput struct{ *pulumi.OutputState }

func (MutatingAdmissionPolicyBindingPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutatingAdmissionPolicyBindingPatch)(nil)).Elem()
}

func (o MutatingAdmissionPolicyBindingPatchMapOutput) ToMutatingAdmissionPolicyBindingPatchMapOutput() MutatingAdmissionPolicyBindingPatchMapOutput {
	return o
}

func (o MutatingAdmissionPolicyBindingPatchMapOutput) ToMutatingAdmissionPolicyBindingPatchMapOutputWithContext(ctx context.Context) MutatingAdmissionPolicyBindingPatchMapOutput {
	return o
}

func (o MutatingAdmissionPolicyBindingPatchMapOutput) MapIndex(k pulumi.StringInput) MutatingAdmissionPolicyBindingPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MutatingAdmissionPolicyBindingPatch {
		return vs[0].(map[string]*MutatingAdmissionPolicyBindingPatch)[vs[1].(string)]
	}).(MutatingAdmissionPolicyBindingPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MutatingAdmissionPolicyBindingPatchInput)(nil)).Elem(), &MutatingAdmissionPolicyBindingPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutatingAdmissionPolicyBindingPatchArrayInput)(nil)).Elem(), MutatingAdmissionPolicyBindingPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutatingAdmissionPolicyBindingPatchMapInput)(nil)).Elem(), MutatingAdmissionPolicyBindingPatchMap{})
	pulumi.RegisterOutputType(MutatingAdmissionPolicyBindingPatchOutput{})
	pulumi.RegisterOutputType(MutatingAdmissionPolicyBindingPatchArrayOutput{})
	pulumi.RegisterOutputType(MutatingAdmissionPolicyBindingPatchMapOutput{})
}
