// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Data is the serialized representation of the state.
	Data interface{} `pulumi:"data"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Revision indicates the revision of the state represented by Data.
	Revision int `pulumi:"revision"`
}

// ControllerRevisionTypeInput is an input type that accepts ControllerRevisionTypeArgs and ControllerRevisionTypeOutput values.
// You can construct a concrete instance of `ControllerRevisionTypeInput` via:
//
//	ControllerRevisionTypeArgs{...}
type ControllerRevisionTypeInput interface {
	pulumi.Input

	ToControllerRevisionTypeOutput() ControllerRevisionTypeOutput
	ToControllerRevisionTypeOutputWithContext(context.Context) ControllerRevisionTypeOutput
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Data is the serialized representation of the state.
	Data pulumi.Input `pulumi:"data"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Revision indicates the revision of the state represented by Data.
	Revision pulumi.IntInput `pulumi:"revision"`
}

func (ControllerRevisionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionType)(nil)).Elem()
}

func (i ControllerRevisionTypeArgs) ToControllerRevisionTypeOutput() ControllerRevisionTypeOutput {
	return i.ToControllerRevisionTypeOutputWithContext(context.Background())
}

func (i ControllerRevisionTypeArgs) ToControllerRevisionTypeOutputWithContext(ctx context.Context) ControllerRevisionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRevisionTypeOutput)
}

// ControllerRevisionTypeArrayInput is an input type that accepts ControllerRevisionTypeArray and ControllerRevisionTypeArrayOutput values.
// You can construct a concrete instance of `ControllerRevisionTypeArrayInput` via:
//
//	ControllerRevisionTypeArray{ ControllerRevisionTypeArgs{...} }
type ControllerRevisionTypeArrayInput interface {
	pulumi.Input

	ToControllerRevisionTypeArrayOutput() ControllerRevisionTypeArrayOutput
	ToControllerRevisionTypeArrayOutputWithContext(context.Context) ControllerRevisionTypeArrayOutput
}

type ControllerRevisionTypeArray []ControllerRevisionTypeInput

func (ControllerRevisionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControllerRevisionType)(nil)).Elem()
}

func (i ControllerRevisionTypeArray) ToControllerRevisionTypeArrayOutput() ControllerRevisionTypeArrayOutput {
	return i.ToControllerRevisionTypeArrayOutputWithContext(context.Background())
}

func (i ControllerRevisionTypeArray) ToControllerRevisionTypeArrayOutputWithContext(ctx context.Context) ControllerRevisionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRevisionTypeArrayOutput)
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionTypeOutput struct{ *pulumi.OutputState }

func (ControllerRevisionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionType)(nil)).Elem()
}

func (o ControllerRevisionTypeOutput) ToControllerRevisionTypeOutput() ControllerRevisionTypeOutput {
	return o
}

func (o ControllerRevisionTypeOutput) ToControllerRevisionTypeOutputWithContext(ctx context.Context) ControllerRevisionTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ControllerRevisionTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Data is the serialized representation of the state.
func (o ControllerRevisionTypeOutput) Data() pulumi.AnyOutput {
	return o.ApplyT(func(v ControllerRevisionType) interface{} { return v.Data }).(pulumi.AnyOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ControllerRevisionTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ControllerRevisionTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ControllerRevisionType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Revision indicates the revision of the state represented by Data.
func (o ControllerRevisionTypeOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v ControllerRevisionType) int { return v.Revision }).(pulumi.IntOutput)
}

type ControllerRevisionTypeArrayOutput struct{ *pulumi.OutputState }

func (ControllerRevisionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControllerRevisionType)(nil)).Elem()
}

func (o ControllerRevisionTypeArrayOutput) ToControllerRevisionTypeArrayOutput() ControllerRevisionTypeArrayOutput {
	return o
}

func (o ControllerRevisionTypeArrayOutput) ToControllerRevisionTypeArrayOutputWithContext(ctx context.Context) ControllerRevisionTypeArrayOutput {
	return o
}

func (o ControllerRevisionTypeArrayOutput) Index(i pulumi.IntInput) ControllerRevisionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ControllerRevisionType {
		return vs[0].([]ControllerRevisionType)[vs[1].(int)]
	}).(ControllerRevisionTypeOutput)
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
type ControllerRevisionListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of ControllerRevisions
	Items []ControllerRevisionType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ControllerRevisionListTypeInput is an input type that accepts ControllerRevisionListTypeArgs and ControllerRevisionListTypeOutput values.
// You can construct a concrete instance of `ControllerRevisionListTypeInput` via:
//
//	ControllerRevisionListTypeArgs{...}
type ControllerRevisionListTypeInput interface {
	pulumi.Input

	ToControllerRevisionListTypeOutput() ControllerRevisionListTypeOutput
	ToControllerRevisionListTypeOutputWithContext(context.Context) ControllerRevisionListTypeOutput
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
type ControllerRevisionListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of ControllerRevisions
	Items ControllerRevisionTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ControllerRevisionListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionListType)(nil)).Elem()
}

func (i ControllerRevisionListTypeArgs) ToControllerRevisionListTypeOutput() ControllerRevisionListTypeOutput {
	return i.ToControllerRevisionListTypeOutputWithContext(context.Background())
}

func (i ControllerRevisionListTypeArgs) ToControllerRevisionListTypeOutputWithContext(ctx context.Context) ControllerRevisionListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRevisionListTypeOutput)
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
type ControllerRevisionListTypeOutput struct{ *pulumi.OutputState }

func (ControllerRevisionListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionListType)(nil)).Elem()
}

func (o ControllerRevisionListTypeOutput) ToControllerRevisionListTypeOutput() ControllerRevisionListTypeOutput {
	return o
}

func (o ControllerRevisionListTypeOutput) ToControllerRevisionListTypeOutputWithContext(ctx context.Context) ControllerRevisionListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ControllerRevisionListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of ControllerRevisions
func (o ControllerRevisionListTypeOutput) Items() ControllerRevisionTypeArrayOutput {
	return o.ApplyT(func(v ControllerRevisionListType) []ControllerRevisionType { return v.Items }).(ControllerRevisionTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ControllerRevisionListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ControllerRevisionListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ControllerRevisionListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Data is the serialized representation of the state.
	Data interface{} `pulumi:"data"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Revision indicates the revision of the state represented by Data.
	Revision *int `pulumi:"revision"`
}

// ControllerRevisionPatchTypeInput is an input type that accepts ControllerRevisionPatchTypeArgs and ControllerRevisionPatchTypeOutput values.
// You can construct a concrete instance of `ControllerRevisionPatchTypeInput` via:
//
//	ControllerRevisionPatchTypeArgs{...}
type ControllerRevisionPatchTypeInput interface {
	pulumi.Input

	ToControllerRevisionPatchTypeOutput() ControllerRevisionPatchTypeOutput
	ToControllerRevisionPatchTypeOutputWithContext(context.Context) ControllerRevisionPatchTypeOutput
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Data is the serialized representation of the state.
	Data pulumi.Input `pulumi:"data"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Revision indicates the revision of the state represented by Data.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (ControllerRevisionPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionPatchType)(nil)).Elem()
}

func (i ControllerRevisionPatchTypeArgs) ToControllerRevisionPatchTypeOutput() ControllerRevisionPatchTypeOutput {
	return i.ToControllerRevisionPatchTypeOutputWithContext(context.Background())
}

func (i ControllerRevisionPatchTypeArgs) ToControllerRevisionPatchTypeOutputWithContext(ctx context.Context) ControllerRevisionPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRevisionPatchTypeOutput)
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type ControllerRevisionPatchTypeOutput struct{ *pulumi.OutputState }

func (ControllerRevisionPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRevisionPatchType)(nil)).Elem()
}

func (o ControllerRevisionPatchTypeOutput) ToControllerRevisionPatchTypeOutput() ControllerRevisionPatchTypeOutput {
	return o
}

func (o ControllerRevisionPatchTypeOutput) ToControllerRevisionPatchTypeOutputWithContext(ctx context.Context) ControllerRevisionPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ControllerRevisionPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Data is the serialized representation of the state.
func (o ControllerRevisionPatchTypeOutput) Data() pulumi.AnyOutput {
	return o.ApplyT(func(v ControllerRevisionPatchType) interface{} { return v.Data }).(pulumi.AnyOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ControllerRevisionPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerRevisionPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ControllerRevisionPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ControllerRevisionPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Revision indicates the revision of the state represented by Data.
func (o ControllerRevisionPatchTypeOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerRevisionPatchType) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec *DeploymentSpec `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status *DeploymentStatus `pulumi:"status"`
}

// DeploymentTypeInput is an input type that accepts DeploymentTypeArgs and DeploymentTypeOutput values.
// You can construct a concrete instance of `DeploymentTypeInput` via:
//
//	DeploymentTypeArgs{...}
type DeploymentTypeInput interface {
	pulumi.Input

	ToDeploymentTypeOutput() DeploymentTypeOutput
	ToDeploymentTypeOutputWithContext(context.Context) DeploymentTypeOutput
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status DeploymentStatusPtrInput `pulumi:"status"`
}

func (DeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentType)(nil)).Elem()
}

func (i DeploymentTypeArgs) ToDeploymentTypeOutput() DeploymentTypeOutput {
	return i.ToDeploymentTypeOutputWithContext(context.Background())
}

func (i DeploymentTypeArgs) ToDeploymentTypeOutputWithContext(ctx context.Context) DeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTypeOutput)
}

// DeploymentTypeArrayInput is an input type that accepts DeploymentTypeArray and DeploymentTypeArrayOutput values.
// You can construct a concrete instance of `DeploymentTypeArrayInput` via:
//
//	DeploymentTypeArray{ DeploymentTypeArgs{...} }
type DeploymentTypeArrayInput interface {
	pulumi.Input

	ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput
	ToDeploymentTypeArrayOutputWithContext(context.Context) DeploymentTypeArrayOutput
}

type DeploymentTypeArray []DeploymentTypeInput

func (DeploymentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentType)(nil)).Elem()
}

func (i DeploymentTypeArray) ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput {
	return i.ToDeploymentTypeArrayOutputWithContext(context.Background())
}

func (i DeploymentTypeArray) ToDeploymentTypeArrayOutputWithContext(ctx context.Context) DeploymentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTypeArrayOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentTypeOutput struct{ *pulumi.OutputState }

func (DeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentType)(nil)).Elem()
}

func (o DeploymentTypeOutput) ToDeploymentTypeOutput() DeploymentTypeOutput {
	return o
}

func (o DeploymentTypeOutput) ToDeploymentTypeOutputWithContext(ctx context.Context) DeploymentTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata.
func (o DeploymentTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DeploymentType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the Deployment.
func (o DeploymentTypeOutput) Spec() DeploymentSpecPtrOutput {
	return o.ApplyT(func(v DeploymentType) *DeploymentSpec { return v.Spec }).(DeploymentSpecPtrOutput)
}

// Most recently observed status of the Deployment.
func (o DeploymentTypeOutput) Status() DeploymentStatusPtrOutput {
	return o.ApplyT(func(v DeploymentType) *DeploymentStatus { return v.Status }).(DeploymentStatusPtrOutput)
}

type DeploymentTypeArrayOutput struct{ *pulumi.OutputState }

func (DeploymentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentType)(nil)).Elem()
}

func (o DeploymentTypeArrayOutput) ToDeploymentTypeArrayOutput() DeploymentTypeArrayOutput {
	return o
}

func (o DeploymentTypeArrayOutput) ToDeploymentTypeArrayOutputWithContext(ctx context.Context) DeploymentTypeArrayOutput {
	return o
}

func (o DeploymentTypeArrayOutput) Index(i pulumi.IntInput) DeploymentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentType {
		return vs[0].([]DeploymentType)[vs[1].(int)]
	}).(DeploymentTypeOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// DeploymentConditionInput is an input type that accepts DeploymentConditionArgs and DeploymentConditionOutput values.
// You can construct a concrete instance of `DeploymentConditionInput` via:
//
//	DeploymentConditionArgs{...}
type DeploymentConditionInput interface {
	pulumi.Input

	ToDeploymentConditionOutput() DeploymentConditionOutput
	ToDeploymentConditionOutputWithContext(context.Context) DeploymentConditionOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DeploymentConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentCondition)(nil)).Elem()
}

func (i DeploymentConditionArgs) ToDeploymentConditionOutput() DeploymentConditionOutput {
	return i.ToDeploymentConditionOutputWithContext(context.Background())
}

func (i DeploymentConditionArgs) ToDeploymentConditionOutputWithContext(ctx context.Context) DeploymentConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionOutput)
}

// DeploymentConditionArrayInput is an input type that accepts DeploymentConditionArray and DeploymentConditionArrayOutput values.
// You can construct a concrete instance of `DeploymentConditionArrayInput` via:
//
//	DeploymentConditionArray{ DeploymentConditionArgs{...} }
type DeploymentConditionArrayInput interface {
	pulumi.Input

	ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput
	ToDeploymentConditionArrayOutputWithContext(context.Context) DeploymentConditionArrayOutput
}

type DeploymentConditionArray []DeploymentConditionInput

func (DeploymentConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentCondition)(nil)).Elem()
}

func (i DeploymentConditionArray) ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput {
	return i.ToDeploymentConditionArrayOutputWithContext(context.Background())
}

func (i DeploymentConditionArray) ToDeploymentConditionArrayOutputWithContext(ctx context.Context) DeploymentConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionOutput struct{ *pulumi.OutputState }

func (DeploymentConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentCondition)(nil)).Elem()
}

func (o DeploymentConditionOutput) ToDeploymentConditionOutput() DeploymentConditionOutput {
	return o
}

func (o DeploymentConditionOutput) ToDeploymentConditionOutputWithContext(ctx context.Context) DeploymentConditionOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o DeploymentConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o DeploymentConditionOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o DeploymentConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o DeploymentConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o DeploymentConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o DeploymentConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentCondition) string { return v.Type }).(pulumi.StringOutput)
}

type DeploymentConditionArrayOutput struct{ *pulumi.OutputState }

func (DeploymentConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentCondition)(nil)).Elem()
}

func (o DeploymentConditionArrayOutput) ToDeploymentConditionArrayOutput() DeploymentConditionArrayOutput {
	return o
}

func (o DeploymentConditionArrayOutput) ToDeploymentConditionArrayOutputWithContext(ctx context.Context) DeploymentConditionArrayOutput {
	return o
}

func (o DeploymentConditionArrayOutput) Index(i pulumi.IntInput) DeploymentConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentCondition {
		return vs[0].([]DeploymentCondition)[vs[1].(int)]
	}).(DeploymentConditionOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionPatch struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of deployment condition.
	Type *string `pulumi:"type"`
}

// DeploymentConditionPatchInput is an input type that accepts DeploymentConditionPatchArgs and DeploymentConditionPatchOutput values.
// You can construct a concrete instance of `DeploymentConditionPatchInput` via:
//
//	DeploymentConditionPatchArgs{...}
type DeploymentConditionPatchInput interface {
	pulumi.Input

	ToDeploymentConditionPatchOutput() DeploymentConditionPatchOutput
	ToDeploymentConditionPatchOutputWithContext(context.Context) DeploymentConditionPatchOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionPatchArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeploymentConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConditionPatch)(nil)).Elem()
}

func (i DeploymentConditionPatchArgs) ToDeploymentConditionPatchOutput() DeploymentConditionPatchOutput {
	return i.ToDeploymentConditionPatchOutputWithContext(context.Background())
}

func (i DeploymentConditionPatchArgs) ToDeploymentConditionPatchOutputWithContext(ctx context.Context) DeploymentConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionPatchOutput)
}

// DeploymentConditionPatchArrayInput is an input type that accepts DeploymentConditionPatchArray and DeploymentConditionPatchArrayOutput values.
// You can construct a concrete instance of `DeploymentConditionPatchArrayInput` via:
//
//	DeploymentConditionPatchArray{ DeploymentConditionPatchArgs{...} }
type DeploymentConditionPatchArrayInput interface {
	pulumi.Input

	ToDeploymentConditionPatchArrayOutput() DeploymentConditionPatchArrayOutput
	ToDeploymentConditionPatchArrayOutputWithContext(context.Context) DeploymentConditionPatchArrayOutput
}

type DeploymentConditionPatchArray []DeploymentConditionPatchInput

func (DeploymentConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentConditionPatch)(nil)).Elem()
}

func (i DeploymentConditionPatchArray) ToDeploymentConditionPatchArrayOutput() DeploymentConditionPatchArrayOutput {
	return i.ToDeploymentConditionPatchArrayOutputWithContext(context.Background())
}

func (i DeploymentConditionPatchArray) ToDeploymentConditionPatchArrayOutputWithContext(ctx context.Context) DeploymentConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConditionPatchArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentConditionPatchOutput struct{ *pulumi.OutputState }

func (DeploymentConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConditionPatch)(nil)).Elem()
}

func (o DeploymentConditionPatchOutput) ToDeploymentConditionPatchOutput() DeploymentConditionPatchOutput {
	return o
}

func (o DeploymentConditionPatchOutput) ToDeploymentConditionPatchOutputWithContext(ctx context.Context) DeploymentConditionPatchOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o DeploymentConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o DeploymentConditionPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o DeploymentConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o DeploymentConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o DeploymentConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of deployment condition.
func (o DeploymentConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeploymentConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (DeploymentConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentConditionPatch)(nil)).Elem()
}

func (o DeploymentConditionPatchArrayOutput) ToDeploymentConditionPatchArrayOutput() DeploymentConditionPatchArrayOutput {
	return o
}

func (o DeploymentConditionPatchArrayOutput) ToDeploymentConditionPatchArrayOutputWithContext(ctx context.Context) DeploymentConditionPatchArrayOutput {
	return o
}

func (o DeploymentConditionPatchArrayOutput) Index(i pulumi.IntInput) DeploymentConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentConditionPatch {
		return vs[0].([]DeploymentConditionPatch)[vs[1].(int)]
	}).(DeploymentConditionPatchOutput)
}

// DeploymentList is a list of Deployments.
type DeploymentListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of Deployments.
	Items []DeploymentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// DeploymentListTypeInput is an input type that accepts DeploymentListTypeArgs and DeploymentListTypeOutput values.
// You can construct a concrete instance of `DeploymentListTypeInput` via:
//
//	DeploymentListTypeArgs{...}
type DeploymentListTypeInput interface {
	pulumi.Input

	ToDeploymentListTypeOutput() DeploymentListTypeOutput
	ToDeploymentListTypeOutputWithContext(context.Context) DeploymentListTypeOutput
}

// DeploymentList is a list of Deployments.
type DeploymentListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of Deployments.
	Items DeploymentTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (DeploymentListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentListType)(nil)).Elem()
}

func (i DeploymentListTypeArgs) ToDeploymentListTypeOutput() DeploymentListTypeOutput {
	return i.ToDeploymentListTypeOutputWithContext(context.Background())
}

func (i DeploymentListTypeArgs) ToDeploymentListTypeOutputWithContext(ctx context.Context) DeploymentListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentListTypeOutput)
}

// DeploymentList is a list of Deployments.
type DeploymentListTypeOutput struct{ *pulumi.OutputState }

func (DeploymentListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentListType)(nil)).Elem()
}

func (o DeploymentListTypeOutput) ToDeploymentListTypeOutput() DeploymentListTypeOutput {
	return o
}

func (o DeploymentListTypeOutput) ToDeploymentListTypeOutputWithContext(ctx context.Context) DeploymentListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of Deployments.
func (o DeploymentListTypeOutput) Items() DeploymentTypeArrayOutput {
	return o.ApplyT(func(v DeploymentListType) []DeploymentType { return v.Items }).(DeploymentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o DeploymentListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v DeploymentListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec *DeploymentSpecPatch `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status *DeploymentStatusPatch `pulumi:"status"`
}

// DeploymentPatchTypeInput is an input type that accepts DeploymentPatchTypeArgs and DeploymentPatchTypeOutput values.
// You can construct a concrete instance of `DeploymentPatchTypeInput` via:
//
//	DeploymentPatchTypeArgs{...}
type DeploymentPatchTypeInput interface {
	pulumi.Input

	ToDeploymentPatchTypeOutput() DeploymentPatchTypeOutput
	ToDeploymentPatchTypeOutputWithContext(context.Context) DeploymentPatchTypeOutput
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the Deployment.
	Spec DeploymentSpecPatchPtrInput `pulumi:"spec"`
	// Most recently observed status of the Deployment.
	Status DeploymentStatusPatchPtrInput `pulumi:"status"`
}

func (DeploymentPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentPatchType)(nil)).Elem()
}

func (i DeploymentPatchTypeArgs) ToDeploymentPatchTypeOutput() DeploymentPatchTypeOutput {
	return i.ToDeploymentPatchTypeOutputWithContext(context.Background())
}

func (i DeploymentPatchTypeArgs) ToDeploymentPatchTypeOutputWithContext(ctx context.Context) DeploymentPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPatchTypeOutput)
}

// Deployment enables declarative updates for Pods and ReplicaSets.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Deployment has begun to be updated by the Deployment controller. If the current
//     generation of the Deployment is > 1, then this means that the current generation must
//     be different from the generation reported by the last outputs.
//  2. There exists a ReplicaSet whose revision is equal to the current revision of the
//     Deployment.
//  3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
//     member is set to 'True'.
//  4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
//     'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
//     'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
//     because it doesn't do a rollout (i.e., it simply creates the Deployment and
//     corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
//
// If the Deployment has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type DeploymentPatchTypeOutput struct{ *pulumi.OutputState }

func (DeploymentPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentPatchType)(nil)).Elem()
}

func (o DeploymentPatchTypeOutput) ToDeploymentPatchTypeOutput() DeploymentPatchTypeOutput {
	return o
}

func (o DeploymentPatchTypeOutput) ToDeploymentPatchTypeOutputWithContext(ctx context.Context) DeploymentPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata.
func (o DeploymentPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v DeploymentPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the Deployment.
func (o DeploymentPatchTypeOutput) Spec() DeploymentSpecPatchPtrOutput {
	return o.ApplyT(func(v DeploymentPatchType) *DeploymentSpecPatch { return v.Spec }).(DeploymentSpecPatchPtrOutput)
}

// Most recently observed status of the Deployment.
func (o DeploymentPatchTypeOutput) Status() DeploymentStatusPatchPtrOutput {
	return o.ApplyT(func(v DeploymentPatchType) *DeploymentStatusPatch { return v.Status }).(DeploymentStatusPatchPtrOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollback struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name string `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo RollbackConfig `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations map[string]string `pulumi:"updatedAnnotations"`
}

// DeploymentRollbackInput is an input type that accepts DeploymentRollbackArgs and DeploymentRollbackOutput values.
// You can construct a concrete instance of `DeploymentRollbackInput` via:
//
//	DeploymentRollbackArgs{...}
type DeploymentRollbackInput interface {
	pulumi.Input

	ToDeploymentRollbackOutput() DeploymentRollbackOutput
	ToDeploymentRollbackOutputWithContext(context.Context) DeploymentRollbackOutput
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name pulumi.StringInput `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo RollbackConfigInput `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations pulumi.StringMapInput `pulumi:"updatedAnnotations"`
}

func (DeploymentRollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollback)(nil)).Elem()
}

func (i DeploymentRollbackArgs) ToDeploymentRollbackOutput() DeploymentRollbackOutput {
	return i.ToDeploymentRollbackOutputWithContext(context.Background())
}

func (i DeploymentRollbackArgs) ToDeploymentRollbackOutputWithContext(ctx context.Context) DeploymentRollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRollbackOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackOutput struct{ *pulumi.OutputState }

func (DeploymentRollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollback)(nil)).Elem()
}

func (o DeploymentRollbackOutput) ToDeploymentRollbackOutput() DeploymentRollbackOutput {
	return o
}

func (o DeploymentRollbackOutput) ToDeploymentRollbackOutputWithContext(ctx context.Context) DeploymentRollbackOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentRollbackOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentRollbackOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollback) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Required: This must match the Name of a deployment.
func (o DeploymentRollbackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentRollback) string { return v.Name }).(pulumi.StringOutput)
}

// The config of this deployment rollback.
func (o DeploymentRollbackOutput) RollbackTo() RollbackConfigOutput {
	return o.ApplyT(func(v DeploymentRollback) RollbackConfig { return v.RollbackTo }).(RollbackConfigOutput)
}

// The annotations to be updated to a deployment
func (o DeploymentRollbackOutput) UpdatedAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeploymentRollback) map[string]string { return v.UpdatedAnnotations }).(pulumi.StringMapOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name *string `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo *RollbackConfigPatch `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations map[string]string `pulumi:"updatedAnnotations"`
}

// DeploymentRollbackPatchInput is an input type that accepts DeploymentRollbackPatchArgs and DeploymentRollbackPatchOutput values.
// You can construct a concrete instance of `DeploymentRollbackPatchInput` via:
//
//	DeploymentRollbackPatchArgs{...}
type DeploymentRollbackPatchInput interface {
	pulumi.Input

	ToDeploymentRollbackPatchOutput() DeploymentRollbackPatchOutput
	ToDeploymentRollbackPatchOutputWithContext(context.Context) DeploymentRollbackPatchOutput
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Required: This must match the Name of a deployment.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The config of this deployment rollback.
	RollbackTo RollbackConfigPatchPtrInput `pulumi:"rollbackTo"`
	// The annotations to be updated to a deployment
	UpdatedAnnotations pulumi.StringMapInput `pulumi:"updatedAnnotations"`
}

func (DeploymentRollbackPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollbackPatch)(nil)).Elem()
}

func (i DeploymentRollbackPatchArgs) ToDeploymentRollbackPatchOutput() DeploymentRollbackPatchOutput {
	return i.ToDeploymentRollbackPatchOutputWithContext(context.Background())
}

func (i DeploymentRollbackPatchArgs) ToDeploymentRollbackPatchOutputWithContext(ctx context.Context) DeploymentRollbackPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRollbackPatchOutput)
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
type DeploymentRollbackPatchOutput struct{ *pulumi.OutputState }

func (DeploymentRollbackPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRollbackPatch)(nil)).Elem()
}

func (o DeploymentRollbackPatchOutput) ToDeploymentRollbackPatchOutput() DeploymentRollbackPatchOutput {
	return o
}

func (o DeploymentRollbackPatchOutput) ToDeploymentRollbackPatchOutputWithContext(ctx context.Context) DeploymentRollbackPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeploymentRollbackPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollbackPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeploymentRollbackPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollbackPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Required: This must match the Name of a deployment.
func (o DeploymentRollbackPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentRollbackPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The config of this deployment rollback.
func (o DeploymentRollbackPatchOutput) RollbackTo() RollbackConfigPatchPtrOutput {
	return o.ApplyT(func(v DeploymentRollbackPatch) *RollbackConfigPatch { return v.RollbackTo }).(RollbackConfigPatchPtrOutput)
}

// The annotations to be updated to a deployment
func (o DeploymentRollbackPatchOutput) UpdatedAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeploymentRollbackPatch) map[string]string { return v.UpdatedAnnotations }).(pulumi.StringMapOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused *bool `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo *RollbackConfig `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy *DeploymentStrategy `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template corev1.PodTemplateSpec `pulumi:"template"`
}

// DeploymentSpecInput is an input type that accepts DeploymentSpecArgs and DeploymentSpecOutput values.
// You can construct a concrete instance of `DeploymentSpecInput` via:
//
//	DeploymentSpecArgs{...}
type DeploymentSpecInput interface {
	pulumi.Input

	ToDeploymentSpecOutput() DeploymentSpecOutput
	ToDeploymentSpecOutputWithContext(context.Context) DeploymentSpecOutput
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds pulumi.IntPtrInput `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo RollbackConfigPtrInput `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy DeploymentStrategyPtrInput `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template corev1.PodTemplateSpecInput `pulumi:"template"`
}

func (DeploymentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpec)(nil)).Elem()
}

func (i DeploymentSpecArgs) ToDeploymentSpecOutput() DeploymentSpecOutput {
	return i.ToDeploymentSpecOutputWithContext(context.Background())
}

func (i DeploymentSpecArgs) ToDeploymentSpecOutputWithContext(ctx context.Context) DeploymentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecOutput)
}

func (i DeploymentSpecArgs) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return i.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i DeploymentSpecArgs) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecOutput).ToDeploymentSpecPtrOutputWithContext(ctx)
}

// DeploymentSpecPtrInput is an input type that accepts DeploymentSpecArgs, DeploymentSpecPtr and DeploymentSpecPtrOutput values.
// You can construct a concrete instance of `DeploymentSpecPtrInput` via:
//
//	        DeploymentSpecArgs{...}
//
//	or:
//
//	        nil
type DeploymentSpecPtrInput interface {
	pulumi.Input

	ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput
	ToDeploymentSpecPtrOutputWithContext(context.Context) DeploymentSpecPtrOutput
}

type deploymentSpecPtrType DeploymentSpecArgs

func DeploymentSpecPtr(v *DeploymentSpecArgs) DeploymentSpecPtrInput {
	return (*deploymentSpecPtrType)(v)
}

func (*deploymentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpec)(nil)).Elem()
}

func (i *deploymentSpecPtrType) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return i.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (i *deploymentSpecPtrType) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecPtrOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecOutput struct{ *pulumi.OutputState }

func (DeploymentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpec)(nil)).Elem()
}

func (o DeploymentSpecOutput) ToDeploymentSpecOutput() DeploymentSpecOutput {
	return o
}

func (o DeploymentSpecOutput) ToDeploymentSpecOutputWithContext(ctx context.Context) DeploymentSpecOutput {
	return o
}

func (o DeploymentSpecOutput) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return o.ToDeploymentSpecPtrOutputWithContext(context.Background())
}

func (o DeploymentSpecOutput) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentSpec) *DeploymentSpec {
		return &v
	}).(DeploymentSpecPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o DeploymentSpecOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o DeploymentSpecOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.ProgressDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
func (o DeploymentSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecOutput) RollbackTo() RollbackConfigPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *RollbackConfig { return v.RollbackTo }).(RollbackConfigPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecOutput) Strategy() DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v DeploymentSpec) *DeploymentStrategy { return v.Strategy }).(DeploymentStrategyPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecOutput) Template() corev1.PodTemplateSpecOutput {
	return o.ApplyT(func(v DeploymentSpec) corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecOutput)
}

type DeploymentSpecPtrOutput struct{ *pulumi.OutputState }

func (DeploymentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpec)(nil)).Elem()
}

func (o DeploymentSpecPtrOutput) ToDeploymentSpecPtrOutput() DeploymentSpecPtrOutput {
	return o
}

func (o DeploymentSpecPtrOutput) ToDeploymentSpecPtrOutputWithContext(ctx context.Context) DeploymentSpecPtrOutput {
	return o
}

func (o DeploymentSpecPtrOutput) Elem() DeploymentSpecOutput {
	return o.ApplyT(func(v *DeploymentSpec) DeploymentSpec {
		if v != nil {
			return *v
		}
		var ret DeploymentSpec
		return ret
	}).(DeploymentSpecOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o DeploymentSpecPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o DeploymentSpecPtrOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.ProgressDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
func (o DeploymentSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecPtrOutput) RollbackTo() RollbackConfigPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *RollbackConfig {
		if v == nil {
			return nil
		}
		return v.RollbackTo
	}).(RollbackConfigPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecPtrOutput) Strategy() DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *DeploymentStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(DeploymentStrategyPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v *DeploymentSpec) *corev1.PodTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(corev1.PodTemplateSpecPtrOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecPatch struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused *bool `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo *RollbackConfigPatch `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector *metav1.LabelSelectorPatch `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy *DeploymentStrategyPatch `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template *corev1.PodTemplateSpecPatch `pulumi:"template"`
}

// DeploymentSpecPatchInput is an input type that accepts DeploymentSpecPatchArgs and DeploymentSpecPatchOutput values.
// You can construct a concrete instance of `DeploymentSpecPatchInput` via:
//
//	DeploymentSpecPatchArgs{...}
type DeploymentSpecPatchInput interface {
	pulumi.Input

	ToDeploymentSpecPatchOutput() DeploymentSpecPatchOutput
	ToDeploymentSpecPatchOutputWithContext(context.Context) DeploymentSpecPatchOutput
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecPatchArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds pulumi.IntPtrInput `pulumi:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
	RollbackTo RollbackConfigPatchPtrInput `pulumi:"rollbackTo"`
	// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
	Selector metav1.LabelSelectorPatchPtrInput `pulumi:"selector"`
	// The deployment strategy to use to replace existing pods with new ones.
	Strategy DeploymentStrategyPatchPtrInput `pulumi:"strategy"`
	// Template describes the pods that will be created.
	Template corev1.PodTemplateSpecPatchPtrInput `pulumi:"template"`
}

func (DeploymentSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpecPatch)(nil)).Elem()
}

func (i DeploymentSpecPatchArgs) ToDeploymentSpecPatchOutput() DeploymentSpecPatchOutput {
	return i.ToDeploymentSpecPatchOutputWithContext(context.Background())
}

func (i DeploymentSpecPatchArgs) ToDeploymentSpecPatchOutputWithContext(ctx context.Context) DeploymentSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecPatchOutput)
}

func (i DeploymentSpecPatchArgs) ToDeploymentSpecPatchPtrOutput() DeploymentSpecPatchPtrOutput {
	return i.ToDeploymentSpecPatchPtrOutputWithContext(context.Background())
}

func (i DeploymentSpecPatchArgs) ToDeploymentSpecPatchPtrOutputWithContext(ctx context.Context) DeploymentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecPatchOutput).ToDeploymentSpecPatchPtrOutputWithContext(ctx)
}

// DeploymentSpecPatchPtrInput is an input type that accepts DeploymentSpecPatchArgs, DeploymentSpecPatchPtr and DeploymentSpecPatchPtrOutput values.
// You can construct a concrete instance of `DeploymentSpecPatchPtrInput` via:
//
//	        DeploymentSpecPatchArgs{...}
//
//	or:
//
//	        nil
type DeploymentSpecPatchPtrInput interface {
	pulumi.Input

	ToDeploymentSpecPatchPtrOutput() DeploymentSpecPatchPtrOutput
	ToDeploymentSpecPatchPtrOutputWithContext(context.Context) DeploymentSpecPatchPtrOutput
}

type deploymentSpecPatchPtrType DeploymentSpecPatchArgs

func DeploymentSpecPatchPtr(v *DeploymentSpecPatchArgs) DeploymentSpecPatchPtrInput {
	return (*deploymentSpecPatchPtrType)(v)
}

func (*deploymentSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpecPatch)(nil)).Elem()
}

func (i *deploymentSpecPatchPtrType) ToDeploymentSpecPatchPtrOutput() DeploymentSpecPatchPtrOutput {
	return i.ToDeploymentSpecPatchPtrOutputWithContext(context.Background())
}

func (i *deploymentSpecPatchPtrType) ToDeploymentSpecPatchPtrOutputWithContext(ctx context.Context) DeploymentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSpecPatchPtrOutput)
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type DeploymentSpecPatchOutput struct{ *pulumi.OutputState }

func (DeploymentSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSpecPatch)(nil)).Elem()
}

func (o DeploymentSpecPatchOutput) ToDeploymentSpecPatchOutput() DeploymentSpecPatchOutput {
	return o
}

func (o DeploymentSpecPatchOutput) ToDeploymentSpecPatchOutputWithContext(ctx context.Context) DeploymentSpecPatchOutput {
	return o
}

func (o DeploymentSpecPatchOutput) ToDeploymentSpecPatchPtrOutput() DeploymentSpecPatchPtrOutput {
	return o.ToDeploymentSpecPatchPtrOutputWithContext(context.Background())
}

func (o DeploymentSpecPatchOutput) ToDeploymentSpecPatchPtrOutputWithContext(ctx context.Context) DeploymentSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentSpecPatch) *DeploymentSpecPatch {
		return &v
	}).(DeploymentSpecPatchPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecPatchOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o DeploymentSpecPatchOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o DeploymentSpecPatchOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *int { return v.ProgressDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
func (o DeploymentSpecPatchOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecPatchOutput) RollbackTo() RollbackConfigPatchPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *RollbackConfigPatch { return v.RollbackTo }).(RollbackConfigPatchPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecPatchOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *metav1.LabelSelectorPatch { return v.Selector }).(metav1.LabelSelectorPatchPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecPatchOutput) Strategy() DeploymentStrategyPatchPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *DeploymentStrategyPatch { return v.Strategy }).(DeploymentStrategyPatchPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecPatchOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v DeploymentSpecPatch) *corev1.PodTemplateSpecPatch { return v.Template }).(corev1.PodTemplateSpecPatchPtrOutput)
}

type DeploymentSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (DeploymentSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSpecPatch)(nil)).Elem()
}

func (o DeploymentSpecPatchPtrOutput) ToDeploymentSpecPatchPtrOutput() DeploymentSpecPatchPtrOutput {
	return o
}

func (o DeploymentSpecPatchPtrOutput) ToDeploymentSpecPatchPtrOutputWithContext(ctx context.Context) DeploymentSpecPatchPtrOutput {
	return o
}

func (o DeploymentSpecPatchPtrOutput) Elem() DeploymentSpecPatchOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) DeploymentSpecPatch {
		if v != nil {
			return *v
		}
		var ret DeploymentSpecPatch
		return ret
	}).(DeploymentSpecPatchOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o DeploymentSpecPatchPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Indicates that the deployment is paused.
func (o DeploymentSpecPatchPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
func (o DeploymentSpecPatchPtrOutput) ProgressDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.ProgressDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
func (o DeploymentSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
func (o DeploymentSpecPatchPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
func (o DeploymentSpecPatchPtrOutput) RollbackTo() RollbackConfigPatchPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *RollbackConfigPatch {
		if v == nil {
			return nil
		}
		return v.RollbackTo
	}).(RollbackConfigPatchPtrOutput)
}

// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
func (o DeploymentSpecPatchPtrOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// The deployment strategy to use to replace existing pods with new ones.
func (o DeploymentSpecPatchPtrOutput) Strategy() DeploymentStrategyPatchPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *DeploymentStrategyPatch {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(DeploymentStrategyPatchPtrOutput)
}

// Template describes the pods that will be created.
func (o DeploymentSpecPatchPtrOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *DeploymentSpecPatch) *corev1.PodTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Template
	}).(corev1.PodTemplateSpecPatchPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []DeploymentCondition `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// DeploymentStatusInput is an input type that accepts DeploymentStatusArgs and DeploymentStatusOutput values.
// You can construct a concrete instance of `DeploymentStatusInput` via:
//
//	DeploymentStatusArgs{...}
type DeploymentStatusInput interface {
	pulumi.Input

	ToDeploymentStatusOutput() DeploymentStatusOutput
	ToDeploymentStatusOutputWithContext(context.Context) DeploymentStatusOutput
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusArgs struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions DeploymentConditionArrayInput `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (DeploymentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatus)(nil)).Elem()
}

func (i DeploymentStatusArgs) ToDeploymentStatusOutput() DeploymentStatusOutput {
	return i.ToDeploymentStatusOutputWithContext(context.Background())
}

func (i DeploymentStatusArgs) ToDeploymentStatusOutputWithContext(ctx context.Context) DeploymentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusOutput)
}

func (i DeploymentStatusArgs) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return i.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i DeploymentStatusArgs) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusOutput).ToDeploymentStatusPtrOutputWithContext(ctx)
}

// DeploymentStatusPtrInput is an input type that accepts DeploymentStatusArgs, DeploymentStatusPtr and DeploymentStatusPtrOutput values.
// You can construct a concrete instance of `DeploymentStatusPtrInput` via:
//
//	        DeploymentStatusArgs{...}
//
//	or:
//
//	        nil
type DeploymentStatusPtrInput interface {
	pulumi.Input

	ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput
	ToDeploymentStatusPtrOutputWithContext(context.Context) DeploymentStatusPtrOutput
}

type deploymentStatusPtrType DeploymentStatusArgs

func DeploymentStatusPtr(v *DeploymentStatusArgs) DeploymentStatusPtrInput {
	return (*deploymentStatusPtrType)(v)
}

func (*deploymentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatus)(nil)).Elem()
}

func (i *deploymentStatusPtrType) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return i.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i *deploymentStatusPtrType) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusOutput struct{ *pulumi.OutputState }

func (DeploymentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatus)(nil)).Elem()
}

func (o DeploymentStatusOutput) ToDeploymentStatusOutput() DeploymentStatusOutput {
	return o
}

func (o DeploymentStatusOutput) ToDeploymentStatusOutputWithContext(ctx context.Context) DeploymentStatusOutput {
	return o
}

func (o DeploymentStatusOutput) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return o.ToDeploymentStatusPtrOutputWithContext(context.Background())
}

func (o DeploymentStatusOutput) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStatus) *DeploymentStatus {
		return &v
	}).(DeploymentStatusPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusOutput) Conditions() DeploymentConditionArrayOutput {
	return o.ApplyT(func(v DeploymentStatus) []DeploymentCondition { return v.Conditions }).(DeploymentConditionArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type DeploymentStatusPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatus)(nil)).Elem()
}

func (o DeploymentStatusPtrOutput) ToDeploymentStatusPtrOutput() DeploymentStatusPtrOutput {
	return o
}

func (o DeploymentStatusPtrOutput) ToDeploymentStatusPtrOutputWithContext(ctx context.Context) DeploymentStatusPtrOutput {
	return o
}

func (o DeploymentStatusPtrOutput) Elem() DeploymentStatusOutput {
	return o.ApplyT(func(v *DeploymentStatus) DeploymentStatus {
		if v != nil {
			return *v
		}
		var ret DeploymentStatus
		return ret
	}).(DeploymentStatusOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.CollisionCount
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusPtrOutput) Conditions() DeploymentConditionArrayOutput {
	return o.ApplyT(func(v *DeploymentStatus) []DeploymentCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(DeploymentConditionArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusPatch struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []DeploymentConditionPatch `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// DeploymentStatusPatchInput is an input type that accepts DeploymentStatusPatchArgs and DeploymentStatusPatchOutput values.
// You can construct a concrete instance of `DeploymentStatusPatchInput` via:
//
//	DeploymentStatusPatchArgs{...}
type DeploymentStatusPatchInput interface {
	pulumi.Input

	ToDeploymentStatusPatchOutput() DeploymentStatusPatchOutput
	ToDeploymentStatusPatchOutputWithContext(context.Context) DeploymentStatusPatchOutput
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusPatchArgs struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions DeploymentConditionPatchArrayInput `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (DeploymentStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatusPatch)(nil)).Elem()
}

func (i DeploymentStatusPatchArgs) ToDeploymentStatusPatchOutput() DeploymentStatusPatchOutput {
	return i.ToDeploymentStatusPatchOutputWithContext(context.Background())
}

func (i DeploymentStatusPatchArgs) ToDeploymentStatusPatchOutputWithContext(ctx context.Context) DeploymentStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusPatchOutput)
}

func (i DeploymentStatusPatchArgs) ToDeploymentStatusPatchPtrOutput() DeploymentStatusPatchPtrOutput {
	return i.ToDeploymentStatusPatchPtrOutputWithContext(context.Background())
}

func (i DeploymentStatusPatchArgs) ToDeploymentStatusPatchPtrOutputWithContext(ctx context.Context) DeploymentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusPatchOutput).ToDeploymentStatusPatchPtrOutputWithContext(ctx)
}

// DeploymentStatusPatchPtrInput is an input type that accepts DeploymentStatusPatchArgs, DeploymentStatusPatchPtr and DeploymentStatusPatchPtrOutput values.
// You can construct a concrete instance of `DeploymentStatusPatchPtrInput` via:
//
//	        DeploymentStatusPatchArgs{...}
//
//	or:
//
//	        nil
type DeploymentStatusPatchPtrInput interface {
	pulumi.Input

	ToDeploymentStatusPatchPtrOutput() DeploymentStatusPatchPtrOutput
	ToDeploymentStatusPatchPtrOutputWithContext(context.Context) DeploymentStatusPatchPtrOutput
}

type deploymentStatusPatchPtrType DeploymentStatusPatchArgs

func DeploymentStatusPatchPtr(v *DeploymentStatusPatchArgs) DeploymentStatusPatchPtrInput {
	return (*deploymentStatusPatchPtrType)(v)
}

func (*deploymentStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatusPatch)(nil)).Elem()
}

func (i *deploymentStatusPatchPtrType) ToDeploymentStatusPatchPtrOutput() DeploymentStatusPatchPtrOutput {
	return i.ToDeploymentStatusPatchPtrOutputWithContext(context.Background())
}

func (i *deploymentStatusPatchPtrType) ToDeploymentStatusPatchPtrOutputWithContext(ctx context.Context) DeploymentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStatusPatchPtrOutput)
}

// DeploymentStatus is the most recently observed status of the Deployment.
type DeploymentStatusPatchOutput struct{ *pulumi.OutputState }

func (DeploymentStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStatusPatch)(nil)).Elem()
}

func (o DeploymentStatusPatchOutput) ToDeploymentStatusPatchOutput() DeploymentStatusPatchOutput {
	return o
}

func (o DeploymentStatusPatchOutput) ToDeploymentStatusPatchOutputWithContext(ctx context.Context) DeploymentStatusPatchOutput {
	return o
}

func (o DeploymentStatusPatchOutput) ToDeploymentStatusPatchPtrOutput() DeploymentStatusPatchPtrOutput {
	return o.ToDeploymentStatusPatchPtrOutputWithContext(context.Background())
}

func (o DeploymentStatusPatchOutput) ToDeploymentStatusPatchPtrOutputWithContext(ctx context.Context) DeploymentStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStatusPatch) *DeploymentStatusPatch {
		return &v
	}).(DeploymentStatusPatchPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusPatchOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusPatchOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusPatchOutput) Conditions() DeploymentConditionPatchArrayOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) []DeploymentConditionPatch { return v.Conditions }).(DeploymentConditionPatchArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusPatchOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusPatchOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusPatchOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentStatusPatch) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type DeploymentStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStatusPatch)(nil)).Elem()
}

func (o DeploymentStatusPatchPtrOutput) ToDeploymentStatusPatchPtrOutput() DeploymentStatusPatchPtrOutput {
	return o
}

func (o DeploymentStatusPatchPtrOutput) ToDeploymentStatusPatchPtrOutputWithContext(ctx context.Context) DeploymentStatusPatchPtrOutput {
	return o
}

func (o DeploymentStatusPatchPtrOutput) Elem() DeploymentStatusPatchOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) DeploymentStatusPatch {
		if v != nil {
			return *v
		}
		var ret DeploymentStatusPatch
		return ret
	}).(DeploymentStatusPatchOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o DeploymentStatusPatchPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o DeploymentStatusPatchPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.CollisionCount
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o DeploymentStatusPatchPtrOutput) Conditions() DeploymentConditionPatchArrayOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) []DeploymentConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(DeploymentConditionPatchArrayOutput)
}

// The generation observed by the deployment controller.
func (o DeploymentStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o DeploymentStatusPatchPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o DeploymentStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o DeploymentStatusPatchPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o DeploymentStatusPatchPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategy struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate *RollingUpdateDeployment `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// DeploymentStrategyInput is an input type that accepts DeploymentStrategyArgs and DeploymentStrategyOutput values.
// You can construct a concrete instance of `DeploymentStrategyInput` via:
//
//	DeploymentStrategyArgs{...}
type DeploymentStrategyInput interface {
	pulumi.Input

	ToDeploymentStrategyOutput() DeploymentStrategyOutput
	ToDeploymentStrategyOutputWithContext(context.Context) DeploymentStrategyOutput
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyArgs struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate RollingUpdateDeploymentPtrInput `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeploymentStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategy)(nil)).Elem()
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return i.ToDeploymentStrategyOutputWithContext(context.Background())
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyOutput)
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return i.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (i DeploymentStrategyArgs) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyOutput).ToDeploymentStrategyPtrOutputWithContext(ctx)
}

// DeploymentStrategyPtrInput is an input type that accepts DeploymentStrategyArgs, DeploymentStrategyPtr and DeploymentStrategyPtrOutput values.
// You can construct a concrete instance of `DeploymentStrategyPtrInput` via:
//
//	        DeploymentStrategyArgs{...}
//
//	or:
//
//	        nil
type DeploymentStrategyPtrInput interface {
	pulumi.Input

	ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput
	ToDeploymentStrategyPtrOutputWithContext(context.Context) DeploymentStrategyPtrOutput
}

type deploymentStrategyPtrType DeploymentStrategyArgs

func DeploymentStrategyPtr(v *DeploymentStrategyArgs) DeploymentStrategyPtrInput {
	return (*deploymentStrategyPtrType)(v)
}

func (*deploymentStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (i *deploymentStrategyPtrType) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return i.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (i *deploymentStrategyPtrType) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategy)(nil)).Elem()
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return o
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return o
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return o.ToDeploymentStrategyPtrOutputWithContext(context.Background())
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStrategy) *DeploymentStrategy {
		return &v
	}).(DeploymentStrategyPtrOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyOutput) RollingUpdate() RollingUpdateDeploymentPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *RollingUpdateDeployment { return v.RollingUpdate }).(RollingUpdateDeploymentPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeploymentStrategyPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (o DeploymentStrategyPtrOutput) ToDeploymentStrategyPtrOutput() DeploymentStrategyPtrOutput {
	return o
}

func (o DeploymentStrategyPtrOutput) ToDeploymentStrategyPtrOutputWithContext(ctx context.Context) DeploymentStrategyPtrOutput {
	return o
}

func (o DeploymentStrategyPtrOutput) Elem() DeploymentStrategyOutput {
	return o.ApplyT(func(v *DeploymentStrategy) DeploymentStrategy {
		if v != nil {
			return *v
		}
		var ret DeploymentStrategy
		return ret
	}).(DeploymentStrategyOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyPtrOutput) RollingUpdate() RollingUpdateDeploymentPtrOutput {
	return o.ApplyT(func(v *DeploymentStrategy) *RollingUpdateDeployment {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(RollingUpdateDeploymentPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyPatch struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate *RollingUpdateDeploymentPatch `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// DeploymentStrategyPatchInput is an input type that accepts DeploymentStrategyPatchArgs and DeploymentStrategyPatchOutput values.
// You can construct a concrete instance of `DeploymentStrategyPatchInput` via:
//
//	DeploymentStrategyPatchArgs{...}
type DeploymentStrategyPatchInput interface {
	pulumi.Input

	ToDeploymentStrategyPatchOutput() DeploymentStrategyPatchOutput
	ToDeploymentStrategyPatchOutputWithContext(context.Context) DeploymentStrategyPatchOutput
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyPatchArgs struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate RollingUpdateDeploymentPatchPtrInput `pulumi:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeploymentStrategyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategyPatch)(nil)).Elem()
}

func (i DeploymentStrategyPatchArgs) ToDeploymentStrategyPatchOutput() DeploymentStrategyPatchOutput {
	return i.ToDeploymentStrategyPatchOutputWithContext(context.Background())
}

func (i DeploymentStrategyPatchArgs) ToDeploymentStrategyPatchOutputWithContext(ctx context.Context) DeploymentStrategyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyPatchOutput)
}

func (i DeploymentStrategyPatchArgs) ToDeploymentStrategyPatchPtrOutput() DeploymentStrategyPatchPtrOutput {
	return i.ToDeploymentStrategyPatchPtrOutputWithContext(context.Background())
}

func (i DeploymentStrategyPatchArgs) ToDeploymentStrategyPatchPtrOutputWithContext(ctx context.Context) DeploymentStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyPatchOutput).ToDeploymentStrategyPatchPtrOutputWithContext(ctx)
}

// DeploymentStrategyPatchPtrInput is an input type that accepts DeploymentStrategyPatchArgs, DeploymentStrategyPatchPtr and DeploymentStrategyPatchPtrOutput values.
// You can construct a concrete instance of `DeploymentStrategyPatchPtrInput` via:
//
//	        DeploymentStrategyPatchArgs{...}
//
//	or:
//
//	        nil
type DeploymentStrategyPatchPtrInput interface {
	pulumi.Input

	ToDeploymentStrategyPatchPtrOutput() DeploymentStrategyPatchPtrOutput
	ToDeploymentStrategyPatchPtrOutputWithContext(context.Context) DeploymentStrategyPatchPtrOutput
}

type deploymentStrategyPatchPtrType DeploymentStrategyPatchArgs

func DeploymentStrategyPatchPtr(v *DeploymentStrategyPatchArgs) DeploymentStrategyPatchPtrInput {
	return (*deploymentStrategyPatchPtrType)(v)
}

func (*deploymentStrategyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategyPatch)(nil)).Elem()
}

func (i *deploymentStrategyPatchPtrType) ToDeploymentStrategyPatchPtrOutput() DeploymentStrategyPatchPtrOutput {
	return i.ToDeploymentStrategyPatchPtrOutputWithContext(context.Background())
}

func (i *deploymentStrategyPatchPtrType) ToDeploymentStrategyPatchPtrOutputWithContext(ctx context.Context) DeploymentStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyPatchPtrOutput)
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type DeploymentStrategyPatchOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategyPatch)(nil)).Elem()
}

func (o DeploymentStrategyPatchOutput) ToDeploymentStrategyPatchOutput() DeploymentStrategyPatchOutput {
	return o
}

func (o DeploymentStrategyPatchOutput) ToDeploymentStrategyPatchOutputWithContext(ctx context.Context) DeploymentStrategyPatchOutput {
	return o
}

func (o DeploymentStrategyPatchOutput) ToDeploymentStrategyPatchPtrOutput() DeploymentStrategyPatchPtrOutput {
	return o.ToDeploymentStrategyPatchPtrOutputWithContext(context.Background())
}

func (o DeploymentStrategyPatchOutput) ToDeploymentStrategyPatchPtrOutputWithContext(ctx context.Context) DeploymentStrategyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStrategyPatch) *DeploymentStrategyPatch {
		return &v
	}).(DeploymentStrategyPatchPtrOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyPatchOutput) RollingUpdate() RollingUpdateDeploymentPatchPtrOutput {
	return o.ApplyT(func(v DeploymentStrategyPatch) *RollingUpdateDeploymentPatch { return v.RollingUpdate }).(RollingUpdateDeploymentPatchPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategyPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeploymentStrategyPatchPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategyPatch)(nil)).Elem()
}

func (o DeploymentStrategyPatchPtrOutput) ToDeploymentStrategyPatchPtrOutput() DeploymentStrategyPatchPtrOutput {
	return o
}

func (o DeploymentStrategyPatchPtrOutput) ToDeploymentStrategyPatchPtrOutputWithContext(ctx context.Context) DeploymentStrategyPatchPtrOutput {
	return o
}

func (o DeploymentStrategyPatchPtrOutput) Elem() DeploymentStrategyPatchOutput {
	return o.ApplyT(func(v *DeploymentStrategyPatch) DeploymentStrategyPatch {
		if v != nil {
			return *v
		}
		var ret DeploymentStrategyPatch
		return ret
	}).(DeploymentStrategyPatchOutput)
}

// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
func (o DeploymentStrategyPatchPtrOutput) RollingUpdate() RollingUpdateDeploymentPatchPtrOutput {
	return o.ApplyT(func(v *DeploymentStrategyPatch) *RollingUpdateDeploymentPatch {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(RollingUpdateDeploymentPatchPtrOutput)
}

// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
func (o DeploymentStrategyPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStrategyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// DEPRECATED.
type RollbackConfig struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision *int `pulumi:"revision"`
}

// RollbackConfigInput is an input type that accepts RollbackConfigArgs and RollbackConfigOutput values.
// You can construct a concrete instance of `RollbackConfigInput` via:
//
//	RollbackConfigArgs{...}
type RollbackConfigInput interface {
	pulumi.Input

	ToRollbackConfigOutput() RollbackConfigOutput
	ToRollbackConfigOutputWithContext(context.Context) RollbackConfigOutput
}

// DEPRECATED.
type RollbackConfigArgs struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (RollbackConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfig)(nil)).Elem()
}

func (i RollbackConfigArgs) ToRollbackConfigOutput() RollbackConfigOutput {
	return i.ToRollbackConfigOutputWithContext(context.Background())
}

func (i RollbackConfigArgs) ToRollbackConfigOutputWithContext(ctx context.Context) RollbackConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigOutput)
}

func (i RollbackConfigArgs) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return i.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (i RollbackConfigArgs) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigOutput).ToRollbackConfigPtrOutputWithContext(ctx)
}

// RollbackConfigPtrInput is an input type that accepts RollbackConfigArgs, RollbackConfigPtr and RollbackConfigPtrOutput values.
// You can construct a concrete instance of `RollbackConfigPtrInput` via:
//
//	        RollbackConfigArgs{...}
//
//	or:
//
//	        nil
type RollbackConfigPtrInput interface {
	pulumi.Input

	ToRollbackConfigPtrOutput() RollbackConfigPtrOutput
	ToRollbackConfigPtrOutputWithContext(context.Context) RollbackConfigPtrOutput
}

type rollbackConfigPtrType RollbackConfigArgs

func RollbackConfigPtr(v *RollbackConfigArgs) RollbackConfigPtrInput {
	return (*rollbackConfigPtrType)(v)
}

func (*rollbackConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfig)(nil)).Elem()
}

func (i *rollbackConfigPtrType) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return i.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (i *rollbackConfigPtrType) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigPtrOutput)
}

// DEPRECATED.
type RollbackConfigOutput struct{ *pulumi.OutputState }

func (RollbackConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfig)(nil)).Elem()
}

func (o RollbackConfigOutput) ToRollbackConfigOutput() RollbackConfigOutput {
	return o
}

func (o RollbackConfigOutput) ToRollbackConfigOutputWithContext(ctx context.Context) RollbackConfigOutput {
	return o
}

func (o RollbackConfigOutput) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return o.ToRollbackConfigPtrOutputWithContext(context.Background())
}

func (o RollbackConfigOutput) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollbackConfig) *RollbackConfig {
		return &v
	}).(RollbackConfigPtrOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollbackConfig) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type RollbackConfigPtrOutput struct{ *pulumi.OutputState }

func (RollbackConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfig)(nil)).Elem()
}

func (o RollbackConfigPtrOutput) ToRollbackConfigPtrOutput() RollbackConfigPtrOutput {
	return o
}

func (o RollbackConfigPtrOutput) ToRollbackConfigPtrOutputWithContext(ctx context.Context) RollbackConfigPtrOutput {
	return o
}

func (o RollbackConfigPtrOutput) Elem() RollbackConfigOutput {
	return o.ApplyT(func(v *RollbackConfig) RollbackConfig {
		if v != nil {
			return *v
		}
		var ret RollbackConfig
		return ret
	}).(RollbackConfigOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollbackConfig) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// DEPRECATED.
type RollbackConfigPatch struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision *int `pulumi:"revision"`
}

// RollbackConfigPatchInput is an input type that accepts RollbackConfigPatchArgs and RollbackConfigPatchOutput values.
// You can construct a concrete instance of `RollbackConfigPatchInput` via:
//
//	RollbackConfigPatchArgs{...}
type RollbackConfigPatchInput interface {
	pulumi.Input

	ToRollbackConfigPatchOutput() RollbackConfigPatchOutput
	ToRollbackConfigPatchOutputWithContext(context.Context) RollbackConfigPatchOutput
}

// DEPRECATED.
type RollbackConfigPatchArgs struct {
	// The revision to rollback to. If set to 0, rollback to the last revision.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (RollbackConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfigPatch)(nil)).Elem()
}

func (i RollbackConfigPatchArgs) ToRollbackConfigPatchOutput() RollbackConfigPatchOutput {
	return i.ToRollbackConfigPatchOutputWithContext(context.Background())
}

func (i RollbackConfigPatchArgs) ToRollbackConfigPatchOutputWithContext(ctx context.Context) RollbackConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigPatchOutput)
}

func (i RollbackConfigPatchArgs) ToRollbackConfigPatchPtrOutput() RollbackConfigPatchPtrOutput {
	return i.ToRollbackConfigPatchPtrOutputWithContext(context.Background())
}

func (i RollbackConfigPatchArgs) ToRollbackConfigPatchPtrOutputWithContext(ctx context.Context) RollbackConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigPatchOutput).ToRollbackConfigPatchPtrOutputWithContext(ctx)
}

// RollbackConfigPatchPtrInput is an input type that accepts RollbackConfigPatchArgs, RollbackConfigPatchPtr and RollbackConfigPatchPtrOutput values.
// You can construct a concrete instance of `RollbackConfigPatchPtrInput` via:
//
//	        RollbackConfigPatchArgs{...}
//
//	or:
//
//	        nil
type RollbackConfigPatchPtrInput interface {
	pulumi.Input

	ToRollbackConfigPatchPtrOutput() RollbackConfigPatchPtrOutput
	ToRollbackConfigPatchPtrOutputWithContext(context.Context) RollbackConfigPatchPtrOutput
}

type rollbackConfigPatchPtrType RollbackConfigPatchArgs

func RollbackConfigPatchPtr(v *RollbackConfigPatchArgs) RollbackConfigPatchPtrInput {
	return (*rollbackConfigPatchPtrType)(v)
}

func (*rollbackConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfigPatch)(nil)).Elem()
}

func (i *rollbackConfigPatchPtrType) ToRollbackConfigPatchPtrOutput() RollbackConfigPatchPtrOutput {
	return i.ToRollbackConfigPatchPtrOutputWithContext(context.Background())
}

func (i *rollbackConfigPatchPtrType) ToRollbackConfigPatchPtrOutputWithContext(ctx context.Context) RollbackConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackConfigPatchPtrOutput)
}

// DEPRECATED.
type RollbackConfigPatchOutput struct{ *pulumi.OutputState }

func (RollbackConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackConfigPatch)(nil)).Elem()
}

func (o RollbackConfigPatchOutput) ToRollbackConfigPatchOutput() RollbackConfigPatchOutput {
	return o
}

func (o RollbackConfigPatchOutput) ToRollbackConfigPatchOutputWithContext(ctx context.Context) RollbackConfigPatchOutput {
	return o
}

func (o RollbackConfigPatchOutput) ToRollbackConfigPatchPtrOutput() RollbackConfigPatchPtrOutput {
	return o.ToRollbackConfigPatchPtrOutputWithContext(context.Background())
}

func (o RollbackConfigPatchOutput) ToRollbackConfigPatchPtrOutputWithContext(ctx context.Context) RollbackConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollbackConfigPatch) *RollbackConfigPatch {
		return &v
	}).(RollbackConfigPatchPtrOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigPatchOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollbackConfigPatch) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type RollbackConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (RollbackConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollbackConfigPatch)(nil)).Elem()
}

func (o RollbackConfigPatchPtrOutput) ToRollbackConfigPatchPtrOutput() RollbackConfigPatchPtrOutput {
	return o
}

func (o RollbackConfigPatchPtrOutput) ToRollbackConfigPatchPtrOutputWithContext(ctx context.Context) RollbackConfigPatchPtrOutput {
	return o
}

func (o RollbackConfigPatchPtrOutput) Elem() RollbackConfigPatchOutput {
	return o.ApplyT(func(v *RollbackConfigPatch) RollbackConfigPatch {
		if v != nil {
			return *v
		}
		var ret RollbackConfigPatch
		return ret
	}).(RollbackConfigPatchOutput)
}

// The revision to rollback to. If set to 0, rollback to the last revision.
func (o RollbackConfigPatchPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollbackConfigPatch) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeployment struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge interface{} `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// RollingUpdateDeploymentInput is an input type that accepts RollingUpdateDeploymentArgs and RollingUpdateDeploymentOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentInput` via:
//
//	RollingUpdateDeploymentArgs{...}
type RollingUpdateDeploymentInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput
	ToRollingUpdateDeploymentOutputWithContext(context.Context) RollingUpdateDeploymentOutput
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentArgs struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge pulumi.Input `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (RollingUpdateDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeployment)(nil)).Elem()
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput {
	return i.ToRollingUpdateDeploymentOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentOutputWithContext(ctx context.Context) RollingUpdateDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentOutput)
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return i.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentArgs) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentOutput).ToRollingUpdateDeploymentPtrOutputWithContext(ctx)
}

// RollingUpdateDeploymentPtrInput is an input type that accepts RollingUpdateDeploymentArgs, RollingUpdateDeploymentPtr and RollingUpdateDeploymentPtrOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentPtrInput` via:
//
//	        RollingUpdateDeploymentArgs{...}
//
//	or:
//
//	        nil
type RollingUpdateDeploymentPtrInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput
	ToRollingUpdateDeploymentPtrOutputWithContext(context.Context) RollingUpdateDeploymentPtrOutput
}

type rollingUpdateDeploymentPtrType RollingUpdateDeploymentArgs

func RollingUpdateDeploymentPtr(v *RollingUpdateDeploymentArgs) RollingUpdateDeploymentPtrInput {
	return (*rollingUpdateDeploymentPtrType)(v)
}

func (*rollingUpdateDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeployment)(nil)).Elem()
}

func (i *rollingUpdateDeploymentPtrType) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return i.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateDeploymentPtrType) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentPtrOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeployment)(nil)).Elem()
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentOutput() RollingUpdateDeploymentOutput {
	return o
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentOutputWithContext(ctx context.Context) RollingUpdateDeploymentOutput {
	return o
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return o.ToRollingUpdateDeploymentPtrOutputWithContext(context.Background())
}

func (o RollingUpdateDeploymentOutput) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollingUpdateDeployment) *RollingUpdateDeployment {
		return &v
	}).(RollingUpdateDeploymentPtrOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeployment) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type RollingUpdateDeploymentPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeployment)(nil)).Elem()
}

func (o RollingUpdateDeploymentPtrOutput) ToRollingUpdateDeploymentPtrOutput() RollingUpdateDeploymentPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPtrOutput) ToRollingUpdateDeploymentPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPtrOutput) Elem() RollingUpdateDeploymentOutput {
	return o.ApplyT(func(v *RollingUpdateDeployment) RollingUpdateDeployment {
		if v != nil {
			return *v
		}
		var ret RollingUpdateDeployment
		return ret
	}).(RollingUpdateDeploymentOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentPtrOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v *RollingUpdateDeployment) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *RollingUpdateDeployment) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentPatch struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge interface{} `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
}

// RollingUpdateDeploymentPatchInput is an input type that accepts RollingUpdateDeploymentPatchArgs and RollingUpdateDeploymentPatchOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentPatchInput` via:
//
//	RollingUpdateDeploymentPatchArgs{...}
type RollingUpdateDeploymentPatchInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentPatchOutput() RollingUpdateDeploymentPatchOutput
	ToRollingUpdateDeploymentPatchOutputWithContext(context.Context) RollingUpdateDeploymentPatchOutput
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentPatchArgs struct {
	// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
	MaxSurge pulumi.Input `pulumi:"maxSurge"`
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
}

func (RollingUpdateDeploymentPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeploymentPatch)(nil)).Elem()
}

func (i RollingUpdateDeploymentPatchArgs) ToRollingUpdateDeploymentPatchOutput() RollingUpdateDeploymentPatchOutput {
	return i.ToRollingUpdateDeploymentPatchOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentPatchArgs) ToRollingUpdateDeploymentPatchOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentPatchOutput)
}

func (i RollingUpdateDeploymentPatchArgs) ToRollingUpdateDeploymentPatchPtrOutput() RollingUpdateDeploymentPatchPtrOutput {
	return i.ToRollingUpdateDeploymentPatchPtrOutputWithContext(context.Background())
}

func (i RollingUpdateDeploymentPatchArgs) ToRollingUpdateDeploymentPatchPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentPatchOutput).ToRollingUpdateDeploymentPatchPtrOutputWithContext(ctx)
}

// RollingUpdateDeploymentPatchPtrInput is an input type that accepts RollingUpdateDeploymentPatchArgs, RollingUpdateDeploymentPatchPtr and RollingUpdateDeploymentPatchPtrOutput values.
// You can construct a concrete instance of `RollingUpdateDeploymentPatchPtrInput` via:
//
//	        RollingUpdateDeploymentPatchArgs{...}
//
//	or:
//
//	        nil
type RollingUpdateDeploymentPatchPtrInput interface {
	pulumi.Input

	ToRollingUpdateDeploymentPatchPtrOutput() RollingUpdateDeploymentPatchPtrOutput
	ToRollingUpdateDeploymentPatchPtrOutputWithContext(context.Context) RollingUpdateDeploymentPatchPtrOutput
}

type rollingUpdateDeploymentPatchPtrType RollingUpdateDeploymentPatchArgs

func RollingUpdateDeploymentPatchPtr(v *RollingUpdateDeploymentPatchArgs) RollingUpdateDeploymentPatchPtrInput {
	return (*rollingUpdateDeploymentPatchPtrType)(v)
}

func (*rollingUpdateDeploymentPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeploymentPatch)(nil)).Elem()
}

func (i *rollingUpdateDeploymentPatchPtrType) ToRollingUpdateDeploymentPatchPtrOutput() RollingUpdateDeploymentPatchPtrOutput {
	return i.ToRollingUpdateDeploymentPatchPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateDeploymentPatchPtrType) ToRollingUpdateDeploymentPatchPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateDeploymentPatchPtrOutput)
}

// Spec to control the desired behavior of rolling update.
type RollingUpdateDeploymentPatchOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateDeploymentPatch)(nil)).Elem()
}

func (o RollingUpdateDeploymentPatchOutput) ToRollingUpdateDeploymentPatchOutput() RollingUpdateDeploymentPatchOutput {
	return o
}

func (o RollingUpdateDeploymentPatchOutput) ToRollingUpdateDeploymentPatchOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchOutput {
	return o
}

func (o RollingUpdateDeploymentPatchOutput) ToRollingUpdateDeploymentPatchPtrOutput() RollingUpdateDeploymentPatchPtrOutput {
	return o.ToRollingUpdateDeploymentPatchPtrOutputWithContext(context.Background())
}

func (o RollingUpdateDeploymentPatchOutput) ToRollingUpdateDeploymentPatchPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollingUpdateDeploymentPatch) *RollingUpdateDeploymentPatch {
		return &v
	}).(RollingUpdateDeploymentPatchPtrOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentPatchOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeploymentPatch) interface{} { return v.MaxSurge }).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentPatchOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RollingUpdateDeploymentPatch) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

type RollingUpdateDeploymentPatchPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateDeploymentPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateDeploymentPatch)(nil)).Elem()
}

func (o RollingUpdateDeploymentPatchPtrOutput) ToRollingUpdateDeploymentPatchPtrOutput() RollingUpdateDeploymentPatchPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPatchPtrOutput) ToRollingUpdateDeploymentPatchPtrOutputWithContext(ctx context.Context) RollingUpdateDeploymentPatchPtrOutput {
	return o
}

func (o RollingUpdateDeploymentPatchPtrOutput) Elem() RollingUpdateDeploymentPatchOutput {
	return o.ApplyT(func(v *RollingUpdateDeploymentPatch) RollingUpdateDeploymentPatch {
		if v != nil {
			return *v
		}
		var ret RollingUpdateDeploymentPatch
		return ret
	}).(RollingUpdateDeploymentPatchOutput)
}

// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
func (o RollingUpdateDeploymentPatchPtrOutput) MaxSurge() pulumi.AnyOutput {
	return o.ApplyT(func(v *RollingUpdateDeploymentPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.AnyOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
func (o RollingUpdateDeploymentPatchPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *RollingUpdateDeploymentPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategy struct {
	// Partition indicates the ordinal at which the StatefulSet should be partitioned.
	Partition *int `pulumi:"partition"`
}

// RollingUpdateStatefulSetStrategyInput is an input type that accepts RollingUpdateStatefulSetStrategyArgs and RollingUpdateStatefulSetStrategyOutput values.
// You can construct a concrete instance of `RollingUpdateStatefulSetStrategyInput` via:
//
//	RollingUpdateStatefulSetStrategyArgs{...}
type RollingUpdateStatefulSetStrategyInput interface {
	pulumi.Input

	ToRollingUpdateStatefulSetStrategyOutput() RollingUpdateStatefulSetStrategyOutput
	ToRollingUpdateStatefulSetStrategyOutputWithContext(context.Context) RollingUpdateStatefulSetStrategyOutput
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategyArgs struct {
	// Partition indicates the ordinal at which the StatefulSet should be partitioned.
	Partition pulumi.IntPtrInput `pulumi:"partition"`
}

func (RollingUpdateStatefulSetStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateStatefulSetStrategy)(nil)).Elem()
}

func (i RollingUpdateStatefulSetStrategyArgs) ToRollingUpdateStatefulSetStrategyOutput() RollingUpdateStatefulSetStrategyOutput {
	return i.ToRollingUpdateStatefulSetStrategyOutputWithContext(context.Background())
}

func (i RollingUpdateStatefulSetStrategyArgs) ToRollingUpdateStatefulSetStrategyOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyOutput)
}

func (i RollingUpdateStatefulSetStrategyArgs) ToRollingUpdateStatefulSetStrategyPtrOutput() RollingUpdateStatefulSetStrategyPtrOutput {
	return i.ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(context.Background())
}

func (i RollingUpdateStatefulSetStrategyArgs) ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyOutput).ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(ctx)
}

// RollingUpdateStatefulSetStrategyPtrInput is an input type that accepts RollingUpdateStatefulSetStrategyArgs, RollingUpdateStatefulSetStrategyPtr and RollingUpdateStatefulSetStrategyPtrOutput values.
// You can construct a concrete instance of `RollingUpdateStatefulSetStrategyPtrInput` via:
//
//	        RollingUpdateStatefulSetStrategyArgs{...}
//
//	or:
//
//	        nil
type RollingUpdateStatefulSetStrategyPtrInput interface {
	pulumi.Input

	ToRollingUpdateStatefulSetStrategyPtrOutput() RollingUpdateStatefulSetStrategyPtrOutput
	ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(context.Context) RollingUpdateStatefulSetStrategyPtrOutput
}

type rollingUpdateStatefulSetStrategyPtrType RollingUpdateStatefulSetStrategyArgs

func RollingUpdateStatefulSetStrategyPtr(v *RollingUpdateStatefulSetStrategyArgs) RollingUpdateStatefulSetStrategyPtrInput {
	return (*rollingUpdateStatefulSetStrategyPtrType)(v)
}

func (*rollingUpdateStatefulSetStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateStatefulSetStrategy)(nil)).Elem()
}

func (i *rollingUpdateStatefulSetStrategyPtrType) ToRollingUpdateStatefulSetStrategyPtrOutput() RollingUpdateStatefulSetStrategyPtrOutput {
	return i.ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateStatefulSetStrategyPtrType) ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyPtrOutput)
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategyOutput struct{ *pulumi.OutputState }

func (RollingUpdateStatefulSetStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateStatefulSetStrategy)(nil)).Elem()
}

func (o RollingUpdateStatefulSetStrategyOutput) ToRollingUpdateStatefulSetStrategyOutput() RollingUpdateStatefulSetStrategyOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyOutput) ToRollingUpdateStatefulSetStrategyOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyOutput) ToRollingUpdateStatefulSetStrategyPtrOutput() RollingUpdateStatefulSetStrategyPtrOutput {
	return o.ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(context.Background())
}

func (o RollingUpdateStatefulSetStrategyOutput) ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollingUpdateStatefulSetStrategy) *RollingUpdateStatefulSetStrategy {
		return &v
	}).(RollingUpdateStatefulSetStrategyPtrOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned.
func (o RollingUpdateStatefulSetStrategyOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpdateStatefulSetStrategy) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

type RollingUpdateStatefulSetStrategyPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateStatefulSetStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateStatefulSetStrategy)(nil)).Elem()
}

func (o RollingUpdateStatefulSetStrategyPtrOutput) ToRollingUpdateStatefulSetStrategyPtrOutput() RollingUpdateStatefulSetStrategyPtrOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPtrOutput) ToRollingUpdateStatefulSetStrategyPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPtrOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPtrOutput) Elem() RollingUpdateStatefulSetStrategyOutput {
	return o.ApplyT(func(v *RollingUpdateStatefulSetStrategy) RollingUpdateStatefulSetStrategy {
		if v != nil {
			return *v
		}
		var ret RollingUpdateStatefulSetStrategy
		return ret
	}).(RollingUpdateStatefulSetStrategyOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned.
func (o RollingUpdateStatefulSetStrategyPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpdateStatefulSetStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategyPatch struct {
	// Partition indicates the ordinal at which the StatefulSet should be partitioned.
	Partition *int `pulumi:"partition"`
}

// RollingUpdateStatefulSetStrategyPatchInput is an input type that accepts RollingUpdateStatefulSetStrategyPatchArgs and RollingUpdateStatefulSetStrategyPatchOutput values.
// You can construct a concrete instance of `RollingUpdateStatefulSetStrategyPatchInput` via:
//
//	RollingUpdateStatefulSetStrategyPatchArgs{...}
type RollingUpdateStatefulSetStrategyPatchInput interface {
	pulumi.Input

	ToRollingUpdateStatefulSetStrategyPatchOutput() RollingUpdateStatefulSetStrategyPatchOutput
	ToRollingUpdateStatefulSetStrategyPatchOutputWithContext(context.Context) RollingUpdateStatefulSetStrategyPatchOutput
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategyPatchArgs struct {
	// Partition indicates the ordinal at which the StatefulSet should be partitioned.
	Partition pulumi.IntPtrInput `pulumi:"partition"`
}

func (RollingUpdateStatefulSetStrategyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateStatefulSetStrategyPatch)(nil)).Elem()
}

func (i RollingUpdateStatefulSetStrategyPatchArgs) ToRollingUpdateStatefulSetStrategyPatchOutput() RollingUpdateStatefulSetStrategyPatchOutput {
	return i.ToRollingUpdateStatefulSetStrategyPatchOutputWithContext(context.Background())
}

func (i RollingUpdateStatefulSetStrategyPatchArgs) ToRollingUpdateStatefulSetStrategyPatchOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyPatchOutput)
}

func (i RollingUpdateStatefulSetStrategyPatchArgs) ToRollingUpdateStatefulSetStrategyPatchPtrOutput() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return i.ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(context.Background())
}

func (i RollingUpdateStatefulSetStrategyPatchArgs) ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyPatchOutput).ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(ctx)
}

// RollingUpdateStatefulSetStrategyPatchPtrInput is an input type that accepts RollingUpdateStatefulSetStrategyPatchArgs, RollingUpdateStatefulSetStrategyPatchPtr and RollingUpdateStatefulSetStrategyPatchPtrOutput values.
// You can construct a concrete instance of `RollingUpdateStatefulSetStrategyPatchPtrInput` via:
//
//	        RollingUpdateStatefulSetStrategyPatchArgs{...}
//
//	or:
//
//	        nil
type RollingUpdateStatefulSetStrategyPatchPtrInput interface {
	pulumi.Input

	ToRollingUpdateStatefulSetStrategyPatchPtrOutput() RollingUpdateStatefulSetStrategyPatchPtrOutput
	ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(context.Context) RollingUpdateStatefulSetStrategyPatchPtrOutput
}

type rollingUpdateStatefulSetStrategyPatchPtrType RollingUpdateStatefulSetStrategyPatchArgs

func RollingUpdateStatefulSetStrategyPatchPtr(v *RollingUpdateStatefulSetStrategyPatchArgs) RollingUpdateStatefulSetStrategyPatchPtrInput {
	return (*rollingUpdateStatefulSetStrategyPatchPtrType)(v)
}

func (*rollingUpdateStatefulSetStrategyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateStatefulSetStrategyPatch)(nil)).Elem()
}

func (i *rollingUpdateStatefulSetStrategyPatchPtrType) ToRollingUpdateStatefulSetStrategyPatchPtrOutput() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return i.ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(context.Background())
}

func (i *rollingUpdateStatefulSetStrategyPatchPtrType) ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpdateStatefulSetStrategyPatchPtrOutput)
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type RollingUpdateStatefulSetStrategyPatchOutput struct{ *pulumi.OutputState }

func (RollingUpdateStatefulSetStrategyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpdateStatefulSetStrategyPatch)(nil)).Elem()
}

func (o RollingUpdateStatefulSetStrategyPatchOutput) ToRollingUpdateStatefulSetStrategyPatchOutput() RollingUpdateStatefulSetStrategyPatchOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPatchOutput) ToRollingUpdateStatefulSetStrategyPatchOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPatchOutput) ToRollingUpdateStatefulSetStrategyPatchPtrOutput() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o.ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(context.Background())
}

func (o RollingUpdateStatefulSetStrategyPatchOutput) ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollingUpdateStatefulSetStrategyPatch) *RollingUpdateStatefulSetStrategyPatch {
		return &v
	}).(RollingUpdateStatefulSetStrategyPatchPtrOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned.
func (o RollingUpdateStatefulSetStrategyPatchOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpdateStatefulSetStrategyPatch) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

type RollingUpdateStatefulSetStrategyPatchPtrOutput struct{ *pulumi.OutputState }

func (RollingUpdateStatefulSetStrategyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpdateStatefulSetStrategyPatch)(nil)).Elem()
}

func (o RollingUpdateStatefulSetStrategyPatchPtrOutput) ToRollingUpdateStatefulSetStrategyPatchPtrOutput() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPatchPtrOutput) ToRollingUpdateStatefulSetStrategyPatchPtrOutputWithContext(ctx context.Context) RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o
}

func (o RollingUpdateStatefulSetStrategyPatchPtrOutput) Elem() RollingUpdateStatefulSetStrategyPatchOutput {
	return o.ApplyT(func(v *RollingUpdateStatefulSetStrategyPatch) RollingUpdateStatefulSetStrategyPatch {
		if v != nil {
			return *v
		}
		var ret RollingUpdateStatefulSetStrategyPatch
		return ret
	}).(RollingUpdateStatefulSetStrategyPatchOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned.
func (o RollingUpdateStatefulSetStrategyPatchPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpdateStatefulSetStrategyPatch) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// Scale represents a scaling request for a resource.
type Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpec `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatus `pulumi:"status"`
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
//	ScaleArgs{...}
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// Scale represents a scaling request for a resource.
type ScaleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPtrInput `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPtrInput `pulumi:"status"`
}

func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

// Scale represents a scaling request for a resource.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScaleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScaleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScaleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Scale) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScaleOutput) Spec() ScaleSpecPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleSpec { return v.Spec }).(ScaleSpecPtrOutput)
}

// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScaleOutput) Status() ScaleStatusPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleStatus { return v.Status }).(ScaleStatusPtrOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpecPatch `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatusPatch `pulumi:"status"`
}

// ScalePatchInput is an input type that accepts ScalePatchArgs and ScalePatchOutput values.
// You can construct a concrete instance of `ScalePatchInput` via:
//
//	ScalePatchArgs{...}
type ScalePatchInput interface {
	pulumi.Input

	ToScalePatchOutput() ScalePatchOutput
	ToScalePatchOutputWithContext(context.Context) ScalePatchOutput
}

// Scale represents a scaling request for a resource.
type ScalePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPatchPtrInput `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPatchPtrInput `pulumi:"status"`
}

func (ScalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (i ScalePatchArgs) ToScalePatchOutput() ScalePatchOutput {
	return i.ToScalePatchOutputWithContext(context.Background())
}

func (i ScalePatchArgs) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalePatchOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatchOutput struct{ *pulumi.OutputState }

func (ScalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (o ScalePatchOutput) ToScalePatchOutput() ScalePatchOutput {
	return o
}

func (o ScalePatchOutput) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScalePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScalePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScalePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScalePatchOutput) Spec() ScaleSpecPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleSpecPatch { return v.Spec }).(ScaleSpecPatchPtrOutput)
}

// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScalePatchOutput) Status() ScaleStatusPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleStatusPatch { return v.Status }).(ScaleStatusPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpec struct {
	// desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecInput is an input type that accepts ScaleSpecArgs and ScaleSpecOutput values.
// You can construct a concrete instance of `ScaleSpecInput` via:
//
//	ScaleSpecArgs{...}
type ScaleSpecInput interface {
	pulumi.Input

	ToScaleSpecOutput() ScaleSpecOutput
	ToScaleSpecOutputWithContext(context.Context) ScaleSpecOutput
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpecArgs struct {
	// desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (i ScaleSpecArgs) ToScaleSpecOutput() ScaleSpecOutput {
	return i.ToScaleSpecOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput)
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput).ToScaleSpecPtrOutputWithContext(ctx)
}

// ScaleSpecPtrInput is an input type that accepts ScaleSpecArgs, ScaleSpecPtr and ScaleSpecPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPtrInput` via:
//
//	        ScaleSpecArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPtrInput interface {
	pulumi.Input

	ToScaleSpecPtrOutput() ScaleSpecPtrOutput
	ToScaleSpecPtrOutputWithContext(context.Context) ScaleSpecPtrOutput
}

type scaleSpecPtrType ScaleSpecArgs

func ScaleSpecPtr(v *ScaleSpecArgs) ScaleSpecPtrInput {
	return (*scaleSpecPtrType)(v)
}

func (*scaleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpecOutput struct{ *pulumi.OutputState }

func (ScaleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecOutput) ToScaleSpecOutput() ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpec) *ScaleSpec {
		return &v
	}).(ScaleSpecPtrOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) Elem() ScaleSpecOutput {
	return o.ApplyT(func(v *ScaleSpec) ScaleSpec {
		if v != nil {
			return *v
		}
		var ret ScaleSpec
		return ret
	}).(ScaleSpecOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpecPatch struct {
	// desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecPatchInput is an input type that accepts ScaleSpecPatchArgs and ScaleSpecPatchOutput values.
// You can construct a concrete instance of `ScaleSpecPatchInput` via:
//
//	ScaleSpecPatchArgs{...}
type ScaleSpecPatchInput interface {
	pulumi.Input

	ToScaleSpecPatchOutput() ScaleSpecPatchOutput
	ToScaleSpecPatchOutputWithContext(context.Context) ScaleSpecPatchOutput
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpecPatchArgs struct {
	// desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return i.ToScaleSpecPatchOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput)
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput).ToScaleSpecPatchPtrOutputWithContext(ctx)
}

// ScaleSpecPatchPtrInput is an input type that accepts ScaleSpecPatchArgs, ScaleSpecPatchPtr and ScaleSpecPatchPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPatchPtrInput` via:
//
//	        ScaleSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPatchPtrInput interface {
	pulumi.Input

	ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput
	ToScaleSpecPatchPtrOutputWithContext(context.Context) ScaleSpecPatchPtrOutput
}

type scaleSpecPatchPtrType ScaleSpecPatchArgs

func ScaleSpecPatchPtr(v *ScaleSpecPatchArgs) ScaleSpecPatchPtrInput {
	return (*scaleSpecPatchPtrType)(v)
}

func (*scaleSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource
type ScaleSpecPatchOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpecPatch) *ScaleSpecPatch {
		return &v
	}).(ScaleSpecPatchPtrOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) Elem() ScaleSpecPatchOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) ScaleSpecPatch {
		if v != nil {
			return *v
		}
		var ret ScaleSpecPatch
		return ret
	}).(ScaleSpecPatchOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatus struct {
	// actual number of observed instances of the scaled object.
	Replicas int `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector map[string]string `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector *string `pulumi:"targetSelector"`
}

// ScaleStatusInput is an input type that accepts ScaleStatusArgs and ScaleStatusOutput values.
// You can construct a concrete instance of `ScaleStatusInput` via:
//
//	ScaleStatusArgs{...}
type ScaleStatusInput interface {
	pulumi.Input

	ToScaleStatusOutput() ScaleStatusOutput
	ToScaleStatusOutputWithContext(context.Context) ScaleStatusOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusArgs struct {
	// actual number of observed instances of the scaled object.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector pulumi.StringPtrInput `pulumi:"targetSelector"`
}

func (ScaleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (i ScaleStatusArgs) ToScaleStatusOutput() ScaleStatusOutput {
	return i.ToScaleStatusOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput)
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput).ToScaleStatusPtrOutputWithContext(ctx)
}

// ScaleStatusPtrInput is an input type that accepts ScaleStatusArgs, ScaleStatusPtr and ScaleStatusPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPtrInput` via:
//
//	        ScaleStatusArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPtrInput interface {
	pulumi.Input

	ToScaleStatusPtrOutput() ScaleStatusPtrOutput
	ToScaleStatusPtrOutputWithContext(context.Context) ScaleStatusPtrOutput
}

type scaleStatusPtrType ScaleStatusArgs

func ScaleStatusPtr(v *ScaleStatusArgs) ScaleStatusPtrInput {
	return (*scaleStatusPtrType)(v)
}

func (*scaleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusOutput struct{ *pulumi.OutputState }

func (ScaleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusOutput) ToScaleStatusOutput() ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatus) *ScaleStatus {
		return &v
	}).(ScaleStatusPtrOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScaleStatus) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.TargetSelector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) Elem() ScaleStatusOutput {
	return o.ApplyT(func(v *ScaleStatus) ScaleStatus {
		if v != nil {
			return *v
		}
		var ret ScaleStatus
		return ret
	}).(ScaleStatusOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScaleStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusPtrOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *string {
		if v == nil {
			return nil
		}
		return v.TargetSelector
	}).(pulumi.StringPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatch struct {
	// actual number of observed instances of the scaled object.
	Replicas *int `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector map[string]string `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector *string `pulumi:"targetSelector"`
}

// ScaleStatusPatchInput is an input type that accepts ScaleStatusPatchArgs and ScaleStatusPatchOutput values.
// You can construct a concrete instance of `ScaleStatusPatchInput` via:
//
//	ScaleStatusPatchArgs{...}
type ScaleStatusPatchInput interface {
	pulumi.Input

	ToScaleStatusPatchOutput() ScaleStatusPatchOutput
	ToScaleStatusPatchOutputWithContext(context.Context) ScaleStatusPatchOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchArgs struct {
	// actual number of observed instances of the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	TargetSelector pulumi.StringPtrInput `pulumi:"targetSelector"`
}

func (ScaleStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return i.ToScaleStatusPatchOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput)
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput).ToScaleStatusPatchPtrOutputWithContext(ctx)
}

// ScaleStatusPatchPtrInput is an input type that accepts ScaleStatusPatchArgs, ScaleStatusPatchPtr and ScaleStatusPatchPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPatchPtrInput` via:
//
//	        ScaleStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPatchPtrInput interface {
	pulumi.Input

	ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput
	ToScaleStatusPatchPtrOutputWithContext(context.Context) ScaleStatusPatchPtrOutput
}

type scaleStatusPatchPtrType ScaleStatusPatchArgs

func ScaleStatusPatchPtr(v *ScaleStatusPatchArgs) ScaleStatusPatchPtrInput {
	return (*scaleStatusPatchPtrType)(v)
}

func (*scaleStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatusPatch) *ScaleStatusPatch {
		return &v
	}).(ScaleStatusPatchPtrOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScaleStatusPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusPatchOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *string { return v.TargetSelector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) Elem() ScaleStatusPatchOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) ScaleStatusPatch {
		if v != nil {
			return *v
		}
		var ret ScaleStatusPatch
		return ret
	}).(ScaleStatusPatchOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ScaleStatusPatchPtrOutput) TargetSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetSelector
	}).(pulumi.StringPtrOutput)
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired identities of pods in this set.
	Spec *StatefulSetSpec `pulumi:"spec"`
	// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
	Status *StatefulSetStatus `pulumi:"status"`
}

// StatefulSetTypeInput is an input type that accepts StatefulSetTypeArgs and StatefulSetTypeOutput values.
// You can construct a concrete instance of `StatefulSetTypeInput` via:
//
//	StatefulSetTypeArgs{...}
type StatefulSetTypeInput interface {
	pulumi.Input

	ToStatefulSetTypeOutput() StatefulSetTypeOutput
	ToStatefulSetTypeOutputWithContext(context.Context) StatefulSetTypeOutput
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the desired identities of pods in this set.
	Spec StatefulSetSpecPtrInput `pulumi:"spec"`
	// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
	Status StatefulSetStatusPtrInput `pulumi:"status"`
}

func (StatefulSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetType)(nil)).Elem()
}

func (i StatefulSetTypeArgs) ToStatefulSetTypeOutput() StatefulSetTypeOutput {
	return i.ToStatefulSetTypeOutputWithContext(context.Background())
}

func (i StatefulSetTypeArgs) ToStatefulSetTypeOutputWithContext(ctx context.Context) StatefulSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetTypeOutput)
}

// StatefulSetTypeArrayInput is an input type that accepts StatefulSetTypeArray and StatefulSetTypeArrayOutput values.
// You can construct a concrete instance of `StatefulSetTypeArrayInput` via:
//
//	StatefulSetTypeArray{ StatefulSetTypeArgs{...} }
type StatefulSetTypeArrayInput interface {
	pulumi.Input

	ToStatefulSetTypeArrayOutput() StatefulSetTypeArrayOutput
	ToStatefulSetTypeArrayOutputWithContext(context.Context) StatefulSetTypeArrayOutput
}

type StatefulSetTypeArray []StatefulSetTypeInput

func (StatefulSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetType)(nil)).Elem()
}

func (i StatefulSetTypeArray) ToStatefulSetTypeArrayOutput() StatefulSetTypeArrayOutput {
	return i.ToStatefulSetTypeArrayOutputWithContext(context.Background())
}

func (i StatefulSetTypeArray) ToStatefulSetTypeArrayOutputWithContext(ctx context.Context) StatefulSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetTypeArrayOutput)
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetTypeOutput struct{ *pulumi.OutputState }

func (StatefulSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetType)(nil)).Elem()
}

func (o StatefulSetTypeOutput) ToStatefulSetTypeOutput() StatefulSetTypeOutput {
	return o
}

func (o StatefulSetTypeOutput) ToStatefulSetTypeOutputWithContext(ctx context.Context) StatefulSetTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StatefulSetTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatefulSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o StatefulSetTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v StatefulSetType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired identities of pods in this set.
func (o StatefulSetTypeOutput) Spec() StatefulSetSpecPtrOutput {
	return o.ApplyT(func(v StatefulSetType) *StatefulSetSpec { return v.Spec }).(StatefulSetSpecPtrOutput)
}

// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
func (o StatefulSetTypeOutput) Status() StatefulSetStatusPtrOutput {
	return o.ApplyT(func(v StatefulSetType) *StatefulSetStatus { return v.Status }).(StatefulSetStatusPtrOutput)
}

type StatefulSetTypeArrayOutput struct{ *pulumi.OutputState }

func (StatefulSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetType)(nil)).Elem()
}

func (o StatefulSetTypeArrayOutput) ToStatefulSetTypeArrayOutput() StatefulSetTypeArrayOutput {
	return o
}

func (o StatefulSetTypeArrayOutput) ToStatefulSetTypeArrayOutputWithContext(ctx context.Context) StatefulSetTypeArrayOutput {
	return o
}

func (o StatefulSetTypeArrayOutput) Index(i pulumi.IntInput) StatefulSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatefulSetType {
		return vs[0].([]StatefulSetType)[vs[1].(int)]
	}).(StatefulSetTypeOutput)
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of statefulset condition.
	Type string `pulumi:"type"`
}

// StatefulSetConditionInput is an input type that accepts StatefulSetConditionArgs and StatefulSetConditionOutput values.
// You can construct a concrete instance of `StatefulSetConditionInput` via:
//
//	StatefulSetConditionArgs{...}
type StatefulSetConditionInput interface {
	pulumi.Input

	ToStatefulSetConditionOutput() StatefulSetConditionOutput
	ToStatefulSetConditionOutputWithContext(context.Context) StatefulSetConditionOutput
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetConditionArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of statefulset condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StatefulSetConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetCondition)(nil)).Elem()
}

func (i StatefulSetConditionArgs) ToStatefulSetConditionOutput() StatefulSetConditionOutput {
	return i.ToStatefulSetConditionOutputWithContext(context.Background())
}

func (i StatefulSetConditionArgs) ToStatefulSetConditionOutputWithContext(ctx context.Context) StatefulSetConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetConditionOutput)
}

// StatefulSetConditionArrayInput is an input type that accepts StatefulSetConditionArray and StatefulSetConditionArrayOutput values.
// You can construct a concrete instance of `StatefulSetConditionArrayInput` via:
//
//	StatefulSetConditionArray{ StatefulSetConditionArgs{...} }
type StatefulSetConditionArrayInput interface {
	pulumi.Input

	ToStatefulSetConditionArrayOutput() StatefulSetConditionArrayOutput
	ToStatefulSetConditionArrayOutputWithContext(context.Context) StatefulSetConditionArrayOutput
}

type StatefulSetConditionArray []StatefulSetConditionInput

func (StatefulSetConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetCondition)(nil)).Elem()
}

func (i StatefulSetConditionArray) ToStatefulSetConditionArrayOutput() StatefulSetConditionArrayOutput {
	return i.ToStatefulSetConditionArrayOutputWithContext(context.Background())
}

func (i StatefulSetConditionArray) ToStatefulSetConditionArrayOutputWithContext(ctx context.Context) StatefulSetConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetConditionArrayOutput)
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetConditionOutput struct{ *pulumi.OutputState }

func (StatefulSetConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetCondition)(nil)).Elem()
}

func (o StatefulSetConditionOutput) ToStatefulSetConditionOutput() StatefulSetConditionOutput {
	return o
}

func (o StatefulSetConditionOutput) ToStatefulSetConditionOutputWithContext(ctx context.Context) StatefulSetConditionOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o StatefulSetConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o StatefulSetConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o StatefulSetConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o StatefulSetConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v StatefulSetCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of statefulset condition.
func (o StatefulSetConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StatefulSetCondition) string { return v.Type }).(pulumi.StringOutput)
}

type StatefulSetConditionArrayOutput struct{ *pulumi.OutputState }

func (StatefulSetConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetCondition)(nil)).Elem()
}

func (o StatefulSetConditionArrayOutput) ToStatefulSetConditionArrayOutput() StatefulSetConditionArrayOutput {
	return o
}

func (o StatefulSetConditionArrayOutput) ToStatefulSetConditionArrayOutputWithContext(ctx context.Context) StatefulSetConditionArrayOutput {
	return o
}

func (o StatefulSetConditionArrayOutput) Index(i pulumi.IntInput) StatefulSetConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatefulSetCondition {
		return vs[0].([]StatefulSetCondition)[vs[1].(int)]
	}).(StatefulSetConditionOutput)
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetConditionPatch struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of statefulset condition.
	Type *string `pulumi:"type"`
}

// StatefulSetConditionPatchInput is an input type that accepts StatefulSetConditionPatchArgs and StatefulSetConditionPatchOutput values.
// You can construct a concrete instance of `StatefulSetConditionPatchInput` via:
//
//	StatefulSetConditionPatchArgs{...}
type StatefulSetConditionPatchInput interface {
	pulumi.Input

	ToStatefulSetConditionPatchOutput() StatefulSetConditionPatchOutput
	ToStatefulSetConditionPatchOutputWithContext(context.Context) StatefulSetConditionPatchOutput
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetConditionPatchArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of statefulset condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StatefulSetConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetConditionPatch)(nil)).Elem()
}

func (i StatefulSetConditionPatchArgs) ToStatefulSetConditionPatchOutput() StatefulSetConditionPatchOutput {
	return i.ToStatefulSetConditionPatchOutputWithContext(context.Background())
}

func (i StatefulSetConditionPatchArgs) ToStatefulSetConditionPatchOutputWithContext(ctx context.Context) StatefulSetConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetConditionPatchOutput)
}

// StatefulSetConditionPatchArrayInput is an input type that accepts StatefulSetConditionPatchArray and StatefulSetConditionPatchArrayOutput values.
// You can construct a concrete instance of `StatefulSetConditionPatchArrayInput` via:
//
//	StatefulSetConditionPatchArray{ StatefulSetConditionPatchArgs{...} }
type StatefulSetConditionPatchArrayInput interface {
	pulumi.Input

	ToStatefulSetConditionPatchArrayOutput() StatefulSetConditionPatchArrayOutput
	ToStatefulSetConditionPatchArrayOutputWithContext(context.Context) StatefulSetConditionPatchArrayOutput
}

type StatefulSetConditionPatchArray []StatefulSetConditionPatchInput

func (StatefulSetConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetConditionPatch)(nil)).Elem()
}

func (i StatefulSetConditionPatchArray) ToStatefulSetConditionPatchArrayOutput() StatefulSetConditionPatchArrayOutput {
	return i.ToStatefulSetConditionPatchArrayOutputWithContext(context.Background())
}

func (i StatefulSetConditionPatchArray) ToStatefulSetConditionPatchArrayOutputWithContext(ctx context.Context) StatefulSetConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetConditionPatchArrayOutput)
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type StatefulSetConditionPatchOutput struct{ *pulumi.OutputState }

func (StatefulSetConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetConditionPatch)(nil)).Elem()
}

func (o StatefulSetConditionPatchOutput) ToStatefulSetConditionPatchOutput() StatefulSetConditionPatchOutput {
	return o
}

func (o StatefulSetConditionPatchOutput) ToStatefulSetConditionPatchOutputWithContext(ctx context.Context) StatefulSetConditionPatchOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o StatefulSetConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o StatefulSetConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o StatefulSetConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o StatefulSetConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of statefulset condition.
func (o StatefulSetConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StatefulSetConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (StatefulSetConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatefulSetConditionPatch)(nil)).Elem()
}

func (o StatefulSetConditionPatchArrayOutput) ToStatefulSetConditionPatchArrayOutput() StatefulSetConditionPatchArrayOutput {
	return o
}

func (o StatefulSetConditionPatchArrayOutput) ToStatefulSetConditionPatchArrayOutputWithContext(ctx context.Context) StatefulSetConditionPatchArrayOutput {
	return o
}

func (o StatefulSetConditionPatchArrayOutput) Index(i pulumi.IntInput) StatefulSetConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatefulSetConditionPatch {
		return vs[0].([]StatefulSetConditionPatch)[vs[1].(int)]
	}).(StatefulSetConditionPatchOutput)
}

// StatefulSetList is a collection of StatefulSets.
type StatefulSetListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string           `pulumi:"apiVersion"`
	Items      []StatefulSetType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string          `pulumi:"kind"`
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// StatefulSetListTypeInput is an input type that accepts StatefulSetListTypeArgs and StatefulSetListTypeOutput values.
// You can construct a concrete instance of `StatefulSetListTypeInput` via:
//
//	StatefulSetListTypeArgs{...}
type StatefulSetListTypeInput interface {
	pulumi.Input

	ToStatefulSetListTypeOutput() StatefulSetListTypeOutput
	ToStatefulSetListTypeOutputWithContext(context.Context) StatefulSetListTypeOutput
}

// StatefulSetList is a collection of StatefulSets.
type StatefulSetListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Items      StatefulSetTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput   `pulumi:"kind"`
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (StatefulSetListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetListType)(nil)).Elem()
}

func (i StatefulSetListTypeArgs) ToStatefulSetListTypeOutput() StatefulSetListTypeOutput {
	return i.ToStatefulSetListTypeOutputWithContext(context.Background())
}

func (i StatefulSetListTypeArgs) ToStatefulSetListTypeOutputWithContext(ctx context.Context) StatefulSetListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetListTypeOutput)
}

// StatefulSetList is a collection of StatefulSets.
type StatefulSetListTypeOutput struct{ *pulumi.OutputState }

func (StatefulSetListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetListType)(nil)).Elem()
}

func (o StatefulSetListTypeOutput) ToStatefulSetListTypeOutput() StatefulSetListTypeOutput {
	return o
}

func (o StatefulSetListTypeOutput) ToStatefulSetListTypeOutputWithContext(ctx context.Context) StatefulSetListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StatefulSetListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o StatefulSetListTypeOutput) Items() StatefulSetTypeArrayOutput {
	return o.ApplyT(func(v StatefulSetListType) []StatefulSetType { return v.Items }).(StatefulSetTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatefulSetListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o StatefulSetListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v StatefulSetListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the desired identities of pods in this set.
	Spec *StatefulSetSpecPatch `pulumi:"spec"`
	// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
	Status *StatefulSetStatusPatch `pulumi:"status"`
}

// StatefulSetPatchTypeInput is an input type that accepts StatefulSetPatchTypeArgs and StatefulSetPatchTypeOutput values.
// You can construct a concrete instance of `StatefulSetPatchTypeInput` via:
//
//	StatefulSetPatchTypeArgs{...}
type StatefulSetPatchTypeInput interface {
	pulumi.Input

	ToStatefulSetPatchTypeOutput() StatefulSetPatchTypeOutput
	ToStatefulSetPatchTypeOutputWithContext(context.Context) StatefulSetPatchTypeOutput
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the desired identities of pods in this set.
	Spec StatefulSetSpecPatchPtrInput `pulumi:"spec"`
	// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
	Status StatefulSetStatusPatchPtrInput `pulumi:"status"`
}

func (StatefulSetPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetPatchType)(nil)).Elem()
}

func (i StatefulSetPatchTypeArgs) ToStatefulSetPatchTypeOutput() StatefulSetPatchTypeOutput {
	return i.ToStatefulSetPatchTypeOutputWithContext(context.Background())
}

func (i StatefulSetPatchTypeArgs) ToStatefulSetPatchTypeOutputWithContext(ctx context.Context) StatefulSetPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetPatchTypeOutput)
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//     The StatefulSet guarantees that a given network identity will always map to the same storage identity.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
//     and '.status.readyReplicas'.
//  2. The value of '.status.updateRevision' matches '.status.currentRevision'.
//
// If the StatefulSet has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type StatefulSetPatchTypeOutput struct{ *pulumi.OutputState }

func (StatefulSetPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetPatchType)(nil)).Elem()
}

func (o StatefulSetPatchTypeOutput) ToStatefulSetPatchTypeOutput() StatefulSetPatchTypeOutput {
	return o
}

func (o StatefulSetPatchTypeOutput) ToStatefulSetPatchTypeOutputWithContext(ctx context.Context) StatefulSetPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StatefulSetPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatefulSetPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o StatefulSetPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the desired identities of pods in this set.
func (o StatefulSetPatchTypeOutput) Spec() StatefulSetSpecPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetPatchType) *StatefulSetSpecPatch { return v.Spec }).(StatefulSetSpecPatchPtrOutput)
}

// Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
func (o StatefulSetPatchTypeOutput) Status() StatefulSetStatusPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetPatchType) *StatefulSetStatusPatch { return v.Status }).(StatefulSetStatusPatchPtrOutput)
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpec struct {
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy *string `pulumi:"podManagementPolicy"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName string `pulumi:"serviceName"`
	// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
	Template corev1.PodTemplateSpec `pulumi:"template"`
	// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
	UpdateStrategy *StatefulSetUpdateStrategy `pulumi:"updateStrategy"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates []corev1.PersistentVolumeClaimType `pulumi:"volumeClaimTemplates"`
}

// StatefulSetSpecInput is an input type that accepts StatefulSetSpecArgs and StatefulSetSpecOutput values.
// You can construct a concrete instance of `StatefulSetSpecInput` via:
//
//	StatefulSetSpecArgs{...}
type StatefulSetSpecInput interface {
	pulumi.Input

	ToStatefulSetSpecOutput() StatefulSetSpecOutput
	ToStatefulSetSpecOutputWithContext(context.Context) StatefulSetSpecOutput
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpecArgs struct {
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy pulumi.StringPtrInput `pulumi:"podManagementPolicy"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
	Template corev1.PodTemplateSpecInput `pulumi:"template"`
	// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
	UpdateStrategy StatefulSetUpdateStrategyPtrInput `pulumi:"updateStrategy"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates corev1.PersistentVolumeClaimTypeArrayInput `pulumi:"volumeClaimTemplates"`
}

func (StatefulSetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetSpec)(nil)).Elem()
}

func (i StatefulSetSpecArgs) ToStatefulSetSpecOutput() StatefulSetSpecOutput {
	return i.ToStatefulSetSpecOutputWithContext(context.Background())
}

func (i StatefulSetSpecArgs) ToStatefulSetSpecOutputWithContext(ctx context.Context) StatefulSetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecOutput)
}

func (i StatefulSetSpecArgs) ToStatefulSetSpecPtrOutput() StatefulSetSpecPtrOutput {
	return i.ToStatefulSetSpecPtrOutputWithContext(context.Background())
}

func (i StatefulSetSpecArgs) ToStatefulSetSpecPtrOutputWithContext(ctx context.Context) StatefulSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecOutput).ToStatefulSetSpecPtrOutputWithContext(ctx)
}

// StatefulSetSpecPtrInput is an input type that accepts StatefulSetSpecArgs, StatefulSetSpecPtr and StatefulSetSpecPtrOutput values.
// You can construct a concrete instance of `StatefulSetSpecPtrInput` via:
//
//	        StatefulSetSpecArgs{...}
//
//	or:
//
//	        nil
type StatefulSetSpecPtrInput interface {
	pulumi.Input

	ToStatefulSetSpecPtrOutput() StatefulSetSpecPtrOutput
	ToStatefulSetSpecPtrOutputWithContext(context.Context) StatefulSetSpecPtrOutput
}

type statefulSetSpecPtrType StatefulSetSpecArgs

func StatefulSetSpecPtr(v *StatefulSetSpecArgs) StatefulSetSpecPtrInput {
	return (*statefulSetSpecPtrType)(v)
}

func (*statefulSetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetSpec)(nil)).Elem()
}

func (i *statefulSetSpecPtrType) ToStatefulSetSpecPtrOutput() StatefulSetSpecPtrOutput {
	return i.ToStatefulSetSpecPtrOutputWithContext(context.Background())
}

func (i *statefulSetSpecPtrType) ToStatefulSetSpecPtrOutputWithContext(ctx context.Context) StatefulSetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecPtrOutput)
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpecOutput struct{ *pulumi.OutputState }

func (StatefulSetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetSpec)(nil)).Elem()
}

func (o StatefulSetSpecOutput) ToStatefulSetSpecOutput() StatefulSetSpecOutput {
	return o
}

func (o StatefulSetSpecOutput) ToStatefulSetSpecOutputWithContext(ctx context.Context) StatefulSetSpecOutput {
	return o
}

func (o StatefulSetSpecOutput) ToStatefulSetSpecPtrOutput() StatefulSetSpecPtrOutput {
	return o.ToStatefulSetSpecPtrOutputWithContext(context.Background())
}

func (o StatefulSetSpecOutput) ToStatefulSetSpecPtrOutputWithContext(ctx context.Context) StatefulSetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetSpec) *StatefulSetSpec {
		return &v
	}).(StatefulSetSpecPtrOutput)
}

// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
func (o StatefulSetSpecOutput) PodManagementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetSpec) *string { return v.PodManagementPolicy }).(pulumi.StringPtrOutput)
}

// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
func (o StatefulSetSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
func (o StatefulSetSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o StatefulSetSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v StatefulSetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
func (o StatefulSetSpecOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v StatefulSetSpec) string { return v.ServiceName }).(pulumi.StringOutput)
}

// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
func (o StatefulSetSpecOutput) Template() corev1.PodTemplateSpecOutput {
	return o.ApplyT(func(v StatefulSetSpec) corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecOutput)
}

// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
func (o StatefulSetSpecOutput) UpdateStrategy() StatefulSetUpdateStrategyPtrOutput {
	return o.ApplyT(func(v StatefulSetSpec) *StatefulSetUpdateStrategy { return v.UpdateStrategy }).(StatefulSetUpdateStrategyPtrOutput)
}

// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
func (o StatefulSetSpecOutput) VolumeClaimTemplates() corev1.PersistentVolumeClaimTypeArrayOutput {
	return o.ApplyT(func(v StatefulSetSpec) []corev1.PersistentVolumeClaimType { return v.VolumeClaimTemplates }).(corev1.PersistentVolumeClaimTypeArrayOutput)
}

type StatefulSetSpecPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetSpec)(nil)).Elem()
}

func (o StatefulSetSpecPtrOutput) ToStatefulSetSpecPtrOutput() StatefulSetSpecPtrOutput {
	return o
}

func (o StatefulSetSpecPtrOutput) ToStatefulSetSpecPtrOutputWithContext(ctx context.Context) StatefulSetSpecPtrOutput {
	return o
}

func (o StatefulSetSpecPtrOutput) Elem() StatefulSetSpecOutput {
	return o.ApplyT(func(v *StatefulSetSpec) StatefulSetSpec {
		if v != nil {
			return *v
		}
		var ret StatefulSetSpec
		return ret
	}).(StatefulSetSpecOutput)
}

// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
func (o StatefulSetSpecPtrOutput) PodManagementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *string {
		if v == nil {
			return nil
		}
		return v.PodManagementPolicy
	}).(pulumi.StringPtrOutput)
}

// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
func (o StatefulSetSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
func (o StatefulSetSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o StatefulSetSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
func (o StatefulSetSpecPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
func (o StatefulSetSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *corev1.PodTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(corev1.PodTemplateSpecPtrOutput)
}

// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
func (o StatefulSetSpecPtrOutput) UpdateStrategy() StatefulSetUpdateStrategyPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpec) *StatefulSetUpdateStrategy {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(StatefulSetUpdateStrategyPtrOutput)
}

// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
func (o StatefulSetSpecPtrOutput) VolumeClaimTemplates() corev1.PersistentVolumeClaimTypeArrayOutput {
	return o.ApplyT(func(v *StatefulSetSpec) []corev1.PersistentVolumeClaimType {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(corev1.PersistentVolumeClaimTypeArrayOutput)
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpecPatch struct {
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy *string `pulumi:"podManagementPolicy"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas *int `pulumi:"replicas"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelectorPatch `pulumi:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName *string `pulumi:"serviceName"`
	// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
	Template *corev1.PodTemplateSpecPatch `pulumi:"template"`
	// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
	UpdateStrategy *StatefulSetUpdateStrategyPatch `pulumi:"updateStrategy"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates []corev1.PersistentVolumeClaimPatchType `pulumi:"volumeClaimTemplates"`
}

// StatefulSetSpecPatchInput is an input type that accepts StatefulSetSpecPatchArgs and StatefulSetSpecPatchOutput values.
// You can construct a concrete instance of `StatefulSetSpecPatchInput` via:
//
//	StatefulSetSpecPatchArgs{...}
type StatefulSetSpecPatchInput interface {
	pulumi.Input

	ToStatefulSetSpecPatchOutput() StatefulSetSpecPatchOutput
	ToStatefulSetSpecPatchOutputWithContext(context.Context) StatefulSetSpecPatchOutput
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpecPatchArgs struct {
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy pulumi.StringPtrInput `pulumi:"podManagementPolicy"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPatchPtrInput `pulumi:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
	Template corev1.PodTemplateSpecPatchPtrInput `pulumi:"template"`
	// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
	UpdateStrategy StatefulSetUpdateStrategyPatchPtrInput `pulumi:"updateStrategy"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates corev1.PersistentVolumeClaimPatchTypeArrayInput `pulumi:"volumeClaimTemplates"`
}

func (StatefulSetSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetSpecPatch)(nil)).Elem()
}

func (i StatefulSetSpecPatchArgs) ToStatefulSetSpecPatchOutput() StatefulSetSpecPatchOutput {
	return i.ToStatefulSetSpecPatchOutputWithContext(context.Background())
}

func (i StatefulSetSpecPatchArgs) ToStatefulSetSpecPatchOutputWithContext(ctx context.Context) StatefulSetSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecPatchOutput)
}

func (i StatefulSetSpecPatchArgs) ToStatefulSetSpecPatchPtrOutput() StatefulSetSpecPatchPtrOutput {
	return i.ToStatefulSetSpecPatchPtrOutputWithContext(context.Background())
}

func (i StatefulSetSpecPatchArgs) ToStatefulSetSpecPatchPtrOutputWithContext(ctx context.Context) StatefulSetSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecPatchOutput).ToStatefulSetSpecPatchPtrOutputWithContext(ctx)
}

// StatefulSetSpecPatchPtrInput is an input type that accepts StatefulSetSpecPatchArgs, StatefulSetSpecPatchPtr and StatefulSetSpecPatchPtrOutput values.
// You can construct a concrete instance of `StatefulSetSpecPatchPtrInput` via:
//
//	        StatefulSetSpecPatchArgs{...}
//
//	or:
//
//	        nil
type StatefulSetSpecPatchPtrInput interface {
	pulumi.Input

	ToStatefulSetSpecPatchPtrOutput() StatefulSetSpecPatchPtrOutput
	ToStatefulSetSpecPatchPtrOutputWithContext(context.Context) StatefulSetSpecPatchPtrOutput
}

type statefulSetSpecPatchPtrType StatefulSetSpecPatchArgs

func StatefulSetSpecPatchPtr(v *StatefulSetSpecPatchArgs) StatefulSetSpecPatchPtrInput {
	return (*statefulSetSpecPatchPtrType)(v)
}

func (*statefulSetSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetSpecPatch)(nil)).Elem()
}

func (i *statefulSetSpecPatchPtrType) ToStatefulSetSpecPatchPtrOutput() StatefulSetSpecPatchPtrOutput {
	return i.ToStatefulSetSpecPatchPtrOutputWithContext(context.Background())
}

func (i *statefulSetSpecPatchPtrType) ToStatefulSetSpecPatchPtrOutputWithContext(ctx context.Context) StatefulSetSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetSpecPatchPtrOutput)
}

// A StatefulSetSpec is the specification of a StatefulSet.
type StatefulSetSpecPatchOutput struct{ *pulumi.OutputState }

func (StatefulSetSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetSpecPatch)(nil)).Elem()
}

func (o StatefulSetSpecPatchOutput) ToStatefulSetSpecPatchOutput() StatefulSetSpecPatchOutput {
	return o
}

func (o StatefulSetSpecPatchOutput) ToStatefulSetSpecPatchOutputWithContext(ctx context.Context) StatefulSetSpecPatchOutput {
	return o
}

func (o StatefulSetSpecPatchOutput) ToStatefulSetSpecPatchPtrOutput() StatefulSetSpecPatchPtrOutput {
	return o.ToStatefulSetSpecPatchPtrOutputWithContext(context.Background())
}

func (o StatefulSetSpecPatchOutput) ToStatefulSetSpecPatchPtrOutputWithContext(ctx context.Context) StatefulSetSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetSpecPatch) *StatefulSetSpecPatch {
		return &v
	}).(StatefulSetSpecPatchPtrOutput)
}

// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
func (o StatefulSetSpecPatchOutput) PodManagementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *string { return v.PodManagementPolicy }).(pulumi.StringPtrOutput)
}

// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
func (o StatefulSetSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
func (o StatefulSetSpecPatchOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o StatefulSetSpecPatchOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *metav1.LabelSelectorPatch { return v.Selector }).(metav1.LabelSelectorPatchPtrOutput)
}

// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
func (o StatefulSetSpecPatchOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
func (o StatefulSetSpecPatchOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *corev1.PodTemplateSpecPatch { return v.Template }).(corev1.PodTemplateSpecPatchPtrOutput)
}

// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
func (o StatefulSetSpecPatchOutput) UpdateStrategy() StatefulSetUpdateStrategyPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) *StatefulSetUpdateStrategyPatch { return v.UpdateStrategy }).(StatefulSetUpdateStrategyPatchPtrOutput)
}

// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
func (o StatefulSetSpecPatchOutput) VolumeClaimTemplates() corev1.PersistentVolumeClaimPatchTypeArrayOutput {
	return o.ApplyT(func(v StatefulSetSpecPatch) []corev1.PersistentVolumeClaimPatchType { return v.VolumeClaimTemplates }).(corev1.PersistentVolumeClaimPatchTypeArrayOutput)
}

type StatefulSetSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetSpecPatch)(nil)).Elem()
}

func (o StatefulSetSpecPatchPtrOutput) ToStatefulSetSpecPatchPtrOutput() StatefulSetSpecPatchPtrOutput {
	return o
}

func (o StatefulSetSpecPatchPtrOutput) ToStatefulSetSpecPatchPtrOutputWithContext(ctx context.Context) StatefulSetSpecPatchPtrOutput {
	return o
}

func (o StatefulSetSpecPatchPtrOutput) Elem() StatefulSetSpecPatchOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) StatefulSetSpecPatch {
		if v != nil {
			return *v
		}
		var ret StatefulSetSpecPatch
		return ret
	}).(StatefulSetSpecPatchOutput)
}

// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
func (o StatefulSetSpecPatchPtrOutput) PodManagementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodManagementPolicy
	}).(pulumi.StringPtrOutput)
}

// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
func (o StatefulSetSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
func (o StatefulSetSpecPatchPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o StatefulSetSpecPatchPtrOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
func (o StatefulSetSpecPatchPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
func (o StatefulSetSpecPatchPtrOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *corev1.PodTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Template
	}).(corev1.PodTemplateSpecPatchPtrOutput)
}

// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
func (o StatefulSetSpecPatchPtrOutput) UpdateStrategy() StatefulSetUpdateStrategyPatchPtrOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) *StatefulSetUpdateStrategyPatch {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(StatefulSetUpdateStrategyPatchPtrOutput)
}

// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
func (o StatefulSetSpecPatchPtrOutput) VolumeClaimTemplates() corev1.PersistentVolumeClaimPatchTypeArrayOutput {
	return o.ApplyT(func(v *StatefulSetSpecPatch) []corev1.PersistentVolumeClaimPatchType {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(corev1.PersistentVolumeClaimPatchTypeArrayOutput)
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatus struct {
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []StatefulSetCondition `pulumi:"conditions"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int `pulumi:"currentReplicas"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `pulumi:"currentRevision"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas int `pulumi:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `pulumi:"updateRevision"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// StatefulSetStatusInput is an input type that accepts StatefulSetStatusArgs and StatefulSetStatusOutput values.
// You can construct a concrete instance of `StatefulSetStatusInput` via:
//
//	StatefulSetStatusArgs{...}
type StatefulSetStatusInput interface {
	pulumi.Input

	ToStatefulSetStatusOutput() StatefulSetStatusOutput
	ToStatefulSetStatusOutputWithContext(context.Context) StatefulSetStatusOutput
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatusArgs struct {
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions StatefulSetConditionArrayInput `pulumi:"conditions"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas pulumi.IntPtrInput `pulumi:"currentReplicas"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision pulumi.StringPtrInput `pulumi:"currentRevision"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision pulumi.StringPtrInput `pulumi:"updateRevision"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (StatefulSetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetStatus)(nil)).Elem()
}

func (i StatefulSetStatusArgs) ToStatefulSetStatusOutput() StatefulSetStatusOutput {
	return i.ToStatefulSetStatusOutputWithContext(context.Background())
}

func (i StatefulSetStatusArgs) ToStatefulSetStatusOutputWithContext(ctx context.Context) StatefulSetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusOutput)
}

func (i StatefulSetStatusArgs) ToStatefulSetStatusPtrOutput() StatefulSetStatusPtrOutput {
	return i.ToStatefulSetStatusPtrOutputWithContext(context.Background())
}

func (i StatefulSetStatusArgs) ToStatefulSetStatusPtrOutputWithContext(ctx context.Context) StatefulSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusOutput).ToStatefulSetStatusPtrOutputWithContext(ctx)
}

// StatefulSetStatusPtrInput is an input type that accepts StatefulSetStatusArgs, StatefulSetStatusPtr and StatefulSetStatusPtrOutput values.
// You can construct a concrete instance of `StatefulSetStatusPtrInput` via:
//
//	        StatefulSetStatusArgs{...}
//
//	or:
//
//	        nil
type StatefulSetStatusPtrInput interface {
	pulumi.Input

	ToStatefulSetStatusPtrOutput() StatefulSetStatusPtrOutput
	ToStatefulSetStatusPtrOutputWithContext(context.Context) StatefulSetStatusPtrOutput
}

type statefulSetStatusPtrType StatefulSetStatusArgs

func StatefulSetStatusPtr(v *StatefulSetStatusArgs) StatefulSetStatusPtrInput {
	return (*statefulSetStatusPtrType)(v)
}

func (*statefulSetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetStatus)(nil)).Elem()
}

func (i *statefulSetStatusPtrType) ToStatefulSetStatusPtrOutput() StatefulSetStatusPtrOutput {
	return i.ToStatefulSetStatusPtrOutputWithContext(context.Background())
}

func (i *statefulSetStatusPtrType) ToStatefulSetStatusPtrOutputWithContext(ctx context.Context) StatefulSetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusPtrOutput)
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatusOutput struct{ *pulumi.OutputState }

func (StatefulSetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetStatus)(nil)).Elem()
}

func (o StatefulSetStatusOutput) ToStatefulSetStatusOutput() StatefulSetStatusOutput {
	return o
}

func (o StatefulSetStatusOutput) ToStatefulSetStatusOutputWithContext(ctx context.Context) StatefulSetStatusOutput {
	return o
}

func (o StatefulSetStatusOutput) ToStatefulSetStatusPtrOutput() StatefulSetStatusPtrOutput {
	return o.ToStatefulSetStatusPtrOutputWithContext(context.Background())
}

func (o StatefulSetStatusOutput) ToStatefulSetStatusPtrOutputWithContext(ctx context.Context) StatefulSetStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetStatus) *StatefulSetStatus {
		return &v
	}).(StatefulSetStatusPtrOutput)
}

// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o StatefulSetStatusOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a statefulset's current state.
func (o StatefulSetStatusOutput) Conditions() StatefulSetConditionArrayOutput {
	return o.ApplyT(func(v StatefulSetStatus) []StatefulSetCondition { return v.Conditions }).(StatefulSetConditionArrayOutput)
}

// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
func (o StatefulSetStatusOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *int { return v.CurrentReplicas }).(pulumi.IntPtrOutput)
}

// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
func (o StatefulSetStatusOutput) CurrentRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *string { return v.CurrentRevision }).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
func (o StatefulSetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
func (o StatefulSetStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// replicas is the number of Pods created by the StatefulSet controller.
func (o StatefulSetStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v StatefulSetStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
func (o StatefulSetStatusOutput) UpdateRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *string { return v.UpdateRevision }).(pulumi.StringPtrOutput)
}

// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
func (o StatefulSetStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type StatefulSetStatusPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetStatus)(nil)).Elem()
}

func (o StatefulSetStatusPtrOutput) ToStatefulSetStatusPtrOutput() StatefulSetStatusPtrOutput {
	return o
}

func (o StatefulSetStatusPtrOutput) ToStatefulSetStatusPtrOutputWithContext(ctx context.Context) StatefulSetStatusPtrOutput {
	return o
}

func (o StatefulSetStatusPtrOutput) Elem() StatefulSetStatusOutput {
	return o.ApplyT(func(v *StatefulSetStatus) StatefulSetStatus {
		if v != nil {
			return *v
		}
		var ret StatefulSetStatus
		return ret
	}).(StatefulSetStatusOutput)
}

// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o StatefulSetStatusPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.CollisionCount
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a statefulset's current state.
func (o StatefulSetStatusPtrOutput) Conditions() StatefulSetConditionArrayOutput {
	return o.ApplyT(func(v *StatefulSetStatus) []StatefulSetCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(StatefulSetConditionArrayOutput)
}

// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
func (o StatefulSetStatusPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
func (o StatefulSetStatusPtrOutput) CurrentRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *string {
		if v == nil {
			return nil
		}
		return v.CurrentRevision
	}).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
func (o StatefulSetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
func (o StatefulSetStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// replicas is the number of Pods created by the StatefulSet controller.
func (o StatefulSetStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
func (o StatefulSetStatusPtrOutput) UpdateRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *string {
		if v == nil {
			return nil
		}
		return v.UpdateRevision
	}).(pulumi.StringPtrOutput)
}

// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
func (o StatefulSetStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatusPatch struct {
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []StatefulSetConditionPatch `pulumi:"conditions"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int `pulumi:"currentReplicas"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `pulumi:"currentRevision"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas *int `pulumi:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `pulumi:"updateRevision"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// StatefulSetStatusPatchInput is an input type that accepts StatefulSetStatusPatchArgs and StatefulSetStatusPatchOutput values.
// You can construct a concrete instance of `StatefulSetStatusPatchInput` via:
//
//	StatefulSetStatusPatchArgs{...}
type StatefulSetStatusPatchInput interface {
	pulumi.Input

	ToStatefulSetStatusPatchOutput() StatefulSetStatusPatchOutput
	ToStatefulSetStatusPatchOutputWithContext(context.Context) StatefulSetStatusPatchOutput
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatusPatchArgs struct {
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions StatefulSetConditionPatchArrayInput `pulumi:"conditions"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas pulumi.IntPtrInput `pulumi:"currentReplicas"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision pulumi.StringPtrInput `pulumi:"currentRevision"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision pulumi.StringPtrInput `pulumi:"updateRevision"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (StatefulSetStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetStatusPatch)(nil)).Elem()
}

func (i StatefulSetStatusPatchArgs) ToStatefulSetStatusPatchOutput() StatefulSetStatusPatchOutput {
	return i.ToStatefulSetStatusPatchOutputWithContext(context.Background())
}

func (i StatefulSetStatusPatchArgs) ToStatefulSetStatusPatchOutputWithContext(ctx context.Context) StatefulSetStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusPatchOutput)
}

func (i StatefulSetStatusPatchArgs) ToStatefulSetStatusPatchPtrOutput() StatefulSetStatusPatchPtrOutput {
	return i.ToStatefulSetStatusPatchPtrOutputWithContext(context.Background())
}

func (i StatefulSetStatusPatchArgs) ToStatefulSetStatusPatchPtrOutputWithContext(ctx context.Context) StatefulSetStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusPatchOutput).ToStatefulSetStatusPatchPtrOutputWithContext(ctx)
}

// StatefulSetStatusPatchPtrInput is an input type that accepts StatefulSetStatusPatchArgs, StatefulSetStatusPatchPtr and StatefulSetStatusPatchPtrOutput values.
// You can construct a concrete instance of `StatefulSetStatusPatchPtrInput` via:
//
//	        StatefulSetStatusPatchArgs{...}
//
//	or:
//
//	        nil
type StatefulSetStatusPatchPtrInput interface {
	pulumi.Input

	ToStatefulSetStatusPatchPtrOutput() StatefulSetStatusPatchPtrOutput
	ToStatefulSetStatusPatchPtrOutputWithContext(context.Context) StatefulSetStatusPatchPtrOutput
}

type statefulSetStatusPatchPtrType StatefulSetStatusPatchArgs

func StatefulSetStatusPatchPtr(v *StatefulSetStatusPatchArgs) StatefulSetStatusPatchPtrInput {
	return (*statefulSetStatusPatchPtrType)(v)
}

func (*statefulSetStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetStatusPatch)(nil)).Elem()
}

func (i *statefulSetStatusPatchPtrType) ToStatefulSetStatusPatchPtrOutput() StatefulSetStatusPatchPtrOutput {
	return i.ToStatefulSetStatusPatchPtrOutputWithContext(context.Background())
}

func (i *statefulSetStatusPatchPtrType) ToStatefulSetStatusPatchPtrOutputWithContext(ctx context.Context) StatefulSetStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetStatusPatchPtrOutput)
}

// StatefulSetStatus represents the current state of a StatefulSet.
type StatefulSetStatusPatchOutput struct{ *pulumi.OutputState }

func (StatefulSetStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetStatusPatch)(nil)).Elem()
}

func (o StatefulSetStatusPatchOutput) ToStatefulSetStatusPatchOutput() StatefulSetStatusPatchOutput {
	return o
}

func (o StatefulSetStatusPatchOutput) ToStatefulSetStatusPatchOutputWithContext(ctx context.Context) StatefulSetStatusPatchOutput {
	return o
}

func (o StatefulSetStatusPatchOutput) ToStatefulSetStatusPatchPtrOutput() StatefulSetStatusPatchPtrOutput {
	return o.ToStatefulSetStatusPatchPtrOutputWithContext(context.Background())
}

func (o StatefulSetStatusPatchOutput) ToStatefulSetStatusPatchPtrOutputWithContext(ctx context.Context) StatefulSetStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetStatusPatch) *StatefulSetStatusPatch {
		return &v
	}).(StatefulSetStatusPatchPtrOutput)
}

// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o StatefulSetStatusPatchOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a statefulset's current state.
func (o StatefulSetStatusPatchOutput) Conditions() StatefulSetConditionPatchArrayOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) []StatefulSetConditionPatch { return v.Conditions }).(StatefulSetConditionPatchArrayOutput)
}

// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
func (o StatefulSetStatusPatchOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.CurrentReplicas }).(pulumi.IntPtrOutput)
}

// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
func (o StatefulSetStatusPatchOutput) CurrentRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *string { return v.CurrentRevision }).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
func (o StatefulSetStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
func (o StatefulSetStatusPatchOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// replicas is the number of Pods created by the StatefulSet controller.
func (o StatefulSetStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
func (o StatefulSetStatusPatchOutput) UpdateRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *string { return v.UpdateRevision }).(pulumi.StringPtrOutput)
}

// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
func (o StatefulSetStatusPatchOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatefulSetStatusPatch) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type StatefulSetStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetStatusPatch)(nil)).Elem()
}

func (o StatefulSetStatusPatchPtrOutput) ToStatefulSetStatusPatchPtrOutput() StatefulSetStatusPatchPtrOutput {
	return o
}

func (o StatefulSetStatusPatchPtrOutput) ToStatefulSetStatusPatchPtrOutputWithContext(ctx context.Context) StatefulSetStatusPatchPtrOutput {
	return o
}

func (o StatefulSetStatusPatchPtrOutput) Elem() StatefulSetStatusPatchOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) StatefulSetStatusPatch {
		if v != nil {
			return *v
		}
		var ret StatefulSetStatusPatch
		return ret
	}).(StatefulSetStatusPatchOutput)
}

// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
func (o StatefulSetStatusPatchPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.CollisionCount
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a statefulset's current state.
func (o StatefulSetStatusPatchPtrOutput) Conditions() StatefulSetConditionPatchArrayOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) []StatefulSetConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(StatefulSetConditionPatchArrayOutput)
}

// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
func (o StatefulSetStatusPatchPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
func (o StatefulSetStatusPatchPtrOutput) CurrentRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.CurrentRevision
	}).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
func (o StatefulSetStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
func (o StatefulSetStatusPatchPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// replicas is the number of Pods created by the StatefulSet controller.
func (o StatefulSetStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
func (o StatefulSetStatusPatchPtrOutput) UpdateRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.UpdateRevision
	}).(pulumi.StringPtrOutput)
}

// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
func (o StatefulSetStatusPatchPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatefulSetStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategy struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate *RollingUpdateStatefulSetStrategy `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy.
	Type *string `pulumi:"type"`
}

// StatefulSetUpdateStrategyInput is an input type that accepts StatefulSetUpdateStrategyArgs and StatefulSetUpdateStrategyOutput values.
// You can construct a concrete instance of `StatefulSetUpdateStrategyInput` via:
//
//	StatefulSetUpdateStrategyArgs{...}
type StatefulSetUpdateStrategyInput interface {
	pulumi.Input

	ToStatefulSetUpdateStrategyOutput() StatefulSetUpdateStrategyOutput
	ToStatefulSetUpdateStrategyOutputWithContext(context.Context) StatefulSetUpdateStrategyOutput
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategyArgs struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate RollingUpdateStatefulSetStrategyPtrInput `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StatefulSetUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetUpdateStrategy)(nil)).Elem()
}

func (i StatefulSetUpdateStrategyArgs) ToStatefulSetUpdateStrategyOutput() StatefulSetUpdateStrategyOutput {
	return i.ToStatefulSetUpdateStrategyOutputWithContext(context.Background())
}

func (i StatefulSetUpdateStrategyArgs) ToStatefulSetUpdateStrategyOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyOutput)
}

func (i StatefulSetUpdateStrategyArgs) ToStatefulSetUpdateStrategyPtrOutput() StatefulSetUpdateStrategyPtrOutput {
	return i.ToStatefulSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i StatefulSetUpdateStrategyArgs) ToStatefulSetUpdateStrategyPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyOutput).ToStatefulSetUpdateStrategyPtrOutputWithContext(ctx)
}

// StatefulSetUpdateStrategyPtrInput is an input type that accepts StatefulSetUpdateStrategyArgs, StatefulSetUpdateStrategyPtr and StatefulSetUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `StatefulSetUpdateStrategyPtrInput` via:
//
//	        StatefulSetUpdateStrategyArgs{...}
//
//	or:
//
//	        nil
type StatefulSetUpdateStrategyPtrInput interface {
	pulumi.Input

	ToStatefulSetUpdateStrategyPtrOutput() StatefulSetUpdateStrategyPtrOutput
	ToStatefulSetUpdateStrategyPtrOutputWithContext(context.Context) StatefulSetUpdateStrategyPtrOutput
}

type statefulSetUpdateStrategyPtrType StatefulSetUpdateStrategyArgs

func StatefulSetUpdateStrategyPtr(v *StatefulSetUpdateStrategyArgs) StatefulSetUpdateStrategyPtrInput {
	return (*statefulSetUpdateStrategyPtrType)(v)
}

func (*statefulSetUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetUpdateStrategy)(nil)).Elem()
}

func (i *statefulSetUpdateStrategyPtrType) ToStatefulSetUpdateStrategyPtrOutput() StatefulSetUpdateStrategyPtrOutput {
	return i.ToStatefulSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *statefulSetUpdateStrategyPtrType) ToStatefulSetUpdateStrategyPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyPtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategyOutput struct{ *pulumi.OutputState }

func (StatefulSetUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetUpdateStrategy)(nil)).Elem()
}

func (o StatefulSetUpdateStrategyOutput) ToStatefulSetUpdateStrategyOutput() StatefulSetUpdateStrategyOutput {
	return o
}

func (o StatefulSetUpdateStrategyOutput) ToStatefulSetUpdateStrategyOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyOutput {
	return o
}

func (o StatefulSetUpdateStrategyOutput) ToStatefulSetUpdateStrategyPtrOutput() StatefulSetUpdateStrategyPtrOutput {
	return o.ToStatefulSetUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o StatefulSetUpdateStrategyOutput) ToStatefulSetUpdateStrategyPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetUpdateStrategy) *StatefulSetUpdateStrategy {
		return &v
	}).(StatefulSetUpdateStrategyPtrOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o StatefulSetUpdateStrategyOutput) RollingUpdate() RollingUpdateStatefulSetStrategyPtrOutput {
	return o.ApplyT(func(v StatefulSetUpdateStrategy) *RollingUpdateStatefulSetStrategy { return v.RollingUpdate }).(RollingUpdateStatefulSetStrategyPtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy.
func (o StatefulSetUpdateStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetUpdateStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StatefulSetUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetUpdateStrategy)(nil)).Elem()
}

func (o StatefulSetUpdateStrategyPtrOutput) ToStatefulSetUpdateStrategyPtrOutput() StatefulSetUpdateStrategyPtrOutput {
	return o
}

func (o StatefulSetUpdateStrategyPtrOutput) ToStatefulSetUpdateStrategyPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPtrOutput {
	return o
}

func (o StatefulSetUpdateStrategyPtrOutput) Elem() StatefulSetUpdateStrategyOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategy) StatefulSetUpdateStrategy {
		if v != nil {
			return *v
		}
		var ret StatefulSetUpdateStrategy
		return ret
	}).(StatefulSetUpdateStrategyOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o StatefulSetUpdateStrategyPtrOutput) RollingUpdate() RollingUpdateStatefulSetStrategyPtrOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategy) *RollingUpdateStatefulSetStrategy {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(RollingUpdateStatefulSetStrategyPtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy.
func (o StatefulSetUpdateStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategyPatch struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate *RollingUpdateStatefulSetStrategyPatch `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy.
	Type *string `pulumi:"type"`
}

// StatefulSetUpdateStrategyPatchInput is an input type that accepts StatefulSetUpdateStrategyPatchArgs and StatefulSetUpdateStrategyPatchOutput values.
// You can construct a concrete instance of `StatefulSetUpdateStrategyPatchInput` via:
//
//	StatefulSetUpdateStrategyPatchArgs{...}
type StatefulSetUpdateStrategyPatchInput interface {
	pulumi.Input

	ToStatefulSetUpdateStrategyPatchOutput() StatefulSetUpdateStrategyPatchOutput
	ToStatefulSetUpdateStrategyPatchOutputWithContext(context.Context) StatefulSetUpdateStrategyPatchOutput
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategyPatchArgs struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate RollingUpdateStatefulSetStrategyPatchPtrInput `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StatefulSetUpdateStrategyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetUpdateStrategyPatch)(nil)).Elem()
}

func (i StatefulSetUpdateStrategyPatchArgs) ToStatefulSetUpdateStrategyPatchOutput() StatefulSetUpdateStrategyPatchOutput {
	return i.ToStatefulSetUpdateStrategyPatchOutputWithContext(context.Background())
}

func (i StatefulSetUpdateStrategyPatchArgs) ToStatefulSetUpdateStrategyPatchOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyPatchOutput)
}

func (i StatefulSetUpdateStrategyPatchArgs) ToStatefulSetUpdateStrategyPatchPtrOutput() StatefulSetUpdateStrategyPatchPtrOutput {
	return i.ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (i StatefulSetUpdateStrategyPatchArgs) ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyPatchOutput).ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(ctx)
}

// StatefulSetUpdateStrategyPatchPtrInput is an input type that accepts StatefulSetUpdateStrategyPatchArgs, StatefulSetUpdateStrategyPatchPtr and StatefulSetUpdateStrategyPatchPtrOutput values.
// You can construct a concrete instance of `StatefulSetUpdateStrategyPatchPtrInput` via:
//
//	        StatefulSetUpdateStrategyPatchArgs{...}
//
//	or:
//
//	        nil
type StatefulSetUpdateStrategyPatchPtrInput interface {
	pulumi.Input

	ToStatefulSetUpdateStrategyPatchPtrOutput() StatefulSetUpdateStrategyPatchPtrOutput
	ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(context.Context) StatefulSetUpdateStrategyPatchPtrOutput
}

type statefulSetUpdateStrategyPatchPtrType StatefulSetUpdateStrategyPatchArgs

func StatefulSetUpdateStrategyPatchPtr(v *StatefulSetUpdateStrategyPatchArgs) StatefulSetUpdateStrategyPatchPtrInput {
	return (*statefulSetUpdateStrategyPatchPtrType)(v)
}

func (*statefulSetUpdateStrategyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetUpdateStrategyPatch)(nil)).Elem()
}

func (i *statefulSetUpdateStrategyPatchPtrType) ToStatefulSetUpdateStrategyPatchPtrOutput() StatefulSetUpdateStrategyPatchPtrOutput {
	return i.ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (i *statefulSetUpdateStrategyPatchPtrType) ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulSetUpdateStrategyPatchPtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type StatefulSetUpdateStrategyPatchOutput struct{ *pulumi.OutputState }

func (StatefulSetUpdateStrategyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulSetUpdateStrategyPatch)(nil)).Elem()
}

func (o StatefulSetUpdateStrategyPatchOutput) ToStatefulSetUpdateStrategyPatchOutput() StatefulSetUpdateStrategyPatchOutput {
	return o
}

func (o StatefulSetUpdateStrategyPatchOutput) ToStatefulSetUpdateStrategyPatchOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchOutput {
	return o
}

func (o StatefulSetUpdateStrategyPatchOutput) ToStatefulSetUpdateStrategyPatchPtrOutput() StatefulSetUpdateStrategyPatchPtrOutput {
	return o.ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (o StatefulSetUpdateStrategyPatchOutput) ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulSetUpdateStrategyPatch) *StatefulSetUpdateStrategyPatch {
		return &v
	}).(StatefulSetUpdateStrategyPatchPtrOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o StatefulSetUpdateStrategyPatchOutput) RollingUpdate() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o.ApplyT(func(v StatefulSetUpdateStrategyPatch) *RollingUpdateStatefulSetStrategyPatch { return v.RollingUpdate }).(RollingUpdateStatefulSetStrategyPatchPtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy.
func (o StatefulSetUpdateStrategyPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatefulSetUpdateStrategyPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StatefulSetUpdateStrategyPatchPtrOutput struct{ *pulumi.OutputState }

func (StatefulSetUpdateStrategyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulSetUpdateStrategyPatch)(nil)).Elem()
}

func (o StatefulSetUpdateStrategyPatchPtrOutput) ToStatefulSetUpdateStrategyPatchPtrOutput() StatefulSetUpdateStrategyPatchPtrOutput {
	return o
}

func (o StatefulSetUpdateStrategyPatchPtrOutput) ToStatefulSetUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) StatefulSetUpdateStrategyPatchPtrOutput {
	return o
}

func (o StatefulSetUpdateStrategyPatchPtrOutput) Elem() StatefulSetUpdateStrategyPatchOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategyPatch) StatefulSetUpdateStrategyPatch {
		if v != nil {
			return *v
		}
		var ret StatefulSetUpdateStrategyPatch
		return ret
	}).(StatefulSetUpdateStrategyPatchOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o StatefulSetUpdateStrategyPatchPtrOutput) RollingUpdate() RollingUpdateStatefulSetStrategyPatchPtrOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategyPatch) *RollingUpdateStatefulSetStrategyPatch {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(RollingUpdateStatefulSetStrategyPatchPtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy.
func (o StatefulSetUpdateStrategyPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatefulSetUpdateStrategyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRevisionTypeInput)(nil)).Elem(), ControllerRevisionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRevisionTypeArrayInput)(nil)).Elem(), ControllerRevisionTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRevisionListTypeInput)(nil)).Elem(), ControllerRevisionListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRevisionPatchTypeInput)(nil)).Elem(), ControllerRevisionPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentTypeInput)(nil)).Elem(), DeploymentTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentTypeArrayInput)(nil)).Elem(), DeploymentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConditionInput)(nil)).Elem(), DeploymentConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConditionArrayInput)(nil)).Elem(), DeploymentConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConditionPatchInput)(nil)).Elem(), DeploymentConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConditionPatchArrayInput)(nil)).Elem(), DeploymentConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentListTypeInput)(nil)).Elem(), DeploymentListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPatchTypeInput)(nil)).Elem(), DeploymentPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentRollbackInput)(nil)).Elem(), DeploymentRollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentRollbackPatchInput)(nil)).Elem(), DeploymentRollbackPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSpecInput)(nil)).Elem(), DeploymentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSpecPtrInput)(nil)).Elem(), DeploymentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSpecPatchInput)(nil)).Elem(), DeploymentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSpecPatchPtrInput)(nil)).Elem(), DeploymentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStatusInput)(nil)).Elem(), DeploymentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStatusPtrInput)(nil)).Elem(), DeploymentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStatusPatchInput)(nil)).Elem(), DeploymentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStatusPatchPtrInput)(nil)).Elem(), DeploymentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyInput)(nil)).Elem(), DeploymentStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyPtrInput)(nil)).Elem(), DeploymentStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyPatchInput)(nil)).Elem(), DeploymentStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyPatchPtrInput)(nil)).Elem(), DeploymentStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackConfigInput)(nil)).Elem(), RollbackConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackConfigPtrInput)(nil)).Elem(), RollbackConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackConfigPatchInput)(nil)).Elem(), RollbackConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackConfigPatchPtrInput)(nil)).Elem(), RollbackConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateDeploymentInput)(nil)).Elem(), RollingUpdateDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateDeploymentPtrInput)(nil)).Elem(), RollingUpdateDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateDeploymentPatchInput)(nil)).Elem(), RollingUpdateDeploymentPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateDeploymentPatchPtrInput)(nil)).Elem(), RollingUpdateDeploymentPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateStatefulSetStrategyInput)(nil)).Elem(), RollingUpdateStatefulSetStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateStatefulSetStrategyPtrInput)(nil)).Elem(), RollingUpdateStatefulSetStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateStatefulSetStrategyPatchInput)(nil)).Elem(), RollingUpdateStatefulSetStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollingUpdateStatefulSetStrategyPatchPtrInput)(nil)).Elem(), RollingUpdateStatefulSetStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleInput)(nil)).Elem(), ScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalePatchInput)(nil)).Elem(), ScalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPtrInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchPtrInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPtrInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchPtrInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetTypeInput)(nil)).Elem(), StatefulSetTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetTypeArrayInput)(nil)).Elem(), StatefulSetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetConditionInput)(nil)).Elem(), StatefulSetConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetConditionArrayInput)(nil)).Elem(), StatefulSetConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetConditionPatchInput)(nil)).Elem(), StatefulSetConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetConditionPatchArrayInput)(nil)).Elem(), StatefulSetConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetListTypeInput)(nil)).Elem(), StatefulSetListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetPatchTypeInput)(nil)).Elem(), StatefulSetPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetSpecInput)(nil)).Elem(), StatefulSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetSpecPtrInput)(nil)).Elem(), StatefulSetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetSpecPatchInput)(nil)).Elem(), StatefulSetSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetSpecPatchPtrInput)(nil)).Elem(), StatefulSetSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetStatusInput)(nil)).Elem(), StatefulSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetStatusPtrInput)(nil)).Elem(), StatefulSetStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetStatusPatchInput)(nil)).Elem(), StatefulSetStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetStatusPatchPtrInput)(nil)).Elem(), StatefulSetStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetUpdateStrategyInput)(nil)).Elem(), StatefulSetUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetUpdateStrategyPtrInput)(nil)).Elem(), StatefulSetUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetUpdateStrategyPatchInput)(nil)).Elem(), StatefulSetUpdateStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulSetUpdateStrategyPatchPtrInput)(nil)).Elem(), StatefulSetUpdateStrategyPatchArgs{})
	pulumi.RegisterOutputType(ControllerRevisionTypeOutput{})
	pulumi.RegisterOutputType(ControllerRevisionTypeArrayOutput{})
	pulumi.RegisterOutputType(ControllerRevisionListTypeOutput{})
	pulumi.RegisterOutputType(ControllerRevisionPatchTypeOutput{})
	pulumi.RegisterOutputType(DeploymentTypeOutput{})
	pulumi.RegisterOutputType(DeploymentTypeArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConditionOutput{})
	pulumi.RegisterOutputType(DeploymentConditionArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConditionPatchOutput{})
	pulumi.RegisterOutputType(DeploymentConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(DeploymentListTypeOutput{})
	pulumi.RegisterOutputType(DeploymentPatchTypeOutput{})
	pulumi.RegisterOutputType(DeploymentRollbackOutput{})
	pulumi.RegisterOutputType(DeploymentRollbackPatchOutput{})
	pulumi.RegisterOutputType(DeploymentSpecOutput{})
	pulumi.RegisterOutputType(DeploymentSpecPtrOutput{})
	pulumi.RegisterOutputType(DeploymentSpecPatchOutput{})
	pulumi.RegisterOutputType(DeploymentSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStatusOutput{})
	pulumi.RegisterOutputType(DeploymentStatusPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStatusPatchOutput{})
	pulumi.RegisterOutputType(DeploymentStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyPatchOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyPatchPtrOutput{})
	pulumi.RegisterOutputType(RollbackConfigOutput{})
	pulumi.RegisterOutputType(RollbackConfigPtrOutput{})
	pulumi.RegisterOutputType(RollbackConfigPatchOutput{})
	pulumi.RegisterOutputType(RollbackConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentPatchOutput{})
	pulumi.RegisterOutputType(RollingUpdateDeploymentPatchPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateStatefulSetStrategyOutput{})
	pulumi.RegisterOutputType(RollingUpdateStatefulSetStrategyPtrOutput{})
	pulumi.RegisterOutputType(RollingUpdateStatefulSetStrategyPatchOutput{})
	pulumi.RegisterOutputType(RollingUpdateStatefulSetStrategyPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScalePatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecOutput{})
	pulumi.RegisterOutputType(ScaleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusOutput{})
	pulumi.RegisterOutputType(ScaleStatusPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetTypeOutput{})
	pulumi.RegisterOutputType(StatefulSetTypeArrayOutput{})
	pulumi.RegisterOutputType(StatefulSetConditionOutput{})
	pulumi.RegisterOutputType(StatefulSetConditionArrayOutput{})
	pulumi.RegisterOutputType(StatefulSetConditionPatchOutput{})
	pulumi.RegisterOutputType(StatefulSetConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(StatefulSetListTypeOutput{})
	pulumi.RegisterOutputType(StatefulSetPatchTypeOutput{})
	pulumi.RegisterOutputType(StatefulSetSpecOutput{})
	pulumi.RegisterOutputType(StatefulSetSpecPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetSpecPatchOutput{})
	pulumi.RegisterOutputType(StatefulSetSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetStatusOutput{})
	pulumi.RegisterOutputType(StatefulSetStatusPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetStatusPatchOutput{})
	pulumi.RegisterOutputType(StatefulSetStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetUpdateStrategyOutput{})
	pulumi.RegisterOutputType(StatefulSetUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(StatefulSetUpdateStrategyPatchOutput{})
	pulumi.RegisterOutputType(StatefulSetUpdateStrategyPatchPtrOutput{})
}
