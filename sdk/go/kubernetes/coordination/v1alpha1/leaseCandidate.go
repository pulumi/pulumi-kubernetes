// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidate struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecOutput `pulumi:"spec"`
}

// NewLeaseCandidate registers a new resource with the given unique name, arguments, and options.
func NewLeaseCandidate(ctx *pulumi.Context,
	name string, args *LeaseCandidateArgs, opts ...pulumi.ResourceOption) (*LeaseCandidate, error) {
	if args == nil {
		args = &LeaseCandidateArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("coordination.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("LeaseCandidate")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LeaseCandidate
	err := ctx.RegisterResource("kubernetes:coordination.k8s.io/v1alpha1:LeaseCandidate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLeaseCandidate gets an existing LeaseCandidate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLeaseCandidate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LeaseCandidateState, opts ...pulumi.ResourceOption) (*LeaseCandidate, error) {
	var resource LeaseCandidate
	err := ctx.ReadResource("kubernetes:coordination.k8s.io/v1alpha1:LeaseCandidate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LeaseCandidate resources.
type leaseCandidateState struct {
}

type LeaseCandidateState struct {
}

func (LeaseCandidateState) ElementType() reflect.Type {
	return reflect.TypeOf((*leaseCandidateState)(nil)).Elem()
}

type leaseCandidateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseCandidateSpec `pulumi:"spec"`
}

// The set of arguments for constructing a LeaseCandidate resource.
type LeaseCandidateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecPtrInput
}

func (LeaseCandidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*leaseCandidateArgs)(nil)).Elem()
}

type LeaseCandidateInput interface {
	pulumi.Input

	ToLeaseCandidateOutput() LeaseCandidateOutput
	ToLeaseCandidateOutputWithContext(ctx context.Context) LeaseCandidateOutput
}

func (*LeaseCandidate) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidate)(nil)).Elem()
}

func (i *LeaseCandidate) ToLeaseCandidateOutput() LeaseCandidateOutput {
	return i.ToLeaseCandidateOutputWithContext(context.Background())
}

func (i *LeaseCandidate) ToLeaseCandidateOutputWithContext(ctx context.Context) LeaseCandidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateOutput)
}

// LeaseCandidateArrayInput is an input type that accepts LeaseCandidateArray and LeaseCandidateArrayOutput values.
// You can construct a concrete instance of `LeaseCandidateArrayInput` via:
//
//	LeaseCandidateArray{ LeaseCandidateArgs{...} }
type LeaseCandidateArrayInput interface {
	pulumi.Input

	ToLeaseCandidateArrayOutput() LeaseCandidateArrayOutput
	ToLeaseCandidateArrayOutputWithContext(context.Context) LeaseCandidateArrayOutput
}

type LeaseCandidateArray []LeaseCandidateInput

func (LeaseCandidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LeaseCandidate)(nil)).Elem()
}

func (i LeaseCandidateArray) ToLeaseCandidateArrayOutput() LeaseCandidateArrayOutput {
	return i.ToLeaseCandidateArrayOutputWithContext(context.Background())
}

func (i LeaseCandidateArray) ToLeaseCandidateArrayOutputWithContext(ctx context.Context) LeaseCandidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateArrayOutput)
}

// LeaseCandidateMapInput is an input type that accepts LeaseCandidateMap and LeaseCandidateMapOutput values.
// You can construct a concrete instance of `LeaseCandidateMapInput` via:
//
//	LeaseCandidateMap{ "key": LeaseCandidateArgs{...} }
type LeaseCandidateMapInput interface {
	pulumi.Input

	ToLeaseCandidateMapOutput() LeaseCandidateMapOutput
	ToLeaseCandidateMapOutputWithContext(context.Context) LeaseCandidateMapOutput
}

type LeaseCandidateMap map[string]LeaseCandidateInput

func (LeaseCandidateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LeaseCandidate)(nil)).Elem()
}

func (i LeaseCandidateMap) ToLeaseCandidateMapOutput() LeaseCandidateMapOutput {
	return i.ToLeaseCandidateMapOutputWithContext(context.Background())
}

func (i LeaseCandidateMap) ToLeaseCandidateMapOutputWithContext(ctx context.Context) LeaseCandidateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateMapOutput)
}

type LeaseCandidateOutput struct{ *pulumi.OutputState }

func (LeaseCandidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidate)(nil)).Elem()
}

func (o LeaseCandidateOutput) ToLeaseCandidateOutput() LeaseCandidateOutput {
	return o
}

func (o LeaseCandidateOutput) ToLeaseCandidateOutputWithContext(ctx context.Context) LeaseCandidateOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *LeaseCandidate) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LeaseCandidate) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *LeaseCandidate) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseCandidateOutput) Spec() LeaseCandidateSpecOutput {
	return o.ApplyT(func(v *LeaseCandidate) LeaseCandidateSpecOutput { return v.Spec }).(LeaseCandidateSpecOutput)
}

type LeaseCandidateArrayOutput struct{ *pulumi.OutputState }

func (LeaseCandidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LeaseCandidate)(nil)).Elem()
}

func (o LeaseCandidateArrayOutput) ToLeaseCandidateArrayOutput() LeaseCandidateArrayOutput {
	return o
}

func (o LeaseCandidateArrayOutput) ToLeaseCandidateArrayOutputWithContext(ctx context.Context) LeaseCandidateArrayOutput {
	return o
}

func (o LeaseCandidateArrayOutput) Index(i pulumi.IntInput) LeaseCandidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LeaseCandidate {
		return vs[0].([]*LeaseCandidate)[vs[1].(int)]
	}).(LeaseCandidateOutput)
}

type LeaseCandidateMapOutput struct{ *pulumi.OutputState }

func (LeaseCandidateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LeaseCandidate)(nil)).Elem()
}

func (o LeaseCandidateMapOutput) ToLeaseCandidateMapOutput() LeaseCandidateMapOutput {
	return o
}

func (o LeaseCandidateMapOutput) ToLeaseCandidateMapOutputWithContext(ctx context.Context) LeaseCandidateMapOutput {
	return o
}

func (o LeaseCandidateMapOutput) MapIndex(k pulumi.StringInput) LeaseCandidateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LeaseCandidate {
		return vs[0].(map[string]*LeaseCandidate)[vs[1].(string)]
	}).(LeaseCandidateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateInput)(nil)).Elem(), &LeaseCandidate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateArrayInput)(nil)).Elem(), LeaseCandidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateMapInput)(nil)).Elem(), LeaseCandidateMap{})
	pulumi.RegisterOutputType(LeaseCandidateOutput{})
	pulumi.RegisterOutputType(LeaseCandidateArrayOutput{})
	pulumi.RegisterOutputType(LeaseCandidateMapOutput{})
}
