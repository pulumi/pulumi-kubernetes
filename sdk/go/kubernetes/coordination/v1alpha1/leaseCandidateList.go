// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items LeaseCandidateTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewLeaseCandidateList registers a new resource with the given unique name, arguments, and options.
func NewLeaseCandidateList(ctx *pulumi.Context,
	name string, args *LeaseCandidateListArgs, opts ...pulumi.ResourceOption) (*LeaseCandidateList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("coordination.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("LeaseCandidateList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LeaseCandidateList
	err := ctx.RegisterResource("kubernetes:coordination.k8s.io/v1alpha1:LeaseCandidateList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLeaseCandidateList gets an existing LeaseCandidateList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLeaseCandidateList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LeaseCandidateListState, opts ...pulumi.ResourceOption) (*LeaseCandidateList, error) {
	var resource LeaseCandidateList
	err := ctx.ReadResource("kubernetes:coordination.k8s.io/v1alpha1:LeaseCandidateList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LeaseCandidateList resources.
type leaseCandidateListState struct {
}

type LeaseCandidateListState struct {
}

func (LeaseCandidateListState) ElementType() reflect.Type {
	return reflect.TypeOf((*leaseCandidateListState)(nil)).Elem()
}

type leaseCandidateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items []LeaseCandidateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a LeaseCandidateList resource.
type LeaseCandidateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// items is a list of schema objects.
	Items LeaseCandidateTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput
}

func (LeaseCandidateListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*leaseCandidateListArgs)(nil)).Elem()
}

type LeaseCandidateListInput interface {
	pulumi.Input

	ToLeaseCandidateListOutput() LeaseCandidateListOutput
	ToLeaseCandidateListOutputWithContext(ctx context.Context) LeaseCandidateListOutput
}

func (*LeaseCandidateList) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateList)(nil)).Elem()
}

func (i *LeaseCandidateList) ToLeaseCandidateListOutput() LeaseCandidateListOutput {
	return i.ToLeaseCandidateListOutputWithContext(context.Background())
}

func (i *LeaseCandidateList) ToLeaseCandidateListOutputWithContext(ctx context.Context) LeaseCandidateListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateListOutput)
}

// LeaseCandidateListArrayInput is an input type that accepts LeaseCandidateListArray and LeaseCandidateListArrayOutput values.
// You can construct a concrete instance of `LeaseCandidateListArrayInput` via:
//
//	LeaseCandidateListArray{ LeaseCandidateListArgs{...} }
type LeaseCandidateListArrayInput interface {
	pulumi.Input

	ToLeaseCandidateListArrayOutput() LeaseCandidateListArrayOutput
	ToLeaseCandidateListArrayOutputWithContext(context.Context) LeaseCandidateListArrayOutput
}

type LeaseCandidateListArray []LeaseCandidateListInput

func (LeaseCandidateListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LeaseCandidateList)(nil)).Elem()
}

func (i LeaseCandidateListArray) ToLeaseCandidateListArrayOutput() LeaseCandidateListArrayOutput {
	return i.ToLeaseCandidateListArrayOutputWithContext(context.Background())
}

func (i LeaseCandidateListArray) ToLeaseCandidateListArrayOutputWithContext(ctx context.Context) LeaseCandidateListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateListArrayOutput)
}

// LeaseCandidateListMapInput is an input type that accepts LeaseCandidateListMap and LeaseCandidateListMapOutput values.
// You can construct a concrete instance of `LeaseCandidateListMapInput` via:
//
//	LeaseCandidateListMap{ "key": LeaseCandidateListArgs{...} }
type LeaseCandidateListMapInput interface {
	pulumi.Input

	ToLeaseCandidateListMapOutput() LeaseCandidateListMapOutput
	ToLeaseCandidateListMapOutputWithContext(context.Context) LeaseCandidateListMapOutput
}

type LeaseCandidateListMap map[string]LeaseCandidateListInput

func (LeaseCandidateListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LeaseCandidateList)(nil)).Elem()
}

func (i LeaseCandidateListMap) ToLeaseCandidateListMapOutput() LeaseCandidateListMapOutput {
	return i.ToLeaseCandidateListMapOutputWithContext(context.Background())
}

func (i LeaseCandidateListMap) ToLeaseCandidateListMapOutputWithContext(ctx context.Context) LeaseCandidateListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateListMapOutput)
}

type LeaseCandidateListOutput struct{ *pulumi.OutputState }

func (LeaseCandidateListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateList)(nil)).Elem()
}

func (o LeaseCandidateListOutput) ToLeaseCandidateListOutput() LeaseCandidateListOutput {
	return o
}

func (o LeaseCandidateListOutput) ToLeaseCandidateListOutputWithContext(ctx context.Context) LeaseCandidateListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *LeaseCandidateList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// items is a list of schema objects.
func (o LeaseCandidateListOutput) Items() LeaseCandidateTypeArrayOutput {
	return o.ApplyT(func(v *LeaseCandidateList) LeaseCandidateTypeArrayOutput { return v.Items }).(LeaseCandidateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LeaseCandidateList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *LeaseCandidateList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type LeaseCandidateListArrayOutput struct{ *pulumi.OutputState }

func (LeaseCandidateListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LeaseCandidateList)(nil)).Elem()
}

func (o LeaseCandidateListArrayOutput) ToLeaseCandidateListArrayOutput() LeaseCandidateListArrayOutput {
	return o
}

func (o LeaseCandidateListArrayOutput) ToLeaseCandidateListArrayOutputWithContext(ctx context.Context) LeaseCandidateListArrayOutput {
	return o
}

func (o LeaseCandidateListArrayOutput) Index(i pulumi.IntInput) LeaseCandidateListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LeaseCandidateList {
		return vs[0].([]*LeaseCandidateList)[vs[1].(int)]
	}).(LeaseCandidateListOutput)
}

type LeaseCandidateListMapOutput struct{ *pulumi.OutputState }

func (LeaseCandidateListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LeaseCandidateList)(nil)).Elem()
}

func (o LeaseCandidateListMapOutput) ToLeaseCandidateListMapOutput() LeaseCandidateListMapOutput {
	return o
}

func (o LeaseCandidateListMapOutput) ToLeaseCandidateListMapOutputWithContext(ctx context.Context) LeaseCandidateListMapOutput {
	return o
}

func (o LeaseCandidateListMapOutput) MapIndex(k pulumi.StringInput) LeaseCandidateListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LeaseCandidateList {
		return vs[0].(map[string]*LeaseCandidateList)[vs[1].(string)]
	}).(LeaseCandidateListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateListInput)(nil)).Elem(), &LeaseCandidateList{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateListArrayInput)(nil)).Elem(), LeaseCandidateListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateListMapInput)(nil)).Elem(), LeaseCandidateListMap{})
	pulumi.RegisterOutputType(LeaseCandidateListOutput{})
	pulumi.RegisterOutputType(LeaseCandidateListArrayOutput{})
	pulumi.RegisterOutputType(LeaseCandidateListMapOutput{})
}
