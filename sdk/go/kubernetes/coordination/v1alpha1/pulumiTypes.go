// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseCandidateSpec `pulumi:"spec"`
}

// LeaseCandidateTypeInput is an input type that accepts LeaseCandidateTypeArgs and LeaseCandidateTypeOutput values.
// You can construct a concrete instance of `LeaseCandidateTypeInput` via:
//
//	LeaseCandidateTypeArgs{...}
type LeaseCandidateTypeInput interface {
	pulumi.Input

	ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput
	ToLeaseCandidateTypeOutputWithContext(context.Context) LeaseCandidateTypeOutput
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecPtrInput `pulumi:"spec"`
}

func (LeaseCandidateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateType)(nil)).Elem()
}

func (i LeaseCandidateTypeArgs) ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput {
	return i.ToLeaseCandidateTypeOutputWithContext(context.Background())
}

func (i LeaseCandidateTypeArgs) ToLeaseCandidateTypeOutputWithContext(ctx context.Context) LeaseCandidateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateTypeOutput)
}

// LeaseCandidateTypeArrayInput is an input type that accepts LeaseCandidateTypeArray and LeaseCandidateTypeArrayOutput values.
// You can construct a concrete instance of `LeaseCandidateTypeArrayInput` via:
//
//	LeaseCandidateTypeArray{ LeaseCandidateTypeArgs{...} }
type LeaseCandidateTypeArrayInput interface {
	pulumi.Input

	ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput
	ToLeaseCandidateTypeArrayOutputWithContext(context.Context) LeaseCandidateTypeArrayOutput
}

type LeaseCandidateTypeArray []LeaseCandidateTypeInput

func (LeaseCandidateTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseCandidateType)(nil)).Elem()
}

func (i LeaseCandidateTypeArray) ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput {
	return i.ToLeaseCandidateTypeArrayOutputWithContext(context.Background())
}

func (i LeaseCandidateTypeArray) ToLeaseCandidateTypeArrayOutputWithContext(ctx context.Context) LeaseCandidateTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateTypeArrayOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateType)(nil)).Elem()
}

func (o LeaseCandidateTypeOutput) ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput {
	return o
}

func (o LeaseCandidateTypeOutput) ToLeaseCandidateTypeOutputWithContext(ctx context.Context) LeaseCandidateTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseCandidateTypeOutput) Spec() LeaseCandidateSpecPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *LeaseCandidateSpec { return v.Spec }).(LeaseCandidateSpecPtrOutput)
}

type LeaseCandidateTypeArrayOutput struct{ *pulumi.OutputState }

func (LeaseCandidateTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseCandidateType)(nil)).Elem()
}

func (o LeaseCandidateTypeArrayOutput) ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput {
	return o
}

func (o LeaseCandidateTypeArrayOutput) ToLeaseCandidateTypeArrayOutputWithContext(ctx context.Context) LeaseCandidateTypeArrayOutput {
	return o
}

func (o LeaseCandidateTypeArrayOutput) Index(i pulumi.IntInput) LeaseCandidateTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LeaseCandidateType {
		return vs[0].([]LeaseCandidateType)[vs[1].(int)]
	}).(LeaseCandidateTypeOutput)
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items []LeaseCandidateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// LeaseCandidateListTypeInput is an input type that accepts LeaseCandidateListTypeArgs and LeaseCandidateListTypeOutput values.
// You can construct a concrete instance of `LeaseCandidateListTypeInput` via:
//
//	LeaseCandidateListTypeArgs{...}
type LeaseCandidateListTypeInput interface {
	pulumi.Input

	ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput
	ToLeaseCandidateListTypeOutputWithContext(context.Context) LeaseCandidateListTypeOutput
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items LeaseCandidateTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (LeaseCandidateListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateListType)(nil)).Elem()
}

func (i LeaseCandidateListTypeArgs) ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput {
	return i.ToLeaseCandidateListTypeOutputWithContext(context.Background())
}

func (i LeaseCandidateListTypeArgs) ToLeaseCandidateListTypeOutputWithContext(ctx context.Context) LeaseCandidateListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateListTypeOutput)
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidateListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateListType)(nil)).Elem()
}

func (o LeaseCandidateListTypeOutput) ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput {
	return o
}

func (o LeaseCandidateListTypeOutput) ToLeaseCandidateListTypeOutputWithContext(ctx context.Context) LeaseCandidateListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of schema objects.
func (o LeaseCandidateListTypeOutput) Items() LeaseCandidateTypeArrayOutput {
	return o.ApplyT(func(v LeaseCandidateListType) []LeaseCandidateType { return v.Items }).(LeaseCandidateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseCandidateSpecPatch `pulumi:"spec"`
}

// LeaseCandidatePatchTypeInput is an input type that accepts LeaseCandidatePatchTypeArgs and LeaseCandidatePatchTypeOutput values.
// You can construct a concrete instance of `LeaseCandidatePatchTypeInput` via:
//
//	LeaseCandidatePatchTypeArgs{...}
type LeaseCandidatePatchTypeInput interface {
	pulumi.Input

	ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput
	ToLeaseCandidatePatchTypeOutputWithContext(context.Context) LeaseCandidatePatchTypeOutput
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecPatchPtrInput `pulumi:"spec"`
}

func (LeaseCandidatePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidatePatchType)(nil)).Elem()
}

func (i LeaseCandidatePatchTypeArgs) ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput {
	return i.ToLeaseCandidatePatchTypeOutputWithContext(context.Background())
}

func (i LeaseCandidatePatchTypeArgs) ToLeaseCandidatePatchTypeOutputWithContext(ctx context.Context) LeaseCandidatePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidatePatchTypeOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidatePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidatePatchType)(nil)).Elem()
}

func (o LeaseCandidatePatchTypeOutput) ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput {
	return o
}

func (o LeaseCandidatePatchTypeOutput) ToLeaseCandidatePatchTypeOutputWithContext(ctx context.Context) LeaseCandidatePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidatePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidatePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidatePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseCandidatePatchTypeOutput) Spec() LeaseCandidateSpecPatchPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *LeaseCandidateSpecPatch { return v.Spec }).(LeaseCandidateSpecPatchPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpec struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
	BinaryVersion *string `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion *string `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
	LeaseName string `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime *string `pulumi:"pingTime"`
	// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
	//   will be used.
	// - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
	//   election will not operate the Lease until resolved.
	//   (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
	PreferredStrategies []string `pulumi:"preferredStrategies"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime *string `pulumi:"renewTime"`
}

// LeaseCandidateSpecInput is an input type that accepts LeaseCandidateSpecArgs and LeaseCandidateSpecOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecInput` via:
//
//	LeaseCandidateSpecArgs{...}
type LeaseCandidateSpecInput interface {
	pulumi.Input

	ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput
	ToLeaseCandidateSpecOutputWithContext(context.Context) LeaseCandidateSpecOutput
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecArgs struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
	BinaryVersion pulumi.StringPtrInput `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion pulumi.StringPtrInput `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
	LeaseName pulumi.StringInput `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime pulumi.StringPtrInput `pulumi:"pingTime"`
	// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
	//   will be used.
	// - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
	//   election will not operate the Lease until resolved.
	//   (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
	PreferredStrategies pulumi.StringArrayInput `pulumi:"preferredStrategies"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseCandidateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpec)(nil)).Elem()
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput {
	return i.ToLeaseCandidateSpecOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecOutputWithContext(ctx context.Context) LeaseCandidateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecOutput)
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return i.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecOutput).ToLeaseCandidateSpecPtrOutputWithContext(ctx)
}

// LeaseCandidateSpecPtrInput is an input type that accepts LeaseCandidateSpecArgs, LeaseCandidateSpecPtr and LeaseCandidateSpecPtrOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPtrInput` via:
//
//	        LeaseCandidateSpecArgs{...}
//
//	or:
//
//	        nil
type LeaseCandidateSpecPtrInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput
	ToLeaseCandidateSpecPtrOutputWithContext(context.Context) LeaseCandidateSpecPtrOutput
}

type leaseCandidateSpecPtrType LeaseCandidateSpecArgs

func LeaseCandidateSpecPtr(v *LeaseCandidateSpecArgs) LeaseCandidateSpecPtrInput {
	return (*leaseCandidateSpecPtrType)(v)
}

func (*leaseCandidateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpec)(nil)).Elem()
}

func (i *leaseCandidateSpecPtrType) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return i.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (i *leaseCandidateSpecPtrType) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpec)(nil)).Elem()
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput {
	return o
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecOutputWithContext(ctx context.Context) LeaseCandidateSpecOutput {
	return o
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return o.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseCandidateSpec) *LeaseCandidateSpec {
		return &v
	}).(LeaseCandidateSpecPtrOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.BinaryVersion }).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.EmulationVersion }).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
func (o LeaseCandidateSpecOutput) LeaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) string { return v.LeaseName }).(pulumi.StringOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.PingTime }).(pulumi.StringPtrOutput)
}

// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
//
//	will be used.
//   - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
//     election will not operate the Lease until resolved.
//     (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
func (o LeaseCandidateSpecOutput) PreferredStrategies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) []string { return v.PreferredStrategies }).(pulumi.StringArrayOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

type LeaseCandidateSpecPtrOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpec)(nil)).Elem()
}

func (o LeaseCandidateSpecPtrOutput) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return o
}

func (o LeaseCandidateSpecPtrOutput) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return o
}

func (o LeaseCandidateSpecPtrOutput) Elem() LeaseCandidateSpecOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) LeaseCandidateSpec {
		if v != nil {
			return *v
		}
		var ret LeaseCandidateSpec
		return ret
	}).(LeaseCandidateSpecOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPtrOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.BinaryVersion
	}).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPtrOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.EmulationVersion
	}).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
func (o LeaseCandidateSpecPtrOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.LeaseName
	}).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPtrOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.PingTime
	}).(pulumi.StringPtrOutput)
}

// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
//
//	will be used.
//   - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
//     election will not operate the Lease until resolved.
//     (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
func (o LeaseCandidateSpecPtrOutput) PreferredStrategies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) []string {
		if v == nil {
			return nil
		}
		return v.PreferredStrategies
	}).(pulumi.StringArrayOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatch struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
	BinaryVersion *string `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion *string `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
	LeaseName *string `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime *string `pulumi:"pingTime"`
	// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
	//   will be used.
	// - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
	//   election will not operate the Lease until resolved.
	//   (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
	PreferredStrategies []string `pulumi:"preferredStrategies"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime *string `pulumi:"renewTime"`
}

// LeaseCandidateSpecPatchInput is an input type that accepts LeaseCandidateSpecPatchArgs and LeaseCandidateSpecPatchOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPatchInput` via:
//
//	LeaseCandidateSpecPatchArgs{...}
type LeaseCandidateSpecPatchInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput
	ToLeaseCandidateSpecPatchOutputWithContext(context.Context) LeaseCandidateSpecPatchOutput
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatchArgs struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
	BinaryVersion pulumi.StringPtrInput `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion pulumi.StringPtrInput `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
	LeaseName pulumi.StringPtrInput `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime pulumi.StringPtrInput `pulumi:"pingTime"`
	// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
	//   will be used.
	// - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
	//   election will not operate the Lease until resolved.
	//   (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
	PreferredStrategies pulumi.StringArrayInput `pulumi:"preferredStrategies"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseCandidateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpecPatch)(nil)).Elem()
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput {
	return i.ToLeaseCandidateSpecPatchOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchOutput)
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return i.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchOutput).ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx)
}

// LeaseCandidateSpecPatchPtrInput is an input type that accepts LeaseCandidateSpecPatchArgs, LeaseCandidateSpecPatchPtr and LeaseCandidateSpecPatchPtrOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPatchPtrInput` via:
//
//	        LeaseCandidateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type LeaseCandidateSpecPatchPtrInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput
	ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Context) LeaseCandidateSpecPatchPtrOutput
}

type leaseCandidateSpecPatchPtrType LeaseCandidateSpecPatchArgs

func LeaseCandidateSpecPatchPtr(v *LeaseCandidateSpecPatchArgs) LeaseCandidateSpecPatchPtrInput {
	return (*leaseCandidateSpecPatchPtrType)(v)
}

func (*leaseCandidateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpecPatch)(nil)).Elem()
}

func (i *leaseCandidateSpecPatchPtrType) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return i.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *leaseCandidateSpecPatchPtrType) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatchOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpecPatch)(nil)).Elem()
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput {
	return o
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchOutput {
	return o
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return o.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseCandidateSpecPatch) *LeaseCandidateSpecPatch {
		return &v
	}).(LeaseCandidateSpecPatchPtrOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.BinaryVersion }).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.EmulationVersion }).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
func (o LeaseCandidateSpecPatchOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.LeaseName }).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPatchOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.PingTime }).(pulumi.StringPtrOutput)
}

// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
//
//	will be used.
//   - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
//     election will not operate the Lease until resolved.
//     (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
func (o LeaseCandidateSpecPatchOutput) PreferredStrategies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) []string { return v.PreferredStrategies }).(pulumi.StringArrayOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPatchOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

type LeaseCandidateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpecPatch)(nil)).Elem()
}

func (o LeaseCandidateSpecPatchPtrOutput) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return o
}

func (o LeaseCandidateSpecPatchPtrOutput) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return o
}

func (o LeaseCandidateSpecPatchPtrOutput) Elem() LeaseCandidateSpecPatchOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) LeaseCandidateSpecPatch {
		if v != nil {
			return *v
		}
		var ret LeaseCandidateSpecPatch
		return ret
	}).(LeaseCandidateSpecPatchOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchPtrOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.BinaryVersion
	}).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchPtrOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EmulationVersion
	}).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
func (o LeaseCandidateSpecPatchPtrOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LeaseName
	}).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPatchPtrOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PingTime
	}).(pulumi.StringPtrOutput)
}

// PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
//
//	will be used.
//   - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
//     election will not operate the Lease until resolved.
//     (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
func (o LeaseCandidateSpecPatchPtrOutput) PreferredStrategies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.PreferredStrategies
	}).(pulumi.StringArrayOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPatchPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateTypeInput)(nil)).Elem(), LeaseCandidateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateTypeArrayInput)(nil)).Elem(), LeaseCandidateTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateListTypeInput)(nil)).Elem(), LeaseCandidateListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidatePatchTypeInput)(nil)).Elem(), LeaseCandidatePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecInput)(nil)).Elem(), LeaseCandidateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPtrInput)(nil)).Elem(), LeaseCandidateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPatchInput)(nil)).Elem(), LeaseCandidateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPatchPtrInput)(nil)).Elem(), LeaseCandidateSpecPatchArgs{})
	pulumi.RegisterOutputType(LeaseCandidateTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidateTypeArrayOutput{})
	pulumi.RegisterOutputType(LeaseCandidateListTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidatePatchTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPtrOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPatchOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPatchPtrOutput{})
}
