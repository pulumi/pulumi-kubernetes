// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Lease defines a lease concept.
type Lease struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseSpec `pulumi:"spec"`
}

type LeaseInput interface {
	pulumi.Input

	ToLeaseOutput() LeaseOutput
	ToLeaseOutputWithContext(context.Context) LeaseOutput
}

// Lease defines a lease concept.
type LeaseArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecPtrInput `pulumi:"spec"`
}

func (LeaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Lease)(nil)).Elem()
}

func (i LeaseArgs) ToLeaseOutput() LeaseOutput {
	return i.ToLeaseOutputWithContext(context.Background())
}

func (i LeaseArgs) ToLeaseOutputWithContext(ctx context.Context) LeaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseOutput)
}

type LeaseArrayInput interface {
	pulumi.Input

	ToLeaseArrayOutput() LeaseArrayOutput
	ToLeaseArrayOutputWithContext(context.Context) LeaseArrayOutput
}

type LeaseArray []LeaseInput

func (LeaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Lease)(nil)).Elem()
}

func (i LeaseArray) ToLeaseArrayOutput() LeaseArrayOutput {
	return i.ToLeaseArrayOutputWithContext(context.Background())
}

func (i LeaseArray) ToLeaseArrayOutputWithContext(ctx context.Context) LeaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseArrayOutput)
}

// Lease defines a lease concept.
type LeaseOutput struct { *pulumi.OutputState }

func (LeaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Lease)(nil)).Elem()
}

func (o LeaseOutput) ToLeaseOutput() LeaseOutput {
	return o
}

func (o LeaseOutput) ToLeaseOutputWithContext(ctx context.Context) LeaseOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Lease) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Lease) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v Lease) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseOutput) Spec() LeaseSpecPtrOutput {
	return o.ApplyT(func (v Lease) *LeaseSpec { return v.Spec }).(LeaseSpecPtrOutput)
}

type LeaseArrayOutput struct { *pulumi.OutputState }

func (LeaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Lease)(nil)).Elem()
}

func (o LeaseArrayOutput) ToLeaseArrayOutput() LeaseArrayOutput {
	return o
}

func (o LeaseArrayOutput) ToLeaseArrayOutputWithContext(ctx context.Context) LeaseArrayOutput {
	return o
}

func (o LeaseArrayOutput) Index(i pulumi.IntInput) LeaseOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Lease {
		return vs[0].([]Lease)[vs[1].(int)]
	}).(LeaseOutput)
}

// LeaseList is a list of Lease objects.
type LeaseList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []Lease `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type LeaseListInput interface {
	pulumi.Input

	ToLeaseListOutput() LeaseListOutput
	ToLeaseListOutputWithContext(context.Context) LeaseListOutput
}

// LeaseList is a list of Lease objects.
type LeaseListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items LeaseArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (LeaseListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseList)(nil)).Elem()
}

func (i LeaseListArgs) ToLeaseListOutput() LeaseListOutput {
	return i.ToLeaseListOutputWithContext(context.Background())
}

func (i LeaseListArgs) ToLeaseListOutputWithContext(ctx context.Context) LeaseListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseListOutput)
}

// LeaseList is a list of Lease objects.
type LeaseListOutput struct { *pulumi.OutputState }

func (LeaseListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseList)(nil)).Elem()
}

func (o LeaseListOutput) ToLeaseListOutput() LeaseListOutput {
	return o
}

func (o LeaseListOutput) ToLeaseListOutputWithContext(ctx context.Context) LeaseListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o LeaseListOutput) Items() LeaseArrayOutput {
	return o.ApplyT(func (v LeaseList) []Lease { return v.Items }).(LeaseArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v LeaseList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpec struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime *string `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds *int `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime *string `pulumi:"renewTime"`
}

type LeaseSpecInput interface {
	pulumi.Input

	ToLeaseSpecOutput() LeaseSpecOutput
	ToLeaseSpecOutputWithContext(context.Context) LeaseSpecOutput
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecArgs struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime pulumi.StringPtrInput `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity pulumi.StringPtrInput `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds pulumi.IntPtrInput `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions pulumi.IntPtrInput `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (i LeaseSpecArgs) ToLeaseSpecOutput() LeaseSpecOutput {
	return i.ToLeaseSpecOutputWithContext(context.Background())
}

func (i LeaseSpecArgs) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecOutput)
}

func (i LeaseSpecArgs) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return i.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (i LeaseSpecArgs) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecOutput).ToLeaseSpecPtrOutputWithContext(ctx)
}

type LeaseSpecPtrInput interface {
	pulumi.Input

	ToLeaseSpecPtrOutput() LeaseSpecPtrOutput
	ToLeaseSpecPtrOutputWithContext(context.Context) LeaseSpecPtrOutput
}

type leaseSpecPtrType LeaseSpecArgs

func LeaseSpecPtr(v *LeaseSpecArgs) LeaseSpecPtrInput {	return (*leaseSpecPtrType)(v)
}

func (*leaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpec)(nil)).Elem()
}

func (i *leaseSpecPtrType) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return i.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (i *leaseSpecPtrType) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecOutput struct { *pulumi.OutputState }

func (LeaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (o LeaseSpecOutput) ToLeaseSpecOutput() LeaseSpecOutput {
	return o
}

func (o LeaseSpecOutput) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return o
}

func (o LeaseSpecOutput) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return o.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (o LeaseSpecOutput) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *LeaseSpec {
		return &v
	}).(LeaseSpecPtrOutput)
}
// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.AcquireTime }).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.HolderIdentity }).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseDurationSeconds }).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseTransitions }).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

type LeaseSpecPtrOutput struct { *pulumi.OutputState }

func (LeaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpec)(nil)).Elem()
}

func (o LeaseSpecPtrOutput) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return o
}

func (o LeaseSpecPtrOutput) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return o
}

func (o LeaseSpecPtrOutput) Elem() LeaseSpecOutput {
	return o.ApplyT(func (v *LeaseSpec) LeaseSpec { return *v }).(LeaseSpecOutput)
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecPtrOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.AcquireTime }).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecPtrOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.HolderIdentity }).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecPtrOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseDurationSeconds }).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecPtrOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseTransitions }).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LeaseOutput{})
	pulumi.RegisterOutputType(LeaseArrayOutput{})
	pulumi.RegisterOutputType(LeaseListOutput{})
	pulumi.RegisterOutputType(LeaseSpecOutput{})
	pulumi.RegisterOutputType(LeaseSpecPtrOutput{})
}
