// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Lease defines a lease concept.
type LeaseType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseSpec `pulumi:"spec"`
}

// LeaseTypeInput is an input type that accepts LeaseTypeArgs and LeaseTypeOutput values.
// You can construct a concrete instance of `LeaseTypeInput` via:
//
//	LeaseTypeArgs{...}
type LeaseTypeInput interface {
	pulumi.Input

	ToLeaseTypeOutput() LeaseTypeOutput
	ToLeaseTypeOutputWithContext(context.Context) LeaseTypeOutput
}

// Lease defines a lease concept.
type LeaseTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecPtrInput `pulumi:"spec"`
}

func (LeaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseType)(nil)).Elem()
}

func (i LeaseTypeArgs) ToLeaseTypeOutput() LeaseTypeOutput {
	return i.ToLeaseTypeOutputWithContext(context.Background())
}

func (i LeaseTypeArgs) ToLeaseTypeOutputWithContext(ctx context.Context) LeaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseTypeOutput)
}

// LeaseTypeArrayInput is an input type that accepts LeaseTypeArray and LeaseTypeArrayOutput values.
// You can construct a concrete instance of `LeaseTypeArrayInput` via:
//
//	LeaseTypeArray{ LeaseTypeArgs{...} }
type LeaseTypeArrayInput interface {
	pulumi.Input

	ToLeaseTypeArrayOutput() LeaseTypeArrayOutput
	ToLeaseTypeArrayOutputWithContext(context.Context) LeaseTypeArrayOutput
}

type LeaseTypeArray []LeaseTypeInput

func (LeaseTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseType)(nil)).Elem()
}

func (i LeaseTypeArray) ToLeaseTypeArrayOutput() LeaseTypeArrayOutput {
	return i.ToLeaseTypeArrayOutputWithContext(context.Background())
}

func (i LeaseTypeArray) ToLeaseTypeArrayOutputWithContext(ctx context.Context) LeaseTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseTypeArrayOutput)
}

// Lease defines a lease concept.
type LeaseTypeOutput struct{ *pulumi.OutputState }

func (LeaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseType)(nil)).Elem()
}

func (o LeaseTypeOutput) ToLeaseTypeOutput() LeaseTypeOutput {
	return o
}

func (o LeaseTypeOutput) ToLeaseTypeOutputWithContext(ctx context.Context) LeaseTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LeaseType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseTypeOutput) Spec() LeaseSpecPtrOutput {
	return o.ApplyT(func(v LeaseType) *LeaseSpec { return v.Spec }).(LeaseSpecPtrOutput)
}

type LeaseTypeArrayOutput struct{ *pulumi.OutputState }

func (LeaseTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseType)(nil)).Elem()
}

func (o LeaseTypeArrayOutput) ToLeaseTypeArrayOutput() LeaseTypeArrayOutput {
	return o
}

func (o LeaseTypeArrayOutput) ToLeaseTypeArrayOutputWithContext(ctx context.Context) LeaseTypeArrayOutput {
	return o
}

func (o LeaseTypeArrayOutput) Index(i pulumi.IntInput) LeaseTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LeaseType {
		return vs[0].([]LeaseType)[vs[1].(int)]
	}).(LeaseTypeOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseCandidateSpec `pulumi:"spec"`
}

// LeaseCandidateTypeInput is an input type that accepts LeaseCandidateTypeArgs and LeaseCandidateTypeOutput values.
// You can construct a concrete instance of `LeaseCandidateTypeInput` via:
//
//	LeaseCandidateTypeArgs{...}
type LeaseCandidateTypeInput interface {
	pulumi.Input

	ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput
	ToLeaseCandidateTypeOutputWithContext(context.Context) LeaseCandidateTypeOutput
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecPtrInput `pulumi:"spec"`
}

func (LeaseCandidateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateType)(nil)).Elem()
}

func (i LeaseCandidateTypeArgs) ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput {
	return i.ToLeaseCandidateTypeOutputWithContext(context.Background())
}

func (i LeaseCandidateTypeArgs) ToLeaseCandidateTypeOutputWithContext(ctx context.Context) LeaseCandidateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateTypeOutput)
}

// LeaseCandidateTypeArrayInput is an input type that accepts LeaseCandidateTypeArray and LeaseCandidateTypeArrayOutput values.
// You can construct a concrete instance of `LeaseCandidateTypeArrayInput` via:
//
//	LeaseCandidateTypeArray{ LeaseCandidateTypeArgs{...} }
type LeaseCandidateTypeArrayInput interface {
	pulumi.Input

	ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput
	ToLeaseCandidateTypeArrayOutputWithContext(context.Context) LeaseCandidateTypeArrayOutput
}

type LeaseCandidateTypeArray []LeaseCandidateTypeInput

func (LeaseCandidateTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseCandidateType)(nil)).Elem()
}

func (i LeaseCandidateTypeArray) ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput {
	return i.ToLeaseCandidateTypeArrayOutputWithContext(context.Background())
}

func (i LeaseCandidateTypeArray) ToLeaseCandidateTypeArrayOutputWithContext(ctx context.Context) LeaseCandidateTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateTypeArrayOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidateTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateType)(nil)).Elem()
}

func (o LeaseCandidateTypeOutput) ToLeaseCandidateTypeOutput() LeaseCandidateTypeOutput {
	return o
}

func (o LeaseCandidateTypeOutput) ToLeaseCandidateTypeOutputWithContext(ctx context.Context) LeaseCandidateTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseCandidateTypeOutput) Spec() LeaseCandidateSpecPtrOutput {
	return o.ApplyT(func(v LeaseCandidateType) *LeaseCandidateSpec { return v.Spec }).(LeaseCandidateSpecPtrOutput)
}

type LeaseCandidateTypeArrayOutput struct{ *pulumi.OutputState }

func (LeaseCandidateTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LeaseCandidateType)(nil)).Elem()
}

func (o LeaseCandidateTypeArrayOutput) ToLeaseCandidateTypeArrayOutput() LeaseCandidateTypeArrayOutput {
	return o
}

func (o LeaseCandidateTypeArrayOutput) ToLeaseCandidateTypeArrayOutputWithContext(ctx context.Context) LeaseCandidateTypeArrayOutput {
	return o
}

func (o LeaseCandidateTypeArrayOutput) Index(i pulumi.IntInput) LeaseCandidateTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LeaseCandidateType {
		return vs[0].([]LeaseCandidateType)[vs[1].(int)]
	}).(LeaseCandidateTypeOutput)
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items []LeaseCandidateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// LeaseCandidateListTypeInput is an input type that accepts LeaseCandidateListTypeArgs and LeaseCandidateListTypeOutput values.
// You can construct a concrete instance of `LeaseCandidateListTypeInput` via:
//
//	LeaseCandidateListTypeArgs{...}
type LeaseCandidateListTypeInput interface {
	pulumi.Input

	ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput
	ToLeaseCandidateListTypeOutputWithContext(context.Context) LeaseCandidateListTypeOutput
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items LeaseCandidateTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (LeaseCandidateListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateListType)(nil)).Elem()
}

func (i LeaseCandidateListTypeArgs) ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput {
	return i.ToLeaseCandidateListTypeOutputWithContext(context.Background())
}

func (i LeaseCandidateListTypeArgs) ToLeaseCandidateListTypeOutputWithContext(ctx context.Context) LeaseCandidateListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateListTypeOutput)
}

// LeaseCandidateList is a list of Lease objects.
type LeaseCandidateListTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidateListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateListType)(nil)).Elem()
}

func (o LeaseCandidateListTypeOutput) ToLeaseCandidateListTypeOutput() LeaseCandidateListTypeOutput {
	return o
}

func (o LeaseCandidateListTypeOutput) ToLeaseCandidateListTypeOutputWithContext(ctx context.Context) LeaseCandidateListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidateListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of schema objects.
func (o LeaseCandidateListTypeOutput) Items() LeaseCandidateTypeArrayOutput {
	return o.ApplyT(func(v LeaseCandidateListType) []LeaseCandidateType { return v.Items }).(LeaseCandidateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidateListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidateListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v LeaseCandidateListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseCandidateSpecPatch `pulumi:"spec"`
}

// LeaseCandidatePatchTypeInput is an input type that accepts LeaseCandidatePatchTypeArgs and LeaseCandidatePatchTypeOutput values.
// You can construct a concrete instance of `LeaseCandidatePatchTypeInput` via:
//
//	LeaseCandidatePatchTypeArgs{...}
type LeaseCandidatePatchTypeInput interface {
	pulumi.Input

	ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput
	ToLeaseCandidatePatchTypeOutputWithContext(context.Context) LeaseCandidatePatchTypeOutput
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseCandidateSpecPatchPtrInput `pulumi:"spec"`
}

func (LeaseCandidatePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidatePatchType)(nil)).Elem()
}

func (i LeaseCandidatePatchTypeArgs) ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput {
	return i.ToLeaseCandidatePatchTypeOutputWithContext(context.Background())
}

func (i LeaseCandidatePatchTypeArgs) ToLeaseCandidatePatchTypeOutputWithContext(ctx context.Context) LeaseCandidatePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidatePatchTypeOutput)
}

// LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
type LeaseCandidatePatchTypeOutput struct{ *pulumi.OutputState }

func (LeaseCandidatePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidatePatchType)(nil)).Elem()
}

func (o LeaseCandidatePatchTypeOutput) ToLeaseCandidatePatchTypeOutput() LeaseCandidatePatchTypeOutput {
	return o
}

func (o LeaseCandidatePatchTypeOutput) ToLeaseCandidatePatchTypeOutputWithContext(ctx context.Context) LeaseCandidatePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseCandidatePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseCandidatePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseCandidatePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeaseCandidatePatchTypeOutput) Spec() LeaseCandidateSpecPatchPtrOutput {
	return o.ApplyT(func(v LeaseCandidatePatchType) *LeaseCandidateSpecPatch { return v.Spec }).(LeaseCandidateSpecPatchPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpec struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
	BinaryVersion string `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion *string `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
	LeaseName string `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime *string `pulumi:"pingTime"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime *string `pulumi:"renewTime"`
	// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
	Strategy string `pulumi:"strategy"`
}

// LeaseCandidateSpecInput is an input type that accepts LeaseCandidateSpecArgs and LeaseCandidateSpecOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecInput` via:
//
//	LeaseCandidateSpecArgs{...}
type LeaseCandidateSpecInput interface {
	pulumi.Input

	ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput
	ToLeaseCandidateSpecOutputWithContext(context.Context) LeaseCandidateSpecOutput
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecArgs struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
	BinaryVersion pulumi.StringInput `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion pulumi.StringPtrInput `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
	LeaseName pulumi.StringInput `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime pulumi.StringPtrInput `pulumi:"pingTime"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
	// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
	Strategy pulumi.StringInput `pulumi:"strategy"`
}

func (LeaseCandidateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpec)(nil)).Elem()
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput {
	return i.ToLeaseCandidateSpecOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecOutputWithContext(ctx context.Context) LeaseCandidateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecOutput)
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return i.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecArgs) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecOutput).ToLeaseCandidateSpecPtrOutputWithContext(ctx)
}

// LeaseCandidateSpecPtrInput is an input type that accepts LeaseCandidateSpecArgs, LeaseCandidateSpecPtr and LeaseCandidateSpecPtrOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPtrInput` via:
//
//	        LeaseCandidateSpecArgs{...}
//
//	or:
//
//	        nil
type LeaseCandidateSpecPtrInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput
	ToLeaseCandidateSpecPtrOutputWithContext(context.Context) LeaseCandidateSpecPtrOutput
}

type leaseCandidateSpecPtrType LeaseCandidateSpecArgs

func LeaseCandidateSpecPtr(v *LeaseCandidateSpecArgs) LeaseCandidateSpecPtrInput {
	return (*leaseCandidateSpecPtrType)(v)
}

func (*leaseCandidateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpec)(nil)).Elem()
}

func (i *leaseCandidateSpecPtrType) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return i.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (i *leaseCandidateSpecPtrType) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpec)(nil)).Elem()
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecOutput() LeaseCandidateSpecOutput {
	return o
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecOutputWithContext(ctx context.Context) LeaseCandidateSpecOutput {
	return o
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return o.ToLeaseCandidateSpecPtrOutputWithContext(context.Background())
}

func (o LeaseCandidateSpecOutput) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseCandidateSpec) *LeaseCandidateSpec {
		return &v
	}).(LeaseCandidateSpecPtrOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
func (o LeaseCandidateSpecOutput) BinaryVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) string { return v.BinaryVersion }).(pulumi.StringOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.EmulationVersion }).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
func (o LeaseCandidateSpecOutput) LeaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) string { return v.LeaseName }).(pulumi.StringOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.PingTime }).(pulumi.StringPtrOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
func (o LeaseCandidateSpecOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v LeaseCandidateSpec) string { return v.Strategy }).(pulumi.StringOutput)
}

type LeaseCandidateSpecPtrOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpec)(nil)).Elem()
}

func (o LeaseCandidateSpecPtrOutput) ToLeaseCandidateSpecPtrOutput() LeaseCandidateSpecPtrOutput {
	return o
}

func (o LeaseCandidateSpecPtrOutput) ToLeaseCandidateSpecPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPtrOutput {
	return o
}

func (o LeaseCandidateSpecPtrOutput) Elem() LeaseCandidateSpecOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) LeaseCandidateSpec {
		if v != nil {
			return *v
		}
		var ret LeaseCandidateSpec
		return ret
	}).(LeaseCandidateSpecOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
func (o LeaseCandidateSpecPtrOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BinaryVersion
	}).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPtrOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.EmulationVersion
	}).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
func (o LeaseCandidateSpecPtrOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.LeaseName
	}).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPtrOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.PingTime
	}).(pulumi.StringPtrOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
func (o LeaseCandidateSpecPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatch struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
	BinaryVersion *string `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion *string `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
	LeaseName *string `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime *string `pulumi:"pingTime"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime *string `pulumi:"renewTime"`
	// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
	Strategy *string `pulumi:"strategy"`
}

// LeaseCandidateSpecPatchInput is an input type that accepts LeaseCandidateSpecPatchArgs and LeaseCandidateSpecPatchOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPatchInput` via:
//
//	LeaseCandidateSpecPatchArgs{...}
type LeaseCandidateSpecPatchInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput
	ToLeaseCandidateSpecPatchOutputWithContext(context.Context) LeaseCandidateSpecPatchOutput
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatchArgs struct {
	// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
	BinaryVersion pulumi.StringPtrInput `pulumi:"binaryVersion"`
	// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
	EmulationVersion pulumi.StringPtrInput `pulumi:"emulationVersion"`
	// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
	LeaseName pulumi.StringPtrInput `pulumi:"leaseName"`
	// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
	PingTime pulumi.StringPtrInput `pulumi:"pingTime"`
	// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
	// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (LeaseCandidateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpecPatch)(nil)).Elem()
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput {
	return i.ToLeaseCandidateSpecPatchOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchOutput)
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return i.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (i LeaseCandidateSpecPatchArgs) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchOutput).ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx)
}

// LeaseCandidateSpecPatchPtrInput is an input type that accepts LeaseCandidateSpecPatchArgs, LeaseCandidateSpecPatchPtr and LeaseCandidateSpecPatchPtrOutput values.
// You can construct a concrete instance of `LeaseCandidateSpecPatchPtrInput` via:
//
//	        LeaseCandidateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type LeaseCandidateSpecPatchPtrInput interface {
	pulumi.Input

	ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput
	ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Context) LeaseCandidateSpecPatchPtrOutput
}

type leaseCandidateSpecPatchPtrType LeaseCandidateSpecPatchArgs

func LeaseCandidateSpecPatchPtr(v *LeaseCandidateSpecPatchArgs) LeaseCandidateSpecPatchPtrInput {
	return (*leaseCandidateSpecPatchPtrType)(v)
}

func (*leaseCandidateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpecPatch)(nil)).Elem()
}

func (i *leaseCandidateSpecPatchPtrType) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return i.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *leaseCandidateSpecPatchPtrType) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseCandidateSpecPatchPtrOutput)
}

// LeaseCandidateSpec is a specification of a Lease.
type LeaseCandidateSpecPatchOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseCandidateSpecPatch)(nil)).Elem()
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchOutput() LeaseCandidateSpecPatchOutput {
	return o
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchOutput {
	return o
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return o.ToLeaseCandidateSpecPatchPtrOutputWithContext(context.Background())
}

func (o LeaseCandidateSpecPatchOutput) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseCandidateSpecPatch) *LeaseCandidateSpecPatch {
		return &v
	}).(LeaseCandidateSpecPatchPtrOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
func (o LeaseCandidateSpecPatchOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.BinaryVersion }).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.EmulationVersion }).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
func (o LeaseCandidateSpecPatchOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.LeaseName }).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPatchOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.PingTime }).(pulumi.StringPtrOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPatchOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
func (o LeaseCandidateSpecPatchOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseCandidateSpecPatch) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type LeaseCandidateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (LeaseCandidateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseCandidateSpecPatch)(nil)).Elem()
}

func (o LeaseCandidateSpecPatchPtrOutput) ToLeaseCandidateSpecPatchPtrOutput() LeaseCandidateSpecPatchPtrOutput {
	return o
}

func (o LeaseCandidateSpecPatchPtrOutput) ToLeaseCandidateSpecPatchPtrOutputWithContext(ctx context.Context) LeaseCandidateSpecPatchPtrOutput {
	return o
}

func (o LeaseCandidateSpecPatchPtrOutput) Elem() LeaseCandidateSpecPatchOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) LeaseCandidateSpecPatch {
		if v != nil {
			return *v
		}
		var ret LeaseCandidateSpecPatch
		return ret
	}).(LeaseCandidateSpecPatchOutput)
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
func (o LeaseCandidateSpecPatchPtrOutput) BinaryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.BinaryVersion
	}).(pulumi.StringPtrOutput)
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
func (o LeaseCandidateSpecPatchPtrOutput) EmulationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EmulationVersion
	}).(pulumi.StringPtrOutput)
}

// LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
func (o LeaseCandidateSpecPatchPtrOutput) LeaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LeaseName
	}).(pulumi.StringPtrOutput)
}

// PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.
func (o LeaseCandidateSpecPatchPtrOutput) PingTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PingTime
	}).(pulumi.StringPtrOutput)
}

// RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.
func (o LeaseCandidateSpecPatchPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

// Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
func (o LeaseCandidateSpecPatchPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseCandidateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// LeaseList is a list of Lease objects.
type LeaseListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []LeaseType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// LeaseListTypeInput is an input type that accepts LeaseListTypeArgs and LeaseListTypeOutput values.
// You can construct a concrete instance of `LeaseListTypeInput` via:
//
//	LeaseListTypeArgs{...}
type LeaseListTypeInput interface {
	pulumi.Input

	ToLeaseListTypeOutput() LeaseListTypeOutput
	ToLeaseListTypeOutputWithContext(context.Context) LeaseListTypeOutput
}

// LeaseList is a list of Lease objects.
type LeaseListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items LeaseTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (LeaseListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseListType)(nil)).Elem()
}

func (i LeaseListTypeArgs) ToLeaseListTypeOutput() LeaseListTypeOutput {
	return i.ToLeaseListTypeOutputWithContext(context.Background())
}

func (i LeaseListTypeArgs) ToLeaseListTypeOutputWithContext(ctx context.Context) LeaseListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseListTypeOutput)
}

// LeaseList is a list of Lease objects.
type LeaseListTypeOutput struct{ *pulumi.OutputState }

func (LeaseListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseListType)(nil)).Elem()
}

func (o LeaseListTypeOutput) ToLeaseListTypeOutput() LeaseListTypeOutput {
	return o
}

func (o LeaseListTypeOutput) ToLeaseListTypeOutputWithContext(ctx context.Context) LeaseListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeaseListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o LeaseListTypeOutput) Items() LeaseTypeArrayOutput {
	return o.ApplyT(func(v LeaseListType) []LeaseType { return v.Items }).(LeaseTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeaseListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeaseListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v LeaseListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Lease defines a lease concept.
type LeasePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LeaseSpecPatch `pulumi:"spec"`
}

// LeasePatchTypeInput is an input type that accepts LeasePatchTypeArgs and LeasePatchTypeOutput values.
// You can construct a concrete instance of `LeasePatchTypeInput` via:
//
//	LeasePatchTypeArgs{...}
type LeasePatchTypeInput interface {
	pulumi.Input

	ToLeasePatchTypeOutput() LeasePatchTypeOutput
	ToLeasePatchTypeOutputWithContext(context.Context) LeasePatchTypeOutput
}

// Lease defines a lease concept.
type LeasePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LeaseSpecPatchPtrInput `pulumi:"spec"`
}

func (LeasePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeasePatchType)(nil)).Elem()
}

func (i LeasePatchTypeArgs) ToLeasePatchTypeOutput() LeasePatchTypeOutput {
	return i.ToLeasePatchTypeOutputWithContext(context.Background())
}

func (i LeasePatchTypeArgs) ToLeasePatchTypeOutputWithContext(ctx context.Context) LeasePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeasePatchTypeOutput)
}

// Lease defines a lease concept.
type LeasePatchTypeOutput struct{ *pulumi.OutputState }

func (LeasePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeasePatchType)(nil)).Elem()
}

func (o LeasePatchTypeOutput) ToLeasePatchTypeOutput() LeasePatchTypeOutput {
	return o
}

func (o LeasePatchTypeOutput) ToLeasePatchTypeOutputWithContext(ctx context.Context) LeasePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LeasePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeasePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LeasePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeasePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LeasePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v LeasePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LeasePatchTypeOutput) Spec() LeaseSpecPatchPtrOutput {
	return o.ApplyT(func(v LeasePatchType) *LeaseSpecPatch { return v.Spec }).(LeaseSpecPatchPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpec struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime *string `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds *int `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime *string `pulumi:"renewTime"`
}

// LeaseSpecInput is an input type that accepts LeaseSpecArgs and LeaseSpecOutput values.
// You can construct a concrete instance of `LeaseSpecInput` via:
//
//	LeaseSpecArgs{...}
type LeaseSpecInput interface {
	pulumi.Input

	ToLeaseSpecOutput() LeaseSpecOutput
	ToLeaseSpecOutputWithContext(context.Context) LeaseSpecOutput
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecArgs struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime pulumi.StringPtrInput `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity pulumi.StringPtrInput `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds pulumi.IntPtrInput `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions pulumi.IntPtrInput `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (i LeaseSpecArgs) ToLeaseSpecOutput() LeaseSpecOutput {
	return i.ToLeaseSpecOutputWithContext(context.Background())
}

func (i LeaseSpecArgs) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecOutput)
}

func (i LeaseSpecArgs) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return i.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (i LeaseSpecArgs) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecOutput).ToLeaseSpecPtrOutputWithContext(ctx)
}

// LeaseSpecPtrInput is an input type that accepts LeaseSpecArgs, LeaseSpecPtr and LeaseSpecPtrOutput values.
// You can construct a concrete instance of `LeaseSpecPtrInput` via:
//
//	        LeaseSpecArgs{...}
//
//	or:
//
//	        nil
type LeaseSpecPtrInput interface {
	pulumi.Input

	ToLeaseSpecPtrOutput() LeaseSpecPtrOutput
	ToLeaseSpecPtrOutputWithContext(context.Context) LeaseSpecPtrOutput
}

type leaseSpecPtrType LeaseSpecArgs

func LeaseSpecPtr(v *LeaseSpecArgs) LeaseSpecPtrInput {
	return (*leaseSpecPtrType)(v)
}

func (*leaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpec)(nil)).Elem()
}

func (i *leaseSpecPtrType) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return i.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (i *leaseSpecPtrType) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecOutput struct{ *pulumi.OutputState }

func (LeaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (o LeaseSpecOutput) ToLeaseSpecOutput() LeaseSpecOutput {
	return o
}

func (o LeaseSpecOutput) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return o
}

func (o LeaseSpecOutput) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return o.ToLeaseSpecPtrOutputWithContext(context.Background())
}

func (o LeaseSpecOutput) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseSpec) *LeaseSpec {
		return &v
	}).(LeaseSpecPtrOutput)
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *string { return v.AcquireTime }).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *string { return v.HolderIdentity }).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *int { return v.LeaseDurationSeconds }).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *int { return v.LeaseTransitions }).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

type LeaseSpecPtrOutput struct{ *pulumi.OutputState }

func (LeaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpec)(nil)).Elem()
}

func (o LeaseSpecPtrOutput) ToLeaseSpecPtrOutput() LeaseSpecPtrOutput {
	return o
}

func (o LeaseSpecPtrOutput) ToLeaseSpecPtrOutputWithContext(ctx context.Context) LeaseSpecPtrOutput {
	return o
}

func (o LeaseSpecPtrOutput) Elem() LeaseSpecOutput {
	return o.ApplyT(func(v *LeaseSpec) LeaseSpec {
		if v != nil {
			return *v
		}
		var ret LeaseSpec
		return ret
	}).(LeaseSpecOutput)
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecPtrOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.AcquireTime
	}).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecPtrOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.HolderIdentity
	}).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecPtrOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LeaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.LeaseDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecPtrOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LeaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.LeaseTransitions
	}).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecPatch struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime *string `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds *int `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime *string `pulumi:"renewTime"`
}

// LeaseSpecPatchInput is an input type that accepts LeaseSpecPatchArgs and LeaseSpecPatchOutput values.
// You can construct a concrete instance of `LeaseSpecPatchInput` via:
//
//	LeaseSpecPatchArgs{...}
type LeaseSpecPatchInput interface {
	pulumi.Input

	ToLeaseSpecPatchOutput() LeaseSpecPatchOutput
	ToLeaseSpecPatchOutputWithContext(context.Context) LeaseSpecPatchOutput
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecPatchArgs struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime pulumi.StringPtrInput `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity pulumi.StringPtrInput `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds pulumi.IntPtrInput `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions pulumi.IntPtrInput `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpecPatch)(nil)).Elem()
}

func (i LeaseSpecPatchArgs) ToLeaseSpecPatchOutput() LeaseSpecPatchOutput {
	return i.ToLeaseSpecPatchOutputWithContext(context.Background())
}

func (i LeaseSpecPatchArgs) ToLeaseSpecPatchOutputWithContext(ctx context.Context) LeaseSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecPatchOutput)
}

func (i LeaseSpecPatchArgs) ToLeaseSpecPatchPtrOutput() LeaseSpecPatchPtrOutput {
	return i.ToLeaseSpecPatchPtrOutputWithContext(context.Background())
}

func (i LeaseSpecPatchArgs) ToLeaseSpecPatchPtrOutputWithContext(ctx context.Context) LeaseSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecPatchOutput).ToLeaseSpecPatchPtrOutputWithContext(ctx)
}

// LeaseSpecPatchPtrInput is an input type that accepts LeaseSpecPatchArgs, LeaseSpecPatchPtr and LeaseSpecPatchPtrOutput values.
// You can construct a concrete instance of `LeaseSpecPatchPtrInput` via:
//
//	        LeaseSpecPatchArgs{...}
//
//	or:
//
//	        nil
type LeaseSpecPatchPtrInput interface {
	pulumi.Input

	ToLeaseSpecPatchPtrOutput() LeaseSpecPatchPtrOutput
	ToLeaseSpecPatchPtrOutputWithContext(context.Context) LeaseSpecPatchPtrOutput
}

type leaseSpecPatchPtrType LeaseSpecPatchArgs

func LeaseSpecPatchPtr(v *LeaseSpecPatchArgs) LeaseSpecPatchPtrInput {
	return (*leaseSpecPatchPtrType)(v)
}

func (*leaseSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpecPatch)(nil)).Elem()
}

func (i *leaseSpecPatchPtrType) ToLeaseSpecPatchPtrOutput() LeaseSpecPatchPtrOutput {
	return i.ToLeaseSpecPatchPtrOutputWithContext(context.Background())
}

func (i *leaseSpecPatchPtrType) ToLeaseSpecPatchPtrOutputWithContext(ctx context.Context) LeaseSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecPatchPtrOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecPatchOutput struct{ *pulumi.OutputState }

func (LeaseSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpecPatch)(nil)).Elem()
}

func (o LeaseSpecPatchOutput) ToLeaseSpecPatchOutput() LeaseSpecPatchOutput {
	return o
}

func (o LeaseSpecPatchOutput) ToLeaseSpecPatchOutputWithContext(ctx context.Context) LeaseSpecPatchOutput {
	return o
}

func (o LeaseSpecPatchOutput) ToLeaseSpecPatchPtrOutput() LeaseSpecPatchPtrOutput {
	return o.ToLeaseSpecPatchPtrOutputWithContext(context.Background())
}

func (o LeaseSpecPatchOutput) ToLeaseSpecPatchPtrOutputWithContext(ctx context.Context) LeaseSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LeaseSpecPatch) *LeaseSpecPatch {
		return &v
	}).(LeaseSpecPatchPtrOutput)
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecPatchOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpecPatch) *string { return v.AcquireTime }).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecPatchOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpecPatch) *string { return v.HolderIdentity }).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecPatchOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LeaseSpecPatch) *int { return v.LeaseDurationSeconds }).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecPatchOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LeaseSpecPatch) *int { return v.LeaseTransitions }).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecPatchOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LeaseSpecPatch) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

type LeaseSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (LeaseSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LeaseSpecPatch)(nil)).Elem()
}

func (o LeaseSpecPatchPtrOutput) ToLeaseSpecPatchPtrOutput() LeaseSpecPatchPtrOutput {
	return o
}

func (o LeaseSpecPatchPtrOutput) ToLeaseSpecPatchPtrOutputWithContext(ctx context.Context) LeaseSpecPatchPtrOutput {
	return o
}

func (o LeaseSpecPatchPtrOutput) Elem() LeaseSpecPatchOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) LeaseSpecPatch {
		if v != nil {
			return *v
		}
		var ret LeaseSpecPatch
		return ret
	}).(LeaseSpecPatchOutput)
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecPatchPtrOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AcquireTime
	}).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecPatchPtrOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.HolderIdentity
	}).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecPatchPtrOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.LeaseDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecPatchPtrOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.LeaseTransitions
	}).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecPatchPtrOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LeaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RenewTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseTypeInput)(nil)).Elem(), LeaseTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseTypeArrayInput)(nil)).Elem(), LeaseTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateTypeInput)(nil)).Elem(), LeaseCandidateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateTypeArrayInput)(nil)).Elem(), LeaseCandidateTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateListTypeInput)(nil)).Elem(), LeaseCandidateListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidatePatchTypeInput)(nil)).Elem(), LeaseCandidatePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecInput)(nil)).Elem(), LeaseCandidateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPtrInput)(nil)).Elem(), LeaseCandidateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPatchInput)(nil)).Elem(), LeaseCandidateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseCandidateSpecPatchPtrInput)(nil)).Elem(), LeaseCandidateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseListTypeInput)(nil)).Elem(), LeaseListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeasePatchTypeInput)(nil)).Elem(), LeasePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseSpecInput)(nil)).Elem(), LeaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseSpecPtrInput)(nil)).Elem(), LeaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseSpecPatchInput)(nil)).Elem(), LeaseSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LeaseSpecPatchPtrInput)(nil)).Elem(), LeaseSpecPatchArgs{})
	pulumi.RegisterOutputType(LeaseTypeOutput{})
	pulumi.RegisterOutputType(LeaseTypeArrayOutput{})
	pulumi.RegisterOutputType(LeaseCandidateTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidateTypeArrayOutput{})
	pulumi.RegisterOutputType(LeaseCandidateListTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidatePatchTypeOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPtrOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPatchOutput{})
	pulumi.RegisterOutputType(LeaseCandidateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(LeaseListTypeOutput{})
	pulumi.RegisterOutputType(LeasePatchTypeOutput{})
	pulumi.RegisterOutputType(LeaseSpecOutput{})
	pulumi.RegisterOutputType(LeaseSpecPtrOutput{})
	pulumi.RegisterOutputType(LeaseSpecPatchOutput{})
	pulumi.RegisterOutputType(LeaseSpecPatchPtrOutput{})
}
