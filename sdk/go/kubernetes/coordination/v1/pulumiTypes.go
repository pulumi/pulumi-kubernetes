// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// LeaseSpec is a specification of a Lease.
type LeaseSpec struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime *string `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds *int `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime *string `pulumi:"renewTime"`
}

type LeaseSpecInput interface {
	pulumi.Input

	ToLeaseSpecOutput() LeaseSpecOutput
	ToLeaseSpecOutputWithContext(context.Context) LeaseSpecOutput
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecArgs struct {
	// acquireTime is a time when the current lease was acquired.
	AcquireTime pulumi.StringPtrInput `pulumi:"acquireTime"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity pulumi.StringPtrInput `pulumi:"holderIdentity"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds pulumi.IntPtrInput `pulumi:"leaseDurationSeconds"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions pulumi.IntPtrInput `pulumi:"leaseTransitions"`
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime pulumi.StringPtrInput `pulumi:"renewTime"`
}

func (LeaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (i LeaseSpecArgs) ToLeaseSpecOutput() LeaseSpecOutput {
	return i.ToLeaseSpecOutputWithContext(context.Background())
}

func (i LeaseSpecArgs) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LeaseSpecOutput)
}

// LeaseSpec is a specification of a Lease.
type LeaseSpecOutput struct { *pulumi.OutputState }

func (LeaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LeaseSpec)(nil)).Elem()
}

func (o LeaseSpecOutput) ToLeaseSpecOutput() LeaseSpecOutput {
	return o
}

func (o LeaseSpecOutput) ToLeaseSpecOutputWithContext(ctx context.Context) LeaseSpecOutput {
	return o
}

// acquireTime is a time when the current lease was acquired.
func (o LeaseSpecOutput) AcquireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.AcquireTime }).(pulumi.StringPtrOutput)
}

// holderIdentity contains the identity of the holder of a current lease.
func (o LeaseSpecOutput) HolderIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.HolderIdentity }).(pulumi.StringPtrOutput)
}

// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
func (o LeaseSpecOutput) LeaseDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseDurationSeconds }).(pulumi.IntPtrOutput)
}

// leaseTransitions is the number of transitions of a lease between holders.
func (o LeaseSpecOutput) LeaseTransitions() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *int { return v.LeaseTransitions }).(pulumi.IntPtrOutput)
}

// renewTime is a time when the current holder of a lease has last updated the lease.
func (o LeaseSpecOutput) RenewTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LeaseSpec) *string { return v.RenewTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LeaseSpecOutput{})
}
