// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type *string `pulumi:"type"`
}

type FlowDistinguisherMethodInput interface {
	pulumi.Input

	ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput
	ToFlowDistinguisherMethodOutputWithContext(context.Context) FlowDistinguisherMethodOutput
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethodArgs struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FlowDistinguisherMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDistinguisherMethod)(nil)).Elem()
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput {
	return i.ToFlowDistinguisherMethodOutputWithContext(context.Background())
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodOutputWithContext(ctx context.Context) FlowDistinguisherMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDistinguisherMethodOutput)
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethodOutput struct { *pulumi.OutputState }

func (FlowDistinguisherMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDistinguisherMethod)(nil)).Elem()
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput {
	return o
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodOutputWithContext(ctx context.Context) FlowDistinguisherMethodOutput {
	return o
}

// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
func (o FlowDistinguisherMethodOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowDistinguisherMethod) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaCondition struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type *string `pulumi:"type"`
}

type FlowSchemaConditionInput interface {
	pulumi.Input

	ToFlowSchemaConditionOutput() FlowSchemaConditionOutput
	ToFlowSchemaConditionOutputWithContext(context.Context) FlowSchemaConditionOutput
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaConditionArgs struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FlowSchemaConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaCondition)(nil)).Elem()
}

func (i FlowSchemaConditionArgs) ToFlowSchemaConditionOutput() FlowSchemaConditionOutput {
	return i.ToFlowSchemaConditionOutputWithContext(context.Background())
}

func (i FlowSchemaConditionArgs) ToFlowSchemaConditionOutputWithContext(ctx context.Context) FlowSchemaConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaConditionOutput)
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaConditionOutput struct { *pulumi.OutputState }

func (FlowSchemaConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaCondition)(nil)).Elem()
}

func (o FlowSchemaConditionOutput) ToFlowSchemaConditionOutput() FlowSchemaConditionOutput {
	return o
}

func (o FlowSchemaConditionOutput) ToFlowSchemaConditionOutputWithContext(ctx context.Context) FlowSchemaConditionOutput {
	return o
}

// `lastTransitionTime` is the last time the condition transitioned from one status to another.
func (o FlowSchemaConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowSchemaCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// `message` is a human-readable message indicating details about last transition.
func (o FlowSchemaConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowSchemaCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
func (o FlowSchemaConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowSchemaCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// `status` is the status of the condition. Can be True, False, Unknown. Required.
func (o FlowSchemaConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowSchemaCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `type` is the type of the condition. Required.
func (o FlowSchemaConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FlowSchemaCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpec struct {
	// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
	DistinguisherMethod *FlowDistinguisherMethod `pulumi:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.
	MatchingPrecedence *int `pulumi:"matchingPrecedence"`
	// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
	PriorityLevelConfiguration *PriorityLevelConfigurationReference `pulumi:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []PolicyRulesWithSubjects `pulumi:"rules"`
}

type FlowSchemaSpecInput interface {
	pulumi.Input

	ToFlowSchemaSpecOutput() FlowSchemaSpecOutput
	ToFlowSchemaSpecOutputWithContext(context.Context) FlowSchemaSpecOutput
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpecArgs struct {
	// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
	DistinguisherMethod FlowDistinguisherMethodPtrInput `pulumi:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.
	MatchingPrecedence pulumi.IntPtrInput `pulumi:"matchingPrecedence"`
	// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
	PriorityLevelConfiguration PriorityLevelConfigurationReferencePtrInput `pulumi:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules PolicyRulesWithSubjectsArrayInput `pulumi:"rules"`
}

func (FlowSchemaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaSpec)(nil)).Elem()
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecOutput() FlowSchemaSpecOutput {
	return i.ToFlowSchemaSpecOutputWithContext(context.Background())
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecOutputWithContext(ctx context.Context) FlowSchemaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaSpecOutput)
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpecOutput struct { *pulumi.OutputState }

func (FlowSchemaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaSpec)(nil)).Elem()
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecOutput() FlowSchemaSpecOutput {
	return o
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecOutputWithContext(ctx context.Context) FlowSchemaSpecOutput {
	return o
}

// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
func (o FlowSchemaSpecOutput) DistinguisherMethod() FlowDistinguisherMethodPtrOutput {
	return o.ApplyT(func (v FlowSchemaSpec) *FlowDistinguisherMethod { return v.DistinguisherMethod }).(FlowDistinguisherMethodPtrOutput)
}

// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.
func (o FlowSchemaSpecOutput) MatchingPrecedence() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FlowSchemaSpec) *int { return v.MatchingPrecedence }).(pulumi.IntPtrOutput)
}

// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
func (o FlowSchemaSpecOutput) PriorityLevelConfiguration() PriorityLevelConfigurationReferencePtrOutput {
	return o.ApplyT(func (v FlowSchemaSpec) *PriorityLevelConfigurationReference { return v.PriorityLevelConfiguration }).(PriorityLevelConfigurationReferencePtrOutput)
}

// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
func (o FlowSchemaSpecOutput) Rules() PolicyRulesWithSubjectsArrayOutput {
	return o.ApplyT(func (v FlowSchemaSpec) []PolicyRulesWithSubjects { return v.Rules }).(PolicyRulesWithSubjectsArrayOutput)
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []FlowSchemaCondition `pulumi:"conditions"`
}

type FlowSchemaStatusInput interface {
	pulumi.Input

	ToFlowSchemaStatusOutput() FlowSchemaStatusOutput
	ToFlowSchemaStatusOutputWithContext(context.Context) FlowSchemaStatusOutput
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatusArgs struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions FlowSchemaConditionArrayInput `pulumi:"conditions"`
}

func (FlowSchemaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaStatus)(nil)).Elem()
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusOutput() FlowSchemaStatusOutput {
	return i.ToFlowSchemaStatusOutputWithContext(context.Background())
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusOutputWithContext(ctx context.Context) FlowSchemaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaStatusOutput)
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatusOutput struct { *pulumi.OutputState }

func (FlowSchemaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaStatus)(nil)).Elem()
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusOutput() FlowSchemaStatusOutput {
	return o
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusOutputWithContext(ctx context.Context) FlowSchemaStatusOutput {
	return o
}

// `conditions` is a list of the current states of FlowSchema.
func (o FlowSchemaStatusOutput) Conditions() FlowSchemaConditionArrayOutput {
	return o.ApplyT(func (v FlowSchemaStatus) []FlowSchemaCondition { return v.Conditions }).(FlowSchemaConditionArrayOutput)
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubject struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name *string `pulumi:"name"`
}

type GroupSubjectInput interface {
	pulumi.Input

	ToGroupSubjectOutput() GroupSubjectOutput
	ToGroupSubjectOutputWithContext(context.Context) GroupSubjectOutput
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubjectArgs struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GroupSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubject)(nil)).Elem()
}

func (i GroupSubjectArgs) ToGroupSubjectOutput() GroupSubjectOutput {
	return i.ToGroupSubjectOutputWithContext(context.Background())
}

func (i GroupSubjectArgs) ToGroupSubjectOutputWithContext(ctx context.Context) GroupSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubjectOutput)
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubjectOutput struct { *pulumi.OutputState }

func (GroupSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubject)(nil)).Elem()
}

func (o GroupSubjectOutput) ToGroupSubjectOutput() GroupSubjectOutput {
	return o
}

func (o GroupSubjectOutput) ToGroupSubjectOutputWithContext(ctx context.Context) GroupSubjectOutput {
	return o
}

// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
func (o GroupSubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupSubject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponse struct {
	// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
	Queuing *QueuingConfiguration `pulumi:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type *string `pulumi:"type"`
}

type LimitResponseInput interface {
	pulumi.Input

	ToLimitResponseOutput() LimitResponseOutput
	ToLimitResponseOutputWithContext(context.Context) LimitResponseOutput
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponseArgs struct {
	// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
	Queuing QueuingConfigurationPtrInput `pulumi:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LimitResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitResponse)(nil)).Elem()
}

func (i LimitResponseArgs) ToLimitResponseOutput() LimitResponseOutput {
	return i.ToLimitResponseOutputWithContext(context.Background())
}

func (i LimitResponseArgs) ToLimitResponseOutputWithContext(ctx context.Context) LimitResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitResponseOutput)
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponseOutput struct { *pulumi.OutputState }

func (LimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitResponse)(nil)).Elem()
}

func (o LimitResponseOutput) ToLimitResponseOutput() LimitResponseOutput {
	return o
}

func (o LimitResponseOutput) ToLimitResponseOutputWithContext(ctx context.Context) LimitResponseOutput {
	return o
}

// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
func (o LimitResponseOutput) Queuing() QueuingConfigurationPtrOutput {
	return o.ApplyT(func (v LimitResponse) *QueuingConfiguration { return v.Queuing }).(QueuingConfigurationPtrOutput)
}

// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
func (o LimitResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LimitResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfiguration struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares *int `pulumi:"assuredConcurrencyShares"`
	// `limitResponse` indicates what to do with requests that can not be executed right now
	LimitResponse *LimitResponse `pulumi:"limitResponse"`
}

type LimitedPriorityLevelConfigurationInput interface {
	pulumi.Input

	ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput
	ToLimitedPriorityLevelConfigurationOutputWithContext(context.Context) LimitedPriorityLevelConfigurationOutput
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfigurationArgs struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares pulumi.IntPtrInput `pulumi:"assuredConcurrencyShares"`
	// `limitResponse` indicates what to do with requests that can not be executed right now
	LimitResponse LimitResponsePtrInput `pulumi:"limitResponse"`
}

func (LimitedPriorityLevelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput {
	return i.ToLimitedPriorityLevelConfigurationOutputWithContext(context.Background())
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitedPriorityLevelConfigurationOutput)
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfigurationOutput struct { *pulumi.OutputState }

func (LimitedPriorityLevelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput {
	return o
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationOutput {
	return o
}

// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
//
//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
//
// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
func (o LimitedPriorityLevelConfigurationOutput) AssuredConcurrencyShares() pulumi.IntPtrOutput {
	return o.ApplyT(func (v LimitedPriorityLevelConfiguration) *int { return v.AssuredConcurrencyShares }).(pulumi.IntPtrOutput)
}

// `limitResponse` indicates what to do with requests that can not be executed right now
func (o LimitedPriorityLevelConfigurationOutput) LimitResponse() LimitResponsePtrOutput {
	return o.ApplyT(func (v LimitedPriorityLevelConfiguration) *LimitResponse { return v.LimitResponse }).(LimitResponsePtrOutput)
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []string `pulumi:"verbs"`
}

type NonResourcePolicyRuleInput interface {
	pulumi.Input

	ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput
	ToNonResourcePolicyRuleOutputWithContext(context.Context) NonResourcePolicyRuleOutput
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRuleArgs struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (NonResourcePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourcePolicyRule)(nil)).Elem()
}

func (i NonResourcePolicyRuleArgs) ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput {
	return i.ToNonResourcePolicyRuleOutputWithContext(context.Background())
}

func (i NonResourcePolicyRuleArgs) ToNonResourcePolicyRuleOutputWithContext(ctx context.Context) NonResourcePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourcePolicyRuleOutput)
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRuleOutput struct { *pulumi.OutputState }

func (NonResourcePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourcePolicyRule)(nil)).Elem()
}

func (o NonResourcePolicyRuleOutput) ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput {
	return o
}

func (o NonResourcePolicyRuleOutput) ToNonResourcePolicyRuleOutputWithContext(ctx context.Context) NonResourcePolicyRuleOutput {
	return o
}

// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
//   - "/healthz" is legal
//   - "/hea*" is illegal
//   - "/hea" is legal but matches nothing
//   - "/hea/*" also matches nothing
//   - "/healthz/*" matches all per-component health checks.
// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
func (o NonResourcePolicyRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v NonResourcePolicyRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
func (o NonResourcePolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v NonResourcePolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []NonResourcePolicyRule `pulumi:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []ResourcePolicyRule `pulumi:"resourceRules"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []Subject `pulumi:"subjects"`
}

type PolicyRulesWithSubjectsInput interface {
	pulumi.Input

	ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput
	ToPolicyRulesWithSubjectsOutputWithContext(context.Context) PolicyRulesWithSubjectsOutput
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjectsArgs struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules NonResourcePolicyRuleArrayInput `pulumi:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules ResourcePolicyRuleArrayInput `pulumi:"resourceRules"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (PolicyRulesWithSubjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRulesWithSubjects)(nil)).Elem()
}

func (i PolicyRulesWithSubjectsArgs) ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput {
	return i.ToPolicyRulesWithSubjectsOutputWithContext(context.Background())
}

func (i PolicyRulesWithSubjectsArgs) ToPolicyRulesWithSubjectsOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRulesWithSubjectsOutput)
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjectsOutput struct { *pulumi.OutputState }

func (PolicyRulesWithSubjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRulesWithSubjects)(nil)).Elem()
}

func (o PolicyRulesWithSubjectsOutput) ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput {
	return o
}

func (o PolicyRulesWithSubjectsOutput) ToPolicyRulesWithSubjectsOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsOutput {
	return o
}

// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
func (o PolicyRulesWithSubjectsOutput) NonResourceRules() NonResourcePolicyRuleArrayOutput {
	return o.ApplyT(func (v PolicyRulesWithSubjects) []NonResourcePolicyRule { return v.NonResourceRules }).(NonResourcePolicyRuleArrayOutput)
}

// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
func (o PolicyRulesWithSubjectsOutput) ResourceRules() ResourcePolicyRuleArrayOutput {
	return o.ApplyT(func (v PolicyRulesWithSubjects) []ResourcePolicyRule { return v.ResourceRules }).(ResourcePolicyRuleArrayOutput)
}

// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
func (o PolicyRulesWithSubjectsOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func (v PolicyRulesWithSubjects) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationCondition struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type *string `pulumi:"type"`
}

type PriorityLevelConfigurationConditionInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput
	ToPriorityLevelConfigurationConditionOutputWithContext(context.Context) PriorityLevelConfigurationConditionOutput
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationConditionArgs struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PriorityLevelConfigurationConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (i PriorityLevelConfigurationConditionArgs) ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput {
	return i.ToPriorityLevelConfigurationConditionOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationConditionArgs) ToPriorityLevelConfigurationConditionOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationConditionOutput)
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationConditionOutput struct { *pulumi.OutputState }

func (PriorityLevelConfigurationConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (o PriorityLevelConfigurationConditionOutput) ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput {
	return o
}

func (o PriorityLevelConfigurationConditionOutput) ToPriorityLevelConfigurationConditionOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionOutput {
	return o
}

// `lastTransitionTime` is the last time the condition transitioned from one status to another.
func (o PriorityLevelConfigurationConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// `message` is a human-readable message indicating details about last transition.
func (o PriorityLevelConfigurationConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
func (o PriorityLevelConfigurationConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// `status` is the status of the condition. Can be True, False, Unknown. Required.
func (o PriorityLevelConfigurationConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `type` is the type of the condition. Required.
func (o PriorityLevelConfigurationConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name *string `pulumi:"name"`
}

type PriorityLevelConfigurationReferenceInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput
	ToPriorityLevelConfigurationReferenceOutputWithContext(context.Context) PriorityLevelConfigurationReferenceOutput
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReferenceArgs struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PriorityLevelConfigurationReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationReference)(nil)).Elem()
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput {
	return i.ToPriorityLevelConfigurationReferenceOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferenceOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationReferenceOutput)
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReferenceOutput struct { *pulumi.OutputState }

func (PriorityLevelConfigurationReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationReference)(nil)).Elem()
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput {
	return o
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferenceOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferenceOutput {
	return o
}

// `name` is the name of the priority level configuration being referenced Required.
func (o PriorityLevelConfigurationReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpec struct {
	// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
	Limited *LimitedPriorityLevelConfiguration `pulumi:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type *string `pulumi:"type"`
}

type PriorityLevelConfigurationSpecInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput
	ToPriorityLevelConfigurationSpecOutputWithContext(context.Context) PriorityLevelConfigurationSpecOutput
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpecArgs struct {
	// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
	Limited LimitedPriorityLevelConfigurationPtrInput `pulumi:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PriorityLevelConfigurationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput {
	return i.ToPriorityLevelConfigurationSpecOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationSpecOutput)
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpecOutput struct { *pulumi.OutputState }

func (PriorityLevelConfigurationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput {
	return o
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecOutput {
	return o
}

// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
func (o PriorityLevelConfigurationSpecOutput) Limited() LimitedPriorityLevelConfigurationPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationSpec) *LimitedPriorityLevelConfiguration { return v.Limited }).(LimitedPriorityLevelConfigurationPtrOutput)
}

// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
func (o PriorityLevelConfigurationSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []PriorityLevelConfigurationCondition `pulumi:"conditions"`
}

type PriorityLevelConfigurationStatusInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput
	ToPriorityLevelConfigurationStatusOutputWithContext(context.Context) PriorityLevelConfigurationStatusOutput
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatusArgs struct {
	// `conditions` is the current state of "request-priority".
	Conditions PriorityLevelConfigurationConditionArrayInput `pulumi:"conditions"`
}

func (PriorityLevelConfigurationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput {
	return i.ToPriorityLevelConfigurationStatusOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationStatusOutput)
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatusOutput struct { *pulumi.OutputState }

func (PriorityLevelConfigurationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput {
	return o
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusOutput {
	return o
}

// `conditions` is the current state of "request-priority".
func (o PriorityLevelConfigurationStatusOutput) Conditions() PriorityLevelConfigurationConditionArrayOutput {
	return o.ApplyT(func (v PriorityLevelConfigurationStatus) []PriorityLevelConfigurationCondition { return v.Conditions }).(PriorityLevelConfigurationConditionArrayOutput)
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `pulumi:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `pulumi:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `pulumi:"queues"`
}

type QueuingConfigurationInput interface {
	pulumi.Input

	ToQueuingConfigurationOutput() QueuingConfigurationOutput
	ToQueuingConfigurationOutputWithContext(context.Context) QueuingConfigurationOutput
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfigurationArgs struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize pulumi.IntPtrInput `pulumi:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit pulumi.IntPtrInput `pulumi:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues pulumi.IntPtrInput `pulumi:"queues"`
}

func (QueuingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuingConfiguration)(nil)).Elem()
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationOutput() QueuingConfigurationOutput {
	return i.ToQueuingConfigurationOutputWithContext(context.Background())
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationOutputWithContext(ctx context.Context) QueuingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingConfigurationOutput)
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfigurationOutput struct { *pulumi.OutputState }

func (QueuingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuingConfiguration)(nil)).Elem()
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationOutput() QueuingConfigurationOutput {
	return o
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationOutputWithContext(ctx context.Context) QueuingConfigurationOutput {
	return o
}

// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
func (o QueuingConfigurationOutput) HandSize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v QueuingConfiguration) *int { return v.HandSize }).(pulumi.IntPtrOutput)
}

// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
func (o QueuingConfigurationOutput) QueueLengthLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func (v QueuingConfiguration) *int { return v.QueueLengthLimit }).(pulumi.IntPtrOutput)
}

// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
func (o QueuingConfigurationOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func (v QueuingConfiguration) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	ApiGroups []string `pulumi:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `pulumi:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []string `pulumi:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []string `pulumi:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []string `pulumi:"verbs"`
}

type ResourcePolicyRuleInput interface {
	pulumi.Input

	ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput
	ToResourcePolicyRuleOutputWithContext(context.Context) ResourcePolicyRuleOutput
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRuleArgs struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope pulumi.BoolPtrInput `pulumi:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (ResourcePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyRule)(nil)).Elem()
}

func (i ResourcePolicyRuleArgs) ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput {
	return i.ToResourcePolicyRuleOutputWithContext(context.Background())
}

func (i ResourcePolicyRuleArgs) ToResourcePolicyRuleOutputWithContext(ctx context.Context) ResourcePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRuleOutput)
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRuleOutput struct { *pulumi.OutputState }

func (ResourcePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyRule)(nil)).Elem()
}

func (o ResourcePolicyRuleOutput) ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput {
	return o
}

func (o ResourcePolicyRuleOutput) ToResourcePolicyRuleOutputWithContext(ctx context.Context) ResourcePolicyRuleOutput {
	return o
}

// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ResourcePolicyRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
func (o ResourcePolicyRuleOutput) ClusterScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ResourcePolicyRule) *bool { return v.ClusterScope }).(pulumi.BoolPtrOutput)
}

// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
func (o ResourcePolicyRuleOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ResourcePolicyRule) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ResourcePolicyRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ResourcePolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name *string `pulumi:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace *string `pulumi:"namespace"`
}

type ServiceAccountSubjectInput interface {
	pulumi.Input

	ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput
	ToServiceAccountSubjectOutputWithContext(context.Context) ServiceAccountSubjectOutput
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubjectArgs struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ServiceAccountSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountSubject)(nil)).Elem()
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput {
	return i.ToServiceAccountSubjectOutputWithContext(context.Background())
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectOutputWithContext(ctx context.Context) ServiceAccountSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountSubjectOutput)
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubjectOutput struct { *pulumi.OutputState }

func (ServiceAccountSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountSubject)(nil)).Elem()
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput {
	return o
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectOutputWithContext(ctx context.Context) ServiceAccountSubjectOutput {
	return o
}

// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
func (o ServiceAccountSubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ServiceAccountSubject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// `namespace` is the namespace of matching ServiceAccount objects. Required.
func (o ServiceAccountSubjectOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ServiceAccountSubject) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type Subject struct {
	Group *GroupSubject `pulumi:"group"`
	// Required
	Kind *string `pulumi:"kind"`
	ServiceAccount *ServiceAccountSubject `pulumi:"serviceAccount"`
	User *UserSubject `pulumi:"user"`
}

type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type SubjectArgs struct {
	Group GroupSubjectPtrInput `pulumi:"group"`
	// Required
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	ServiceAccount ServiceAccountSubjectPtrInput `pulumi:"serviceAccount"`
	User UserSubjectPtrInput `pulumi:"user"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type SubjectOutput struct { *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

func (o SubjectOutput) Group() GroupSubjectPtrOutput {
	return o.ApplyT(func (v Subject) *GroupSubject { return v.Group }).(GroupSubjectPtrOutput)
}

// Required
func (o SubjectOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Subject) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SubjectOutput) ServiceAccount() ServiceAccountSubjectPtrOutput {
	return o.ApplyT(func (v Subject) *ServiceAccountSubject { return v.ServiceAccount }).(ServiceAccountSubjectPtrOutput)
}

func (o SubjectOutput) User() UserSubjectPtrOutput {
	return o.ApplyT(func (v Subject) *UserSubject { return v.User }).(UserSubjectPtrOutput)
}

// UserSubject holds detailed information for user-kind subject.
type UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name *string `pulumi:"name"`
}

type UserSubjectInput interface {
	pulumi.Input

	ToUserSubjectOutput() UserSubjectOutput
	ToUserSubjectOutputWithContext(context.Context) UserSubjectOutput
}

// UserSubject holds detailed information for user-kind subject.
type UserSubjectArgs struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (UserSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSubject)(nil)).Elem()
}

func (i UserSubjectArgs) ToUserSubjectOutput() UserSubjectOutput {
	return i.ToUserSubjectOutputWithContext(context.Background())
}

func (i UserSubjectArgs) ToUserSubjectOutputWithContext(ctx context.Context) UserSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSubjectOutput)
}

// UserSubject holds detailed information for user-kind subject.
type UserSubjectOutput struct { *pulumi.OutputState }

func (UserSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSubject)(nil)).Elem()
}

func (o UserSubjectOutput) ToUserSubjectOutput() UserSubjectOutput {
	return o
}

func (o UserSubjectOutput) ToUserSubjectOutputWithContext(ctx context.Context) UserSubjectOutput {
	return o
}

// `name` is the username that matches, or "*" to match all usernames. Required.
func (o UserSubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v UserSubject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowDistinguisherMethodOutput{})
	pulumi.RegisterOutputType(FlowSchemaConditionOutput{})
	pulumi.RegisterOutputType(FlowSchemaSpecOutput{})
	pulumi.RegisterOutputType(FlowSchemaStatusOutput{})
	pulumi.RegisterOutputType(GroupSubjectOutput{})
	pulumi.RegisterOutputType(LimitResponseOutput{})
	pulumi.RegisterOutputType(LimitedPriorityLevelConfigurationOutput{})
	pulumi.RegisterOutputType(NonResourcePolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRulesWithSubjectsOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationConditionOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationReferenceOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationSpecOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationStatusOutput{})
	pulumi.RegisterOutputType(QueuingConfigurationOutput{})
	pulumi.RegisterOutputType(ResourcePolicyRuleOutput{})
	pulumi.RegisterOutputType(ServiceAccountSubjectOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(UserSubjectOutput{})
}
