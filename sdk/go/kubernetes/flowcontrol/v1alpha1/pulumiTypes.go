// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type string `pulumi:"type"`
}

// FlowDistinguisherMethodInput is an input type that accepts FlowDistinguisherMethodArgs and FlowDistinguisherMethodOutput values.
// You can construct a concrete instance of `FlowDistinguisherMethodInput` via:
//
// 		 FlowDistinguisherMethodArgs{...}
//
type FlowDistinguisherMethodInput interface {
	pulumi.Input

	ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput
	ToFlowDistinguisherMethodOutputWithContext(context.Context) FlowDistinguisherMethodOutput
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethodArgs struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FlowDistinguisherMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDistinguisherMethod)(nil)).Elem()
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput {
	return i.ToFlowDistinguisherMethodOutputWithContext(context.Background())
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodOutputWithContext(ctx context.Context) FlowDistinguisherMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDistinguisherMethodOutput)
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodPtrOutput() FlowDistinguisherMethodPtrOutput {
	return i.ToFlowDistinguisherMethodPtrOutputWithContext(context.Background())
}

func (i FlowDistinguisherMethodArgs) ToFlowDistinguisherMethodPtrOutputWithContext(ctx context.Context) FlowDistinguisherMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDistinguisherMethodOutput).ToFlowDistinguisherMethodPtrOutputWithContext(ctx)
}

// FlowDistinguisherMethodPtrInput is an input type that accepts FlowDistinguisherMethodArgs, FlowDistinguisherMethodPtr and FlowDistinguisherMethodPtrOutput values.
// You can construct a concrete instance of `FlowDistinguisherMethodPtrInput` via:
//
// 		 FlowDistinguisherMethodArgs{...}
//
//  or:
//
// 		 nil
//
type FlowDistinguisherMethodPtrInput interface {
	pulumi.Input

	ToFlowDistinguisherMethodPtrOutput() FlowDistinguisherMethodPtrOutput
	ToFlowDistinguisherMethodPtrOutputWithContext(context.Context) FlowDistinguisherMethodPtrOutput
}

type flowDistinguisherMethodPtrType FlowDistinguisherMethodArgs

func FlowDistinguisherMethodPtr(v *FlowDistinguisherMethodArgs) FlowDistinguisherMethodPtrInput {
	return (*flowDistinguisherMethodPtrType)(v)
}

func (*flowDistinguisherMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDistinguisherMethod)(nil)).Elem()
}

func (i *flowDistinguisherMethodPtrType) ToFlowDistinguisherMethodPtrOutput() FlowDistinguisherMethodPtrOutput {
	return i.ToFlowDistinguisherMethodPtrOutputWithContext(context.Background())
}

func (i *flowDistinguisherMethodPtrType) ToFlowDistinguisherMethodPtrOutputWithContext(ctx context.Context) FlowDistinguisherMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDistinguisherMethodPtrOutput)
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethodOutput struct{ *pulumi.OutputState }

func (FlowDistinguisherMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDistinguisherMethod)(nil)).Elem()
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodOutput() FlowDistinguisherMethodOutput {
	return o
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodOutputWithContext(ctx context.Context) FlowDistinguisherMethodOutput {
	return o
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodPtrOutput() FlowDistinguisherMethodPtrOutput {
	return o.ToFlowDistinguisherMethodPtrOutputWithContext(context.Background())
}

func (o FlowDistinguisherMethodOutput) ToFlowDistinguisherMethodPtrOutputWithContext(ctx context.Context) FlowDistinguisherMethodPtrOutput {
	return o.ApplyT(func(v FlowDistinguisherMethod) *FlowDistinguisherMethod {
		return &v
	}).(FlowDistinguisherMethodPtrOutput)
}

// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
func (o FlowDistinguisherMethodOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FlowDistinguisherMethod) string { return v.Type }).(pulumi.StringOutput)
}

type FlowDistinguisherMethodPtrOutput struct{ *pulumi.OutputState }

func (FlowDistinguisherMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDistinguisherMethod)(nil)).Elem()
}

func (o FlowDistinguisherMethodPtrOutput) ToFlowDistinguisherMethodPtrOutput() FlowDistinguisherMethodPtrOutput {
	return o
}

func (o FlowDistinguisherMethodPtrOutput) ToFlowDistinguisherMethodPtrOutputWithContext(ctx context.Context) FlowDistinguisherMethodPtrOutput {
	return o
}

func (o FlowDistinguisherMethodPtrOutput) Elem() FlowDistinguisherMethodOutput {
	return o.ApplyT(func(v *FlowDistinguisherMethod) FlowDistinguisherMethod { return *v }).(FlowDistinguisherMethodOutput)
}

// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
func (o FlowDistinguisherMethodPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowDistinguisherMethod) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type FlowSchemaType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMeta `pulumi:"metadata"`
	// `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec FlowSchemaSpec `pulumi:"spec"`
	// `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status FlowSchemaStatus `pulumi:"status"`
}

// FlowSchemaTypeInput is an input type that accepts FlowSchemaTypeArgs and FlowSchemaTypeOutput values.
// You can construct a concrete instance of `FlowSchemaTypeInput` via:
//
// 		 FlowSchemaTypeArgs{...}
//
type FlowSchemaTypeInput interface {
	pulumi.Input

	ToFlowSchemaTypeOutput() FlowSchemaTypeOutput
	ToFlowSchemaTypeOutputWithContext(context.Context) FlowSchemaTypeOutput
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type FlowSchemaTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaInput `pulumi:"metadata"`
	// `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec FlowSchemaSpecInput `pulumi:"spec"`
	// `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status FlowSchemaStatusInput `pulumi:"status"`
}

func (FlowSchemaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaType)(nil)).Elem()
}

func (i FlowSchemaTypeArgs) ToFlowSchemaTypeOutput() FlowSchemaTypeOutput {
	return i.ToFlowSchemaTypeOutputWithContext(context.Background())
}

func (i FlowSchemaTypeArgs) ToFlowSchemaTypeOutputWithContext(ctx context.Context) FlowSchemaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaTypeOutput)
}

// FlowSchemaTypeArrayInput is an input type that accepts FlowSchemaTypeArray and FlowSchemaTypeArrayOutput values.
// You can construct a concrete instance of `FlowSchemaTypeArrayInput` via:
//
// 		 FlowSchemaTypeArray{ FlowSchemaTypeArgs{...} }
//
type FlowSchemaTypeArrayInput interface {
	pulumi.Input

	ToFlowSchemaTypeArrayOutput() FlowSchemaTypeArrayOutput
	ToFlowSchemaTypeArrayOutputWithContext(context.Context) FlowSchemaTypeArrayOutput
}

type FlowSchemaTypeArray []FlowSchemaTypeInput

func (FlowSchemaTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowSchemaType)(nil)).Elem()
}

func (i FlowSchemaTypeArray) ToFlowSchemaTypeArrayOutput() FlowSchemaTypeArrayOutput {
	return i.ToFlowSchemaTypeArrayOutputWithContext(context.Background())
}

func (i FlowSchemaTypeArray) ToFlowSchemaTypeArrayOutputWithContext(ctx context.Context) FlowSchemaTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaTypeArrayOutput)
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type FlowSchemaTypeOutput struct{ *pulumi.OutputState }

func (FlowSchemaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaType)(nil)).Elem()
}

func (o FlowSchemaTypeOutput) ToFlowSchemaTypeOutput() FlowSchemaTypeOutput {
	return o
}

func (o FlowSchemaTypeOutput) ToFlowSchemaTypeOutputWithContext(ctx context.Context) FlowSchemaTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FlowSchemaTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSchemaType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FlowSchemaTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSchemaType) string { return v.Kind }).(pulumi.StringOutput)
}

// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FlowSchemaTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v FlowSchemaType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o FlowSchemaTypeOutput) Spec() FlowSchemaSpecOutput {
	return o.ApplyT(func(v FlowSchemaType) FlowSchemaSpec { return v.Spec }).(FlowSchemaSpecOutput)
}

// `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o FlowSchemaTypeOutput) Status() FlowSchemaStatusOutput {
	return o.ApplyT(func(v FlowSchemaType) FlowSchemaStatus { return v.Status }).(FlowSchemaStatusOutput)
}

type FlowSchemaTypeArrayOutput struct{ *pulumi.OutputState }

func (FlowSchemaTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowSchemaType)(nil)).Elem()
}

func (o FlowSchemaTypeArrayOutput) ToFlowSchemaTypeArrayOutput() FlowSchemaTypeArrayOutput {
	return o
}

func (o FlowSchemaTypeArrayOutput) ToFlowSchemaTypeArrayOutputWithContext(ctx context.Context) FlowSchemaTypeArrayOutput {
	return o
}

func (o FlowSchemaTypeArrayOutput) Index(i pulumi.IntInput) FlowSchemaTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowSchemaType {
		return vs[0].([]FlowSchemaType)[vs[1].(int)]
	}).(FlowSchemaTypeOutput)
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaCondition struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type *string `pulumi:"type"`
}

// FlowSchemaConditionInput is an input type that accepts FlowSchemaConditionArgs and FlowSchemaConditionOutput values.
// You can construct a concrete instance of `FlowSchemaConditionInput` via:
//
// 		 FlowSchemaConditionArgs{...}
//
type FlowSchemaConditionInput interface {
	pulumi.Input

	ToFlowSchemaConditionOutput() FlowSchemaConditionOutput
	ToFlowSchemaConditionOutputWithContext(context.Context) FlowSchemaConditionOutput
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaConditionArgs struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FlowSchemaConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaCondition)(nil)).Elem()
}

func (i FlowSchemaConditionArgs) ToFlowSchemaConditionOutput() FlowSchemaConditionOutput {
	return i.ToFlowSchemaConditionOutputWithContext(context.Background())
}

func (i FlowSchemaConditionArgs) ToFlowSchemaConditionOutputWithContext(ctx context.Context) FlowSchemaConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaConditionOutput)
}

// FlowSchemaConditionArrayInput is an input type that accepts FlowSchemaConditionArray and FlowSchemaConditionArrayOutput values.
// You can construct a concrete instance of `FlowSchemaConditionArrayInput` via:
//
// 		 FlowSchemaConditionArray{ FlowSchemaConditionArgs{...} }
//
type FlowSchemaConditionArrayInput interface {
	pulumi.Input

	ToFlowSchemaConditionArrayOutput() FlowSchemaConditionArrayOutput
	ToFlowSchemaConditionArrayOutputWithContext(context.Context) FlowSchemaConditionArrayOutput
}

type FlowSchemaConditionArray []FlowSchemaConditionInput

func (FlowSchemaConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowSchemaCondition)(nil)).Elem()
}

func (i FlowSchemaConditionArray) ToFlowSchemaConditionArrayOutput() FlowSchemaConditionArrayOutput {
	return i.ToFlowSchemaConditionArrayOutputWithContext(context.Background())
}

func (i FlowSchemaConditionArray) ToFlowSchemaConditionArrayOutputWithContext(ctx context.Context) FlowSchemaConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaConditionArrayOutput)
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaConditionOutput struct{ *pulumi.OutputState }

func (FlowSchemaConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaCondition)(nil)).Elem()
}

func (o FlowSchemaConditionOutput) ToFlowSchemaConditionOutput() FlowSchemaConditionOutput {
	return o
}

func (o FlowSchemaConditionOutput) ToFlowSchemaConditionOutputWithContext(ctx context.Context) FlowSchemaConditionOutput {
	return o
}

// `lastTransitionTime` is the last time the condition transitioned from one status to another.
func (o FlowSchemaConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSchemaCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// `message` is a human-readable message indicating details about last transition.
func (o FlowSchemaConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSchemaCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
func (o FlowSchemaConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSchemaCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// `status` is the status of the condition. Can be True, False, Unknown. Required.
func (o FlowSchemaConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSchemaCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `type` is the type of the condition. Required.
func (o FlowSchemaConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSchemaCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FlowSchemaConditionArrayOutput struct{ *pulumi.OutputState }

func (FlowSchemaConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowSchemaCondition)(nil)).Elem()
}

func (o FlowSchemaConditionArrayOutput) ToFlowSchemaConditionArrayOutput() FlowSchemaConditionArrayOutput {
	return o
}

func (o FlowSchemaConditionArrayOutput) ToFlowSchemaConditionArrayOutputWithContext(ctx context.Context) FlowSchemaConditionArrayOutput {
	return o
}

func (o FlowSchemaConditionArrayOutput) Index(i pulumi.IntInput) FlowSchemaConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowSchemaCondition {
		return vs[0].([]FlowSchemaCondition)[vs[1].(int)]
	}).(FlowSchemaConditionOutput)
}

// FlowSchemaList is a list of FlowSchema objects.
type FlowSchemaListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// `items` is a list of FlowSchemas.
	Items []FlowSchemaType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// `metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMeta `pulumi:"metadata"`
}

// FlowSchemaListTypeInput is an input type that accepts FlowSchemaListTypeArgs and FlowSchemaListTypeOutput values.
// You can construct a concrete instance of `FlowSchemaListTypeInput` via:
//
// 		 FlowSchemaListTypeArgs{...}
//
type FlowSchemaListTypeInput interface {
	pulumi.Input

	ToFlowSchemaListTypeOutput() FlowSchemaListTypeOutput
	ToFlowSchemaListTypeOutputWithContext(context.Context) FlowSchemaListTypeOutput
}

// FlowSchemaList is a list of FlowSchema objects.
type FlowSchemaListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// `items` is a list of FlowSchemas.
	Items FlowSchemaTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// `metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaInput `pulumi:"metadata"`
}

func (FlowSchemaListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaListType)(nil)).Elem()
}

func (i FlowSchemaListTypeArgs) ToFlowSchemaListTypeOutput() FlowSchemaListTypeOutput {
	return i.ToFlowSchemaListTypeOutputWithContext(context.Background())
}

func (i FlowSchemaListTypeArgs) ToFlowSchemaListTypeOutputWithContext(ctx context.Context) FlowSchemaListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaListTypeOutput)
}

// FlowSchemaList is a list of FlowSchema objects.
type FlowSchemaListTypeOutput struct{ *pulumi.OutputState }

func (FlowSchemaListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaListType)(nil)).Elem()
}

func (o FlowSchemaListTypeOutput) ToFlowSchemaListTypeOutput() FlowSchemaListTypeOutput {
	return o
}

func (o FlowSchemaListTypeOutput) ToFlowSchemaListTypeOutputWithContext(ctx context.Context) FlowSchemaListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FlowSchemaListTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSchemaListType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// `items` is a list of FlowSchemas.
func (o FlowSchemaListTypeOutput) Items() FlowSchemaTypeArrayOutput {
	return o.ApplyT(func(v FlowSchemaListType) []FlowSchemaType { return v.Items }).(FlowSchemaTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FlowSchemaListTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSchemaListType) string { return v.Kind }).(pulumi.StringOutput)
}

// `metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FlowSchemaListTypeOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v FlowSchemaListType) metav1.ListMeta { return v.Metadata }).(metav1.ListMetaOutput)
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpec struct {
	// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
	DistinguisherMethod *FlowDistinguisherMethod `pulumi:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence *int `pulumi:"matchingPrecedence"`
	// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
	PriorityLevelConfiguration PriorityLevelConfigurationReference `pulumi:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []PolicyRulesWithSubjects `pulumi:"rules"`
}

// FlowSchemaSpecInput is an input type that accepts FlowSchemaSpecArgs and FlowSchemaSpecOutput values.
// You can construct a concrete instance of `FlowSchemaSpecInput` via:
//
// 		 FlowSchemaSpecArgs{...}
//
type FlowSchemaSpecInput interface {
	pulumi.Input

	ToFlowSchemaSpecOutput() FlowSchemaSpecOutput
	ToFlowSchemaSpecOutputWithContext(context.Context) FlowSchemaSpecOutput
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpecArgs struct {
	// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
	DistinguisherMethod FlowDistinguisherMethodPtrInput `pulumi:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence pulumi.IntPtrInput `pulumi:"matchingPrecedence"`
	// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
	PriorityLevelConfiguration PriorityLevelConfigurationReferenceInput `pulumi:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules PolicyRulesWithSubjectsArrayInput `pulumi:"rules"`
}

func (FlowSchemaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaSpec)(nil)).Elem()
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecOutput() FlowSchemaSpecOutput {
	return i.ToFlowSchemaSpecOutputWithContext(context.Background())
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecOutputWithContext(ctx context.Context) FlowSchemaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaSpecOutput)
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecPtrOutput() FlowSchemaSpecPtrOutput {
	return i.ToFlowSchemaSpecPtrOutputWithContext(context.Background())
}

func (i FlowSchemaSpecArgs) ToFlowSchemaSpecPtrOutputWithContext(ctx context.Context) FlowSchemaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaSpecOutput).ToFlowSchemaSpecPtrOutputWithContext(ctx)
}

// FlowSchemaSpecPtrInput is an input type that accepts FlowSchemaSpecArgs, FlowSchemaSpecPtr and FlowSchemaSpecPtrOutput values.
// You can construct a concrete instance of `FlowSchemaSpecPtrInput` via:
//
// 		 FlowSchemaSpecArgs{...}
//
//  or:
//
// 		 nil
//
type FlowSchemaSpecPtrInput interface {
	pulumi.Input

	ToFlowSchemaSpecPtrOutput() FlowSchemaSpecPtrOutput
	ToFlowSchemaSpecPtrOutputWithContext(context.Context) FlowSchemaSpecPtrOutput
}

type flowSchemaSpecPtrType FlowSchemaSpecArgs

func FlowSchemaSpecPtr(v *FlowSchemaSpecArgs) FlowSchemaSpecPtrInput {
	return (*flowSchemaSpecPtrType)(v)
}

func (*flowSchemaSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSchemaSpec)(nil)).Elem()
}

func (i *flowSchemaSpecPtrType) ToFlowSchemaSpecPtrOutput() FlowSchemaSpecPtrOutput {
	return i.ToFlowSchemaSpecPtrOutputWithContext(context.Background())
}

func (i *flowSchemaSpecPtrType) ToFlowSchemaSpecPtrOutputWithContext(ctx context.Context) FlowSchemaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaSpecPtrOutput)
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpecOutput struct{ *pulumi.OutputState }

func (FlowSchemaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaSpec)(nil)).Elem()
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecOutput() FlowSchemaSpecOutput {
	return o
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecOutputWithContext(ctx context.Context) FlowSchemaSpecOutput {
	return o
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecPtrOutput() FlowSchemaSpecPtrOutput {
	return o.ToFlowSchemaSpecPtrOutputWithContext(context.Background())
}

func (o FlowSchemaSpecOutput) ToFlowSchemaSpecPtrOutputWithContext(ctx context.Context) FlowSchemaSpecPtrOutput {
	return o.ApplyT(func(v FlowSchemaSpec) *FlowSchemaSpec {
		return &v
	}).(FlowSchemaSpecPtrOutput)
}

// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
func (o FlowSchemaSpecOutput) DistinguisherMethod() FlowDistinguisherMethodPtrOutput {
	return o.ApplyT(func(v FlowSchemaSpec) *FlowDistinguisherMethod { return v.DistinguisherMethod }).(FlowDistinguisherMethodPtrOutput)
}

// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
func (o FlowSchemaSpecOutput) MatchingPrecedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSchemaSpec) *int { return v.MatchingPrecedence }).(pulumi.IntPtrOutput)
}

// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
func (o FlowSchemaSpecOutput) PriorityLevelConfiguration() PriorityLevelConfigurationReferenceOutput {
	return o.ApplyT(func(v FlowSchemaSpec) PriorityLevelConfigurationReference { return v.PriorityLevelConfiguration }).(PriorityLevelConfigurationReferenceOutput)
}

// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
func (o FlowSchemaSpecOutput) Rules() PolicyRulesWithSubjectsArrayOutput {
	return o.ApplyT(func(v FlowSchemaSpec) []PolicyRulesWithSubjects { return v.Rules }).(PolicyRulesWithSubjectsArrayOutput)
}

type FlowSchemaSpecPtrOutput struct{ *pulumi.OutputState }

func (FlowSchemaSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSchemaSpec)(nil)).Elem()
}

func (o FlowSchemaSpecPtrOutput) ToFlowSchemaSpecPtrOutput() FlowSchemaSpecPtrOutput {
	return o
}

func (o FlowSchemaSpecPtrOutput) ToFlowSchemaSpecPtrOutputWithContext(ctx context.Context) FlowSchemaSpecPtrOutput {
	return o
}

func (o FlowSchemaSpecPtrOutput) Elem() FlowSchemaSpecOutput {
	return o.ApplyT(func(v *FlowSchemaSpec) FlowSchemaSpec { return *v }).(FlowSchemaSpecOutput)
}

// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
func (o FlowSchemaSpecPtrOutput) DistinguisherMethod() FlowDistinguisherMethodPtrOutput {
	return o.ApplyT(func(v *FlowSchemaSpec) *FlowDistinguisherMethod {
		if v == nil {
			return nil
		}
		return v.DistinguisherMethod
	}).(FlowDistinguisherMethodPtrOutput)
}

// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
func (o FlowSchemaSpecPtrOutput) MatchingPrecedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSchemaSpec) *int {
		if v == nil {
			return nil
		}
		return v.MatchingPrecedence
	}).(pulumi.IntPtrOutput)
}

// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
func (o FlowSchemaSpecPtrOutput) PriorityLevelConfiguration() PriorityLevelConfigurationReferencePtrOutput {
	return o.ApplyT(func(v *FlowSchemaSpec) *PriorityLevelConfigurationReference {
		if v == nil {
			return nil
		}
		return &v.PriorityLevelConfiguration
	}).(PriorityLevelConfigurationReferencePtrOutput)
}

// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
func (o FlowSchemaSpecPtrOutput) Rules() PolicyRulesWithSubjectsArrayOutput {
	return o.ApplyT(func(v *FlowSchemaSpec) []PolicyRulesWithSubjects {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(PolicyRulesWithSubjectsArrayOutput)
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []FlowSchemaCondition `pulumi:"conditions"`
}

// FlowSchemaStatusInput is an input type that accepts FlowSchemaStatusArgs and FlowSchemaStatusOutput values.
// You can construct a concrete instance of `FlowSchemaStatusInput` via:
//
// 		 FlowSchemaStatusArgs{...}
//
type FlowSchemaStatusInput interface {
	pulumi.Input

	ToFlowSchemaStatusOutput() FlowSchemaStatusOutput
	ToFlowSchemaStatusOutputWithContext(context.Context) FlowSchemaStatusOutput
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatusArgs struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions FlowSchemaConditionArrayInput `pulumi:"conditions"`
}

func (FlowSchemaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaStatus)(nil)).Elem()
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusOutput() FlowSchemaStatusOutput {
	return i.ToFlowSchemaStatusOutputWithContext(context.Background())
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusOutputWithContext(ctx context.Context) FlowSchemaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaStatusOutput)
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusPtrOutput() FlowSchemaStatusPtrOutput {
	return i.ToFlowSchemaStatusPtrOutputWithContext(context.Background())
}

func (i FlowSchemaStatusArgs) ToFlowSchemaStatusPtrOutputWithContext(ctx context.Context) FlowSchemaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaStatusOutput).ToFlowSchemaStatusPtrOutputWithContext(ctx)
}

// FlowSchemaStatusPtrInput is an input type that accepts FlowSchemaStatusArgs, FlowSchemaStatusPtr and FlowSchemaStatusPtrOutput values.
// You can construct a concrete instance of `FlowSchemaStatusPtrInput` via:
//
// 		 FlowSchemaStatusArgs{...}
//
//  or:
//
// 		 nil
//
type FlowSchemaStatusPtrInput interface {
	pulumi.Input

	ToFlowSchemaStatusPtrOutput() FlowSchemaStatusPtrOutput
	ToFlowSchemaStatusPtrOutputWithContext(context.Context) FlowSchemaStatusPtrOutput
}

type flowSchemaStatusPtrType FlowSchemaStatusArgs

func FlowSchemaStatusPtr(v *FlowSchemaStatusArgs) FlowSchemaStatusPtrInput {
	return (*flowSchemaStatusPtrType)(v)
}

func (*flowSchemaStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSchemaStatus)(nil)).Elem()
}

func (i *flowSchemaStatusPtrType) ToFlowSchemaStatusPtrOutput() FlowSchemaStatusPtrOutput {
	return i.ToFlowSchemaStatusPtrOutputWithContext(context.Background())
}

func (i *flowSchemaStatusPtrType) ToFlowSchemaStatusPtrOutputWithContext(ctx context.Context) FlowSchemaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSchemaStatusPtrOutput)
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatusOutput struct{ *pulumi.OutputState }

func (FlowSchemaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSchemaStatus)(nil)).Elem()
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusOutput() FlowSchemaStatusOutput {
	return o
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusOutputWithContext(ctx context.Context) FlowSchemaStatusOutput {
	return o
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusPtrOutput() FlowSchemaStatusPtrOutput {
	return o.ToFlowSchemaStatusPtrOutputWithContext(context.Background())
}

func (o FlowSchemaStatusOutput) ToFlowSchemaStatusPtrOutputWithContext(ctx context.Context) FlowSchemaStatusPtrOutput {
	return o.ApplyT(func(v FlowSchemaStatus) *FlowSchemaStatus {
		return &v
	}).(FlowSchemaStatusPtrOutput)
}

// `conditions` is a list of the current states of FlowSchema.
func (o FlowSchemaStatusOutput) Conditions() FlowSchemaConditionArrayOutput {
	return o.ApplyT(func(v FlowSchemaStatus) []FlowSchemaCondition { return v.Conditions }).(FlowSchemaConditionArrayOutput)
}

type FlowSchemaStatusPtrOutput struct{ *pulumi.OutputState }

func (FlowSchemaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSchemaStatus)(nil)).Elem()
}

func (o FlowSchemaStatusPtrOutput) ToFlowSchemaStatusPtrOutput() FlowSchemaStatusPtrOutput {
	return o
}

func (o FlowSchemaStatusPtrOutput) ToFlowSchemaStatusPtrOutputWithContext(ctx context.Context) FlowSchemaStatusPtrOutput {
	return o
}

func (o FlowSchemaStatusPtrOutput) Elem() FlowSchemaStatusOutput {
	return o.ApplyT(func(v *FlowSchemaStatus) FlowSchemaStatus { return *v }).(FlowSchemaStatusOutput)
}

// `conditions` is a list of the current states of FlowSchema.
func (o FlowSchemaStatusPtrOutput) Conditions() FlowSchemaConditionArrayOutput {
	return o.ApplyT(func(v *FlowSchemaStatus) []FlowSchemaCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(FlowSchemaConditionArrayOutput)
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubject struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name string `pulumi:"name"`
}

// GroupSubjectInput is an input type that accepts GroupSubjectArgs and GroupSubjectOutput values.
// You can construct a concrete instance of `GroupSubjectInput` via:
//
// 		 GroupSubjectArgs{...}
//
type GroupSubjectInput interface {
	pulumi.Input

	ToGroupSubjectOutput() GroupSubjectOutput
	ToGroupSubjectOutputWithContext(context.Context) GroupSubjectOutput
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubjectArgs struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubject)(nil)).Elem()
}

func (i GroupSubjectArgs) ToGroupSubjectOutput() GroupSubjectOutput {
	return i.ToGroupSubjectOutputWithContext(context.Background())
}

func (i GroupSubjectArgs) ToGroupSubjectOutputWithContext(ctx context.Context) GroupSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubjectOutput)
}

func (i GroupSubjectArgs) ToGroupSubjectPtrOutput() GroupSubjectPtrOutput {
	return i.ToGroupSubjectPtrOutputWithContext(context.Background())
}

func (i GroupSubjectArgs) ToGroupSubjectPtrOutputWithContext(ctx context.Context) GroupSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubjectOutput).ToGroupSubjectPtrOutputWithContext(ctx)
}

// GroupSubjectPtrInput is an input type that accepts GroupSubjectArgs, GroupSubjectPtr and GroupSubjectPtrOutput values.
// You can construct a concrete instance of `GroupSubjectPtrInput` via:
//
// 		 GroupSubjectArgs{...}
//
//  or:
//
// 		 nil
//
type GroupSubjectPtrInput interface {
	pulumi.Input

	ToGroupSubjectPtrOutput() GroupSubjectPtrOutput
	ToGroupSubjectPtrOutputWithContext(context.Context) GroupSubjectPtrOutput
}

type groupSubjectPtrType GroupSubjectArgs

func GroupSubjectPtr(v *GroupSubjectArgs) GroupSubjectPtrInput {
	return (*groupSubjectPtrType)(v)
}

func (*groupSubjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSubject)(nil)).Elem()
}

func (i *groupSubjectPtrType) ToGroupSubjectPtrOutput() GroupSubjectPtrOutput {
	return i.ToGroupSubjectPtrOutputWithContext(context.Background())
}

func (i *groupSubjectPtrType) ToGroupSubjectPtrOutputWithContext(ctx context.Context) GroupSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubjectPtrOutput)
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubjectOutput struct{ *pulumi.OutputState }

func (GroupSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubject)(nil)).Elem()
}

func (o GroupSubjectOutput) ToGroupSubjectOutput() GroupSubjectOutput {
	return o
}

func (o GroupSubjectOutput) ToGroupSubjectOutputWithContext(ctx context.Context) GroupSubjectOutput {
	return o
}

func (o GroupSubjectOutput) ToGroupSubjectPtrOutput() GroupSubjectPtrOutput {
	return o.ToGroupSubjectPtrOutputWithContext(context.Background())
}

func (o GroupSubjectOutput) ToGroupSubjectPtrOutputWithContext(ctx context.Context) GroupSubjectPtrOutput {
	return o.ApplyT(func(v GroupSubject) *GroupSubject {
		return &v
	}).(GroupSubjectPtrOutput)
}

// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
func (o GroupSubjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupSubject) string { return v.Name }).(pulumi.StringOutput)
}

type GroupSubjectPtrOutput struct{ *pulumi.OutputState }

func (GroupSubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSubject)(nil)).Elem()
}

func (o GroupSubjectPtrOutput) ToGroupSubjectPtrOutput() GroupSubjectPtrOutput {
	return o
}

func (o GroupSubjectPtrOutput) ToGroupSubjectPtrOutputWithContext(ctx context.Context) GroupSubjectPtrOutput {
	return o
}

func (o GroupSubjectPtrOutput) Elem() GroupSubjectOutput {
	return o.ApplyT(func(v *GroupSubject) GroupSubject { return *v }).(GroupSubjectOutput)
}

// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
func (o GroupSubjectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSubject) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponse struct {
	// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
	Queuing *QueuingConfiguration `pulumi:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `pulumi:"type"`
}

// LimitResponseInput is an input type that accepts LimitResponseArgs and LimitResponseOutput values.
// You can construct a concrete instance of `LimitResponseInput` via:
//
// 		 LimitResponseArgs{...}
//
type LimitResponseInput interface {
	pulumi.Input

	ToLimitResponseOutput() LimitResponseOutput
	ToLimitResponseOutputWithContext(context.Context) LimitResponseOutput
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponseArgs struct {
	// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
	Queuing QueuingConfigurationPtrInput `pulumi:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LimitResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitResponse)(nil)).Elem()
}

func (i LimitResponseArgs) ToLimitResponseOutput() LimitResponseOutput {
	return i.ToLimitResponseOutputWithContext(context.Background())
}

func (i LimitResponseArgs) ToLimitResponseOutputWithContext(ctx context.Context) LimitResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitResponseOutput)
}

func (i LimitResponseArgs) ToLimitResponsePtrOutput() LimitResponsePtrOutput {
	return i.ToLimitResponsePtrOutputWithContext(context.Background())
}

func (i LimitResponseArgs) ToLimitResponsePtrOutputWithContext(ctx context.Context) LimitResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitResponseOutput).ToLimitResponsePtrOutputWithContext(ctx)
}

// LimitResponsePtrInput is an input type that accepts LimitResponseArgs, LimitResponsePtr and LimitResponsePtrOutput values.
// You can construct a concrete instance of `LimitResponsePtrInput` via:
//
// 		 LimitResponseArgs{...}
//
//  or:
//
// 		 nil
//
type LimitResponsePtrInput interface {
	pulumi.Input

	ToLimitResponsePtrOutput() LimitResponsePtrOutput
	ToLimitResponsePtrOutputWithContext(context.Context) LimitResponsePtrOutput
}

type limitResponsePtrType LimitResponseArgs

func LimitResponsePtr(v *LimitResponseArgs) LimitResponsePtrInput {
	return (*limitResponsePtrType)(v)
}

func (*limitResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitResponse)(nil)).Elem()
}

func (i *limitResponsePtrType) ToLimitResponsePtrOutput() LimitResponsePtrOutput {
	return i.ToLimitResponsePtrOutputWithContext(context.Background())
}

func (i *limitResponsePtrType) ToLimitResponsePtrOutputWithContext(ctx context.Context) LimitResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitResponsePtrOutput)
}

// LimitResponse defines how to handle requests that can not be executed right now.
type LimitResponseOutput struct{ *pulumi.OutputState }

func (LimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitResponse)(nil)).Elem()
}

func (o LimitResponseOutput) ToLimitResponseOutput() LimitResponseOutput {
	return o
}

func (o LimitResponseOutput) ToLimitResponseOutputWithContext(ctx context.Context) LimitResponseOutput {
	return o
}

func (o LimitResponseOutput) ToLimitResponsePtrOutput() LimitResponsePtrOutput {
	return o.ToLimitResponsePtrOutputWithContext(context.Background())
}

func (o LimitResponseOutput) ToLimitResponsePtrOutputWithContext(ctx context.Context) LimitResponsePtrOutput {
	return o.ApplyT(func(v LimitResponse) *LimitResponse {
		return &v
	}).(LimitResponsePtrOutput)
}

// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
func (o LimitResponseOutput) Queuing() QueuingConfigurationPtrOutput {
	return o.ApplyT(func(v LimitResponse) *QueuingConfiguration { return v.Queuing }).(QueuingConfigurationPtrOutput)
}

// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
func (o LimitResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LimitResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LimitResponsePtrOutput struct{ *pulumi.OutputState }

func (LimitResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitResponse)(nil)).Elem()
}

func (o LimitResponsePtrOutput) ToLimitResponsePtrOutput() LimitResponsePtrOutput {
	return o
}

func (o LimitResponsePtrOutput) ToLimitResponsePtrOutputWithContext(ctx context.Context) LimitResponsePtrOutput {
	return o
}

func (o LimitResponsePtrOutput) Elem() LimitResponseOutput {
	return o.ApplyT(func(v *LimitResponse) LimitResponse { return *v }).(LimitResponseOutput)
}

// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
func (o LimitResponsePtrOutput) Queuing() QueuingConfigurationPtrOutput {
	return o.ApplyT(func(v *LimitResponse) *QueuingConfiguration {
		if v == nil {
			return nil
		}
		return v.Queuing
	}).(QueuingConfigurationPtrOutput)
}

// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
func (o LimitResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LimitResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfiguration struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares *int `pulumi:"assuredConcurrencyShares"`
	// `limitResponse` indicates what to do with requests that can not be executed right now
	LimitResponse *LimitResponse `pulumi:"limitResponse"`
}

// LimitedPriorityLevelConfigurationInput is an input type that accepts LimitedPriorityLevelConfigurationArgs and LimitedPriorityLevelConfigurationOutput values.
// You can construct a concrete instance of `LimitedPriorityLevelConfigurationInput` via:
//
// 		 LimitedPriorityLevelConfigurationArgs{...}
//
type LimitedPriorityLevelConfigurationInput interface {
	pulumi.Input

	ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput
	ToLimitedPriorityLevelConfigurationOutputWithContext(context.Context) LimitedPriorityLevelConfigurationOutput
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfigurationArgs struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares pulumi.IntPtrInput `pulumi:"assuredConcurrencyShares"`
	// `limitResponse` indicates what to do with requests that can not be executed right now
	LimitResponse LimitResponsePtrInput `pulumi:"limitResponse"`
}

func (LimitedPriorityLevelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput {
	return i.ToLimitedPriorityLevelConfigurationOutputWithContext(context.Background())
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitedPriorityLevelConfigurationOutput)
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationPtrOutput() LimitedPriorityLevelConfigurationPtrOutput {
	return i.ToLimitedPriorityLevelConfigurationPtrOutputWithContext(context.Background())
}

func (i LimitedPriorityLevelConfigurationArgs) ToLimitedPriorityLevelConfigurationPtrOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitedPriorityLevelConfigurationOutput).ToLimitedPriorityLevelConfigurationPtrOutputWithContext(ctx)
}

// LimitedPriorityLevelConfigurationPtrInput is an input type that accepts LimitedPriorityLevelConfigurationArgs, LimitedPriorityLevelConfigurationPtr and LimitedPriorityLevelConfigurationPtrOutput values.
// You can construct a concrete instance of `LimitedPriorityLevelConfigurationPtrInput` via:
//
// 		 LimitedPriorityLevelConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type LimitedPriorityLevelConfigurationPtrInput interface {
	pulumi.Input

	ToLimitedPriorityLevelConfigurationPtrOutput() LimitedPriorityLevelConfigurationPtrOutput
	ToLimitedPriorityLevelConfigurationPtrOutputWithContext(context.Context) LimitedPriorityLevelConfigurationPtrOutput
}

type limitedPriorityLevelConfigurationPtrType LimitedPriorityLevelConfigurationArgs

func LimitedPriorityLevelConfigurationPtr(v *LimitedPriorityLevelConfigurationArgs) LimitedPriorityLevelConfigurationPtrInput {
	return (*limitedPriorityLevelConfigurationPtrType)(v)
}

func (*limitedPriorityLevelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (i *limitedPriorityLevelConfigurationPtrType) ToLimitedPriorityLevelConfigurationPtrOutput() LimitedPriorityLevelConfigurationPtrOutput {
	return i.ToLimitedPriorityLevelConfigurationPtrOutputWithContext(context.Background())
}

func (i *limitedPriorityLevelConfigurationPtrType) ToLimitedPriorityLevelConfigurationPtrOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitedPriorityLevelConfigurationPtrOutput)
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfigurationOutput struct{ *pulumi.OutputState }

func (LimitedPriorityLevelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationOutput() LimitedPriorityLevelConfigurationOutput {
	return o
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationOutput {
	return o
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationPtrOutput() LimitedPriorityLevelConfigurationPtrOutput {
	return o.ToLimitedPriorityLevelConfigurationPtrOutputWithContext(context.Background())
}

func (o LimitedPriorityLevelConfigurationOutput) ToLimitedPriorityLevelConfigurationPtrOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationPtrOutput {
	return o.ApplyT(func(v LimitedPriorityLevelConfiguration) *LimitedPriorityLevelConfiguration {
		return &v
	}).(LimitedPriorityLevelConfigurationPtrOutput)
}

// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
//
//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
//
// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
func (o LimitedPriorityLevelConfigurationOutput) AssuredConcurrencyShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LimitedPriorityLevelConfiguration) *int { return v.AssuredConcurrencyShares }).(pulumi.IntPtrOutput)
}

// `limitResponse` indicates what to do with requests that can not be executed right now
func (o LimitedPriorityLevelConfigurationOutput) LimitResponse() LimitResponsePtrOutput {
	return o.ApplyT(func(v LimitedPriorityLevelConfiguration) *LimitResponse { return v.LimitResponse }).(LimitResponsePtrOutput)
}

type LimitedPriorityLevelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LimitedPriorityLevelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitedPriorityLevelConfiguration)(nil)).Elem()
}

func (o LimitedPriorityLevelConfigurationPtrOutput) ToLimitedPriorityLevelConfigurationPtrOutput() LimitedPriorityLevelConfigurationPtrOutput {
	return o
}

func (o LimitedPriorityLevelConfigurationPtrOutput) ToLimitedPriorityLevelConfigurationPtrOutputWithContext(ctx context.Context) LimitedPriorityLevelConfigurationPtrOutput {
	return o
}

func (o LimitedPriorityLevelConfigurationPtrOutput) Elem() LimitedPriorityLevelConfigurationOutput {
	return o.ApplyT(func(v *LimitedPriorityLevelConfiguration) LimitedPriorityLevelConfiguration { return *v }).(LimitedPriorityLevelConfigurationOutput)
}

// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
//
//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
//
// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
func (o LimitedPriorityLevelConfigurationPtrOutput) AssuredConcurrencyShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LimitedPriorityLevelConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.AssuredConcurrencyShares
	}).(pulumi.IntPtrOutput)
}

// `limitResponse` indicates what to do with requests that can not be executed right now
func (o LimitedPriorityLevelConfigurationPtrOutput) LimitResponse() LimitResponsePtrOutput {
	return o.ApplyT(func(v *LimitedPriorityLevelConfiguration) *LimitResponse {
		if v == nil {
			return nil
		}
		return v.LimitResponse
	}).(LimitResponsePtrOutput)
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []string `pulumi:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []string `pulumi:"verbs"`
}

// NonResourcePolicyRuleInput is an input type that accepts NonResourcePolicyRuleArgs and NonResourcePolicyRuleOutput values.
// You can construct a concrete instance of `NonResourcePolicyRuleInput` via:
//
// 		 NonResourcePolicyRuleArgs{...}
//
type NonResourcePolicyRuleInput interface {
	pulumi.Input

	ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput
	ToNonResourcePolicyRuleOutputWithContext(context.Context) NonResourcePolicyRuleOutput
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRuleArgs struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs pulumi.StringArrayInput `pulumi:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (NonResourcePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourcePolicyRule)(nil)).Elem()
}

func (i NonResourcePolicyRuleArgs) ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput {
	return i.ToNonResourcePolicyRuleOutputWithContext(context.Background())
}

func (i NonResourcePolicyRuleArgs) ToNonResourcePolicyRuleOutputWithContext(ctx context.Context) NonResourcePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourcePolicyRuleOutput)
}

// NonResourcePolicyRuleArrayInput is an input type that accepts NonResourcePolicyRuleArray and NonResourcePolicyRuleArrayOutput values.
// You can construct a concrete instance of `NonResourcePolicyRuleArrayInput` via:
//
// 		 NonResourcePolicyRuleArray{ NonResourcePolicyRuleArgs{...} }
//
type NonResourcePolicyRuleArrayInput interface {
	pulumi.Input

	ToNonResourcePolicyRuleArrayOutput() NonResourcePolicyRuleArrayOutput
	ToNonResourcePolicyRuleArrayOutputWithContext(context.Context) NonResourcePolicyRuleArrayOutput
}

type NonResourcePolicyRuleArray []NonResourcePolicyRuleInput

func (NonResourcePolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourcePolicyRule)(nil)).Elem()
}

func (i NonResourcePolicyRuleArray) ToNonResourcePolicyRuleArrayOutput() NonResourcePolicyRuleArrayOutput {
	return i.ToNonResourcePolicyRuleArrayOutputWithContext(context.Background())
}

func (i NonResourcePolicyRuleArray) ToNonResourcePolicyRuleArrayOutputWithContext(ctx context.Context) NonResourcePolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonResourcePolicyRuleArrayOutput)
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRuleOutput struct{ *pulumi.OutputState }

func (NonResourcePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonResourcePolicyRule)(nil)).Elem()
}

func (o NonResourcePolicyRuleOutput) ToNonResourcePolicyRuleOutput() NonResourcePolicyRuleOutput {
	return o
}

func (o NonResourcePolicyRuleOutput) ToNonResourcePolicyRuleOutputWithContext(ctx context.Context) NonResourcePolicyRuleOutput {
	return o
}

// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
//   - "/healthz" is legal
//   - "/hea*" is illegal
//   - "/hea" is legal but matches nothing
//   - "/hea/*" also matches nothing
//   - "/healthz/*" matches all per-component health checks.
// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
func (o NonResourcePolicyRuleOutput) NonResourceURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourcePolicyRule) []string { return v.NonResourceURLs }).(pulumi.StringArrayOutput)
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
func (o NonResourcePolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NonResourcePolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type NonResourcePolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (NonResourcePolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonResourcePolicyRule)(nil)).Elem()
}

func (o NonResourcePolicyRuleArrayOutput) ToNonResourcePolicyRuleArrayOutput() NonResourcePolicyRuleArrayOutput {
	return o
}

func (o NonResourcePolicyRuleArrayOutput) ToNonResourcePolicyRuleArrayOutputWithContext(ctx context.Context) NonResourcePolicyRuleArrayOutput {
	return o
}

func (o NonResourcePolicyRuleArrayOutput) Index(i pulumi.IntInput) NonResourcePolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonResourcePolicyRule {
		return vs[0].([]NonResourcePolicyRule)[vs[1].(int)]
	}).(NonResourcePolicyRuleOutput)
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []NonResourcePolicyRule `pulumi:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []ResourcePolicyRule `pulumi:"resourceRules"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []Subject `pulumi:"subjects"`
}

// PolicyRulesWithSubjectsInput is an input type that accepts PolicyRulesWithSubjectsArgs and PolicyRulesWithSubjectsOutput values.
// You can construct a concrete instance of `PolicyRulesWithSubjectsInput` via:
//
// 		 PolicyRulesWithSubjectsArgs{...}
//
type PolicyRulesWithSubjectsInput interface {
	pulumi.Input

	ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput
	ToPolicyRulesWithSubjectsOutputWithContext(context.Context) PolicyRulesWithSubjectsOutput
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjectsArgs struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules NonResourcePolicyRuleArrayInput `pulumi:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules ResourcePolicyRuleArrayInput `pulumi:"resourceRules"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects SubjectArrayInput `pulumi:"subjects"`
}

func (PolicyRulesWithSubjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRulesWithSubjects)(nil)).Elem()
}

func (i PolicyRulesWithSubjectsArgs) ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput {
	return i.ToPolicyRulesWithSubjectsOutputWithContext(context.Background())
}

func (i PolicyRulesWithSubjectsArgs) ToPolicyRulesWithSubjectsOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRulesWithSubjectsOutput)
}

// PolicyRulesWithSubjectsArrayInput is an input type that accepts PolicyRulesWithSubjectsArray and PolicyRulesWithSubjectsArrayOutput values.
// You can construct a concrete instance of `PolicyRulesWithSubjectsArrayInput` via:
//
// 		 PolicyRulesWithSubjectsArray{ PolicyRulesWithSubjectsArgs{...} }
//
type PolicyRulesWithSubjectsArrayInput interface {
	pulumi.Input

	ToPolicyRulesWithSubjectsArrayOutput() PolicyRulesWithSubjectsArrayOutput
	ToPolicyRulesWithSubjectsArrayOutputWithContext(context.Context) PolicyRulesWithSubjectsArrayOutput
}

type PolicyRulesWithSubjectsArray []PolicyRulesWithSubjectsInput

func (PolicyRulesWithSubjectsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRulesWithSubjects)(nil)).Elem()
}

func (i PolicyRulesWithSubjectsArray) ToPolicyRulesWithSubjectsArrayOutput() PolicyRulesWithSubjectsArrayOutput {
	return i.ToPolicyRulesWithSubjectsArrayOutputWithContext(context.Background())
}

func (i PolicyRulesWithSubjectsArray) ToPolicyRulesWithSubjectsArrayOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRulesWithSubjectsArrayOutput)
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjectsOutput struct{ *pulumi.OutputState }

func (PolicyRulesWithSubjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRulesWithSubjects)(nil)).Elem()
}

func (o PolicyRulesWithSubjectsOutput) ToPolicyRulesWithSubjectsOutput() PolicyRulesWithSubjectsOutput {
	return o
}

func (o PolicyRulesWithSubjectsOutput) ToPolicyRulesWithSubjectsOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsOutput {
	return o
}

// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
func (o PolicyRulesWithSubjectsOutput) NonResourceRules() NonResourcePolicyRuleArrayOutput {
	return o.ApplyT(func(v PolicyRulesWithSubjects) []NonResourcePolicyRule { return v.NonResourceRules }).(NonResourcePolicyRuleArrayOutput)
}

// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
func (o PolicyRulesWithSubjectsOutput) ResourceRules() ResourcePolicyRuleArrayOutput {
	return o.ApplyT(func(v PolicyRulesWithSubjects) []ResourcePolicyRule { return v.ResourceRules }).(ResourcePolicyRuleArrayOutput)
}

// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
func (o PolicyRulesWithSubjectsOutput) Subjects() SubjectArrayOutput {
	return o.ApplyT(func(v PolicyRulesWithSubjects) []Subject { return v.Subjects }).(SubjectArrayOutput)
}

type PolicyRulesWithSubjectsArrayOutput struct{ *pulumi.OutputState }

func (PolicyRulesWithSubjectsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRulesWithSubjects)(nil)).Elem()
}

func (o PolicyRulesWithSubjectsArrayOutput) ToPolicyRulesWithSubjectsArrayOutput() PolicyRulesWithSubjectsArrayOutput {
	return o
}

func (o PolicyRulesWithSubjectsArrayOutput) ToPolicyRulesWithSubjectsArrayOutputWithContext(ctx context.Context) PolicyRulesWithSubjectsArrayOutput {
	return o
}

func (o PolicyRulesWithSubjectsArrayOutput) Index(i pulumi.IntInput) PolicyRulesWithSubjectsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRulesWithSubjects {
		return vs[0].([]PolicyRulesWithSubjects)[vs[1].(int)]
	}).(PolicyRulesWithSubjectsOutput)
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type PriorityLevelConfigurationType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMeta `pulumi:"metadata"`
	// `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PriorityLevelConfigurationSpec `pulumi:"spec"`
	// `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PriorityLevelConfigurationStatus `pulumi:"status"`
}

// PriorityLevelConfigurationTypeInput is an input type that accepts PriorityLevelConfigurationTypeArgs and PriorityLevelConfigurationTypeOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationTypeInput` via:
//
// 		 PriorityLevelConfigurationTypeArgs{...}
//
type PriorityLevelConfigurationTypeInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationTypeOutput() PriorityLevelConfigurationTypeOutput
	ToPriorityLevelConfigurationTypeOutputWithContext(context.Context) PriorityLevelConfigurationTypeOutput
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type PriorityLevelConfigurationTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaInput `pulumi:"metadata"`
	// `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PriorityLevelConfigurationSpecInput `pulumi:"spec"`
	// `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PriorityLevelConfigurationStatusInput `pulumi:"status"`
}

func (PriorityLevelConfigurationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationType)(nil)).Elem()
}

func (i PriorityLevelConfigurationTypeArgs) ToPriorityLevelConfigurationTypeOutput() PriorityLevelConfigurationTypeOutput {
	return i.ToPriorityLevelConfigurationTypeOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationTypeArgs) ToPriorityLevelConfigurationTypeOutputWithContext(ctx context.Context) PriorityLevelConfigurationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationTypeOutput)
}

// PriorityLevelConfigurationTypeArrayInput is an input type that accepts PriorityLevelConfigurationTypeArray and PriorityLevelConfigurationTypeArrayOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationTypeArrayInput` via:
//
// 		 PriorityLevelConfigurationTypeArray{ PriorityLevelConfigurationTypeArgs{...} }
//
type PriorityLevelConfigurationTypeArrayInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationTypeArrayOutput() PriorityLevelConfigurationTypeArrayOutput
	ToPriorityLevelConfigurationTypeArrayOutputWithContext(context.Context) PriorityLevelConfigurationTypeArrayOutput
}

type PriorityLevelConfigurationTypeArray []PriorityLevelConfigurationTypeInput

func (PriorityLevelConfigurationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PriorityLevelConfigurationType)(nil)).Elem()
}

func (i PriorityLevelConfigurationTypeArray) ToPriorityLevelConfigurationTypeArrayOutput() PriorityLevelConfigurationTypeArrayOutput {
	return i.ToPriorityLevelConfigurationTypeArrayOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationTypeArray) ToPriorityLevelConfigurationTypeArrayOutputWithContext(ctx context.Context) PriorityLevelConfigurationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationTypeArrayOutput)
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type PriorityLevelConfigurationTypeOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationType)(nil)).Elem()
}

func (o PriorityLevelConfigurationTypeOutput) ToPriorityLevelConfigurationTypeOutput() PriorityLevelConfigurationTypeOutput {
	return o
}

func (o PriorityLevelConfigurationTypeOutput) ToPriorityLevelConfigurationTypeOutputWithContext(ctx context.Context) PriorityLevelConfigurationTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PriorityLevelConfigurationTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PriorityLevelConfigurationTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationType) string { return v.Kind }).(pulumi.StringOutput)
}

// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PriorityLevelConfigurationTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PriorityLevelConfigurationTypeOutput) Spec() PriorityLevelConfigurationSpecOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationType) PriorityLevelConfigurationSpec { return v.Spec }).(PriorityLevelConfigurationSpecOutput)
}

// `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PriorityLevelConfigurationTypeOutput) Status() PriorityLevelConfigurationStatusOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationType) PriorityLevelConfigurationStatus { return v.Status }).(PriorityLevelConfigurationStatusOutput)
}

type PriorityLevelConfigurationTypeArrayOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PriorityLevelConfigurationType)(nil)).Elem()
}

func (o PriorityLevelConfigurationTypeArrayOutput) ToPriorityLevelConfigurationTypeArrayOutput() PriorityLevelConfigurationTypeArrayOutput {
	return o
}

func (o PriorityLevelConfigurationTypeArrayOutput) ToPriorityLevelConfigurationTypeArrayOutputWithContext(ctx context.Context) PriorityLevelConfigurationTypeArrayOutput {
	return o
}

func (o PriorityLevelConfigurationTypeArrayOutput) Index(i pulumi.IntInput) PriorityLevelConfigurationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PriorityLevelConfigurationType {
		return vs[0].([]PriorityLevelConfigurationType)[vs[1].(int)]
	}).(PriorityLevelConfigurationTypeOutput)
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationCondition struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type *string `pulumi:"type"`
}

// PriorityLevelConfigurationConditionInput is an input type that accepts PriorityLevelConfigurationConditionArgs and PriorityLevelConfigurationConditionOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationConditionInput` via:
//
// 		 PriorityLevelConfigurationConditionArgs{...}
//
type PriorityLevelConfigurationConditionInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput
	ToPriorityLevelConfigurationConditionOutputWithContext(context.Context) PriorityLevelConfigurationConditionOutput
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationConditionArgs struct {
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `type` is the type of the condition. Required.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PriorityLevelConfigurationConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (i PriorityLevelConfigurationConditionArgs) ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput {
	return i.ToPriorityLevelConfigurationConditionOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationConditionArgs) ToPriorityLevelConfigurationConditionOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationConditionOutput)
}

// PriorityLevelConfigurationConditionArrayInput is an input type that accepts PriorityLevelConfigurationConditionArray and PriorityLevelConfigurationConditionArrayOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationConditionArrayInput` via:
//
// 		 PriorityLevelConfigurationConditionArray{ PriorityLevelConfigurationConditionArgs{...} }
//
type PriorityLevelConfigurationConditionArrayInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationConditionArrayOutput() PriorityLevelConfigurationConditionArrayOutput
	ToPriorityLevelConfigurationConditionArrayOutputWithContext(context.Context) PriorityLevelConfigurationConditionArrayOutput
}

type PriorityLevelConfigurationConditionArray []PriorityLevelConfigurationConditionInput

func (PriorityLevelConfigurationConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (i PriorityLevelConfigurationConditionArray) ToPriorityLevelConfigurationConditionArrayOutput() PriorityLevelConfigurationConditionArrayOutput {
	return i.ToPriorityLevelConfigurationConditionArrayOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationConditionArray) ToPriorityLevelConfigurationConditionArrayOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationConditionArrayOutput)
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationConditionOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (o PriorityLevelConfigurationConditionOutput) ToPriorityLevelConfigurationConditionOutput() PriorityLevelConfigurationConditionOutput {
	return o
}

func (o PriorityLevelConfigurationConditionOutput) ToPriorityLevelConfigurationConditionOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionOutput {
	return o
}

// `lastTransitionTime` is the last time the condition transitioned from one status to another.
func (o PriorityLevelConfigurationConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// `message` is a human-readable message indicating details about last transition.
func (o PriorityLevelConfigurationConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
func (o PriorityLevelConfigurationConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// `status` is the status of the condition. Can be True, False, Unknown. Required.
func (o PriorityLevelConfigurationConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `type` is the type of the condition. Required.
func (o PriorityLevelConfigurationConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PriorityLevelConfigurationConditionArrayOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PriorityLevelConfigurationCondition)(nil)).Elem()
}

func (o PriorityLevelConfigurationConditionArrayOutput) ToPriorityLevelConfigurationConditionArrayOutput() PriorityLevelConfigurationConditionArrayOutput {
	return o
}

func (o PriorityLevelConfigurationConditionArrayOutput) ToPriorityLevelConfigurationConditionArrayOutputWithContext(ctx context.Context) PriorityLevelConfigurationConditionArrayOutput {
	return o
}

func (o PriorityLevelConfigurationConditionArrayOutput) Index(i pulumi.IntInput) PriorityLevelConfigurationConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PriorityLevelConfigurationCondition {
		return vs[0].([]PriorityLevelConfigurationCondition)[vs[1].(int)]
	}).(PriorityLevelConfigurationConditionOutput)
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type PriorityLevelConfigurationListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `pulumi:"apiVersion"`
	// `items` is a list of request-priorities.
	Items []PriorityLevelConfigurationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMeta `pulumi:"metadata"`
}

// PriorityLevelConfigurationListTypeInput is an input type that accepts PriorityLevelConfigurationListTypeArgs and PriorityLevelConfigurationListTypeOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationListTypeInput` via:
//
// 		 PriorityLevelConfigurationListTypeArgs{...}
//
type PriorityLevelConfigurationListTypeInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationListTypeOutput() PriorityLevelConfigurationListTypeOutput
	ToPriorityLevelConfigurationListTypeOutputWithContext(context.Context) PriorityLevelConfigurationListTypeOutput
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type PriorityLevelConfigurationListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// `items` is a list of request-priorities.
	Items PriorityLevelConfigurationTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaInput `pulumi:"metadata"`
}

func (PriorityLevelConfigurationListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationListType)(nil)).Elem()
}

func (i PriorityLevelConfigurationListTypeArgs) ToPriorityLevelConfigurationListTypeOutput() PriorityLevelConfigurationListTypeOutput {
	return i.ToPriorityLevelConfigurationListTypeOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationListTypeArgs) ToPriorityLevelConfigurationListTypeOutputWithContext(ctx context.Context) PriorityLevelConfigurationListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationListTypeOutput)
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type PriorityLevelConfigurationListTypeOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationListType)(nil)).Elem()
}

func (o PriorityLevelConfigurationListTypeOutput) ToPriorityLevelConfigurationListTypeOutput() PriorityLevelConfigurationListTypeOutput {
	return o
}

func (o PriorityLevelConfigurationListTypeOutput) ToPriorityLevelConfigurationListTypeOutputWithContext(ctx context.Context) PriorityLevelConfigurationListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PriorityLevelConfigurationListTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationListType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// `items` is a list of request-priorities.
func (o PriorityLevelConfigurationListTypeOutput) Items() PriorityLevelConfigurationTypeArrayOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationListType) []PriorityLevelConfigurationType { return v.Items }).(PriorityLevelConfigurationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PriorityLevelConfigurationListTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationListType) string { return v.Kind }).(pulumi.StringOutput)
}

// `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PriorityLevelConfigurationListTypeOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationListType) metav1.ListMeta { return v.Metadata }).(metav1.ListMetaOutput)
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `pulumi:"name"`
}

// PriorityLevelConfigurationReferenceInput is an input type that accepts PriorityLevelConfigurationReferenceArgs and PriorityLevelConfigurationReferenceOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationReferenceInput` via:
//
// 		 PriorityLevelConfigurationReferenceArgs{...}
//
type PriorityLevelConfigurationReferenceInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput
	ToPriorityLevelConfigurationReferenceOutputWithContext(context.Context) PriorityLevelConfigurationReferenceOutput
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReferenceArgs struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PriorityLevelConfigurationReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationReference)(nil)).Elem()
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput {
	return i.ToPriorityLevelConfigurationReferenceOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferenceOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationReferenceOutput)
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferencePtrOutput() PriorityLevelConfigurationReferencePtrOutput {
	return i.ToPriorityLevelConfigurationReferencePtrOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationReferenceArgs) ToPriorityLevelConfigurationReferencePtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationReferenceOutput).ToPriorityLevelConfigurationReferencePtrOutputWithContext(ctx)
}

// PriorityLevelConfigurationReferencePtrInput is an input type that accepts PriorityLevelConfigurationReferenceArgs, PriorityLevelConfigurationReferencePtr and PriorityLevelConfigurationReferencePtrOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationReferencePtrInput` via:
//
// 		 PriorityLevelConfigurationReferenceArgs{...}
//
//  or:
//
// 		 nil
//
type PriorityLevelConfigurationReferencePtrInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationReferencePtrOutput() PriorityLevelConfigurationReferencePtrOutput
	ToPriorityLevelConfigurationReferencePtrOutputWithContext(context.Context) PriorityLevelConfigurationReferencePtrOutput
}

type priorityLevelConfigurationReferencePtrType PriorityLevelConfigurationReferenceArgs

func PriorityLevelConfigurationReferencePtr(v *PriorityLevelConfigurationReferenceArgs) PriorityLevelConfigurationReferencePtrInput {
	return (*priorityLevelConfigurationReferencePtrType)(v)
}

func (*priorityLevelConfigurationReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationReference)(nil)).Elem()
}

func (i *priorityLevelConfigurationReferencePtrType) ToPriorityLevelConfigurationReferencePtrOutput() PriorityLevelConfigurationReferencePtrOutput {
	return i.ToPriorityLevelConfigurationReferencePtrOutputWithContext(context.Background())
}

func (i *priorityLevelConfigurationReferencePtrType) ToPriorityLevelConfigurationReferencePtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationReferencePtrOutput)
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReferenceOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationReference)(nil)).Elem()
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferenceOutput() PriorityLevelConfigurationReferenceOutput {
	return o
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferenceOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferenceOutput {
	return o
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferencePtrOutput() PriorityLevelConfigurationReferencePtrOutput {
	return o.ToPriorityLevelConfigurationReferencePtrOutputWithContext(context.Background())
}

func (o PriorityLevelConfigurationReferenceOutput) ToPriorityLevelConfigurationReferencePtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferencePtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationReference) *PriorityLevelConfigurationReference {
		return &v
	}).(PriorityLevelConfigurationReferencePtrOutput)
}

// `name` is the name of the priority level configuration being referenced Required.
func (o PriorityLevelConfigurationReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationReference) string { return v.Name }).(pulumi.StringOutput)
}

type PriorityLevelConfigurationReferencePtrOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationReference)(nil)).Elem()
}

func (o PriorityLevelConfigurationReferencePtrOutput) ToPriorityLevelConfigurationReferencePtrOutput() PriorityLevelConfigurationReferencePtrOutput {
	return o
}

func (o PriorityLevelConfigurationReferencePtrOutput) ToPriorityLevelConfigurationReferencePtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationReferencePtrOutput {
	return o
}

func (o PriorityLevelConfigurationReferencePtrOutput) Elem() PriorityLevelConfigurationReferenceOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationReference) PriorityLevelConfigurationReference { return *v }).(PriorityLevelConfigurationReferenceOutput)
}

// `name` is the name of the priority level configuration being referenced Required.
func (o PriorityLevelConfigurationReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpec struct {
	// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
	Limited *LimitedPriorityLevelConfiguration `pulumi:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type string `pulumi:"type"`
}

// PriorityLevelConfigurationSpecInput is an input type that accepts PriorityLevelConfigurationSpecArgs and PriorityLevelConfigurationSpecOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationSpecInput` via:
//
// 		 PriorityLevelConfigurationSpecArgs{...}
//
type PriorityLevelConfigurationSpecInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput
	ToPriorityLevelConfigurationSpecOutputWithContext(context.Context) PriorityLevelConfigurationSpecOutput
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpecArgs struct {
	// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
	Limited LimitedPriorityLevelConfigurationPtrInput `pulumi:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PriorityLevelConfigurationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput {
	return i.ToPriorityLevelConfigurationSpecOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationSpecOutput)
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecPtrOutput() PriorityLevelConfigurationSpecPtrOutput {
	return i.ToPriorityLevelConfigurationSpecPtrOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationSpecArgs) ToPriorityLevelConfigurationSpecPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationSpecOutput).ToPriorityLevelConfigurationSpecPtrOutputWithContext(ctx)
}

// PriorityLevelConfigurationSpecPtrInput is an input type that accepts PriorityLevelConfigurationSpecArgs, PriorityLevelConfigurationSpecPtr and PriorityLevelConfigurationSpecPtrOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationSpecPtrInput` via:
//
// 		 PriorityLevelConfigurationSpecArgs{...}
//
//  or:
//
// 		 nil
//
type PriorityLevelConfigurationSpecPtrInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationSpecPtrOutput() PriorityLevelConfigurationSpecPtrOutput
	ToPriorityLevelConfigurationSpecPtrOutputWithContext(context.Context) PriorityLevelConfigurationSpecPtrOutput
}

type priorityLevelConfigurationSpecPtrType PriorityLevelConfigurationSpecArgs

func PriorityLevelConfigurationSpecPtr(v *PriorityLevelConfigurationSpecArgs) PriorityLevelConfigurationSpecPtrInput {
	return (*priorityLevelConfigurationSpecPtrType)(v)
}

func (*priorityLevelConfigurationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (i *priorityLevelConfigurationSpecPtrType) ToPriorityLevelConfigurationSpecPtrOutput() PriorityLevelConfigurationSpecPtrOutput {
	return i.ToPriorityLevelConfigurationSpecPtrOutputWithContext(context.Background())
}

func (i *priorityLevelConfigurationSpecPtrType) ToPriorityLevelConfigurationSpecPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationSpecPtrOutput)
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type PriorityLevelConfigurationSpecOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecOutput() PriorityLevelConfigurationSpecOutput {
	return o
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecOutput {
	return o
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecPtrOutput() PriorityLevelConfigurationSpecPtrOutput {
	return o.ToPriorityLevelConfigurationSpecPtrOutputWithContext(context.Background())
}

func (o PriorityLevelConfigurationSpecOutput) ToPriorityLevelConfigurationSpecPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationSpec) *PriorityLevelConfigurationSpec {
		return &v
	}).(PriorityLevelConfigurationSpecPtrOutput)
}

// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
func (o PriorityLevelConfigurationSpecOutput) Limited() LimitedPriorityLevelConfigurationPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationSpec) *LimitedPriorityLevelConfiguration { return v.Limited }).(LimitedPriorityLevelConfigurationPtrOutput)
}

// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
func (o PriorityLevelConfigurationSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationSpec) string { return v.Type }).(pulumi.StringOutput)
}

type PriorityLevelConfigurationSpecPtrOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationSpec)(nil)).Elem()
}

func (o PriorityLevelConfigurationSpecPtrOutput) ToPriorityLevelConfigurationSpecPtrOutput() PriorityLevelConfigurationSpecPtrOutput {
	return o
}

func (o PriorityLevelConfigurationSpecPtrOutput) ToPriorityLevelConfigurationSpecPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationSpecPtrOutput {
	return o
}

func (o PriorityLevelConfigurationSpecPtrOutput) Elem() PriorityLevelConfigurationSpecOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationSpec) PriorityLevelConfigurationSpec { return *v }).(PriorityLevelConfigurationSpecOutput)
}

// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
func (o PriorityLevelConfigurationSpecPtrOutput) Limited() LimitedPriorityLevelConfigurationPtrOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationSpec) *LimitedPriorityLevelConfiguration {
		if v == nil {
			return nil
		}
		return v.Limited
	}).(LimitedPriorityLevelConfigurationPtrOutput)
}

// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
func (o PriorityLevelConfigurationSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []PriorityLevelConfigurationCondition `pulumi:"conditions"`
}

// PriorityLevelConfigurationStatusInput is an input type that accepts PriorityLevelConfigurationStatusArgs and PriorityLevelConfigurationStatusOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationStatusInput` via:
//
// 		 PriorityLevelConfigurationStatusArgs{...}
//
type PriorityLevelConfigurationStatusInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput
	ToPriorityLevelConfigurationStatusOutputWithContext(context.Context) PriorityLevelConfigurationStatusOutput
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatusArgs struct {
	// `conditions` is the current state of "request-priority".
	Conditions PriorityLevelConfigurationConditionArrayInput `pulumi:"conditions"`
}

func (PriorityLevelConfigurationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput {
	return i.ToPriorityLevelConfigurationStatusOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationStatusOutput)
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusPtrOutput() PriorityLevelConfigurationStatusPtrOutput {
	return i.ToPriorityLevelConfigurationStatusPtrOutputWithContext(context.Background())
}

func (i PriorityLevelConfigurationStatusArgs) ToPriorityLevelConfigurationStatusPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationStatusOutput).ToPriorityLevelConfigurationStatusPtrOutputWithContext(ctx)
}

// PriorityLevelConfigurationStatusPtrInput is an input type that accepts PriorityLevelConfigurationStatusArgs, PriorityLevelConfigurationStatusPtr and PriorityLevelConfigurationStatusPtrOutput values.
// You can construct a concrete instance of `PriorityLevelConfigurationStatusPtrInput` via:
//
// 		 PriorityLevelConfigurationStatusArgs{...}
//
//  or:
//
// 		 nil
//
type PriorityLevelConfigurationStatusPtrInput interface {
	pulumi.Input

	ToPriorityLevelConfigurationStatusPtrOutput() PriorityLevelConfigurationStatusPtrOutput
	ToPriorityLevelConfigurationStatusPtrOutputWithContext(context.Context) PriorityLevelConfigurationStatusPtrOutput
}

type priorityLevelConfigurationStatusPtrType PriorityLevelConfigurationStatusArgs

func PriorityLevelConfigurationStatusPtr(v *PriorityLevelConfigurationStatusArgs) PriorityLevelConfigurationStatusPtrInput {
	return (*priorityLevelConfigurationStatusPtrType)(v)
}

func (*priorityLevelConfigurationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (i *priorityLevelConfigurationStatusPtrType) ToPriorityLevelConfigurationStatusPtrOutput() PriorityLevelConfigurationStatusPtrOutput {
	return i.ToPriorityLevelConfigurationStatusPtrOutputWithContext(context.Background())
}

func (i *priorityLevelConfigurationStatusPtrType) ToPriorityLevelConfigurationStatusPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityLevelConfigurationStatusPtrOutput)
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatusOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusOutput() PriorityLevelConfigurationStatusOutput {
	return o
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusOutput {
	return o
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusPtrOutput() PriorityLevelConfigurationStatusPtrOutput {
	return o.ToPriorityLevelConfigurationStatusPtrOutputWithContext(context.Background())
}

func (o PriorityLevelConfigurationStatusOutput) ToPriorityLevelConfigurationStatusPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusPtrOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationStatus) *PriorityLevelConfigurationStatus {
		return &v
	}).(PriorityLevelConfigurationStatusPtrOutput)
}

// `conditions` is the current state of "request-priority".
func (o PriorityLevelConfigurationStatusOutput) Conditions() PriorityLevelConfigurationConditionArrayOutput {
	return o.ApplyT(func(v PriorityLevelConfigurationStatus) []PriorityLevelConfigurationCondition { return v.Conditions }).(PriorityLevelConfigurationConditionArrayOutput)
}

type PriorityLevelConfigurationStatusPtrOutput struct{ *pulumi.OutputState }

func (PriorityLevelConfigurationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityLevelConfigurationStatus)(nil)).Elem()
}

func (o PriorityLevelConfigurationStatusPtrOutput) ToPriorityLevelConfigurationStatusPtrOutput() PriorityLevelConfigurationStatusPtrOutput {
	return o
}

func (o PriorityLevelConfigurationStatusPtrOutput) ToPriorityLevelConfigurationStatusPtrOutputWithContext(ctx context.Context) PriorityLevelConfigurationStatusPtrOutput {
	return o
}

func (o PriorityLevelConfigurationStatusPtrOutput) Elem() PriorityLevelConfigurationStatusOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationStatus) PriorityLevelConfigurationStatus { return *v }).(PriorityLevelConfigurationStatusOutput)
}

// `conditions` is the current state of "request-priority".
func (o PriorityLevelConfigurationStatusPtrOutput) Conditions() PriorityLevelConfigurationConditionArrayOutput {
	return o.ApplyT(func(v *PriorityLevelConfigurationStatus) []PriorityLevelConfigurationCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PriorityLevelConfigurationConditionArrayOutput)
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `pulumi:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `pulumi:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `pulumi:"queues"`
}

// QueuingConfigurationInput is an input type that accepts QueuingConfigurationArgs and QueuingConfigurationOutput values.
// You can construct a concrete instance of `QueuingConfigurationInput` via:
//
// 		 QueuingConfigurationArgs{...}
//
type QueuingConfigurationInput interface {
	pulumi.Input

	ToQueuingConfigurationOutput() QueuingConfigurationOutput
	ToQueuingConfigurationOutputWithContext(context.Context) QueuingConfigurationOutput
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfigurationArgs struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize pulumi.IntPtrInput `pulumi:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit pulumi.IntPtrInput `pulumi:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues pulumi.IntPtrInput `pulumi:"queues"`
}

func (QueuingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuingConfiguration)(nil)).Elem()
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationOutput() QueuingConfigurationOutput {
	return i.ToQueuingConfigurationOutputWithContext(context.Background())
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationOutputWithContext(ctx context.Context) QueuingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingConfigurationOutput)
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationPtrOutput() QueuingConfigurationPtrOutput {
	return i.ToQueuingConfigurationPtrOutputWithContext(context.Background())
}

func (i QueuingConfigurationArgs) ToQueuingConfigurationPtrOutputWithContext(ctx context.Context) QueuingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingConfigurationOutput).ToQueuingConfigurationPtrOutputWithContext(ctx)
}

// QueuingConfigurationPtrInput is an input type that accepts QueuingConfigurationArgs, QueuingConfigurationPtr and QueuingConfigurationPtrOutput values.
// You can construct a concrete instance of `QueuingConfigurationPtrInput` via:
//
// 		 QueuingConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type QueuingConfigurationPtrInput interface {
	pulumi.Input

	ToQueuingConfigurationPtrOutput() QueuingConfigurationPtrOutput
	ToQueuingConfigurationPtrOutputWithContext(context.Context) QueuingConfigurationPtrOutput
}

type queuingConfigurationPtrType QueuingConfigurationArgs

func QueuingConfigurationPtr(v *QueuingConfigurationArgs) QueuingConfigurationPtrInput {
	return (*queuingConfigurationPtrType)(v)
}

func (*queuingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuingConfiguration)(nil)).Elem()
}

func (i *queuingConfigurationPtrType) ToQueuingConfigurationPtrOutput() QueuingConfigurationPtrOutput {
	return i.ToQueuingConfigurationPtrOutputWithContext(context.Background())
}

func (i *queuingConfigurationPtrType) ToQueuingConfigurationPtrOutputWithContext(ctx context.Context) QueuingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingConfigurationPtrOutput)
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfigurationOutput struct{ *pulumi.OutputState }

func (QueuingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuingConfiguration)(nil)).Elem()
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationOutput() QueuingConfigurationOutput {
	return o
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationOutputWithContext(ctx context.Context) QueuingConfigurationOutput {
	return o
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationPtrOutput() QueuingConfigurationPtrOutput {
	return o.ToQueuingConfigurationPtrOutputWithContext(context.Background())
}

func (o QueuingConfigurationOutput) ToQueuingConfigurationPtrOutputWithContext(ctx context.Context) QueuingConfigurationPtrOutput {
	return o.ApplyT(func(v QueuingConfiguration) *QueuingConfiguration {
		return &v
	}).(QueuingConfigurationPtrOutput)
}

// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
func (o QueuingConfigurationOutput) HandSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuingConfiguration) *int { return v.HandSize }).(pulumi.IntPtrOutput)
}

// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
func (o QueuingConfigurationOutput) QueueLengthLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuingConfiguration) *int { return v.QueueLengthLimit }).(pulumi.IntPtrOutput)
}

// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
func (o QueuingConfigurationOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuingConfiguration) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

type QueuingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (QueuingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuingConfiguration)(nil)).Elem()
}

func (o QueuingConfigurationPtrOutput) ToQueuingConfigurationPtrOutput() QueuingConfigurationPtrOutput {
	return o
}

func (o QueuingConfigurationPtrOutput) ToQueuingConfigurationPtrOutputWithContext(ctx context.Context) QueuingConfigurationPtrOutput {
	return o
}

func (o QueuingConfigurationPtrOutput) Elem() QueuingConfigurationOutput {
	return o.ApplyT(func(v *QueuingConfiguration) QueuingConfiguration { return *v }).(QueuingConfigurationOutput)
}

// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
func (o QueuingConfigurationPtrOutput) HandSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuingConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.HandSize
	}).(pulumi.IntPtrOutput)
}

// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
func (o QueuingConfigurationPtrOutput) QueueLengthLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuingConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.QueueLengthLimit
	}).(pulumi.IntPtrOutput)
}

// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
func (o QueuingConfigurationPtrOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuingConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Queues
	}).(pulumi.IntPtrOutput)
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	ApiGroups []string `pulumi:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `pulumi:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []string `pulumi:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []string `pulumi:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []string `pulumi:"verbs"`
}

// ResourcePolicyRuleInput is an input type that accepts ResourcePolicyRuleArgs and ResourcePolicyRuleOutput values.
// You can construct a concrete instance of `ResourcePolicyRuleInput` via:
//
// 		 ResourcePolicyRuleArgs{...}
//
type ResourcePolicyRuleInput interface {
	pulumi.Input

	ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput
	ToResourcePolicyRuleOutputWithContext(context.Context) ResourcePolicyRuleOutput
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRuleArgs struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope pulumi.BoolPtrInput `pulumi:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (ResourcePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyRule)(nil)).Elem()
}

func (i ResourcePolicyRuleArgs) ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput {
	return i.ToResourcePolicyRuleOutputWithContext(context.Background())
}

func (i ResourcePolicyRuleArgs) ToResourcePolicyRuleOutputWithContext(ctx context.Context) ResourcePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRuleOutput)
}

// ResourcePolicyRuleArrayInput is an input type that accepts ResourcePolicyRuleArray and ResourcePolicyRuleArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyRuleArrayInput` via:
//
// 		 ResourcePolicyRuleArray{ ResourcePolicyRuleArgs{...} }
//
type ResourcePolicyRuleArrayInput interface {
	pulumi.Input

	ToResourcePolicyRuleArrayOutput() ResourcePolicyRuleArrayOutput
	ToResourcePolicyRuleArrayOutputWithContext(context.Context) ResourcePolicyRuleArrayOutput
}

type ResourcePolicyRuleArray []ResourcePolicyRuleInput

func (ResourcePolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyRule)(nil)).Elem()
}

func (i ResourcePolicyRuleArray) ToResourcePolicyRuleArrayOutput() ResourcePolicyRuleArrayOutput {
	return i.ToResourcePolicyRuleArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyRuleArray) ToResourcePolicyRuleArrayOutputWithContext(ctx context.Context) ResourcePolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRuleArrayOutput)
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
type ResourcePolicyRuleOutput struct{ *pulumi.OutputState }

func (ResourcePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyRule)(nil)).Elem()
}

func (o ResourcePolicyRuleOutput) ToResourcePolicyRuleOutput() ResourcePolicyRuleOutput {
	return o
}

func (o ResourcePolicyRuleOutput) ToResourcePolicyRuleOutputWithContext(ctx context.Context) ResourcePolicyRuleOutput {
	return o
}

// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicyRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
func (o ResourcePolicyRuleOutput) ClusterScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourcePolicyRule) *bool { return v.ClusterScope }).(pulumi.BoolPtrOutput)
}

// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
func (o ResourcePolicyRuleOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicyRule) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicyRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
func (o ResourcePolicyRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicyRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type ResourcePolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyRule)(nil)).Elem()
}

func (o ResourcePolicyRuleArrayOutput) ToResourcePolicyRuleArrayOutput() ResourcePolicyRuleArrayOutput {
	return o
}

func (o ResourcePolicyRuleArrayOutput) ToResourcePolicyRuleArrayOutputWithContext(ctx context.Context) ResourcePolicyRuleArrayOutput {
	return o
}

func (o ResourcePolicyRuleArrayOutput) Index(i pulumi.IntInput) ResourcePolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourcePolicyRule {
		return vs[0].([]ResourcePolicyRule)[vs[1].(int)]
	}).(ResourcePolicyRuleOutput)
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name string `pulumi:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `pulumi:"namespace"`
}

// ServiceAccountSubjectInput is an input type that accepts ServiceAccountSubjectArgs and ServiceAccountSubjectOutput values.
// You can construct a concrete instance of `ServiceAccountSubjectInput` via:
//
// 		 ServiceAccountSubjectArgs{...}
//
type ServiceAccountSubjectInput interface {
	pulumi.Input

	ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput
	ToServiceAccountSubjectOutputWithContext(context.Context) ServiceAccountSubjectOutput
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubjectArgs struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name pulumi.StringInput `pulumi:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ServiceAccountSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountSubject)(nil)).Elem()
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput {
	return i.ToServiceAccountSubjectOutputWithContext(context.Background())
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectOutputWithContext(ctx context.Context) ServiceAccountSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountSubjectOutput)
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectPtrOutput() ServiceAccountSubjectPtrOutput {
	return i.ToServiceAccountSubjectPtrOutputWithContext(context.Background())
}

func (i ServiceAccountSubjectArgs) ToServiceAccountSubjectPtrOutputWithContext(ctx context.Context) ServiceAccountSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountSubjectOutput).ToServiceAccountSubjectPtrOutputWithContext(ctx)
}

// ServiceAccountSubjectPtrInput is an input type that accepts ServiceAccountSubjectArgs, ServiceAccountSubjectPtr and ServiceAccountSubjectPtrOutput values.
// You can construct a concrete instance of `ServiceAccountSubjectPtrInput` via:
//
// 		 ServiceAccountSubjectArgs{...}
//
//  or:
//
// 		 nil
//
type ServiceAccountSubjectPtrInput interface {
	pulumi.Input

	ToServiceAccountSubjectPtrOutput() ServiceAccountSubjectPtrOutput
	ToServiceAccountSubjectPtrOutputWithContext(context.Context) ServiceAccountSubjectPtrOutput
}

type serviceAccountSubjectPtrType ServiceAccountSubjectArgs

func ServiceAccountSubjectPtr(v *ServiceAccountSubjectArgs) ServiceAccountSubjectPtrInput {
	return (*serviceAccountSubjectPtrType)(v)
}

func (*serviceAccountSubjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountSubject)(nil)).Elem()
}

func (i *serviceAccountSubjectPtrType) ToServiceAccountSubjectPtrOutput() ServiceAccountSubjectPtrOutput {
	return i.ToServiceAccountSubjectPtrOutputWithContext(context.Background())
}

func (i *serviceAccountSubjectPtrType) ToServiceAccountSubjectPtrOutputWithContext(ctx context.Context) ServiceAccountSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountSubjectPtrOutput)
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubjectOutput struct{ *pulumi.OutputState }

func (ServiceAccountSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountSubject)(nil)).Elem()
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectOutput() ServiceAccountSubjectOutput {
	return o
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectOutputWithContext(ctx context.Context) ServiceAccountSubjectOutput {
	return o
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectPtrOutput() ServiceAccountSubjectPtrOutput {
	return o.ToServiceAccountSubjectPtrOutputWithContext(context.Background())
}

func (o ServiceAccountSubjectOutput) ToServiceAccountSubjectPtrOutputWithContext(ctx context.Context) ServiceAccountSubjectPtrOutput {
	return o.ApplyT(func(v ServiceAccountSubject) *ServiceAccountSubject {
		return &v
	}).(ServiceAccountSubjectPtrOutput)
}

// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
func (o ServiceAccountSubjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountSubject) string { return v.Name }).(pulumi.StringOutput)
}

// `namespace` is the namespace of matching ServiceAccount objects. Required.
func (o ServiceAccountSubjectOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountSubject) string { return v.Namespace }).(pulumi.StringOutput)
}

type ServiceAccountSubjectPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountSubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountSubject)(nil)).Elem()
}

func (o ServiceAccountSubjectPtrOutput) ToServiceAccountSubjectPtrOutput() ServiceAccountSubjectPtrOutput {
	return o
}

func (o ServiceAccountSubjectPtrOutput) ToServiceAccountSubjectPtrOutputWithContext(ctx context.Context) ServiceAccountSubjectPtrOutput {
	return o
}

func (o ServiceAccountSubjectPtrOutput) Elem() ServiceAccountSubjectOutput {
	return o.ApplyT(func(v *ServiceAccountSubject) ServiceAccountSubject { return *v }).(ServiceAccountSubjectOutput)
}

// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
func (o ServiceAccountSubjectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountSubject) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// `namespace` is the namespace of matching ServiceAccount objects. Required.
func (o ServiceAccountSubjectPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountSubject) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type Subject struct {
	Group *GroupSubject `pulumi:"group"`
	// Required
	Kind           string                 `pulumi:"kind"`
	ServiceAccount *ServiceAccountSubject `pulumi:"serviceAccount"`
	User           *UserSubject           `pulumi:"user"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
// 		 SubjectArgs{...}
//
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type SubjectArgs struct {
	Group GroupSubjectPtrInput `pulumi:"group"`
	// Required
	Kind           pulumi.StringInput            `pulumi:"kind"`
	ServiceAccount ServiceAccountSubjectPtrInput `pulumi:"serviceAccount"`
	User           UserSubjectPtrInput           `pulumi:"user"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
// 		 SubjectArray{ SubjectArgs{...} }
//
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

func (o SubjectOutput) Group() GroupSubjectPtrOutput {
	return o.ApplyT(func(v Subject) *GroupSubject { return v.Group }).(GroupSubjectPtrOutput)
}

// Required
func (o SubjectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v Subject) string { return v.Kind }).(pulumi.StringOutput)
}

func (o SubjectOutput) ServiceAccount() ServiceAccountSubjectPtrOutput {
	return o.ApplyT(func(v Subject) *ServiceAccountSubject { return v.ServiceAccount }).(ServiceAccountSubjectPtrOutput)
}

func (o SubjectOutput) User() UserSubjectPtrOutput {
	return o.ApplyT(func(v Subject) *UserSubject { return v.User }).(UserSubjectPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

// UserSubject holds detailed information for user-kind subject.
type UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `pulumi:"name"`
}

// UserSubjectInput is an input type that accepts UserSubjectArgs and UserSubjectOutput values.
// You can construct a concrete instance of `UserSubjectInput` via:
//
// 		 UserSubjectArgs{...}
//
type UserSubjectInput interface {
	pulumi.Input

	ToUserSubjectOutput() UserSubjectOutput
	ToUserSubjectOutputWithContext(context.Context) UserSubjectOutput
}

// UserSubject holds detailed information for user-kind subject.
type UserSubjectArgs struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (UserSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSubject)(nil)).Elem()
}

func (i UserSubjectArgs) ToUserSubjectOutput() UserSubjectOutput {
	return i.ToUserSubjectOutputWithContext(context.Background())
}

func (i UserSubjectArgs) ToUserSubjectOutputWithContext(ctx context.Context) UserSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSubjectOutput)
}

func (i UserSubjectArgs) ToUserSubjectPtrOutput() UserSubjectPtrOutput {
	return i.ToUserSubjectPtrOutputWithContext(context.Background())
}

func (i UserSubjectArgs) ToUserSubjectPtrOutputWithContext(ctx context.Context) UserSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSubjectOutput).ToUserSubjectPtrOutputWithContext(ctx)
}

// UserSubjectPtrInput is an input type that accepts UserSubjectArgs, UserSubjectPtr and UserSubjectPtrOutput values.
// You can construct a concrete instance of `UserSubjectPtrInput` via:
//
// 		 UserSubjectArgs{...}
//
//  or:
//
// 		 nil
//
type UserSubjectPtrInput interface {
	pulumi.Input

	ToUserSubjectPtrOutput() UserSubjectPtrOutput
	ToUserSubjectPtrOutputWithContext(context.Context) UserSubjectPtrOutput
}

type userSubjectPtrType UserSubjectArgs

func UserSubjectPtr(v *UserSubjectArgs) UserSubjectPtrInput {
	return (*userSubjectPtrType)(v)
}

func (*userSubjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSubject)(nil)).Elem()
}

func (i *userSubjectPtrType) ToUserSubjectPtrOutput() UserSubjectPtrOutput {
	return i.ToUserSubjectPtrOutputWithContext(context.Background())
}

func (i *userSubjectPtrType) ToUserSubjectPtrOutputWithContext(ctx context.Context) UserSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSubjectPtrOutput)
}

// UserSubject holds detailed information for user-kind subject.
type UserSubjectOutput struct{ *pulumi.OutputState }

func (UserSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSubject)(nil)).Elem()
}

func (o UserSubjectOutput) ToUserSubjectOutput() UserSubjectOutput {
	return o
}

func (o UserSubjectOutput) ToUserSubjectOutputWithContext(ctx context.Context) UserSubjectOutput {
	return o
}

func (o UserSubjectOutput) ToUserSubjectPtrOutput() UserSubjectPtrOutput {
	return o.ToUserSubjectPtrOutputWithContext(context.Background())
}

func (o UserSubjectOutput) ToUserSubjectPtrOutputWithContext(ctx context.Context) UserSubjectPtrOutput {
	return o.ApplyT(func(v UserSubject) *UserSubject {
		return &v
	}).(UserSubjectPtrOutput)
}

// `name` is the username that matches, or "*" to match all usernames. Required.
func (o UserSubjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserSubject) string { return v.Name }).(pulumi.StringOutput)
}

type UserSubjectPtrOutput struct{ *pulumi.OutputState }

func (UserSubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSubject)(nil)).Elem()
}

func (o UserSubjectPtrOutput) ToUserSubjectPtrOutput() UserSubjectPtrOutput {
	return o
}

func (o UserSubjectPtrOutput) ToUserSubjectPtrOutputWithContext(ctx context.Context) UserSubjectPtrOutput {
	return o
}

func (o UserSubjectPtrOutput) Elem() UserSubjectOutput {
	return o.ApplyT(func(v *UserSubject) UserSubject { return *v }).(UserSubjectOutput)
}

// `name` is the username that matches, or "*" to match all usernames. Required.
func (o UserSubjectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSubject) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowDistinguisherMethodOutput{})
	pulumi.RegisterOutputType(FlowDistinguisherMethodPtrOutput{})
	pulumi.RegisterOutputType(FlowSchemaTypeOutput{})
	pulumi.RegisterOutputType(FlowSchemaTypeArrayOutput{})
	pulumi.RegisterOutputType(FlowSchemaConditionOutput{})
	pulumi.RegisterOutputType(FlowSchemaConditionArrayOutput{})
	pulumi.RegisterOutputType(FlowSchemaListTypeOutput{})
	pulumi.RegisterOutputType(FlowSchemaSpecOutput{})
	pulumi.RegisterOutputType(FlowSchemaSpecPtrOutput{})
	pulumi.RegisterOutputType(FlowSchemaStatusOutput{})
	pulumi.RegisterOutputType(FlowSchemaStatusPtrOutput{})
	pulumi.RegisterOutputType(GroupSubjectOutput{})
	pulumi.RegisterOutputType(GroupSubjectPtrOutput{})
	pulumi.RegisterOutputType(LimitResponseOutput{})
	pulumi.RegisterOutputType(LimitResponsePtrOutput{})
	pulumi.RegisterOutputType(LimitedPriorityLevelConfigurationOutput{})
	pulumi.RegisterOutputType(LimitedPriorityLevelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NonResourcePolicyRuleOutput{})
	pulumi.RegisterOutputType(NonResourcePolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyRulesWithSubjectsOutput{})
	pulumi.RegisterOutputType(PolicyRulesWithSubjectsArrayOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationTypeOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationTypeArrayOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationConditionOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationConditionArrayOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationListTypeOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationReferenceOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationReferencePtrOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationSpecOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationSpecPtrOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationStatusOutput{})
	pulumi.RegisterOutputType(PriorityLevelConfigurationStatusPtrOutput{})
	pulumi.RegisterOutputType(QueuingConfigurationOutput{})
	pulumi.RegisterOutputType(QueuingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyRuleOutput{})
	pulumi.RegisterOutputType(ResourcePolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountSubjectOutput{})
	pulumi.RegisterOutputType(ServiceAccountSubjectPtrOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
	pulumi.RegisterOutputType(UserSubjectOutput{})
	pulumi.RegisterOutputType(UserSubjectPtrOutput{})
}
