// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/core/v1"
)

// Overhead structure represents the resource overhead associated with running a pod.
type Overhead struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed map[string]string `pulumi:"podFixed"`
}

type OverheadInput interface {
	pulumi.Input

	ToOverheadOutput() OverheadOutput
	ToOverheadOutputWithContext(context.Context) OverheadOutput
}

// Overhead structure represents the resource overhead associated with running a pod.
type OverheadArgs struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed pulumi.StringMapInput `pulumi:"podFixed"`
}

func (OverheadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Overhead)(nil)).Elem()
}

func (i OverheadArgs) ToOverheadOutput() OverheadOutput {
	return i.ToOverheadOutputWithContext(context.Background())
}

func (i OverheadArgs) ToOverheadOutputWithContext(ctx context.Context) OverheadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverheadOutput)
}

// Overhead structure represents the resource overhead associated with running a pod.
type OverheadOutput struct { *pulumi.OutputState }

func (OverheadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Overhead)(nil)).Elem()
}

func (o OverheadOutput) ToOverheadOutput() OverheadOutput {
	return o
}

func (o OverheadOutput) ToOverheadOutputWithContext(ctx context.Context) OverheadOutput {
	return o
}

// PodFixed represents the fixed resource overhead associated with running a pod.
func (o OverheadOutput) PodFixed() pulumi.StringMapOutput {
	return o.ApplyT(func (v Overhead) map[string]string { return v.PodFixed }).(pulumi.StringMapOutput)
}

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
type RuntimeClassSpec struct {
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead *Overhead `pulumi:"overhead"`
	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
	RuntimeHandler *string `pulumi:"runtimeHandler"`
	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
	Scheduling *Scheduling `pulumi:"scheduling"`
}

type RuntimeClassSpecInput interface {
	pulumi.Input

	ToRuntimeClassSpecOutput() RuntimeClassSpecOutput
	ToRuntimeClassSpecOutputWithContext(context.Context) RuntimeClassSpecOutput
}

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
type RuntimeClassSpecArgs struct {
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead OverheadPtrInput `pulumi:"overhead"`
	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
	RuntimeHandler pulumi.StringPtrInput `pulumi:"runtimeHandler"`
	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
	Scheduling SchedulingPtrInput `pulumi:"scheduling"`
}

func (RuntimeClassSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassSpec)(nil)).Elem()
}

func (i RuntimeClassSpecArgs) ToRuntimeClassSpecOutput() RuntimeClassSpecOutput {
	return i.ToRuntimeClassSpecOutputWithContext(context.Background())
}

func (i RuntimeClassSpecArgs) ToRuntimeClassSpecOutputWithContext(ctx context.Context) RuntimeClassSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassSpecOutput)
}

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
type RuntimeClassSpecOutput struct { *pulumi.OutputState }

func (RuntimeClassSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassSpec)(nil)).Elem()
}

func (o RuntimeClassSpecOutput) ToRuntimeClassSpecOutput() RuntimeClassSpecOutput {
	return o
}

func (o RuntimeClassSpecOutput) ToRuntimeClassSpecOutputWithContext(ctx context.Context) RuntimeClassSpecOutput {
	return o
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
func (o RuntimeClassSpecOutput) Overhead() OverheadPtrOutput {
	return o.ApplyT(func (v RuntimeClassSpec) *Overhead { return v.Overhead }).(OverheadPtrOutput)
}

// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
func (o RuntimeClassSpecOutput) RuntimeHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClassSpec) *string { return v.RuntimeHandler }).(pulumi.StringPtrOutput)
}

// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
func (o RuntimeClassSpecOutput) Scheduling() SchedulingPtrOutput {
	return o.ApplyT(func (v RuntimeClassSpec) *Scheduling { return v.Scheduling }).(SchedulingPtrOutput)
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type Scheduling struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []corev1.Toleration `pulumi:"tolerations"`
}

type SchedulingInput interface {
	pulumi.Input

	ToSchedulingOutput() SchedulingOutput
	ToSchedulingOutputWithContext(context.Context) SchedulingOutput
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type SchedulingArgs struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations corev1.TolerationArrayInput `pulumi:"tolerations"`
}

func (SchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (i SchedulingArgs) ToSchedulingOutput() SchedulingOutput {
	return i.ToSchedulingOutputWithContext(context.Background())
}

func (i SchedulingArgs) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingOutput)
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type SchedulingOutput struct { *pulumi.OutputState }

func (SchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (o SchedulingOutput) ToSchedulingOutput() SchedulingOutput {
	return o
}

func (o SchedulingOutput) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return o
}

// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
func (o SchedulingOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func (v Scheduling) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
func (o SchedulingOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func (v Scheduling) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(OverheadOutput{})
	pulumi.RegisterOutputType(RuntimeClassSpecOutput{})
	pulumi.RegisterOutputType(SchedulingOutput{})
}
