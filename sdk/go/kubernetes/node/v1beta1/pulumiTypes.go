// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Overhead structure represents the resource overhead associated with running a pod.
type Overhead struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed map[string]string `pulumi:"podFixed"`
}

type OverheadInput interface {
	pulumi.Input

	ToOverheadOutput() OverheadOutput
	ToOverheadOutputWithContext(context.Context) OverheadOutput
}

// Overhead structure represents the resource overhead associated with running a pod.
type OverheadArgs struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed pulumi.StringMapInput `pulumi:"podFixed"`
}

func (OverheadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Overhead)(nil)).Elem()
}

func (i OverheadArgs) ToOverheadOutput() OverheadOutput {
	return i.ToOverheadOutputWithContext(context.Background())
}

func (i OverheadArgs) ToOverheadOutputWithContext(ctx context.Context) OverheadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverheadOutput)
}

func (i OverheadArgs) ToOverheadPtrOutput() OverheadPtrOutput {
	return i.ToOverheadPtrOutputWithContext(context.Background())
}

func (i OverheadArgs) ToOverheadPtrOutputWithContext(ctx context.Context) OverheadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverheadOutput).ToOverheadPtrOutputWithContext(ctx)
}

type OverheadPtrInput interface {
	pulumi.Input

	ToOverheadPtrOutput() OverheadPtrOutput
	ToOverheadPtrOutputWithContext(context.Context) OverheadPtrOutput
}

type overheadPtrType OverheadArgs

func OverheadPtr(v *OverheadArgs) OverheadPtrInput {	return (*overheadPtrType)(v)
}

func (*overheadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Overhead)(nil)).Elem()
}

func (i *overheadPtrType) ToOverheadPtrOutput() OverheadPtrOutput {
	return i.ToOverheadPtrOutputWithContext(context.Background())
}

func (i *overheadPtrType) ToOverheadPtrOutputWithContext(ctx context.Context) OverheadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverheadPtrOutput)
}

// Overhead structure represents the resource overhead associated with running a pod.
type OverheadOutput struct { *pulumi.OutputState }

func (OverheadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Overhead)(nil)).Elem()
}

func (o OverheadOutput) ToOverheadOutput() OverheadOutput {
	return o
}

func (o OverheadOutput) ToOverheadOutputWithContext(ctx context.Context) OverheadOutput {
	return o
}

func (o OverheadOutput) ToOverheadPtrOutput() OverheadPtrOutput {
	return o.ToOverheadPtrOutputWithContext(context.Background())
}

func (o OverheadOutput) ToOverheadPtrOutputWithContext(ctx context.Context) OverheadPtrOutput {
	return o.ApplyT(func(v Overhead) *Overhead {
		return &v
	}).(OverheadPtrOutput)
}
// PodFixed represents the fixed resource overhead associated with running a pod.
func (o OverheadOutput) PodFixed() pulumi.StringMapOutput {
	return o.ApplyT(func (v Overhead) map[string]string { return v.PodFixed }).(pulumi.StringMapOutput)
}

type OverheadPtrOutput struct { *pulumi.OutputState }

func (OverheadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Overhead)(nil)).Elem()
}

func (o OverheadPtrOutput) ToOverheadPtrOutput() OverheadPtrOutput {
	return o
}

func (o OverheadPtrOutput) ToOverheadPtrOutputWithContext(ctx context.Context) OverheadPtrOutput {
	return o
}

func (o OverheadPtrOutput) Elem() OverheadOutput {
	return o.ApplyT(func (v *Overhead) Overhead { return *v }).(OverheadOutput)
}

// PodFixed represents the fixed resource overhead associated with running a pod.
func (o OverheadPtrOutput) PodFixed() pulumi.StringMapOutput {
	return o.ApplyT(func (v Overhead) map[string]string { return v.PodFixed }).(pulumi.StringMapOutput)
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
type RuntimeClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler *string `pulumi:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead *Overhead `pulumi:"overhead"`
	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
	Scheduling *Scheduling `pulumi:"scheduling"`
}

type RuntimeClassInput interface {
	pulumi.Input

	ToRuntimeClassOutput() RuntimeClassOutput
	ToRuntimeClassOutputWithContext(context.Context) RuntimeClassOutput
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
type RuntimeClassArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler pulumi.StringPtrInput `pulumi:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead OverheadPtrInput `pulumi:"overhead"`
	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
	Scheduling SchedulingPtrInput `pulumi:"scheduling"`
}

func (RuntimeClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClass)(nil)).Elem()
}

func (i RuntimeClassArgs) ToRuntimeClassOutput() RuntimeClassOutput {
	return i.ToRuntimeClassOutputWithContext(context.Background())
}

func (i RuntimeClassArgs) ToRuntimeClassOutputWithContext(ctx context.Context) RuntimeClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassOutput)
}

type RuntimeClassArrayInput interface {
	pulumi.Input

	ToRuntimeClassArrayOutput() RuntimeClassArrayOutput
	ToRuntimeClassArrayOutputWithContext(context.Context) RuntimeClassArrayOutput
}

type RuntimeClassArray []RuntimeClassInput

func (RuntimeClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeClass)(nil)).Elem()
}

func (i RuntimeClassArray) ToRuntimeClassArrayOutput() RuntimeClassArrayOutput {
	return i.ToRuntimeClassArrayOutputWithContext(context.Background())
}

func (i RuntimeClassArray) ToRuntimeClassArrayOutputWithContext(ctx context.Context) RuntimeClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassArrayOutput)
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
type RuntimeClassOutput struct { *pulumi.OutputState }

func (RuntimeClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClass)(nil)).Elem()
}

func (o RuntimeClassOutput) ToRuntimeClassOutput() RuntimeClassOutput {
	return o
}

func (o RuntimeClassOutput) ToRuntimeClassOutputWithContext(ctx context.Context) RuntimeClassOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RuntimeClassOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable.
func (o RuntimeClassOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *string { return v.Handler }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RuntimeClassOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RuntimeClassOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
func (o RuntimeClassOutput) Overhead() OverheadPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *Overhead { return v.Overhead }).(OverheadPtrOutput)
}

// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
func (o RuntimeClassOutput) Scheduling() SchedulingPtrOutput {
	return o.ApplyT(func (v RuntimeClass) *Scheduling { return v.Scheduling }).(SchedulingPtrOutput)
}

type RuntimeClassArrayOutput struct { *pulumi.OutputState }

func (RuntimeClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeClass)(nil)).Elem()
}

func (o RuntimeClassArrayOutput) ToRuntimeClassArrayOutput() RuntimeClassArrayOutput {
	return o
}

func (o RuntimeClassArrayOutput) ToRuntimeClassArrayOutputWithContext(ctx context.Context) RuntimeClassArrayOutput {
	return o
}

func (o RuntimeClassArrayOutput) Index(i pulumi.IntInput) RuntimeClassOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RuntimeClass {
		return vs[0].([]RuntimeClass)[vs[1].(int)]
	}).(RuntimeClassOutput)
}

// RuntimeClassList is a list of RuntimeClass objects.
type RuntimeClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []RuntimeClass `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type RuntimeClassListInput interface {
	pulumi.Input

	ToRuntimeClassListOutput() RuntimeClassListOutput
	ToRuntimeClassListOutputWithContext(context.Context) RuntimeClassListOutput
}

// RuntimeClassList is a list of RuntimeClass objects.
type RuntimeClassListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items RuntimeClassArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (RuntimeClassListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassList)(nil)).Elem()
}

func (i RuntimeClassListArgs) ToRuntimeClassListOutput() RuntimeClassListOutput {
	return i.ToRuntimeClassListOutputWithContext(context.Background())
}

func (i RuntimeClassListArgs) ToRuntimeClassListOutputWithContext(ctx context.Context) RuntimeClassListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassListOutput)
}

// RuntimeClassList is a list of RuntimeClass objects.
type RuntimeClassListOutput struct { *pulumi.OutputState }

func (RuntimeClassListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassList)(nil)).Elem()
}

func (o RuntimeClassListOutput) ToRuntimeClassListOutput() RuntimeClassListOutput {
	return o
}

func (o RuntimeClassListOutput) ToRuntimeClassListOutputWithContext(ctx context.Context) RuntimeClassListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RuntimeClassListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClassList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o RuntimeClassListOutput) Items() RuntimeClassArrayOutput {
	return o.ApplyT(func (v RuntimeClassList) []RuntimeClass { return v.Items }).(RuntimeClassArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RuntimeClassListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RuntimeClassList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RuntimeClassListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v RuntimeClassList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type Scheduling struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []corev1.Toleration `pulumi:"tolerations"`
}

type SchedulingInput interface {
	pulumi.Input

	ToSchedulingOutput() SchedulingOutput
	ToSchedulingOutputWithContext(context.Context) SchedulingOutput
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type SchedulingArgs struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations corev1.TolerationArrayInput `pulumi:"tolerations"`
}

func (SchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (i SchedulingArgs) ToSchedulingOutput() SchedulingOutput {
	return i.ToSchedulingOutputWithContext(context.Background())
}

func (i SchedulingArgs) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingOutput)
}

func (i SchedulingArgs) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return i.ToSchedulingPtrOutputWithContext(context.Background())
}

func (i SchedulingArgs) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingOutput).ToSchedulingPtrOutputWithContext(ctx)
}

type SchedulingPtrInput interface {
	pulumi.Input

	ToSchedulingPtrOutput() SchedulingPtrOutput
	ToSchedulingPtrOutputWithContext(context.Context) SchedulingPtrOutput
}

type schedulingPtrType SchedulingArgs

func SchedulingPtr(v *SchedulingArgs) SchedulingPtrInput {	return (*schedulingPtrType)(v)
}

func (*schedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scheduling)(nil)).Elem()
}

func (i *schedulingPtrType) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return i.ToSchedulingPtrOutputWithContext(context.Background())
}

func (i *schedulingPtrType) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPtrOutput)
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type SchedulingOutput struct { *pulumi.OutputState }

func (SchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (o SchedulingOutput) ToSchedulingOutput() SchedulingOutput {
	return o
}

func (o SchedulingOutput) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return o
}

func (o SchedulingOutput) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return o.ToSchedulingPtrOutputWithContext(context.Background())
}

func (o SchedulingOutput) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return o.ApplyT(func(v Scheduling) *Scheduling {
		return &v
	}).(SchedulingPtrOutput)
}
// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
func (o SchedulingOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func (v Scheduling) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
func (o SchedulingOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func (v Scheduling) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

type SchedulingPtrOutput struct { *pulumi.OutputState }

func (SchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scheduling)(nil)).Elem()
}

func (o SchedulingPtrOutput) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return o
}

func (o SchedulingPtrOutput) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return o
}

func (o SchedulingPtrOutput) Elem() SchedulingOutput {
	return o.ApplyT(func (v *Scheduling) Scheduling { return *v }).(SchedulingOutput)
}

// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
func (o SchedulingPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func (v Scheduling) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
func (o SchedulingPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func (v Scheduling) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(OverheadOutput{})
	pulumi.RegisterOutputType(OverheadPtrOutput{})
	pulumi.RegisterOutputType(RuntimeClassOutput{})
	pulumi.RegisterOutputType(RuntimeClassArrayOutput{})
	pulumi.RegisterOutputType(RuntimeClassListOutput{})
	pulumi.RegisterOutputType(SchedulingOutput{})
	pulumi.RegisterOutputType(SchedulingPtrOutput{})
}
