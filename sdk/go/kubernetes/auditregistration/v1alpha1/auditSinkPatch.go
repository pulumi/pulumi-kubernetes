// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// AuditSink represents a cluster level audit sink
type AuditSinkPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrOutput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Spec defines the audit configuration spec
	Spec AuditSinkSpecPatchPtrOutput `pulumi:"spec"`
}

// NewAuditSinkPatch registers a new resource with the given unique name, arguments, and options.
func NewAuditSinkPatch(ctx *pulumi.Context,
	name string, args *AuditSinkPatchArgs, opts ...pulumi.ResourceOption) (*AuditSinkPatch, error) {
	if args == nil {
		args = &AuditSinkPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("auditregistration.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AuditSink")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AuditSinkPatch
	err := ctx.RegisterResource("kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditSinkPatch gets an existing AuditSinkPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditSinkPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditSinkPatchState, opts ...pulumi.ResourceOption) (*AuditSinkPatch, error) {
	var resource AuditSinkPatch
	err := ctx.ReadResource("kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditSinkPatch resources.
type auditSinkPatchState struct {
}

type AuditSinkPatchState struct {
}

func (AuditSinkPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditSinkPatchState)(nil)).Elem()
}

type auditSinkPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the audit configuration spec
	Spec *AuditSinkSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a AuditSinkPatch resource.
type AuditSinkPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPatchPtrInput
	// Spec defines the audit configuration spec
	Spec AuditSinkSpecPatchPtrInput
}

func (AuditSinkPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditSinkPatchArgs)(nil)).Elem()
}

type AuditSinkPatchInput interface {
	pulumi.Input

	ToAuditSinkPatchOutput() AuditSinkPatchOutput
	ToAuditSinkPatchOutputWithContext(ctx context.Context) AuditSinkPatchOutput
}

func (*AuditSinkPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditSinkPatch)(nil)).Elem()
}

func (i *AuditSinkPatch) ToAuditSinkPatchOutput() AuditSinkPatchOutput {
	return i.ToAuditSinkPatchOutputWithContext(context.Background())
}

func (i *AuditSinkPatch) ToAuditSinkPatchOutputWithContext(ctx context.Context) AuditSinkPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkPatchOutput)
}

// AuditSinkPatchArrayInput is an input type that accepts AuditSinkPatchArray and AuditSinkPatchArrayOutput values.
// You can construct a concrete instance of `AuditSinkPatchArrayInput` via:
//
//	AuditSinkPatchArray{ AuditSinkPatchArgs{...} }
type AuditSinkPatchArrayInput interface {
	pulumi.Input

	ToAuditSinkPatchArrayOutput() AuditSinkPatchArrayOutput
	ToAuditSinkPatchArrayOutputWithContext(context.Context) AuditSinkPatchArrayOutput
}

type AuditSinkPatchArray []AuditSinkPatchInput

func (AuditSinkPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditSinkPatch)(nil)).Elem()
}

func (i AuditSinkPatchArray) ToAuditSinkPatchArrayOutput() AuditSinkPatchArrayOutput {
	return i.ToAuditSinkPatchArrayOutputWithContext(context.Background())
}

func (i AuditSinkPatchArray) ToAuditSinkPatchArrayOutputWithContext(ctx context.Context) AuditSinkPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkPatchArrayOutput)
}

// AuditSinkPatchMapInput is an input type that accepts AuditSinkPatchMap and AuditSinkPatchMapOutput values.
// You can construct a concrete instance of `AuditSinkPatchMapInput` via:
//
//	AuditSinkPatchMap{ "key": AuditSinkPatchArgs{...} }
type AuditSinkPatchMapInput interface {
	pulumi.Input

	ToAuditSinkPatchMapOutput() AuditSinkPatchMapOutput
	ToAuditSinkPatchMapOutputWithContext(context.Context) AuditSinkPatchMapOutput
}

type AuditSinkPatchMap map[string]AuditSinkPatchInput

func (AuditSinkPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditSinkPatch)(nil)).Elem()
}

func (i AuditSinkPatchMap) ToAuditSinkPatchMapOutput() AuditSinkPatchMapOutput {
	return i.ToAuditSinkPatchMapOutputWithContext(context.Background())
}

func (i AuditSinkPatchMap) ToAuditSinkPatchMapOutputWithContext(ctx context.Context) AuditSinkPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkPatchMapOutput)
}

type AuditSinkPatchOutput struct{ *pulumi.OutputState }

func (AuditSinkPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditSinkPatch)(nil)).Elem()
}

func (o AuditSinkPatchOutput) ToAuditSinkPatchOutput() AuditSinkPatchOutput {
	return o
}

func (o AuditSinkPatchOutput) ToAuditSinkPatchOutputWithContext(ctx context.Context) AuditSinkPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AuditSinkPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditSinkPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AuditSinkPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditSinkPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AuditSinkPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AuditSinkPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the audit configuration spec
func (o AuditSinkPatchOutput) Spec() AuditSinkSpecPatchPtrOutput {
	return o.ApplyT(func(v *AuditSinkPatch) AuditSinkSpecPatchPtrOutput { return v.Spec }).(AuditSinkSpecPatchPtrOutput)
}

type AuditSinkPatchArrayOutput struct{ *pulumi.OutputState }

func (AuditSinkPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditSinkPatch)(nil)).Elem()
}

func (o AuditSinkPatchArrayOutput) ToAuditSinkPatchArrayOutput() AuditSinkPatchArrayOutput {
	return o
}

func (o AuditSinkPatchArrayOutput) ToAuditSinkPatchArrayOutputWithContext(ctx context.Context) AuditSinkPatchArrayOutput {
	return o
}

func (o AuditSinkPatchArrayOutput) Index(i pulumi.IntInput) AuditSinkPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuditSinkPatch {
		return vs[0].([]*AuditSinkPatch)[vs[1].(int)]
	}).(AuditSinkPatchOutput)
}

type AuditSinkPatchMapOutput struct{ *pulumi.OutputState }

func (AuditSinkPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditSinkPatch)(nil)).Elem()
}

func (o AuditSinkPatchMapOutput) ToAuditSinkPatchMapOutput() AuditSinkPatchMapOutput {
	return o
}

func (o AuditSinkPatchMapOutput) ToAuditSinkPatchMapOutputWithContext(ctx context.Context) AuditSinkPatchMapOutput {
	return o
}

func (o AuditSinkPatchMapOutput) MapIndex(k pulumi.StringInput) AuditSinkPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuditSinkPatch {
		return vs[0].(map[string]*AuditSinkPatch)[vs[1].(string)]
	}).(AuditSinkPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditSinkPatchInput)(nil)).Elem(), &AuditSinkPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditSinkPatchArrayInput)(nil)).Elem(), AuditSinkPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditSinkPatchMapInput)(nil)).Elem(), AuditSinkPatchMap{})
	pulumi.RegisterOutputType(AuditSinkPatchOutput{})
	pulumi.RegisterOutputType(AuditSinkPatchArrayOutput{})
	pulumi.RegisterOutputType(AuditSinkPatchMapOutput{})
}
