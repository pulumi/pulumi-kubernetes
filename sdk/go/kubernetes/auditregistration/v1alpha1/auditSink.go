// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AuditSink represents a cluster level audit sink
type AuditSink struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the audit configuration spec
	Spec AuditSinkSpecPtrOutput `pulumi:"spec"`
}

// NewAuditSink registers a new resource with the given unique name, arguments, and options.
func NewAuditSink(ctx *pulumi.Context,
	name string, args *AuditSinkArgs, opts ...pulumi.ResourceOption) (*AuditSink, error) {
	if args == nil {
		args = &AuditSinkArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("auditregistration.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AuditSink")
	var resource AuditSink
	err := ctx.RegisterResource("kubernetes:auditregistration.k8s.io/v1alpha1:AuditSink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditSink gets an existing AuditSink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditSink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditSinkState, opts ...pulumi.ResourceOption) (*AuditSink, error) {
	var resource AuditSink
	err := ctx.ReadResource("kubernetes:auditregistration.k8s.io/v1alpha1:AuditSink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditSink resources.
type auditSinkState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the audit configuration spec
	Spec *AuditSinkSpec `pulumi:"spec"`
}

type AuditSinkState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Spec defines the audit configuration spec
	Spec AuditSinkSpecPtrInput
}

func (AuditSinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditSinkState)(nil)).Elem()
}

type auditSinkArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the audit configuration spec
	Spec *AuditSinkSpec `pulumi:"spec"`
}

// The set of arguments for constructing a AuditSink resource.
type AuditSinkArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Spec defines the audit configuration spec
	Spec AuditSinkSpecPtrInput
}

func (AuditSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditSinkArgs)(nil)).Elem()
}

type AuditSinkInput interface {
	pulumi.Input

	ToAuditSinkOutput() AuditSinkOutput
	ToAuditSinkOutputWithContext(ctx context.Context) AuditSinkOutput
}

func (*AuditSink) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditSink)(nil))
}

func (i *AuditSink) ToAuditSinkOutput() AuditSinkOutput {
	return i.ToAuditSinkOutputWithContext(context.Background())
}

func (i *AuditSink) ToAuditSinkOutputWithContext(ctx context.Context) AuditSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkOutput)
}

func (i *AuditSink) ToAuditSinkPtrOutput() AuditSinkPtrOutput {
	return i.ToAuditSinkPtrOutputWithContext(context.Background())
}

func (i *AuditSink) ToAuditSinkPtrOutputWithContext(ctx context.Context) AuditSinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkPtrOutput)
}

type AuditSinkPtrInput interface {
	pulumi.Input

	ToAuditSinkPtrOutput() AuditSinkPtrOutput
	ToAuditSinkPtrOutputWithContext(ctx context.Context) AuditSinkPtrOutput
}

type auditSinkPtrType AuditSinkArgs

func (*auditSinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditSink)(nil))
}

func (i *auditSinkPtrType) ToAuditSinkPtrOutput() AuditSinkPtrOutput {
	return i.ToAuditSinkPtrOutputWithContext(context.Background())
}

func (i *auditSinkPtrType) ToAuditSinkPtrOutputWithContext(ctx context.Context) AuditSinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkPtrOutput)
}

// AuditSinkArrayInput is an input type that accepts AuditSinkArray and AuditSinkArrayOutput values.
// You can construct a concrete instance of `AuditSinkArrayInput` via:
//
//          AuditSinkArray{ AuditSinkArgs{...} }
type AuditSinkArrayInput interface {
	pulumi.Input

	ToAuditSinkArrayOutput() AuditSinkArrayOutput
	ToAuditSinkArrayOutputWithContext(context.Context) AuditSinkArrayOutput
}

type AuditSinkArray []AuditSinkInput

func (AuditSinkArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AuditSink)(nil))
}

func (i AuditSinkArray) ToAuditSinkArrayOutput() AuditSinkArrayOutput {
	return i.ToAuditSinkArrayOutputWithContext(context.Background())
}

func (i AuditSinkArray) ToAuditSinkArrayOutputWithContext(ctx context.Context) AuditSinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkArrayOutput)
}

// AuditSinkMapInput is an input type that accepts AuditSinkMap and AuditSinkMapOutput values.
// You can construct a concrete instance of `AuditSinkMapInput` via:
//
//          AuditSinkMap{ "key": AuditSinkArgs{...} }
type AuditSinkMapInput interface {
	pulumi.Input

	ToAuditSinkMapOutput() AuditSinkMapOutput
	ToAuditSinkMapOutputWithContext(context.Context) AuditSinkMapOutput
}

type AuditSinkMap map[string]AuditSinkInput

func (AuditSinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AuditSink)(nil))
}

func (i AuditSinkMap) ToAuditSinkMapOutput() AuditSinkMapOutput {
	return i.ToAuditSinkMapOutputWithContext(context.Background())
}

func (i AuditSinkMap) ToAuditSinkMapOutputWithContext(ctx context.Context) AuditSinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditSinkMapOutput)
}

type AuditSinkOutput struct {
	*pulumi.OutputState
}

func (AuditSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditSink)(nil))
}

func (o AuditSinkOutput) ToAuditSinkOutput() AuditSinkOutput {
	return o
}

func (o AuditSinkOutput) ToAuditSinkOutputWithContext(ctx context.Context) AuditSinkOutput {
	return o
}

func (o AuditSinkOutput) ToAuditSinkPtrOutput() AuditSinkPtrOutput {
	return o.ToAuditSinkPtrOutputWithContext(context.Background())
}

func (o AuditSinkOutput) ToAuditSinkPtrOutputWithContext(ctx context.Context) AuditSinkPtrOutput {
	return o.ApplyT(func(v AuditSink) *AuditSink {
		return &v
	}).(AuditSinkPtrOutput)
}

type AuditSinkPtrOutput struct {
	*pulumi.OutputState
}

func (AuditSinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditSink)(nil))
}

func (o AuditSinkPtrOutput) ToAuditSinkPtrOutput() AuditSinkPtrOutput {
	return o
}

func (o AuditSinkPtrOutput) ToAuditSinkPtrOutputWithContext(ctx context.Context) AuditSinkPtrOutput {
	return o
}

type AuditSinkArrayOutput struct{ *pulumi.OutputState }

func (AuditSinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditSink)(nil))
}

func (o AuditSinkArrayOutput) ToAuditSinkArrayOutput() AuditSinkArrayOutput {
	return o
}

func (o AuditSinkArrayOutput) ToAuditSinkArrayOutputWithContext(ctx context.Context) AuditSinkArrayOutput {
	return o
}

func (o AuditSinkArrayOutput) Index(i pulumi.IntInput) AuditSinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditSink {
		return vs[0].([]AuditSink)[vs[1].(int)]
	}).(AuditSinkOutput)
}

type AuditSinkMapOutput struct{ *pulumi.OutputState }

func (AuditSinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AuditSink)(nil))
}

func (o AuditSinkMapOutput) ToAuditSinkMapOutput() AuditSinkMapOutput {
	return o
}

func (o AuditSinkMapOutput) ToAuditSinkMapOutputWithContext(ctx context.Context) AuditSinkMapOutput {
	return o
}

func (o AuditSinkMapOutput) MapIndex(k pulumi.StringInput) AuditSinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AuditSink {
		return vs[0].(map[string]AuditSink)[vs[1].(string)]
	}).(AuditSinkOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditSinkOutput{})
	pulumi.RegisterOutputType(AuditSinkPtrOutput{})
	pulumi.RegisterOutputType(AuditSinkArrayOutput{})
	pulumi.RegisterOutputType(AuditSinkMapOutput{})
}
