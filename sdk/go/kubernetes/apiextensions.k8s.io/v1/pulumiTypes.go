// *** WARNING: this file was generated by foo. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	apiextensionsv1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/apiextensions/v1"
)

// CustomResourceColumnDefinition specifies a column for server side printing.
type CustomResourceColumnDefinition struct {
	// description is a human readable description of this column.
	Description *string `pulumi:"description"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format *string `pulumi:"format"`
	// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JsonPath *string `pulumi:"jsonPath"`
	// name is a human readable name for the column.
	Name *string `pulumi:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority *int `pulumi:"priority"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type *string `pulumi:"type"`
}

type CustomResourceColumnDefinitionInput interface {
	pulumi.Input

	ToCustomResourceColumnDefinitionOutput() CustomResourceColumnDefinitionOutput
	ToCustomResourceColumnDefinitionOutputWithContext(context.Context) CustomResourceColumnDefinitionOutput
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type CustomResourceColumnDefinitionArgs struct {
	// description is a human readable description of this column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JsonPath pulumi.StringPtrInput `pulumi:"jsonPath"`
	// name is a human readable name for the column.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomResourceColumnDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceColumnDefinition)(nil)).Elem()
}

func (i CustomResourceColumnDefinitionArgs) ToCustomResourceColumnDefinitionOutput() CustomResourceColumnDefinitionOutput {
	return i.ToCustomResourceColumnDefinitionOutputWithContext(context.Background())
}

func (i CustomResourceColumnDefinitionArgs) ToCustomResourceColumnDefinitionOutputWithContext(ctx context.Context) CustomResourceColumnDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceColumnDefinitionOutput)
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type CustomResourceColumnDefinitionOutput struct { *pulumi.OutputState }

func (CustomResourceColumnDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceColumnDefinition)(nil)).Elem()
}

func (o CustomResourceColumnDefinitionOutput) ToCustomResourceColumnDefinitionOutput() CustomResourceColumnDefinitionOutput {
	return o
}

func (o CustomResourceColumnDefinitionOutput) ToCustomResourceColumnDefinitionOutputWithContext(ctx context.Context) CustomResourceColumnDefinitionOutput {
	return o
}

// description is a human readable description of this column.
func (o CustomResourceColumnDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (o CustomResourceColumnDefinitionOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
func (o CustomResourceColumnDefinitionOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *string { return v.JsonPath }).(pulumi.StringPtrOutput)
}

// name is a human readable name for the column.
func (o CustomResourceColumnDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
func (o CustomResourceColumnDefinitionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (o CustomResourceColumnDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceColumnDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// CustomResourceConversion describes how to convert different versions of a CR.
type CustomResourceConversion struct {
	// strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
	//   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
	Strategy *string `pulumi:"strategy"`
	// webhook describes how to call the conversion webhook. Required when `strategy` is set to `Webhook`.
	Webhook *apiextensionsv1.WebhookConversion `pulumi:"webhook"`
}

type CustomResourceConversionInput interface {
	pulumi.Input

	ToCustomResourceConversionOutput() CustomResourceConversionOutput
	ToCustomResourceConversionOutputWithContext(context.Context) CustomResourceConversionOutput
}

// CustomResourceConversion describes how to convert different versions of a CR.
type CustomResourceConversionArgs struct {
	// strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
	//   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
	// webhook describes how to call the conversion webhook. Required when `strategy` is set to `Webhook`.
	Webhook apiextensionsv1.WebhookConversionPtrInput `pulumi:"webhook"`
}

func (CustomResourceConversionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceConversion)(nil)).Elem()
}

func (i CustomResourceConversionArgs) ToCustomResourceConversionOutput() CustomResourceConversionOutput {
	return i.ToCustomResourceConversionOutputWithContext(context.Background())
}

func (i CustomResourceConversionArgs) ToCustomResourceConversionOutputWithContext(ctx context.Context) CustomResourceConversionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceConversionOutput)
}

// CustomResourceConversion describes how to convert different versions of a CR.
type CustomResourceConversionOutput struct { *pulumi.OutputState }

func (CustomResourceConversionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceConversion)(nil)).Elem()
}

func (o CustomResourceConversionOutput) ToCustomResourceConversionOutput() CustomResourceConversionOutput {
	return o
}

func (o CustomResourceConversionOutput) ToCustomResourceConversionOutputWithContext(ctx context.Context) CustomResourceConversionOutput {
	return o
}

// strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
//   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
func (o CustomResourceConversionOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceConversion) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

// webhook describes how to call the conversion webhook. Required when `strategy` is set to `Webhook`.
func (o CustomResourceConversionOutput) Webhook() apiextensionsv1.WebhookConversionPtrOutput {
	return o.ApplyT(func (v CustomResourceConversion) *apiextensionsv1.WebhookConversion { return v.Webhook }).(apiextensionsv1.WebhookConversionPtrOutput)
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
type CustomResourceDefinitionCondition struct {
	// lastTransitionTime last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// status is the status of the condition. Can be True, False, Unknown.
	Status *string `pulumi:"status"`
	// type is the type of the condition. Types include Established, NamesAccepted and Terminating.
	Type *string `pulumi:"type"`
}

type CustomResourceDefinitionConditionInput interface {
	pulumi.Input

	ToCustomResourceDefinitionConditionOutput() CustomResourceDefinitionConditionOutput
	ToCustomResourceDefinitionConditionOutputWithContext(context.Context) CustomResourceDefinitionConditionOutput
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
type CustomResourceDefinitionConditionArgs struct {
	// lastTransitionTime last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status is the status of the condition. Can be True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type is the type of the condition. Types include Established, NamesAccepted and Terminating.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomResourceDefinitionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionCondition)(nil)).Elem()
}

func (i CustomResourceDefinitionConditionArgs) ToCustomResourceDefinitionConditionOutput() CustomResourceDefinitionConditionOutput {
	return i.ToCustomResourceDefinitionConditionOutputWithContext(context.Background())
}

func (i CustomResourceDefinitionConditionArgs) ToCustomResourceDefinitionConditionOutputWithContext(ctx context.Context) CustomResourceDefinitionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceDefinitionConditionOutput)
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
type CustomResourceDefinitionConditionOutput struct { *pulumi.OutputState }

func (CustomResourceDefinitionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionCondition)(nil)).Elem()
}

func (o CustomResourceDefinitionConditionOutput) ToCustomResourceDefinitionConditionOutput() CustomResourceDefinitionConditionOutput {
	return o
}

func (o CustomResourceDefinitionConditionOutput) ToCustomResourceDefinitionConditionOutputWithContext(ctx context.Context) CustomResourceDefinitionConditionOutput {
	return o
}

// lastTransitionTime last time the condition transitioned from one status to another.
func (o CustomResourceDefinitionConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human-readable message indicating details about last transition.
func (o CustomResourceDefinitionConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, one-word, CamelCase reason for the condition's last transition.
func (o CustomResourceDefinitionConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status is the status of the condition. Can be True, False, Unknown.
func (o CustomResourceDefinitionConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type is the type of the condition. Types include Established, NamesAccepted and Terminating.
func (o CustomResourceDefinitionConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
type CustomResourceDefinitionNames struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories []string `pulumi:"categories"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind *string `pulumi:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind *string `pulumi:"listKind"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural *string `pulumi:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames []string `pulumi:"shortNames"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular *string `pulumi:"singular"`
}

type CustomResourceDefinitionNamesInput interface {
	pulumi.Input

	ToCustomResourceDefinitionNamesOutput() CustomResourceDefinitionNamesOutput
	ToCustomResourceDefinitionNamesOutputWithContext(context.Context) CustomResourceDefinitionNamesOutput
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
type CustomResourceDefinitionNamesArgs struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind pulumi.StringPtrInput `pulumi:"listKind"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural pulumi.StringPtrInput `pulumi:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames pulumi.StringArrayInput `pulumi:"shortNames"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular pulumi.StringPtrInput `pulumi:"singular"`
}

func (CustomResourceDefinitionNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionNames)(nil)).Elem()
}

func (i CustomResourceDefinitionNamesArgs) ToCustomResourceDefinitionNamesOutput() CustomResourceDefinitionNamesOutput {
	return i.ToCustomResourceDefinitionNamesOutputWithContext(context.Background())
}

func (i CustomResourceDefinitionNamesArgs) ToCustomResourceDefinitionNamesOutputWithContext(ctx context.Context) CustomResourceDefinitionNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceDefinitionNamesOutput)
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
type CustomResourceDefinitionNamesOutput struct { *pulumi.OutputState }

func (CustomResourceDefinitionNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionNames)(nil)).Elem()
}

func (o CustomResourceDefinitionNamesOutput) ToCustomResourceDefinitionNamesOutput() CustomResourceDefinitionNamesOutput {
	return o
}

func (o CustomResourceDefinitionNamesOutput) ToCustomResourceDefinitionNamesOutputWithContext(ctx context.Context) CustomResourceDefinitionNamesOutput {
	return o
}

// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
func (o CustomResourceDefinitionNamesOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
func (o CustomResourceDefinitionNamesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
func (o CustomResourceDefinitionNamesOutput) ListKind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) *string { return v.ListKind }).(pulumi.StringPtrOutput)
}

// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
func (o CustomResourceDefinitionNamesOutput) Plural() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) *string { return v.Plural }).(pulumi.StringPtrOutput)
}

// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
func (o CustomResourceDefinitionNamesOutput) ShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) []string { return v.ShortNames }).(pulumi.StringArrayOutput)
}

// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
func (o CustomResourceDefinitionNamesOutput) Singular() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionNames) *string { return v.Singular }).(pulumi.StringPtrOutput)
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
type CustomResourceDefinitionSpec struct {
	// conversion defines conversion settings for the CRD.
	Conversion *apiextensionsv1.CustomResourceConversion `pulumi:"conversion"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group *string `pulumi:"group"`
	// names specify the resource and kind names for the custom resource.
	Names *apiextensionsv1.CustomResourceDefinitionNames `pulumi:"names"`
	// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
	PreserveUnknownFields *bool `pulumi:"preserveUnknownFields"`
	// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
	Scope *string `pulumi:"scope"`
	// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions []apiextensionsv1.CustomResourceDefinitionVersion `pulumi:"versions"`
}

type CustomResourceDefinitionSpecInput interface {
	pulumi.Input

	ToCustomResourceDefinitionSpecOutput() CustomResourceDefinitionSpecOutput
	ToCustomResourceDefinitionSpecOutputWithContext(context.Context) CustomResourceDefinitionSpecOutput
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
type CustomResourceDefinitionSpecArgs struct {
	// conversion defines conversion settings for the CRD.
	Conversion apiextensionsv1.CustomResourceConversionPtrInput `pulumi:"conversion"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group pulumi.StringPtrInput `pulumi:"group"`
	// names specify the resource and kind names for the custom resource.
	Names apiextensionsv1.CustomResourceDefinitionNamesPtrInput `pulumi:"names"`
	// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
	PreserveUnknownFields pulumi.BoolPtrInput `pulumi:"preserveUnknownFields"`
	// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions apiextensionsv1.CustomResourceDefinitionVersionArrayInput `pulumi:"versions"`
}

func (CustomResourceDefinitionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionSpec)(nil)).Elem()
}

func (i CustomResourceDefinitionSpecArgs) ToCustomResourceDefinitionSpecOutput() CustomResourceDefinitionSpecOutput {
	return i.ToCustomResourceDefinitionSpecOutputWithContext(context.Background())
}

func (i CustomResourceDefinitionSpecArgs) ToCustomResourceDefinitionSpecOutputWithContext(ctx context.Context) CustomResourceDefinitionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceDefinitionSpecOutput)
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
type CustomResourceDefinitionSpecOutput struct { *pulumi.OutputState }

func (CustomResourceDefinitionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionSpec)(nil)).Elem()
}

func (o CustomResourceDefinitionSpecOutput) ToCustomResourceDefinitionSpecOutput() CustomResourceDefinitionSpecOutput {
	return o
}

func (o CustomResourceDefinitionSpecOutput) ToCustomResourceDefinitionSpecOutputWithContext(ctx context.Context) CustomResourceDefinitionSpecOutput {
	return o
}

// conversion defines conversion settings for the CRD.
func (o CustomResourceDefinitionSpecOutput) Conversion() apiextensionsv1.CustomResourceConversionPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) *apiextensionsv1.CustomResourceConversion { return v.Conversion }).(apiextensionsv1.CustomResourceConversionPtrOutput)
}

// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
func (o CustomResourceDefinitionSpecOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// names specify the resource and kind names for the custom resource.
func (o CustomResourceDefinitionSpecOutput) Names() apiextensionsv1.CustomResourceDefinitionNamesPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) *apiextensionsv1.CustomResourceDefinitionNames { return v.Names }).(apiextensionsv1.CustomResourceDefinitionNamesPtrOutput)
}

// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
func (o CustomResourceDefinitionSpecOutput) PreserveUnknownFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) *bool { return v.PreserveUnknownFields }).(pulumi.BoolPtrOutput)
}

// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
func (o CustomResourceDefinitionSpecOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
func (o CustomResourceDefinitionSpecOutput) Versions() apiextensionsv1.CustomResourceDefinitionVersionArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionSpec) []apiextensionsv1.CustomResourceDefinitionVersion { return v.Versions }).(apiextensionsv1.CustomResourceDefinitionVersionArrayOutput)
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
type CustomResourceDefinitionStatus struct {
	// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
	AcceptedNames *apiextensionsv1.CustomResourceDefinitionNames `pulumi:"acceptedNames"`
	// conditions indicate state for particular aspects of a CustomResourceDefinition
	Conditions []apiextensionsv1.CustomResourceDefinitionCondition `pulumi:"conditions"`
	// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
	StoredVersions []string `pulumi:"storedVersions"`
}

type CustomResourceDefinitionStatusInput interface {
	pulumi.Input

	ToCustomResourceDefinitionStatusOutput() CustomResourceDefinitionStatusOutput
	ToCustomResourceDefinitionStatusOutputWithContext(context.Context) CustomResourceDefinitionStatusOutput
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
type CustomResourceDefinitionStatusArgs struct {
	// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
	AcceptedNames apiextensionsv1.CustomResourceDefinitionNamesPtrInput `pulumi:"acceptedNames"`
	// conditions indicate state for particular aspects of a CustomResourceDefinition
	Conditions apiextensionsv1.CustomResourceDefinitionConditionArrayInput `pulumi:"conditions"`
	// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
	StoredVersions pulumi.StringArrayInput `pulumi:"storedVersions"`
}

func (CustomResourceDefinitionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionStatus)(nil)).Elem()
}

func (i CustomResourceDefinitionStatusArgs) ToCustomResourceDefinitionStatusOutput() CustomResourceDefinitionStatusOutput {
	return i.ToCustomResourceDefinitionStatusOutputWithContext(context.Background())
}

func (i CustomResourceDefinitionStatusArgs) ToCustomResourceDefinitionStatusOutputWithContext(ctx context.Context) CustomResourceDefinitionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceDefinitionStatusOutput)
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
type CustomResourceDefinitionStatusOutput struct { *pulumi.OutputState }

func (CustomResourceDefinitionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionStatus)(nil)).Elem()
}

func (o CustomResourceDefinitionStatusOutput) ToCustomResourceDefinitionStatusOutput() CustomResourceDefinitionStatusOutput {
	return o
}

func (o CustomResourceDefinitionStatusOutput) ToCustomResourceDefinitionStatusOutputWithContext(ctx context.Context) CustomResourceDefinitionStatusOutput {
	return o
}

// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
func (o CustomResourceDefinitionStatusOutput) AcceptedNames() apiextensionsv1.CustomResourceDefinitionNamesPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionStatus) *apiextensionsv1.CustomResourceDefinitionNames { return v.AcceptedNames }).(apiextensionsv1.CustomResourceDefinitionNamesPtrOutput)
}

// conditions indicate state for particular aspects of a CustomResourceDefinition
func (o CustomResourceDefinitionStatusOutput) Conditions() apiextensionsv1.CustomResourceDefinitionConditionArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionStatus) []apiextensionsv1.CustomResourceDefinitionCondition { return v.Conditions }).(apiextensionsv1.CustomResourceDefinitionConditionArrayOutput)
}

// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
func (o CustomResourceDefinitionStatusOutput) StoredVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionStatus) []string { return v.StoredVersions }).(pulumi.StringArrayOutput)
}

// CustomResourceDefinitionVersion describes a version for CRD.
type CustomResourceDefinitionVersion struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns []apiextensionsv1.CustomResourceColumnDefinition `pulumi:"additionalPrinterColumns"`
	// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
	Name *string `pulumi:"name"`
	// schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
	Schema *apiextensionsv1.CustomResourceValidation `pulumi:"schema"`
	// served is a flag enabling/disabling this version from being served via REST APIs
	Served *bool `pulumi:"served"`
	// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
	Storage *bool `pulumi:"storage"`
	// subresources specify what subresources this version of the defined custom resource have.
	Subresources *apiextensionsv1.CustomResourceSubresources `pulumi:"subresources"`
}

type CustomResourceDefinitionVersionInput interface {
	pulumi.Input

	ToCustomResourceDefinitionVersionOutput() CustomResourceDefinitionVersionOutput
	ToCustomResourceDefinitionVersionOutputWithContext(context.Context) CustomResourceDefinitionVersionOutput
}

// CustomResourceDefinitionVersion describes a version for CRD.
type CustomResourceDefinitionVersionArgs struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns apiextensionsv1.CustomResourceColumnDefinitionArrayInput `pulumi:"additionalPrinterColumns"`
	// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
	Schema apiextensionsv1.CustomResourceValidationPtrInput `pulumi:"schema"`
	// served is a flag enabling/disabling this version from being served via REST APIs
	Served pulumi.BoolPtrInput `pulumi:"served"`
	// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
	Storage pulumi.BoolPtrInput `pulumi:"storage"`
	// subresources specify what subresources this version of the defined custom resource have.
	Subresources apiextensionsv1.CustomResourceSubresourcesPtrInput `pulumi:"subresources"`
}

func (CustomResourceDefinitionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionVersion)(nil)).Elem()
}

func (i CustomResourceDefinitionVersionArgs) ToCustomResourceDefinitionVersionOutput() CustomResourceDefinitionVersionOutput {
	return i.ToCustomResourceDefinitionVersionOutputWithContext(context.Background())
}

func (i CustomResourceDefinitionVersionArgs) ToCustomResourceDefinitionVersionOutputWithContext(ctx context.Context) CustomResourceDefinitionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceDefinitionVersionOutput)
}

// CustomResourceDefinitionVersion describes a version for CRD.
type CustomResourceDefinitionVersionOutput struct { *pulumi.OutputState }

func (CustomResourceDefinitionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceDefinitionVersion)(nil)).Elem()
}

func (o CustomResourceDefinitionVersionOutput) ToCustomResourceDefinitionVersionOutput() CustomResourceDefinitionVersionOutput {
	return o
}

func (o CustomResourceDefinitionVersionOutput) ToCustomResourceDefinitionVersionOutputWithContext(ctx context.Context) CustomResourceDefinitionVersionOutput {
	return o
}

// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
func (o CustomResourceDefinitionVersionOutput) AdditionalPrinterColumns() apiextensionsv1.CustomResourceColumnDefinitionArrayOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) []apiextensionsv1.CustomResourceColumnDefinition { return v.AdditionalPrinterColumns }).(apiextensionsv1.CustomResourceColumnDefinitionArrayOutput)
}

// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
func (o CustomResourceDefinitionVersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
func (o CustomResourceDefinitionVersionOutput) Schema() apiextensionsv1.CustomResourceValidationPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) *apiextensionsv1.CustomResourceValidation { return v.Schema }).(apiextensionsv1.CustomResourceValidationPtrOutput)
}

// served is a flag enabling/disabling this version from being served via REST APIs
func (o CustomResourceDefinitionVersionOutput) Served() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) *bool { return v.Served }).(pulumi.BoolPtrOutput)
}

// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
func (o CustomResourceDefinitionVersionOutput) Storage() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) *bool { return v.Storage }).(pulumi.BoolPtrOutput)
}

// subresources specify what subresources this version of the defined custom resource have.
func (o CustomResourceDefinitionVersionOutput) Subresources() apiextensionsv1.CustomResourceSubresourcesPtrOutput {
	return o.ApplyT(func (v CustomResourceDefinitionVersion) *apiextensionsv1.CustomResourceSubresources { return v.Subresources }).(apiextensionsv1.CustomResourceSubresourcesPtrOutput)
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
type CustomResourceSubresourceScale struct {
	// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
	LabelSelectorPath *string `pulumi:"labelSelectorPath"`
	// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
	SpecReplicasPath *string `pulumi:"specReplicasPath"`
	// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
	StatusReplicasPath *string `pulumi:"statusReplicasPath"`
}

type CustomResourceSubresourceScaleInput interface {
	pulumi.Input

	ToCustomResourceSubresourceScaleOutput() CustomResourceSubresourceScaleOutput
	ToCustomResourceSubresourceScaleOutputWithContext(context.Context) CustomResourceSubresourceScaleOutput
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
type CustomResourceSubresourceScaleArgs struct {
	// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
	LabelSelectorPath pulumi.StringPtrInput `pulumi:"labelSelectorPath"`
	// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
	SpecReplicasPath pulumi.StringPtrInput `pulumi:"specReplicasPath"`
	// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
	StatusReplicasPath pulumi.StringPtrInput `pulumi:"statusReplicasPath"`
}

func (CustomResourceSubresourceScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceSubresourceScale)(nil)).Elem()
}

func (i CustomResourceSubresourceScaleArgs) ToCustomResourceSubresourceScaleOutput() CustomResourceSubresourceScaleOutput {
	return i.ToCustomResourceSubresourceScaleOutputWithContext(context.Background())
}

func (i CustomResourceSubresourceScaleArgs) ToCustomResourceSubresourceScaleOutputWithContext(ctx context.Context) CustomResourceSubresourceScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceSubresourceScaleOutput)
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
type CustomResourceSubresourceScaleOutput struct { *pulumi.OutputState }

func (CustomResourceSubresourceScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceSubresourceScale)(nil)).Elem()
}

func (o CustomResourceSubresourceScaleOutput) ToCustomResourceSubresourceScaleOutput() CustomResourceSubresourceScaleOutput {
	return o
}

func (o CustomResourceSubresourceScaleOutput) ToCustomResourceSubresourceScaleOutputWithContext(ctx context.Context) CustomResourceSubresourceScaleOutput {
	return o
}

// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
func (o CustomResourceSubresourceScaleOutput) LabelSelectorPath() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceSubresourceScale) *string { return v.LabelSelectorPath }).(pulumi.StringPtrOutput)
}

// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
func (o CustomResourceSubresourceScaleOutput) SpecReplicasPath() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceSubresourceScale) *string { return v.SpecReplicasPath }).(pulumi.StringPtrOutput)
}

// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
func (o CustomResourceSubresourceScaleOutput) StatusReplicasPath() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CustomResourceSubresourceScale) *string { return v.StatusReplicasPath }).(pulumi.StringPtrOutput)
}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
type CustomResourceSubresources struct {
	// scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
	Scale *apiextensionsv1.CustomResourceSubresourceScale `pulumi:"scale"`
	// status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
	Status interface{} `pulumi:"status"`
}

type CustomResourceSubresourcesInput interface {
	pulumi.Input

	ToCustomResourceSubresourcesOutput() CustomResourceSubresourcesOutput
	ToCustomResourceSubresourcesOutputWithContext(context.Context) CustomResourceSubresourcesOutput
}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
type CustomResourceSubresourcesArgs struct {
	// scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
	Scale apiextensionsv1.CustomResourceSubresourceScalePtrInput `pulumi:"scale"`
	// status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
	Status pulumi.Input `pulumi:"status"`
}

func (CustomResourceSubresourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceSubresources)(nil)).Elem()
}

func (i CustomResourceSubresourcesArgs) ToCustomResourceSubresourcesOutput() CustomResourceSubresourcesOutput {
	return i.ToCustomResourceSubresourcesOutputWithContext(context.Background())
}

func (i CustomResourceSubresourcesArgs) ToCustomResourceSubresourcesOutputWithContext(ctx context.Context) CustomResourceSubresourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceSubresourcesOutput)
}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
type CustomResourceSubresourcesOutput struct { *pulumi.OutputState }

func (CustomResourceSubresourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceSubresources)(nil)).Elem()
}

func (o CustomResourceSubresourcesOutput) ToCustomResourceSubresourcesOutput() CustomResourceSubresourcesOutput {
	return o
}

func (o CustomResourceSubresourcesOutput) ToCustomResourceSubresourcesOutputWithContext(ctx context.Context) CustomResourceSubresourcesOutput {
	return o
}

// scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
func (o CustomResourceSubresourcesOutput) Scale() apiextensionsv1.CustomResourceSubresourceScalePtrOutput {
	return o.ApplyT(func (v CustomResourceSubresources) *apiextensionsv1.CustomResourceSubresourceScale { return v.Scale }).(apiextensionsv1.CustomResourceSubresourceScalePtrOutput)
}

// status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
func (o CustomResourceSubresourcesOutput) Status() pulumi.AnyOutput {
	return o.ApplyT(func (v CustomResourceSubresources) interface{} { return v.Status }).(pulumi.AnyOutput)
}

// CustomResourceValidation is a list of validation methods for CustomResources.
type CustomResourceValidation struct {
	// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema *apiextensionsv1.JSONSchemaProps `pulumi:"openAPIV3Schema"`
}

type CustomResourceValidationInput interface {
	pulumi.Input

	ToCustomResourceValidationOutput() CustomResourceValidationOutput
	ToCustomResourceValidationOutputWithContext(context.Context) CustomResourceValidationOutput
}

// CustomResourceValidation is a list of validation methods for CustomResources.
type CustomResourceValidationArgs struct {
	// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema apiextensionsv1.JSONSchemaPropsPtrInput `pulumi:"openAPIV3Schema"`
}

func (CustomResourceValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceValidation)(nil)).Elem()
}

func (i CustomResourceValidationArgs) ToCustomResourceValidationOutput() CustomResourceValidationOutput {
	return i.ToCustomResourceValidationOutputWithContext(context.Background())
}

func (i CustomResourceValidationArgs) ToCustomResourceValidationOutputWithContext(ctx context.Context) CustomResourceValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomResourceValidationOutput)
}

// CustomResourceValidation is a list of validation methods for CustomResources.
type CustomResourceValidationOutput struct { *pulumi.OutputState }

func (CustomResourceValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomResourceValidation)(nil)).Elem()
}

func (o CustomResourceValidationOutput) ToCustomResourceValidationOutput() CustomResourceValidationOutput {
	return o
}

func (o CustomResourceValidationOutput) ToCustomResourceValidationOutputWithContext(ctx context.Context) CustomResourceValidationOutput {
	return o
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
func (o CustomResourceValidationOutput) OpenAPIV3Schema() apiextensionsv1.JSONSchemaPropsPtrOutput {
	return o.ApplyT(func (v CustomResourceValidation) *apiextensionsv1.JSONSchemaProps { return v.OpenAPIV3Schema }).(apiextensionsv1.JSONSchemaPropsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CustomResourceColumnDefinitionOutput{})
	pulumi.RegisterOutputType(CustomResourceConversionOutput{})
	pulumi.RegisterOutputType(CustomResourceDefinitionConditionOutput{})
	pulumi.RegisterOutputType(CustomResourceDefinitionNamesOutput{})
	pulumi.RegisterOutputType(CustomResourceDefinitionSpecOutput{})
	pulumi.RegisterOutputType(CustomResourceDefinitionStatusOutput{})
	pulumi.RegisterOutputType(CustomResourceDefinitionVersionOutput{})
	pulumi.RegisterOutputType(CustomResourceSubresourceScaleOutput{})
	pulumi.RegisterOutputType(CustomResourceSubresourcesOutput{})
	pulumi.RegisterOutputType(CustomResourceValidationOutput{})
}
