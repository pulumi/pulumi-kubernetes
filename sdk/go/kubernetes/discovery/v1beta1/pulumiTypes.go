// *** WARNING: this file was generated by foo. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Endpoint represents a single logical "backend" implementing a service.
type Endpoint struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.
	Addresses []string `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions *EndpointConditions `pulumi:"conditions"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation.
	Hostname *string `pulumi:"hostname"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef *corev1.ObjectReference `pulumi:"targetRef"`
	// topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node
	//   where the endpoint is located. This should match the corresponding
	//   node label.
	// * topology.kubernetes.io/zone: the value indicates the zone where the
	//   endpoint is located. This should match the corresponding node label.
	// * topology.kubernetes.io/region: the value indicates the region where the
	//   endpoint is located. This should match the corresponding node label.
	Topology map[string]string `pulumi:"topology"`
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointArgs struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions EndpointConditionsPtrInput `pulumi:"conditions"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef corev1.ObjectReferencePtrInput `pulumi:"targetRef"`
	// topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node
	//   where the endpoint is located. This should match the corresponding
	//   node label.
	// * topology.kubernetes.io/zone: the value indicates the zone where the
	//   endpoint is located. This should match the corresponding node label.
	// * topology.kubernetes.io/region: the value indicates the region where the
	//   endpoint is located. This should match the corresponding node label.
	Topology pulumi.StringMapInput `pulumi:"topology"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointOutput struct { *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.
func (o EndpointOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v Endpoint) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// conditions contains information about the current status of the endpoint.
func (o EndpointOutput) Conditions() EndpointConditionsPtrOutput {
	return o.ApplyT(func (v Endpoint) *EndpointConditions { return v.Conditions }).(EndpointConditionsPtrOutput)
}

// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation.
func (o EndpointOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Endpoint) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// targetRef is a reference to a Kubernetes object that represents this endpoint.
func (o EndpointOutput) TargetRef() corev1.ObjectReferencePtrOutput {
	return o.ApplyT(func (v Endpoint) *corev1.ObjectReference { return v.TargetRef }).(corev1.ObjectReferencePtrOutput)
}

// topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node
//   where the endpoint is located. This should match the corresponding
//   node label.
// * topology.kubernetes.io/zone: the value indicates the zone where the
//   endpoint is located. This should match the corresponding node label.
// * topology.kubernetes.io/region: the value indicates the region where the
//   endpoint is located. This should match the corresponding node label.
func (o EndpointOutput) Topology() pulumi.StringMapOutput {
	return o.ApplyT(func (v Endpoint) map[string]string { return v.Topology }).(pulumi.StringMapOutput)
}

type EndpointArrayOutput struct { *pulumi.OutputState}

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Endpoint {
		return vs[0].([]Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditions struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.
	Ready *bool `pulumi:"ready"`
}

type EndpointConditionsInput interface {
	pulumi.Input

	ToEndpointConditionsOutput() EndpointConditionsOutput
	ToEndpointConditionsOutputWithContext(context.Context) EndpointConditionsOutput
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsArgs struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
}

func (EndpointConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditions)(nil)).Elem()
}

func (i EndpointConditionsArgs) ToEndpointConditionsOutput() EndpointConditionsOutput {
	return i.ToEndpointConditionsOutputWithContext(context.Background())
}

func (i EndpointConditionsArgs) ToEndpointConditionsOutputWithContext(ctx context.Context) EndpointConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsOutput)
}

func (i EndpointConditionsArgs) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return i.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (i EndpointConditionsArgs) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsOutput).ToEndpointConditionsPtrOutputWithContext(ctx)
}

type EndpointConditionsPtrInput interface {
	pulumi.Input

	ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput
	ToEndpointConditionsPtrOutputWithContext(context.Context) EndpointConditionsPtrOutput
}

type endpointConditionsPtrType EndpointConditionsArgs

func EndpointConditionsPtr(v *EndpointConditionsArgs) EndpointConditionsPtrInput {	return (*endpointConditionsPtrType)(v)
}

func (*endpointConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditions)(nil)).Elem()
}

func (i *endpointConditionsPtrType) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return i.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (i *endpointConditionsPtrType) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsPtrOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsOutput struct { *pulumi.OutputState }

func (EndpointConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditions)(nil)).Elem()
}

func (o EndpointConditionsOutput) ToEndpointConditionsOutput() EndpointConditionsOutput {
	return o
}

func (o EndpointConditionsOutput) ToEndpointConditionsOutputWithContext(ctx context.Context) EndpointConditionsOutput {
	return o
}

func (o EndpointConditionsOutput) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return o.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (o EndpointConditionsOutput) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return o.ApplyT(func(v EndpointConditions) *EndpointConditions {
		return &v
	}).(EndpointConditionsPtrOutput)
}
// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.
func (o EndpointConditionsOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v EndpointConditions) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

type EndpointConditionsPtrOutput struct { *pulumi.OutputState}

func (EndpointConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditions)(nil)).Elem()
}

func (o EndpointConditionsPtrOutput) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return o
}

func (o EndpointConditionsPtrOutput) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return o
}

func (o EndpointConditionsPtrOutput) Elem() EndpointConditionsOutput {
	return o.ApplyT(func (v *EndpointConditions) EndpointConditions { return *v }).(EndpointConditionsOutput)
}

// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.
func (o EndpointConditionsPtrOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v EndpointConditions) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name *string `pulumi:"name"`
	// The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `pulumi:"protocol"`
}

type EndpointPortInput interface {
	pulumi.Input

	ToEndpointPortOutput() EndpointPortOutput
	ToEndpointPortOutputWithContext(context.Context) EndpointPortOutput
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (EndpointPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (i EndpointPortArgs) ToEndpointPortOutput() EndpointPortOutput {
	return i.ToEndpointPortOutputWithContext(context.Background())
}

func (i EndpointPortArgs) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortOutput)
}

type EndpointPortArrayInput interface {
	pulumi.Input

	ToEndpointPortArrayOutput() EndpointPortArrayOutput
	ToEndpointPortArrayOutputWithContext(context.Context) EndpointPortArrayOutput
}

type EndpointPortArray []EndpointPortInput

func (EndpointPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (i EndpointPortArray) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return i.ToEndpointPortArrayOutputWithContext(context.Background())
}

func (i EndpointPortArray) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortArrayOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortOutput struct { *pulumi.OutputState }

func (EndpointPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (o EndpointPortOutput) ToEndpointPortOutput() EndpointPortOutput {
	return o
}

func (o EndpointPortOutput) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.
func (o EndpointPortOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointPort) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
func (o EndpointPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
func (o EndpointPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func (v EndpointPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (o EndpointPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type EndpointPortArrayOutput struct { *pulumi.OutputState}

func (EndpointPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) Index(i pulumi.IntInput) EndpointPortOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) EndpointPort {
		return vs[0].([]EndpointPort)[vs[1].(int)]
	}).(EndpointPortOutput)
}

func init() {
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointConditionsOutput{})
	pulumi.RegisterOutputType(EndpointConditionsPtrOutput{})
	pulumi.RegisterOutputType(EndpointPortOutput{})
	pulumi.RegisterOutputType(EndpointPortArrayOutput{})
}
