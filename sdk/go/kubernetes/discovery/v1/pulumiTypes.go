// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Endpoint represents a single logical "backend" implementing a service.
type Endpoint struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses []string `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions *EndpointConditions `pulumi:"conditions"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology map[string]string `pulumi:"deprecatedTopology"`
	// hints contains information associated with how an endpoint should be consumed.
	Hints *EndpointHints `pulumi:"hints"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname *string `pulumi:"hostname"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName *string `pulumi:"nodeName"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef *corev1.ObjectReference `pulumi:"targetRef"`
	// zone is the name of the Zone this endpoint exists in.
	Zone *string `pulumi:"zone"`
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//	EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointArgs struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions EndpointConditionsPtrInput `pulumi:"conditions"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology pulumi.StringMapInput `pulumi:"deprecatedTopology"`
	// hints contains information associated with how an endpoint should be consumed.
	Hints EndpointHintsPtrInput `pulumi:"hints"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef corev1.ObjectReferencePtrInput `pulumi:"targetRef"`
	// zone is the name of the Zone this endpoint exists in.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
func (o EndpointOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Endpoint) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// conditions contains information about the current status of the endpoint.
func (o EndpointOutput) Conditions() EndpointConditionsPtrOutput {
	return o.ApplyT(func(v Endpoint) *EndpointConditions { return v.Conditions }).(EndpointConditionsPtrOutput)
}

// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
func (o EndpointOutput) DeprecatedTopology() pulumi.StringMapOutput {
	return o.ApplyT(func(v Endpoint) map[string]string { return v.DeprecatedTopology }).(pulumi.StringMapOutput)
}

// hints contains information associated with how an endpoint should be consumed.
func (o EndpointOutput) Hints() EndpointHintsPtrOutput {
	return o.ApplyT(func(v Endpoint) *EndpointHints { return v.Hints }).(EndpointHintsPtrOutput)
}

// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
func (o EndpointOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
func (o EndpointOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// targetRef is a reference to a Kubernetes object that represents this endpoint.
func (o EndpointOutput) TargetRef() corev1.ObjectReferencePtrOutput {
	return o.ApplyT(func(v Endpoint) *corev1.ObjectReference { return v.TargetRef }).(corev1.ObjectReferencePtrOutput)
}

// zone is the name of the Zone this endpoint exists in.
func (o EndpointOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Endpoint {
		return vs[0].([]Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditions struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready *bool `pulumi:"ready"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving *bool `pulumi:"serving"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating *bool `pulumi:"terminating"`
}

// EndpointConditionsInput is an input type that accepts EndpointConditionsArgs and EndpointConditionsOutput values.
// You can construct a concrete instance of `EndpointConditionsInput` via:
//
//	EndpointConditionsArgs{...}
type EndpointConditionsInput interface {
	pulumi.Input

	ToEndpointConditionsOutput() EndpointConditionsOutput
	ToEndpointConditionsOutputWithContext(context.Context) EndpointConditionsOutput
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsArgs struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving pulumi.BoolPtrInput `pulumi:"serving"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating pulumi.BoolPtrInput `pulumi:"terminating"`
}

func (EndpointConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditions)(nil)).Elem()
}

func (i EndpointConditionsArgs) ToEndpointConditionsOutput() EndpointConditionsOutput {
	return i.ToEndpointConditionsOutputWithContext(context.Background())
}

func (i EndpointConditionsArgs) ToEndpointConditionsOutputWithContext(ctx context.Context) EndpointConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsOutput)
}

func (i EndpointConditionsArgs) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return i.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (i EndpointConditionsArgs) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsOutput).ToEndpointConditionsPtrOutputWithContext(ctx)
}

// EndpointConditionsPtrInput is an input type that accepts EndpointConditionsArgs, EndpointConditionsPtr and EndpointConditionsPtrOutput values.
// You can construct a concrete instance of `EndpointConditionsPtrInput` via:
//
//	        EndpointConditionsArgs{...}
//
//	or:
//
//	        nil
type EndpointConditionsPtrInput interface {
	pulumi.Input

	ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput
	ToEndpointConditionsPtrOutputWithContext(context.Context) EndpointConditionsPtrOutput
}

type endpointConditionsPtrType EndpointConditionsArgs

func EndpointConditionsPtr(v *EndpointConditionsArgs) EndpointConditionsPtrInput {
	return (*endpointConditionsPtrType)(v)
}

func (*endpointConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditions)(nil)).Elem()
}

func (i *endpointConditionsPtrType) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return i.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (i *endpointConditionsPtrType) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsPtrOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsOutput struct{ *pulumi.OutputState }

func (EndpointConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditions)(nil)).Elem()
}

func (o EndpointConditionsOutput) ToEndpointConditionsOutput() EndpointConditionsOutput {
	return o
}

func (o EndpointConditionsOutput) ToEndpointConditionsOutputWithContext(ctx context.Context) EndpointConditionsOutput {
	return o
}

func (o EndpointConditionsOutput) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return o.ToEndpointConditionsPtrOutputWithContext(context.Background())
}

func (o EndpointConditionsOutput) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointConditions) *EndpointConditions {
		return &v
	}).(EndpointConditionsPtrOutput)
}

// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
func (o EndpointConditionsOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditions) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
func (o EndpointConditionsOutput) Serving() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditions) *bool { return v.Serving }).(pulumi.BoolPtrOutput)
}

// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
func (o EndpointConditionsOutput) Terminating() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditions) *bool { return v.Terminating }).(pulumi.BoolPtrOutput)
}

type EndpointConditionsPtrOutput struct{ *pulumi.OutputState }

func (EndpointConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditions)(nil)).Elem()
}

func (o EndpointConditionsPtrOutput) ToEndpointConditionsPtrOutput() EndpointConditionsPtrOutput {
	return o
}

func (o EndpointConditionsPtrOutput) ToEndpointConditionsPtrOutputWithContext(ctx context.Context) EndpointConditionsPtrOutput {
	return o
}

func (o EndpointConditionsPtrOutput) Elem() EndpointConditionsOutput {
	return o.ApplyT(func(v *EndpointConditions) EndpointConditions {
		if v != nil {
			return *v
		}
		var ret EndpointConditions
		return ret
	}).(EndpointConditionsOutput)
}

// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
func (o EndpointConditionsPtrOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditions) *bool {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.BoolPtrOutput)
}

// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
func (o EndpointConditionsPtrOutput) Serving() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditions) *bool {
		if v == nil {
			return nil
		}
		return v.Serving
	}).(pulumi.BoolPtrOutput)
}

// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
func (o EndpointConditionsPtrOutput) Terminating() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditions) *bool {
		if v == nil {
			return nil
		}
		return v.Terminating
	}).(pulumi.BoolPtrOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsPatch struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready *bool `pulumi:"ready"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving *bool `pulumi:"serving"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating *bool `pulumi:"terminating"`
}

// EndpointConditionsPatchInput is an input type that accepts EndpointConditionsPatchArgs and EndpointConditionsPatchOutput values.
// You can construct a concrete instance of `EndpointConditionsPatchInput` via:
//
//	EndpointConditionsPatchArgs{...}
type EndpointConditionsPatchInput interface {
	pulumi.Input

	ToEndpointConditionsPatchOutput() EndpointConditionsPatchOutput
	ToEndpointConditionsPatchOutputWithContext(context.Context) EndpointConditionsPatchOutput
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsPatchArgs struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving pulumi.BoolPtrInput `pulumi:"serving"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating pulumi.BoolPtrInput `pulumi:"terminating"`
}

func (EndpointConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditionsPatch)(nil)).Elem()
}

func (i EndpointConditionsPatchArgs) ToEndpointConditionsPatchOutput() EndpointConditionsPatchOutput {
	return i.ToEndpointConditionsPatchOutputWithContext(context.Background())
}

func (i EndpointConditionsPatchArgs) ToEndpointConditionsPatchOutputWithContext(ctx context.Context) EndpointConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsPatchOutput)
}

func (i EndpointConditionsPatchArgs) ToEndpointConditionsPatchPtrOutput() EndpointConditionsPatchPtrOutput {
	return i.ToEndpointConditionsPatchPtrOutputWithContext(context.Background())
}

func (i EndpointConditionsPatchArgs) ToEndpointConditionsPatchPtrOutputWithContext(ctx context.Context) EndpointConditionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsPatchOutput).ToEndpointConditionsPatchPtrOutputWithContext(ctx)
}

// EndpointConditionsPatchPtrInput is an input type that accepts EndpointConditionsPatchArgs, EndpointConditionsPatchPtr and EndpointConditionsPatchPtrOutput values.
// You can construct a concrete instance of `EndpointConditionsPatchPtrInput` via:
//
//	        EndpointConditionsPatchArgs{...}
//
//	or:
//
//	        nil
type EndpointConditionsPatchPtrInput interface {
	pulumi.Input

	ToEndpointConditionsPatchPtrOutput() EndpointConditionsPatchPtrOutput
	ToEndpointConditionsPatchPtrOutputWithContext(context.Context) EndpointConditionsPatchPtrOutput
}

type endpointConditionsPatchPtrType EndpointConditionsPatchArgs

func EndpointConditionsPatchPtr(v *EndpointConditionsPatchArgs) EndpointConditionsPatchPtrInput {
	return (*endpointConditionsPatchPtrType)(v)
}

func (*endpointConditionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditionsPatch)(nil)).Elem()
}

func (i *endpointConditionsPatchPtrType) ToEndpointConditionsPatchPtrOutput() EndpointConditionsPatchPtrOutput {
	return i.ToEndpointConditionsPatchPtrOutputWithContext(context.Background())
}

func (i *endpointConditionsPatchPtrType) ToEndpointConditionsPatchPtrOutputWithContext(ctx context.Context) EndpointConditionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConditionsPatchPtrOutput)
}

// EndpointConditions represents the current condition of an endpoint.
type EndpointConditionsPatchOutput struct{ *pulumi.OutputState }

func (EndpointConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConditionsPatch)(nil)).Elem()
}

func (o EndpointConditionsPatchOutput) ToEndpointConditionsPatchOutput() EndpointConditionsPatchOutput {
	return o
}

func (o EndpointConditionsPatchOutput) ToEndpointConditionsPatchOutputWithContext(ctx context.Context) EndpointConditionsPatchOutput {
	return o
}

func (o EndpointConditionsPatchOutput) ToEndpointConditionsPatchPtrOutput() EndpointConditionsPatchPtrOutput {
	return o.ToEndpointConditionsPatchPtrOutputWithContext(context.Background())
}

func (o EndpointConditionsPatchOutput) ToEndpointConditionsPatchPtrOutputWithContext(ctx context.Context) EndpointConditionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointConditionsPatch) *EndpointConditionsPatch {
		return &v
	}).(EndpointConditionsPatchPtrOutput)
}

// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
func (o EndpointConditionsPatchOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditionsPatch) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
func (o EndpointConditionsPatchOutput) Serving() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditionsPatch) *bool { return v.Serving }).(pulumi.BoolPtrOutput)
}

// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
func (o EndpointConditionsPatchOutput) Terminating() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointConditionsPatch) *bool { return v.Terminating }).(pulumi.BoolPtrOutput)
}

type EndpointConditionsPatchPtrOutput struct{ *pulumi.OutputState }

func (EndpointConditionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointConditionsPatch)(nil)).Elem()
}

func (o EndpointConditionsPatchPtrOutput) ToEndpointConditionsPatchPtrOutput() EndpointConditionsPatchPtrOutput {
	return o
}

func (o EndpointConditionsPatchPtrOutput) ToEndpointConditionsPatchPtrOutputWithContext(ctx context.Context) EndpointConditionsPatchPtrOutput {
	return o
}

func (o EndpointConditionsPatchPtrOutput) Elem() EndpointConditionsPatchOutput {
	return o.ApplyT(func(v *EndpointConditionsPatch) EndpointConditionsPatch {
		if v != nil {
			return *v
		}
		var ret EndpointConditionsPatch
		return ret
	}).(EndpointConditionsPatchOutput)
}

// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
func (o EndpointConditionsPatchPtrOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.BoolPtrOutput)
}

// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
func (o EndpointConditionsPatchPtrOutput) Serving() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Serving
	}).(pulumi.BoolPtrOutput)
}

// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
func (o EndpointConditionsPatchPtrOutput) Terminating() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointConditionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Terminating
	}).(pulumi.BoolPtrOutput)
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHints struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones []ForZone `pulumi:"forZones"`
}

// EndpointHintsInput is an input type that accepts EndpointHintsArgs and EndpointHintsOutput values.
// You can construct a concrete instance of `EndpointHintsInput` via:
//
//	EndpointHintsArgs{...}
type EndpointHintsInput interface {
	pulumi.Input

	ToEndpointHintsOutput() EndpointHintsOutput
	ToEndpointHintsOutputWithContext(context.Context) EndpointHintsOutput
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHintsArgs struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones ForZoneArrayInput `pulumi:"forZones"`
}

func (EndpointHintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointHints)(nil)).Elem()
}

func (i EndpointHintsArgs) ToEndpointHintsOutput() EndpointHintsOutput {
	return i.ToEndpointHintsOutputWithContext(context.Background())
}

func (i EndpointHintsArgs) ToEndpointHintsOutputWithContext(ctx context.Context) EndpointHintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsOutput)
}

func (i EndpointHintsArgs) ToEndpointHintsPtrOutput() EndpointHintsPtrOutput {
	return i.ToEndpointHintsPtrOutputWithContext(context.Background())
}

func (i EndpointHintsArgs) ToEndpointHintsPtrOutputWithContext(ctx context.Context) EndpointHintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsOutput).ToEndpointHintsPtrOutputWithContext(ctx)
}

// EndpointHintsPtrInput is an input type that accepts EndpointHintsArgs, EndpointHintsPtr and EndpointHintsPtrOutput values.
// You can construct a concrete instance of `EndpointHintsPtrInput` via:
//
//	        EndpointHintsArgs{...}
//
//	or:
//
//	        nil
type EndpointHintsPtrInput interface {
	pulumi.Input

	ToEndpointHintsPtrOutput() EndpointHintsPtrOutput
	ToEndpointHintsPtrOutputWithContext(context.Context) EndpointHintsPtrOutput
}

type endpointHintsPtrType EndpointHintsArgs

func EndpointHintsPtr(v *EndpointHintsArgs) EndpointHintsPtrInput {
	return (*endpointHintsPtrType)(v)
}

func (*endpointHintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointHints)(nil)).Elem()
}

func (i *endpointHintsPtrType) ToEndpointHintsPtrOutput() EndpointHintsPtrOutput {
	return i.ToEndpointHintsPtrOutputWithContext(context.Background())
}

func (i *endpointHintsPtrType) ToEndpointHintsPtrOutputWithContext(ctx context.Context) EndpointHintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsPtrOutput)
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHintsOutput struct{ *pulumi.OutputState }

func (EndpointHintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointHints)(nil)).Elem()
}

func (o EndpointHintsOutput) ToEndpointHintsOutput() EndpointHintsOutput {
	return o
}

func (o EndpointHintsOutput) ToEndpointHintsOutputWithContext(ctx context.Context) EndpointHintsOutput {
	return o
}

func (o EndpointHintsOutput) ToEndpointHintsPtrOutput() EndpointHintsPtrOutput {
	return o.ToEndpointHintsPtrOutputWithContext(context.Background())
}

func (o EndpointHintsOutput) ToEndpointHintsPtrOutputWithContext(ctx context.Context) EndpointHintsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointHints) *EndpointHints {
		return &v
	}).(EndpointHintsPtrOutput)
}

// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
func (o EndpointHintsOutput) ForZones() ForZoneArrayOutput {
	return o.ApplyT(func(v EndpointHints) []ForZone { return v.ForZones }).(ForZoneArrayOutput)
}

type EndpointHintsPtrOutput struct{ *pulumi.OutputState }

func (EndpointHintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointHints)(nil)).Elem()
}

func (o EndpointHintsPtrOutput) ToEndpointHintsPtrOutput() EndpointHintsPtrOutput {
	return o
}

func (o EndpointHintsPtrOutput) ToEndpointHintsPtrOutputWithContext(ctx context.Context) EndpointHintsPtrOutput {
	return o
}

func (o EndpointHintsPtrOutput) Elem() EndpointHintsOutput {
	return o.ApplyT(func(v *EndpointHints) EndpointHints {
		if v != nil {
			return *v
		}
		var ret EndpointHints
		return ret
	}).(EndpointHintsOutput)
}

// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
func (o EndpointHintsPtrOutput) ForZones() ForZoneArrayOutput {
	return o.ApplyT(func(v *EndpointHints) []ForZone {
		if v == nil {
			return nil
		}
		return v.ForZones
	}).(ForZoneArrayOutput)
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHintsPatch struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones []ForZonePatch `pulumi:"forZones"`
}

// EndpointHintsPatchInput is an input type that accepts EndpointHintsPatchArgs and EndpointHintsPatchOutput values.
// You can construct a concrete instance of `EndpointHintsPatchInput` via:
//
//	EndpointHintsPatchArgs{...}
type EndpointHintsPatchInput interface {
	pulumi.Input

	ToEndpointHintsPatchOutput() EndpointHintsPatchOutput
	ToEndpointHintsPatchOutputWithContext(context.Context) EndpointHintsPatchOutput
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHintsPatchArgs struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones ForZonePatchArrayInput `pulumi:"forZones"`
}

func (EndpointHintsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointHintsPatch)(nil)).Elem()
}

func (i EndpointHintsPatchArgs) ToEndpointHintsPatchOutput() EndpointHintsPatchOutput {
	return i.ToEndpointHintsPatchOutputWithContext(context.Background())
}

func (i EndpointHintsPatchArgs) ToEndpointHintsPatchOutputWithContext(ctx context.Context) EndpointHintsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsPatchOutput)
}

func (i EndpointHintsPatchArgs) ToEndpointHintsPatchPtrOutput() EndpointHintsPatchPtrOutput {
	return i.ToEndpointHintsPatchPtrOutputWithContext(context.Background())
}

func (i EndpointHintsPatchArgs) ToEndpointHintsPatchPtrOutputWithContext(ctx context.Context) EndpointHintsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsPatchOutput).ToEndpointHintsPatchPtrOutputWithContext(ctx)
}

// EndpointHintsPatchPtrInput is an input type that accepts EndpointHintsPatchArgs, EndpointHintsPatchPtr and EndpointHintsPatchPtrOutput values.
// You can construct a concrete instance of `EndpointHintsPatchPtrInput` via:
//
//	        EndpointHintsPatchArgs{...}
//
//	or:
//
//	        nil
type EndpointHintsPatchPtrInput interface {
	pulumi.Input

	ToEndpointHintsPatchPtrOutput() EndpointHintsPatchPtrOutput
	ToEndpointHintsPatchPtrOutputWithContext(context.Context) EndpointHintsPatchPtrOutput
}

type endpointHintsPatchPtrType EndpointHintsPatchArgs

func EndpointHintsPatchPtr(v *EndpointHintsPatchArgs) EndpointHintsPatchPtrInput {
	return (*endpointHintsPatchPtrType)(v)
}

func (*endpointHintsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointHintsPatch)(nil)).Elem()
}

func (i *endpointHintsPatchPtrType) ToEndpointHintsPatchPtrOutput() EndpointHintsPatchPtrOutput {
	return i.ToEndpointHintsPatchPtrOutputWithContext(context.Background())
}

func (i *endpointHintsPatchPtrType) ToEndpointHintsPatchPtrOutputWithContext(ctx context.Context) EndpointHintsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointHintsPatchPtrOutput)
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type EndpointHintsPatchOutput struct{ *pulumi.OutputState }

func (EndpointHintsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointHintsPatch)(nil)).Elem()
}

func (o EndpointHintsPatchOutput) ToEndpointHintsPatchOutput() EndpointHintsPatchOutput {
	return o
}

func (o EndpointHintsPatchOutput) ToEndpointHintsPatchOutputWithContext(ctx context.Context) EndpointHintsPatchOutput {
	return o
}

func (o EndpointHintsPatchOutput) ToEndpointHintsPatchPtrOutput() EndpointHintsPatchPtrOutput {
	return o.ToEndpointHintsPatchPtrOutputWithContext(context.Background())
}

func (o EndpointHintsPatchOutput) ToEndpointHintsPatchPtrOutputWithContext(ctx context.Context) EndpointHintsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointHintsPatch) *EndpointHintsPatch {
		return &v
	}).(EndpointHintsPatchPtrOutput)
}

// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
func (o EndpointHintsPatchOutput) ForZones() ForZonePatchArrayOutput {
	return o.ApplyT(func(v EndpointHintsPatch) []ForZonePatch { return v.ForZones }).(ForZonePatchArrayOutput)
}

type EndpointHintsPatchPtrOutput struct{ *pulumi.OutputState }

func (EndpointHintsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointHintsPatch)(nil)).Elem()
}

func (o EndpointHintsPatchPtrOutput) ToEndpointHintsPatchPtrOutput() EndpointHintsPatchPtrOutput {
	return o
}

func (o EndpointHintsPatchPtrOutput) ToEndpointHintsPatchPtrOutputWithContext(ctx context.Context) EndpointHintsPatchPtrOutput {
	return o
}

func (o EndpointHintsPatchPtrOutput) Elem() EndpointHintsPatchOutput {
	return o.ApplyT(func(v *EndpointHintsPatch) EndpointHintsPatch {
		if v != nil {
			return *v
		}
		var ret EndpointHintsPatch
		return ret
	}).(EndpointHintsPatchOutput)
}

// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
func (o EndpointHintsPatchPtrOutput) ForZones() ForZonePatchArrayOutput {
	return o.ApplyT(func(v *EndpointHintsPatch) []ForZonePatch {
		if v == nil {
			return nil
		}
		return v.ForZones
	}).(ForZonePatchArrayOutput)
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointPatch struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses []string `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions *EndpointConditionsPatch `pulumi:"conditions"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology map[string]string `pulumi:"deprecatedTopology"`
	// hints contains information associated with how an endpoint should be consumed.
	Hints *EndpointHintsPatch `pulumi:"hints"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname *string `pulumi:"hostname"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName *string `pulumi:"nodeName"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef *corev1.ObjectReferencePatch `pulumi:"targetRef"`
	// zone is the name of the Zone this endpoint exists in.
	Zone *string `pulumi:"zone"`
}

// EndpointPatchInput is an input type that accepts EndpointPatchArgs and EndpointPatchOutput values.
// You can construct a concrete instance of `EndpointPatchInput` via:
//
//	EndpointPatchArgs{...}
type EndpointPatchInput interface {
	pulumi.Input

	ToEndpointPatchOutput() EndpointPatchOutput
	ToEndpointPatchOutputWithContext(context.Context) EndpointPatchOutput
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointPatchArgs struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// conditions contains information about the current status of the endpoint.
	Conditions EndpointConditionsPatchPtrInput `pulumi:"conditions"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology pulumi.StringMapInput `pulumi:"deprecatedTopology"`
	// hints contains information associated with how an endpoint should be consumed.
	Hints EndpointHintsPatchPtrInput `pulumi:"hints"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// targetRef is a reference to a Kubernetes object that represents this endpoint.
	TargetRef corev1.ObjectReferencePatchPtrInput `pulumi:"targetRef"`
	// zone is the name of the Zone this endpoint exists in.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (EndpointPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPatch)(nil)).Elem()
}

func (i EndpointPatchArgs) ToEndpointPatchOutput() EndpointPatchOutput {
	return i.ToEndpointPatchOutputWithContext(context.Background())
}

func (i EndpointPatchArgs) ToEndpointPatchOutputWithContext(ctx context.Context) EndpointPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPatchOutput)
}

// EndpointPatchArrayInput is an input type that accepts EndpointPatchArray and EndpointPatchArrayOutput values.
// You can construct a concrete instance of `EndpointPatchArrayInput` via:
//
//	EndpointPatchArray{ EndpointPatchArgs{...} }
type EndpointPatchArrayInput interface {
	pulumi.Input

	ToEndpointPatchArrayOutput() EndpointPatchArrayOutput
	ToEndpointPatchArrayOutputWithContext(context.Context) EndpointPatchArrayOutput
}

type EndpointPatchArray []EndpointPatchInput

func (EndpointPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPatch)(nil)).Elem()
}

func (i EndpointPatchArray) ToEndpointPatchArrayOutput() EndpointPatchArrayOutput {
	return i.ToEndpointPatchArrayOutputWithContext(context.Background())
}

func (i EndpointPatchArray) ToEndpointPatchArrayOutputWithContext(ctx context.Context) EndpointPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPatchArrayOutput)
}

// Endpoint represents a single logical "backend" implementing a service.
type EndpointPatchOutput struct{ *pulumi.OutputState }

func (EndpointPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPatch)(nil)).Elem()
}

func (o EndpointPatchOutput) ToEndpointPatchOutput() EndpointPatchOutput {
	return o
}

func (o EndpointPatchOutput) ToEndpointPatchOutputWithContext(ctx context.Context) EndpointPatchOutput {
	return o
}

// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
func (o EndpointPatchOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EndpointPatch) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// conditions contains information about the current status of the endpoint.
func (o EndpointPatchOutput) Conditions() EndpointConditionsPatchPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *EndpointConditionsPatch { return v.Conditions }).(EndpointConditionsPatchPtrOutput)
}

// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
func (o EndpointPatchOutput) DeprecatedTopology() pulumi.StringMapOutput {
	return o.ApplyT(func(v EndpointPatch) map[string]string { return v.DeprecatedTopology }).(pulumi.StringMapOutput)
}

// hints contains information associated with how an endpoint should be consumed.
func (o EndpointPatchOutput) Hints() EndpointHintsPatchPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *EndpointHintsPatch { return v.Hints }).(EndpointHintsPatchPtrOutput)
}

// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
func (o EndpointPatchOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
func (o EndpointPatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// targetRef is a reference to a Kubernetes object that represents this endpoint.
func (o EndpointPatchOutput) TargetRef() corev1.ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *corev1.ObjectReferencePatch { return v.TargetRef }).(corev1.ObjectReferencePatchPtrOutput)
}

// zone is the name of the Zone this endpoint exists in.
func (o EndpointPatchOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPatch) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type EndpointPatchArrayOutput struct{ *pulumi.OutputState }

func (EndpointPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPatch)(nil)).Elem()
}

func (o EndpointPatchArrayOutput) ToEndpointPatchArrayOutput() EndpointPatchArrayOutput {
	return o
}

func (o EndpointPatchArrayOutput) ToEndpointPatchArrayOutputWithContext(ctx context.Context) EndpointPatchArrayOutput {
	return o
}

func (o EndpointPatchArrayOutput) Index(i pulumi.IntInput) EndpointPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPatch {
		return vs[0].([]EndpointPatch)[vs[1].(int)]
	}).(EndpointPatchOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPort struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name *string `pulumi:"name"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port *int `pulumi:"port"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `pulumi:"protocol"`
}

// EndpointPortInput is an input type that accepts EndpointPortArgs and EndpointPortOutput values.
// You can construct a concrete instance of `EndpointPortInput` via:
//
//	EndpointPortArgs{...}
type EndpointPortInput interface {
	pulumi.Input

	ToEndpointPortOutput() EndpointPortOutput
	ToEndpointPortOutputWithContext(context.Context) EndpointPortOutput
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortArgs struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (EndpointPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (i EndpointPortArgs) ToEndpointPortOutput() EndpointPortOutput {
	return i.ToEndpointPortOutputWithContext(context.Background())
}

func (i EndpointPortArgs) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortOutput)
}

// EndpointPortArrayInput is an input type that accepts EndpointPortArray and EndpointPortArrayOutput values.
// You can construct a concrete instance of `EndpointPortArrayInput` via:
//
//	EndpointPortArray{ EndpointPortArgs{...} }
type EndpointPortArrayInput interface {
	pulumi.Input

	ToEndpointPortArrayOutput() EndpointPortArrayOutput
	ToEndpointPortArrayOutputWithContext(context.Context) EndpointPortArrayOutput
}

type EndpointPortArray []EndpointPortInput

func (EndpointPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (i EndpointPortArray) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return i.ToEndpointPortArrayOutputWithContext(context.Background())
}

func (i EndpointPortArray) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortArrayOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortOutput struct{ *pulumi.OutputState }

func (EndpointPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (o EndpointPortOutput) ToEndpointPortOutput() EndpointPortOutput {
	return o
}

func (o EndpointPortOutput) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return o
}

// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
func (o EndpointPortOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
func (o EndpointPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
func (o EndpointPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (o EndpointPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type EndpointPortArrayOutput struct{ *pulumi.OutputState }

func (EndpointPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) Index(i pulumi.IntInput) EndpointPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPort {
		return vs[0].([]EndpointPort)[vs[1].(int)]
	}).(EndpointPortOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortPatch struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name *string `pulumi:"name"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port *int `pulumi:"port"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `pulumi:"protocol"`
}

// EndpointPortPatchInput is an input type that accepts EndpointPortPatchArgs and EndpointPortPatchOutput values.
// You can construct a concrete instance of `EndpointPortPatchInput` via:
//
//	EndpointPortPatchArgs{...}
type EndpointPortPatchInput interface {
	pulumi.Input

	ToEndpointPortPatchOutput() EndpointPortPatchOutput
	ToEndpointPortPatchOutputWithContext(context.Context) EndpointPortPatchOutput
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortPatchArgs struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (EndpointPortPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPortPatch)(nil)).Elem()
}

func (i EndpointPortPatchArgs) ToEndpointPortPatchOutput() EndpointPortPatchOutput {
	return i.ToEndpointPortPatchOutputWithContext(context.Background())
}

func (i EndpointPortPatchArgs) ToEndpointPortPatchOutputWithContext(ctx context.Context) EndpointPortPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortPatchOutput)
}

// EndpointPortPatchArrayInput is an input type that accepts EndpointPortPatchArray and EndpointPortPatchArrayOutput values.
// You can construct a concrete instance of `EndpointPortPatchArrayInput` via:
//
//	EndpointPortPatchArray{ EndpointPortPatchArgs{...} }
type EndpointPortPatchArrayInput interface {
	pulumi.Input

	ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput
	ToEndpointPortPatchArrayOutputWithContext(context.Context) EndpointPortPatchArrayOutput
}

type EndpointPortPatchArray []EndpointPortPatchInput

func (EndpointPortPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPortPatch)(nil)).Elem()
}

func (i EndpointPortPatchArray) ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput {
	return i.ToEndpointPortPatchArrayOutputWithContext(context.Background())
}

func (i EndpointPortPatchArray) ToEndpointPortPatchArrayOutputWithContext(ctx context.Context) EndpointPortPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortPatchArrayOutput)
}

// EndpointPort represents a Port used by an EndpointSlice
type EndpointPortPatchOutput struct{ *pulumi.OutputState }

func (EndpointPortPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPortPatch)(nil)).Elem()
}

func (o EndpointPortPatchOutput) ToEndpointPortPatchOutput() EndpointPortPatchOutput {
	return o
}

func (o EndpointPortPatchOutput) ToEndpointPortPatchOutputWithContext(ctx context.Context) EndpointPortPatchOutput {
	return o
}

// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
func (o EndpointPortPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
func (o EndpointPortPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
func (o EndpointPortPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (o EndpointPortPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type EndpointPortPatchArrayOutput struct{ *pulumi.OutputState }

func (EndpointPortPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPortPatch)(nil)).Elem()
}

func (o EndpointPortPatchArrayOutput) ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput {
	return o
}

func (o EndpointPortPatchArrayOutput) ToEndpointPortPatchArrayOutputWithContext(ctx context.Context) EndpointPortPatchArrayOutput {
	return o
}

func (o EndpointPortPatchArrayOutput) Index(i pulumi.IntInput) EndpointPortPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPortPatch {
		return vs[0].([]EndpointPortPatch)[vs[1].(int)]
	}).(EndpointPortPatchOutput)
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSliceType struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType string `pulumi:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints []Endpoint `pulumi:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports []EndpointPort `pulumi:"ports"`
}

// EndpointSliceTypeInput is an input type that accepts EndpointSliceTypeArgs and EndpointSliceTypeOutput values.
// You can construct a concrete instance of `EndpointSliceTypeInput` via:
//
//	EndpointSliceTypeArgs{...}
type EndpointSliceTypeInput interface {
	pulumi.Input

	ToEndpointSliceTypeOutput() EndpointSliceTypeOutput
	ToEndpointSliceTypeOutputWithContext(context.Context) EndpointSliceTypeOutput
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSliceTypeArgs struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType pulumi.StringInput `pulumi:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints EndpointArrayInput `pulumi:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports EndpointPortArrayInput `pulumi:"ports"`
}

func (EndpointSliceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSliceType)(nil)).Elem()
}

func (i EndpointSliceTypeArgs) ToEndpointSliceTypeOutput() EndpointSliceTypeOutput {
	return i.ToEndpointSliceTypeOutputWithContext(context.Background())
}

func (i EndpointSliceTypeArgs) ToEndpointSliceTypeOutputWithContext(ctx context.Context) EndpointSliceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSliceTypeOutput)
}

// EndpointSliceTypeArrayInput is an input type that accepts EndpointSliceTypeArray and EndpointSliceTypeArrayOutput values.
// You can construct a concrete instance of `EndpointSliceTypeArrayInput` via:
//
//	EndpointSliceTypeArray{ EndpointSliceTypeArgs{...} }
type EndpointSliceTypeArrayInput interface {
	pulumi.Input

	ToEndpointSliceTypeArrayOutput() EndpointSliceTypeArrayOutput
	ToEndpointSliceTypeArrayOutputWithContext(context.Context) EndpointSliceTypeArrayOutput
}

type EndpointSliceTypeArray []EndpointSliceTypeInput

func (EndpointSliceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSliceType)(nil)).Elem()
}

func (i EndpointSliceTypeArray) ToEndpointSliceTypeArrayOutput() EndpointSliceTypeArrayOutput {
	return i.ToEndpointSliceTypeArrayOutputWithContext(context.Background())
}

func (i EndpointSliceTypeArray) ToEndpointSliceTypeArrayOutputWithContext(ctx context.Context) EndpointSliceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSliceTypeArrayOutput)
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSliceTypeOutput struct{ *pulumi.OutputState }

func (EndpointSliceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSliceType)(nil)).Elem()
}

func (o EndpointSliceTypeOutput) ToEndpointSliceTypeOutput() EndpointSliceTypeOutput {
	return o
}

func (o EndpointSliceTypeOutput) ToEndpointSliceTypeOutputWithContext(ctx context.Context) EndpointSliceTypeOutput {
	return o
}

// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
func (o EndpointSliceTypeOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointSliceType) string { return v.AddressType }).(pulumi.StringOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointSliceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSliceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
func (o EndpointSliceTypeOutput) Endpoints() EndpointArrayOutput {
	return o.ApplyT(func(v EndpointSliceType) []Endpoint { return v.Endpoints }).(EndpointArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointSliceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSliceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o EndpointSliceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EndpointSliceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
func (o EndpointSliceTypeOutput) Ports() EndpointPortArrayOutput {
	return o.ApplyT(func(v EndpointSliceType) []EndpointPort { return v.Ports }).(EndpointPortArrayOutput)
}

type EndpointSliceTypeArrayOutput struct{ *pulumi.OutputState }

func (EndpointSliceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSliceType)(nil)).Elem()
}

func (o EndpointSliceTypeArrayOutput) ToEndpointSliceTypeArrayOutput() EndpointSliceTypeArrayOutput {
	return o
}

func (o EndpointSliceTypeArrayOutput) ToEndpointSliceTypeArrayOutputWithContext(ctx context.Context) EndpointSliceTypeArrayOutput {
	return o
}

func (o EndpointSliceTypeArrayOutput) Index(i pulumi.IntInput) EndpointSliceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointSliceType {
		return vs[0].([]EndpointSliceType)[vs[1].(int)]
	}).(EndpointSliceTypeOutput)
}

// EndpointSliceList represents a list of endpoint slices
type EndpointSliceListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of endpoint slices
	Items []EndpointSliceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EndpointSliceListTypeInput is an input type that accepts EndpointSliceListTypeArgs and EndpointSliceListTypeOutput values.
// You can construct a concrete instance of `EndpointSliceListTypeInput` via:
//
//	EndpointSliceListTypeArgs{...}
type EndpointSliceListTypeInput interface {
	pulumi.Input

	ToEndpointSliceListTypeOutput() EndpointSliceListTypeOutput
	ToEndpointSliceListTypeOutputWithContext(context.Context) EndpointSliceListTypeOutput
}

// EndpointSliceList represents a list of endpoint slices
type EndpointSliceListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of endpoint slices
	Items EndpointSliceTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EndpointSliceListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSliceListType)(nil)).Elem()
}

func (i EndpointSliceListTypeArgs) ToEndpointSliceListTypeOutput() EndpointSliceListTypeOutput {
	return i.ToEndpointSliceListTypeOutputWithContext(context.Background())
}

func (i EndpointSliceListTypeArgs) ToEndpointSliceListTypeOutputWithContext(ctx context.Context) EndpointSliceListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSliceListTypeOutput)
}

// EndpointSliceList represents a list of endpoint slices
type EndpointSliceListTypeOutput struct{ *pulumi.OutputState }

func (EndpointSliceListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSliceListType)(nil)).Elem()
}

func (o EndpointSliceListTypeOutput) ToEndpointSliceListTypeOutput() EndpointSliceListTypeOutput {
	return o
}

func (o EndpointSliceListTypeOutput) ToEndpointSliceListTypeOutputWithContext(ctx context.Context) EndpointSliceListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointSliceListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSliceListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of endpoint slices
func (o EndpointSliceListTypeOutput) Items() EndpointSliceTypeArrayOutput {
	return o.ApplyT(func(v EndpointSliceListType) []EndpointSliceType { return v.Items }).(EndpointSliceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointSliceListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSliceListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o EndpointSliceListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EndpointSliceListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSlicePatchType struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType *string `pulumi:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints []EndpointPatch `pulumi:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports []EndpointPortPatch `pulumi:"ports"`
}

// EndpointSlicePatchTypeInput is an input type that accepts EndpointSlicePatchTypeArgs and EndpointSlicePatchTypeOutput values.
// You can construct a concrete instance of `EndpointSlicePatchTypeInput` via:
//
//	EndpointSlicePatchTypeArgs{...}
type EndpointSlicePatchTypeInput interface {
	pulumi.Input

	ToEndpointSlicePatchTypeOutput() EndpointSlicePatchTypeOutput
	ToEndpointSlicePatchTypeOutputWithContext(context.Context) EndpointSlicePatchTypeOutput
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSlicePatchTypeArgs struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType pulumi.StringPtrInput `pulumi:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints EndpointPatchArrayInput `pulumi:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports EndpointPortPatchArrayInput `pulumi:"ports"`
}

func (EndpointSlicePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSlicePatchType)(nil)).Elem()
}

func (i EndpointSlicePatchTypeArgs) ToEndpointSlicePatchTypeOutput() EndpointSlicePatchTypeOutput {
	return i.ToEndpointSlicePatchTypeOutputWithContext(context.Background())
}

func (i EndpointSlicePatchTypeArgs) ToEndpointSlicePatchTypeOutputWithContext(ctx context.Context) EndpointSlicePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSlicePatchTypeOutput)
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type EndpointSlicePatchTypeOutput struct{ *pulumi.OutputState }

func (EndpointSlicePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSlicePatchType)(nil)).Elem()
}

func (o EndpointSlicePatchTypeOutput) ToEndpointSlicePatchTypeOutput() EndpointSlicePatchTypeOutput {
	return o
}

func (o EndpointSlicePatchTypeOutput) ToEndpointSlicePatchTypeOutputWithContext(ctx context.Context) EndpointSlicePatchTypeOutput {
	return o
}

// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
func (o EndpointSlicePatchTypeOutput) AddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) *string { return v.AddressType }).(pulumi.StringPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointSlicePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
func (o EndpointSlicePatchTypeOutput) Endpoints() EndpointPatchArrayOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) []EndpointPatch { return v.Endpoints }).(EndpointPatchArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointSlicePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
func (o EndpointSlicePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
func (o EndpointSlicePatchTypeOutput) Ports() EndpointPortPatchArrayOutput {
	return o.ApplyT(func(v EndpointSlicePatchType) []EndpointPortPatch { return v.Ports }).(EndpointPortPatchArrayOutput)
}

// ForZone provides information about which zones should consume this endpoint.
type ForZone struct {
	// name represents the name of the zone.
	Name string `pulumi:"name"`
}

// ForZoneInput is an input type that accepts ForZoneArgs and ForZoneOutput values.
// You can construct a concrete instance of `ForZoneInput` via:
//
//	ForZoneArgs{...}
type ForZoneInput interface {
	pulumi.Input

	ToForZoneOutput() ForZoneOutput
	ToForZoneOutputWithContext(context.Context) ForZoneOutput
}

// ForZone provides information about which zones should consume this endpoint.
type ForZoneArgs struct {
	// name represents the name of the zone.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ForZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForZone)(nil)).Elem()
}

func (i ForZoneArgs) ToForZoneOutput() ForZoneOutput {
	return i.ToForZoneOutputWithContext(context.Background())
}

func (i ForZoneArgs) ToForZoneOutputWithContext(ctx context.Context) ForZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForZoneOutput)
}

// ForZoneArrayInput is an input type that accepts ForZoneArray and ForZoneArrayOutput values.
// You can construct a concrete instance of `ForZoneArrayInput` via:
//
//	ForZoneArray{ ForZoneArgs{...} }
type ForZoneArrayInput interface {
	pulumi.Input

	ToForZoneArrayOutput() ForZoneArrayOutput
	ToForZoneArrayOutputWithContext(context.Context) ForZoneArrayOutput
}

type ForZoneArray []ForZoneInput

func (ForZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForZone)(nil)).Elem()
}

func (i ForZoneArray) ToForZoneArrayOutput() ForZoneArrayOutput {
	return i.ToForZoneArrayOutputWithContext(context.Background())
}

func (i ForZoneArray) ToForZoneArrayOutputWithContext(ctx context.Context) ForZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForZoneArrayOutput)
}

// ForZone provides information about which zones should consume this endpoint.
type ForZoneOutput struct{ *pulumi.OutputState }

func (ForZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForZone)(nil)).Elem()
}

func (o ForZoneOutput) ToForZoneOutput() ForZoneOutput {
	return o
}

func (o ForZoneOutput) ToForZoneOutputWithContext(ctx context.Context) ForZoneOutput {
	return o
}

// name represents the name of the zone.
func (o ForZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ForZone) string { return v.Name }).(pulumi.StringOutput)
}

type ForZoneArrayOutput struct{ *pulumi.OutputState }

func (ForZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForZone)(nil)).Elem()
}

func (o ForZoneArrayOutput) ToForZoneArrayOutput() ForZoneArrayOutput {
	return o
}

func (o ForZoneArrayOutput) ToForZoneArrayOutputWithContext(ctx context.Context) ForZoneArrayOutput {
	return o
}

func (o ForZoneArrayOutput) Index(i pulumi.IntInput) ForZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForZone {
		return vs[0].([]ForZone)[vs[1].(int)]
	}).(ForZoneOutput)
}

// ForZone provides information about which zones should consume this endpoint.
type ForZonePatch struct {
	// name represents the name of the zone.
	Name *string `pulumi:"name"`
}

// ForZonePatchInput is an input type that accepts ForZonePatchArgs and ForZonePatchOutput values.
// You can construct a concrete instance of `ForZonePatchInput` via:
//
//	ForZonePatchArgs{...}
type ForZonePatchInput interface {
	pulumi.Input

	ToForZonePatchOutput() ForZonePatchOutput
	ToForZonePatchOutputWithContext(context.Context) ForZonePatchOutput
}

// ForZone provides information about which zones should consume this endpoint.
type ForZonePatchArgs struct {
	// name represents the name of the zone.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ForZonePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForZonePatch)(nil)).Elem()
}

func (i ForZonePatchArgs) ToForZonePatchOutput() ForZonePatchOutput {
	return i.ToForZonePatchOutputWithContext(context.Background())
}

func (i ForZonePatchArgs) ToForZonePatchOutputWithContext(ctx context.Context) ForZonePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForZonePatchOutput)
}

// ForZonePatchArrayInput is an input type that accepts ForZonePatchArray and ForZonePatchArrayOutput values.
// You can construct a concrete instance of `ForZonePatchArrayInput` via:
//
//	ForZonePatchArray{ ForZonePatchArgs{...} }
type ForZonePatchArrayInput interface {
	pulumi.Input

	ToForZonePatchArrayOutput() ForZonePatchArrayOutput
	ToForZonePatchArrayOutputWithContext(context.Context) ForZonePatchArrayOutput
}

type ForZonePatchArray []ForZonePatchInput

func (ForZonePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForZonePatch)(nil)).Elem()
}

func (i ForZonePatchArray) ToForZonePatchArrayOutput() ForZonePatchArrayOutput {
	return i.ToForZonePatchArrayOutputWithContext(context.Background())
}

func (i ForZonePatchArray) ToForZonePatchArrayOutputWithContext(ctx context.Context) ForZonePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForZonePatchArrayOutput)
}

// ForZone provides information about which zones should consume this endpoint.
type ForZonePatchOutput struct{ *pulumi.OutputState }

func (ForZonePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForZonePatch)(nil)).Elem()
}

func (o ForZonePatchOutput) ToForZonePatchOutput() ForZonePatchOutput {
	return o
}

func (o ForZonePatchOutput) ToForZonePatchOutputWithContext(ctx context.Context) ForZonePatchOutput {
	return o
}

// name represents the name of the zone.
func (o ForZonePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForZonePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ForZonePatchArrayOutput struct{ *pulumi.OutputState }

func (ForZonePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForZonePatch)(nil)).Elem()
}

func (o ForZonePatchArrayOutput) ToForZonePatchArrayOutput() ForZonePatchArrayOutput {
	return o
}

func (o ForZonePatchArrayOutput) ToForZonePatchArrayOutputWithContext(ctx context.Context) ForZonePatchArrayOutput {
	return o
}

func (o ForZonePatchArrayOutput) Index(i pulumi.IntInput) ForZonePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForZonePatch {
		return vs[0].([]ForZonePatch)[vs[1].(int)]
	}).(ForZonePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), EndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointConditionsInput)(nil)).Elem(), EndpointConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointConditionsPtrInput)(nil)).Elem(), EndpointConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointConditionsPatchInput)(nil)).Elem(), EndpointConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointConditionsPatchPtrInput)(nil)).Elem(), EndpointConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointHintsInput)(nil)).Elem(), EndpointHintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointHintsPtrInput)(nil)).Elem(), EndpointHintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointHintsPatchInput)(nil)).Elem(), EndpointHintsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointHintsPatchPtrInput)(nil)).Elem(), EndpointHintsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPatchInput)(nil)).Elem(), EndpointPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPatchArrayInput)(nil)).Elem(), EndpointPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortInput)(nil)).Elem(), EndpointPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortArrayInput)(nil)).Elem(), EndpointPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortPatchInput)(nil)).Elem(), EndpointPortPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortPatchArrayInput)(nil)).Elem(), EndpointPortPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSliceTypeInput)(nil)).Elem(), EndpointSliceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSliceTypeArrayInput)(nil)).Elem(), EndpointSliceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSliceListTypeInput)(nil)).Elem(), EndpointSliceListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSlicePatchTypeInput)(nil)).Elem(), EndpointSlicePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForZoneInput)(nil)).Elem(), ForZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForZoneArrayInput)(nil)).Elem(), ForZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForZonePatchInput)(nil)).Elem(), ForZonePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForZonePatchArrayInput)(nil)).Elem(), ForZonePatchArray{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointConditionsOutput{})
	pulumi.RegisterOutputType(EndpointConditionsPtrOutput{})
	pulumi.RegisterOutputType(EndpointConditionsPatchOutput{})
	pulumi.RegisterOutputType(EndpointConditionsPatchPtrOutput{})
	pulumi.RegisterOutputType(EndpointHintsOutput{})
	pulumi.RegisterOutputType(EndpointHintsPtrOutput{})
	pulumi.RegisterOutputType(EndpointHintsPatchOutput{})
	pulumi.RegisterOutputType(EndpointHintsPatchPtrOutput{})
	pulumi.RegisterOutputType(EndpointPatchOutput{})
	pulumi.RegisterOutputType(EndpointPatchArrayOutput{})
	pulumi.RegisterOutputType(EndpointPortOutput{})
	pulumi.RegisterOutputType(EndpointPortArrayOutput{})
	pulumi.RegisterOutputType(EndpointPortPatchOutput{})
	pulumi.RegisterOutputType(EndpointPortPatchArrayOutput{})
	pulumi.RegisterOutputType(EndpointSliceTypeOutput{})
	pulumi.RegisterOutputType(EndpointSliceTypeArrayOutput{})
	pulumi.RegisterOutputType(EndpointSliceListTypeOutput{})
	pulumi.RegisterOutputType(EndpointSlicePatchTypeOutput{})
	pulumi.RegisterOutputType(ForZoneOutput{})
	pulumi.RegisterOutputType(ForZoneArrayOutput{})
	pulumi.RegisterOutputType(ForZonePatchOutput{})
	pulumi.RegisterOutputType(ForZonePatchArrayOutput{})
}
