// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundleType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata contains the object metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec contains the signer (if any) and trust anchors.
	Spec ClusterTrustBundleSpec `pulumi:"spec"`
}

// ClusterTrustBundleTypeInput is an input type that accepts ClusterTrustBundleTypeArgs and ClusterTrustBundleTypeOutput values.
// You can construct a concrete instance of `ClusterTrustBundleTypeInput` via:
//
//	ClusterTrustBundleTypeArgs{...}
type ClusterTrustBundleTypeInput interface {
	pulumi.Input

	ToClusterTrustBundleTypeOutput() ClusterTrustBundleTypeOutput
	ToClusterTrustBundleTypeOutputWithContext(context.Context) ClusterTrustBundleTypeOutput
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundleTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata contains the object metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec contains the signer (if any) and trust anchors.
	Spec ClusterTrustBundleSpecInput `pulumi:"spec"`
}

func (ClusterTrustBundleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleType)(nil)).Elem()
}

func (i ClusterTrustBundleTypeArgs) ToClusterTrustBundleTypeOutput() ClusterTrustBundleTypeOutput {
	return i.ToClusterTrustBundleTypeOutputWithContext(context.Background())
}

func (i ClusterTrustBundleTypeArgs) ToClusterTrustBundleTypeOutputWithContext(ctx context.Context) ClusterTrustBundleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleTypeOutput)
}

// ClusterTrustBundleTypeArrayInput is an input type that accepts ClusterTrustBundleTypeArray and ClusterTrustBundleTypeArrayOutput values.
// You can construct a concrete instance of `ClusterTrustBundleTypeArrayInput` via:
//
//	ClusterTrustBundleTypeArray{ ClusterTrustBundleTypeArgs{...} }
type ClusterTrustBundleTypeArrayInput interface {
	pulumi.Input

	ToClusterTrustBundleTypeArrayOutput() ClusterTrustBundleTypeArrayOutput
	ToClusterTrustBundleTypeArrayOutputWithContext(context.Context) ClusterTrustBundleTypeArrayOutput
}

type ClusterTrustBundleTypeArray []ClusterTrustBundleTypeInput

func (ClusterTrustBundleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterTrustBundleType)(nil)).Elem()
}

func (i ClusterTrustBundleTypeArray) ToClusterTrustBundleTypeArrayOutput() ClusterTrustBundleTypeArrayOutput {
	return i.ToClusterTrustBundleTypeArrayOutputWithContext(context.Background())
}

func (i ClusterTrustBundleTypeArray) ToClusterTrustBundleTypeArrayOutputWithContext(ctx context.Context) ClusterTrustBundleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleTypeArrayOutput)
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundleTypeOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleType)(nil)).Elem()
}

func (o ClusterTrustBundleTypeOutput) ToClusterTrustBundleTypeOutput() ClusterTrustBundleTypeOutput {
	return o
}

func (o ClusterTrustBundleTypeOutput) ToClusterTrustBundleTypeOutputWithContext(ctx context.Context) ClusterTrustBundleTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterTrustBundleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterTrustBundleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata contains the object metadata.
func (o ClusterTrustBundleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec contains the signer (if any) and trust anchors.
func (o ClusterTrustBundleTypeOutput) Spec() ClusterTrustBundleSpecOutput {
	return o.ApplyT(func(v ClusterTrustBundleType) ClusterTrustBundleSpec { return v.Spec }).(ClusterTrustBundleSpecOutput)
}

type ClusterTrustBundleTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterTrustBundleType)(nil)).Elem()
}

func (o ClusterTrustBundleTypeArrayOutput) ToClusterTrustBundleTypeArrayOutput() ClusterTrustBundleTypeArrayOutput {
	return o
}

func (o ClusterTrustBundleTypeArrayOutput) ToClusterTrustBundleTypeArrayOutputWithContext(ctx context.Context) ClusterTrustBundleTypeArrayOutput {
	return o
}

func (o ClusterTrustBundleTypeArrayOutput) Index(i pulumi.IntInput) ClusterTrustBundleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterTrustBundleType {
		return vs[0].([]ClusterTrustBundleType)[vs[1].(int)]
	}).(ClusterTrustBundleTypeOutput)
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
type ClusterTrustBundleListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a collection of ClusterTrustBundle objects
	Items []ClusterTrustBundleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata contains the list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClusterTrustBundleListTypeInput is an input type that accepts ClusterTrustBundleListTypeArgs and ClusterTrustBundleListTypeOutput values.
// You can construct a concrete instance of `ClusterTrustBundleListTypeInput` via:
//
//	ClusterTrustBundleListTypeArgs{...}
type ClusterTrustBundleListTypeInput interface {
	pulumi.Input

	ToClusterTrustBundleListTypeOutput() ClusterTrustBundleListTypeOutput
	ToClusterTrustBundleListTypeOutputWithContext(context.Context) ClusterTrustBundleListTypeOutput
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
type ClusterTrustBundleListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a collection of ClusterTrustBundle objects
	Items ClusterTrustBundleTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata contains the list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterTrustBundleListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleListType)(nil)).Elem()
}

func (i ClusterTrustBundleListTypeArgs) ToClusterTrustBundleListTypeOutput() ClusterTrustBundleListTypeOutput {
	return i.ToClusterTrustBundleListTypeOutputWithContext(context.Background())
}

func (i ClusterTrustBundleListTypeArgs) ToClusterTrustBundleListTypeOutputWithContext(ctx context.Context) ClusterTrustBundleListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleListTypeOutput)
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
type ClusterTrustBundleListTypeOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleListType)(nil)).Elem()
}

func (o ClusterTrustBundleListTypeOutput) ToClusterTrustBundleListTypeOutput() ClusterTrustBundleListTypeOutput {
	return o
}

func (o ClusterTrustBundleListTypeOutput) ToClusterTrustBundleListTypeOutputWithContext(ctx context.Context) ClusterTrustBundleListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterTrustBundleListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a collection of ClusterTrustBundle objects
func (o ClusterTrustBundleListTypeOutput) Items() ClusterTrustBundleTypeArrayOutput {
	return o.ApplyT(func(v ClusterTrustBundleListType) []ClusterTrustBundleType { return v.Items }).(ClusterTrustBundleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterTrustBundleListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata contains the list metadata.
func (o ClusterTrustBundleListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundlePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata contains the object metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec contains the signer (if any) and trust anchors.
	Spec *ClusterTrustBundleSpecPatch `pulumi:"spec"`
}

// ClusterTrustBundlePatchTypeInput is an input type that accepts ClusterTrustBundlePatchTypeArgs and ClusterTrustBundlePatchTypeOutput values.
// You can construct a concrete instance of `ClusterTrustBundlePatchTypeInput` via:
//
//	ClusterTrustBundlePatchTypeArgs{...}
type ClusterTrustBundlePatchTypeInput interface {
	pulumi.Input

	ToClusterTrustBundlePatchTypeOutput() ClusterTrustBundlePatchTypeOutput
	ToClusterTrustBundlePatchTypeOutputWithContext(context.Context) ClusterTrustBundlePatchTypeOutput
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundlePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata contains the object metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec contains the signer (if any) and trust anchors.
	Spec ClusterTrustBundleSpecPatchPtrInput `pulumi:"spec"`
}

func (ClusterTrustBundlePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundlePatchType)(nil)).Elem()
}

func (i ClusterTrustBundlePatchTypeArgs) ToClusterTrustBundlePatchTypeOutput() ClusterTrustBundlePatchTypeOutput {
	return i.ToClusterTrustBundlePatchTypeOutputWithContext(context.Background())
}

func (i ClusterTrustBundlePatchTypeArgs) ToClusterTrustBundlePatchTypeOutputWithContext(ctx context.Context) ClusterTrustBundlePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundlePatchTypeOutput)
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type ClusterTrustBundlePatchTypeOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundlePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundlePatchType)(nil)).Elem()
}

func (o ClusterTrustBundlePatchTypeOutput) ToClusterTrustBundlePatchTypeOutput() ClusterTrustBundlePatchTypeOutput {
	return o
}

func (o ClusterTrustBundlePatchTypeOutput) ToClusterTrustBundlePatchTypeOutputWithContext(ctx context.Context) ClusterTrustBundlePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterTrustBundlePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundlePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterTrustBundlePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundlePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata contains the object metadata.
func (o ClusterTrustBundlePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundlePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec contains the signer (if any) and trust anchors.
func (o ClusterTrustBundlePatchTypeOutput) Spec() ClusterTrustBundleSpecPatchPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundlePatchType) *ClusterTrustBundleSpecPatch { return v.Spec }).(ClusterTrustBundleSpecPatchPtrOutput)
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpec struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName *string `pulumi:"signerName"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle string `pulumi:"trustBundle"`
}

// ClusterTrustBundleSpecInput is an input type that accepts ClusterTrustBundleSpecArgs and ClusterTrustBundleSpecOutput values.
// You can construct a concrete instance of `ClusterTrustBundleSpecInput` via:
//
//	ClusterTrustBundleSpecArgs{...}
type ClusterTrustBundleSpecInput interface {
	pulumi.Input

	ToClusterTrustBundleSpecOutput() ClusterTrustBundleSpecOutput
	ToClusterTrustBundleSpecOutputWithContext(context.Context) ClusterTrustBundleSpecOutput
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpecArgs struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle pulumi.StringInput `pulumi:"trustBundle"`
}

func (ClusterTrustBundleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleSpec)(nil)).Elem()
}

func (i ClusterTrustBundleSpecArgs) ToClusterTrustBundleSpecOutput() ClusterTrustBundleSpecOutput {
	return i.ToClusterTrustBundleSpecOutputWithContext(context.Background())
}

func (i ClusterTrustBundleSpecArgs) ToClusterTrustBundleSpecOutputWithContext(ctx context.Context) ClusterTrustBundleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleSpecOutput)
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpecOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleSpec)(nil)).Elem()
}

func (o ClusterTrustBundleSpecOutput) ToClusterTrustBundleSpecOutput() ClusterTrustBundleSpecOutput {
	return o
}

func (o ClusterTrustBundleSpecOutput) ToClusterTrustBundleSpecOutputWithContext(ctx context.Context) ClusterTrustBundleSpecOutput {
	return o
}

// signerName indicates the associated signer, if any.
//
// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
//
// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
//
// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
//
// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
func (o ClusterTrustBundleSpecOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleSpec) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
//
// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
//
// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
func (o ClusterTrustBundleSpecOutput) TrustBundle() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterTrustBundleSpec) string { return v.TrustBundle }).(pulumi.StringOutput)
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpecPatch struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName *string `pulumi:"signerName"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle *string `pulumi:"trustBundle"`
}

// ClusterTrustBundleSpecPatchInput is an input type that accepts ClusterTrustBundleSpecPatchArgs and ClusterTrustBundleSpecPatchOutput values.
// You can construct a concrete instance of `ClusterTrustBundleSpecPatchInput` via:
//
//	ClusterTrustBundleSpecPatchArgs{...}
type ClusterTrustBundleSpecPatchInput interface {
	pulumi.Input

	ToClusterTrustBundleSpecPatchOutput() ClusterTrustBundleSpecPatchOutput
	ToClusterTrustBundleSpecPatchOutputWithContext(context.Context) ClusterTrustBundleSpecPatchOutput
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpecPatchArgs struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle pulumi.StringPtrInput `pulumi:"trustBundle"`
}

func (ClusterTrustBundleSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleSpecPatch)(nil)).Elem()
}

func (i ClusterTrustBundleSpecPatchArgs) ToClusterTrustBundleSpecPatchOutput() ClusterTrustBundleSpecPatchOutput {
	return i.ToClusterTrustBundleSpecPatchOutputWithContext(context.Background())
}

func (i ClusterTrustBundleSpecPatchArgs) ToClusterTrustBundleSpecPatchOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleSpecPatchOutput)
}

func (i ClusterTrustBundleSpecPatchArgs) ToClusterTrustBundleSpecPatchPtrOutput() ClusterTrustBundleSpecPatchPtrOutput {
	return i.ToClusterTrustBundleSpecPatchPtrOutputWithContext(context.Background())
}

func (i ClusterTrustBundleSpecPatchArgs) ToClusterTrustBundleSpecPatchPtrOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleSpecPatchOutput).ToClusterTrustBundleSpecPatchPtrOutputWithContext(ctx)
}

// ClusterTrustBundleSpecPatchPtrInput is an input type that accepts ClusterTrustBundleSpecPatchArgs, ClusterTrustBundleSpecPatchPtr and ClusterTrustBundleSpecPatchPtrOutput values.
// You can construct a concrete instance of `ClusterTrustBundleSpecPatchPtrInput` via:
//
//	        ClusterTrustBundleSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ClusterTrustBundleSpecPatchPtrInput interface {
	pulumi.Input

	ToClusterTrustBundleSpecPatchPtrOutput() ClusterTrustBundleSpecPatchPtrOutput
	ToClusterTrustBundleSpecPatchPtrOutputWithContext(context.Context) ClusterTrustBundleSpecPatchPtrOutput
}

type clusterTrustBundleSpecPatchPtrType ClusterTrustBundleSpecPatchArgs

func ClusterTrustBundleSpecPatchPtr(v *ClusterTrustBundleSpecPatchArgs) ClusterTrustBundleSpecPatchPtrInput {
	return (*clusterTrustBundleSpecPatchPtrType)(v)
}

func (*clusterTrustBundleSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTrustBundleSpecPatch)(nil)).Elem()
}

func (i *clusterTrustBundleSpecPatchPtrType) ToClusterTrustBundleSpecPatchPtrOutput() ClusterTrustBundleSpecPatchPtrOutput {
	return i.ToClusterTrustBundleSpecPatchPtrOutputWithContext(context.Background())
}

func (i *clusterTrustBundleSpecPatchPtrType) ToClusterTrustBundleSpecPatchPtrOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustBundleSpecPatchPtrOutput)
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type ClusterTrustBundleSpecPatchOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTrustBundleSpecPatch)(nil)).Elem()
}

func (o ClusterTrustBundleSpecPatchOutput) ToClusterTrustBundleSpecPatchOutput() ClusterTrustBundleSpecPatchOutput {
	return o
}

func (o ClusterTrustBundleSpecPatchOutput) ToClusterTrustBundleSpecPatchOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchOutput {
	return o
}

func (o ClusterTrustBundleSpecPatchOutput) ToClusterTrustBundleSpecPatchPtrOutput() ClusterTrustBundleSpecPatchPtrOutput {
	return o.ToClusterTrustBundleSpecPatchPtrOutputWithContext(context.Background())
}

func (o ClusterTrustBundleSpecPatchOutput) ToClusterTrustBundleSpecPatchPtrOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterTrustBundleSpecPatch) *ClusterTrustBundleSpecPatch {
		return &v
	}).(ClusterTrustBundleSpecPatchPtrOutput)
}

// signerName indicates the associated signer, if any.
//
// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
//
// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
//
// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
//
// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
func (o ClusterTrustBundleSpecPatchOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleSpecPatch) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
//
// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
//
// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
func (o ClusterTrustBundleSpecPatchOutput) TrustBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTrustBundleSpecPatch) *string { return v.TrustBundle }).(pulumi.StringPtrOutput)
}

type ClusterTrustBundleSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ClusterTrustBundleSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTrustBundleSpecPatch)(nil)).Elem()
}

func (o ClusterTrustBundleSpecPatchPtrOutput) ToClusterTrustBundleSpecPatchPtrOutput() ClusterTrustBundleSpecPatchPtrOutput {
	return o
}

func (o ClusterTrustBundleSpecPatchPtrOutput) ToClusterTrustBundleSpecPatchPtrOutputWithContext(ctx context.Context) ClusterTrustBundleSpecPatchPtrOutput {
	return o
}

func (o ClusterTrustBundleSpecPatchPtrOutput) Elem() ClusterTrustBundleSpecPatchOutput {
	return o.ApplyT(func(v *ClusterTrustBundleSpecPatch) ClusterTrustBundleSpecPatch {
		if v != nil {
			return *v
		}
		var ret ClusterTrustBundleSpecPatch
		return ret
	}).(ClusterTrustBundleSpecPatchOutput)
}

// signerName indicates the associated signer, if any.
//
// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
//
// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
//
// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
//
// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
func (o ClusterTrustBundleSpecPatchPtrOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterTrustBundleSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SignerName
	}).(pulumi.StringPtrOutput)
}

// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
//
// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
//
// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
func (o ClusterTrustBundleSpecPatchPtrOutput) TrustBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterTrustBundleSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TrustBundle
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleTypeInput)(nil)).Elem(), ClusterTrustBundleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleTypeArrayInput)(nil)).Elem(), ClusterTrustBundleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleListTypeInput)(nil)).Elem(), ClusterTrustBundleListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundlePatchTypeInput)(nil)).Elem(), ClusterTrustBundlePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleSpecInput)(nil)).Elem(), ClusterTrustBundleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleSpecPatchInput)(nil)).Elem(), ClusterTrustBundleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustBundleSpecPatchPtrInput)(nil)).Elem(), ClusterTrustBundleSpecPatchArgs{})
	pulumi.RegisterOutputType(ClusterTrustBundleTypeOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundleTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundleListTypeOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundlePatchTypeOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundleSpecOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundleSpecPatchOutput{})
	pulumi.RegisterOutputType(ClusterTrustBundleSpecPatchPtrOutput{})
}
