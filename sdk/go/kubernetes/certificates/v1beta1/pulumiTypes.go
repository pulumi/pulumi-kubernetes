// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Describes a certificate signing request
type CertificateSigningRequestType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// The certificate request itself and any additional information.
	Spec *CertificateSigningRequestSpec `pulumi:"spec"`
	// Derived information about the request.
	Status *CertificateSigningRequestStatus `pulumi:"status"`
}

// CertificateSigningRequestTypeInput is an input type that accepts CertificateSigningRequestTypeArgs and CertificateSigningRequestTypeOutput values.
// You can construct a concrete instance of `CertificateSigningRequestTypeInput` via:
//
//	CertificateSigningRequestTypeArgs{...}
type CertificateSigningRequestTypeInput interface {
	pulumi.Input

	ToCertificateSigningRequestTypeOutput() CertificateSigningRequestTypeOutput
	ToCertificateSigningRequestTypeOutputWithContext(context.Context) CertificateSigningRequestTypeOutput
}

// Describes a certificate signing request
type CertificateSigningRequestTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// The certificate request itself and any additional information.
	Spec CertificateSigningRequestSpecPtrInput `pulumi:"spec"`
	// Derived information about the request.
	Status CertificateSigningRequestStatusPtrInput `pulumi:"status"`
}

func (CertificateSigningRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestType)(nil)).Elem()
}

func (i CertificateSigningRequestTypeArgs) ToCertificateSigningRequestTypeOutput() CertificateSigningRequestTypeOutput {
	return i.ToCertificateSigningRequestTypeOutputWithContext(context.Background())
}

func (i CertificateSigningRequestTypeArgs) ToCertificateSigningRequestTypeOutputWithContext(ctx context.Context) CertificateSigningRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestTypeOutput)
}

// CertificateSigningRequestTypeArrayInput is an input type that accepts CertificateSigningRequestTypeArray and CertificateSigningRequestTypeArrayOutput values.
// You can construct a concrete instance of `CertificateSigningRequestTypeArrayInput` via:
//
//	CertificateSigningRequestTypeArray{ CertificateSigningRequestTypeArgs{...} }
type CertificateSigningRequestTypeArrayInput interface {
	pulumi.Input

	ToCertificateSigningRequestTypeArrayOutput() CertificateSigningRequestTypeArrayOutput
	ToCertificateSigningRequestTypeArrayOutputWithContext(context.Context) CertificateSigningRequestTypeArrayOutput
}

type CertificateSigningRequestTypeArray []CertificateSigningRequestTypeInput

func (CertificateSigningRequestTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestType)(nil)).Elem()
}

func (i CertificateSigningRequestTypeArray) ToCertificateSigningRequestTypeArrayOutput() CertificateSigningRequestTypeArrayOutput {
	return i.ToCertificateSigningRequestTypeArrayOutputWithContext(context.Background())
}

func (i CertificateSigningRequestTypeArray) ToCertificateSigningRequestTypeArrayOutputWithContext(ctx context.Context) CertificateSigningRequestTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestTypeArrayOutput)
}

// Describes a certificate signing request
type CertificateSigningRequestTypeOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestType)(nil)).Elem()
}

func (o CertificateSigningRequestTypeOutput) ToCertificateSigningRequestTypeOutput() CertificateSigningRequestTypeOutput {
	return o
}

func (o CertificateSigningRequestTypeOutput) ToCertificateSigningRequestTypeOutputWithContext(ctx context.Context) CertificateSigningRequestTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateSigningRequestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateSigningRequestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CertificateSigningRequestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The certificate request itself and any additional information.
func (o CertificateSigningRequestTypeOutput) Spec() CertificateSigningRequestSpecPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestType) *CertificateSigningRequestSpec { return v.Spec }).(CertificateSigningRequestSpecPtrOutput)
}

// Derived information about the request.
func (o CertificateSigningRequestTypeOutput) Status() CertificateSigningRequestStatusPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestType) *CertificateSigningRequestStatus { return v.Status }).(CertificateSigningRequestStatusPtrOutput)
}

type CertificateSigningRequestTypeArrayOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestType)(nil)).Elem()
}

func (o CertificateSigningRequestTypeArrayOutput) ToCertificateSigningRequestTypeArrayOutput() CertificateSigningRequestTypeArrayOutput {
	return o
}

func (o CertificateSigningRequestTypeArrayOutput) ToCertificateSigningRequestTypeArrayOutputWithContext(ctx context.Context) CertificateSigningRequestTypeArrayOutput {
	return o
}

func (o CertificateSigningRequestTypeArrayOutput) Index(i pulumi.IntInput) CertificateSigningRequestTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateSigningRequestType {
		return vs[0].([]CertificateSigningRequestType)[vs[1].(int)]
	}).(CertificateSigningRequestTypeOutput)
}

type CertificateSigningRequestCondition struct {
	// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// timestamp for the last update to this condition
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message *string `pulumi:"message"`
	// brief reason for the request state
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
	Status *string `pulumi:"status"`
	// request approval state, currently Approved or Denied.
	Type string `pulumi:"type"`
}

// CertificateSigningRequestConditionInput is an input type that accepts CertificateSigningRequestConditionArgs and CertificateSigningRequestConditionOutput values.
// You can construct a concrete instance of `CertificateSigningRequestConditionInput` via:
//
//	CertificateSigningRequestConditionArgs{...}
type CertificateSigningRequestConditionInput interface {
	pulumi.Input

	ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput
	ToCertificateSigningRequestConditionOutputWithContext(context.Context) CertificateSigningRequestConditionOutput
}

type CertificateSigningRequestConditionArgs struct {
	// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// timestamp for the last update to this condition
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// brief reason for the request state
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// request approval state, currently Approved or Denied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CertificateSigningRequestConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestCondition)(nil)).Elem()
}

func (i CertificateSigningRequestConditionArgs) ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput {
	return i.ToCertificateSigningRequestConditionOutputWithContext(context.Background())
}

func (i CertificateSigningRequestConditionArgs) ToCertificateSigningRequestConditionOutputWithContext(ctx context.Context) CertificateSigningRequestConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestConditionOutput)
}

// CertificateSigningRequestConditionArrayInput is an input type that accepts CertificateSigningRequestConditionArray and CertificateSigningRequestConditionArrayOutput values.
// You can construct a concrete instance of `CertificateSigningRequestConditionArrayInput` via:
//
//	CertificateSigningRequestConditionArray{ CertificateSigningRequestConditionArgs{...} }
type CertificateSigningRequestConditionArrayInput interface {
	pulumi.Input

	ToCertificateSigningRequestConditionArrayOutput() CertificateSigningRequestConditionArrayOutput
	ToCertificateSigningRequestConditionArrayOutputWithContext(context.Context) CertificateSigningRequestConditionArrayOutput
}

type CertificateSigningRequestConditionArray []CertificateSigningRequestConditionInput

func (CertificateSigningRequestConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestCondition)(nil)).Elem()
}

func (i CertificateSigningRequestConditionArray) ToCertificateSigningRequestConditionArrayOutput() CertificateSigningRequestConditionArrayOutput {
	return i.ToCertificateSigningRequestConditionArrayOutputWithContext(context.Background())
}

func (i CertificateSigningRequestConditionArray) ToCertificateSigningRequestConditionArrayOutputWithContext(ctx context.Context) CertificateSigningRequestConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestConditionArrayOutput)
}

type CertificateSigningRequestConditionOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestCondition)(nil)).Elem()
}

func (o CertificateSigningRequestConditionOutput) ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput {
	return o
}

func (o CertificateSigningRequestConditionOutput) ToCertificateSigningRequestConditionOutputWithContext(ctx context.Context) CertificateSigningRequestConditionOutput {
	return o
}

// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
func (o CertificateSigningRequestConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// timestamp for the last update to this condition
func (o CertificateSigningRequestConditionOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// human readable message with details about the request state
func (o CertificateSigningRequestConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// brief reason for the request state
func (o CertificateSigningRequestConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
func (o CertificateSigningRequestConditionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// request approval state, currently Approved or Denied.
func (o CertificateSigningRequestConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateSigningRequestCondition) string { return v.Type }).(pulumi.StringOutput)
}

type CertificateSigningRequestConditionArrayOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestCondition)(nil)).Elem()
}

func (o CertificateSigningRequestConditionArrayOutput) ToCertificateSigningRequestConditionArrayOutput() CertificateSigningRequestConditionArrayOutput {
	return o
}

func (o CertificateSigningRequestConditionArrayOutput) ToCertificateSigningRequestConditionArrayOutputWithContext(ctx context.Context) CertificateSigningRequestConditionArrayOutput {
	return o
}

func (o CertificateSigningRequestConditionArrayOutput) Index(i pulumi.IntInput) CertificateSigningRequestConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateSigningRequestCondition {
		return vs[0].([]CertificateSigningRequestCondition)[vs[1].(int)]
	}).(CertificateSigningRequestConditionOutput)
}

type CertificateSigningRequestConditionPatch struct {
	// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// timestamp for the last update to this condition
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message *string `pulumi:"message"`
	// brief reason for the request state
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
	Status *string `pulumi:"status"`
	// request approval state, currently Approved or Denied.
	Type *string `pulumi:"type"`
}

// CertificateSigningRequestConditionPatchInput is an input type that accepts CertificateSigningRequestConditionPatchArgs and CertificateSigningRequestConditionPatchOutput values.
// You can construct a concrete instance of `CertificateSigningRequestConditionPatchInput` via:
//
//	CertificateSigningRequestConditionPatchArgs{...}
type CertificateSigningRequestConditionPatchInput interface {
	pulumi.Input

	ToCertificateSigningRequestConditionPatchOutput() CertificateSigningRequestConditionPatchOutput
	ToCertificateSigningRequestConditionPatchOutputWithContext(context.Context) CertificateSigningRequestConditionPatchOutput
}

type CertificateSigningRequestConditionPatchArgs struct {
	// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// timestamp for the last update to this condition
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// brief reason for the request state
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// request approval state, currently Approved or Denied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CertificateSigningRequestConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestConditionPatch)(nil)).Elem()
}

func (i CertificateSigningRequestConditionPatchArgs) ToCertificateSigningRequestConditionPatchOutput() CertificateSigningRequestConditionPatchOutput {
	return i.ToCertificateSigningRequestConditionPatchOutputWithContext(context.Background())
}

func (i CertificateSigningRequestConditionPatchArgs) ToCertificateSigningRequestConditionPatchOutputWithContext(ctx context.Context) CertificateSigningRequestConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestConditionPatchOutput)
}

// CertificateSigningRequestConditionPatchArrayInput is an input type that accepts CertificateSigningRequestConditionPatchArray and CertificateSigningRequestConditionPatchArrayOutput values.
// You can construct a concrete instance of `CertificateSigningRequestConditionPatchArrayInput` via:
//
//	CertificateSigningRequestConditionPatchArray{ CertificateSigningRequestConditionPatchArgs{...} }
type CertificateSigningRequestConditionPatchArrayInput interface {
	pulumi.Input

	ToCertificateSigningRequestConditionPatchArrayOutput() CertificateSigningRequestConditionPatchArrayOutput
	ToCertificateSigningRequestConditionPatchArrayOutputWithContext(context.Context) CertificateSigningRequestConditionPatchArrayOutput
}

type CertificateSigningRequestConditionPatchArray []CertificateSigningRequestConditionPatchInput

func (CertificateSigningRequestConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestConditionPatch)(nil)).Elem()
}

func (i CertificateSigningRequestConditionPatchArray) ToCertificateSigningRequestConditionPatchArrayOutput() CertificateSigningRequestConditionPatchArrayOutput {
	return i.ToCertificateSigningRequestConditionPatchArrayOutputWithContext(context.Background())
}

func (i CertificateSigningRequestConditionPatchArray) ToCertificateSigningRequestConditionPatchArrayOutputWithContext(ctx context.Context) CertificateSigningRequestConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestConditionPatchArrayOutput)
}

type CertificateSigningRequestConditionPatchOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestConditionPatch)(nil)).Elem()
}

func (o CertificateSigningRequestConditionPatchOutput) ToCertificateSigningRequestConditionPatchOutput() CertificateSigningRequestConditionPatchOutput {
	return o
}

func (o CertificateSigningRequestConditionPatchOutput) ToCertificateSigningRequestConditionPatchOutputWithContext(ctx context.Context) CertificateSigningRequestConditionPatchOutput {
	return o
}

// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
func (o CertificateSigningRequestConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// timestamp for the last update to this condition
func (o CertificateSigningRequestConditionPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// human readable message with details about the request state
func (o CertificateSigningRequestConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// brief reason for the request state
func (o CertificateSigningRequestConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
func (o CertificateSigningRequestConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// request approval state, currently Approved or Denied.
func (o CertificateSigningRequestConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CertificateSigningRequestConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateSigningRequestConditionPatch)(nil)).Elem()
}

func (o CertificateSigningRequestConditionPatchArrayOutput) ToCertificateSigningRequestConditionPatchArrayOutput() CertificateSigningRequestConditionPatchArrayOutput {
	return o
}

func (o CertificateSigningRequestConditionPatchArrayOutput) ToCertificateSigningRequestConditionPatchArrayOutputWithContext(ctx context.Context) CertificateSigningRequestConditionPatchArrayOutput {
	return o
}

func (o CertificateSigningRequestConditionPatchArrayOutput) Index(i pulumi.IntInput) CertificateSigningRequestConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateSigningRequestConditionPatch {
		return vs[0].([]CertificateSigningRequestConditionPatch)[vs[1].(int)]
	}).(CertificateSigningRequestConditionPatchOutput)
}

type CertificateSigningRequestListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                         `pulumi:"apiVersion"`
	Items      []CertificateSigningRequestType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string          `pulumi:"kind"`
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CertificateSigningRequestListTypeInput is an input type that accepts CertificateSigningRequestListTypeArgs and CertificateSigningRequestListTypeOutput values.
// You can construct a concrete instance of `CertificateSigningRequestListTypeInput` via:
//
//	CertificateSigningRequestListTypeArgs{...}
type CertificateSigningRequestListTypeInput interface {
	pulumi.Input

	ToCertificateSigningRequestListTypeOutput() CertificateSigningRequestListTypeOutput
	ToCertificateSigningRequestListTypeOutputWithContext(context.Context) CertificateSigningRequestListTypeOutput
}

type CertificateSigningRequestListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput                   `pulumi:"apiVersion"`
	Items      CertificateSigningRequestTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput   `pulumi:"kind"`
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CertificateSigningRequestListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestListType)(nil)).Elem()
}

func (i CertificateSigningRequestListTypeArgs) ToCertificateSigningRequestListTypeOutput() CertificateSigningRequestListTypeOutput {
	return i.ToCertificateSigningRequestListTypeOutputWithContext(context.Background())
}

func (i CertificateSigningRequestListTypeArgs) ToCertificateSigningRequestListTypeOutputWithContext(ctx context.Context) CertificateSigningRequestListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestListTypeOutput)
}

type CertificateSigningRequestListTypeOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestListType)(nil)).Elem()
}

func (o CertificateSigningRequestListTypeOutput) ToCertificateSigningRequestListTypeOutput() CertificateSigningRequestListTypeOutput {
	return o
}

func (o CertificateSigningRequestListTypeOutput) ToCertificateSigningRequestListTypeOutputWithContext(ctx context.Context) CertificateSigningRequestListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateSigningRequestListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CertificateSigningRequestListTypeOutput) Items() CertificateSigningRequestTypeArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestListType) []CertificateSigningRequestType { return v.Items }).(CertificateSigningRequestTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateSigningRequestListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CertificateSigningRequestListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Describes a certificate signing request
type CertificateSigningRequestPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `pulumi:"kind"`
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// The certificate request itself and any additional information.
	Spec *CertificateSigningRequestSpecPatch `pulumi:"spec"`
	// Derived information about the request.
	Status *CertificateSigningRequestStatusPatch `pulumi:"status"`
}

// CertificateSigningRequestPatchTypeInput is an input type that accepts CertificateSigningRequestPatchTypeArgs and CertificateSigningRequestPatchTypeOutput values.
// You can construct a concrete instance of `CertificateSigningRequestPatchTypeInput` via:
//
//	CertificateSigningRequestPatchTypeArgs{...}
type CertificateSigningRequestPatchTypeInput interface {
	pulumi.Input

	ToCertificateSigningRequestPatchTypeOutput() CertificateSigningRequestPatchTypeOutput
	ToCertificateSigningRequestPatchTypeOutputWithContext(context.Context) CertificateSigningRequestPatchTypeOutput
}

// Describes a certificate signing request
type CertificateSigningRequestPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// The certificate request itself and any additional information.
	Spec CertificateSigningRequestSpecPatchPtrInput `pulumi:"spec"`
	// Derived information about the request.
	Status CertificateSigningRequestStatusPatchPtrInput `pulumi:"status"`
}

func (CertificateSigningRequestPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestPatchType)(nil)).Elem()
}

func (i CertificateSigningRequestPatchTypeArgs) ToCertificateSigningRequestPatchTypeOutput() CertificateSigningRequestPatchTypeOutput {
	return i.ToCertificateSigningRequestPatchTypeOutputWithContext(context.Background())
}

func (i CertificateSigningRequestPatchTypeArgs) ToCertificateSigningRequestPatchTypeOutputWithContext(ctx context.Context) CertificateSigningRequestPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestPatchTypeOutput)
}

// Describes a certificate signing request
type CertificateSigningRequestPatchTypeOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestPatchType)(nil)).Elem()
}

func (o CertificateSigningRequestPatchTypeOutput) ToCertificateSigningRequestPatchTypeOutput() CertificateSigningRequestPatchTypeOutput {
	return o
}

func (o CertificateSigningRequestPatchTypeOutput) ToCertificateSigningRequestPatchTypeOutputWithContext(ctx context.Context) CertificateSigningRequestPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateSigningRequestPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateSigningRequestPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CertificateSigningRequestPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// The certificate request itself and any additional information.
func (o CertificateSigningRequestPatchTypeOutput) Spec() CertificateSigningRequestSpecPatchPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestPatchType) *CertificateSigningRequestSpecPatch { return v.Spec }).(CertificateSigningRequestSpecPatchPtrOutput)
}

// Derived information about the request.
func (o CertificateSigningRequestPatchTypeOutput) Status() CertificateSigningRequestStatusPatchPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestPatchType) *CertificateSigningRequestStatusPatch { return v.Status }).(CertificateSigningRequestStatusPatchPtrOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpec struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra map[string][]string `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups []string `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request string `pulumi:"request"`
	// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
	//  1. If it's a kubelet client certificate, it is assigned
	//     "kubernetes.io/kube-apiserver-client-kubelet".
	//  2. If it's a kubelet serving certificate, it is assigned
	//     "kubernetes.io/kubelet-serving".
	//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
	//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
	SignerName *string `pulumi:"signerName"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid *string `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages []string `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username *string `pulumi:"username"`
}

// CertificateSigningRequestSpecInput is an input type that accepts CertificateSigningRequestSpecArgs and CertificateSigningRequestSpecOutput values.
// You can construct a concrete instance of `CertificateSigningRequestSpecInput` via:
//
//	CertificateSigningRequestSpecArgs{...}
type CertificateSigningRequestSpecInput interface {
	pulumi.Input

	ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput
	ToCertificateSigningRequestSpecOutputWithContext(context.Context) CertificateSigningRequestSpecOutput
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecArgs struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request pulumi.StringInput `pulumi:"request"`
	// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
	//  1. If it's a kubelet client certificate, it is assigned
	//     "kubernetes.io/kube-apiserver-client-kubelet".
	//  2. If it's a kubelet serving certificate, it is assigned
	//     "kubernetes.io/kubelet-serving".
	//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
	//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages pulumi.StringArrayInput `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (CertificateSigningRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpec)(nil)).Elem()
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput {
	return i.ToCertificateSigningRequestSpecOutputWithContext(context.Background())
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecOutputWithContext(ctx context.Context) CertificateSigningRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecOutput)
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecPtrOutput() CertificateSigningRequestSpecPtrOutput {
	return i.ToCertificateSigningRequestSpecPtrOutputWithContext(context.Background())
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecOutput).ToCertificateSigningRequestSpecPtrOutputWithContext(ctx)
}

// CertificateSigningRequestSpecPtrInput is an input type that accepts CertificateSigningRequestSpecArgs, CertificateSigningRequestSpecPtr and CertificateSigningRequestSpecPtrOutput values.
// You can construct a concrete instance of `CertificateSigningRequestSpecPtrInput` via:
//
//	        CertificateSigningRequestSpecArgs{...}
//
//	or:
//
//	        nil
type CertificateSigningRequestSpecPtrInput interface {
	pulumi.Input

	ToCertificateSigningRequestSpecPtrOutput() CertificateSigningRequestSpecPtrOutput
	ToCertificateSigningRequestSpecPtrOutputWithContext(context.Context) CertificateSigningRequestSpecPtrOutput
}

type certificateSigningRequestSpecPtrType CertificateSigningRequestSpecArgs

func CertificateSigningRequestSpecPtr(v *CertificateSigningRequestSpecArgs) CertificateSigningRequestSpecPtrInput {
	return (*certificateSigningRequestSpecPtrType)(v)
}

func (*certificateSigningRequestSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestSpec)(nil)).Elem()
}

func (i *certificateSigningRequestSpecPtrType) ToCertificateSigningRequestSpecPtrOutput() CertificateSigningRequestSpecPtrOutput {
	return i.ToCertificateSigningRequestSpecPtrOutputWithContext(context.Background())
}

func (i *certificateSigningRequestSpecPtrType) ToCertificateSigningRequestSpecPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecPtrOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpec)(nil)).Elem()
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput {
	return o
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecOutputWithContext(ctx context.Context) CertificateSigningRequestSpecOutput {
	return o
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecPtrOutput() CertificateSigningRequestSpecPtrOutput {
	return o.ToCertificateSigningRequestSpecPtrOutputWithContext(context.Background())
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSigningRequestSpec) *CertificateSigningRequestSpec {
		return &v
	}).(CertificateSigningRequestSpecPtrOutput)
}

// Extra information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Group information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Base64-encoded PKCS#10 CSR data
func (o CertificateSigningRequestSpecOutput) Request() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) string { return v.Request }).(pulumi.StringOutput)
}

// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
//  1. If it's a kubelet client certificate, it is assigned
//     "kubernetes.io/kube-apiserver-client-kubelet".
//  2. If it's a kubelet serving certificate, it is assigned
//     "kubernetes.io/kubelet-serving".
//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
func (o CertificateSigningRequestSpecOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

// UID information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
//
//	https://tools.ietf.org/html/rfc5280#section-4.2.1.12
func (o CertificateSigningRequestSpecOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

// Information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpec) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type CertificateSigningRequestSpecPtrOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestSpec)(nil)).Elem()
}

func (o CertificateSigningRequestSpecPtrOutput) ToCertificateSigningRequestSpecPtrOutput() CertificateSigningRequestSpecPtrOutput {
	return o
}

func (o CertificateSigningRequestSpecPtrOutput) ToCertificateSigningRequestSpecPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPtrOutput {
	return o
}

func (o CertificateSigningRequestSpecPtrOutput) Elem() CertificateSigningRequestSpecOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) CertificateSigningRequestSpec {
		if v != nil {
			return *v
		}
		var ret CertificateSigningRequestSpec
		return ret
	}).(CertificateSigningRequestSpecOutput)
}

// Extra information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// Group information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// Base64-encoded PKCS#10 CSR data
func (o CertificateSigningRequestSpecPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Request
	}).(pulumi.StringPtrOutput)
}

// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
//  1. If it's a kubelet client certificate, it is assigned
//     "kubernetes.io/kube-apiserver-client-kubelet".
//  2. If it's a kubelet serving certificate, it is assigned
//     "kubernetes.io/kubelet-serving".
//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
func (o CertificateSigningRequestSpecPtrOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) *string {
		if v == nil {
			return nil
		}
		return v.SignerName
	}).(pulumi.StringPtrOutput)
}

// UID information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
//
//	https://tools.ietf.org/html/rfc5280#section-4.2.1.12
func (o CertificateSigningRequestSpecPtrOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) []string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringArrayOutput)
}

// Information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpec) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecPatch struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra map[string][]string `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups []string `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request *string `pulumi:"request"`
	// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
	//  1. If it's a kubelet client certificate, it is assigned
	//     "kubernetes.io/kube-apiserver-client-kubelet".
	//  2. If it's a kubelet serving certificate, it is assigned
	//     "kubernetes.io/kubelet-serving".
	//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
	//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
	SignerName *string `pulumi:"signerName"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid *string `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages []string `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username *string `pulumi:"username"`
}

// CertificateSigningRequestSpecPatchInput is an input type that accepts CertificateSigningRequestSpecPatchArgs and CertificateSigningRequestSpecPatchOutput values.
// You can construct a concrete instance of `CertificateSigningRequestSpecPatchInput` via:
//
//	CertificateSigningRequestSpecPatchArgs{...}
type CertificateSigningRequestSpecPatchInput interface {
	pulumi.Input

	ToCertificateSigningRequestSpecPatchOutput() CertificateSigningRequestSpecPatchOutput
	ToCertificateSigningRequestSpecPatchOutputWithContext(context.Context) CertificateSigningRequestSpecPatchOutput
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecPatchArgs struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request pulumi.StringPtrInput `pulumi:"request"`
	// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
	//  1. If it's a kubelet client certificate, it is assigned
	//     "kubernetes.io/kube-apiserver-client-kubelet".
	//  2. If it's a kubelet serving certificate, it is assigned
	//     "kubernetes.io/kubelet-serving".
	//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
	//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages pulumi.StringArrayInput `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (CertificateSigningRequestSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpecPatch)(nil)).Elem()
}

func (i CertificateSigningRequestSpecPatchArgs) ToCertificateSigningRequestSpecPatchOutput() CertificateSigningRequestSpecPatchOutput {
	return i.ToCertificateSigningRequestSpecPatchOutputWithContext(context.Background())
}

func (i CertificateSigningRequestSpecPatchArgs) ToCertificateSigningRequestSpecPatchOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecPatchOutput)
}

func (i CertificateSigningRequestSpecPatchArgs) ToCertificateSigningRequestSpecPatchPtrOutput() CertificateSigningRequestSpecPatchPtrOutput {
	return i.ToCertificateSigningRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (i CertificateSigningRequestSpecPatchArgs) ToCertificateSigningRequestSpecPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecPatchOutput).ToCertificateSigningRequestSpecPatchPtrOutputWithContext(ctx)
}

// CertificateSigningRequestSpecPatchPtrInput is an input type that accepts CertificateSigningRequestSpecPatchArgs, CertificateSigningRequestSpecPatchPtr and CertificateSigningRequestSpecPatchPtrOutput values.
// You can construct a concrete instance of `CertificateSigningRequestSpecPatchPtrInput` via:
//
//	        CertificateSigningRequestSpecPatchArgs{...}
//
//	or:
//
//	        nil
type CertificateSigningRequestSpecPatchPtrInput interface {
	pulumi.Input

	ToCertificateSigningRequestSpecPatchPtrOutput() CertificateSigningRequestSpecPatchPtrOutput
	ToCertificateSigningRequestSpecPatchPtrOutputWithContext(context.Context) CertificateSigningRequestSpecPatchPtrOutput
}

type certificateSigningRequestSpecPatchPtrType CertificateSigningRequestSpecPatchArgs

func CertificateSigningRequestSpecPatchPtr(v *CertificateSigningRequestSpecPatchArgs) CertificateSigningRequestSpecPatchPtrInput {
	return (*certificateSigningRequestSpecPatchPtrType)(v)
}

func (*certificateSigningRequestSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestSpecPatch)(nil)).Elem()
}

func (i *certificateSigningRequestSpecPatchPtrType) ToCertificateSigningRequestSpecPatchPtrOutput() CertificateSigningRequestSpecPatchPtrOutput {
	return i.ToCertificateSigningRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (i *certificateSigningRequestSpecPatchPtrType) ToCertificateSigningRequestSpecPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecPatchPtrOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecPatchOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpecPatch)(nil)).Elem()
}

func (o CertificateSigningRequestSpecPatchOutput) ToCertificateSigningRequestSpecPatchOutput() CertificateSigningRequestSpecPatchOutput {
	return o
}

func (o CertificateSigningRequestSpecPatchOutput) ToCertificateSigningRequestSpecPatchOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchOutput {
	return o
}

func (o CertificateSigningRequestSpecPatchOutput) ToCertificateSigningRequestSpecPatchPtrOutput() CertificateSigningRequestSpecPatchPtrOutput {
	return o.ToCertificateSigningRequestSpecPatchPtrOutputWithContext(context.Background())
}

func (o CertificateSigningRequestSpecPatchOutput) ToCertificateSigningRequestSpecPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSigningRequestSpecPatch) *CertificateSigningRequestSpecPatch {
		return &v
	}).(CertificateSigningRequestSpecPatchPtrOutput)
}

// Extra information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Group information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Base64-encoded PKCS#10 CSR data
func (o CertificateSigningRequestSpecPatchOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
//  1. If it's a kubelet client certificate, it is assigned
//     "kubernetes.io/kube-apiserver-client-kubelet".
//  2. If it's a kubelet serving certificate, it is assigned
//     "kubernetes.io/kubelet-serving".
//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
func (o CertificateSigningRequestSpecPatchOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

// UID information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
//
//	https://tools.ietf.org/html/rfc5280#section-4.2.1.12
func (o CertificateSigningRequestSpecPatchOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

// Information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestSpecPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type CertificateSigningRequestSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestSpecPatch)(nil)).Elem()
}

func (o CertificateSigningRequestSpecPatchPtrOutput) ToCertificateSigningRequestSpecPatchPtrOutput() CertificateSigningRequestSpecPatchPtrOutput {
	return o
}

func (o CertificateSigningRequestSpecPatchPtrOutput) ToCertificateSigningRequestSpecPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestSpecPatchPtrOutput {
	return o
}

func (o CertificateSigningRequestSpecPatchPtrOutput) Elem() CertificateSigningRequestSpecPatchOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) CertificateSigningRequestSpecPatch {
		if v != nil {
			return *v
		}
		var ret CertificateSigningRequestSpecPatch
		return ret
	}).(CertificateSigningRequestSpecPatchOutput)
}

// Extra information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchPtrOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Extra
	}).(pulumi.StringArrayMapOutput)
}

// Group information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// Base64-encoded PKCS#10 CSR data
func (o CertificateSigningRequestSpecPatchPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
//  1. If it's a kubelet client certificate, it is assigned
//     "kubernetes.io/kube-apiserver-client-kubelet".
//  2. If it's a kubelet serving certificate, it is assigned
//     "kubernetes.io/kubelet-serving".
//  3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
//     Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
func (o CertificateSigningRequestSpecPatchPtrOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SignerName
	}).(pulumi.StringPtrOutput)
}

// UID information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
//
//	https://tools.ietf.org/html/rfc5280#section-4.2.1.12
func (o CertificateSigningRequestSpecPatchPtrOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringArrayOutput)
}

// Information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type CertificateSigningRequestStatus struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate *string `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions []CertificateSigningRequestCondition `pulumi:"conditions"`
}

// CertificateSigningRequestStatusInput is an input type that accepts CertificateSigningRequestStatusArgs and CertificateSigningRequestStatusOutput values.
// You can construct a concrete instance of `CertificateSigningRequestStatusInput` via:
//
//	CertificateSigningRequestStatusArgs{...}
type CertificateSigningRequestStatusInput interface {
	pulumi.Input

	ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput
	ToCertificateSigningRequestStatusOutputWithContext(context.Context) CertificateSigningRequestStatusOutput
}

type CertificateSigningRequestStatusArgs struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions CertificateSigningRequestConditionArrayInput `pulumi:"conditions"`
}

func (CertificateSigningRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatus)(nil)).Elem()
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput {
	return i.ToCertificateSigningRequestStatusOutputWithContext(context.Background())
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusOutputWithContext(ctx context.Context) CertificateSigningRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusOutput)
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusPtrOutput() CertificateSigningRequestStatusPtrOutput {
	return i.ToCertificateSigningRequestStatusPtrOutputWithContext(context.Background())
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusOutput).ToCertificateSigningRequestStatusPtrOutputWithContext(ctx)
}

// CertificateSigningRequestStatusPtrInput is an input type that accepts CertificateSigningRequestStatusArgs, CertificateSigningRequestStatusPtr and CertificateSigningRequestStatusPtrOutput values.
// You can construct a concrete instance of `CertificateSigningRequestStatusPtrInput` via:
//
//	        CertificateSigningRequestStatusArgs{...}
//
//	or:
//
//	        nil
type CertificateSigningRequestStatusPtrInput interface {
	pulumi.Input

	ToCertificateSigningRequestStatusPtrOutput() CertificateSigningRequestStatusPtrOutput
	ToCertificateSigningRequestStatusPtrOutputWithContext(context.Context) CertificateSigningRequestStatusPtrOutput
}

type certificateSigningRequestStatusPtrType CertificateSigningRequestStatusArgs

func CertificateSigningRequestStatusPtr(v *CertificateSigningRequestStatusArgs) CertificateSigningRequestStatusPtrInput {
	return (*certificateSigningRequestStatusPtrType)(v)
}

func (*certificateSigningRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestStatus)(nil)).Elem()
}

func (i *certificateSigningRequestStatusPtrType) ToCertificateSigningRequestStatusPtrOutput() CertificateSigningRequestStatusPtrOutput {
	return i.ToCertificateSigningRequestStatusPtrOutputWithContext(context.Background())
}

func (i *certificateSigningRequestStatusPtrType) ToCertificateSigningRequestStatusPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusPtrOutput)
}

type CertificateSigningRequestStatusOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatus)(nil)).Elem()
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput {
	return o
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusOutputWithContext(ctx context.Context) CertificateSigningRequestStatusOutput {
	return o
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusPtrOutput() CertificateSigningRequestStatusPtrOutput {
	return o.ToCertificateSigningRequestStatusPtrOutputWithContext(context.Background())
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSigningRequestStatus) *CertificateSigningRequestStatus {
		return &v
	}).(CertificateSigningRequestStatusPtrOutput)
}

// If request was approved, the controller will place the issued certificate here.
func (o CertificateSigningRequestStatusOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestStatus) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Conditions applied to the request, such as approval or denial.
func (o CertificateSigningRequestStatusOutput) Conditions() CertificateSigningRequestConditionArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestStatus) []CertificateSigningRequestCondition { return v.Conditions }).(CertificateSigningRequestConditionArrayOutput)
}

type CertificateSigningRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestStatus)(nil)).Elem()
}

func (o CertificateSigningRequestStatusPtrOutput) ToCertificateSigningRequestStatusPtrOutput() CertificateSigningRequestStatusPtrOutput {
	return o
}

func (o CertificateSigningRequestStatusPtrOutput) ToCertificateSigningRequestStatusPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPtrOutput {
	return o
}

func (o CertificateSigningRequestStatusPtrOutput) Elem() CertificateSigningRequestStatusOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatus) CertificateSigningRequestStatus {
		if v != nil {
			return *v
		}
		var ret CertificateSigningRequestStatus
		return ret
	}).(CertificateSigningRequestStatusOutput)
}

// If request was approved, the controller will place the issued certificate here.
func (o CertificateSigningRequestStatusPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Conditions applied to the request, such as approval or denial.
func (o CertificateSigningRequestStatusPtrOutput) Conditions() CertificateSigningRequestConditionArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatus) []CertificateSigningRequestCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CertificateSigningRequestConditionArrayOutput)
}

type CertificateSigningRequestStatusPatch struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate *string `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions []CertificateSigningRequestConditionPatch `pulumi:"conditions"`
}

// CertificateSigningRequestStatusPatchInput is an input type that accepts CertificateSigningRequestStatusPatchArgs and CertificateSigningRequestStatusPatchOutput values.
// You can construct a concrete instance of `CertificateSigningRequestStatusPatchInput` via:
//
//	CertificateSigningRequestStatusPatchArgs{...}
type CertificateSigningRequestStatusPatchInput interface {
	pulumi.Input

	ToCertificateSigningRequestStatusPatchOutput() CertificateSigningRequestStatusPatchOutput
	ToCertificateSigningRequestStatusPatchOutputWithContext(context.Context) CertificateSigningRequestStatusPatchOutput
}

type CertificateSigningRequestStatusPatchArgs struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions CertificateSigningRequestConditionPatchArrayInput `pulumi:"conditions"`
}

func (CertificateSigningRequestStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatusPatch)(nil)).Elem()
}

func (i CertificateSigningRequestStatusPatchArgs) ToCertificateSigningRequestStatusPatchOutput() CertificateSigningRequestStatusPatchOutput {
	return i.ToCertificateSigningRequestStatusPatchOutputWithContext(context.Background())
}

func (i CertificateSigningRequestStatusPatchArgs) ToCertificateSigningRequestStatusPatchOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusPatchOutput)
}

func (i CertificateSigningRequestStatusPatchArgs) ToCertificateSigningRequestStatusPatchPtrOutput() CertificateSigningRequestStatusPatchPtrOutput {
	return i.ToCertificateSigningRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (i CertificateSigningRequestStatusPatchArgs) ToCertificateSigningRequestStatusPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusPatchOutput).ToCertificateSigningRequestStatusPatchPtrOutputWithContext(ctx)
}

// CertificateSigningRequestStatusPatchPtrInput is an input type that accepts CertificateSigningRequestStatusPatchArgs, CertificateSigningRequestStatusPatchPtr and CertificateSigningRequestStatusPatchPtrOutput values.
// You can construct a concrete instance of `CertificateSigningRequestStatusPatchPtrInput` via:
//
//	        CertificateSigningRequestStatusPatchArgs{...}
//
//	or:
//
//	        nil
type CertificateSigningRequestStatusPatchPtrInput interface {
	pulumi.Input

	ToCertificateSigningRequestStatusPatchPtrOutput() CertificateSigningRequestStatusPatchPtrOutput
	ToCertificateSigningRequestStatusPatchPtrOutputWithContext(context.Context) CertificateSigningRequestStatusPatchPtrOutput
}

type certificateSigningRequestStatusPatchPtrType CertificateSigningRequestStatusPatchArgs

func CertificateSigningRequestStatusPatchPtr(v *CertificateSigningRequestStatusPatchArgs) CertificateSigningRequestStatusPatchPtrInput {
	return (*certificateSigningRequestStatusPatchPtrType)(v)
}

func (*certificateSigningRequestStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestStatusPatch)(nil)).Elem()
}

func (i *certificateSigningRequestStatusPatchPtrType) ToCertificateSigningRequestStatusPatchPtrOutput() CertificateSigningRequestStatusPatchPtrOutput {
	return i.ToCertificateSigningRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (i *certificateSigningRequestStatusPatchPtrType) ToCertificateSigningRequestStatusPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusPatchPtrOutput)
}

type CertificateSigningRequestStatusPatchOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatusPatch)(nil)).Elem()
}

func (o CertificateSigningRequestStatusPatchOutput) ToCertificateSigningRequestStatusPatchOutput() CertificateSigningRequestStatusPatchOutput {
	return o
}

func (o CertificateSigningRequestStatusPatchOutput) ToCertificateSigningRequestStatusPatchOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchOutput {
	return o
}

func (o CertificateSigningRequestStatusPatchOutput) ToCertificateSigningRequestStatusPatchPtrOutput() CertificateSigningRequestStatusPatchPtrOutput {
	return o.ToCertificateSigningRequestStatusPatchPtrOutputWithContext(context.Background())
}

func (o CertificateSigningRequestStatusPatchOutput) ToCertificateSigningRequestStatusPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSigningRequestStatusPatch) *CertificateSigningRequestStatusPatch {
		return &v
	}).(CertificateSigningRequestStatusPatchPtrOutput)
}

// If request was approved, the controller will place the issued certificate here.
func (o CertificateSigningRequestStatusPatchOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSigningRequestStatusPatch) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Conditions applied to the request, such as approval or denial.
func (o CertificateSigningRequestStatusPatchOutput) Conditions() CertificateSigningRequestConditionPatchArrayOutput {
	return o.ApplyT(func(v CertificateSigningRequestStatusPatch) []CertificateSigningRequestConditionPatch {
		return v.Conditions
	}).(CertificateSigningRequestConditionPatchArrayOutput)
}

type CertificateSigningRequestStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (CertificateSigningRequestStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSigningRequestStatusPatch)(nil)).Elem()
}

func (o CertificateSigningRequestStatusPatchPtrOutput) ToCertificateSigningRequestStatusPatchPtrOutput() CertificateSigningRequestStatusPatchPtrOutput {
	return o
}

func (o CertificateSigningRequestStatusPatchPtrOutput) ToCertificateSigningRequestStatusPatchPtrOutputWithContext(ctx context.Context) CertificateSigningRequestStatusPatchPtrOutput {
	return o
}

func (o CertificateSigningRequestStatusPatchPtrOutput) Elem() CertificateSigningRequestStatusPatchOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatusPatch) CertificateSigningRequestStatusPatch {
		if v != nil {
			return *v
		}
		var ret CertificateSigningRequestStatusPatch
		return ret
	}).(CertificateSigningRequestStatusPatchOutput)
}

// If request was approved, the controller will place the issued certificate here.
func (o CertificateSigningRequestStatusPatchPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Conditions applied to the request, such as approval or denial.
func (o CertificateSigningRequestStatusPatchPtrOutput) Conditions() CertificateSigningRequestConditionPatchArrayOutput {
	return o.ApplyT(func(v *CertificateSigningRequestStatusPatch) []CertificateSigningRequestConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CertificateSigningRequestConditionPatchArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestTypeInput)(nil)).Elem(), CertificateSigningRequestTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestTypeArrayInput)(nil)).Elem(), CertificateSigningRequestTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestConditionInput)(nil)).Elem(), CertificateSigningRequestConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestConditionArrayInput)(nil)).Elem(), CertificateSigningRequestConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestConditionPatchInput)(nil)).Elem(), CertificateSigningRequestConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestConditionPatchArrayInput)(nil)).Elem(), CertificateSigningRequestConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestListTypeInput)(nil)).Elem(), CertificateSigningRequestListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestPatchTypeInput)(nil)).Elem(), CertificateSigningRequestPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestSpecInput)(nil)).Elem(), CertificateSigningRequestSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestSpecPtrInput)(nil)).Elem(), CertificateSigningRequestSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestSpecPatchInput)(nil)).Elem(), CertificateSigningRequestSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestSpecPatchPtrInput)(nil)).Elem(), CertificateSigningRequestSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestStatusInput)(nil)).Elem(), CertificateSigningRequestStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestStatusPtrInput)(nil)).Elem(), CertificateSigningRequestStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestStatusPatchInput)(nil)).Elem(), CertificateSigningRequestStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSigningRequestStatusPatchPtrInput)(nil)).Elem(), CertificateSigningRequestStatusPatchArgs{})
	pulumi.RegisterOutputType(CertificateSigningRequestTypeOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestTypeArrayOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestConditionOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestConditionArrayOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestConditionPatchOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestListTypeOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestPatchTypeOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestSpecOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestSpecPtrOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestSpecPatchOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestStatusOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestStatusPatchOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestStatusPatchPtrOutput{})
}
