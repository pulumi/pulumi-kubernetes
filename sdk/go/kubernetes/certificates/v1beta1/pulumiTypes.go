// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CertificateSigningRequestCondition struct {
	// timestamp for the last update to this condition
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message *string `pulumi:"message"`
	// brief reason for the request state
	Reason *string `pulumi:"reason"`
	// request approval state, currently Approved or Denied.
	Type *string `pulumi:"type"`
}

type CertificateSigningRequestConditionInput interface {
	pulumi.Input

	ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput
	ToCertificateSigningRequestConditionOutputWithContext(context.Context) CertificateSigningRequestConditionOutput
}

type CertificateSigningRequestConditionArgs struct {
	// timestamp for the last update to this condition
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// human readable message with details about the request state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// brief reason for the request state
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// request approval state, currently Approved or Denied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CertificateSigningRequestConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestCondition)(nil)).Elem()
}

func (i CertificateSigningRequestConditionArgs) ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput {
	return i.ToCertificateSigningRequestConditionOutputWithContext(context.Background())
}

func (i CertificateSigningRequestConditionArgs) ToCertificateSigningRequestConditionOutputWithContext(ctx context.Context) CertificateSigningRequestConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestConditionOutput)
}

type CertificateSigningRequestConditionOutput struct { *pulumi.OutputState }

func (CertificateSigningRequestConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestCondition)(nil)).Elem()
}

func (o CertificateSigningRequestConditionOutput) ToCertificateSigningRequestConditionOutput() CertificateSigningRequestConditionOutput {
	return o
}

func (o CertificateSigningRequestConditionOutput) ToCertificateSigningRequestConditionOutputWithContext(ctx context.Context) CertificateSigningRequestConditionOutput {
	return o
}

// timestamp for the last update to this condition
func (o CertificateSigningRequestConditionOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestCondition) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// human readable message with details about the request state
func (o CertificateSigningRequestConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// brief reason for the request state
func (o CertificateSigningRequestConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// request approval state, currently Approved or Denied.
func (o CertificateSigningRequestConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpec struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra map[string][]string `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups []string `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request *string `pulumi:"request"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid *string `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages []string `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username *string `pulumi:"username"`
}

type CertificateSigningRequestSpecInput interface {
	pulumi.Input

	ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput
	ToCertificateSigningRequestSpecOutputWithContext(context.Context) CertificateSigningRequestSpecOutput
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecArgs struct {
	// Extra information about the requesting user. See user.Info interface for details.
	Extra pulumi.StringArrayMapInput `pulumi:"extra"`
	// Group information about the requesting user. See user.Info interface for details.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Base64-encoded PKCS#10 CSR data
	Request pulumi.StringPtrInput `pulumi:"request"`
	// UID information about the requesting user. See user.Info interface for details.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
	Usages pulumi.StringArrayInput `pulumi:"usages"`
	// Information about the requesting user. See user.Info interface for details.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (CertificateSigningRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpec)(nil)).Elem()
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput {
	return i.ToCertificateSigningRequestSpecOutputWithContext(context.Background())
}

func (i CertificateSigningRequestSpecArgs) ToCertificateSigningRequestSpecOutputWithContext(ctx context.Context) CertificateSigningRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestSpecOutput)
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
type CertificateSigningRequestSpecOutput struct { *pulumi.OutputState }

func (CertificateSigningRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestSpec)(nil)).Elem()
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecOutput() CertificateSigningRequestSpecOutput {
	return o
}

func (o CertificateSigningRequestSpecOutput) ToCertificateSigningRequestSpecOutputWithContext(ctx context.Context) CertificateSigningRequestSpecOutput {
	return o
}

// Extra information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Extra() pulumi.StringArrayMapOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) map[string][]string { return v.Extra }).(pulumi.StringArrayMapOutput)
}

// Group information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Base64-encoded PKCS#10 CSR data
func (o CertificateSigningRequestSpecOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// UID information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
func (o CertificateSigningRequestSpecOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

// Information about the requesting user. See user.Info interface for details.
func (o CertificateSigningRequestSpecOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestSpec) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type CertificateSigningRequestStatus struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate *string `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions []CertificateSigningRequestCondition `pulumi:"conditions"`
}

type CertificateSigningRequestStatusInput interface {
	pulumi.Input

	ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput
	ToCertificateSigningRequestStatusOutputWithContext(context.Context) CertificateSigningRequestStatusOutput
}

type CertificateSigningRequestStatusArgs struct {
	// If request was approved, the controller will place the issued certificate here.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Conditions applied to the request, such as approval or denial.
	Conditions CertificateSigningRequestConditionArrayInput `pulumi:"conditions"`
}

func (CertificateSigningRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatus)(nil)).Elem()
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput {
	return i.ToCertificateSigningRequestStatusOutputWithContext(context.Background())
}

func (i CertificateSigningRequestStatusArgs) ToCertificateSigningRequestStatusOutputWithContext(ctx context.Context) CertificateSigningRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSigningRequestStatusOutput)
}

type CertificateSigningRequestStatusOutput struct { *pulumi.OutputState }

func (CertificateSigningRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSigningRequestStatus)(nil)).Elem()
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusOutput() CertificateSigningRequestStatusOutput {
	return o
}

func (o CertificateSigningRequestStatusOutput) ToCertificateSigningRequestStatusOutputWithContext(ctx context.Context) CertificateSigningRequestStatusOutput {
	return o
}

// If request was approved, the controller will place the issued certificate here.
func (o CertificateSigningRequestStatusOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSigningRequestStatus) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Conditions applied to the request, such as approval or denial.
func (o CertificateSigningRequestStatusOutput) Conditions() CertificateSigningRequestConditionArrayOutput {
	return o.ApplyT(func (v CertificateSigningRequestStatus) []CertificateSigningRequestCondition { return v.Conditions }).(CertificateSigningRequestConditionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateSigningRequestConditionOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestSpecOutput{})
	pulumi.RegisterOutputType(CertificateSigningRequestStatusOutput{})
}
