// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriver struct {
	// Name is the registered name of the CSI driver
	Name string `pulumi:"name"`
}

// AllowedCSIDriverInput is an input type that accepts AllowedCSIDriverArgs and AllowedCSIDriverOutput values.
// You can construct a concrete instance of `AllowedCSIDriverInput` via:
//
// 		 AllowedCSIDriverArgs{...}
//
type AllowedCSIDriverInput interface {
	pulumi.Input

	ToAllowedCSIDriverOutput() AllowedCSIDriverOutput
	ToAllowedCSIDriverOutputWithContext(context.Context) AllowedCSIDriverOutput
}

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriverArgs struct {
	// Name is the registered name of the CSI driver
	Name pulumi.StringInput `pulumi:"name"`
}

func (AllowedCSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedCSIDriver)(nil)).Elem()
}

func (i AllowedCSIDriverArgs) ToAllowedCSIDriverOutput() AllowedCSIDriverOutput {
	return i.ToAllowedCSIDriverOutputWithContext(context.Background())
}

func (i AllowedCSIDriverArgs) ToAllowedCSIDriverOutputWithContext(ctx context.Context) AllowedCSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedCSIDriverOutput)
}

// AllowedCSIDriverArrayInput is an input type that accepts AllowedCSIDriverArray and AllowedCSIDriverArrayOutput values.
// You can construct a concrete instance of `AllowedCSIDriverArrayInput` via:
//
// 		 AllowedCSIDriverArray{ AllowedCSIDriverArgs{...} }
//
type AllowedCSIDriverArrayInput interface {
	pulumi.Input

	ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput
	ToAllowedCSIDriverArrayOutputWithContext(context.Context) AllowedCSIDriverArrayOutput
}

type AllowedCSIDriverArray []AllowedCSIDriverInput

func (AllowedCSIDriverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedCSIDriver)(nil)).Elem()
}

func (i AllowedCSIDriverArray) ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput {
	return i.ToAllowedCSIDriverArrayOutputWithContext(context.Background())
}

func (i AllowedCSIDriverArray) ToAllowedCSIDriverArrayOutputWithContext(ctx context.Context) AllowedCSIDriverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedCSIDriverArrayOutput)
}

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
type AllowedCSIDriverOutput struct{ *pulumi.OutputState }

func (AllowedCSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedCSIDriver)(nil)).Elem()
}

func (o AllowedCSIDriverOutput) ToAllowedCSIDriverOutput() AllowedCSIDriverOutput {
	return o
}

func (o AllowedCSIDriverOutput) ToAllowedCSIDriverOutputWithContext(ctx context.Context) AllowedCSIDriverOutput {
	return o
}

// Name is the registered name of the CSI driver
func (o AllowedCSIDriverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedCSIDriver) string { return v.Name }).(pulumi.StringOutput)
}

type AllowedCSIDriverArrayOutput struct{ *pulumi.OutputState }

func (AllowedCSIDriverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedCSIDriver)(nil)).Elem()
}

func (o AllowedCSIDriverArrayOutput) ToAllowedCSIDriverArrayOutput() AllowedCSIDriverArrayOutput {
	return o
}

func (o AllowedCSIDriverArrayOutput) ToAllowedCSIDriverArrayOutputWithContext(ctx context.Context) AllowedCSIDriverArrayOutput {
	return o
}

func (o AllowedCSIDriverArrayOutput) Index(i pulumi.IntInput) AllowedCSIDriverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedCSIDriver {
		return vs[0].([]AllowedCSIDriver)[vs[1].(int)]
	}).(AllowedCSIDriverOutput)
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
type AllowedFlexVolume struct {
	// driver is the name of the Flexvolume driver.
	Driver string `pulumi:"driver"`
}

// AllowedFlexVolumeInput is an input type that accepts AllowedFlexVolumeArgs and AllowedFlexVolumeOutput values.
// You can construct a concrete instance of `AllowedFlexVolumeInput` via:
//
// 		 AllowedFlexVolumeArgs{...}
//
type AllowedFlexVolumeInput interface {
	pulumi.Input

	ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput
	ToAllowedFlexVolumeOutputWithContext(context.Context) AllowedFlexVolumeOutput
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
type AllowedFlexVolumeArgs struct {
	// driver is the name of the Flexvolume driver.
	Driver pulumi.StringInput `pulumi:"driver"`
}

func (AllowedFlexVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedFlexVolume)(nil)).Elem()
}

func (i AllowedFlexVolumeArgs) ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput {
	return i.ToAllowedFlexVolumeOutputWithContext(context.Background())
}

func (i AllowedFlexVolumeArgs) ToAllowedFlexVolumeOutputWithContext(ctx context.Context) AllowedFlexVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedFlexVolumeOutput)
}

// AllowedFlexVolumeArrayInput is an input type that accepts AllowedFlexVolumeArray and AllowedFlexVolumeArrayOutput values.
// You can construct a concrete instance of `AllowedFlexVolumeArrayInput` via:
//
// 		 AllowedFlexVolumeArray{ AllowedFlexVolumeArgs{...} }
//
type AllowedFlexVolumeArrayInput interface {
	pulumi.Input

	ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput
	ToAllowedFlexVolumeArrayOutputWithContext(context.Context) AllowedFlexVolumeArrayOutput
}

type AllowedFlexVolumeArray []AllowedFlexVolumeInput

func (AllowedFlexVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedFlexVolume)(nil)).Elem()
}

func (i AllowedFlexVolumeArray) ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput {
	return i.ToAllowedFlexVolumeArrayOutputWithContext(context.Background())
}

func (i AllowedFlexVolumeArray) ToAllowedFlexVolumeArrayOutputWithContext(ctx context.Context) AllowedFlexVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedFlexVolumeArrayOutput)
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
type AllowedFlexVolumeOutput struct{ *pulumi.OutputState }

func (AllowedFlexVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedFlexVolume)(nil)).Elem()
}

func (o AllowedFlexVolumeOutput) ToAllowedFlexVolumeOutput() AllowedFlexVolumeOutput {
	return o
}

func (o AllowedFlexVolumeOutput) ToAllowedFlexVolumeOutputWithContext(ctx context.Context) AllowedFlexVolumeOutput {
	return o
}

// driver is the name of the Flexvolume driver.
func (o AllowedFlexVolumeOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedFlexVolume) string { return v.Driver }).(pulumi.StringOutput)
}

type AllowedFlexVolumeArrayOutput struct{ *pulumi.OutputState }

func (AllowedFlexVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedFlexVolume)(nil)).Elem()
}

func (o AllowedFlexVolumeArrayOutput) ToAllowedFlexVolumeArrayOutput() AllowedFlexVolumeArrayOutput {
	return o
}

func (o AllowedFlexVolumeArrayOutput) ToAllowedFlexVolumeArrayOutputWithContext(ctx context.Context) AllowedFlexVolumeArrayOutput {
	return o
}

func (o AllowedFlexVolumeArrayOutput) Index(i pulumi.IntInput) AllowedFlexVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedFlexVolume {
		return vs[0].([]AllowedFlexVolume)[vs[1].(int)]
	}).(AllowedFlexVolumeOutput)
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
type AllowedHostPath struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
	//
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
	PathPrefix *string `pulumi:"pathPrefix"`
	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AllowedHostPathInput is an input type that accepts AllowedHostPathArgs and AllowedHostPathOutput values.
// You can construct a concrete instance of `AllowedHostPathInput` via:
//
// 		 AllowedHostPathArgs{...}
//
type AllowedHostPathInput interface {
	pulumi.Input

	ToAllowedHostPathOutput() AllowedHostPathOutput
	ToAllowedHostPathOutputWithContext(context.Context) AllowedHostPathOutput
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
type AllowedHostPathArgs struct {
	// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
	//
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
	PathPrefix pulumi.StringPtrInput `pulumi:"pathPrefix"`
	// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AllowedHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedHostPath)(nil)).Elem()
}

func (i AllowedHostPathArgs) ToAllowedHostPathOutput() AllowedHostPathOutput {
	return i.ToAllowedHostPathOutputWithContext(context.Background())
}

func (i AllowedHostPathArgs) ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedHostPathOutput)
}

// AllowedHostPathArrayInput is an input type that accepts AllowedHostPathArray and AllowedHostPathArrayOutput values.
// You can construct a concrete instance of `AllowedHostPathArrayInput` via:
//
// 		 AllowedHostPathArray{ AllowedHostPathArgs{...} }
//
type AllowedHostPathArrayInput interface {
	pulumi.Input

	ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput
	ToAllowedHostPathArrayOutputWithContext(context.Context) AllowedHostPathArrayOutput
}

type AllowedHostPathArray []AllowedHostPathInput

func (AllowedHostPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedHostPath)(nil)).Elem()
}

func (i AllowedHostPathArray) ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput {
	return i.ToAllowedHostPathArrayOutputWithContext(context.Background())
}

func (i AllowedHostPathArray) ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedHostPathArrayOutput)
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
type AllowedHostPathOutput struct{ *pulumi.OutputState }

func (AllowedHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedHostPath)(nil)).Elem()
}

func (o AllowedHostPathOutput) ToAllowedHostPathOutput() AllowedHostPathOutput {
	return o
}

func (o AllowedHostPathOutput) ToAllowedHostPathOutputWithContext(ctx context.Context) AllowedHostPathOutput {
	return o
}

// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
//
// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
func (o AllowedHostPathOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedHostPath) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
func (o AllowedHostPathOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedHostPath) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AllowedHostPathArrayOutput struct{ *pulumi.OutputState }

func (AllowedHostPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedHostPath)(nil)).Elem()
}

func (o AllowedHostPathArrayOutput) ToAllowedHostPathArrayOutput() AllowedHostPathArrayOutput {
	return o
}

func (o AllowedHostPathArrayOutput) ToAllowedHostPathArrayOutputWithContext(ctx context.Context) AllowedHostPathArrayOutput {
	return o
}

func (o AllowedHostPathArrayOutput) Index(i pulumi.IntInput) AllowedHostPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedHostPath {
		return vs[0].([]AllowedHostPath)[vs[1].(int)]
	}).(AllowedHostPathOutput)
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type Eviction struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DeleteOptions may be provided
	DeleteOptions *metav1.DeleteOptions `pulumi:"deleteOptions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// ObjectMeta describes the pod that is being evicted.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// EvictionInput is an input type that accepts EvictionArgs and EvictionOutput values.
// You can construct a concrete instance of `EvictionInput` via:
//
// 		 EvictionArgs{...}
//
type EvictionInput interface {
	pulumi.Input

	ToEvictionOutput() EvictionOutput
	ToEvictionOutputWithContext(context.Context) EvictionOutput
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type EvictionArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DeleteOptions may be provided
	DeleteOptions metav1.DeleteOptionsPtrInput `pulumi:"deleteOptions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// ObjectMeta describes the pod that is being evicted.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
}

func (EvictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Eviction)(nil)).Elem()
}

func (i EvictionArgs) ToEvictionOutput() EvictionOutput {
	return i.ToEvictionOutputWithContext(context.Background())
}

func (i EvictionArgs) ToEvictionOutputWithContext(ctx context.Context) EvictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionOutput)
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type EvictionOutput struct{ *pulumi.OutputState }

func (EvictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Eviction)(nil)).Elem()
}

func (o EvictionOutput) ToEvictionOutput() EvictionOutput {
	return o
}

func (o EvictionOutput) ToEvictionOutputWithContext(ctx context.Context) EvictionOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EvictionOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Eviction) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DeleteOptions may be provided
func (o EvictionOutput) DeleteOptions() metav1.DeleteOptionsPtrOutput {
	return o.ApplyT(func(v Eviction) *metav1.DeleteOptions { return v.DeleteOptions }).(metav1.DeleteOptionsPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EvictionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Eviction) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// ObjectMeta describes the pod that is being evicted.
func (o EvictionOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Eviction) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
type FSGroupStrategyOptions struct {
	// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	Rule *string `pulumi:"rule"`
}

// FSGroupStrategyOptionsInput is an input type that accepts FSGroupStrategyOptionsArgs and FSGroupStrategyOptionsOutput values.
// You can construct a concrete instance of `FSGroupStrategyOptionsInput` via:
//
// 		 FSGroupStrategyOptionsArgs{...}
//
type FSGroupStrategyOptionsInput interface {
	pulumi.Input

	ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput
	ToFSGroupStrategyOptionsOutputWithContext(context.Context) FSGroupStrategyOptionsOutput
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
type FSGroupStrategyOptionsArgs struct {
	// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (FSGroupStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FSGroupStrategyOptions)(nil)).Elem()
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput {
	return i.ToFSGroupStrategyOptionsOutputWithContext(context.Background())
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsOutputWithContext(ctx context.Context) FSGroupStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsOutput)
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return i.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i FSGroupStrategyOptionsArgs) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsOutput).ToFSGroupStrategyOptionsPtrOutputWithContext(ctx)
}

// FSGroupStrategyOptionsPtrInput is an input type that accepts FSGroupStrategyOptionsArgs, FSGroupStrategyOptionsPtr and FSGroupStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `FSGroupStrategyOptionsPtrInput` via:
//
// 		 FSGroupStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type FSGroupStrategyOptionsPtrInput interface {
	pulumi.Input

	ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput
	ToFSGroupStrategyOptionsPtrOutputWithContext(context.Context) FSGroupStrategyOptionsPtrOutput
}

type fsgroupStrategyOptionsPtrType FSGroupStrategyOptionsArgs

func FSGroupStrategyOptionsPtr(v *FSGroupStrategyOptionsArgs) FSGroupStrategyOptionsPtrInput {
	return (*fsgroupStrategyOptionsPtrType)(v)
}

func (*fsgroupStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FSGroupStrategyOptions)(nil)).Elem()
}

func (i *fsgroupStrategyOptionsPtrType) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return i.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *fsgroupStrategyOptionsPtrType) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSGroupStrategyOptionsPtrOutput)
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
type FSGroupStrategyOptionsOutput struct{ *pulumi.OutputState }

func (FSGroupStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FSGroupStrategyOptions)(nil)).Elem()
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsOutput() FSGroupStrategyOptionsOutput {
	return o
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsOutputWithContext(ctx context.Context) FSGroupStrategyOptionsOutput {
	return o
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return o.ToFSGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o FSGroupStrategyOptionsOutput) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) *FSGroupStrategyOptions {
		return &v
	}).(FSGroupStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
func (o FSGroupStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
func (o FSGroupStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FSGroupStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type FSGroupStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (FSGroupStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FSGroupStrategyOptions)(nil)).Elem()
}

func (o FSGroupStrategyOptionsPtrOutput) ToFSGroupStrategyOptionsPtrOutput() FSGroupStrategyOptionsPtrOutput {
	return o
}

func (o FSGroupStrategyOptionsPtrOutput) ToFSGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) FSGroupStrategyOptionsPtrOutput {
	return o
}

func (o FSGroupStrategyOptionsPtrOutput) Elem() FSGroupStrategyOptionsOutput {
	return o.ApplyT(func(v *FSGroupStrategyOptions) FSGroupStrategyOptions { return *v }).(FSGroupStrategyOptionsOutput)
}

// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
func (o FSGroupStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v *FSGroupStrategyOptions) []IDRange {
		if v == nil {
			return nil
		}
		return v.Ranges
	}).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
func (o FSGroupStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FSGroupStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return v.Rule
	}).(pulumi.StringPtrOutput)
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
type HostPortRange struct {
	// max is the end of the range, inclusive.
	Max int `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min int `pulumi:"min"`
}

// HostPortRangeInput is an input type that accepts HostPortRangeArgs and HostPortRangeOutput values.
// You can construct a concrete instance of `HostPortRangeInput` via:
//
// 		 HostPortRangeArgs{...}
//
type HostPortRangeInput interface {
	pulumi.Input

	ToHostPortRangeOutput() HostPortRangeOutput
	ToHostPortRangeOutputWithContext(context.Context) HostPortRangeOutput
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
type HostPortRangeArgs struct {
	// max is the end of the range, inclusive.
	Max pulumi.IntInput `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min pulumi.IntInput `pulumi:"min"`
}

func (HostPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortRange)(nil)).Elem()
}

func (i HostPortRangeArgs) ToHostPortRangeOutput() HostPortRangeOutput {
	return i.ToHostPortRangeOutputWithContext(context.Background())
}

func (i HostPortRangeArgs) ToHostPortRangeOutputWithContext(ctx context.Context) HostPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortRangeOutput)
}

// HostPortRangeArrayInput is an input type that accepts HostPortRangeArray and HostPortRangeArrayOutput values.
// You can construct a concrete instance of `HostPortRangeArrayInput` via:
//
// 		 HostPortRangeArray{ HostPortRangeArgs{...} }
//
type HostPortRangeArrayInput interface {
	pulumi.Input

	ToHostPortRangeArrayOutput() HostPortRangeArrayOutput
	ToHostPortRangeArrayOutputWithContext(context.Context) HostPortRangeArrayOutput
}

type HostPortRangeArray []HostPortRangeInput

func (HostPortRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPortRange)(nil)).Elem()
}

func (i HostPortRangeArray) ToHostPortRangeArrayOutput() HostPortRangeArrayOutput {
	return i.ToHostPortRangeArrayOutputWithContext(context.Background())
}

func (i HostPortRangeArray) ToHostPortRangeArrayOutputWithContext(ctx context.Context) HostPortRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortRangeArrayOutput)
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
type HostPortRangeOutput struct{ *pulumi.OutputState }

func (HostPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortRange)(nil)).Elem()
}

func (o HostPortRangeOutput) ToHostPortRangeOutput() HostPortRangeOutput {
	return o
}

func (o HostPortRangeOutput) ToHostPortRangeOutputWithContext(ctx context.Context) HostPortRangeOutput {
	return o
}

// max is the end of the range, inclusive.
func (o HostPortRangeOutput) Max() pulumi.IntOutput {
	return o.ApplyT(func(v HostPortRange) int { return v.Max }).(pulumi.IntOutput)
}

// min is the start of the range, inclusive.
func (o HostPortRangeOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v HostPortRange) int { return v.Min }).(pulumi.IntOutput)
}

type HostPortRangeArrayOutput struct{ *pulumi.OutputState }

func (HostPortRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPortRange)(nil)).Elem()
}

func (o HostPortRangeArrayOutput) ToHostPortRangeArrayOutput() HostPortRangeArrayOutput {
	return o
}

func (o HostPortRangeArrayOutput) ToHostPortRangeArrayOutputWithContext(ctx context.Context) HostPortRangeArrayOutput {
	return o
}

func (o HostPortRangeArrayOutput) Index(i pulumi.IntInput) HostPortRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostPortRange {
		return vs[0].([]HostPortRange)[vs[1].(int)]
	}).(HostPortRangeOutput)
}

// IDRange provides a min/max of an allowed range of IDs.
type IDRange struct {
	// max is the end of the range, inclusive.
	Max int `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min int `pulumi:"min"`
}

// IDRangeInput is an input type that accepts IDRangeArgs and IDRangeOutput values.
// You can construct a concrete instance of `IDRangeInput` via:
//
// 		 IDRangeArgs{...}
//
type IDRangeInput interface {
	pulumi.Input

	ToIDRangeOutput() IDRangeOutput
	ToIDRangeOutputWithContext(context.Context) IDRangeOutput
}

// IDRange provides a min/max of an allowed range of IDs.
type IDRangeArgs struct {
	// max is the end of the range, inclusive.
	Max pulumi.IntInput `pulumi:"max"`
	// min is the start of the range, inclusive.
	Min pulumi.IntInput `pulumi:"min"`
}

func (IDRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IDRange)(nil)).Elem()
}

func (i IDRangeArgs) ToIDRangeOutput() IDRangeOutput {
	return i.ToIDRangeOutputWithContext(context.Background())
}

func (i IDRangeArgs) ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IDRangeOutput)
}

// IDRangeArrayInput is an input type that accepts IDRangeArray and IDRangeArrayOutput values.
// You can construct a concrete instance of `IDRangeArrayInput` via:
//
// 		 IDRangeArray{ IDRangeArgs{...} }
//
type IDRangeArrayInput interface {
	pulumi.Input

	ToIDRangeArrayOutput() IDRangeArrayOutput
	ToIDRangeArrayOutputWithContext(context.Context) IDRangeArrayOutput
}

type IDRangeArray []IDRangeInput

func (IDRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IDRange)(nil)).Elem()
}

func (i IDRangeArray) ToIDRangeArrayOutput() IDRangeArrayOutput {
	return i.ToIDRangeArrayOutputWithContext(context.Background())
}

func (i IDRangeArray) ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IDRangeArrayOutput)
}

// IDRange provides a min/max of an allowed range of IDs.
type IDRangeOutput struct{ *pulumi.OutputState }

func (IDRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IDRange)(nil)).Elem()
}

func (o IDRangeOutput) ToIDRangeOutput() IDRangeOutput {
	return o
}

func (o IDRangeOutput) ToIDRangeOutputWithContext(ctx context.Context) IDRangeOutput {
	return o
}

// max is the end of the range, inclusive.
func (o IDRangeOutput) Max() pulumi.IntOutput {
	return o.ApplyT(func(v IDRange) int { return v.Max }).(pulumi.IntOutput)
}

// min is the start of the range, inclusive.
func (o IDRangeOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v IDRange) int { return v.Min }).(pulumi.IntOutput)
}

type IDRangeArrayOutput struct{ *pulumi.OutputState }

func (IDRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IDRange)(nil)).Elem()
}

func (o IDRangeArrayOutput) ToIDRangeArrayOutput() IDRangeArrayOutput {
	return o
}

func (o IDRangeArrayOutput) ToIDRangeArrayOutputWithContext(ctx context.Context) IDRangeArrayOutput {
	return o
}

func (o IDRangeArrayOutput) Index(i pulumi.IntInput) IDRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IDRange {
		return vs[0].([]IDRange)[vs[1].(int)]
	}).(IDRangeOutput)
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type PodDisruptionBudgetType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the PodDisruptionBudget.
	Spec *PodDisruptionBudgetSpec `pulumi:"spec"`
	// Most recently observed status of the PodDisruptionBudget.
	Status *PodDisruptionBudgetStatus `pulumi:"status"`
}

// PodDisruptionBudgetTypeInput is an input type that accepts PodDisruptionBudgetTypeArgs and PodDisruptionBudgetTypeOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetTypeInput` via:
//
// 		 PodDisruptionBudgetTypeArgs{...}
//
type PodDisruptionBudgetTypeInput interface {
	pulumi.Input

	ToPodDisruptionBudgetTypeOutput() PodDisruptionBudgetTypeOutput
	ToPodDisruptionBudgetTypeOutputWithContext(context.Context) PodDisruptionBudgetTypeOutput
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type PodDisruptionBudgetTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the PodDisruptionBudget.
	Spec PodDisruptionBudgetSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the PodDisruptionBudget.
	Status PodDisruptionBudgetStatusPtrInput `pulumi:"status"`
}

func (PodDisruptionBudgetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetType)(nil)).Elem()
}

func (i PodDisruptionBudgetTypeArgs) ToPodDisruptionBudgetTypeOutput() PodDisruptionBudgetTypeOutput {
	return i.ToPodDisruptionBudgetTypeOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetTypeArgs) ToPodDisruptionBudgetTypeOutputWithContext(ctx context.Context) PodDisruptionBudgetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetTypeOutput)
}

// PodDisruptionBudgetTypeArrayInput is an input type that accepts PodDisruptionBudgetTypeArray and PodDisruptionBudgetTypeArrayOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetTypeArrayInput` via:
//
// 		 PodDisruptionBudgetTypeArray{ PodDisruptionBudgetTypeArgs{...} }
//
type PodDisruptionBudgetTypeArrayInput interface {
	pulumi.Input

	ToPodDisruptionBudgetTypeArrayOutput() PodDisruptionBudgetTypeArrayOutput
	ToPodDisruptionBudgetTypeArrayOutputWithContext(context.Context) PodDisruptionBudgetTypeArrayOutput
}

type PodDisruptionBudgetTypeArray []PodDisruptionBudgetTypeInput

func (PodDisruptionBudgetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDisruptionBudgetType)(nil)).Elem()
}

func (i PodDisruptionBudgetTypeArray) ToPodDisruptionBudgetTypeArrayOutput() PodDisruptionBudgetTypeArrayOutput {
	return i.ToPodDisruptionBudgetTypeArrayOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetTypeArray) ToPodDisruptionBudgetTypeArrayOutputWithContext(ctx context.Context) PodDisruptionBudgetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetTypeArrayOutput)
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type PodDisruptionBudgetTypeOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetType)(nil)).Elem()
}

func (o PodDisruptionBudgetTypeOutput) ToPodDisruptionBudgetTypeOutput() PodDisruptionBudgetTypeOutput {
	return o
}

func (o PodDisruptionBudgetTypeOutput) ToPodDisruptionBudgetTypeOutputWithContext(ctx context.Context) PodDisruptionBudgetTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodDisruptionBudgetTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodDisruptionBudgetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PodDisruptionBudgetTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the PodDisruptionBudget.
func (o PodDisruptionBudgetTypeOutput) Spec() PodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetType) *PodDisruptionBudgetSpec { return v.Spec }).(PodDisruptionBudgetSpecPtrOutput)
}

// Most recently observed status of the PodDisruptionBudget.
func (o PodDisruptionBudgetTypeOutput) Status() PodDisruptionBudgetStatusPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetType) *PodDisruptionBudgetStatus { return v.Status }).(PodDisruptionBudgetStatusPtrOutput)
}

type PodDisruptionBudgetTypeArrayOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDisruptionBudgetType)(nil)).Elem()
}

func (o PodDisruptionBudgetTypeArrayOutput) ToPodDisruptionBudgetTypeArrayOutput() PodDisruptionBudgetTypeArrayOutput {
	return o
}

func (o PodDisruptionBudgetTypeArrayOutput) ToPodDisruptionBudgetTypeArrayOutputWithContext(ctx context.Context) PodDisruptionBudgetTypeArrayOutput {
	return o
}

func (o PodDisruptionBudgetTypeArrayOutput) Index(i pulumi.IntInput) PodDisruptionBudgetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodDisruptionBudgetType {
		return vs[0].([]PodDisruptionBudgetType)[vs[1].(int)]
	}).(PodDisruptionBudgetTypeOutput)
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
type PodDisruptionBudgetListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                   `pulumi:"apiVersion"`
	Items      []PodDisruptionBudgetType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string          `pulumi:"kind"`
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodDisruptionBudgetListTypeInput is an input type that accepts PodDisruptionBudgetListTypeArgs and PodDisruptionBudgetListTypeOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetListTypeInput` via:
//
// 		 PodDisruptionBudgetListTypeArgs{...}
//
type PodDisruptionBudgetListTypeInput interface {
	pulumi.Input

	ToPodDisruptionBudgetListTypeOutput() PodDisruptionBudgetListTypeOutput
	ToPodDisruptionBudgetListTypeOutputWithContext(context.Context) PodDisruptionBudgetListTypeOutput
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
type PodDisruptionBudgetListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput             `pulumi:"apiVersion"`
	Items      PodDisruptionBudgetTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput   `pulumi:"kind"`
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodDisruptionBudgetListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetListType)(nil)).Elem()
}

func (i PodDisruptionBudgetListTypeArgs) ToPodDisruptionBudgetListTypeOutput() PodDisruptionBudgetListTypeOutput {
	return i.ToPodDisruptionBudgetListTypeOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetListTypeArgs) ToPodDisruptionBudgetListTypeOutputWithContext(ctx context.Context) PodDisruptionBudgetListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetListTypeOutput)
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
type PodDisruptionBudgetListTypeOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetListType)(nil)).Elem()
}

func (o PodDisruptionBudgetListTypeOutput) ToPodDisruptionBudgetListTypeOutput() PodDisruptionBudgetListTypeOutput {
	return o
}

func (o PodDisruptionBudgetListTypeOutput) ToPodDisruptionBudgetListTypeOutputWithContext(ctx context.Context) PodDisruptionBudgetListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodDisruptionBudgetListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PodDisruptionBudgetListTypeOutput) Items() PodDisruptionBudgetTypeArrayOutput {
	return o.ApplyT(func(v PodDisruptionBudgetListType) []PodDisruptionBudgetType { return v.Items }).(PodDisruptionBudgetTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodDisruptionBudgetListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PodDisruptionBudgetListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type PodDisruptionBudgetSpec struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
	MinAvailable interface{} `pulumi:"minAvailable"`
	// Label query over pods whose evictions are managed by the disruption budget.
	Selector *metav1.LabelSelector `pulumi:"selector"`
}

// PodDisruptionBudgetSpecInput is an input type that accepts PodDisruptionBudgetSpecArgs and PodDisruptionBudgetSpecOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetSpecInput` via:
//
// 		 PodDisruptionBudgetSpecArgs{...}
//
type PodDisruptionBudgetSpecInput interface {
	pulumi.Input

	ToPodDisruptionBudgetSpecOutput() PodDisruptionBudgetSpecOutput
	ToPodDisruptionBudgetSpecOutputWithContext(context.Context) PodDisruptionBudgetSpecOutput
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type PodDisruptionBudgetSpecArgs struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
	MinAvailable pulumi.Input `pulumi:"minAvailable"`
	// Label query over pods whose evictions are managed by the disruption budget.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
}

func (PodDisruptionBudgetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetSpec)(nil)).Elem()
}

func (i PodDisruptionBudgetSpecArgs) ToPodDisruptionBudgetSpecOutput() PodDisruptionBudgetSpecOutput {
	return i.ToPodDisruptionBudgetSpecOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetSpecArgs) ToPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetSpecOutput)
}

func (i PodDisruptionBudgetSpecArgs) ToPodDisruptionBudgetSpecPtrOutput() PodDisruptionBudgetSpecPtrOutput {
	return i.ToPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetSpecArgs) ToPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetSpecOutput).ToPodDisruptionBudgetSpecPtrOutputWithContext(ctx)
}

// PodDisruptionBudgetSpecPtrInput is an input type that accepts PodDisruptionBudgetSpecArgs, PodDisruptionBudgetSpecPtr and PodDisruptionBudgetSpecPtrOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetSpecPtrInput` via:
//
// 		 PodDisruptionBudgetSpecArgs{...}
//
//  or:
//
// 		 nil
//
type PodDisruptionBudgetSpecPtrInput interface {
	pulumi.Input

	ToPodDisruptionBudgetSpecPtrOutput() PodDisruptionBudgetSpecPtrOutput
	ToPodDisruptionBudgetSpecPtrOutputWithContext(context.Context) PodDisruptionBudgetSpecPtrOutput
}

type podDisruptionBudgetSpecPtrType PodDisruptionBudgetSpecArgs

func PodDisruptionBudgetSpecPtr(v *PodDisruptionBudgetSpecArgs) PodDisruptionBudgetSpecPtrInput {
	return (*podDisruptionBudgetSpecPtrType)(v)
}

func (*podDisruptionBudgetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDisruptionBudgetSpec)(nil)).Elem()
}

func (i *podDisruptionBudgetSpecPtrType) ToPodDisruptionBudgetSpecPtrOutput() PodDisruptionBudgetSpecPtrOutput {
	return i.ToPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i *podDisruptionBudgetSpecPtrType) ToPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetSpecPtrOutput)
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type PodDisruptionBudgetSpecOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetSpec)(nil)).Elem()
}

func (o PodDisruptionBudgetSpecOutput) ToPodDisruptionBudgetSpecOutput() PodDisruptionBudgetSpecOutput {
	return o
}

func (o PodDisruptionBudgetSpecOutput) ToPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecOutput {
	return o
}

func (o PodDisruptionBudgetSpecOutput) ToPodDisruptionBudgetSpecPtrOutput() PodDisruptionBudgetSpecPtrOutput {
	return o.ToPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (o PodDisruptionBudgetSpecOutput) ToPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetSpec) *PodDisruptionBudgetSpec {
		return &v
	}).(PodDisruptionBudgetSpecPtrOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o PodDisruptionBudgetSpecOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v PodDisruptionBudgetSpec) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
func (o PodDisruptionBudgetSpecOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v PodDisruptionBudgetSpec) interface{} { return v.MinAvailable }).(pulumi.AnyOutput)
}

// Label query over pods whose evictions are managed by the disruption budget.
func (o PodDisruptionBudgetSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

type PodDisruptionBudgetSpecPtrOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDisruptionBudgetSpec)(nil)).Elem()
}

func (o PodDisruptionBudgetSpecPtrOutput) ToPodDisruptionBudgetSpecPtrOutput() PodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o PodDisruptionBudgetSpecPtrOutput) ToPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o PodDisruptionBudgetSpecPtrOutput) Elem() PodDisruptionBudgetSpecOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetSpec) PodDisruptionBudgetSpec { return *v }).(PodDisruptionBudgetSpecOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o PodDisruptionBudgetSpecPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
func (o PodDisruptionBudgetSpecPtrOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.AnyOutput)
}

// Label query over pods whose evictions are managed by the disruption budget.
func (o PodDisruptionBudgetSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
type PodDisruptionBudgetStatus struct {
	// current number of healthy pods
	CurrentHealthy int `pulumi:"currentHealthy"`
	// minimum desired number of healthy pods
	DesiredHealthy int `pulumi:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
	DisruptedPods map[string]string `pulumi:"disruptedPods"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed int `pulumi:"disruptionsAllowed"`
	// total number of pods counted by this disruption budget
	ExpectedPods int `pulumi:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// PodDisruptionBudgetStatusInput is an input type that accepts PodDisruptionBudgetStatusArgs and PodDisruptionBudgetStatusOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetStatusInput` via:
//
// 		 PodDisruptionBudgetStatusArgs{...}
//
type PodDisruptionBudgetStatusInput interface {
	pulumi.Input

	ToPodDisruptionBudgetStatusOutput() PodDisruptionBudgetStatusOutput
	ToPodDisruptionBudgetStatusOutputWithContext(context.Context) PodDisruptionBudgetStatusOutput
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
type PodDisruptionBudgetStatusArgs struct {
	// current number of healthy pods
	CurrentHealthy pulumi.IntInput `pulumi:"currentHealthy"`
	// minimum desired number of healthy pods
	DesiredHealthy pulumi.IntInput `pulumi:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
	DisruptedPods pulumi.StringMapInput `pulumi:"disruptedPods"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed pulumi.IntInput `pulumi:"disruptionsAllowed"`
	// total number of pods counted by this disruption budget
	ExpectedPods pulumi.IntInput `pulumi:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (PodDisruptionBudgetStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetStatus)(nil)).Elem()
}

func (i PodDisruptionBudgetStatusArgs) ToPodDisruptionBudgetStatusOutput() PodDisruptionBudgetStatusOutput {
	return i.ToPodDisruptionBudgetStatusOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetStatusArgs) ToPodDisruptionBudgetStatusOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetStatusOutput)
}

func (i PodDisruptionBudgetStatusArgs) ToPodDisruptionBudgetStatusPtrOutput() PodDisruptionBudgetStatusPtrOutput {
	return i.ToPodDisruptionBudgetStatusPtrOutputWithContext(context.Background())
}

func (i PodDisruptionBudgetStatusArgs) ToPodDisruptionBudgetStatusPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetStatusOutput).ToPodDisruptionBudgetStatusPtrOutputWithContext(ctx)
}

// PodDisruptionBudgetStatusPtrInput is an input type that accepts PodDisruptionBudgetStatusArgs, PodDisruptionBudgetStatusPtr and PodDisruptionBudgetStatusPtrOutput values.
// You can construct a concrete instance of `PodDisruptionBudgetStatusPtrInput` via:
//
// 		 PodDisruptionBudgetStatusArgs{...}
//
//  or:
//
// 		 nil
//
type PodDisruptionBudgetStatusPtrInput interface {
	pulumi.Input

	ToPodDisruptionBudgetStatusPtrOutput() PodDisruptionBudgetStatusPtrOutput
	ToPodDisruptionBudgetStatusPtrOutputWithContext(context.Context) PodDisruptionBudgetStatusPtrOutput
}

type podDisruptionBudgetStatusPtrType PodDisruptionBudgetStatusArgs

func PodDisruptionBudgetStatusPtr(v *PodDisruptionBudgetStatusArgs) PodDisruptionBudgetStatusPtrInput {
	return (*podDisruptionBudgetStatusPtrType)(v)
}

func (*podDisruptionBudgetStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDisruptionBudgetStatus)(nil)).Elem()
}

func (i *podDisruptionBudgetStatusPtrType) ToPodDisruptionBudgetStatusPtrOutput() PodDisruptionBudgetStatusPtrOutput {
	return i.ToPodDisruptionBudgetStatusPtrOutputWithContext(context.Background())
}

func (i *podDisruptionBudgetStatusPtrType) ToPodDisruptionBudgetStatusPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDisruptionBudgetStatusPtrOutput)
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
type PodDisruptionBudgetStatusOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDisruptionBudgetStatus)(nil)).Elem()
}

func (o PodDisruptionBudgetStatusOutput) ToPodDisruptionBudgetStatusOutput() PodDisruptionBudgetStatusOutput {
	return o
}

func (o PodDisruptionBudgetStatusOutput) ToPodDisruptionBudgetStatusOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusOutput {
	return o
}

func (o PodDisruptionBudgetStatusOutput) ToPodDisruptionBudgetStatusPtrOutput() PodDisruptionBudgetStatusPtrOutput {
	return o.ToPodDisruptionBudgetStatusPtrOutputWithContext(context.Background())
}

func (o PodDisruptionBudgetStatusOutput) ToPodDisruptionBudgetStatusPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) *PodDisruptionBudgetStatus {
		return &v
	}).(PodDisruptionBudgetStatusPtrOutput)
}

// current number of healthy pods
func (o PodDisruptionBudgetStatusOutput) CurrentHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) int { return v.CurrentHealthy }).(pulumi.IntOutput)
}

// minimum desired number of healthy pods
func (o PodDisruptionBudgetStatusOutput) DesiredHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) int { return v.DesiredHealthy }).(pulumi.IntOutput)
}

// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
func (o PodDisruptionBudgetStatusOutput) DisruptedPods() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) map[string]string { return v.DisruptedPods }).(pulumi.StringMapOutput)
}

// Number of pod disruptions that are currently allowed.
func (o PodDisruptionBudgetStatusOutput) DisruptionsAllowed() pulumi.IntOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) int { return v.DisruptionsAllowed }).(pulumi.IntOutput)
}

// total number of pods counted by this disruption budget
func (o PodDisruptionBudgetStatusOutput) ExpectedPods() pulumi.IntOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) int { return v.ExpectedPods }).(pulumi.IntOutput)
}

// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
func (o PodDisruptionBudgetStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodDisruptionBudgetStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type PodDisruptionBudgetStatusPtrOutput struct{ *pulumi.OutputState }

func (PodDisruptionBudgetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDisruptionBudgetStatus)(nil)).Elem()
}

func (o PodDisruptionBudgetStatusPtrOutput) ToPodDisruptionBudgetStatusPtrOutput() PodDisruptionBudgetStatusPtrOutput {
	return o
}

func (o PodDisruptionBudgetStatusPtrOutput) ToPodDisruptionBudgetStatusPtrOutputWithContext(ctx context.Context) PodDisruptionBudgetStatusPtrOutput {
	return o
}

func (o PodDisruptionBudgetStatusPtrOutput) Elem() PodDisruptionBudgetStatusOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) PodDisruptionBudgetStatus { return *v }).(PodDisruptionBudgetStatusOutput)
}

// current number of healthy pods
func (o PodDisruptionBudgetStatusPtrOutput) CurrentHealthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentHealthy
	}).(pulumi.IntPtrOutput)
}

// minimum desired number of healthy pods
func (o PodDisruptionBudgetStatusPtrOutput) DesiredHealthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) *int {
		if v == nil {
			return nil
		}
		return &v.DesiredHealthy
	}).(pulumi.IntPtrOutput)
}

// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
func (o PodDisruptionBudgetStatusPtrOutput) DisruptedPods() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisruptedPods
	}).(pulumi.StringMapOutput)
}

// Number of pod disruptions that are currently allowed.
func (o PodDisruptionBudgetStatusPtrOutput) DisruptionsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) *int {
		if v == nil {
			return nil
		}
		return &v.DisruptionsAllowed
	}).(pulumi.IntPtrOutput)
}

// total number of pods counted by this disruption budget
func (o PodDisruptionBudgetStatusPtrOutput) ExpectedPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) *int {
		if v == nil {
			return nil
		}
		return &v.ExpectedPods
	}).(pulumi.IntPtrOutput)
}

// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
func (o PodDisruptionBudgetStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodDisruptionBudgetStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
type PodSecurityPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the policy enforced.
	Spec *PodSecurityPolicySpec `pulumi:"spec"`
}

// PodSecurityPolicyTypeInput is an input type that accepts PodSecurityPolicyTypeArgs and PodSecurityPolicyTypeOutput values.
// You can construct a concrete instance of `PodSecurityPolicyTypeInput` via:
//
// 		 PodSecurityPolicyTypeArgs{...}
//
type PodSecurityPolicyTypeInput interface {
	pulumi.Input

	ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput
	ToPodSecurityPolicyTypeOutputWithContext(context.Context) PodSecurityPolicyTypeOutput
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
type PodSecurityPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the policy enforced.
	Spec PodSecurityPolicySpecPtrInput `pulumi:"spec"`
}

func (PodSecurityPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyType)(nil)).Elem()
}

func (i PodSecurityPolicyTypeArgs) ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput {
	return i.ToPodSecurityPolicyTypeOutputWithContext(context.Background())
}

func (i PodSecurityPolicyTypeArgs) ToPodSecurityPolicyTypeOutputWithContext(ctx context.Context) PodSecurityPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyTypeOutput)
}

// PodSecurityPolicyTypeArrayInput is an input type that accepts PodSecurityPolicyTypeArray and PodSecurityPolicyTypeArrayOutput values.
// You can construct a concrete instance of `PodSecurityPolicyTypeArrayInput` via:
//
// 		 PodSecurityPolicyTypeArray{ PodSecurityPolicyTypeArgs{...} }
//
type PodSecurityPolicyTypeArrayInput interface {
	pulumi.Input

	ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput
	ToPodSecurityPolicyTypeArrayOutputWithContext(context.Context) PodSecurityPolicyTypeArrayOutput
}

type PodSecurityPolicyTypeArray []PodSecurityPolicyTypeInput

func (PodSecurityPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSecurityPolicyType)(nil)).Elem()
}

func (i PodSecurityPolicyTypeArray) ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput {
	return i.ToPodSecurityPolicyTypeArrayOutputWithContext(context.Background())
}

func (i PodSecurityPolicyTypeArray) ToPodSecurityPolicyTypeArrayOutputWithContext(ctx context.Context) PodSecurityPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyTypeArrayOutput)
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
type PodSecurityPolicyTypeOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyType)(nil)).Elem()
}

func (o PodSecurityPolicyTypeOutput) ToPodSecurityPolicyTypeOutput() PodSecurityPolicyTypeOutput {
	return o
}

func (o PodSecurityPolicyTypeOutput) ToPodSecurityPolicyTypeOutputWithContext(ctx context.Context) PodSecurityPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSecurityPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSecurityPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodSecurityPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the policy enforced.
func (o PodSecurityPolicyTypeOutput) Spec() PodSecurityPolicySpecPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyType) *PodSecurityPolicySpec { return v.Spec }).(PodSecurityPolicySpecPtrOutput)
}

type PodSecurityPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSecurityPolicyType)(nil)).Elem()
}

func (o PodSecurityPolicyTypeArrayOutput) ToPodSecurityPolicyTypeArrayOutput() PodSecurityPolicyTypeArrayOutput {
	return o
}

func (o PodSecurityPolicyTypeArrayOutput) ToPodSecurityPolicyTypeArrayOutputWithContext(ctx context.Context) PodSecurityPolicyTypeArrayOutput {
	return o
}

func (o PodSecurityPolicyTypeArrayOutput) Index(i pulumi.IntInput) PodSecurityPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSecurityPolicyType {
		return vs[0].([]PodSecurityPolicyType)[vs[1].(int)]
	}).(PodSecurityPolicyTypeOutput)
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects.
type PodSecurityPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items []PodSecurityPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodSecurityPolicyListTypeInput is an input type that accepts PodSecurityPolicyListTypeArgs and PodSecurityPolicyListTypeOutput values.
// You can construct a concrete instance of `PodSecurityPolicyListTypeInput` via:
//
// 		 PodSecurityPolicyListTypeArgs{...}
//
type PodSecurityPolicyListTypeInput interface {
	pulumi.Input

	ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput
	ToPodSecurityPolicyListTypeOutputWithContext(context.Context) PodSecurityPolicyListTypeOutput
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects.
type PodSecurityPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of schema objects.
	Items PodSecurityPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodSecurityPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyListType)(nil)).Elem()
}

func (i PodSecurityPolicyListTypeArgs) ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput {
	return i.ToPodSecurityPolicyListTypeOutputWithContext(context.Background())
}

func (i PodSecurityPolicyListTypeArgs) ToPodSecurityPolicyListTypeOutputWithContext(ctx context.Context) PodSecurityPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicyListTypeOutput)
}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects.
type PodSecurityPolicyListTypeOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicyListType)(nil)).Elem()
}

func (o PodSecurityPolicyListTypeOutput) ToPodSecurityPolicyListTypeOutput() PodSecurityPolicyListTypeOutput {
	return o
}

func (o PodSecurityPolicyListTypeOutput) ToPodSecurityPolicyListTypeOutputWithContext(ctx context.Context) PodSecurityPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSecurityPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of schema objects.
func (o PodSecurityPolicyListTypeOutput) Items() PodSecurityPolicyTypeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) []PodSecurityPolicyType { return v.Items }).(PodSecurityPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSecurityPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodSecurityPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodSecurityPolicySpec defines the policy enforced.
type PodSecurityPolicySpec struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCSIDrivers []AllowedCSIDriver `pulumi:"allowedCSIDrivers"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
	AllowedCapabilities []string `pulumi:"allowedCapabilities"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes []AllowedFlexVolume `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths []AllowedHostPath `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes []string `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	//
	// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
	DefaultAddCapabilities []string `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
	DefaultAllowPrivilegeEscalation *bool `pulumi:"defaultAllowPrivilegeEscalation"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
	//
	// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
	ForbiddenSysctls []string `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup FSGroupStrategyOptions `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIPC *bool `pulumi:"hostIPC"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPID *bool `pulumi:"hostPID"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts []HostPortRange `pulumi:"hostPorts"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged *bool `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
	RequiredDropCapabilities []string `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup *RunAsGroupStrategyOptions `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser RunAsUserStrategyOptions `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
	RuntimeClass *RuntimeClassStrategyOptions `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux SELinuxStrategyOptions `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroups SupplementalGroupsStrategyOptions `pulumi:"supplementalGroups"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
	Volumes []string `pulumi:"volumes"`
}

// PodSecurityPolicySpecInput is an input type that accepts PodSecurityPolicySpecArgs and PodSecurityPolicySpecOutput values.
// You can construct a concrete instance of `PodSecurityPolicySpecInput` via:
//
// 		 PodSecurityPolicySpecArgs{...}
//
type PodSecurityPolicySpecInput interface {
	pulumi.Input

	ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput
	ToPodSecurityPolicySpecOutputWithContext(context.Context) PodSecurityPolicySpecOutput
}

// PodSecurityPolicySpec defines the policy enforced.
type PodSecurityPolicySpecArgs struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCSIDrivers AllowedCSIDriverArrayInput `pulumi:"allowedCSIDrivers"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
	AllowedCapabilities pulumi.StringArrayInput `pulumi:"allowedCapabilities"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes AllowedFlexVolumeArrayInput `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths AllowedHostPathArrayInput `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes pulumi.StringArrayInput `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	//
	// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
	AllowedUnsafeSysctls pulumi.StringArrayInput `pulumi:"allowedUnsafeSysctls"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
	DefaultAddCapabilities pulumi.StringArrayInput `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
	DefaultAllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"defaultAllowPrivilegeEscalation"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
	//
	// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
	ForbiddenSysctls pulumi.StringArrayInput `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup FSGroupStrategyOptionsInput `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIPC pulumi.BoolPtrInput `pulumi:"hostIPC"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPID pulumi.BoolPtrInput `pulumi:"hostPID"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts HostPortRangeArrayInput `pulumi:"hostPorts"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
	RequiredDropCapabilities pulumi.StringArrayInput `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup RunAsGroupStrategyOptionsPtrInput `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser RunAsUserStrategyOptionsInput `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
	RuntimeClass RuntimeClassStrategyOptionsPtrInput `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux SELinuxStrategyOptionsInput `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroups SupplementalGroupsStrategyOptionsInput `pulumi:"supplementalGroups"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
	Volumes pulumi.StringArrayInput `pulumi:"volumes"`
}

func (PodSecurityPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicySpec)(nil)).Elem()
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput {
	return i.ToPodSecurityPolicySpecOutputWithContext(context.Background())
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecOutputWithContext(ctx context.Context) PodSecurityPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecOutput)
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return i.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (i PodSecurityPolicySpecArgs) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecOutput).ToPodSecurityPolicySpecPtrOutputWithContext(ctx)
}

// PodSecurityPolicySpecPtrInput is an input type that accepts PodSecurityPolicySpecArgs, PodSecurityPolicySpecPtr and PodSecurityPolicySpecPtrOutput values.
// You can construct a concrete instance of `PodSecurityPolicySpecPtrInput` via:
//
// 		 PodSecurityPolicySpecArgs{...}
//
//  or:
//
// 		 nil
//
type PodSecurityPolicySpecPtrInput interface {
	pulumi.Input

	ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput
	ToPodSecurityPolicySpecPtrOutputWithContext(context.Context) PodSecurityPolicySpecPtrOutput
}

type podSecurityPolicySpecPtrType PodSecurityPolicySpecArgs

func PodSecurityPolicySpecPtr(v *PodSecurityPolicySpecArgs) PodSecurityPolicySpecPtrInput {
	return (*podSecurityPolicySpecPtrType)(v)
}

func (*podSecurityPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicySpec)(nil)).Elem()
}

func (i *podSecurityPolicySpecPtrType) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return i.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (i *podSecurityPolicySpecPtrType) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityPolicySpecPtrOutput)
}

// PodSecurityPolicySpec defines the policy enforced.
type PodSecurityPolicySpecOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityPolicySpec)(nil)).Elem()
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecOutput() PodSecurityPolicySpecOutput {
	return o
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecOutputWithContext(ctx context.Context) PodSecurityPolicySpecOutput {
	return o
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return o.ToPodSecurityPolicySpecPtrOutputWithContext(context.Background())
}

func (o PodSecurityPolicySpecOutput) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *PodSecurityPolicySpec {
		return &v
	}).(PodSecurityPolicySpecPtrOutput)
}

// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
func (o PodSecurityPolicySpecOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
func (o PodSecurityPolicySpecOutput) AllowedCSIDrivers() AllowedCSIDriverArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedCSIDriver { return v.AllowedCSIDrivers }).(AllowedCSIDriverArrayOutput)
}

// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
func (o PodSecurityPolicySpecOutput) AllowedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedCapabilities }).(pulumi.StringArrayOutput)
}

// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
func (o PodSecurityPolicySpecOutput) AllowedFlexVolumes() AllowedFlexVolumeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedFlexVolume { return v.AllowedFlexVolumes }).(AllowedFlexVolumeArrayOutput)
}

// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
func (o PodSecurityPolicySpecOutput) AllowedHostPaths() AllowedHostPathArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []AllowedHostPath { return v.AllowedHostPaths }).(AllowedHostPathArrayOutput)
}

// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
func (o PodSecurityPolicySpecOutput) AllowedProcMountTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedProcMountTypes }).(pulumi.StringArrayOutput)
}

// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
//
// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
func (o PodSecurityPolicySpecOutput) DefaultAddCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.DefaultAddCapabilities }).(pulumi.StringArrayOutput)
}

// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
func (o PodSecurityPolicySpecOutput) DefaultAllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.DefaultAllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
//
// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecOutput) ForbiddenSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.ForbiddenSysctls }).(pulumi.StringArrayOutput)
}

// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
func (o PodSecurityPolicySpecOutput) FsGroup() FSGroupStrategyOptionsOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) FSGroupStrategyOptions { return v.FsGroup }).(FSGroupStrategyOptionsOutput)
}

// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
func (o PodSecurityPolicySpecOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostIPC }).(pulumi.BoolPtrOutput)
}

// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
func (o PodSecurityPolicySpecOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// hostPID determines if the policy allows the use of HostPID in the pod spec.
func (o PodSecurityPolicySpecOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.HostPID }).(pulumi.BoolPtrOutput)
}

// hostPorts determines which host port ranges are allowed to be exposed.
func (o PodSecurityPolicySpecOutput) HostPorts() HostPortRangeArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []HostPortRange { return v.HostPorts }).(HostPortRangeArrayOutput)
}

// privileged determines if a pod can request to be run as privileged.
func (o PodSecurityPolicySpecOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
func (o PodSecurityPolicySpecOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
func (o PodSecurityPolicySpecOutput) RequiredDropCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.RequiredDropCapabilities }).(pulumi.StringArrayOutput)
}

// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
func (o PodSecurityPolicySpecOutput) RunAsGroup() RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RunAsGroupStrategyOptions { return v.RunAsGroup }).(RunAsGroupStrategyOptionsPtrOutput)
}

// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o PodSecurityPolicySpecOutput) RunAsUser() RunAsUserStrategyOptionsOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) RunAsUserStrategyOptions { return v.RunAsUser }).(RunAsUserStrategyOptionsOutput)
}

// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
func (o PodSecurityPolicySpecOutput) RuntimeClass() RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) *RuntimeClassStrategyOptions { return v.RuntimeClass }).(RuntimeClassStrategyOptionsPtrOutput)
}

// seLinux is the strategy that will dictate the allowable labels that may be set.
func (o PodSecurityPolicySpecOutput) SeLinux() SELinuxStrategyOptionsOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) SELinuxStrategyOptions { return v.SeLinux }).(SELinuxStrategyOptionsOutput)
}

// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
func (o PodSecurityPolicySpecOutput) SupplementalGroups() SupplementalGroupsStrategyOptionsOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) SupplementalGroupsStrategyOptions { return v.SupplementalGroups }).(SupplementalGroupsStrategyOptionsOutput)
}

// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
func (o PodSecurityPolicySpecOutput) Volumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSecurityPolicySpec) []string { return v.Volumes }).(pulumi.StringArrayOutput)
}

type PodSecurityPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (PodSecurityPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityPolicySpec)(nil)).Elem()
}

func (o PodSecurityPolicySpecPtrOutput) ToPodSecurityPolicySpecPtrOutput() PodSecurityPolicySpecPtrOutput {
	return o
}

func (o PodSecurityPolicySpecPtrOutput) ToPodSecurityPolicySpecPtrOutputWithContext(ctx context.Context) PodSecurityPolicySpecPtrOutput {
	return o
}

func (o PodSecurityPolicySpecPtrOutput) Elem() PodSecurityPolicySpecOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) PodSecurityPolicySpec { return *v }).(PodSecurityPolicySpecOutput)
}

// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
func (o PodSecurityPolicySpecPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
func (o PodSecurityPolicySpecPtrOutput) AllowedCSIDrivers() AllowedCSIDriverArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []AllowedCSIDriver {
		if v == nil {
			return nil
		}
		return v.AllowedCSIDrivers
	}).(AllowedCSIDriverArrayOutput)
}

// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
func (o PodSecurityPolicySpecPtrOutput) AllowedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCapabilities
	}).(pulumi.StringArrayOutput)
}

// allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
func (o PodSecurityPolicySpecPtrOutput) AllowedFlexVolumes() AllowedFlexVolumeArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []AllowedFlexVolume {
		if v == nil {
			return nil
		}
		return v.AllowedFlexVolumes
	}).(AllowedFlexVolumeArrayOutput)
}

// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
func (o PodSecurityPolicySpecPtrOutput) AllowedHostPaths() AllowedHostPathArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []AllowedHostPath {
		if v == nil {
			return nil
		}
		return v.AllowedHostPaths
	}).(AllowedHostPathArrayOutput)
}

// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
func (o PodSecurityPolicySpecPtrOutput) AllowedProcMountTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.AllowedProcMountTypes
	}).(pulumi.StringArrayOutput)
}

// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
//
// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecPtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUnsafeSysctls
	}).(pulumi.StringArrayOutput)
}

// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
func (o PodSecurityPolicySpecPtrOutput) DefaultAddCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.DefaultAddCapabilities
	}).(pulumi.StringArrayOutput)
}

// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
func (o PodSecurityPolicySpecPtrOutput) DefaultAllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.DefaultAllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
//
// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
func (o PodSecurityPolicySpecPtrOutput) ForbiddenSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.ForbiddenSysctls
	}).(pulumi.StringArrayOutput)
}

// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
func (o PodSecurityPolicySpecPtrOutput) FsGroup() FSGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *FSGroupStrategyOptions {
		if v == nil {
			return nil
		}
		return &v.FsGroup
	}).(FSGroupStrategyOptionsPtrOutput)
}

// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostIPC
	}).(pulumi.BoolPtrOutput)
}

// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

// hostPID determines if the policy allows the use of HostPID in the pod spec.
func (o PodSecurityPolicySpecPtrOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostPID
	}).(pulumi.BoolPtrOutput)
}

// hostPorts determines which host port ranges are allowed to be exposed.
func (o PodSecurityPolicySpecPtrOutput) HostPorts() HostPortRangeArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []HostPortRange {
		if v == nil {
			return nil
		}
		return v.HostPorts
	}).(HostPortRangeArrayOutput)
}

// privileged determines if a pod can request to be run as privileged.
func (o PodSecurityPolicySpecPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
func (o PodSecurityPolicySpecPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
func (o PodSecurityPolicySpecPtrOutput) RequiredDropCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.RequiredDropCapabilities
	}).(pulumi.StringArrayOutput)
}

// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
func (o PodSecurityPolicySpecPtrOutput) RunAsGroup() RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *RunAsGroupStrategyOptions {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(RunAsGroupStrategyOptionsPtrOutput)
}

// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o PodSecurityPolicySpecPtrOutput) RunAsUser() RunAsUserStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *RunAsUserStrategyOptions {
		if v == nil {
			return nil
		}
		return &v.RunAsUser
	}).(RunAsUserStrategyOptionsPtrOutput)
}

// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
func (o PodSecurityPolicySpecPtrOutput) RuntimeClass() RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *RuntimeClassStrategyOptions {
		if v == nil {
			return nil
		}
		return v.RuntimeClass
	}).(RuntimeClassStrategyOptionsPtrOutput)
}

// seLinux is the strategy that will dictate the allowable labels that may be set.
func (o PodSecurityPolicySpecPtrOutput) SeLinux() SELinuxStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *SELinuxStrategyOptions {
		if v == nil {
			return nil
		}
		return &v.SeLinux
	}).(SELinuxStrategyOptionsPtrOutput)
}

// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
func (o PodSecurityPolicySpecPtrOutput) SupplementalGroups() SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) *SupplementalGroupsStrategyOptions {
		if v == nil {
			return nil
		}
		return &v.SupplementalGroups
	}).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
func (o PodSecurityPolicySpecPtrOutput) Volumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSecurityPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(pulumi.StringArrayOutput)
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsGroupStrategyOptions struct {
	// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
	Rule string `pulumi:"rule"`
}

// RunAsGroupStrategyOptionsInput is an input type that accepts RunAsGroupStrategyOptionsArgs and RunAsGroupStrategyOptionsOutput values.
// You can construct a concrete instance of `RunAsGroupStrategyOptionsInput` via:
//
// 		 RunAsGroupStrategyOptionsArgs{...}
//
type RunAsGroupStrategyOptionsInput interface {
	pulumi.Input

	ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput
	ToRunAsGroupStrategyOptionsOutputWithContext(context.Context) RunAsGroupStrategyOptionsOutput
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsGroupStrategyOptionsArgs struct {
	// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
	Rule pulumi.StringInput `pulumi:"rule"`
}

func (RunAsGroupStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsGroupStrategyOptions)(nil)).Elem()
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput {
	return i.ToRunAsGroupStrategyOptionsOutputWithContext(context.Background())
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsOutput)
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return i.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RunAsGroupStrategyOptionsArgs) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsOutput).ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx)
}

// RunAsGroupStrategyOptionsPtrInput is an input type that accepts RunAsGroupStrategyOptionsArgs, RunAsGroupStrategyOptionsPtr and RunAsGroupStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RunAsGroupStrategyOptionsPtrInput` via:
//
// 		 RunAsGroupStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RunAsGroupStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput
	ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Context) RunAsGroupStrategyOptionsPtrOutput
}

type runAsGroupStrategyOptionsPtrType RunAsGroupStrategyOptionsArgs

func RunAsGroupStrategyOptionsPtr(v *RunAsGroupStrategyOptionsArgs) RunAsGroupStrategyOptionsPtrInput {
	return (*runAsGroupStrategyOptionsPtrType)(v)
}

func (*runAsGroupStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsGroupStrategyOptions)(nil)).Elem()
}

func (i *runAsGroupStrategyOptionsPtrType) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return i.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runAsGroupStrategyOptionsPtrType) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsGroupStrategyOptionsPtrOutput)
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsGroupStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RunAsGroupStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsGroupStrategyOptions)(nil)).Elem()
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsOutput() RunAsGroupStrategyOptionsOutput {
	return o
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsOutput {
	return o
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return o.ToRunAsGroupStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RunAsGroupStrategyOptionsOutput) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) *RunAsGroupStrategyOptions {
		return &v
	}).(RunAsGroupStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsGroupStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
func (o RunAsGroupStrategyOptionsOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v RunAsGroupStrategyOptions) string { return v.Rule }).(pulumi.StringOutput)
}

type RunAsGroupStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RunAsGroupStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsGroupStrategyOptions)(nil)).Elem()
}

func (o RunAsGroupStrategyOptionsPtrOutput) ToRunAsGroupStrategyOptionsPtrOutput() RunAsGroupStrategyOptionsPtrOutput {
	return o
}

func (o RunAsGroupStrategyOptionsPtrOutput) ToRunAsGroupStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsGroupStrategyOptionsPtrOutput {
	return o
}

func (o RunAsGroupStrategyOptionsPtrOutput) Elem() RunAsGroupStrategyOptionsOutput {
	return o.ApplyT(func(v *RunAsGroupStrategyOptions) RunAsGroupStrategyOptions { return *v }).(RunAsGroupStrategyOptionsOutput)
}

// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsGroupStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v *RunAsGroupStrategyOptions) []IDRange {
		if v == nil {
			return nil
		}
		return v.Ranges
	}).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
func (o RunAsGroupStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunAsGroupStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Rule
	}).(pulumi.StringPtrOutput)
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsUserStrategyOptions struct {
	// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule string `pulumi:"rule"`
}

// RunAsUserStrategyOptionsInput is an input type that accepts RunAsUserStrategyOptionsArgs and RunAsUserStrategyOptionsOutput values.
// You can construct a concrete instance of `RunAsUserStrategyOptionsInput` via:
//
// 		 RunAsUserStrategyOptionsArgs{...}
//
type RunAsUserStrategyOptionsInput interface {
	pulumi.Input

	ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput
	ToRunAsUserStrategyOptionsOutputWithContext(context.Context) RunAsUserStrategyOptionsOutput
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsUserStrategyOptionsArgs struct {
	// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule pulumi.StringInput `pulumi:"rule"`
}

func (RunAsUserStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsUserStrategyOptions)(nil)).Elem()
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput {
	return i.ToRunAsUserStrategyOptionsOutputWithContext(context.Background())
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsOutput)
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return i.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RunAsUserStrategyOptionsArgs) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsOutput).ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx)
}

// RunAsUserStrategyOptionsPtrInput is an input type that accepts RunAsUserStrategyOptionsArgs, RunAsUserStrategyOptionsPtr and RunAsUserStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RunAsUserStrategyOptionsPtrInput` via:
//
// 		 RunAsUserStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RunAsUserStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput
	ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Context) RunAsUserStrategyOptionsPtrOutput
}

type runAsUserStrategyOptionsPtrType RunAsUserStrategyOptionsArgs

func RunAsUserStrategyOptionsPtr(v *RunAsUserStrategyOptionsArgs) RunAsUserStrategyOptionsPtrInput {
	return (*runAsUserStrategyOptionsPtrType)(v)
}

func (*runAsUserStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsUserStrategyOptions)(nil)).Elem()
}

func (i *runAsUserStrategyOptionsPtrType) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return i.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runAsUserStrategyOptionsPtrType) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunAsUserStrategyOptionsPtrOutput)
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
type RunAsUserStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RunAsUserStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunAsUserStrategyOptions)(nil)).Elem()
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsOutput() RunAsUserStrategyOptionsOutput {
	return o
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsOutput {
	return o
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return o.ToRunAsUserStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RunAsUserStrategyOptionsOutput) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) *RunAsUserStrategyOptions {
		return &v
	}).(RunAsUserStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsUserStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o RunAsUserStrategyOptionsOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v RunAsUserStrategyOptions) string { return v.Rule }).(pulumi.StringOutput)
}

type RunAsUserStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RunAsUserStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunAsUserStrategyOptions)(nil)).Elem()
}

func (o RunAsUserStrategyOptionsPtrOutput) ToRunAsUserStrategyOptionsPtrOutput() RunAsUserStrategyOptionsPtrOutput {
	return o
}

func (o RunAsUserStrategyOptionsPtrOutput) ToRunAsUserStrategyOptionsPtrOutputWithContext(ctx context.Context) RunAsUserStrategyOptionsPtrOutput {
	return o
}

func (o RunAsUserStrategyOptionsPtrOutput) Elem() RunAsUserStrategyOptionsOutput {
	return o.ApplyT(func(v *RunAsUserStrategyOptions) RunAsUserStrategyOptions { return *v }).(RunAsUserStrategyOptionsOutput)
}

// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
func (o RunAsUserStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v *RunAsUserStrategyOptions) []IDRange {
		if v == nil {
			return nil
		}
		return v.Ranges
	}).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
func (o RunAsUserStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunAsUserStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Rule
	}).(pulumi.StringPtrOutput)
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptions struct {
	// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
	AllowedRuntimeClassNames []string `pulumi:"allowedRuntimeClassNames"`
	// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
	DefaultRuntimeClassName *string `pulumi:"defaultRuntimeClassName"`
}

// RuntimeClassStrategyOptionsInput is an input type that accepts RuntimeClassStrategyOptionsArgs and RuntimeClassStrategyOptionsOutput values.
// You can construct a concrete instance of `RuntimeClassStrategyOptionsInput` via:
//
// 		 RuntimeClassStrategyOptionsArgs{...}
//
type RuntimeClassStrategyOptionsInput interface {
	pulumi.Input

	ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput
	ToRuntimeClassStrategyOptionsOutputWithContext(context.Context) RuntimeClassStrategyOptionsOutput
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptionsArgs struct {
	// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
	AllowedRuntimeClassNames pulumi.StringArrayInput `pulumi:"allowedRuntimeClassNames"`
	// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
	DefaultRuntimeClassName pulumi.StringPtrInput `pulumi:"defaultRuntimeClassName"`
}

func (RuntimeClassStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassStrategyOptions)(nil)).Elem()
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput {
	return i.ToRuntimeClassStrategyOptionsOutputWithContext(context.Background())
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsOutput)
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return i.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i RuntimeClassStrategyOptionsArgs) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsOutput).ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx)
}

// RuntimeClassStrategyOptionsPtrInput is an input type that accepts RuntimeClassStrategyOptionsArgs, RuntimeClassStrategyOptionsPtr and RuntimeClassStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `RuntimeClassStrategyOptionsPtrInput` via:
//
// 		 RuntimeClassStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type RuntimeClassStrategyOptionsPtrInput interface {
	pulumi.Input

	ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput
	ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Context) RuntimeClassStrategyOptionsPtrOutput
}

type runtimeClassStrategyOptionsPtrType RuntimeClassStrategyOptionsArgs

func RuntimeClassStrategyOptionsPtr(v *RuntimeClassStrategyOptionsArgs) RuntimeClassStrategyOptionsPtrInput {
	return (*runtimeClassStrategyOptionsPtrType)(v)
}

func (*runtimeClassStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeClassStrategyOptions)(nil)).Elem()
}

func (i *runtimeClassStrategyOptionsPtrType) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return i.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *runtimeClassStrategyOptionsPtrType) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeClassStrategyOptionsPtrOutput)
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
type RuntimeClassStrategyOptionsOutput struct{ *pulumi.OutputState }

func (RuntimeClassStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeClassStrategyOptions)(nil)).Elem()
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsOutput() RuntimeClassStrategyOptionsOutput {
	return o
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsOutput {
	return o
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return o.ToRuntimeClassStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o RuntimeClassStrategyOptionsOutput) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) *RuntimeClassStrategyOptions {
		return &v
	}).(RuntimeClassStrategyOptionsPtrOutput)
}

// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
func (o RuntimeClassStrategyOptionsOutput) AllowedRuntimeClassNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) []string { return v.AllowedRuntimeClassNames }).(pulumi.StringArrayOutput)
}

// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
func (o RuntimeClassStrategyOptionsOutput) DefaultRuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeClassStrategyOptions) *string { return v.DefaultRuntimeClassName }).(pulumi.StringPtrOutput)
}

type RuntimeClassStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (RuntimeClassStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeClassStrategyOptions)(nil)).Elem()
}

func (o RuntimeClassStrategyOptionsPtrOutput) ToRuntimeClassStrategyOptionsPtrOutput() RuntimeClassStrategyOptionsPtrOutput {
	return o
}

func (o RuntimeClassStrategyOptionsPtrOutput) ToRuntimeClassStrategyOptionsPtrOutputWithContext(ctx context.Context) RuntimeClassStrategyOptionsPtrOutput {
	return o
}

func (o RuntimeClassStrategyOptionsPtrOutput) Elem() RuntimeClassStrategyOptionsOutput {
	return o.ApplyT(func(v *RuntimeClassStrategyOptions) RuntimeClassStrategyOptions { return *v }).(RuntimeClassStrategyOptionsOutput)
}

// allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
func (o RuntimeClassStrategyOptionsPtrOutput) AllowedRuntimeClassNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuntimeClassStrategyOptions) []string {
		if v == nil {
			return nil
		}
		return v.AllowedRuntimeClassNames
	}).(pulumi.StringArrayOutput)
}

// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
func (o RuntimeClassStrategyOptionsPtrOutput) DefaultRuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeClassStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return v.DefaultRuntimeClassName
	}).(pulumi.StringPtrOutput)
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
type SELinuxStrategyOptions struct {
	// rule is the strategy that will dictate the allowable labels that may be set.
	Rule string `pulumi:"rule"`
	// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SeLinuxOptions *corev1.SELinuxOptions `pulumi:"seLinuxOptions"`
}

// SELinuxStrategyOptionsInput is an input type that accepts SELinuxStrategyOptionsArgs and SELinuxStrategyOptionsOutput values.
// You can construct a concrete instance of `SELinuxStrategyOptionsInput` via:
//
// 		 SELinuxStrategyOptionsArgs{...}
//
type SELinuxStrategyOptionsInput interface {
	pulumi.Input

	ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput
	ToSELinuxStrategyOptionsOutputWithContext(context.Context) SELinuxStrategyOptionsOutput
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
type SELinuxStrategyOptionsArgs struct {
	// rule is the strategy that will dictate the allowable labels that may be set.
	Rule pulumi.StringInput `pulumi:"rule"`
	// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SeLinuxOptions corev1.SELinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
}

func (SELinuxStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxStrategyOptions)(nil)).Elem()
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput {
	return i.ToSELinuxStrategyOptionsOutputWithContext(context.Background())
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsOutputWithContext(ctx context.Context) SELinuxStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsOutput)
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return i.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i SELinuxStrategyOptionsArgs) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsOutput).ToSELinuxStrategyOptionsPtrOutputWithContext(ctx)
}

// SELinuxStrategyOptionsPtrInput is an input type that accepts SELinuxStrategyOptionsArgs, SELinuxStrategyOptionsPtr and SELinuxStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `SELinuxStrategyOptionsPtrInput` via:
//
// 		 SELinuxStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type SELinuxStrategyOptionsPtrInput interface {
	pulumi.Input

	ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput
	ToSELinuxStrategyOptionsPtrOutputWithContext(context.Context) SELinuxStrategyOptionsPtrOutput
}

type selinuxStrategyOptionsPtrType SELinuxStrategyOptionsArgs

func SELinuxStrategyOptionsPtr(v *SELinuxStrategyOptionsArgs) SELinuxStrategyOptionsPtrInput {
	return (*selinuxStrategyOptionsPtrType)(v)
}

func (*selinuxStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxStrategyOptions)(nil)).Elem()
}

func (i *selinuxStrategyOptionsPtrType) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return i.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *selinuxStrategyOptionsPtrType) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxStrategyOptionsPtrOutput)
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
type SELinuxStrategyOptionsOutput struct{ *pulumi.OutputState }

func (SELinuxStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxStrategyOptions)(nil)).Elem()
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsOutput() SELinuxStrategyOptionsOutput {
	return o
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsOutputWithContext(ctx context.Context) SELinuxStrategyOptionsOutput {
	return o
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return o.ToSELinuxStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o SELinuxStrategyOptionsOutput) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *SELinuxStrategyOptions {
		return &v
	}).(SELinuxStrategyOptionsPtrOutput)
}

// rule is the strategy that will dictate the allowable labels that may be set.
func (o SELinuxStrategyOptionsOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) string { return v.Rule }).(pulumi.StringOutput)
}

// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o SELinuxStrategyOptionsOutput) SeLinuxOptions() corev1.SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v SELinuxStrategyOptions) *corev1.SELinuxOptions { return v.SeLinuxOptions }).(corev1.SELinuxOptionsPtrOutput)
}

type SELinuxStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (SELinuxStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxStrategyOptions)(nil)).Elem()
}

func (o SELinuxStrategyOptionsPtrOutput) ToSELinuxStrategyOptionsPtrOutput() SELinuxStrategyOptionsPtrOutput {
	return o
}

func (o SELinuxStrategyOptionsPtrOutput) ToSELinuxStrategyOptionsPtrOutputWithContext(ctx context.Context) SELinuxStrategyOptionsPtrOutput {
	return o
}

func (o SELinuxStrategyOptionsPtrOutput) Elem() SELinuxStrategyOptionsOutput {
	return o.ApplyT(func(v *SELinuxStrategyOptions) SELinuxStrategyOptions { return *v }).(SELinuxStrategyOptionsOutput)
}

// rule is the strategy that will dictate the allowable labels that may be set.
func (o SELinuxStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Rule
	}).(pulumi.StringPtrOutput)
}

// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o SELinuxStrategyOptionsPtrOutput) SeLinuxOptions() corev1.SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v *SELinuxStrategyOptions) *corev1.SELinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(corev1.SELinuxOptionsPtrOutput)
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
type SupplementalGroupsStrategyOptions struct {
	// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IDRange `pulumi:"ranges"`
	// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	Rule *string `pulumi:"rule"`
}

// SupplementalGroupsStrategyOptionsInput is an input type that accepts SupplementalGroupsStrategyOptionsArgs and SupplementalGroupsStrategyOptionsOutput values.
// You can construct a concrete instance of `SupplementalGroupsStrategyOptionsInput` via:
//
// 		 SupplementalGroupsStrategyOptionsArgs{...}
//
type SupplementalGroupsStrategyOptionsInput interface {
	pulumi.Input

	ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput
	ToSupplementalGroupsStrategyOptionsOutputWithContext(context.Context) SupplementalGroupsStrategyOptionsOutput
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
type SupplementalGroupsStrategyOptionsArgs struct {
	// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges IDRangeArrayInput `pulumi:"ranges"`
	// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	Rule pulumi.StringPtrInput `pulumi:"rule"`
}

func (SupplementalGroupsStrategyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput {
	return i.ToSupplementalGroupsStrategyOptionsOutputWithContext(context.Background())
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsOutput)
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return i.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i SupplementalGroupsStrategyOptionsArgs) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsOutput).ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx)
}

// SupplementalGroupsStrategyOptionsPtrInput is an input type that accepts SupplementalGroupsStrategyOptionsArgs, SupplementalGroupsStrategyOptionsPtr and SupplementalGroupsStrategyOptionsPtrOutput values.
// You can construct a concrete instance of `SupplementalGroupsStrategyOptionsPtrInput` via:
//
// 		 SupplementalGroupsStrategyOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type SupplementalGroupsStrategyOptionsPtrInput interface {
	pulumi.Input

	ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput
	ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Context) SupplementalGroupsStrategyOptionsPtrOutput
}

type supplementalGroupsStrategyOptionsPtrType SupplementalGroupsStrategyOptionsArgs

func SupplementalGroupsStrategyOptionsPtr(v *SupplementalGroupsStrategyOptionsArgs) SupplementalGroupsStrategyOptionsPtrInput {
	return (*supplementalGroupsStrategyOptionsPtrType)(v)
}

func (*supplementalGroupsStrategyOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (i *supplementalGroupsStrategyOptionsPtrType) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return i.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (i *supplementalGroupsStrategyOptionsPtrType) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
type SupplementalGroupsStrategyOptionsOutput struct{ *pulumi.OutputState }

func (SupplementalGroupsStrategyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsOutput() SupplementalGroupsStrategyOptionsOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(context.Background())
}

func (o SupplementalGroupsStrategyOptionsOutput) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) *SupplementalGroupsStrategyOptions {
		return &v
	}).(SupplementalGroupsStrategyOptionsPtrOutput)
}

// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
func (o SupplementalGroupsStrategyOptionsOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) []IDRange { return v.Ranges }).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
func (o SupplementalGroupsStrategyOptionsOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupplementalGroupsStrategyOptions) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

type SupplementalGroupsStrategyOptionsPtrOutput struct{ *pulumi.OutputState }

func (SupplementalGroupsStrategyOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupplementalGroupsStrategyOptions)(nil)).Elem()
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) ToSupplementalGroupsStrategyOptionsPtrOutput() SupplementalGroupsStrategyOptionsPtrOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) ToSupplementalGroupsStrategyOptionsPtrOutputWithContext(ctx context.Context) SupplementalGroupsStrategyOptionsPtrOutput {
	return o
}

func (o SupplementalGroupsStrategyOptionsPtrOutput) Elem() SupplementalGroupsStrategyOptionsOutput {
	return o.ApplyT(func(v *SupplementalGroupsStrategyOptions) SupplementalGroupsStrategyOptions { return *v }).(SupplementalGroupsStrategyOptionsOutput)
}

// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
func (o SupplementalGroupsStrategyOptionsPtrOutput) Ranges() IDRangeArrayOutput {
	return o.ApplyT(func(v *SupplementalGroupsStrategyOptions) []IDRange {
		if v == nil {
			return nil
		}
		return v.Ranges
	}).(IDRangeArrayOutput)
}

// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
func (o SupplementalGroupsStrategyOptionsPtrOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupplementalGroupsStrategyOptions) *string {
		if v == nil {
			return nil
		}
		return v.Rule
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AllowedCSIDriverOutput{})
	pulumi.RegisterOutputType(AllowedCSIDriverArrayOutput{})
	pulumi.RegisterOutputType(AllowedFlexVolumeOutput{})
	pulumi.RegisterOutputType(AllowedFlexVolumeArrayOutput{})
	pulumi.RegisterOutputType(AllowedHostPathOutput{})
	pulumi.RegisterOutputType(AllowedHostPathArrayOutput{})
	pulumi.RegisterOutputType(EvictionOutput{})
	pulumi.RegisterOutputType(FSGroupStrategyOptionsOutput{})
	pulumi.RegisterOutputType(FSGroupStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(HostPortRangeOutput{})
	pulumi.RegisterOutputType(HostPortRangeArrayOutput{})
	pulumi.RegisterOutputType(IDRangeOutput{})
	pulumi.RegisterOutputType(IDRangeArrayOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetTypeOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetTypeArrayOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetListTypeOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetSpecOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetSpecPtrOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetStatusOutput{})
	pulumi.RegisterOutputType(PodDisruptionBudgetStatusPtrOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyTypeOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicyListTypeOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicySpecOutput{})
	pulumi.RegisterOutputType(PodSecurityPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(RunAsGroupStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RunAsGroupStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(RunAsUserStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RunAsUserStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(RuntimeClassStrategyOptionsOutput{})
	pulumi.RegisterOutputType(RuntimeClassStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(SELinuxStrategyOptionsOutput{})
	pulumi.RegisterOutputType(SELinuxStrategyOptionsPtrOutput{})
	pulumi.RegisterOutputType(SupplementalGroupsStrategyOptionsOutput{})
	pulumi.RegisterOutputType(SupplementalGroupsStrategyOptionsPtrOutput{})
}
