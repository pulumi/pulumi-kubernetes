// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package version

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Info contains versioning information. how we'll want to distribute that information.
type Info struct {
	BuildDate string `pulumi:"buildDate"`
	Compiler  string `pulumi:"compiler"`
	// EmulationMajor is the major version of the emulation version
	EmulationMajor *string `pulumi:"emulationMajor"`
	// EmulationMinor is the minor version of the emulation version
	EmulationMinor *string `pulumi:"emulationMinor"`
	GitCommit      string  `pulumi:"gitCommit"`
	GitTreeState   string  `pulumi:"gitTreeState"`
	GitVersion     string  `pulumi:"gitVersion"`
	GoVersion      string  `pulumi:"goVersion"`
	// Major is the major version of the binary version
	Major string `pulumi:"major"`
	// MinCompatibilityMajor is the major version of the minimum compatibility version
	MinCompatibilityMajor *string `pulumi:"minCompatibilityMajor"`
	// MinCompatibilityMinor is the minor version of the minimum compatibility version
	MinCompatibilityMinor *string `pulumi:"minCompatibilityMinor"`
	// Minor is the minor version of the binary version
	Minor    string `pulumi:"minor"`
	Platform string `pulumi:"platform"`
}

// InfoInput is an input type that accepts InfoArgs and InfoOutput values.
// You can construct a concrete instance of `InfoInput` via:
//
//	InfoArgs{...}
type InfoInput interface {
	pulumi.Input

	ToInfoOutput() InfoOutput
	ToInfoOutputWithContext(context.Context) InfoOutput
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoArgs struct {
	BuildDate pulumi.StringInput `pulumi:"buildDate"`
	Compiler  pulumi.StringInput `pulumi:"compiler"`
	// EmulationMajor is the major version of the emulation version
	EmulationMajor pulumi.StringPtrInput `pulumi:"emulationMajor"`
	// EmulationMinor is the minor version of the emulation version
	EmulationMinor pulumi.StringPtrInput `pulumi:"emulationMinor"`
	GitCommit      pulumi.StringInput    `pulumi:"gitCommit"`
	GitTreeState   pulumi.StringInput    `pulumi:"gitTreeState"`
	GitVersion     pulumi.StringInput    `pulumi:"gitVersion"`
	GoVersion      pulumi.StringInput    `pulumi:"goVersion"`
	// Major is the major version of the binary version
	Major pulumi.StringInput `pulumi:"major"`
	// MinCompatibilityMajor is the major version of the minimum compatibility version
	MinCompatibilityMajor pulumi.StringPtrInput `pulumi:"minCompatibilityMajor"`
	// MinCompatibilityMinor is the minor version of the minimum compatibility version
	MinCompatibilityMinor pulumi.StringPtrInput `pulumi:"minCompatibilityMinor"`
	// Minor is the minor version of the binary version
	Minor    pulumi.StringInput `pulumi:"minor"`
	Platform pulumi.StringInput `pulumi:"platform"`
}

func (InfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Info)(nil)).Elem()
}

func (i InfoArgs) ToInfoOutput() InfoOutput {
	return i.ToInfoOutputWithContext(context.Background())
}

func (i InfoArgs) ToInfoOutputWithContext(ctx context.Context) InfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfoOutput)
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoOutput struct{ *pulumi.OutputState }

func (InfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Info)(nil)).Elem()
}

func (o InfoOutput) ToInfoOutput() InfoOutput {
	return o
}

func (o InfoOutput) ToInfoOutputWithContext(ctx context.Context) InfoOutput {
	return o
}

func (o InfoOutput) BuildDate() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.BuildDate }).(pulumi.StringOutput)
}

func (o InfoOutput) Compiler() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Compiler }).(pulumi.StringOutput)
}

// EmulationMajor is the major version of the emulation version
func (o InfoOutput) EmulationMajor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Info) *string { return v.EmulationMajor }).(pulumi.StringPtrOutput)
}

// EmulationMinor is the minor version of the emulation version
func (o InfoOutput) EmulationMinor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Info) *string { return v.EmulationMinor }).(pulumi.StringPtrOutput)
}

func (o InfoOutput) GitCommit() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitCommit }).(pulumi.StringOutput)
}

func (o InfoOutput) GitTreeState() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitTreeState }).(pulumi.StringOutput)
}

func (o InfoOutput) GitVersion() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GitVersion }).(pulumi.StringOutput)
}

func (o InfoOutput) GoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.GoVersion }).(pulumi.StringOutput)
}

// Major is the major version of the binary version
func (o InfoOutput) Major() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Major }).(pulumi.StringOutput)
}

// MinCompatibilityMajor is the major version of the minimum compatibility version
func (o InfoOutput) MinCompatibilityMajor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Info) *string { return v.MinCompatibilityMajor }).(pulumi.StringPtrOutput)
}

// MinCompatibilityMinor is the minor version of the minimum compatibility version
func (o InfoOutput) MinCompatibilityMinor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Info) *string { return v.MinCompatibilityMinor }).(pulumi.StringPtrOutput)
}

// Minor is the minor version of the binary version
func (o InfoOutput) Minor() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Minor }).(pulumi.StringOutput)
}

func (o InfoOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v Info) string { return v.Platform }).(pulumi.StringOutput)
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoPatch struct {
	BuildDate *string `pulumi:"buildDate"`
	Compiler  *string `pulumi:"compiler"`
	// EmulationMajor is the major version of the emulation version
	EmulationMajor *string `pulumi:"emulationMajor"`
	// EmulationMinor is the minor version of the emulation version
	EmulationMinor *string `pulumi:"emulationMinor"`
	GitCommit      *string `pulumi:"gitCommit"`
	GitTreeState   *string `pulumi:"gitTreeState"`
	GitVersion     *string `pulumi:"gitVersion"`
	GoVersion      *string `pulumi:"goVersion"`
	// Major is the major version of the binary version
	Major *string `pulumi:"major"`
	// MinCompatibilityMajor is the major version of the minimum compatibility version
	MinCompatibilityMajor *string `pulumi:"minCompatibilityMajor"`
	// MinCompatibilityMinor is the minor version of the minimum compatibility version
	MinCompatibilityMinor *string `pulumi:"minCompatibilityMinor"`
	// Minor is the minor version of the binary version
	Minor    *string `pulumi:"minor"`
	Platform *string `pulumi:"platform"`
}

// InfoPatchInput is an input type that accepts InfoPatchArgs and InfoPatchOutput values.
// You can construct a concrete instance of `InfoPatchInput` via:
//
//	InfoPatchArgs{...}
type InfoPatchInput interface {
	pulumi.Input

	ToInfoPatchOutput() InfoPatchOutput
	ToInfoPatchOutputWithContext(context.Context) InfoPatchOutput
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoPatchArgs struct {
	BuildDate pulumi.StringPtrInput `pulumi:"buildDate"`
	Compiler  pulumi.StringPtrInput `pulumi:"compiler"`
	// EmulationMajor is the major version of the emulation version
	EmulationMajor pulumi.StringPtrInput `pulumi:"emulationMajor"`
	// EmulationMinor is the minor version of the emulation version
	EmulationMinor pulumi.StringPtrInput `pulumi:"emulationMinor"`
	GitCommit      pulumi.StringPtrInput `pulumi:"gitCommit"`
	GitTreeState   pulumi.StringPtrInput `pulumi:"gitTreeState"`
	GitVersion     pulumi.StringPtrInput `pulumi:"gitVersion"`
	GoVersion      pulumi.StringPtrInput `pulumi:"goVersion"`
	// Major is the major version of the binary version
	Major pulumi.StringPtrInput `pulumi:"major"`
	// MinCompatibilityMajor is the major version of the minimum compatibility version
	MinCompatibilityMajor pulumi.StringPtrInput `pulumi:"minCompatibilityMajor"`
	// MinCompatibilityMinor is the minor version of the minimum compatibility version
	MinCompatibilityMinor pulumi.StringPtrInput `pulumi:"minCompatibilityMinor"`
	// Minor is the minor version of the binary version
	Minor    pulumi.StringPtrInput `pulumi:"minor"`
	Platform pulumi.StringPtrInput `pulumi:"platform"`
}

func (InfoPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfoPatch)(nil)).Elem()
}

func (i InfoPatchArgs) ToInfoPatchOutput() InfoPatchOutput {
	return i.ToInfoPatchOutputWithContext(context.Background())
}

func (i InfoPatchArgs) ToInfoPatchOutputWithContext(ctx context.Context) InfoPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfoPatchOutput)
}

// Info contains versioning information. how we'll want to distribute that information.
type InfoPatchOutput struct{ *pulumi.OutputState }

func (InfoPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfoPatch)(nil)).Elem()
}

func (o InfoPatchOutput) ToInfoPatchOutput() InfoPatchOutput {
	return o
}

func (o InfoPatchOutput) ToInfoPatchOutputWithContext(ctx context.Context) InfoPatchOutput {
	return o
}

func (o InfoPatchOutput) BuildDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.BuildDate }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) Compiler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.Compiler }).(pulumi.StringPtrOutput)
}

// EmulationMajor is the major version of the emulation version
func (o InfoPatchOutput) EmulationMajor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.EmulationMajor }).(pulumi.StringPtrOutput)
}

// EmulationMinor is the minor version of the emulation version
func (o InfoPatchOutput) EmulationMinor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.EmulationMinor }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) GitCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.GitCommit }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) GitTreeState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.GitTreeState }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) GitVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.GitVersion }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) GoVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.GoVersion }).(pulumi.StringPtrOutput)
}

// Major is the major version of the binary version
func (o InfoPatchOutput) Major() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.Major }).(pulumi.StringPtrOutput)
}

// MinCompatibilityMajor is the major version of the minimum compatibility version
func (o InfoPatchOutput) MinCompatibilityMajor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.MinCompatibilityMajor }).(pulumi.StringPtrOutput)
}

// MinCompatibilityMinor is the minor version of the minimum compatibility version
func (o InfoPatchOutput) MinCompatibilityMinor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.MinCompatibilityMinor }).(pulumi.StringPtrOutput)
}

// Minor is the minor version of the binary version
func (o InfoPatchOutput) Minor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.Minor }).(pulumi.StringPtrOutput)
}

func (o InfoPatchOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfoPatch) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfoInput)(nil)).Elem(), InfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfoPatchInput)(nil)).Elem(), InfoPatchArgs{})
	pulumi.RegisterOutputType(InfoOutput{})
	pulumi.RegisterOutputType(InfoPatchOutput{})
}
