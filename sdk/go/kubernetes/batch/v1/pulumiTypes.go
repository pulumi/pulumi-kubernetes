// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// CronJob represents the configuration of a single cron job.
type CronJobType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *CronJobSpec `pulumi:"spec"`
	// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *CronJobStatus `pulumi:"status"`
}

// CronJobTypeInput is an input type that accepts CronJobTypeArgs and CronJobTypeOutput values.
// You can construct a concrete instance of `CronJobTypeInput` via:
//
//	CronJobTypeArgs{...}
type CronJobTypeInput interface {
	pulumi.Input

	ToCronJobTypeOutput() CronJobTypeOutput
	ToCronJobTypeOutputWithContext(context.Context) CronJobTypeOutput
}

// CronJob represents the configuration of a single cron job.
type CronJobTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec CronJobSpecPtrInput `pulumi:"spec"`
	// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status CronJobStatusPtrInput `pulumi:"status"`
}

func (CronJobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobType)(nil)).Elem()
}

func (i CronJobTypeArgs) ToCronJobTypeOutput() CronJobTypeOutput {
	return i.ToCronJobTypeOutputWithContext(context.Background())
}

func (i CronJobTypeArgs) ToCronJobTypeOutputWithContext(ctx context.Context) CronJobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobTypeOutput)
}

// CronJobTypeArrayInput is an input type that accepts CronJobTypeArray and CronJobTypeArrayOutput values.
// You can construct a concrete instance of `CronJobTypeArrayInput` via:
//
//	CronJobTypeArray{ CronJobTypeArgs{...} }
type CronJobTypeArrayInput interface {
	pulumi.Input

	ToCronJobTypeArrayOutput() CronJobTypeArrayOutput
	ToCronJobTypeArrayOutputWithContext(context.Context) CronJobTypeArrayOutput
}

type CronJobTypeArray []CronJobTypeInput

func (CronJobTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CronJobType)(nil)).Elem()
}

func (i CronJobTypeArray) ToCronJobTypeArrayOutput() CronJobTypeArrayOutput {
	return i.ToCronJobTypeArrayOutputWithContext(context.Background())
}

func (i CronJobTypeArray) ToCronJobTypeArrayOutputWithContext(ctx context.Context) CronJobTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobTypeArrayOutput)
}

// CronJob represents the configuration of a single cron job.
type CronJobTypeOutput struct{ *pulumi.OutputState }

func (CronJobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobType)(nil)).Elem()
}

func (o CronJobTypeOutput) ToCronJobTypeOutput() CronJobTypeOutput {
	return o
}

func (o CronJobTypeOutput) ToCronJobTypeOutputWithContext(ctx context.Context) CronJobTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CronJobTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CronJobTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CronJobTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CronJobType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o CronJobTypeOutput) Spec() CronJobSpecPtrOutput {
	return o.ApplyT(func(v CronJobType) *CronJobSpec { return v.Spec }).(CronJobSpecPtrOutput)
}

// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o CronJobTypeOutput) Status() CronJobStatusPtrOutput {
	return o.ApplyT(func(v CronJobType) *CronJobStatus { return v.Status }).(CronJobStatusPtrOutput)
}

type CronJobTypeArrayOutput struct{ *pulumi.OutputState }

func (CronJobTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CronJobType)(nil)).Elem()
}

func (o CronJobTypeArrayOutput) ToCronJobTypeArrayOutput() CronJobTypeArrayOutput {
	return o
}

func (o CronJobTypeArrayOutput) ToCronJobTypeArrayOutputWithContext(ctx context.Context) CronJobTypeArrayOutput {
	return o
}

func (o CronJobTypeArrayOutput) Index(i pulumi.IntInput) CronJobTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CronJobType {
		return vs[0].([]CronJobType)[vs[1].(int)]
	}).(CronJobTypeOutput)
}

// CronJobList is a collection of cron jobs.
type CronJobListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CronJobs.
	Items []CronJobType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CronJobListTypeInput is an input type that accepts CronJobListTypeArgs and CronJobListTypeOutput values.
// You can construct a concrete instance of `CronJobListTypeInput` via:
//
//	CronJobListTypeArgs{...}
type CronJobListTypeInput interface {
	pulumi.Input

	ToCronJobListTypeOutput() CronJobListTypeOutput
	ToCronJobListTypeOutputWithContext(context.Context) CronJobListTypeOutput
}

// CronJobList is a collection of cron jobs.
type CronJobListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CronJobs.
	Items CronJobTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CronJobListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobListType)(nil)).Elem()
}

func (i CronJobListTypeArgs) ToCronJobListTypeOutput() CronJobListTypeOutput {
	return i.ToCronJobListTypeOutputWithContext(context.Background())
}

func (i CronJobListTypeArgs) ToCronJobListTypeOutputWithContext(ctx context.Context) CronJobListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobListTypeOutput)
}

// CronJobList is a collection of cron jobs.
type CronJobListTypeOutput struct{ *pulumi.OutputState }

func (CronJobListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobListType)(nil)).Elem()
}

func (o CronJobListTypeOutput) ToCronJobListTypeOutput() CronJobListTypeOutput {
	return o
}

func (o CronJobListTypeOutput) ToCronJobListTypeOutputWithContext(ctx context.Context) CronJobListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CronJobListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CronJobs.
func (o CronJobListTypeOutput) Items() CronJobTypeArrayOutput {
	return o.ApplyT(func(v CronJobListType) []CronJobType { return v.Items }).(CronJobTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CronJobListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CronJobListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CronJobListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CronJob represents the configuration of a single cron job.
type CronJobPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *CronJobSpecPatch `pulumi:"spec"`
	// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *CronJobStatusPatch `pulumi:"status"`
}

// CronJobPatchTypeInput is an input type that accepts CronJobPatchTypeArgs and CronJobPatchTypeOutput values.
// You can construct a concrete instance of `CronJobPatchTypeInput` via:
//
//	CronJobPatchTypeArgs{...}
type CronJobPatchTypeInput interface {
	pulumi.Input

	ToCronJobPatchTypeOutput() CronJobPatchTypeOutput
	ToCronJobPatchTypeOutputWithContext(context.Context) CronJobPatchTypeOutput
}

// CronJob represents the configuration of a single cron job.
type CronJobPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec CronJobSpecPatchPtrInput `pulumi:"spec"`
	// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status CronJobStatusPatchPtrInput `pulumi:"status"`
}

func (CronJobPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobPatchType)(nil)).Elem()
}

func (i CronJobPatchTypeArgs) ToCronJobPatchTypeOutput() CronJobPatchTypeOutput {
	return i.ToCronJobPatchTypeOutputWithContext(context.Background())
}

func (i CronJobPatchTypeArgs) ToCronJobPatchTypeOutputWithContext(ctx context.Context) CronJobPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobPatchTypeOutput)
}

// CronJob represents the configuration of a single cron job.
type CronJobPatchTypeOutput struct{ *pulumi.OutputState }

func (CronJobPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobPatchType)(nil)).Elem()
}

func (o CronJobPatchTypeOutput) ToCronJobPatchTypeOutput() CronJobPatchTypeOutput {
	return o
}

func (o CronJobPatchTypeOutput) ToCronJobPatchTypeOutputWithContext(ctx context.Context) CronJobPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CronJobPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CronJobPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CronJobPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v CronJobPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o CronJobPatchTypeOutput) Spec() CronJobSpecPatchPtrOutput {
	return o.ApplyT(func(v CronJobPatchType) *CronJobSpecPatch { return v.Spec }).(CronJobSpecPatchPtrOutput)
}

// Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o CronJobPatchTypeOutput) Status() CronJobStatusPatchPtrOutput {
	return o.ApplyT(func(v CronJobPatchType) *CronJobStatusPatch { return v.Status }).(CronJobStatusPatchPtrOutput)
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy *string `pulumi:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit *int `pulumi:"failedJobsHistoryLimit"`
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate JobTemplateSpec `pulumi:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `pulumi:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *int `pulumi:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `pulumi:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone *string `pulumi:"timeZone"`
}

// CronJobSpecInput is an input type that accepts CronJobSpecArgs and CronJobSpecOutput values.
// You can construct a concrete instance of `CronJobSpecInput` via:
//
//	CronJobSpecArgs{...}
type CronJobSpecInput interface {
	pulumi.Input

	ToCronJobSpecOutput() CronJobSpecOutput
	ToCronJobSpecOutputWithContext(context.Context) CronJobSpecOutput
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpecArgs struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy pulumi.StringPtrInput `pulumi:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit pulumi.IntPtrInput `pulumi:"failedJobsHistoryLimit"`
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate JobTemplateSpecInput `pulumi:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds pulumi.IntPtrInput `pulumi:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit pulumi.IntPtrInput `pulumi:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (CronJobSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobSpec)(nil)).Elem()
}

func (i CronJobSpecArgs) ToCronJobSpecOutput() CronJobSpecOutput {
	return i.ToCronJobSpecOutputWithContext(context.Background())
}

func (i CronJobSpecArgs) ToCronJobSpecOutputWithContext(ctx context.Context) CronJobSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecOutput)
}

func (i CronJobSpecArgs) ToCronJobSpecPtrOutput() CronJobSpecPtrOutput {
	return i.ToCronJobSpecPtrOutputWithContext(context.Background())
}

func (i CronJobSpecArgs) ToCronJobSpecPtrOutputWithContext(ctx context.Context) CronJobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecOutput).ToCronJobSpecPtrOutputWithContext(ctx)
}

// CronJobSpecPtrInput is an input type that accepts CronJobSpecArgs, CronJobSpecPtr and CronJobSpecPtrOutput values.
// You can construct a concrete instance of `CronJobSpecPtrInput` via:
//
//	        CronJobSpecArgs{...}
//
//	or:
//
//	        nil
type CronJobSpecPtrInput interface {
	pulumi.Input

	ToCronJobSpecPtrOutput() CronJobSpecPtrOutput
	ToCronJobSpecPtrOutputWithContext(context.Context) CronJobSpecPtrOutput
}

type cronJobSpecPtrType CronJobSpecArgs

func CronJobSpecPtr(v *CronJobSpecArgs) CronJobSpecPtrInput {
	return (*cronJobSpecPtrType)(v)
}

func (*cronJobSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobSpec)(nil)).Elem()
}

func (i *cronJobSpecPtrType) ToCronJobSpecPtrOutput() CronJobSpecPtrOutput {
	return i.ToCronJobSpecPtrOutputWithContext(context.Background())
}

func (i *cronJobSpecPtrType) ToCronJobSpecPtrOutputWithContext(ctx context.Context) CronJobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecPtrOutput)
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpecOutput struct{ *pulumi.OutputState }

func (CronJobSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobSpec)(nil)).Elem()
}

func (o CronJobSpecOutput) ToCronJobSpecOutput() CronJobSpecOutput {
	return o
}

func (o CronJobSpecOutput) ToCronJobSpecOutputWithContext(ctx context.Context) CronJobSpecOutput {
	return o
}

func (o CronJobSpecOutput) ToCronJobSpecPtrOutput() CronJobSpecPtrOutput {
	return o.ToCronJobSpecPtrOutputWithContext(context.Background())
}

func (o CronJobSpecOutput) ToCronJobSpecPtrOutputWithContext(ctx context.Context) CronJobSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronJobSpec) *CronJobSpec {
		return &v
	}).(CronJobSpecPtrOutput)
}

// Specifies how to treat concurrent executions of a Job. Valid values are:
//
// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
func (o CronJobSpecOutput) ConcurrencyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *string { return v.ConcurrencyPolicy }).(pulumi.StringPtrOutput)
}

// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
func (o CronJobSpecOutput) FailedJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *int { return v.FailedJobsHistoryLimit }).(pulumi.IntPtrOutput)
}

// Specifies the job that will be created when executing a CronJob.
func (o CronJobSpecOutput) JobTemplate() JobTemplateSpecOutput {
	return o.ApplyT(func(v CronJobSpec) JobTemplateSpec { return v.JobTemplate }).(JobTemplateSpecOutput)
}

// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o CronJobSpecOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v CronJobSpec) string { return v.Schedule }).(pulumi.StringOutput)
}

// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
func (o CronJobSpecOutput) StartingDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *int { return v.StartingDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
func (o CronJobSpecOutput) SuccessfulJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *int { return v.SuccessfulJobsHistoryLimit }).(pulumi.IntPtrOutput)
}

// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
func (o CronJobSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
func (o CronJobSpecOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobSpec) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronJobSpecPtrOutput struct{ *pulumi.OutputState }

func (CronJobSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobSpec)(nil)).Elem()
}

func (o CronJobSpecPtrOutput) ToCronJobSpecPtrOutput() CronJobSpecPtrOutput {
	return o
}

func (o CronJobSpecPtrOutput) ToCronJobSpecPtrOutputWithContext(ctx context.Context) CronJobSpecPtrOutput {
	return o
}

func (o CronJobSpecPtrOutput) Elem() CronJobSpecOutput {
	return o.ApplyT(func(v *CronJobSpec) CronJobSpec {
		if v != nil {
			return *v
		}
		var ret CronJobSpec
		return ret
	}).(CronJobSpecOutput)
}

// Specifies how to treat concurrent executions of a Job. Valid values are:
//
// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
func (o CronJobSpecPtrOutput) ConcurrencyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConcurrencyPolicy
	}).(pulumi.StringPtrOutput)
}

// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
func (o CronJobSpecPtrOutput) FailedJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *int {
		if v == nil {
			return nil
		}
		return v.FailedJobsHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies the job that will be created when executing a CronJob.
func (o CronJobSpecPtrOutput) JobTemplate() JobTemplateSpecPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *JobTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.JobTemplate
	}).(JobTemplateSpecPtrOutput)
}

// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o CronJobSpecPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(pulumi.StringPtrOutput)
}

// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
func (o CronJobSpecPtrOutput) StartingDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *int {
		if v == nil {
			return nil
		}
		return v.StartingDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
func (o CronJobSpecPtrOutput) SuccessfulJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *int {
		if v == nil {
			return nil
		}
		return v.SuccessfulJobsHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
func (o CronJobSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
func (o CronJobSpecPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpec) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpecPatch struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy *string `pulumi:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit *int `pulumi:"failedJobsHistoryLimit"`
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate *JobTemplateSpecPatch `pulumi:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule *string `pulumi:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *int `pulumi:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `pulumi:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone *string `pulumi:"timeZone"`
}

// CronJobSpecPatchInput is an input type that accepts CronJobSpecPatchArgs and CronJobSpecPatchOutput values.
// You can construct a concrete instance of `CronJobSpecPatchInput` via:
//
//	CronJobSpecPatchArgs{...}
type CronJobSpecPatchInput interface {
	pulumi.Input

	ToCronJobSpecPatchOutput() CronJobSpecPatchOutput
	ToCronJobSpecPatchOutputWithContext(context.Context) CronJobSpecPatchOutput
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpecPatchArgs struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy pulumi.StringPtrInput `pulumi:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit pulumi.IntPtrInput `pulumi:"failedJobsHistoryLimit"`
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate JobTemplateSpecPatchPtrInput `pulumi:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds pulumi.IntPtrInput `pulumi:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit pulumi.IntPtrInput `pulumi:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (CronJobSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobSpecPatch)(nil)).Elem()
}

func (i CronJobSpecPatchArgs) ToCronJobSpecPatchOutput() CronJobSpecPatchOutput {
	return i.ToCronJobSpecPatchOutputWithContext(context.Background())
}

func (i CronJobSpecPatchArgs) ToCronJobSpecPatchOutputWithContext(ctx context.Context) CronJobSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecPatchOutput)
}

func (i CronJobSpecPatchArgs) ToCronJobSpecPatchPtrOutput() CronJobSpecPatchPtrOutput {
	return i.ToCronJobSpecPatchPtrOutputWithContext(context.Background())
}

func (i CronJobSpecPatchArgs) ToCronJobSpecPatchPtrOutputWithContext(ctx context.Context) CronJobSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecPatchOutput).ToCronJobSpecPatchPtrOutputWithContext(ctx)
}

// CronJobSpecPatchPtrInput is an input type that accepts CronJobSpecPatchArgs, CronJobSpecPatchPtr and CronJobSpecPatchPtrOutput values.
// You can construct a concrete instance of `CronJobSpecPatchPtrInput` via:
//
//	        CronJobSpecPatchArgs{...}
//
//	or:
//
//	        nil
type CronJobSpecPatchPtrInput interface {
	pulumi.Input

	ToCronJobSpecPatchPtrOutput() CronJobSpecPatchPtrOutput
	ToCronJobSpecPatchPtrOutputWithContext(context.Context) CronJobSpecPatchPtrOutput
}

type cronJobSpecPatchPtrType CronJobSpecPatchArgs

func CronJobSpecPatchPtr(v *CronJobSpecPatchArgs) CronJobSpecPatchPtrInput {
	return (*cronJobSpecPatchPtrType)(v)
}

func (*cronJobSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobSpecPatch)(nil)).Elem()
}

func (i *cronJobSpecPatchPtrType) ToCronJobSpecPatchPtrOutput() CronJobSpecPatchPtrOutput {
	return i.ToCronJobSpecPatchPtrOutputWithContext(context.Background())
}

func (i *cronJobSpecPatchPtrType) ToCronJobSpecPatchPtrOutputWithContext(ctx context.Context) CronJobSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobSpecPatchPtrOutput)
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpecPatchOutput struct{ *pulumi.OutputState }

func (CronJobSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobSpecPatch)(nil)).Elem()
}

func (o CronJobSpecPatchOutput) ToCronJobSpecPatchOutput() CronJobSpecPatchOutput {
	return o
}

func (o CronJobSpecPatchOutput) ToCronJobSpecPatchOutputWithContext(ctx context.Context) CronJobSpecPatchOutput {
	return o
}

func (o CronJobSpecPatchOutput) ToCronJobSpecPatchPtrOutput() CronJobSpecPatchPtrOutput {
	return o.ToCronJobSpecPatchPtrOutputWithContext(context.Background())
}

func (o CronJobSpecPatchOutput) ToCronJobSpecPatchPtrOutputWithContext(ctx context.Context) CronJobSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronJobSpecPatch) *CronJobSpecPatch {
		return &v
	}).(CronJobSpecPatchPtrOutput)
}

// Specifies how to treat concurrent executions of a Job. Valid values are:
//
// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
func (o CronJobSpecPatchOutput) ConcurrencyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *string { return v.ConcurrencyPolicy }).(pulumi.StringPtrOutput)
}

// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
func (o CronJobSpecPatchOutput) FailedJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *int { return v.FailedJobsHistoryLimit }).(pulumi.IntPtrOutput)
}

// Specifies the job that will be created when executing a CronJob.
func (o CronJobSpecPatchOutput) JobTemplate() JobTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *JobTemplateSpecPatch { return v.JobTemplate }).(JobTemplateSpecPatchPtrOutput)
}

// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o CronJobSpecPatchOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
func (o CronJobSpecPatchOutput) StartingDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *int { return v.StartingDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
func (o CronJobSpecPatchOutput) SuccessfulJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *int { return v.SuccessfulJobsHistoryLimit }).(pulumi.IntPtrOutput)
}

// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
func (o CronJobSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
func (o CronJobSpecPatchOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobSpecPatch) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronJobSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (CronJobSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobSpecPatch)(nil)).Elem()
}

func (o CronJobSpecPatchPtrOutput) ToCronJobSpecPatchPtrOutput() CronJobSpecPatchPtrOutput {
	return o
}

func (o CronJobSpecPatchPtrOutput) ToCronJobSpecPatchPtrOutputWithContext(ctx context.Context) CronJobSpecPatchPtrOutput {
	return o
}

func (o CronJobSpecPatchPtrOutput) Elem() CronJobSpecPatchOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) CronJobSpecPatch {
		if v != nil {
			return *v
		}
		var ret CronJobSpecPatch
		return ret
	}).(CronJobSpecPatchOutput)
}

// Specifies how to treat concurrent executions of a Job. Valid values are:
//
// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
func (o CronJobSpecPatchPtrOutput) ConcurrencyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ConcurrencyPolicy
	}).(pulumi.StringPtrOutput)
}

// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
func (o CronJobSpecPatchPtrOutput) FailedJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.FailedJobsHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies the job that will be created when executing a CronJob.
func (o CronJobSpecPatchPtrOutput) JobTemplate() JobTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *JobTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.JobTemplate
	}).(JobTemplateSpecPatchPtrOutput)
}

// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o CronJobSpecPatchPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
func (o CronJobSpecPatchPtrOutput) StartingDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.StartingDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
func (o CronJobSpecPatchPtrOutput) SuccessfulJobsHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.SuccessfulJobsHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
func (o CronJobSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
func (o CronJobSpecPatchPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatus struct {
	// A list of pointers to currently running jobs.
	Active []corev1.ObjectReference `pulumi:"active"`
	// Information when was the last time the job was successfully scheduled.
	LastScheduleTime *string `pulumi:"lastScheduleTime"`
	// Information when was the last time the job successfully completed.
	LastSuccessfulTime *string `pulumi:"lastSuccessfulTime"`
}

// CronJobStatusInput is an input type that accepts CronJobStatusArgs and CronJobStatusOutput values.
// You can construct a concrete instance of `CronJobStatusInput` via:
//
//	CronJobStatusArgs{...}
type CronJobStatusInput interface {
	pulumi.Input

	ToCronJobStatusOutput() CronJobStatusOutput
	ToCronJobStatusOutputWithContext(context.Context) CronJobStatusOutput
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatusArgs struct {
	// A list of pointers to currently running jobs.
	Active corev1.ObjectReferenceArrayInput `pulumi:"active"`
	// Information when was the last time the job was successfully scheduled.
	LastScheduleTime pulumi.StringPtrInput `pulumi:"lastScheduleTime"`
	// Information when was the last time the job successfully completed.
	LastSuccessfulTime pulumi.StringPtrInput `pulumi:"lastSuccessfulTime"`
}

func (CronJobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobStatus)(nil)).Elem()
}

func (i CronJobStatusArgs) ToCronJobStatusOutput() CronJobStatusOutput {
	return i.ToCronJobStatusOutputWithContext(context.Background())
}

func (i CronJobStatusArgs) ToCronJobStatusOutputWithContext(ctx context.Context) CronJobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusOutput)
}

func (i CronJobStatusArgs) ToCronJobStatusPtrOutput() CronJobStatusPtrOutput {
	return i.ToCronJobStatusPtrOutputWithContext(context.Background())
}

func (i CronJobStatusArgs) ToCronJobStatusPtrOutputWithContext(ctx context.Context) CronJobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusOutput).ToCronJobStatusPtrOutputWithContext(ctx)
}

// CronJobStatusPtrInput is an input type that accepts CronJobStatusArgs, CronJobStatusPtr and CronJobStatusPtrOutput values.
// You can construct a concrete instance of `CronJobStatusPtrInput` via:
//
//	        CronJobStatusArgs{...}
//
//	or:
//
//	        nil
type CronJobStatusPtrInput interface {
	pulumi.Input

	ToCronJobStatusPtrOutput() CronJobStatusPtrOutput
	ToCronJobStatusPtrOutputWithContext(context.Context) CronJobStatusPtrOutput
}

type cronJobStatusPtrType CronJobStatusArgs

func CronJobStatusPtr(v *CronJobStatusArgs) CronJobStatusPtrInput {
	return (*cronJobStatusPtrType)(v)
}

func (*cronJobStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobStatus)(nil)).Elem()
}

func (i *cronJobStatusPtrType) ToCronJobStatusPtrOutput() CronJobStatusPtrOutput {
	return i.ToCronJobStatusPtrOutputWithContext(context.Background())
}

func (i *cronJobStatusPtrType) ToCronJobStatusPtrOutputWithContext(ctx context.Context) CronJobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusPtrOutput)
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatusOutput struct{ *pulumi.OutputState }

func (CronJobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobStatus)(nil)).Elem()
}

func (o CronJobStatusOutput) ToCronJobStatusOutput() CronJobStatusOutput {
	return o
}

func (o CronJobStatusOutput) ToCronJobStatusOutputWithContext(ctx context.Context) CronJobStatusOutput {
	return o
}

func (o CronJobStatusOutput) ToCronJobStatusPtrOutput() CronJobStatusPtrOutput {
	return o.ToCronJobStatusPtrOutputWithContext(context.Background())
}

func (o CronJobStatusOutput) ToCronJobStatusPtrOutputWithContext(ctx context.Context) CronJobStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronJobStatus) *CronJobStatus {
		return &v
	}).(CronJobStatusPtrOutput)
}

// A list of pointers to currently running jobs.
func (o CronJobStatusOutput) Active() corev1.ObjectReferenceArrayOutput {
	return o.ApplyT(func(v CronJobStatus) []corev1.ObjectReference { return v.Active }).(corev1.ObjectReferenceArrayOutput)
}

// Information when was the last time the job was successfully scheduled.
func (o CronJobStatusOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobStatus) *string { return v.LastScheduleTime }).(pulumi.StringPtrOutput)
}

// Information when was the last time the job successfully completed.
func (o CronJobStatusOutput) LastSuccessfulTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobStatus) *string { return v.LastSuccessfulTime }).(pulumi.StringPtrOutput)
}

type CronJobStatusPtrOutput struct{ *pulumi.OutputState }

func (CronJobStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobStatus)(nil)).Elem()
}

func (o CronJobStatusPtrOutput) ToCronJobStatusPtrOutput() CronJobStatusPtrOutput {
	return o
}

func (o CronJobStatusPtrOutput) ToCronJobStatusPtrOutputWithContext(ctx context.Context) CronJobStatusPtrOutput {
	return o
}

func (o CronJobStatusPtrOutput) Elem() CronJobStatusOutput {
	return o.ApplyT(func(v *CronJobStatus) CronJobStatus {
		if v != nil {
			return *v
		}
		var ret CronJobStatus
		return ret
	}).(CronJobStatusOutput)
}

// A list of pointers to currently running jobs.
func (o CronJobStatusPtrOutput) Active() corev1.ObjectReferenceArrayOutput {
	return o.ApplyT(func(v *CronJobStatus) []corev1.ObjectReference {
		if v == nil {
			return nil
		}
		return v.Active
	}).(corev1.ObjectReferenceArrayOutput)
}

// Information when was the last time the job was successfully scheduled.
func (o CronJobStatusPtrOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastScheduleTime
	}).(pulumi.StringPtrOutput)
}

// Information when was the last time the job successfully completed.
func (o CronJobStatusPtrOutput) LastSuccessfulTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastSuccessfulTime
	}).(pulumi.StringPtrOutput)
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatusPatch struct {
	// A list of pointers to currently running jobs.
	Active []corev1.ObjectReferencePatch `pulumi:"active"`
	// Information when was the last time the job was successfully scheduled.
	LastScheduleTime *string `pulumi:"lastScheduleTime"`
	// Information when was the last time the job successfully completed.
	LastSuccessfulTime *string `pulumi:"lastSuccessfulTime"`
}

// CronJobStatusPatchInput is an input type that accepts CronJobStatusPatchArgs and CronJobStatusPatchOutput values.
// You can construct a concrete instance of `CronJobStatusPatchInput` via:
//
//	CronJobStatusPatchArgs{...}
type CronJobStatusPatchInput interface {
	pulumi.Input

	ToCronJobStatusPatchOutput() CronJobStatusPatchOutput
	ToCronJobStatusPatchOutputWithContext(context.Context) CronJobStatusPatchOutput
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatusPatchArgs struct {
	// A list of pointers to currently running jobs.
	Active corev1.ObjectReferencePatchArrayInput `pulumi:"active"`
	// Information when was the last time the job was successfully scheduled.
	LastScheduleTime pulumi.StringPtrInput `pulumi:"lastScheduleTime"`
	// Information when was the last time the job successfully completed.
	LastSuccessfulTime pulumi.StringPtrInput `pulumi:"lastSuccessfulTime"`
}

func (CronJobStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobStatusPatch)(nil)).Elem()
}

func (i CronJobStatusPatchArgs) ToCronJobStatusPatchOutput() CronJobStatusPatchOutput {
	return i.ToCronJobStatusPatchOutputWithContext(context.Background())
}

func (i CronJobStatusPatchArgs) ToCronJobStatusPatchOutputWithContext(ctx context.Context) CronJobStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusPatchOutput)
}

func (i CronJobStatusPatchArgs) ToCronJobStatusPatchPtrOutput() CronJobStatusPatchPtrOutput {
	return i.ToCronJobStatusPatchPtrOutputWithContext(context.Background())
}

func (i CronJobStatusPatchArgs) ToCronJobStatusPatchPtrOutputWithContext(ctx context.Context) CronJobStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusPatchOutput).ToCronJobStatusPatchPtrOutputWithContext(ctx)
}

// CronJobStatusPatchPtrInput is an input type that accepts CronJobStatusPatchArgs, CronJobStatusPatchPtr and CronJobStatusPatchPtrOutput values.
// You can construct a concrete instance of `CronJobStatusPatchPtrInput` via:
//
//	        CronJobStatusPatchArgs{...}
//
//	or:
//
//	        nil
type CronJobStatusPatchPtrInput interface {
	pulumi.Input

	ToCronJobStatusPatchPtrOutput() CronJobStatusPatchPtrOutput
	ToCronJobStatusPatchPtrOutputWithContext(context.Context) CronJobStatusPatchPtrOutput
}

type cronJobStatusPatchPtrType CronJobStatusPatchArgs

func CronJobStatusPatchPtr(v *CronJobStatusPatchArgs) CronJobStatusPatchPtrInput {
	return (*cronJobStatusPatchPtrType)(v)
}

func (*cronJobStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobStatusPatch)(nil)).Elem()
}

func (i *cronJobStatusPatchPtrType) ToCronJobStatusPatchPtrOutput() CronJobStatusPatchPtrOutput {
	return i.ToCronJobStatusPatchPtrOutputWithContext(context.Background())
}

func (i *cronJobStatusPatchPtrType) ToCronJobStatusPatchPtrOutputWithContext(ctx context.Context) CronJobStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobStatusPatchPtrOutput)
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatusPatchOutput struct{ *pulumi.OutputState }

func (CronJobStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobStatusPatch)(nil)).Elem()
}

func (o CronJobStatusPatchOutput) ToCronJobStatusPatchOutput() CronJobStatusPatchOutput {
	return o
}

func (o CronJobStatusPatchOutput) ToCronJobStatusPatchOutputWithContext(ctx context.Context) CronJobStatusPatchOutput {
	return o
}

func (o CronJobStatusPatchOutput) ToCronJobStatusPatchPtrOutput() CronJobStatusPatchPtrOutput {
	return o.ToCronJobStatusPatchPtrOutputWithContext(context.Background())
}

func (o CronJobStatusPatchOutput) ToCronJobStatusPatchPtrOutputWithContext(ctx context.Context) CronJobStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronJobStatusPatch) *CronJobStatusPatch {
		return &v
	}).(CronJobStatusPatchPtrOutput)
}

// A list of pointers to currently running jobs.
func (o CronJobStatusPatchOutput) Active() corev1.ObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v CronJobStatusPatch) []corev1.ObjectReferencePatch { return v.Active }).(corev1.ObjectReferencePatchArrayOutput)
}

// Information when was the last time the job was successfully scheduled.
func (o CronJobStatusPatchOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobStatusPatch) *string { return v.LastScheduleTime }).(pulumi.StringPtrOutput)
}

// Information when was the last time the job successfully completed.
func (o CronJobStatusPatchOutput) LastSuccessfulTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronJobStatusPatch) *string { return v.LastSuccessfulTime }).(pulumi.StringPtrOutput)
}

type CronJobStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (CronJobStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobStatusPatch)(nil)).Elem()
}

func (o CronJobStatusPatchPtrOutput) ToCronJobStatusPatchPtrOutput() CronJobStatusPatchPtrOutput {
	return o
}

func (o CronJobStatusPatchPtrOutput) ToCronJobStatusPatchPtrOutputWithContext(ctx context.Context) CronJobStatusPatchPtrOutput {
	return o
}

func (o CronJobStatusPatchPtrOutput) Elem() CronJobStatusPatchOutput {
	return o.ApplyT(func(v *CronJobStatusPatch) CronJobStatusPatch {
		if v != nil {
			return *v
		}
		var ret CronJobStatusPatch
		return ret
	}).(CronJobStatusPatchOutput)
}

// A list of pointers to currently running jobs.
func (o CronJobStatusPatchPtrOutput) Active() corev1.ObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v *CronJobStatusPatch) []corev1.ObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.Active
	}).(corev1.ObjectReferencePatchArrayOutput)
}

// Information when was the last time the job was successfully scheduled.
func (o CronJobStatusPatchPtrOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastScheduleTime
	}).(pulumi.StringPtrOutput)
}

// Information when was the last time the job successfully completed.
func (o CronJobStatusPatchPtrOutput) LastSuccessfulTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastSuccessfulTime
	}).(pulumi.StringPtrOutput)
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpec `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *JobStatus `pulumi:"status"`
}

// JobTypeInput is an input type that accepts JobTypeArgs and JobTypeOutput values.
// You can construct a concrete instance of `JobTypeInput` via:
//
//	JobTypeArgs{...}
type JobTypeInput interface {
	pulumi.Input

	ToJobTypeOutput() JobTypeOutput
	ToJobTypeOutputWithContext(context.Context) JobTypeOutput
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPtrInput `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status JobStatusPtrInput `pulumi:"status"`
}

func (JobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (i JobTypeArgs) ToJobTypeOutput() JobTypeOutput {
	return i.ToJobTypeOutputWithContext(context.Background())
}

func (i JobTypeArgs) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTypeOutput)
}

// JobTypeArrayInput is an input type that accepts JobTypeArray and JobTypeArrayOutput values.
// You can construct a concrete instance of `JobTypeArrayInput` via:
//
//	JobTypeArray{ JobTypeArgs{...} }
type JobTypeArrayInput interface {
	pulumi.Input

	ToJobTypeArrayOutput() JobTypeArrayOutput
	ToJobTypeArrayOutputWithContext(context.Context) JobTypeArrayOutput
}

type JobTypeArray []JobTypeInput

func (JobTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobType)(nil)).Elem()
}

func (i JobTypeArray) ToJobTypeArrayOutput() JobTypeArrayOutput {
	return i.ToJobTypeArrayOutputWithContext(context.Background())
}

func (i JobTypeArray) ToJobTypeArrayOutputWithContext(ctx context.Context) JobTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTypeArrayOutput)
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobTypeOutput struct{ *pulumi.OutputState }

func (JobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (o JobTypeOutput) ToJobTypeOutput() JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v JobType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTypeOutput) Spec() JobSpecPtrOutput {
	return o.ApplyT(func(v JobType) *JobSpec { return v.Spec }).(JobSpecPtrOutput)
}

// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTypeOutput) Status() JobStatusPtrOutput {
	return o.ApplyT(func(v JobType) *JobStatus { return v.Status }).(JobStatusPtrOutput)
}

type JobTypeArrayOutput struct{ *pulumi.OutputState }

func (JobTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobType)(nil)).Elem()
}

func (o JobTypeArrayOutput) ToJobTypeArrayOutput() JobTypeArrayOutput {
	return o
}

func (o JobTypeArrayOutput) ToJobTypeArrayOutputWithContext(ctx context.Context) JobTypeArrayOutput {
	return o
}

func (o JobTypeArrayOutput) Index(i pulumi.IntInput) JobTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobType {
		return vs[0].([]JobType)[vs[1].(int)]
	}).(JobTypeOutput)
}

// JobCondition describes current state of a job.
type JobCondition struct {
	// Last time the condition was checked.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type string `pulumi:"type"`
}

// JobConditionInput is an input type that accepts JobConditionArgs and JobConditionOutput values.
// You can construct a concrete instance of `JobConditionInput` via:
//
//	JobConditionArgs{...}
type JobConditionInput interface {
	pulumi.Input

	ToJobConditionOutput() JobConditionOutput
	ToJobConditionOutputWithContext(context.Context) JobConditionOutput
}

// JobCondition describes current state of a job.
type JobConditionArgs struct {
	// Last time the condition was checked.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (i JobConditionArgs) ToJobConditionOutput() JobConditionOutput {
	return i.ToJobConditionOutputWithContext(context.Background())
}

func (i JobConditionArgs) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionOutput)
}

// JobConditionArrayInput is an input type that accepts JobConditionArray and JobConditionArrayOutput values.
// You can construct a concrete instance of `JobConditionArrayInput` via:
//
//	JobConditionArray{ JobConditionArgs{...} }
type JobConditionArrayInput interface {
	pulumi.Input

	ToJobConditionArrayOutput() JobConditionArrayOutput
	ToJobConditionArrayOutputWithContext(context.Context) JobConditionArrayOutput
}

type JobConditionArray []JobConditionInput

func (JobConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (i JobConditionArray) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return i.ToJobConditionArrayOutputWithContext(context.Background())
}

func (i JobConditionArray) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionArrayOutput)
}

// JobCondition describes current state of a job.
type JobConditionOutput struct{ *pulumi.OutputState }

func (JobConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (o JobConditionOutput) ToJobConditionOutput() JobConditionOutput {
	return o
}

func (o JobConditionOutput) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return o
}

// Last time the condition was checked.
func (o JobConditionOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transit from one status to another.
func (o JobConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o JobConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o JobConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o JobConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of job condition, Complete or Failed.
func (o JobConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Type }).(pulumi.StringOutput)
}

type JobConditionArrayOutput struct{ *pulumi.OutputState }

func (JobConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) Index(i pulumi.IntInput) JobConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobCondition {
		return vs[0].([]JobCondition)[vs[1].(int)]
	}).(JobConditionOutput)
}

// JobCondition describes current state of a job.
type JobConditionPatch struct {
	// Last time the condition was checked.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type *string `pulumi:"type"`
}

// JobConditionPatchInput is an input type that accepts JobConditionPatchArgs and JobConditionPatchOutput values.
// You can construct a concrete instance of `JobConditionPatchInput` via:
//
//	JobConditionPatchArgs{...}
type JobConditionPatchInput interface {
	pulumi.Input

	ToJobConditionPatchOutput() JobConditionPatchOutput
	ToJobConditionPatchOutputWithContext(context.Context) JobConditionPatchOutput
}

// JobCondition describes current state of a job.
type JobConditionPatchArgs struct {
	// Last time the condition was checked.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JobConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConditionPatch)(nil)).Elem()
}

func (i JobConditionPatchArgs) ToJobConditionPatchOutput() JobConditionPatchOutput {
	return i.ToJobConditionPatchOutputWithContext(context.Background())
}

func (i JobConditionPatchArgs) ToJobConditionPatchOutputWithContext(ctx context.Context) JobConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionPatchOutput)
}

// JobConditionPatchArrayInput is an input type that accepts JobConditionPatchArray and JobConditionPatchArrayOutput values.
// You can construct a concrete instance of `JobConditionPatchArrayInput` via:
//
//	JobConditionPatchArray{ JobConditionPatchArgs{...} }
type JobConditionPatchArrayInput interface {
	pulumi.Input

	ToJobConditionPatchArrayOutput() JobConditionPatchArrayOutput
	ToJobConditionPatchArrayOutputWithContext(context.Context) JobConditionPatchArrayOutput
}

type JobConditionPatchArray []JobConditionPatchInput

func (JobConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobConditionPatch)(nil)).Elem()
}

func (i JobConditionPatchArray) ToJobConditionPatchArrayOutput() JobConditionPatchArrayOutput {
	return i.ToJobConditionPatchArrayOutputWithContext(context.Background())
}

func (i JobConditionPatchArray) ToJobConditionPatchArrayOutputWithContext(ctx context.Context) JobConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionPatchArrayOutput)
}

// JobCondition describes current state of a job.
type JobConditionPatchOutput struct{ *pulumi.OutputState }

func (JobConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConditionPatch)(nil)).Elem()
}

func (o JobConditionPatchOutput) ToJobConditionPatchOutput() JobConditionPatchOutput {
	return o
}

func (o JobConditionPatchOutput) ToJobConditionPatchOutputWithContext(ctx context.Context) JobConditionPatchOutput {
	return o
}

// Last time the condition was checked.
func (o JobConditionPatchOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transit from one status to another.
func (o JobConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o JobConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o JobConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o JobConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of job condition, Complete or Failed.
func (o JobConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JobConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (JobConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobConditionPatch)(nil)).Elem()
}

func (o JobConditionPatchArrayOutput) ToJobConditionPatchArrayOutput() JobConditionPatchArrayOutput {
	return o
}

func (o JobConditionPatchArrayOutput) ToJobConditionPatchArrayOutputWithContext(ctx context.Context) JobConditionPatchArrayOutput {
	return o
}

func (o JobConditionPatchArrayOutput) Index(i pulumi.IntInput) JobConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobConditionPatch {
		return vs[0].([]JobConditionPatch)[vs[1].(int)]
	}).(JobConditionPatchOutput)
}

// JobList is a collection of jobs.
type JobListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of Jobs.
	Items []JobType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// JobListTypeInput is an input type that accepts JobListTypeArgs and JobListTypeOutput values.
// You can construct a concrete instance of `JobListTypeInput` via:
//
//	JobListTypeArgs{...}
type JobListTypeInput interface {
	pulumi.Input

	ToJobListTypeOutput() JobListTypeOutput
	ToJobListTypeOutputWithContext(context.Context) JobListTypeOutput
}

// JobList is a collection of jobs.
type JobListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of Jobs.
	Items JobTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (JobListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobListType)(nil)).Elem()
}

func (i JobListTypeArgs) ToJobListTypeOutput() JobListTypeOutput {
	return i.ToJobListTypeOutputWithContext(context.Background())
}

func (i JobListTypeArgs) ToJobListTypeOutputWithContext(ctx context.Context) JobListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobListTypeOutput)
}

// JobList is a collection of jobs.
type JobListTypeOutput struct{ *pulumi.OutputState }

func (JobListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobListType)(nil)).Elem()
}

func (o JobListTypeOutput) ToJobListTypeOutput() JobListTypeOutput {
	return o
}

func (o JobListTypeOutput) ToJobListTypeOutputWithContext(ctx context.Context) JobListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of Jobs.
func (o JobListTypeOutput) Items() JobTypeArrayOutput {
	return o.ApplyT(func(v JobListType) []JobType { return v.Items }).(JobTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v JobListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpecPatch `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *JobStatusPatch `pulumi:"status"`
}

// JobPatchTypeInput is an input type that accepts JobPatchTypeArgs and JobPatchTypeOutput values.
// You can construct a concrete instance of `JobPatchTypeInput` via:
//
//	JobPatchTypeArgs{...}
type JobPatchTypeInput interface {
	pulumi.Input

	ToJobPatchTypeOutput() JobPatchTypeOutput
	ToJobPatchTypeOutputWithContext(context.Context) JobPatchTypeOutput
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPatchPtrInput `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status JobStatusPatchPtrInput `pulumi:"status"`
}

func (JobPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPatchType)(nil)).Elem()
}

func (i JobPatchTypeArgs) ToJobPatchTypeOutput() JobPatchTypeOutput {
	return i.ToJobPatchTypeOutputWithContext(context.Background())
}

func (i JobPatchTypeArgs) ToJobPatchTypeOutputWithContext(ctx context.Context) JobPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPatchTypeOutput)
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobPatchTypeOutput struct{ *pulumi.OutputState }

func (JobPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPatchType)(nil)).Elem()
}

func (o JobPatchTypeOutput) ToJobPatchTypeOutput() JobPatchTypeOutput {
	return o
}

func (o JobPatchTypeOutput) ToJobPatchTypeOutputWithContext(ctx context.Context) JobPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v JobPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobPatchTypeOutput) Spec() JobSpecPatchPtrOutput {
	return o.ApplyT(func(v JobPatchType) *JobSpecPatch { return v.Spec }).(JobSpecPatchPtrOutput)
}

// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobPatchTypeOutput) Status() JobStatusPatchPtrOutput {
	return o.ApplyT(func(v JobPatchType) *JobStatusPatch { return v.Status }).(JobStatusPatchPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpec struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds *int `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit *int `pulumi:"backoffLimit"`
	// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	BackoffLimitPerIndex *int `pulumi:"backoffLimitPerIndex"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode *string `pulumi:"completionMode"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions *int `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector *bool `pulumi:"manualSelector"`
	// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	MaxFailedIndexes *int `pulumi:"maxFailedIndexes"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism *int `pulumi:"parallelism"`
	// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
	//
	// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
	PodFailurePolicy *PodFailurePolicy `pulumi:"podFailurePolicy"`
	// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
	//   when they are terminating (has a metadata.deletionTimestamp) or failed.
	// - Failed means to wait until a previously created Pod is fully terminated (has phase
	//   Failed or Succeeded) before creating a replacement Pod.
	//
	// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
	PodReplacementPolicy *string `pulumi:"podReplacementPolicy"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template corev1.PodTemplateSpec `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TtlSecondsAfterFinished *int `pulumi:"ttlSecondsAfterFinished"`
}

// JobSpecInput is an input type that accepts JobSpecArgs and JobSpecOutput values.
// You can construct a concrete instance of `JobSpecInput` via:
//
//	JobSpecArgs{...}
type JobSpecInput interface {
	pulumi.Input

	ToJobSpecOutput() JobSpecOutput
	ToJobSpecOutputWithContext(context.Context) JobSpecOutput
}

// JobSpec describes how the job execution will look like.
type JobSpecArgs struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds pulumi.IntPtrInput `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit pulumi.IntPtrInput `pulumi:"backoffLimit"`
	// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	BackoffLimitPerIndex pulumi.IntPtrInput `pulumi:"backoffLimitPerIndex"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode pulumi.StringPtrInput `pulumi:"completionMode"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions pulumi.IntPtrInput `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector pulumi.BoolPtrInput `pulumi:"manualSelector"`
	// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	MaxFailedIndexes pulumi.IntPtrInput `pulumi:"maxFailedIndexes"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
	//
	// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
	PodFailurePolicy PodFailurePolicyPtrInput `pulumi:"podFailurePolicy"`
	// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
	//   when they are terminating (has a metadata.deletionTimestamp) or failed.
	// - Failed means to wait until a previously created Pod is fully terminated (has phase
	//   Failed or Succeeded) before creating a replacement Pod.
	//
	// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
	PodReplacementPolicy pulumi.StringPtrInput `pulumi:"podReplacementPolicy"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template corev1.PodTemplateSpecInput `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TtlSecondsAfterFinished pulumi.IntPtrInput `pulumi:"ttlSecondsAfterFinished"`
}

func (JobSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (i JobSpecArgs) ToJobSpecOutput() JobSpecOutput {
	return i.ToJobSpecOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput)
}

func (i JobSpecArgs) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput).ToJobSpecPtrOutputWithContext(ctx)
}

// JobSpecPtrInput is an input type that accepts JobSpecArgs, JobSpecPtr and JobSpecPtrOutput values.
// You can construct a concrete instance of `JobSpecPtrInput` via:
//
//	        JobSpecArgs{...}
//
//	or:
//
//	        nil
type JobSpecPtrInput interface {
	pulumi.Input

	ToJobSpecPtrOutput() JobSpecPtrOutput
	ToJobSpecPtrOutputWithContext(context.Context) JobSpecPtrOutput
}

type jobSpecPtrType JobSpecArgs

func JobSpecPtr(v *JobSpecArgs) JobSpecPtrInput {
	return (*jobSpecPtrType)(v)
}

func (*jobSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (i *jobSpecPtrType) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i *jobSpecPtrType) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecOutput struct{ *pulumi.OutputState }

func (JobSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (o JobSpecOutput) ToJobSpecOutput() JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o.ToJobSpecPtrOutputWithContext(context.Background())
}

func (o JobSpecOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobSpec) *JobSpec {
		return &v
	}).(JobSpecPtrOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
func (o JobSpecOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.ActiveDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.BackoffLimit }).(pulumi.IntPtrOutput)
}

// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecOutput) BackoffLimitPerIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.BackoffLimitPerIndex }).(pulumi.IntPtrOutput)
}

// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
//
// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
//
// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
//
// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
func (o JobSpecOutput) CompletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobSpec) *string { return v.CompletionMode }).(pulumi.StringPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Completions }).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobSpec) *bool { return v.ManualSelector }).(pulumi.BoolPtrOutput)
}

// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecOutput) MaxFailedIndexes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.MaxFailedIndexes }).(pulumi.IntPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
//
// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
func (o JobSpecOutput) PodFailurePolicy() PodFailurePolicyPtrOutput {
	return o.ApplyT(func(v JobSpec) *PodFailurePolicy { return v.PodFailurePolicy }).(PodFailurePolicyPtrOutput)
}

// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
//
//	when they are terminating (has a metadata.deletionTimestamp) or failed.
//   - Failed means to wait until a previously created Pod is fully terminated (has phase
//     Failed or Succeeded) before creating a replacement Pod.
//
// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
func (o JobSpecOutput) PodReplacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobSpec) *string { return v.PodReplacementPolicy }).(pulumi.StringPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v JobSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
func (o JobSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Template() corev1.PodTemplateSpecOutput {
	return o.ApplyT(func(v JobSpec) corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
func (o JobSpecOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.TtlSecondsAfterFinished }).(pulumi.IntPtrOutput)
}

type JobSpecPtrOutput struct{ *pulumi.OutputState }

func (JobSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) Elem() JobSpecOutput {
	return o.ApplyT(func(v *JobSpec) JobSpec {
		if v != nil {
			return *v
		}
		var ret JobSpec
		return ret
	}).(JobSpecOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
func (o JobSpecPtrOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecPtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPtrOutput) BackoffLimitPerIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimitPerIndex
	}).(pulumi.IntPtrOutput)
}

// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
//
// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
//
// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
//
// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
func (o JobSpecPtrOutput) CompletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpec) *string {
		if v == nil {
			return nil
		}
		return v.CompletionMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Completions
	}).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecPtrOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ManualSelector
	}).(pulumi.BoolPtrOutput)
}

// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPtrOutput) MaxFailedIndexes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.MaxFailedIndexes
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
//
// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
func (o JobSpecPtrOutput) PodFailurePolicy() PodFailurePolicyPtrOutput {
	return o.ApplyT(func(v *JobSpec) *PodFailurePolicy {
		if v == nil {
			return nil
		}
		return v.PodFailurePolicy
	}).(PodFailurePolicyPtrOutput)
}

// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
//
//	when they are terminating (has a metadata.deletionTimestamp) or failed.
//   - Failed means to wait until a previously created Pod is fully terminated (has phase
//     Failed or Succeeded) before creating a replacement Pod.
//
// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
func (o JobSpecPtrOutput) PodReplacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpec) *string {
		if v == nil {
			return nil
		}
		return v.PodReplacementPolicy
	}).(pulumi.StringPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *JobSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
func (o JobSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v *JobSpec) *corev1.PodTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(corev1.PodTemplateSpecPtrOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
func (o JobSpecPtrOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.TtlSecondsAfterFinished
	}).(pulumi.IntPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecPatch struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds *int `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit *int `pulumi:"backoffLimit"`
	// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	BackoffLimitPerIndex *int `pulumi:"backoffLimitPerIndex"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode *string `pulumi:"completionMode"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions *int `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector *bool `pulumi:"manualSelector"`
	// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	MaxFailedIndexes *int `pulumi:"maxFailedIndexes"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism *int `pulumi:"parallelism"`
	// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
	//
	// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
	PodFailurePolicy *PodFailurePolicyPatch `pulumi:"podFailurePolicy"`
	// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
	//   when they are terminating (has a metadata.deletionTimestamp) or failed.
	// - Failed means to wait until a previously created Pod is fully terminated (has phase
	//   Failed or Succeeded) before creating a replacement Pod.
	//
	// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
	PodReplacementPolicy *string `pulumi:"podReplacementPolicy"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelectorPatch `pulumi:"selector"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template *corev1.PodTemplateSpecPatch `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TtlSecondsAfterFinished *int `pulumi:"ttlSecondsAfterFinished"`
}

// JobSpecPatchInput is an input type that accepts JobSpecPatchArgs and JobSpecPatchOutput values.
// You can construct a concrete instance of `JobSpecPatchInput` via:
//
//	JobSpecPatchArgs{...}
type JobSpecPatchInput interface {
	pulumi.Input

	ToJobSpecPatchOutput() JobSpecPatchOutput
	ToJobSpecPatchOutputWithContext(context.Context) JobSpecPatchOutput
}

// JobSpec describes how the job execution will look like.
type JobSpecPatchArgs struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds pulumi.IntPtrInput `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit pulumi.IntPtrInput `pulumi:"backoffLimit"`
	// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	BackoffLimitPerIndex pulumi.IntPtrInput `pulumi:"backoffLimitPerIndex"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode pulumi.StringPtrInput `pulumi:"completionMode"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions pulumi.IntPtrInput `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector pulumi.BoolPtrInput `pulumi:"manualSelector"`
	// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	MaxFailedIndexes pulumi.IntPtrInput `pulumi:"maxFailedIndexes"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
	//
	// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
	PodFailurePolicy PodFailurePolicyPatchPtrInput `pulumi:"podFailurePolicy"`
	// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
	//   when they are terminating (has a metadata.deletionTimestamp) or failed.
	// - Failed means to wait until a previously created Pod is fully terminated (has phase
	//   Failed or Succeeded) before creating a replacement Pod.
	//
	// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
	PodReplacementPolicy pulumi.StringPtrInput `pulumi:"podReplacementPolicy"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPatchPtrInput `pulumi:"selector"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template corev1.PodTemplateSpecPatchPtrInput `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TtlSecondsAfterFinished pulumi.IntPtrInput `pulumi:"ttlSecondsAfterFinished"`
}

func (JobSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpecPatch)(nil)).Elem()
}

func (i JobSpecPatchArgs) ToJobSpecPatchOutput() JobSpecPatchOutput {
	return i.ToJobSpecPatchOutputWithContext(context.Background())
}

func (i JobSpecPatchArgs) ToJobSpecPatchOutputWithContext(ctx context.Context) JobSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPatchOutput)
}

func (i JobSpecPatchArgs) ToJobSpecPatchPtrOutput() JobSpecPatchPtrOutput {
	return i.ToJobSpecPatchPtrOutputWithContext(context.Background())
}

func (i JobSpecPatchArgs) ToJobSpecPatchPtrOutputWithContext(ctx context.Context) JobSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPatchOutput).ToJobSpecPatchPtrOutputWithContext(ctx)
}

// JobSpecPatchPtrInput is an input type that accepts JobSpecPatchArgs, JobSpecPatchPtr and JobSpecPatchPtrOutput values.
// You can construct a concrete instance of `JobSpecPatchPtrInput` via:
//
//	        JobSpecPatchArgs{...}
//
//	or:
//
//	        nil
type JobSpecPatchPtrInput interface {
	pulumi.Input

	ToJobSpecPatchPtrOutput() JobSpecPatchPtrOutput
	ToJobSpecPatchPtrOutputWithContext(context.Context) JobSpecPatchPtrOutput
}

type jobSpecPatchPtrType JobSpecPatchArgs

func JobSpecPatchPtr(v *JobSpecPatchArgs) JobSpecPatchPtrInput {
	return (*jobSpecPatchPtrType)(v)
}

func (*jobSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpecPatch)(nil)).Elem()
}

func (i *jobSpecPatchPtrType) ToJobSpecPatchPtrOutput() JobSpecPatchPtrOutput {
	return i.ToJobSpecPatchPtrOutputWithContext(context.Background())
}

func (i *jobSpecPatchPtrType) ToJobSpecPatchPtrOutputWithContext(ctx context.Context) JobSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPatchPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecPatchOutput struct{ *pulumi.OutputState }

func (JobSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpecPatch)(nil)).Elem()
}

func (o JobSpecPatchOutput) ToJobSpecPatchOutput() JobSpecPatchOutput {
	return o
}

func (o JobSpecPatchOutput) ToJobSpecPatchOutputWithContext(ctx context.Context) JobSpecPatchOutput {
	return o
}

func (o JobSpecPatchOutput) ToJobSpecPatchPtrOutput() JobSpecPatchPtrOutput {
	return o.ToJobSpecPatchPtrOutputWithContext(context.Background())
}

func (o JobSpecPatchOutput) ToJobSpecPatchPtrOutputWithContext(ctx context.Context) JobSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobSpecPatch) *JobSpecPatch {
		return &v
	}).(JobSpecPatchPtrOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
func (o JobSpecPatchOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.ActiveDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecPatchOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.BackoffLimit }).(pulumi.IntPtrOutput)
}

// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPatchOutput) BackoffLimitPerIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.BackoffLimitPerIndex }).(pulumi.IntPtrOutput)
}

// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
//
// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
//
// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
//
// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
func (o JobSpecPatchOutput) CompletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *string { return v.CompletionMode }).(pulumi.StringPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.Completions }).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecPatchOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *bool { return v.ManualSelector }).(pulumi.BoolPtrOutput)
}

// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPatchOutput) MaxFailedIndexes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.MaxFailedIndexes }).(pulumi.IntPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
//
// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
func (o JobSpecPatchOutput) PodFailurePolicy() PodFailurePolicyPatchPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *PodFailurePolicyPatch { return v.PodFailurePolicy }).(PodFailurePolicyPatchPtrOutput)
}

// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
//
//	when they are terminating (has a metadata.deletionTimestamp) or failed.
//   - Failed means to wait until a previously created Pod is fully terminated (has phase
//     Failed or Succeeded) before creating a replacement Pod.
//
// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
func (o JobSpecPatchOutput) PodReplacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *string { return v.PodReplacementPolicy }).(pulumi.StringPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecPatchOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *metav1.LabelSelectorPatch { return v.Selector }).(metav1.LabelSelectorPatchPtrOutput)
}

// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
func (o JobSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *corev1.PodTemplateSpecPatch { return v.Template }).(corev1.PodTemplateSpecPatchPtrOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
func (o JobSpecPatchOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpecPatch) *int { return v.TtlSecondsAfterFinished }).(pulumi.IntPtrOutput)
}

type JobSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (JobSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpecPatch)(nil)).Elem()
}

func (o JobSpecPatchPtrOutput) ToJobSpecPatchPtrOutput() JobSpecPatchPtrOutput {
	return o
}

func (o JobSpecPatchPtrOutput) ToJobSpecPatchPtrOutputWithContext(ctx context.Context) JobSpecPatchPtrOutput {
	return o
}

func (o JobSpecPatchPtrOutput) Elem() JobSpecPatchOutput {
	return o.ApplyT(func(v *JobSpecPatch) JobSpecPatch {
		if v != nil {
			return *v
		}
		var ret JobSpecPatch
		return ret
	}).(JobSpecPatchOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
func (o JobSpecPatchPtrOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecPatchPtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPatchPtrOutput) BackoffLimitPerIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimitPerIndex
	}).(pulumi.IntPtrOutput)
}

// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
//
// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
//
// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
//
// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
func (o JobSpecPatchPtrOutput) CompletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.CompletionMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchPtrOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Completions
	}).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecPatchPtrOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ManualSelector
	}).(pulumi.BoolPtrOutput)
}

// Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobSpecPatchPtrOutput) MaxFailedIndexes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MaxFailedIndexes
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
//
// This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
func (o JobSpecPatchPtrOutput) PodFailurePolicy() PodFailurePolicyPatchPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *PodFailurePolicyPatch {
		if v == nil {
			return nil
		}
		return v.PodFailurePolicy
	}).(PodFailurePolicyPatchPtrOutput)
}

// podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
//
//	when they are terminating (has a metadata.deletionTimestamp) or failed.
//   - Failed means to wait until a previously created Pod is fully terminated (has phase
//     Failed or Succeeded) before creating a replacement Pod.
//
// When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
func (o JobSpecPatchPtrOutput) PodReplacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodReplacementPolicy
	}).(pulumi.StringPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecPatchPtrOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
func (o JobSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPatchPtrOutput) Template() corev1.PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *corev1.PodTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Template
	}).(corev1.PodTemplateSpecPatchPtrOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
func (o JobSpecPatchPtrOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.TtlSecondsAfterFinished
	}).(pulumi.IntPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatus struct {
	// The number of pending and running pods.
	Active *int `pulumi:"active"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes *string `pulumi:"completedIndexes"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime *string `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions []JobCondition `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed *int `pulumi:"failed"`
	// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	FailedIndexes *string `pulumi:"failedIndexes"`
	// The number of pods which have a Ready condition.
	Ready *int `pulumi:"ready"`
	// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded *int `pulumi:"succeeded"`
	// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
	Terminating *int `pulumi:"terminating"`
	// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
	//
	// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
	//
	// 1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
	//     counter.
	//
	// Old jobs might not be tracked using this field, in which case the field remains null.
	UncountedTerminatedPods *UncountedTerminatedPods `pulumi:"uncountedTerminatedPods"`
}

// JobStatusInput is an input type that accepts JobStatusArgs and JobStatusOutput values.
// You can construct a concrete instance of `JobStatusInput` via:
//
//	JobStatusArgs{...}
type JobStatusInput interface {
	pulumi.Input

	ToJobStatusOutput() JobStatusOutput
	ToJobStatusOutputWithContext(context.Context) JobStatusOutput
}

// JobStatus represents the current state of a Job.
type JobStatusArgs struct {
	// The number of pending and running pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes pulumi.StringPtrInput `pulumi:"completedIndexes"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions JobConditionArrayInput `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	FailedIndexes pulumi.StringPtrInput `pulumi:"failedIndexes"`
	// The number of pods which have a Ready condition.
	Ready pulumi.IntPtrInput `pulumi:"ready"`
	// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
	// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
	Terminating pulumi.IntPtrInput `pulumi:"terminating"`
	// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
	//
	// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
	//
	// 1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
	//     counter.
	//
	// Old jobs might not be tracked using this field, in which case the field remains null.
	UncountedTerminatedPods UncountedTerminatedPodsPtrInput `pulumi:"uncountedTerminatedPods"`
}

func (JobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (i JobStatusArgs) ToJobStatusOutput() JobStatusOutput {
	return i.ToJobStatusOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput)
}

func (i JobStatusArgs) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput).ToJobStatusPtrOutputWithContext(ctx)
}

// JobStatusPtrInput is an input type that accepts JobStatusArgs, JobStatusPtr and JobStatusPtrOutput values.
// You can construct a concrete instance of `JobStatusPtrInput` via:
//
//	        JobStatusArgs{...}
//
//	or:
//
//	        nil
type JobStatusPtrInput interface {
	pulumi.Input

	ToJobStatusPtrOutput() JobStatusPtrOutput
	ToJobStatusPtrOutputWithContext(context.Context) JobStatusPtrOutput
}

type jobStatusPtrType JobStatusArgs

func JobStatusPtr(v *JobStatusArgs) JobStatusPtrInput {
	return (*jobStatusPtrType)(v)
}

func (*jobStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (i *jobStatusPtrType) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i *jobStatusPtrType) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusOutput struct{ *pulumi.OutputState }

func (JobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (o JobStatusOutput) ToJobStatusOutput() JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o.ToJobStatusPtrOutputWithContext(context.Background())
}

func (o JobStatusOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStatus) *JobStatus {
		return &v
	}).(JobStatusPtrOutput)
}

// The number of pending and running pods.
func (o JobStatusOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
func (o JobStatusOutput) CompletedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.CompletedIndexes }).(pulumi.StringPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v JobStatus) []JobCondition { return v.Conditions }).(JobConditionArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobStatusOutput) FailedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.FailedIndexes }).(pulumi.StringPtrOutput)
}

// The number of pods which have a Ready condition.
func (o JobStatusOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Ready }).(pulumi.IntPtrOutput)
}

// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
func (o JobStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
//
// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
func (o JobStatusOutput) Terminating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Terminating }).(pulumi.IntPtrOutput)
}

// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
//
// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
//
//  1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
//     counter.
//
// Old jobs might not be tracked using this field, in which case the field remains null.
func (o JobStatusOutput) UncountedTerminatedPods() UncountedTerminatedPodsPtrOutput {
	return o.ApplyT(func(v JobStatus) *UncountedTerminatedPods { return v.UncountedTerminatedPods }).(UncountedTerminatedPodsPtrOutput)
}

type JobStatusPtrOutput struct{ *pulumi.OutputState }

func (JobStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) Elem() JobStatusOutput {
	return o.ApplyT(func(v *JobStatus) JobStatus {
		if v != nil {
			return *v
		}
		var ret JobStatus
		return ret
	}).(JobStatusOutput)
}

// The number of pending and running pods.
func (o JobStatusPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
func (o JobStatusPtrOutput) CompletedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletedIndexes
	}).(pulumi.StringPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusPtrOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v *JobStatus) []JobCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(JobConditionArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobStatusPtrOutput) FailedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailedIndexes
	}).(pulumi.StringPtrOutput)
}

// The number of pods which have a Ready condition.
func (o JobStatusPtrOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.IntPtrOutput)
}

// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
func (o JobStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
//
// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
func (o JobStatusPtrOutput) Terminating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Terminating
	}).(pulumi.IntPtrOutput)
}

// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
//
// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
//
//  1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
//     counter.
//
// Old jobs might not be tracked using this field, in which case the field remains null.
func (o JobStatusPtrOutput) UncountedTerminatedPods() UncountedTerminatedPodsPtrOutput {
	return o.ApplyT(func(v *JobStatus) *UncountedTerminatedPods {
		if v == nil {
			return nil
		}
		return v.UncountedTerminatedPods
	}).(UncountedTerminatedPodsPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusPatch struct {
	// The number of pending and running pods.
	Active *int `pulumi:"active"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes *string `pulumi:"completedIndexes"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime *string `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions []JobConditionPatch `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed *int `pulumi:"failed"`
	// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	FailedIndexes *string `pulumi:"failedIndexes"`
	// The number of pods which have a Ready condition.
	Ready *int `pulumi:"ready"`
	// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded *int `pulumi:"succeeded"`
	// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
	Terminating *int `pulumi:"terminating"`
	// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
	//
	// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
	//
	// 1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
	//     counter.
	//
	// Old jobs might not be tracked using this field, in which case the field remains null.
	UncountedTerminatedPods *UncountedTerminatedPodsPatch `pulumi:"uncountedTerminatedPods"`
}

// JobStatusPatchInput is an input type that accepts JobStatusPatchArgs and JobStatusPatchOutput values.
// You can construct a concrete instance of `JobStatusPatchInput` via:
//
//	JobStatusPatchArgs{...}
type JobStatusPatchInput interface {
	pulumi.Input

	ToJobStatusPatchOutput() JobStatusPatchOutput
	ToJobStatusPatchOutputWithContext(context.Context) JobStatusPatchOutput
}

// JobStatus represents the current state of a Job.
type JobStatusPatchArgs struct {
	// The number of pending and running pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes pulumi.StringPtrInput `pulumi:"completedIndexes"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions JobConditionPatchArrayInput `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	FailedIndexes pulumi.StringPtrInput `pulumi:"failedIndexes"`
	// The number of pods which have a Ready condition.
	Ready pulumi.IntPtrInput `pulumi:"ready"`
	// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
	// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
	Terminating pulumi.IntPtrInput `pulumi:"terminating"`
	// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
	//
	// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
	//
	// 1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
	//     counter.
	//
	// Old jobs might not be tracked using this field, in which case the field remains null.
	UncountedTerminatedPods UncountedTerminatedPodsPatchPtrInput `pulumi:"uncountedTerminatedPods"`
}

func (JobStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusPatch)(nil)).Elem()
}

func (i JobStatusPatchArgs) ToJobStatusPatchOutput() JobStatusPatchOutput {
	return i.ToJobStatusPatchOutputWithContext(context.Background())
}

func (i JobStatusPatchArgs) ToJobStatusPatchOutputWithContext(ctx context.Context) JobStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPatchOutput)
}

func (i JobStatusPatchArgs) ToJobStatusPatchPtrOutput() JobStatusPatchPtrOutput {
	return i.ToJobStatusPatchPtrOutputWithContext(context.Background())
}

func (i JobStatusPatchArgs) ToJobStatusPatchPtrOutputWithContext(ctx context.Context) JobStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPatchOutput).ToJobStatusPatchPtrOutputWithContext(ctx)
}

// JobStatusPatchPtrInput is an input type that accepts JobStatusPatchArgs, JobStatusPatchPtr and JobStatusPatchPtrOutput values.
// You can construct a concrete instance of `JobStatusPatchPtrInput` via:
//
//	        JobStatusPatchArgs{...}
//
//	or:
//
//	        nil
type JobStatusPatchPtrInput interface {
	pulumi.Input

	ToJobStatusPatchPtrOutput() JobStatusPatchPtrOutput
	ToJobStatusPatchPtrOutputWithContext(context.Context) JobStatusPatchPtrOutput
}

type jobStatusPatchPtrType JobStatusPatchArgs

func JobStatusPatchPtr(v *JobStatusPatchArgs) JobStatusPatchPtrInput {
	return (*jobStatusPatchPtrType)(v)
}

func (*jobStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatusPatch)(nil)).Elem()
}

func (i *jobStatusPatchPtrType) ToJobStatusPatchPtrOutput() JobStatusPatchPtrOutput {
	return i.ToJobStatusPatchPtrOutputWithContext(context.Background())
}

func (i *jobStatusPatchPtrType) ToJobStatusPatchPtrOutputWithContext(ctx context.Context) JobStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPatchPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusPatchOutput struct{ *pulumi.OutputState }

func (JobStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusPatch)(nil)).Elem()
}

func (o JobStatusPatchOutput) ToJobStatusPatchOutput() JobStatusPatchOutput {
	return o
}

func (o JobStatusPatchOutput) ToJobStatusPatchOutputWithContext(ctx context.Context) JobStatusPatchOutput {
	return o
}

func (o JobStatusPatchOutput) ToJobStatusPatchPtrOutput() JobStatusPatchPtrOutput {
	return o.ToJobStatusPatchPtrOutputWithContext(context.Background())
}

func (o JobStatusPatchOutput) ToJobStatusPatchPtrOutputWithContext(ctx context.Context) JobStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStatusPatch) *JobStatusPatch {
		return &v
	}).(JobStatusPatchPtrOutput)
}

// The number of pending and running pods.
func (o JobStatusPatchOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
func (o JobStatusPatchOutput) CompletedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *string { return v.CompletedIndexes }).(pulumi.StringPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusPatchOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusPatchOutput) Conditions() JobConditionPatchArrayOutput {
	return o.ApplyT(func(v JobStatusPatch) []JobConditionPatch { return v.Conditions }).(JobConditionPatchArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusPatchOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobStatusPatchOutput) FailedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *string { return v.FailedIndexes }).(pulumi.StringPtrOutput)
}

// The number of pods which have a Ready condition.
func (o JobStatusPatchOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *int { return v.Ready }).(pulumi.IntPtrOutput)
}

// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
func (o JobStatusPatchOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusPatchOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
//
// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
func (o JobStatusPatchOutput) Terminating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *int { return v.Terminating }).(pulumi.IntPtrOutput)
}

// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
//
// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
//
//  1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
//     counter.
//
// Old jobs might not be tracked using this field, in which case the field remains null.
func (o JobStatusPatchOutput) UncountedTerminatedPods() UncountedTerminatedPodsPatchPtrOutput {
	return o.ApplyT(func(v JobStatusPatch) *UncountedTerminatedPodsPatch { return v.UncountedTerminatedPods }).(UncountedTerminatedPodsPatchPtrOutput)
}

type JobStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (JobStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatusPatch)(nil)).Elem()
}

func (o JobStatusPatchPtrOutput) ToJobStatusPatchPtrOutput() JobStatusPatchPtrOutput {
	return o
}

func (o JobStatusPatchPtrOutput) ToJobStatusPatchPtrOutputWithContext(ctx context.Context) JobStatusPatchPtrOutput {
	return o
}

func (o JobStatusPatchPtrOutput) Elem() JobStatusPatchOutput {
	return o.ApplyT(func(v *JobStatusPatch) JobStatusPatch {
		if v != nil {
			return *v
		}
		var ret JobStatusPatch
		return ret
	}).(JobStatusPatchOutput)
}

// The number of pending and running pods.
func (o JobStatusPatchPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
func (o JobStatusPatchPtrOutput) CompletedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.CompletedIndexes
	}).(pulumi.StringPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusPatchPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusPatchPtrOutput) Conditions() JobConditionPatchArrayOutput {
	return o.ApplyT(func(v *JobStatusPatch) []JobConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(JobConditionPatchArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusPatchPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
func (o JobStatusPatchPtrOutput) FailedIndexes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.FailedIndexes
	}).(pulumi.StringPtrOutput)
}

// The number of pods which have a Ready condition.
func (o JobStatusPatchPtrOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.IntPtrOutput)
}

// Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
func (o JobStatusPatchPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusPatchPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
//
// This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
func (o JobStatusPatchPtrOutput) Terminating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Terminating
	}).(pulumi.IntPtrOutput)
}

// uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
//
// The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
//
//  1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
//     counter.
//
// Old jobs might not be tracked using this field, in which case the field remains null.
func (o JobStatusPatchPtrOutput) UncountedTerminatedPods() UncountedTerminatedPodsPatchPtrOutput {
	return o.ApplyT(func(v *JobStatusPatch) *UncountedTerminatedPodsPatch {
		if v == nil {
			return nil
		}
		return v.UncountedTerminatedPods
	}).(UncountedTerminatedPodsPatchPtrOutput)
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpec struct {
	// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpec `pulumi:"spec"`
}

// JobTemplateSpecInput is an input type that accepts JobTemplateSpecArgs and JobTemplateSpecOutput values.
// You can construct a concrete instance of `JobTemplateSpecInput` via:
//
//	JobTemplateSpecArgs{...}
type JobTemplateSpecInput interface {
	pulumi.Input

	ToJobTemplateSpecOutput() JobTemplateSpecOutput
	ToJobTemplateSpecOutputWithContext(context.Context) JobTemplateSpecOutput
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpecArgs struct {
	// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPtrInput `pulumi:"spec"`
}

func (JobTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplateSpec)(nil)).Elem()
}

func (i JobTemplateSpecArgs) ToJobTemplateSpecOutput() JobTemplateSpecOutput {
	return i.ToJobTemplateSpecOutputWithContext(context.Background())
}

func (i JobTemplateSpecArgs) ToJobTemplateSpecOutputWithContext(ctx context.Context) JobTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecOutput)
}

func (i JobTemplateSpecArgs) ToJobTemplateSpecPtrOutput() JobTemplateSpecPtrOutput {
	return i.ToJobTemplateSpecPtrOutputWithContext(context.Background())
}

func (i JobTemplateSpecArgs) ToJobTemplateSpecPtrOutputWithContext(ctx context.Context) JobTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecOutput).ToJobTemplateSpecPtrOutputWithContext(ctx)
}

// JobTemplateSpecPtrInput is an input type that accepts JobTemplateSpecArgs, JobTemplateSpecPtr and JobTemplateSpecPtrOutput values.
// You can construct a concrete instance of `JobTemplateSpecPtrInput` via:
//
//	        JobTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type JobTemplateSpecPtrInput interface {
	pulumi.Input

	ToJobTemplateSpecPtrOutput() JobTemplateSpecPtrOutput
	ToJobTemplateSpecPtrOutputWithContext(context.Context) JobTemplateSpecPtrOutput
}

type jobTemplateSpecPtrType JobTemplateSpecArgs

func JobTemplateSpecPtr(v *JobTemplateSpecArgs) JobTemplateSpecPtrInput {
	return (*jobTemplateSpecPtrType)(v)
}

func (*jobTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplateSpec)(nil)).Elem()
}

func (i *jobTemplateSpecPtrType) ToJobTemplateSpecPtrOutput() JobTemplateSpecPtrOutput {
	return i.ToJobTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *jobTemplateSpecPtrType) ToJobTemplateSpecPtrOutputWithContext(ctx context.Context) JobTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecPtrOutput)
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpecOutput struct{ *pulumi.OutputState }

func (JobTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplateSpec)(nil)).Elem()
}

func (o JobTemplateSpecOutput) ToJobTemplateSpecOutput() JobTemplateSpecOutput {
	return o
}

func (o JobTemplateSpecOutput) ToJobTemplateSpecOutputWithContext(ctx context.Context) JobTemplateSpecOutput {
	return o
}

func (o JobTemplateSpecOutput) ToJobTemplateSpecPtrOutput() JobTemplateSpecPtrOutput {
	return o.ToJobTemplateSpecPtrOutputWithContext(context.Background())
}

func (o JobTemplateSpecOutput) ToJobTemplateSpecPtrOutputWithContext(ctx context.Context) JobTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobTemplateSpec) *JobTemplateSpec {
		return &v
	}).(JobTemplateSpecPtrOutput)
}

// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTemplateSpecOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v JobTemplateSpec) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTemplateSpecOutput) Spec() JobSpecPtrOutput {
	return o.ApplyT(func(v JobTemplateSpec) *JobSpec { return v.Spec }).(JobSpecPtrOutput)
}

type JobTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (JobTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplateSpec)(nil)).Elem()
}

func (o JobTemplateSpecPtrOutput) ToJobTemplateSpecPtrOutput() JobTemplateSpecPtrOutput {
	return o
}

func (o JobTemplateSpecPtrOutput) ToJobTemplateSpecPtrOutputWithContext(ctx context.Context) JobTemplateSpecPtrOutput {
	return o
}

func (o JobTemplateSpecPtrOutput) Elem() JobTemplateSpecOutput {
	return o.ApplyT(func(v *JobTemplateSpec) JobTemplateSpec {
		if v != nil {
			return *v
		}
		var ret JobTemplateSpec
		return ret
	}).(JobTemplateSpecOutput)
}

// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTemplateSpecPtrOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *JobTemplateSpec) *metav1.ObjectMeta {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTemplateSpecPtrOutput) Spec() JobSpecPtrOutput {
	return o.ApplyT(func(v *JobTemplateSpec) *JobSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(JobSpecPtrOutput)
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpecPatch struct {
	// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpecPatch `pulumi:"spec"`
}

// JobTemplateSpecPatchInput is an input type that accepts JobTemplateSpecPatchArgs and JobTemplateSpecPatchOutput values.
// You can construct a concrete instance of `JobTemplateSpecPatchInput` via:
//
//	JobTemplateSpecPatchArgs{...}
type JobTemplateSpecPatchInput interface {
	pulumi.Input

	ToJobTemplateSpecPatchOutput() JobTemplateSpecPatchOutput
	ToJobTemplateSpecPatchOutputWithContext(context.Context) JobTemplateSpecPatchOutput
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpecPatchArgs struct {
	// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPatchPtrInput `pulumi:"spec"`
}

func (JobTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplateSpecPatch)(nil)).Elem()
}

func (i JobTemplateSpecPatchArgs) ToJobTemplateSpecPatchOutput() JobTemplateSpecPatchOutput {
	return i.ToJobTemplateSpecPatchOutputWithContext(context.Background())
}

func (i JobTemplateSpecPatchArgs) ToJobTemplateSpecPatchOutputWithContext(ctx context.Context) JobTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecPatchOutput)
}

func (i JobTemplateSpecPatchArgs) ToJobTemplateSpecPatchPtrOutput() JobTemplateSpecPatchPtrOutput {
	return i.ToJobTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i JobTemplateSpecPatchArgs) ToJobTemplateSpecPatchPtrOutputWithContext(ctx context.Context) JobTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecPatchOutput).ToJobTemplateSpecPatchPtrOutputWithContext(ctx)
}

// JobTemplateSpecPatchPtrInput is an input type that accepts JobTemplateSpecPatchArgs, JobTemplateSpecPatchPtr and JobTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `JobTemplateSpecPatchPtrInput` via:
//
//	        JobTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type JobTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToJobTemplateSpecPatchPtrOutput() JobTemplateSpecPatchPtrOutput
	ToJobTemplateSpecPatchPtrOutputWithContext(context.Context) JobTemplateSpecPatchPtrOutput
}

type jobTemplateSpecPatchPtrType JobTemplateSpecPatchArgs

func JobTemplateSpecPatchPtr(v *JobTemplateSpecPatchArgs) JobTemplateSpecPatchPtrInput {
	return (*jobTemplateSpecPatchPtrType)(v)
}

func (*jobTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplateSpecPatch)(nil)).Elem()
}

func (i *jobTemplateSpecPatchPtrType) ToJobTemplateSpecPatchPtrOutput() JobTemplateSpecPatchPtrOutput {
	return i.ToJobTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *jobTemplateSpecPatchPtrType) ToJobTemplateSpecPatchPtrOutputWithContext(ctx context.Context) JobTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateSpecPatchPtrOutput)
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (JobTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplateSpecPatch)(nil)).Elem()
}

func (o JobTemplateSpecPatchOutput) ToJobTemplateSpecPatchOutput() JobTemplateSpecPatchOutput {
	return o
}

func (o JobTemplateSpecPatchOutput) ToJobTemplateSpecPatchOutputWithContext(ctx context.Context) JobTemplateSpecPatchOutput {
	return o
}

func (o JobTemplateSpecPatchOutput) ToJobTemplateSpecPatchPtrOutput() JobTemplateSpecPatchPtrOutput {
	return o.ToJobTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o JobTemplateSpecPatchOutput) ToJobTemplateSpecPatchPtrOutputWithContext(ctx context.Context) JobTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobTemplateSpecPatch) *JobTemplateSpecPatch {
		return &v
	}).(JobTemplateSpecPatchPtrOutput)
}

// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTemplateSpecPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v JobTemplateSpecPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTemplateSpecPatchOutput) Spec() JobSpecPatchPtrOutput {
	return o.ApplyT(func(v JobTemplateSpecPatch) *JobSpecPatch { return v.Spec }).(JobSpecPatchPtrOutput)
}

type JobTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (JobTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplateSpecPatch)(nil)).Elem()
}

func (o JobTemplateSpecPatchPtrOutput) ToJobTemplateSpecPatchPtrOutput() JobTemplateSpecPatchPtrOutput {
	return o
}

func (o JobTemplateSpecPatchPtrOutput) ToJobTemplateSpecPatchPtrOutputWithContext(ctx context.Context) JobTemplateSpecPatchPtrOutput {
	return o
}

func (o JobTemplateSpecPatchPtrOutput) Elem() JobTemplateSpecPatchOutput {
	return o.ApplyT(func(v *JobTemplateSpecPatch) JobTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret JobTemplateSpecPatch
		return ret
	}).(JobTemplateSpecPatchOutput)
}

// Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTemplateSpecPatchPtrOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *JobTemplateSpecPatch) *metav1.ObjectMetaPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTemplateSpecPatchPtrOutput) Spec() JobSpecPatchPtrOutput {
	return o.ApplyT(func(v *JobTemplateSpecPatch) *JobSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(JobSpecPatchPtrOutput)
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicy struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules []PodFailurePolicyRule `pulumi:"rules"`
}

// PodFailurePolicyInput is an input type that accepts PodFailurePolicyArgs and PodFailurePolicyOutput values.
// You can construct a concrete instance of `PodFailurePolicyInput` via:
//
//	PodFailurePolicyArgs{...}
type PodFailurePolicyInput interface {
	pulumi.Input

	ToPodFailurePolicyOutput() PodFailurePolicyOutput
	ToPodFailurePolicyOutputWithContext(context.Context) PodFailurePolicyOutput
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicyArgs struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules PodFailurePolicyRuleArrayInput `pulumi:"rules"`
}

func (PodFailurePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicy)(nil)).Elem()
}

func (i PodFailurePolicyArgs) ToPodFailurePolicyOutput() PodFailurePolicyOutput {
	return i.ToPodFailurePolicyOutputWithContext(context.Background())
}

func (i PodFailurePolicyArgs) ToPodFailurePolicyOutputWithContext(ctx context.Context) PodFailurePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOutput)
}

func (i PodFailurePolicyArgs) ToPodFailurePolicyPtrOutput() PodFailurePolicyPtrOutput {
	return i.ToPodFailurePolicyPtrOutputWithContext(context.Background())
}

func (i PodFailurePolicyArgs) ToPodFailurePolicyPtrOutputWithContext(ctx context.Context) PodFailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOutput).ToPodFailurePolicyPtrOutputWithContext(ctx)
}

// PodFailurePolicyPtrInput is an input type that accepts PodFailurePolicyArgs, PodFailurePolicyPtr and PodFailurePolicyPtrOutput values.
// You can construct a concrete instance of `PodFailurePolicyPtrInput` via:
//
//	        PodFailurePolicyArgs{...}
//
//	or:
//
//	        nil
type PodFailurePolicyPtrInput interface {
	pulumi.Input

	ToPodFailurePolicyPtrOutput() PodFailurePolicyPtrOutput
	ToPodFailurePolicyPtrOutputWithContext(context.Context) PodFailurePolicyPtrOutput
}

type podFailurePolicyPtrType PodFailurePolicyArgs

func PodFailurePolicyPtr(v *PodFailurePolicyArgs) PodFailurePolicyPtrInput {
	return (*podFailurePolicyPtrType)(v)
}

func (*podFailurePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicy)(nil)).Elem()
}

func (i *podFailurePolicyPtrType) ToPodFailurePolicyPtrOutput() PodFailurePolicyPtrOutput {
	return i.ToPodFailurePolicyPtrOutputWithContext(context.Background())
}

func (i *podFailurePolicyPtrType) ToPodFailurePolicyPtrOutputWithContext(ctx context.Context) PodFailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyPtrOutput)
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicyOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicy)(nil)).Elem()
}

func (o PodFailurePolicyOutput) ToPodFailurePolicyOutput() PodFailurePolicyOutput {
	return o
}

func (o PodFailurePolicyOutput) ToPodFailurePolicyOutputWithContext(ctx context.Context) PodFailurePolicyOutput {
	return o
}

func (o PodFailurePolicyOutput) ToPodFailurePolicyPtrOutput() PodFailurePolicyPtrOutput {
	return o.ToPodFailurePolicyPtrOutputWithContext(context.Background())
}

func (o PodFailurePolicyOutput) ToPodFailurePolicyPtrOutputWithContext(ctx context.Context) PodFailurePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodFailurePolicy) *PodFailurePolicy {
		return &v
	}).(PodFailurePolicyPtrOutput)
}

// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
func (o PodFailurePolicyOutput) Rules() PodFailurePolicyRuleArrayOutput {
	return o.ApplyT(func(v PodFailurePolicy) []PodFailurePolicyRule { return v.Rules }).(PodFailurePolicyRuleArrayOutput)
}

type PodFailurePolicyPtrOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicy)(nil)).Elem()
}

func (o PodFailurePolicyPtrOutput) ToPodFailurePolicyPtrOutput() PodFailurePolicyPtrOutput {
	return o
}

func (o PodFailurePolicyPtrOutput) ToPodFailurePolicyPtrOutputWithContext(ctx context.Context) PodFailurePolicyPtrOutput {
	return o
}

func (o PodFailurePolicyPtrOutput) Elem() PodFailurePolicyOutput {
	return o.ApplyT(func(v *PodFailurePolicy) PodFailurePolicy {
		if v != nil {
			return *v
		}
		var ret PodFailurePolicy
		return ret
	}).(PodFailurePolicyOutput)
}

// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
func (o PodFailurePolicyPtrOutput) Rules() PodFailurePolicyRuleArrayOutput {
	return o.ApplyT(func(v *PodFailurePolicy) []PodFailurePolicyRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(PodFailurePolicyRuleArrayOutput)
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirement struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName *string `pulumi:"containerName"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	//   Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator string `pulumi:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values []int `pulumi:"values"`
}

// PodFailurePolicyOnExitCodesRequirementInput is an input type that accepts PodFailurePolicyOnExitCodesRequirementArgs and PodFailurePolicyOnExitCodesRequirementOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnExitCodesRequirementInput` via:
//
//	PodFailurePolicyOnExitCodesRequirementArgs{...}
type PodFailurePolicyOnExitCodesRequirementInput interface {
	pulumi.Input

	ToPodFailurePolicyOnExitCodesRequirementOutput() PodFailurePolicyOnExitCodesRequirementOutput
	ToPodFailurePolicyOnExitCodesRequirementOutputWithContext(context.Context) PodFailurePolicyOnExitCodesRequirementOutput
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirementArgs struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	//   Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (PodFailurePolicyOnExitCodesRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirement)(nil)).Elem()
}

func (i PodFailurePolicyOnExitCodesRequirementArgs) ToPodFailurePolicyOnExitCodesRequirementOutput() PodFailurePolicyOnExitCodesRequirementOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnExitCodesRequirementArgs) ToPodFailurePolicyOnExitCodesRequirementOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementOutput)
}

func (i PodFailurePolicyOnExitCodesRequirementArgs) ToPodFailurePolicyOnExitCodesRequirementPtrOutput() PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnExitCodesRequirementArgs) ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementOutput).ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(ctx)
}

// PodFailurePolicyOnExitCodesRequirementPtrInput is an input type that accepts PodFailurePolicyOnExitCodesRequirementArgs, PodFailurePolicyOnExitCodesRequirementPtr and PodFailurePolicyOnExitCodesRequirementPtrOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnExitCodesRequirementPtrInput` via:
//
//	        PodFailurePolicyOnExitCodesRequirementArgs{...}
//
//	or:
//
//	        nil
type PodFailurePolicyOnExitCodesRequirementPtrInput interface {
	pulumi.Input

	ToPodFailurePolicyOnExitCodesRequirementPtrOutput() PodFailurePolicyOnExitCodesRequirementPtrOutput
	ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(context.Context) PodFailurePolicyOnExitCodesRequirementPtrOutput
}

type podFailurePolicyOnExitCodesRequirementPtrType PodFailurePolicyOnExitCodesRequirementArgs

func PodFailurePolicyOnExitCodesRequirementPtr(v *PodFailurePolicyOnExitCodesRequirementArgs) PodFailurePolicyOnExitCodesRequirementPtrInput {
	return (*podFailurePolicyOnExitCodesRequirementPtrType)(v)
}

func (*podFailurePolicyOnExitCodesRequirementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyOnExitCodesRequirement)(nil)).Elem()
}

func (i *podFailurePolicyOnExitCodesRequirementPtrType) ToPodFailurePolicyOnExitCodesRequirementPtrOutput() PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(context.Background())
}

func (i *podFailurePolicyOnExitCodesRequirementPtrType) ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementPtrOutput)
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirementOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnExitCodesRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirement)(nil)).Elem()
}

func (o PodFailurePolicyOnExitCodesRequirementOutput) ToPodFailurePolicyOnExitCodesRequirementOutput() PodFailurePolicyOnExitCodesRequirementOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementOutput) ToPodFailurePolicyOnExitCodesRequirementOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementOutput) ToPodFailurePolicyOnExitCodesRequirementPtrOutput() PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return o.ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(context.Background())
}

func (o PodFailurePolicyOnExitCodesRequirementOutput) ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodFailurePolicyOnExitCodesRequirement) *PodFailurePolicyOnExitCodesRequirement {
		return &v
	}).(PodFailurePolicyOnExitCodesRequirementPtrOutput)
}

// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
func (o PodFailurePolicyOnExitCodesRequirementOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirement) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
//
//   - In: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is in the set of specified values.
//   - NotIn: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is not in the set of specified values.
//     Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
func (o PodFailurePolicyOnExitCodesRequirementOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirement) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
func (o PodFailurePolicyOnExitCodesRequirementOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirement) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type PodFailurePolicyOnExitCodesRequirementPtrOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnExitCodesRequirementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyOnExitCodesRequirement)(nil)).Elem()
}

func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) ToPodFailurePolicyOnExitCodesRequirementPtrOutput() PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) ToPodFailurePolicyOnExitCodesRequirementPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) Elem() PodFailurePolicyOnExitCodesRequirementOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirement) PodFailurePolicyOnExitCodesRequirement {
		if v != nil {
			return *v
		}
		var ret PodFailurePolicyOnExitCodesRequirement
		return ret
	}).(PodFailurePolicyOnExitCodesRequirementOutput)
}

// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirement) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
//
//   - In: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is in the set of specified values.
//   - NotIn: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is not in the set of specified values.
//     Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirement) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
func (o PodFailurePolicyOnExitCodesRequirementPtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirement) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirementPatch struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName *string `pulumi:"containerName"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	//   Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator *string `pulumi:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values []int `pulumi:"values"`
}

// PodFailurePolicyOnExitCodesRequirementPatchInput is an input type that accepts PodFailurePolicyOnExitCodesRequirementPatchArgs and PodFailurePolicyOnExitCodesRequirementPatchOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnExitCodesRequirementPatchInput` via:
//
//	PodFailurePolicyOnExitCodesRequirementPatchArgs{...}
type PodFailurePolicyOnExitCodesRequirementPatchInput interface {
	pulumi.Input

	ToPodFailurePolicyOnExitCodesRequirementPatchOutput() PodFailurePolicyOnExitCodesRequirementPatchOutput
	ToPodFailurePolicyOnExitCodesRequirementPatchOutputWithContext(context.Context) PodFailurePolicyOnExitCodesRequirementPatchOutput
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirementPatchArgs struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	//   Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (PodFailurePolicyOnExitCodesRequirementPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementPatch)(nil)).Elem()
}

func (i PodFailurePolicyOnExitCodesRequirementPatchArgs) ToPodFailurePolicyOnExitCodesRequirementPatchOutput() PodFailurePolicyOnExitCodesRequirementPatchOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementPatchOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnExitCodesRequirementPatchArgs) ToPodFailurePolicyOnExitCodesRequirementPatchOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementPatchOutput)
}

func (i PodFailurePolicyOnExitCodesRequirementPatchArgs) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutput() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnExitCodesRequirementPatchArgs) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementPatchOutput).ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(ctx)
}

// PodFailurePolicyOnExitCodesRequirementPatchPtrInput is an input type that accepts PodFailurePolicyOnExitCodesRequirementPatchArgs, PodFailurePolicyOnExitCodesRequirementPatchPtr and PodFailurePolicyOnExitCodesRequirementPatchPtrOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnExitCodesRequirementPatchPtrInput` via:
//
//	        PodFailurePolicyOnExitCodesRequirementPatchArgs{...}
//
//	or:
//
//	        nil
type PodFailurePolicyOnExitCodesRequirementPatchPtrInput interface {
	pulumi.Input

	ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutput() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput
	ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(context.Context) PodFailurePolicyOnExitCodesRequirementPatchPtrOutput
}

type podFailurePolicyOnExitCodesRequirementPatchPtrType PodFailurePolicyOnExitCodesRequirementPatchArgs

func PodFailurePolicyOnExitCodesRequirementPatchPtr(v *PodFailurePolicyOnExitCodesRequirementPatchArgs) PodFailurePolicyOnExitCodesRequirementPatchPtrInput {
	return (*podFailurePolicyOnExitCodesRequirementPatchPtrType)(v)
}

func (*podFailurePolicyOnExitCodesRequirementPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyOnExitCodesRequirementPatch)(nil)).Elem()
}

func (i *podFailurePolicyOnExitCodesRequirementPatchPtrType) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutput() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return i.ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(context.Background())
}

func (i *podFailurePolicyOnExitCodesRequirementPatchPtrType) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnExitCodesRequirementPatchPtrOutput)
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirementPatchOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnExitCodesRequirementPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementPatch)(nil)).Elem()
}

func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) ToPodFailurePolicyOnExitCodesRequirementPatchOutput() PodFailurePolicyOnExitCodesRequirementPatchOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) ToPodFailurePolicyOnExitCodesRequirementPatchOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutput() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return o.ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(context.Background())
}

func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodFailurePolicyOnExitCodesRequirementPatch) *PodFailurePolicyOnExitCodesRequirementPatch {
		return &v
	}).(PodFailurePolicyOnExitCodesRequirementPatchPtrOutput)
}

// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirementPatch) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
//
//   - In: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is in the set of specified values.
//   - NotIn: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is not in the set of specified values.
//     Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirementPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
func (o PodFailurePolicyOnExitCodesRequirementPatchOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PodFailurePolicyOnExitCodesRequirementPatch) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type PodFailurePolicyOnExitCodesRequirementPatchPtrOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyOnExitCodesRequirementPatch)(nil)).Elem()
}

func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutput() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) ToPodFailurePolicyOnExitCodesRequirementPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return o
}

func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) Elem() PodFailurePolicyOnExitCodesRequirementPatchOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirementPatch) PodFailurePolicyOnExitCodesRequirementPatch {
		if v != nil {
			return *v
		}
		var ret PodFailurePolicyOnExitCodesRequirementPatch
		return ret
	}).(PodFailurePolicyOnExitCodesRequirementPatchOutput)
}

// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirementPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
//
//   - In: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is in the set of specified values.
//   - NotIn: the requirement is satisfied if at least one container exit code
//     (might be multiple if there are multiple containers not restricted
//     by the 'containerName' field) is not in the set of specified values.
//     Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirementPatch) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
func (o PodFailurePolicyOnExitCodesRequirementPatchPtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PodFailurePolicyOnExitCodesRequirementPatch) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPattern struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status string `pulumi:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type string `pulumi:"type"`
}

// PodFailurePolicyOnPodConditionsPatternInput is an input type that accepts PodFailurePolicyOnPodConditionsPatternArgs and PodFailurePolicyOnPodConditionsPatternOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnPodConditionsPatternInput` via:
//
//	PodFailurePolicyOnPodConditionsPatternArgs{...}
type PodFailurePolicyOnPodConditionsPatternInput interface {
	pulumi.Input

	ToPodFailurePolicyOnPodConditionsPatternOutput() PodFailurePolicyOnPodConditionsPatternOutput
	ToPodFailurePolicyOnPodConditionsPatternOutputWithContext(context.Context) PodFailurePolicyOnPodConditionsPatternOutput
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPatternArgs struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PodFailurePolicyOnPodConditionsPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnPodConditionsPattern)(nil)).Elem()
}

func (i PodFailurePolicyOnPodConditionsPatternArgs) ToPodFailurePolicyOnPodConditionsPatternOutput() PodFailurePolicyOnPodConditionsPatternOutput {
	return i.ToPodFailurePolicyOnPodConditionsPatternOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnPodConditionsPatternArgs) ToPodFailurePolicyOnPodConditionsPatternOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnPodConditionsPatternOutput)
}

// PodFailurePolicyOnPodConditionsPatternArrayInput is an input type that accepts PodFailurePolicyOnPodConditionsPatternArray and PodFailurePolicyOnPodConditionsPatternArrayOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnPodConditionsPatternArrayInput` via:
//
//	PodFailurePolicyOnPodConditionsPatternArray{ PodFailurePolicyOnPodConditionsPatternArgs{...} }
type PodFailurePolicyOnPodConditionsPatternArrayInput interface {
	pulumi.Input

	ToPodFailurePolicyOnPodConditionsPatternArrayOutput() PodFailurePolicyOnPodConditionsPatternArrayOutput
	ToPodFailurePolicyOnPodConditionsPatternArrayOutputWithContext(context.Context) PodFailurePolicyOnPodConditionsPatternArrayOutput
}

type PodFailurePolicyOnPodConditionsPatternArray []PodFailurePolicyOnPodConditionsPatternInput

func (PodFailurePolicyOnPodConditionsPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyOnPodConditionsPattern)(nil)).Elem()
}

func (i PodFailurePolicyOnPodConditionsPatternArray) ToPodFailurePolicyOnPodConditionsPatternArrayOutput() PodFailurePolicyOnPodConditionsPatternArrayOutput {
	return i.ToPodFailurePolicyOnPodConditionsPatternArrayOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnPodConditionsPatternArray) ToPodFailurePolicyOnPodConditionsPatternArrayOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnPodConditionsPatternArrayOutput)
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPatternOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnPodConditionsPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnPodConditionsPattern)(nil)).Elem()
}

func (o PodFailurePolicyOnPodConditionsPatternOutput) ToPodFailurePolicyOnPodConditionsPatternOutput() PodFailurePolicyOnPodConditionsPatternOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternOutput) ToPodFailurePolicyOnPodConditionsPatternOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternOutput {
	return o
}

// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
func (o PodFailurePolicyOnPodConditionsPatternOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PodFailurePolicyOnPodConditionsPattern) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
func (o PodFailurePolicyOnPodConditionsPatternOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PodFailurePolicyOnPodConditionsPattern) string { return v.Type }).(pulumi.StringOutput)
}

type PodFailurePolicyOnPodConditionsPatternArrayOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnPodConditionsPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyOnPodConditionsPattern)(nil)).Elem()
}

func (o PodFailurePolicyOnPodConditionsPatternArrayOutput) ToPodFailurePolicyOnPodConditionsPatternArrayOutput() PodFailurePolicyOnPodConditionsPatternArrayOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternArrayOutput) ToPodFailurePolicyOnPodConditionsPatternArrayOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternArrayOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternArrayOutput) Index(i pulumi.IntInput) PodFailurePolicyOnPodConditionsPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodFailurePolicyOnPodConditionsPattern {
		return vs[0].([]PodFailurePolicyOnPodConditionsPattern)[vs[1].(int)]
	}).(PodFailurePolicyOnPodConditionsPatternOutput)
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPatternPatch struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status *string `pulumi:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type *string `pulumi:"type"`
}

// PodFailurePolicyOnPodConditionsPatternPatchInput is an input type that accepts PodFailurePolicyOnPodConditionsPatternPatchArgs and PodFailurePolicyOnPodConditionsPatternPatchOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnPodConditionsPatternPatchInput` via:
//
//	PodFailurePolicyOnPodConditionsPatternPatchArgs{...}
type PodFailurePolicyOnPodConditionsPatternPatchInput interface {
	pulumi.Input

	ToPodFailurePolicyOnPodConditionsPatternPatchOutput() PodFailurePolicyOnPodConditionsPatternPatchOutput
	ToPodFailurePolicyOnPodConditionsPatternPatchOutputWithContext(context.Context) PodFailurePolicyOnPodConditionsPatternPatchOutput
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPatternPatchArgs struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PodFailurePolicyOnPodConditionsPatternPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternPatch)(nil)).Elem()
}

func (i PodFailurePolicyOnPodConditionsPatternPatchArgs) ToPodFailurePolicyOnPodConditionsPatternPatchOutput() PodFailurePolicyOnPodConditionsPatternPatchOutput {
	return i.ToPodFailurePolicyOnPodConditionsPatternPatchOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnPodConditionsPatternPatchArgs) ToPodFailurePolicyOnPodConditionsPatternPatchOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnPodConditionsPatternPatchOutput)
}

// PodFailurePolicyOnPodConditionsPatternPatchArrayInput is an input type that accepts PodFailurePolicyOnPodConditionsPatternPatchArray and PodFailurePolicyOnPodConditionsPatternPatchArrayOutput values.
// You can construct a concrete instance of `PodFailurePolicyOnPodConditionsPatternPatchArrayInput` via:
//
//	PodFailurePolicyOnPodConditionsPatternPatchArray{ PodFailurePolicyOnPodConditionsPatternPatchArgs{...} }
type PodFailurePolicyOnPodConditionsPatternPatchArrayInput interface {
	pulumi.Input

	ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutput() PodFailurePolicyOnPodConditionsPatternPatchArrayOutput
	ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutputWithContext(context.Context) PodFailurePolicyOnPodConditionsPatternPatchArrayOutput
}

type PodFailurePolicyOnPodConditionsPatternPatchArray []PodFailurePolicyOnPodConditionsPatternPatchInput

func (PodFailurePolicyOnPodConditionsPatternPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyOnPodConditionsPatternPatch)(nil)).Elem()
}

func (i PodFailurePolicyOnPodConditionsPatternPatchArray) ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutput() PodFailurePolicyOnPodConditionsPatternPatchArrayOutput {
	return i.ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutputWithContext(context.Background())
}

func (i PodFailurePolicyOnPodConditionsPatternPatchArray) ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyOnPodConditionsPatternPatchArrayOutput)
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type PodFailurePolicyOnPodConditionsPatternPatchOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnPodConditionsPatternPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternPatch)(nil)).Elem()
}

func (o PodFailurePolicyOnPodConditionsPatternPatchOutput) ToPodFailurePolicyOnPodConditionsPatternPatchOutput() PodFailurePolicyOnPodConditionsPatternPatchOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternPatchOutput) ToPodFailurePolicyOnPodConditionsPatternPatchOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternPatchOutput {
	return o
}

// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
func (o PodFailurePolicyOnPodConditionsPatternPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyOnPodConditionsPatternPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
func (o PodFailurePolicyOnPodConditionsPatternPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyOnPodConditionsPatternPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PodFailurePolicyOnPodConditionsPatternPatchArrayOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyOnPodConditionsPatternPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyOnPodConditionsPatternPatch)(nil)).Elem()
}

func (o PodFailurePolicyOnPodConditionsPatternPatchArrayOutput) ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutput() PodFailurePolicyOnPodConditionsPatternPatchArrayOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternPatchArrayOutput) ToPodFailurePolicyOnPodConditionsPatternPatchArrayOutputWithContext(ctx context.Context) PodFailurePolicyOnPodConditionsPatternPatchArrayOutput {
	return o
}

func (o PodFailurePolicyOnPodConditionsPatternPatchArrayOutput) Index(i pulumi.IntInput) PodFailurePolicyOnPodConditionsPatternPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodFailurePolicyOnPodConditionsPatternPatch {
		return vs[0].([]PodFailurePolicyOnPodConditionsPatternPatch)[vs[1].(int)]
	}).(PodFailurePolicyOnPodConditionsPatternPatchOutput)
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicyPatch struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules []PodFailurePolicyRulePatch `pulumi:"rules"`
}

// PodFailurePolicyPatchInput is an input type that accepts PodFailurePolicyPatchArgs and PodFailurePolicyPatchOutput values.
// You can construct a concrete instance of `PodFailurePolicyPatchInput` via:
//
//	PodFailurePolicyPatchArgs{...}
type PodFailurePolicyPatchInput interface {
	pulumi.Input

	ToPodFailurePolicyPatchOutput() PodFailurePolicyPatchOutput
	ToPodFailurePolicyPatchOutputWithContext(context.Context) PodFailurePolicyPatchOutput
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicyPatchArgs struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules PodFailurePolicyRulePatchArrayInput `pulumi:"rules"`
}

func (PodFailurePolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyPatch)(nil)).Elem()
}

func (i PodFailurePolicyPatchArgs) ToPodFailurePolicyPatchOutput() PodFailurePolicyPatchOutput {
	return i.ToPodFailurePolicyPatchOutputWithContext(context.Background())
}

func (i PodFailurePolicyPatchArgs) ToPodFailurePolicyPatchOutputWithContext(ctx context.Context) PodFailurePolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyPatchOutput)
}

func (i PodFailurePolicyPatchArgs) ToPodFailurePolicyPatchPtrOutput() PodFailurePolicyPatchPtrOutput {
	return i.ToPodFailurePolicyPatchPtrOutputWithContext(context.Background())
}

func (i PodFailurePolicyPatchArgs) ToPodFailurePolicyPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyPatchOutput).ToPodFailurePolicyPatchPtrOutputWithContext(ctx)
}

// PodFailurePolicyPatchPtrInput is an input type that accepts PodFailurePolicyPatchArgs, PodFailurePolicyPatchPtr and PodFailurePolicyPatchPtrOutput values.
// You can construct a concrete instance of `PodFailurePolicyPatchPtrInput` via:
//
//	        PodFailurePolicyPatchArgs{...}
//
//	or:
//
//	        nil
type PodFailurePolicyPatchPtrInput interface {
	pulumi.Input

	ToPodFailurePolicyPatchPtrOutput() PodFailurePolicyPatchPtrOutput
	ToPodFailurePolicyPatchPtrOutputWithContext(context.Context) PodFailurePolicyPatchPtrOutput
}

type podFailurePolicyPatchPtrType PodFailurePolicyPatchArgs

func PodFailurePolicyPatchPtr(v *PodFailurePolicyPatchArgs) PodFailurePolicyPatchPtrInput {
	return (*podFailurePolicyPatchPtrType)(v)
}

func (*podFailurePolicyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyPatch)(nil)).Elem()
}

func (i *podFailurePolicyPatchPtrType) ToPodFailurePolicyPatchPtrOutput() PodFailurePolicyPatchPtrOutput {
	return i.ToPodFailurePolicyPatchPtrOutputWithContext(context.Background())
}

func (i *podFailurePolicyPatchPtrType) ToPodFailurePolicyPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyPatchPtrOutput)
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicyPatchOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyPatch)(nil)).Elem()
}

func (o PodFailurePolicyPatchOutput) ToPodFailurePolicyPatchOutput() PodFailurePolicyPatchOutput {
	return o
}

func (o PodFailurePolicyPatchOutput) ToPodFailurePolicyPatchOutputWithContext(ctx context.Context) PodFailurePolicyPatchOutput {
	return o
}

func (o PodFailurePolicyPatchOutput) ToPodFailurePolicyPatchPtrOutput() PodFailurePolicyPatchPtrOutput {
	return o.ToPodFailurePolicyPatchPtrOutputWithContext(context.Background())
}

func (o PodFailurePolicyPatchOutput) ToPodFailurePolicyPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodFailurePolicyPatch) *PodFailurePolicyPatch {
		return &v
	}).(PodFailurePolicyPatchPtrOutput)
}

// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
func (o PodFailurePolicyPatchOutput) Rules() PodFailurePolicyRulePatchArrayOutput {
	return o.ApplyT(func(v PodFailurePolicyPatch) []PodFailurePolicyRulePatch { return v.Rules }).(PodFailurePolicyRulePatchArrayOutput)
}

type PodFailurePolicyPatchPtrOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodFailurePolicyPatch)(nil)).Elem()
}

func (o PodFailurePolicyPatchPtrOutput) ToPodFailurePolicyPatchPtrOutput() PodFailurePolicyPatchPtrOutput {
	return o
}

func (o PodFailurePolicyPatchPtrOutput) ToPodFailurePolicyPatchPtrOutputWithContext(ctx context.Context) PodFailurePolicyPatchPtrOutput {
	return o
}

func (o PodFailurePolicyPatchPtrOutput) Elem() PodFailurePolicyPatchOutput {
	return o.ApplyT(func(v *PodFailurePolicyPatch) PodFailurePolicyPatch {
		if v != nil {
			return *v
		}
		var ret PodFailurePolicyPatch
		return ret
	}).(PodFailurePolicyPatchOutput)
}

// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
func (o PodFailurePolicyPatchPtrOutput) Rules() PodFailurePolicyRulePatchArrayOutput {
	return o.ApplyT(func(v *PodFailurePolicyPatch) []PodFailurePolicyRulePatch {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(PodFailurePolicyRulePatchArrayOutput)
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRule struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - FailIndex: indicates that the pod's index is marked as Failed and will
	//   not be restarted.
	//   This value is beta-level. It can be used when the
	//   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	//   Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action string `pulumi:"action"`
	// Represents the requirement on the container exit codes.
	OnExitCodes *PodFailurePolicyOnExitCodesRequirement `pulumi:"onExitCodes"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions []PodFailurePolicyOnPodConditionsPattern `pulumi:"onPodConditions"`
}

// PodFailurePolicyRuleInput is an input type that accepts PodFailurePolicyRuleArgs and PodFailurePolicyRuleOutput values.
// You can construct a concrete instance of `PodFailurePolicyRuleInput` via:
//
//	PodFailurePolicyRuleArgs{...}
type PodFailurePolicyRuleInput interface {
	pulumi.Input

	ToPodFailurePolicyRuleOutput() PodFailurePolicyRuleOutput
	ToPodFailurePolicyRuleOutputWithContext(context.Context) PodFailurePolicyRuleOutput
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRuleArgs struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - FailIndex: indicates that the pod's index is marked as Failed and will
	//   not be restarted.
	//   This value is beta-level. It can be used when the
	//   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	//   Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action pulumi.StringInput `pulumi:"action"`
	// Represents the requirement on the container exit codes.
	OnExitCodes PodFailurePolicyOnExitCodesRequirementPtrInput `pulumi:"onExitCodes"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions PodFailurePolicyOnPodConditionsPatternArrayInput `pulumi:"onPodConditions"`
}

func (PodFailurePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyRule)(nil)).Elem()
}

func (i PodFailurePolicyRuleArgs) ToPodFailurePolicyRuleOutput() PodFailurePolicyRuleOutput {
	return i.ToPodFailurePolicyRuleOutputWithContext(context.Background())
}

func (i PodFailurePolicyRuleArgs) ToPodFailurePolicyRuleOutputWithContext(ctx context.Context) PodFailurePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyRuleOutput)
}

// PodFailurePolicyRuleArrayInput is an input type that accepts PodFailurePolicyRuleArray and PodFailurePolicyRuleArrayOutput values.
// You can construct a concrete instance of `PodFailurePolicyRuleArrayInput` via:
//
//	PodFailurePolicyRuleArray{ PodFailurePolicyRuleArgs{...} }
type PodFailurePolicyRuleArrayInput interface {
	pulumi.Input

	ToPodFailurePolicyRuleArrayOutput() PodFailurePolicyRuleArrayOutput
	ToPodFailurePolicyRuleArrayOutputWithContext(context.Context) PodFailurePolicyRuleArrayOutput
}

type PodFailurePolicyRuleArray []PodFailurePolicyRuleInput

func (PodFailurePolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyRule)(nil)).Elem()
}

func (i PodFailurePolicyRuleArray) ToPodFailurePolicyRuleArrayOutput() PodFailurePolicyRuleArrayOutput {
	return i.ToPodFailurePolicyRuleArrayOutputWithContext(context.Background())
}

func (i PodFailurePolicyRuleArray) ToPodFailurePolicyRuleArrayOutputWithContext(ctx context.Context) PodFailurePolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyRuleArrayOutput)
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRuleOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyRule)(nil)).Elem()
}

func (o PodFailurePolicyRuleOutput) ToPodFailurePolicyRuleOutput() PodFailurePolicyRuleOutput {
	return o
}

func (o PodFailurePolicyRuleOutput) ToPodFailurePolicyRuleOutputWithContext(ctx context.Context) PodFailurePolicyRuleOutput {
	return o
}

// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
//
//   - FailJob: indicates that the pod's job is marked as Failed and all
//     running pods are terminated.
//   - FailIndex: indicates that the pod's index is marked as Failed and will
//     not be restarted.
//     This value is beta-level. It can be used when the
//     `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
//   - Ignore: indicates that the counter towards the .backoffLimit is not
//     incremented and a replacement pod is created.
//   - Count: indicates that the pod is handled in the default way - the
//     counter towards the .backoffLimit is incremented.
//     Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
func (o PodFailurePolicyRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v PodFailurePolicyRule) string { return v.Action }).(pulumi.StringOutput)
}

// Represents the requirement on the container exit codes.
func (o PodFailurePolicyRuleOutput) OnExitCodes() PodFailurePolicyOnExitCodesRequirementPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyRule) *PodFailurePolicyOnExitCodesRequirement { return v.OnExitCodes }).(PodFailurePolicyOnExitCodesRequirementPtrOutput)
}

// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
func (o PodFailurePolicyRuleOutput) OnPodConditions() PodFailurePolicyOnPodConditionsPatternArrayOutput {
	return o.ApplyT(func(v PodFailurePolicyRule) []PodFailurePolicyOnPodConditionsPattern { return v.OnPodConditions }).(PodFailurePolicyOnPodConditionsPatternArrayOutput)
}

type PodFailurePolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyRule)(nil)).Elem()
}

func (o PodFailurePolicyRuleArrayOutput) ToPodFailurePolicyRuleArrayOutput() PodFailurePolicyRuleArrayOutput {
	return o
}

func (o PodFailurePolicyRuleArrayOutput) ToPodFailurePolicyRuleArrayOutputWithContext(ctx context.Context) PodFailurePolicyRuleArrayOutput {
	return o
}

func (o PodFailurePolicyRuleArrayOutput) Index(i pulumi.IntInput) PodFailurePolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodFailurePolicyRule {
		return vs[0].([]PodFailurePolicyRule)[vs[1].(int)]
	}).(PodFailurePolicyRuleOutput)
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRulePatch struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - FailIndex: indicates that the pod's index is marked as Failed and will
	//   not be restarted.
	//   This value is beta-level. It can be used when the
	//   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	//   Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action *string `pulumi:"action"`
	// Represents the requirement on the container exit codes.
	OnExitCodes *PodFailurePolicyOnExitCodesRequirementPatch `pulumi:"onExitCodes"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions []PodFailurePolicyOnPodConditionsPatternPatch `pulumi:"onPodConditions"`
}

// PodFailurePolicyRulePatchInput is an input type that accepts PodFailurePolicyRulePatchArgs and PodFailurePolicyRulePatchOutput values.
// You can construct a concrete instance of `PodFailurePolicyRulePatchInput` via:
//
//	PodFailurePolicyRulePatchArgs{...}
type PodFailurePolicyRulePatchInput interface {
	pulumi.Input

	ToPodFailurePolicyRulePatchOutput() PodFailurePolicyRulePatchOutput
	ToPodFailurePolicyRulePatchOutputWithContext(context.Context) PodFailurePolicyRulePatchOutput
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRulePatchArgs struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - FailIndex: indicates that the pod's index is marked as Failed and will
	//   not be restarted.
	//   This value is beta-level. It can be used when the
	//   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	//   Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Represents the requirement on the container exit codes.
	OnExitCodes PodFailurePolicyOnExitCodesRequirementPatchPtrInput `pulumi:"onExitCodes"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions PodFailurePolicyOnPodConditionsPatternPatchArrayInput `pulumi:"onPodConditions"`
}

func (PodFailurePolicyRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyRulePatch)(nil)).Elem()
}

func (i PodFailurePolicyRulePatchArgs) ToPodFailurePolicyRulePatchOutput() PodFailurePolicyRulePatchOutput {
	return i.ToPodFailurePolicyRulePatchOutputWithContext(context.Background())
}

func (i PodFailurePolicyRulePatchArgs) ToPodFailurePolicyRulePatchOutputWithContext(ctx context.Context) PodFailurePolicyRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyRulePatchOutput)
}

// PodFailurePolicyRulePatchArrayInput is an input type that accepts PodFailurePolicyRulePatchArray and PodFailurePolicyRulePatchArrayOutput values.
// You can construct a concrete instance of `PodFailurePolicyRulePatchArrayInput` via:
//
//	PodFailurePolicyRulePatchArray{ PodFailurePolicyRulePatchArgs{...} }
type PodFailurePolicyRulePatchArrayInput interface {
	pulumi.Input

	ToPodFailurePolicyRulePatchArrayOutput() PodFailurePolicyRulePatchArrayOutput
	ToPodFailurePolicyRulePatchArrayOutputWithContext(context.Context) PodFailurePolicyRulePatchArrayOutput
}

type PodFailurePolicyRulePatchArray []PodFailurePolicyRulePatchInput

func (PodFailurePolicyRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyRulePatch)(nil)).Elem()
}

func (i PodFailurePolicyRulePatchArray) ToPodFailurePolicyRulePatchArrayOutput() PodFailurePolicyRulePatchArrayOutput {
	return i.ToPodFailurePolicyRulePatchArrayOutputWithContext(context.Background())
}

func (i PodFailurePolicyRulePatchArray) ToPodFailurePolicyRulePatchArrayOutputWithContext(ctx context.Context) PodFailurePolicyRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodFailurePolicyRulePatchArrayOutput)
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRulePatchOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodFailurePolicyRulePatch)(nil)).Elem()
}

func (o PodFailurePolicyRulePatchOutput) ToPodFailurePolicyRulePatchOutput() PodFailurePolicyRulePatchOutput {
	return o
}

func (o PodFailurePolicyRulePatchOutput) ToPodFailurePolicyRulePatchOutputWithContext(ctx context.Context) PodFailurePolicyRulePatchOutput {
	return o
}

// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
//
//   - FailJob: indicates that the pod's job is marked as Failed and all
//     running pods are terminated.
//   - FailIndex: indicates that the pod's index is marked as Failed and will
//     not be restarted.
//     This value is beta-level. It can be used when the
//     `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
//   - Ignore: indicates that the counter towards the .backoffLimit is not
//     incremented and a replacement pod is created.
//   - Count: indicates that the pod is handled in the default way - the
//     counter towards the .backoffLimit is incremented.
//     Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
func (o PodFailurePolicyRulePatchOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyRulePatch) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Represents the requirement on the container exit codes.
func (o PodFailurePolicyRulePatchOutput) OnExitCodes() PodFailurePolicyOnExitCodesRequirementPatchPtrOutput {
	return o.ApplyT(func(v PodFailurePolicyRulePatch) *PodFailurePolicyOnExitCodesRequirementPatch { return v.OnExitCodes }).(PodFailurePolicyOnExitCodesRequirementPatchPtrOutput)
}

// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
func (o PodFailurePolicyRulePatchOutput) OnPodConditions() PodFailurePolicyOnPodConditionsPatternPatchArrayOutput {
	return o.ApplyT(func(v PodFailurePolicyRulePatch) []PodFailurePolicyOnPodConditionsPatternPatch {
		return v.OnPodConditions
	}).(PodFailurePolicyOnPodConditionsPatternPatchArrayOutput)
}

type PodFailurePolicyRulePatchArrayOutput struct{ *pulumi.OutputState }

func (PodFailurePolicyRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodFailurePolicyRulePatch)(nil)).Elem()
}

func (o PodFailurePolicyRulePatchArrayOutput) ToPodFailurePolicyRulePatchArrayOutput() PodFailurePolicyRulePatchArrayOutput {
	return o
}

func (o PodFailurePolicyRulePatchArrayOutput) ToPodFailurePolicyRulePatchArrayOutputWithContext(ctx context.Context) PodFailurePolicyRulePatchArrayOutput {
	return o
}

func (o PodFailurePolicyRulePatchArrayOutput) Index(i pulumi.IntInput) PodFailurePolicyRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodFailurePolicyRulePatch {
		return vs[0].([]PodFailurePolicyRulePatch)[vs[1].(int)]
	}).(PodFailurePolicyRulePatchOutput)
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPods struct {
	// failed holds UIDs of failed Pods.
	Failed []string `pulumi:"failed"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded []string `pulumi:"succeeded"`
}

// UncountedTerminatedPodsInput is an input type that accepts UncountedTerminatedPodsArgs and UncountedTerminatedPodsOutput values.
// You can construct a concrete instance of `UncountedTerminatedPodsInput` via:
//
//	UncountedTerminatedPodsArgs{...}
type UncountedTerminatedPodsInput interface {
	pulumi.Input

	ToUncountedTerminatedPodsOutput() UncountedTerminatedPodsOutput
	ToUncountedTerminatedPodsOutputWithContext(context.Context) UncountedTerminatedPodsOutput
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPodsArgs struct {
	// failed holds UIDs of failed Pods.
	Failed pulumi.StringArrayInput `pulumi:"failed"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded pulumi.StringArrayInput `pulumi:"succeeded"`
}

func (UncountedTerminatedPodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UncountedTerminatedPods)(nil)).Elem()
}

func (i UncountedTerminatedPodsArgs) ToUncountedTerminatedPodsOutput() UncountedTerminatedPodsOutput {
	return i.ToUncountedTerminatedPodsOutputWithContext(context.Background())
}

func (i UncountedTerminatedPodsArgs) ToUncountedTerminatedPodsOutputWithContext(ctx context.Context) UncountedTerminatedPodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsOutput)
}

func (i UncountedTerminatedPodsArgs) ToUncountedTerminatedPodsPtrOutput() UncountedTerminatedPodsPtrOutput {
	return i.ToUncountedTerminatedPodsPtrOutputWithContext(context.Background())
}

func (i UncountedTerminatedPodsArgs) ToUncountedTerminatedPodsPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsOutput).ToUncountedTerminatedPodsPtrOutputWithContext(ctx)
}

// UncountedTerminatedPodsPtrInput is an input type that accepts UncountedTerminatedPodsArgs, UncountedTerminatedPodsPtr and UncountedTerminatedPodsPtrOutput values.
// You can construct a concrete instance of `UncountedTerminatedPodsPtrInput` via:
//
//	        UncountedTerminatedPodsArgs{...}
//
//	or:
//
//	        nil
type UncountedTerminatedPodsPtrInput interface {
	pulumi.Input

	ToUncountedTerminatedPodsPtrOutput() UncountedTerminatedPodsPtrOutput
	ToUncountedTerminatedPodsPtrOutputWithContext(context.Context) UncountedTerminatedPodsPtrOutput
}

type uncountedTerminatedPodsPtrType UncountedTerminatedPodsArgs

func UncountedTerminatedPodsPtr(v *UncountedTerminatedPodsArgs) UncountedTerminatedPodsPtrInput {
	return (*uncountedTerminatedPodsPtrType)(v)
}

func (*uncountedTerminatedPodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UncountedTerminatedPods)(nil)).Elem()
}

func (i *uncountedTerminatedPodsPtrType) ToUncountedTerminatedPodsPtrOutput() UncountedTerminatedPodsPtrOutput {
	return i.ToUncountedTerminatedPodsPtrOutputWithContext(context.Background())
}

func (i *uncountedTerminatedPodsPtrType) ToUncountedTerminatedPodsPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsPtrOutput)
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPodsOutput struct{ *pulumi.OutputState }

func (UncountedTerminatedPodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UncountedTerminatedPods)(nil)).Elem()
}

func (o UncountedTerminatedPodsOutput) ToUncountedTerminatedPodsOutput() UncountedTerminatedPodsOutput {
	return o
}

func (o UncountedTerminatedPodsOutput) ToUncountedTerminatedPodsOutputWithContext(ctx context.Context) UncountedTerminatedPodsOutput {
	return o
}

func (o UncountedTerminatedPodsOutput) ToUncountedTerminatedPodsPtrOutput() UncountedTerminatedPodsPtrOutput {
	return o.ToUncountedTerminatedPodsPtrOutputWithContext(context.Background())
}

func (o UncountedTerminatedPodsOutput) ToUncountedTerminatedPodsPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UncountedTerminatedPods) *UncountedTerminatedPods {
		return &v
	}).(UncountedTerminatedPodsPtrOutput)
}

// failed holds UIDs of failed Pods.
func (o UncountedTerminatedPodsOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UncountedTerminatedPods) []string { return v.Failed }).(pulumi.StringArrayOutput)
}

// succeeded holds UIDs of succeeded Pods.
func (o UncountedTerminatedPodsOutput) Succeeded() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UncountedTerminatedPods) []string { return v.Succeeded }).(pulumi.StringArrayOutput)
}

type UncountedTerminatedPodsPtrOutput struct{ *pulumi.OutputState }

func (UncountedTerminatedPodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UncountedTerminatedPods)(nil)).Elem()
}

func (o UncountedTerminatedPodsPtrOutput) ToUncountedTerminatedPodsPtrOutput() UncountedTerminatedPodsPtrOutput {
	return o
}

func (o UncountedTerminatedPodsPtrOutput) ToUncountedTerminatedPodsPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPtrOutput {
	return o
}

func (o UncountedTerminatedPodsPtrOutput) Elem() UncountedTerminatedPodsOutput {
	return o.ApplyT(func(v *UncountedTerminatedPods) UncountedTerminatedPods {
		if v != nil {
			return *v
		}
		var ret UncountedTerminatedPods
		return ret
	}).(UncountedTerminatedPodsOutput)
}

// failed holds UIDs of failed Pods.
func (o UncountedTerminatedPodsPtrOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UncountedTerminatedPods) []string {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.StringArrayOutput)
}

// succeeded holds UIDs of succeeded Pods.
func (o UncountedTerminatedPodsPtrOutput) Succeeded() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UncountedTerminatedPods) []string {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.StringArrayOutput)
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPodsPatch struct {
	// failed holds UIDs of failed Pods.
	Failed []string `pulumi:"failed"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded []string `pulumi:"succeeded"`
}

// UncountedTerminatedPodsPatchInput is an input type that accepts UncountedTerminatedPodsPatchArgs and UncountedTerminatedPodsPatchOutput values.
// You can construct a concrete instance of `UncountedTerminatedPodsPatchInput` via:
//
//	UncountedTerminatedPodsPatchArgs{...}
type UncountedTerminatedPodsPatchInput interface {
	pulumi.Input

	ToUncountedTerminatedPodsPatchOutput() UncountedTerminatedPodsPatchOutput
	ToUncountedTerminatedPodsPatchOutputWithContext(context.Context) UncountedTerminatedPodsPatchOutput
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPodsPatchArgs struct {
	// failed holds UIDs of failed Pods.
	Failed pulumi.StringArrayInput `pulumi:"failed"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded pulumi.StringArrayInput `pulumi:"succeeded"`
}

func (UncountedTerminatedPodsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UncountedTerminatedPodsPatch)(nil)).Elem()
}

func (i UncountedTerminatedPodsPatchArgs) ToUncountedTerminatedPodsPatchOutput() UncountedTerminatedPodsPatchOutput {
	return i.ToUncountedTerminatedPodsPatchOutputWithContext(context.Background())
}

func (i UncountedTerminatedPodsPatchArgs) ToUncountedTerminatedPodsPatchOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsPatchOutput)
}

func (i UncountedTerminatedPodsPatchArgs) ToUncountedTerminatedPodsPatchPtrOutput() UncountedTerminatedPodsPatchPtrOutput {
	return i.ToUncountedTerminatedPodsPatchPtrOutputWithContext(context.Background())
}

func (i UncountedTerminatedPodsPatchArgs) ToUncountedTerminatedPodsPatchPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsPatchOutput).ToUncountedTerminatedPodsPatchPtrOutputWithContext(ctx)
}

// UncountedTerminatedPodsPatchPtrInput is an input type that accepts UncountedTerminatedPodsPatchArgs, UncountedTerminatedPodsPatchPtr and UncountedTerminatedPodsPatchPtrOutput values.
// You can construct a concrete instance of `UncountedTerminatedPodsPatchPtrInput` via:
//
//	        UncountedTerminatedPodsPatchArgs{...}
//
//	or:
//
//	        nil
type UncountedTerminatedPodsPatchPtrInput interface {
	pulumi.Input

	ToUncountedTerminatedPodsPatchPtrOutput() UncountedTerminatedPodsPatchPtrOutput
	ToUncountedTerminatedPodsPatchPtrOutputWithContext(context.Context) UncountedTerminatedPodsPatchPtrOutput
}

type uncountedTerminatedPodsPatchPtrType UncountedTerminatedPodsPatchArgs

func UncountedTerminatedPodsPatchPtr(v *UncountedTerminatedPodsPatchArgs) UncountedTerminatedPodsPatchPtrInput {
	return (*uncountedTerminatedPodsPatchPtrType)(v)
}

func (*uncountedTerminatedPodsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UncountedTerminatedPodsPatch)(nil)).Elem()
}

func (i *uncountedTerminatedPodsPatchPtrType) ToUncountedTerminatedPodsPatchPtrOutput() UncountedTerminatedPodsPatchPtrOutput {
	return i.ToUncountedTerminatedPodsPatchPtrOutputWithContext(context.Background())
}

func (i *uncountedTerminatedPodsPatchPtrType) ToUncountedTerminatedPodsPatchPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UncountedTerminatedPodsPatchPtrOutput)
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type UncountedTerminatedPodsPatchOutput struct{ *pulumi.OutputState }

func (UncountedTerminatedPodsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UncountedTerminatedPodsPatch)(nil)).Elem()
}

func (o UncountedTerminatedPodsPatchOutput) ToUncountedTerminatedPodsPatchOutput() UncountedTerminatedPodsPatchOutput {
	return o
}

func (o UncountedTerminatedPodsPatchOutput) ToUncountedTerminatedPodsPatchOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchOutput {
	return o
}

func (o UncountedTerminatedPodsPatchOutput) ToUncountedTerminatedPodsPatchPtrOutput() UncountedTerminatedPodsPatchPtrOutput {
	return o.ToUncountedTerminatedPodsPatchPtrOutputWithContext(context.Background())
}

func (o UncountedTerminatedPodsPatchOutput) ToUncountedTerminatedPodsPatchPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UncountedTerminatedPodsPatch) *UncountedTerminatedPodsPatch {
		return &v
	}).(UncountedTerminatedPodsPatchPtrOutput)
}

// failed holds UIDs of failed Pods.
func (o UncountedTerminatedPodsPatchOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UncountedTerminatedPodsPatch) []string { return v.Failed }).(pulumi.StringArrayOutput)
}

// succeeded holds UIDs of succeeded Pods.
func (o UncountedTerminatedPodsPatchOutput) Succeeded() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UncountedTerminatedPodsPatch) []string { return v.Succeeded }).(pulumi.StringArrayOutput)
}

type UncountedTerminatedPodsPatchPtrOutput struct{ *pulumi.OutputState }

func (UncountedTerminatedPodsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UncountedTerminatedPodsPatch)(nil)).Elem()
}

func (o UncountedTerminatedPodsPatchPtrOutput) ToUncountedTerminatedPodsPatchPtrOutput() UncountedTerminatedPodsPatchPtrOutput {
	return o
}

func (o UncountedTerminatedPodsPatchPtrOutput) ToUncountedTerminatedPodsPatchPtrOutputWithContext(ctx context.Context) UncountedTerminatedPodsPatchPtrOutput {
	return o
}

func (o UncountedTerminatedPodsPatchPtrOutput) Elem() UncountedTerminatedPodsPatchOutput {
	return o.ApplyT(func(v *UncountedTerminatedPodsPatch) UncountedTerminatedPodsPatch {
		if v != nil {
			return *v
		}
		var ret UncountedTerminatedPodsPatch
		return ret
	}).(UncountedTerminatedPodsPatchOutput)
}

// failed holds UIDs of failed Pods.
func (o UncountedTerminatedPodsPatchPtrOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UncountedTerminatedPodsPatch) []string {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.StringArrayOutput)
}

// succeeded holds UIDs of succeeded Pods.
func (o UncountedTerminatedPodsPatchPtrOutput) Succeeded() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UncountedTerminatedPodsPatch) []string {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobTypeInput)(nil)).Elem(), CronJobTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobTypeArrayInput)(nil)).Elem(), CronJobTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobListTypeInput)(nil)).Elem(), CronJobListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobPatchTypeInput)(nil)).Elem(), CronJobPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobSpecInput)(nil)).Elem(), CronJobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobSpecPtrInput)(nil)).Elem(), CronJobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobSpecPatchInput)(nil)).Elem(), CronJobSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobSpecPatchPtrInput)(nil)).Elem(), CronJobSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobStatusInput)(nil)).Elem(), CronJobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobStatusPtrInput)(nil)).Elem(), CronJobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobStatusPatchInput)(nil)).Elem(), CronJobStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobStatusPatchPtrInput)(nil)).Elem(), CronJobStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTypeInput)(nil)).Elem(), JobTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTypeArrayInput)(nil)).Elem(), JobTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionInput)(nil)).Elem(), JobConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionArrayInput)(nil)).Elem(), JobConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionPatchInput)(nil)).Elem(), JobConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionPatchArrayInput)(nil)).Elem(), JobConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobListTypeInput)(nil)).Elem(), JobListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobPatchTypeInput)(nil)).Elem(), JobPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecInput)(nil)).Elem(), JobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecPtrInput)(nil)).Elem(), JobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecPatchInput)(nil)).Elem(), JobSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecPatchPtrInput)(nil)).Elem(), JobSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusInput)(nil)).Elem(), JobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusPtrInput)(nil)).Elem(), JobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusPatchInput)(nil)).Elem(), JobStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusPatchPtrInput)(nil)).Elem(), JobStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateSpecInput)(nil)).Elem(), JobTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateSpecPtrInput)(nil)).Elem(), JobTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateSpecPatchInput)(nil)).Elem(), JobTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateSpecPatchPtrInput)(nil)).Elem(), JobTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyInput)(nil)).Elem(), PodFailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyPtrInput)(nil)).Elem(), PodFailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementInput)(nil)).Elem(), PodFailurePolicyOnExitCodesRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementPtrInput)(nil)).Elem(), PodFailurePolicyOnExitCodesRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementPatchInput)(nil)).Elem(), PodFailurePolicyOnExitCodesRequirementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnExitCodesRequirementPatchPtrInput)(nil)).Elem(), PodFailurePolicyOnExitCodesRequirementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternInput)(nil)).Elem(), PodFailurePolicyOnPodConditionsPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternArrayInput)(nil)).Elem(), PodFailurePolicyOnPodConditionsPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternPatchInput)(nil)).Elem(), PodFailurePolicyOnPodConditionsPatternPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyOnPodConditionsPatternPatchArrayInput)(nil)).Elem(), PodFailurePolicyOnPodConditionsPatternPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyPatchInput)(nil)).Elem(), PodFailurePolicyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyPatchPtrInput)(nil)).Elem(), PodFailurePolicyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyRuleInput)(nil)).Elem(), PodFailurePolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyRuleArrayInput)(nil)).Elem(), PodFailurePolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyRulePatchInput)(nil)).Elem(), PodFailurePolicyRulePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodFailurePolicyRulePatchArrayInput)(nil)).Elem(), PodFailurePolicyRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UncountedTerminatedPodsInput)(nil)).Elem(), UncountedTerminatedPodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UncountedTerminatedPodsPtrInput)(nil)).Elem(), UncountedTerminatedPodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UncountedTerminatedPodsPatchInput)(nil)).Elem(), UncountedTerminatedPodsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UncountedTerminatedPodsPatchPtrInput)(nil)).Elem(), UncountedTerminatedPodsPatchArgs{})
	pulumi.RegisterOutputType(CronJobTypeOutput{})
	pulumi.RegisterOutputType(CronJobTypeArrayOutput{})
	pulumi.RegisterOutputType(CronJobListTypeOutput{})
	pulumi.RegisterOutputType(CronJobPatchTypeOutput{})
	pulumi.RegisterOutputType(CronJobSpecOutput{})
	pulumi.RegisterOutputType(CronJobSpecPtrOutput{})
	pulumi.RegisterOutputType(CronJobSpecPatchOutput{})
	pulumi.RegisterOutputType(CronJobSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(CronJobStatusOutput{})
	pulumi.RegisterOutputType(CronJobStatusPtrOutput{})
	pulumi.RegisterOutputType(CronJobStatusPatchOutput{})
	pulumi.RegisterOutputType(CronJobStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(JobTypeOutput{})
	pulumi.RegisterOutputType(JobTypeArrayOutput{})
	pulumi.RegisterOutputType(JobConditionOutput{})
	pulumi.RegisterOutputType(JobConditionArrayOutput{})
	pulumi.RegisterOutputType(JobConditionPatchOutput{})
	pulumi.RegisterOutputType(JobConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(JobListTypeOutput{})
	pulumi.RegisterOutputType(JobPatchTypeOutput{})
	pulumi.RegisterOutputType(JobSpecOutput{})
	pulumi.RegisterOutputType(JobSpecPtrOutput{})
	pulumi.RegisterOutputType(JobSpecPatchOutput{})
	pulumi.RegisterOutputType(JobSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(JobStatusOutput{})
	pulumi.RegisterOutputType(JobStatusPtrOutput{})
	pulumi.RegisterOutputType(JobStatusPatchOutput{})
	pulumi.RegisterOutputType(JobStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(JobTemplateSpecOutput{})
	pulumi.RegisterOutputType(JobTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(JobTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(JobTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyPtrOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnExitCodesRequirementOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnExitCodesRequirementPtrOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnExitCodesRequirementPatchOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnExitCodesRequirementPatchPtrOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnPodConditionsPatternOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnPodConditionsPatternArrayOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnPodConditionsPatternPatchOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyOnPodConditionsPatternPatchArrayOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyPatchOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyPatchPtrOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyRuleOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyRulePatchOutput{})
	pulumi.RegisterOutputType(PodFailurePolicyRulePatchArrayOutput{})
	pulumi.RegisterOutputType(UncountedTerminatedPodsOutput{})
	pulumi.RegisterOutputType(UncountedTerminatedPodsPtrOutput{})
	pulumi.RegisterOutputType(UncountedTerminatedPodsPatchOutput{})
	pulumi.RegisterOutputType(UncountedTerminatedPodsPatchPtrOutput{})
}
