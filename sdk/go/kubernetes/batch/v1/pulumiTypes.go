// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
// 2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//    to 'True'.
// 3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type JobType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpec `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *JobStatus `pulumi:"status"`
}

// JobTypeInput is an input type that accepts JobTypeArgs and JobTypeOutput values.
// You can construct a concrete instance of `JobTypeInput` via:
//
//          JobTypeArgs{...}
type JobTypeInput interface {
	pulumi.Input

	ToJobTypeOutput() JobTypeOutput
	ToJobTypeOutputWithContext(context.Context) JobTypeOutput
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
// 2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//    to 'True'.
// 3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type JobTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPtrInput `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status JobStatusPtrInput `pulumi:"status"`
}

func (JobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (i JobTypeArgs) ToJobTypeOutput() JobTypeOutput {
	return i.ToJobTypeOutputWithContext(context.Background())
}

func (i JobTypeArgs) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTypeOutput)
}

// JobTypeArrayInput is an input type that accepts JobTypeArray and JobTypeArrayOutput values.
// You can construct a concrete instance of `JobTypeArrayInput` via:
//
//          JobTypeArray{ JobTypeArgs{...} }
type JobTypeArrayInput interface {
	pulumi.Input

	ToJobTypeArrayOutput() JobTypeArrayOutput
	ToJobTypeArrayOutputWithContext(context.Context) JobTypeArrayOutput
}

type JobTypeArray []JobTypeInput

func (JobTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobType)(nil)).Elem()
}

func (i JobTypeArray) ToJobTypeArrayOutput() JobTypeArrayOutput {
	return i.ToJobTypeArrayOutputWithContext(context.Background())
}

func (i JobTypeArray) ToJobTypeArrayOutputWithContext(ctx context.Context) JobTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTypeArrayOutput)
}

// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
// 2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//    to 'True'.
// 3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type JobTypeOutput struct{ *pulumi.OutputState }

func (JobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (o JobTypeOutput) ToJobTypeOutput() JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v JobType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTypeOutput) Spec() JobSpecPtrOutput {
	return o.ApplyT(func(v JobType) *JobSpec { return v.Spec }).(JobSpecPtrOutput)
}

// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobTypeOutput) Status() JobStatusPtrOutput {
	return o.ApplyT(func(v JobType) *JobStatus { return v.Status }).(JobStatusPtrOutput)
}

type JobTypeArrayOutput struct{ *pulumi.OutputState }

func (JobTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobType)(nil)).Elem()
}

func (o JobTypeArrayOutput) ToJobTypeArrayOutput() JobTypeArrayOutput {
	return o
}

func (o JobTypeArrayOutput) ToJobTypeArrayOutputWithContext(ctx context.Context) JobTypeArrayOutput {
	return o
}

func (o JobTypeArrayOutput) Index(i pulumi.IntInput) JobTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobType {
		return vs[0].([]JobType)[vs[1].(int)]
	}).(JobTypeOutput)
}

// JobCondition describes current state of a job.
type JobCondition struct {
	// Last time the condition was checked.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type string `pulumi:"type"`
}

// JobConditionInput is an input type that accepts JobConditionArgs and JobConditionOutput values.
// You can construct a concrete instance of `JobConditionInput` via:
//
//          JobConditionArgs{...}
type JobConditionInput interface {
	pulumi.Input

	ToJobConditionOutput() JobConditionOutput
	ToJobConditionOutputWithContext(context.Context) JobConditionOutput
}

// JobCondition describes current state of a job.
type JobConditionArgs struct {
	// Last time the condition was checked.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of job condition, Complete or Failed.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (i JobConditionArgs) ToJobConditionOutput() JobConditionOutput {
	return i.ToJobConditionOutputWithContext(context.Background())
}

func (i JobConditionArgs) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionOutput)
}

// JobConditionArrayInput is an input type that accepts JobConditionArray and JobConditionArrayOutput values.
// You can construct a concrete instance of `JobConditionArrayInput` via:
//
//          JobConditionArray{ JobConditionArgs{...} }
type JobConditionArrayInput interface {
	pulumi.Input

	ToJobConditionArrayOutput() JobConditionArrayOutput
	ToJobConditionArrayOutputWithContext(context.Context) JobConditionArrayOutput
}

type JobConditionArray []JobConditionInput

func (JobConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (i JobConditionArray) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return i.ToJobConditionArrayOutputWithContext(context.Background())
}

func (i JobConditionArray) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionArrayOutput)
}

// JobCondition describes current state of a job.
type JobConditionOutput struct{ *pulumi.OutputState }

func (JobConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (o JobConditionOutput) ToJobConditionOutput() JobConditionOutput {
	return o
}

func (o JobConditionOutput) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return o
}

// Last time the condition was checked.
func (o JobConditionOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transit from one status to another.
func (o JobConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o JobConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o JobConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o JobConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of job condition, Complete or Failed.
func (o JobConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Type }).(pulumi.StringOutput)
}

type JobConditionArrayOutput struct{ *pulumi.OutputState }

func (JobConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) Index(i pulumi.IntInput) JobConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobCondition {
		return vs[0].([]JobCondition)[vs[1].(int)]
	}).(JobConditionOutput)
}

// JobList is a collection of jobs.
type JobListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of Jobs.
	Items []JobType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// JobListTypeInput is an input type that accepts JobListTypeArgs and JobListTypeOutput values.
// You can construct a concrete instance of `JobListTypeInput` via:
//
//          JobListTypeArgs{...}
type JobListTypeInput interface {
	pulumi.Input

	ToJobListTypeOutput() JobListTypeOutput
	ToJobListTypeOutputWithContext(context.Context) JobListTypeOutput
}

// JobList is a collection of jobs.
type JobListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of Jobs.
	Items JobTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (JobListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobListType)(nil)).Elem()
}

func (i JobListTypeArgs) ToJobListTypeOutput() JobListTypeOutput {
	return i.ToJobListTypeOutputWithContext(context.Background())
}

func (i JobListTypeArgs) ToJobListTypeOutputWithContext(ctx context.Context) JobListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobListTypeOutput)
}

// JobList is a collection of jobs.
type JobListTypeOutput struct{ *pulumi.OutputState }

func (JobListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobListType)(nil)).Elem()
}

func (o JobListTypeOutput) ToJobListTypeOutput() JobListTypeOutput {
	return o
}

func (o JobListTypeOutput) ToJobListTypeOutputWithContext(ctx context.Context) JobListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of Jobs.
func (o JobListTypeOutput) Items() JobTypeArrayOutput {
	return o.ApplyT(func(v JobListType) []JobType { return v.Items }).(JobTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v JobListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpec struct {
	// Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
	ActiveDeadlineSeconds *int `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit *int `pulumi:"backoffLimit"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions *int `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector *bool `pulumi:"manualSelector"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism *int `pulumi:"parallelism"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template corev1.PodTemplateSpec `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
	TtlSecondsAfterFinished *int `pulumi:"ttlSecondsAfterFinished"`
}

// JobSpecInput is an input type that accepts JobSpecArgs and JobSpecOutput values.
// You can construct a concrete instance of `JobSpecInput` via:
//
//          JobSpecArgs{...}
type JobSpecInput interface {
	pulumi.Input

	ToJobSpecOutput() JobSpecOutput
	ToJobSpecOutputWithContext(context.Context) JobSpecOutput
}

// JobSpec describes how the job execution will look like.
type JobSpecArgs struct {
	// Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
	ActiveDeadlineSeconds pulumi.IntPtrInput `pulumi:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit pulumi.IntPtrInput `pulumi:"backoffLimit"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions pulumi.IntPtrInput `pulumi:"completions"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector pulumi.BoolPtrInput `pulumi:"manualSelector"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template corev1.PodTemplateSpecInput `pulumi:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
	TtlSecondsAfterFinished pulumi.IntPtrInput `pulumi:"ttlSecondsAfterFinished"`
}

func (JobSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (i JobSpecArgs) ToJobSpecOutput() JobSpecOutput {
	return i.ToJobSpecOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput)
}

func (i JobSpecArgs) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput).ToJobSpecPtrOutputWithContext(ctx)
}

// JobSpecPtrInput is an input type that accepts JobSpecArgs, JobSpecPtr and JobSpecPtrOutput values.
// You can construct a concrete instance of `JobSpecPtrInput` via:
//
//          JobSpecArgs{...}
//
//  or:
//
//          nil
type JobSpecPtrInput interface {
	pulumi.Input

	ToJobSpecPtrOutput() JobSpecPtrOutput
	ToJobSpecPtrOutputWithContext(context.Context) JobSpecPtrOutput
}

type jobSpecPtrType JobSpecArgs

func JobSpecPtr(v *JobSpecArgs) JobSpecPtrInput {
	return (*jobSpecPtrType)(v)
}

func (*jobSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (i *jobSpecPtrType) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i *jobSpecPtrType) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecOutput struct{ *pulumi.OutputState }

func (JobSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (o JobSpecOutput) ToJobSpecOutput() JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o.ToJobSpecPtrOutputWithContext(context.Background())
}

func (o JobSpecOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o.ApplyT(func(v JobSpec) *JobSpec {
		return &v
	}).(JobSpecPtrOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
func (o JobSpecOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.ActiveDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.BackoffLimit }).(pulumi.IntPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Completions }).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobSpec) *bool { return v.ManualSelector }).(pulumi.BoolPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v JobSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecOutput) Template() corev1.PodTemplateSpecOutput {
	return o.ApplyT(func(v JobSpec) corev1.PodTemplateSpec { return v.Template }).(corev1.PodTemplateSpecOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
func (o JobSpecOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.TtlSecondsAfterFinished }).(pulumi.IntPtrOutput)
}

type JobSpecPtrOutput struct{ *pulumi.OutputState }

func (JobSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) Elem() JobSpecOutput {
	return o.ApplyT(func(v *JobSpec) JobSpec { return *v }).(JobSpecOutput)
}

// Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
func (o JobSpecPtrOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of retries before marking this job failed. Defaults to 6
func (o JobSpecPtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Completions
	}).(pulumi.IntPtrOutput)
}

// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
func (o JobSpecPtrOutput) ManualSelector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ManualSelector
	}).(pulumi.BoolPtrOutput)
}

// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o JobSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *JobSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobSpecPtrOutput) Template() corev1.PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v *JobSpec) *corev1.PodTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(corev1.PodTemplateSpecPtrOutput)
}

// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
func (o JobSpecPtrOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.TtlSecondsAfterFinished
	}).(pulumi.IntPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatus struct {
	// The number of actively running pods.
	Active *int `pulumi:"active"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime *string `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a job fails, one of the conditions will have type == "Failed". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions []JobCondition `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed *int `pulumi:"failed"`
	// Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded *int `pulumi:"succeeded"`
}

// JobStatusInput is an input type that accepts JobStatusArgs and JobStatusOutput values.
// You can construct a concrete instance of `JobStatusInput` via:
//
//          JobStatusArgs{...}
type JobStatusInput interface {
	pulumi.Input

	ToJobStatusOutput() JobStatusOutput
	ToJobStatusOutputWithContext(context.Context) JobStatusOutput
}

// JobStatus represents the current state of a Job.
type JobStatusArgs struct {
	// The number of actively running pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The latest available observations of an object's current state. When a job fails, one of the conditions will have type == "Failed". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions JobConditionArrayInput `pulumi:"conditions"`
	// The number of pods which reached phase Failed.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (JobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (i JobStatusArgs) ToJobStatusOutput() JobStatusOutput {
	return i.ToJobStatusOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput)
}

func (i JobStatusArgs) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput).ToJobStatusPtrOutputWithContext(ctx)
}

// JobStatusPtrInput is an input type that accepts JobStatusArgs, JobStatusPtr and JobStatusPtrOutput values.
// You can construct a concrete instance of `JobStatusPtrInput` via:
//
//          JobStatusArgs{...}
//
//  or:
//
//          nil
type JobStatusPtrInput interface {
	pulumi.Input

	ToJobStatusPtrOutput() JobStatusPtrOutput
	ToJobStatusPtrOutputWithContext(context.Context) JobStatusPtrOutput
}

type jobStatusPtrType JobStatusArgs

func JobStatusPtr(v *JobStatusArgs) JobStatusPtrInput {
	return (*jobStatusPtrType)(v)
}

func (*jobStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (i *jobStatusPtrType) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i *jobStatusPtrType) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusOutput struct{ *pulumi.OutputState }

func (JobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (o JobStatusOutput) ToJobStatusOutput() JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o.ToJobStatusPtrOutputWithContext(context.Background())
}

func (o JobStatusOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o.ApplyT(func(v JobStatus) *JobStatus {
		return &v
	}).(JobStatusPtrOutput)
}

// The number of actively running pods.
func (o JobStatusOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a job fails, one of the conditions will have type == "Failed". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v JobStatus) []JobCondition { return v.Conditions }).(JobConditionArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
func (o JobStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type JobStatusPtrOutput struct{ *pulumi.OutputState }

func (JobStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) Elem() JobStatusOutput {
	return o.ApplyT(func(v *JobStatus) JobStatus { return *v }).(JobStatusOutput)
}

// The number of actively running pods.
func (o JobStatusPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
func (o JobStatusPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The latest available observations of an object's current state. When a job fails, one of the conditions will have type == "Failed". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o JobStatusPtrOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v *JobStatus) []JobCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(JobConditionArrayOutput)
}

// The number of pods which reached phase Failed.
func (o JobStatusPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
func (o JobStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of pods which reached phase Succeeded.
func (o JobStatusPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(JobTypeOutput{})
	pulumi.RegisterOutputType(JobTypeArrayOutput{})
	pulumi.RegisterOutputType(JobConditionOutput{})
	pulumi.RegisterOutputType(JobConditionArrayOutput{})
	pulumi.RegisterOutputType(JobListTypeOutput{})
	pulumi.RegisterOutputType(JobSpecOutput{})
	pulumi.RegisterOutputType(JobSpecPtrOutput{})
	pulumi.RegisterOutputType(JobStatusOutput{})
	pulumi.RegisterOutputType(JobStatusPtrOutput{})
}
