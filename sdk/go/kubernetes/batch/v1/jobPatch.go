// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Job represents the configuration of a single job.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
//  2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
//     to 'True'.
//  3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
//     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
//
// If the Job has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// By default, if a resource failed to become ready in a previous update,
// Pulumi will continue to wait for readiness on the next update. If you would prefer
// to schedule a replacement for an unready resource on the next update, you can add the
// "pulumi.com/replaceUnready": "true" annotation to the resource definition.
type JobPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPatchPtrOutput `pulumi:"spec"`
	// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status JobStatusPatchPtrOutput `pulumi:"status"`
}

// NewJobPatch registers a new resource with the given unique name, arguments, and options.
func NewJobPatch(ctx *pulumi.Context,
	name string, args *JobPatchArgs, opts ...pulumi.ResourceOption) (*JobPatch, error) {
	if args == nil {
		args = &JobPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("batch/v1")
	args.Kind = pulumi.StringPtr("Job")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource JobPatch
	err := ctx.RegisterResource("kubernetes:batch/v1:JobPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobPatch gets an existing JobPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobPatchState, opts ...pulumi.ResourceOption) (*JobPatch, error) {
	var resource JobPatch
	err := ctx.ReadResource("kubernetes:batch/v1:JobPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobPatch resources.
type jobPatchState struct {
}

type JobPatchState struct {
}

func (JobPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobPatchState)(nil)).Elem()
}

type jobPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *JobSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a JobPatch resource.
type JobPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec JobSpecPatchPtrInput
}

func (JobPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobPatchArgs)(nil)).Elem()
}

type JobPatchInput interface {
	pulumi.Input

	ToJobPatchOutput() JobPatchOutput
	ToJobPatchOutputWithContext(ctx context.Context) JobPatchOutput
}

func (*JobPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPatch)(nil)).Elem()
}

func (i *JobPatch) ToJobPatchOutput() JobPatchOutput {
	return i.ToJobPatchOutputWithContext(context.Background())
}

func (i *JobPatch) ToJobPatchOutputWithContext(ctx context.Context) JobPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPatchOutput)
}

// JobPatchArrayInput is an input type that accepts JobPatchArray and JobPatchArrayOutput values.
// You can construct a concrete instance of `JobPatchArrayInput` via:
//
//	JobPatchArray{ JobPatchArgs{...} }
type JobPatchArrayInput interface {
	pulumi.Input

	ToJobPatchArrayOutput() JobPatchArrayOutput
	ToJobPatchArrayOutputWithContext(context.Context) JobPatchArrayOutput
}

type JobPatchArray []JobPatchInput

func (JobPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobPatch)(nil)).Elem()
}

func (i JobPatchArray) ToJobPatchArrayOutput() JobPatchArrayOutput {
	return i.ToJobPatchArrayOutputWithContext(context.Background())
}

func (i JobPatchArray) ToJobPatchArrayOutputWithContext(ctx context.Context) JobPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPatchArrayOutput)
}

// JobPatchMapInput is an input type that accepts JobPatchMap and JobPatchMapOutput values.
// You can construct a concrete instance of `JobPatchMapInput` via:
//
//	JobPatchMap{ "key": JobPatchArgs{...} }
type JobPatchMapInput interface {
	pulumi.Input

	ToJobPatchMapOutput() JobPatchMapOutput
	ToJobPatchMapOutputWithContext(context.Context) JobPatchMapOutput
}

type JobPatchMap map[string]JobPatchInput

func (JobPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobPatch)(nil)).Elem()
}

func (i JobPatchMap) ToJobPatchMapOutput() JobPatchMapOutput {
	return i.ToJobPatchMapOutputWithContext(context.Background())
}

func (i JobPatchMap) ToJobPatchMapOutputWithContext(ctx context.Context) JobPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPatchMapOutput)
}

type JobPatchOutput struct{ *pulumi.OutputState }

func (JobPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPatch)(nil)).Elem()
}

func (o JobPatchOutput) ToJobPatchOutput() JobPatchOutput {
	return o
}

func (o JobPatchOutput) ToJobPatchOutputWithContext(ctx context.Context) JobPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o JobPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o JobPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o JobPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *JobPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobPatchOutput) Spec() JobSpecPatchPtrOutput {
	return o.ApplyT(func(v *JobPatch) JobSpecPatchPtrOutput { return v.Spec }).(JobSpecPatchPtrOutput)
}

// Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o JobPatchOutput) Status() JobStatusPatchPtrOutput {
	return o.ApplyT(func(v *JobPatch) JobStatusPatchPtrOutput { return v.Status }).(JobStatusPatchPtrOutput)
}

type JobPatchArrayOutput struct{ *pulumi.OutputState }

func (JobPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobPatch)(nil)).Elem()
}

func (o JobPatchArrayOutput) ToJobPatchArrayOutput() JobPatchArrayOutput {
	return o
}

func (o JobPatchArrayOutput) ToJobPatchArrayOutputWithContext(ctx context.Context) JobPatchArrayOutput {
	return o
}

func (o JobPatchArrayOutput) Index(i pulumi.IntInput) JobPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobPatch {
		return vs[0].([]*JobPatch)[vs[1].(int)]
	}).(JobPatchOutput)
}

type JobPatchMapOutput struct{ *pulumi.OutputState }

func (JobPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobPatch)(nil)).Elem()
}

func (o JobPatchMapOutput) ToJobPatchMapOutput() JobPatchMapOutput {
	return o
}

func (o JobPatchMapOutput) ToJobPatchMapOutputWithContext(ctx context.Context) JobPatchMapOutput {
	return o
}

func (o JobPatchMapOutput) MapIndex(k pulumi.StringInput) JobPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobPatch {
		return vs[0].(map[string]*JobPatch)[vs[1].(string)]
	}).(JobPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobPatchInput)(nil)).Elem(), &JobPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobPatchArrayInput)(nil)).Elem(), JobPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobPatchMapInput)(nil)).Elem(), JobPatchMap{})
	pulumi.RegisterOutputType(JobPatchOutput{})
	pulumi.RegisterOutputType(JobPatchArrayOutput{})
	pulumi.RegisterOutputType(JobPatchMapOutput{})
}
