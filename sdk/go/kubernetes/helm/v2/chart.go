// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package helm

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/yaml"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Chart is a component representing a collection of resources described by an arbitrary Helm
// Chart. The Chart can be fetched from any source that is accessible to the `helm` command
// line. Values in the `values.yml` file can be overridden using `ChartOpts.values` (equivalent
// to `--set` or having multiple `values.yml` files). Objects can be transformed arbitrarily by
// supplying callbacks to `ChartOpts.transformations`.
//
// `Chart` does not use Tiller. The Chart specified is copied and expanded locally; the semantics
// are equivalent to running `helm template` and then using Pulumi to manage the resulting YAML
// manifests. Any values that would be retrieved in-cluster are assigned fake values, and
// none of Tiller's server-side validity testing is executed.
type Chart struct {
	pulumi.ResourceState

	Resources map[string]pulumi.Resource
}

// FetchArgs specifies arguments for fetching the Helm chart.
type FetchArgs struct {
	// Specific version of a chart. If unset, the latest version is fetched.
	Version pulumi.StringInput
	// Verify certificates of HTTPS-enabled servers using this CA bundle.
	CAFile pulumi.StringInput
	// Identify HTTPS client using this SSL certificate file.
	CertFile pulumi.StringInput
	// Identify HTTPS client using this SSL key file.
	KeyFile pulumi.StringInput
	// Location to write the chart. If Destination and UntarDir are specified, UntarDir is
	// appended to Destination (default ".").
	Destination pulumi.StringInput
	// Keyring containing public keys (default "~/.gnupg/pubring.gpg").
	Keyring pulumi.StringInput
	// Chart repository password.
	Password pulumi.StringInput
	// Chart repository URL for the requested chart.
	Repo pulumi.StringInput
	// Location to expand the chart. (default ".").
	UntarDir pulumi.StringInput
	// Chart repository username.
	Username pulumi.StringInput
	// Location of your Helm config. Overrides $HELM_HOME (default "~/.helm").
	Home pulumi.StringInput
	// Use development versions, too. Equivalent to version '>0.0.0-0'. If Version is set,
	// Devel is ignored.
	Devel pulumi.BoolInput
	// Fetch the provenance file, but don't perform verification.
	Prov pulumi.BoolInput
	// If false, leave the chart as a tarball after downloading.
	Untar pulumi.BoolInput
	// Verify the package against its signature.
	Verify pulumi.BoolInput
}

// ChartArgs specifies arguments for constructing a Chart resource.
type ChartArgs struct {
	// The optional Kubernetes API versions used for Capabilities.APIVersions.
	ApiVersions pulumi.StringArrayInput
	// The optional namespace to install chart resources into.
	Namespace pulumi.StringInput
	// Overrides for chart values.
	Values pulumi.MapInput
	// Transformations is an optional list of transformations to apply to Kubernetes resource definitions
	// before registering with the engine.
	Transformations []yaml.Transformation
	// ResourcePrefix is an optional prefix for the auto-generated resource names. For example, a resource named `bar`
	// created with resource prefix of `"foo"` would produce a resource named `"foo-bar"`.
	ResourcePrefix string

	// (Remote chart) The repository name of the chart to deploy. Example: "stable".
	Repo pulumi.StringInput
	// (Remote chart) The name of the chart to deploy.  If Repo is specified, this chart name will be prefixed
	// by the repo name.
	// Example: Repo: "stable", Chart: "nginx-ingress" -> "stable/nginx-ingress"
	// Example: Chart: "stable/nginx-ingress" -> "stable/nginx-ingress"
	Chart pulumi.StringInput
	// (Remote chart) The version of the chart to deploy. If not provided, the latest version will be deployed.
	Version pulumi.StringInput
	// (Remote chart) Additional options to customize the fetching of the Helm chart.
	FetchArgs FetchArgs

	// (Local chart) The path to the chart directory which contains the `Chart.yaml` file.
	// If Path is set, any remote chart args (Repo, Chart, Version, FetchArgs) will be ignored.
	Path pulumi.StringInput
}

// NewChart registers a new resource with the given unique name, arguments, and options.
func NewChart(ctx *pulumi.Context,
	name string, args *ChartArgs, opts ...pulumi.ResourceOption) (*Chart, error) {

	// Register the resulting resource state.
	chart := &Chart{
		Resources: map[string]pulumi.Resource{},
	}
	err := ctx.RegisterComponentResource("kubernetes:helm.sh/v2:Chart", name, chart, opts...)
	if err != nil {
		return nil, err
	}

	// Now provision all child resources by parsing the YAML file.
	if args != nil {
		// Make the component the parent of all subsequent resources.
		opts = append(opts, pulumi.Parent(chart))

		// Honor the resource name prefix if specified.
		if args.ResourcePrefix != "" {
			name = args.ResourcePrefix + "-" + name
		}

		// TODO: Get config

		// TODO: make yaml.parse method accessible outside yaml package
		//yaml.Parse

		// Finally, register all of the resources found.
		err = ctx.RegisterResourceOutputs(chart, pulumi.Map{})
		if err != nil {
			return nil, errors.Wrap(err, "registering child resources")
		}
	}

	return chart, nil
}

func parseChart(name string, args ChartArgs, opts ...pulumi.ResourceOption) (map[string]pulumi.Resource, error) {
	// Create temporary directory and file to hold chart data and override values.
	chartDir, err := ioutil.TempDir("", "")
	if err != nil {
		return nil, errors.Wrap(err, "creating temp directory for chart")
	}
	defer os.RemoveAll(chartDir)

	overrides, err := ioutil.TempFile("", "")
	if err != nil {
		return nil, errors.Wrap(err, "creating temp file for chart values")
	}
	defer os.Remove(overrides.Name())

	var chart pulumi.StringInput
	if args.Path != nil { // Local Chart
		chart = args.Path
	} else { // Remote Chart
		// TODO: Fetch the chart
	}

	resources := map[string]pulumi.Resource{}
	return resources, nil
}

// GetResource returns a resource defined by a built-in Kubernetes group/version/kind, name and namespace.
// For example, GetResource("v1/Pod", "foo", "") would return a Pod called "foo" from the "default" namespace.
func (c *Chart) GetResource(gvk, name, namespace string) pulumi.Resource {
	id := name
	if len(namespace) > 0 && namespace != "default" {
		id = fmt.Sprintf("%s/%s", namespace, name)
	}
	key := fmt.Sprintf("%s::%s", gvk, id)
	return c.Resources[key]
}
