// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package helm

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Chart is a component representing a collection of resources described by an arbitrary Helm
// Chart. The Chart can be fetched from any source that is accessible to the `helm` command
// line. Values in the `values.yml` file can be overridden using `ChartOpts.values` (equivalent
// to `--set` or having multiple `values.yml` files). Objects can be transformed arbitrarily by
// supplying callbacks to `ChartOpts.transformations`.
//
// `Chart` does not use Tiller. The Chart specified is copied and expanded locally; the semantics
// are equivalent to running `helm template` and then using Pulumi to manage the resulting YAML
// manifests. Any values that would be retrieved in-cluster are assigned fake values, and
// none of Tiller's server-side validity testing is executed.
type Chart struct {
	pulumi.ResourceState

	Resources map[string]pulumi.Resource
}

// NewChart registers a new resource with the given unique name, arguments, and options.
func NewChart(ctx *pulumi.Context,
	name string, args *ChartArgs, opts ...pulumi.ResourceOption) (*Chart, error) {

	// Register the resulting resource state.
	chart := &Chart{
		Resources: map[string]pulumi.Resource{},
	}
	err := ctx.RegisterComponentResource("kubernetes:helm.sh/v2:Chart", name, chart, opts...)
	if err != nil {
		return nil, err
	}

	// Now provision all child resources by parsing the YAML file.
	if args != nil {
		// Make the component the parent of all subsequent resources.
		opts = append(opts, pulumi.Parent(chart))

		// Honor the resource name prefix if specified.
		if args.ResourcePrefix != "" {
			name = args.ResourcePrefix + "-" + name
		}

		// TODO: Get config

		// TODO: make yaml.parse method accessible outside yaml package
		//yaml.Parse

		// Finally, register all of the resources found.
		err = ctx.RegisterResourceOutputs(chart, pulumi.Map{})
		if err != nil {
			return nil, errors.Wrap(err, "registering child resources")
		}
	}

	return chart, nil
}

func parseChart(name string, args ChartArgs, opts ...pulumi.ResourceOption) (map[string]pulumi.Resource, error) {
	// Create temporary directory and file to hold chart data and override values.
	chartDir, err := ioutil.TempDir("", "")
	if err != nil {
		return nil, errors.Wrap(err, "creating temp directory for chart")
	}
	defer os.RemoveAll(chartDir)

	overrides, err := ioutil.TempFile("", "")
	if err != nil {
		return nil, errors.Wrap(err, "creating temp file for chart values")
	}
	defer os.Remove(overrides.Name())

	var chart pulumi.StringInput
	if args.Path != nil { // Local Chart
		chart = args.Path
	} else { // Remote Chart
		// TODO: Fetch the chart
	}

	resources := map[string]pulumi.Resource{}
	return resources, nil
}

// GetResource returns a resource defined by a built-in Kubernetes group/version/kind, name and namespace.
// For example, GetResource("v1/Pod", "foo", "") would return a Pod called "foo" from the "default" namespace.
func (c *Chart) GetResource(gvk, name, namespace string) pulumi.Resource {
	id := name
	if len(namespace) > 0 && namespace != "default" {
		id = fmt.Sprintf("%s/%s", namespace, name)
	}
	key := fmt.Sprintf("%s::%s", gvk, id)
	return c.Resources[key]
}
