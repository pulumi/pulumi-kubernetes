// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v4

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Specification defining the post-renderer to use.
type PostRenderer struct {
	// Arguments to pass to the post-renderer command.
	Args []string `pulumi:"args"`
	// Path to an executable to be used for post rendering.
	Command string `pulumi:"command"`
}

// PostRendererInput is an input type that accepts PostRendererArgs and PostRendererOutput values.
// You can construct a concrete instance of `PostRendererInput` via:
//
//	PostRendererArgs{...}
type PostRendererInput interface {
	pulumi.Input

	ToPostRendererOutput() PostRendererOutput
	ToPostRendererOutputWithContext(context.Context) PostRendererOutput
}

// Specification defining the post-renderer to use.
type PostRendererArgs struct {
	// Arguments to pass to the post-renderer command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Path to an executable to be used for post rendering.
	Command pulumi.StringInput `pulumi:"command"`
}

func (PostRendererArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostRenderer)(nil)).Elem()
}

func (i PostRendererArgs) ToPostRendererOutput() PostRendererOutput {
	return i.ToPostRendererOutputWithContext(context.Background())
}

func (i PostRendererArgs) ToPostRendererOutputWithContext(ctx context.Context) PostRendererOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostRendererOutput)
}

func (i PostRendererArgs) ToPostRendererPtrOutput() PostRendererPtrOutput {
	return i.ToPostRendererPtrOutputWithContext(context.Background())
}

func (i PostRendererArgs) ToPostRendererPtrOutputWithContext(ctx context.Context) PostRendererPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostRendererOutput).ToPostRendererPtrOutputWithContext(ctx)
}

// PostRendererPtrInput is an input type that accepts PostRendererArgs, PostRendererPtr and PostRendererPtrOutput values.
// You can construct a concrete instance of `PostRendererPtrInput` via:
//
//	        PostRendererArgs{...}
//
//	or:
//
//	        nil
type PostRendererPtrInput interface {
	pulumi.Input

	ToPostRendererPtrOutput() PostRendererPtrOutput
	ToPostRendererPtrOutputWithContext(context.Context) PostRendererPtrOutput
}

type postRendererPtrType PostRendererArgs

func PostRendererPtr(v *PostRendererArgs) PostRendererPtrInput {
	return (*postRendererPtrType)(v)
}

func (*postRendererPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostRenderer)(nil)).Elem()
}

func (i *postRendererPtrType) ToPostRendererPtrOutput() PostRendererPtrOutput {
	return i.ToPostRendererPtrOutputWithContext(context.Background())
}

func (i *postRendererPtrType) ToPostRendererPtrOutputWithContext(ctx context.Context) PostRendererPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostRendererPtrOutput)
}

// Specification defining the post-renderer to use.
type PostRendererOutput struct{ *pulumi.OutputState }

func (PostRendererOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostRenderer)(nil)).Elem()
}

func (o PostRendererOutput) ToPostRendererOutput() PostRendererOutput {
	return o
}

func (o PostRendererOutput) ToPostRendererOutputWithContext(ctx context.Context) PostRendererOutput {
	return o
}

func (o PostRendererOutput) ToPostRendererPtrOutput() PostRendererPtrOutput {
	return o.ToPostRendererPtrOutputWithContext(context.Background())
}

func (o PostRendererOutput) ToPostRendererPtrOutputWithContext(ctx context.Context) PostRendererPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostRenderer) *PostRenderer {
		return &v
	}).(PostRendererPtrOutput)
}

// Arguments to pass to the post-renderer command.
func (o PostRendererOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostRenderer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Path to an executable to be used for post rendering.
func (o PostRendererOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v PostRenderer) string { return v.Command }).(pulumi.StringOutput)
}

type PostRendererPtrOutput struct{ *pulumi.OutputState }

func (PostRendererPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostRenderer)(nil)).Elem()
}

func (o PostRendererPtrOutput) ToPostRendererPtrOutput() PostRendererPtrOutput {
	return o
}

func (o PostRendererPtrOutput) ToPostRendererPtrOutputWithContext(ctx context.Context) PostRendererPtrOutput {
	return o
}

func (o PostRendererPtrOutput) Elem() PostRendererOutput {
	return o.ApplyT(func(v *PostRenderer) PostRenderer {
		if v != nil {
			return *v
		}
		var ret PostRenderer
		return ret
	}).(PostRendererOutput)
}

// Arguments to pass to the post-renderer command.
func (o PostRendererPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostRenderer) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Path to an executable to be used for post rendering.
func (o PostRendererPtrOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostRenderer) *string {
		if v == nil {
			return nil
		}
		return &v.Command
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostRendererInput)(nil)).Elem(), PostRendererArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostRendererPtrInput)(nil)).Elem(), PostRendererArgs{})
	pulumi.RegisterOutputType(PostRendererOutput{})
	pulumi.RegisterOutputType(PostRendererPtrOutput{})
}
