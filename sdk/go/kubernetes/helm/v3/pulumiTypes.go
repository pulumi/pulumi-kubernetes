// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package helm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseType struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks *bool `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint *bool `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest map[string]interface{} `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory *int `pulumi:"maxHistory"`
	// Release name.
	Name *string `pulumi:"name"`
	// Namespace to install the release into.
	Namespace *string `pulumi:"namespace"`
	// Postrender command to run.
	Postrender *string `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods *bool `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace *bool `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts RepositoryOpts `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues *bool `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames map[string][]string `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues *bool `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait *bool `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds *bool `pulumi:"skipCrds"`
	// Status of the deployed release.
	Status ReleaseStatus `pulumi:"status"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout *int `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles []pulumi.AssetOrArchive `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values map[string]interface{} `pulumi:"values"`
	// Verify the package before installing it.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

// ReleaseTypeInput is an input type that accepts ReleaseTypeArgs and ReleaseTypeOutput values.
// You can construct a concrete instance of `ReleaseTypeInput` via:
//
//          ReleaseTypeArgs{...}
type ReleaseTypeInput interface {
	pulumi.Input

	ToReleaseTypeOutput() ReleaseTypeOutput
	ToReleaseTypeOutputWithContext(context.Context) ReleaseTypeOutput
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseTypeArgs struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic pulumi.BoolPtrInput `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringInput `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate pulumi.BoolPtrInput `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel pulumi.BoolPtrInput `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks pulumi.BoolPtrInput `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation pulumi.BoolPtrInput `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks pulumi.BoolPtrInput `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint pulumi.BoolPtrInput `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest pulumi.MapInput `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// Release name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to install the release into.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Postrender command to run.
	Postrender pulumi.StringPtrInput `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods pulumi.BoolPtrInput `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes pulumi.BoolPtrInput `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts RepositoryOptsInput `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues pulumi.BoolPtrInput `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames pulumi.StringArrayMapInput `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues pulumi.BoolPtrInput `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait pulumi.BoolPtrInput `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds pulumi.BoolPtrInput `pulumi:"skipCrds"`
	// Status of the deployed release.
	Status ReleaseStatusInput `pulumi:"status"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles pulumi.AssetOrArchiveArrayInput `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values pulumi.MapInput `pulumi:"values"`
	// Verify the package before installing it.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs pulumi.BoolPtrInput `pulumi:"waitForJobs"`
}

func (ReleaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseType)(nil)).Elem()
}

func (i ReleaseTypeArgs) ToReleaseTypeOutput() ReleaseTypeOutput {
	return i.ToReleaseTypeOutputWithContext(context.Background())
}

func (i ReleaseTypeArgs) ToReleaseTypeOutputWithContext(ctx context.Context) ReleaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseTypeOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseTypeOutput struct{ *pulumi.OutputState }

func (ReleaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseType)(nil)).Elem()
}

func (o ReleaseTypeOutput) ToReleaseTypeOutput() ReleaseTypeOutput {
	return o
}

func (o ReleaseTypeOutput) ToReleaseTypeOutputWithContext(ctx context.Context) ReleaseTypeOutput {
	return o
}

// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
func (o ReleaseTypeOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.Atomic }).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseTypeOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseType) string { return v.Chart }).(pulumi.StringOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails.
func (o ReleaseTypeOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist.
func (o ReleaseTypeOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart.
func (o ReleaseTypeOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.DependencyUpdate }).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
func (o ReleaseTypeOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.Devel }).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleaseTypeOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.DisableCRDHooks }).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleaseTypeOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.DisableOpenapiValidation }).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleaseTypeOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.DisableWebhooks }).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleaseTypeOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleaseTypeOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// Run helm lint when planning.
func (o ReleaseTypeOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.Lint }).(pulumi.BoolPtrOutput)
}

// The rendered manifests as JSON. Not yet supported.
func (o ReleaseTypeOutput) Manifest() pulumi.MapOutput {
	return o.ApplyT(func(v ReleaseType) map[string]interface{} { return v.Manifest }).(pulumi.MapOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit.
func (o ReleaseTypeOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseType) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleaseTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleaseTypeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleaseTypeOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Postrender }).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback.
func (o ReleaseTypeOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.RecreatePods }).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent.
func (o ReleaseTypeOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.RenderSubchartNotes }).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleaseTypeOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleaseTypeOutput) RepositoryOpts() RepositoryOptsOutput {
	return o.ApplyT(func(v ReleaseType) RepositoryOpts { return v.RepositoryOpts }).(RepositoryOptsOutput)
}

// When upgrading, reset the values to the ones built into the chart.
func (o ReleaseTypeOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.ResetValues }).(pulumi.BoolPtrOutput)
}

// Names of resources created by the release grouped by "kind/version".
func (o ReleaseTypeOutput) ResourceNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v ReleaseType) map[string][]string { return v.ResourceNames }).(pulumi.StringArrayMapOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
func (o ReleaseTypeOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.ReuseValues }).(pulumi.BoolPtrOutput)
}

// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
func (o ReleaseTypeOutput) SkipAwait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.SkipAwait }).(pulumi.BoolPtrOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
func (o ReleaseTypeOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.SkipCrds }).(pulumi.BoolPtrOutput)
}

// Status of the deployed release.
func (o ReleaseTypeOutput) Status() ReleaseStatusOutput {
	return o.ApplyT(func(v ReleaseType) ReleaseStatus { return v.Status }).(ReleaseStatusOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleaseTypeOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseType) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
func (o ReleaseTypeOutput) ValueYamlFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v ReleaseType) []pulumi.AssetOrArchive { return v.ValueYamlFiles }).(pulumi.AssetOrArchiveArrayOutput)
}

// Custom values set for the release.
func (o ReleaseTypeOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v ReleaseType) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// Verify the package before installing it.
func (o ReleaseTypeOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
func (o ReleaseTypeOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseType) *bool { return v.WaitForJobs }).(pulumi.BoolPtrOutput)
}

type ReleaseStatus struct {
	// The version number of the application being deployed.
	AppVersion *string `pulumi:"appVersion"`
	// The name of the chart.
	Chart *string `pulumi:"chart"`
	// Name is the name of the release.
	Name *string `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace *string `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision *int `pulumi:"revision"`
	// Status of the release.
	Status string `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version *string `pulumi:"version"`
}

// ReleaseStatusInput is an input type that accepts ReleaseStatusArgs and ReleaseStatusOutput values.
// You can construct a concrete instance of `ReleaseStatusInput` via:
//
//          ReleaseStatusArgs{...}
type ReleaseStatusInput interface {
	pulumi.Input

	ToReleaseStatusOutput() ReleaseStatusOutput
	ToReleaseStatusOutputWithContext(context.Context) ReleaseStatusOutput
}

type ReleaseStatusArgs struct {
	// The version number of the application being deployed.
	AppVersion pulumi.StringPtrInput `pulumi:"appVersion"`
	// The name of the chart.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Name is the name of the release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// Status of the release.
	Status pulumi.StringInput `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (i ReleaseStatusArgs) ToReleaseStatusOutput() ReleaseStatusOutput {
	return i.ToReleaseStatusOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput)
}

func (i ReleaseStatusArgs) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return i.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput).ToReleaseStatusPtrOutputWithContext(ctx)
}

// ReleaseStatusPtrInput is an input type that accepts ReleaseStatusArgs, ReleaseStatusPtr and ReleaseStatusPtrOutput values.
// You can construct a concrete instance of `ReleaseStatusPtrInput` via:
//
//          ReleaseStatusArgs{...}
//
//  or:
//
//          nil
type ReleaseStatusPtrInput interface {
	pulumi.Input

	ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput
	ToReleaseStatusPtrOutputWithContext(context.Context) ReleaseStatusPtrOutput
}

type releaseStatusPtrType ReleaseStatusArgs

func ReleaseStatusPtr(v *ReleaseStatusArgs) ReleaseStatusPtrInput {
	return (*releaseStatusPtrType)(v)
}

func (*releaseStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseStatus)(nil)).Elem()
}

func (i *releaseStatusPtrType) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return i.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (i *releaseStatusPtrType) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusPtrOutput)
}

type ReleaseStatusOutput struct{ *pulumi.OutputState }

func (ReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusOutput) ToReleaseStatusOutput() ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return o.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (o ReleaseStatusOutput) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReleaseStatus) *ReleaseStatus {
		return &v
	}).(ReleaseStatusPtrOutput)
}

// The version number of the application being deployed.
func (o ReleaseStatusOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.AppVersion }).(pulumi.StringPtrOutput)
}

// The name of the chart.
func (o ReleaseStatusOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o ReleaseStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Status of the release.
func (o ReleaseStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Status }).(pulumi.StringOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ReleaseStatusPtrOutput struct{ *pulumi.OutputState }

func (ReleaseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusPtrOutput) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return o
}

func (o ReleaseStatusPtrOutput) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return o
}

func (o ReleaseStatusPtrOutput) Elem() ReleaseStatusOutput {
	return o.ApplyT(func(v *ReleaseStatus) ReleaseStatus {
		if v != nil {
			return *v
		}
		var ret ReleaseStatus
		return ret
	}).(ReleaseStatusOutput)
}

// The version number of the application being deployed.
func (o ReleaseStatusPtrOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.AppVersion
	}).(pulumi.StringPtrOutput)
}

// The name of the chart.
func (o ReleaseStatusPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o ReleaseStatusPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// Status of the release.
func (o ReleaseStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOpts struct {
	// The Repository's CA File
	CaFile *string `pulumi:"caFile"`
	// The repository's cert file
	CertFile *string `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile *string `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password *string `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo *string `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username *string `pulumi:"username"`
}

// RepositoryOptsInput is an input type that accepts RepositoryOptsArgs and RepositoryOptsOutput values.
// You can construct a concrete instance of `RepositoryOptsInput` via:
//
//          RepositoryOptsArgs{...}
type RepositoryOptsInput interface {
	pulumi.Input

	ToRepositoryOptsOutput() RepositoryOptsOutput
	ToRepositoryOptsOutputWithContext(context.Context) RepositoryOptsOutput
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsArgs struct {
	// The Repository's CA File
	CaFile pulumi.StringPtrInput `pulumi:"caFile"`
	// The repository's cert file
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile pulumi.StringPtrInput `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RepositoryOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return i.ToRepositoryOptsOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput)
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput).ToRepositoryOptsPtrOutputWithContext(ctx)
}

// RepositoryOptsPtrInput is an input type that accepts RepositoryOptsArgs, RepositoryOptsPtr and RepositoryOptsPtrOutput values.
// You can construct a concrete instance of `RepositoryOptsPtrInput` via:
//
//          RepositoryOptsArgs{...}
//
//  or:
//
//          nil
type RepositoryOptsPtrInput interface {
	pulumi.Input

	ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput
	ToRepositoryOptsPtrOutputWithContext(context.Context) RepositoryOptsPtrOutput
}

type repositoryOptsPtrType RepositoryOptsArgs

func RepositoryOptsPtr(v *RepositoryOptsArgs) RepositoryOptsPtrInput {
	return (*repositoryOptsPtrType)(v)
}

func (*repositoryOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsOutput struct{ *pulumi.OutputState }

func (RepositoryOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryOpts) *RepositoryOpts {
		return &v
	}).(RepositoryOptsPtrOutput)
}

// The Repository's CA File
func (o RepositoryOptsOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CaFile }).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RepositoryOptsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) Elem() RepositoryOptsOutput {
	return o.ApplyT(func(v *RepositoryOpts) RepositoryOpts {
		if v != nil {
			return *v
		}
		var ret RepositoryOpts
		return ret
	}).(RepositoryOptsOutput)
}

// The Repository's CA File
func (o RepositoryOptsPtrOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CaFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseTypeInput)(nil)).Elem(), ReleaseTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseStatusInput)(nil)).Elem(), ReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseStatusPtrInput)(nil)).Elem(), ReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsPtrInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterOutputType(ReleaseTypeOutput{})
	pulumi.RegisterOutputType(ReleaseStatusOutput{})
	pulumi.RegisterOutputType(ReleaseStatusPtrOutput{})
	pulumi.RegisterOutputType(RepositoryOptsOutput{})
	pulumi.RegisterOutputType(RepositoryOptsPtrOutput{})
}
