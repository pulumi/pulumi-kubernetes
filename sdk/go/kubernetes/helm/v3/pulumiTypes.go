// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Release is an instance of a chart running in a Kubernetes cluster.
//
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
type ReleaseType struct {
	ReleaseSpec  ReleaseSpec `pulumi:"releaseSpec"`
	ResourceType *string     `pulumi:"resourceType"`
	// Status of the deployed release.
	Status ReleaseStatus `pulumi:"status"`
}

// ReleaseTypeInput is an input type that accepts ReleaseTypeArgs and ReleaseTypeOutput values.
// You can construct a concrete instance of `ReleaseTypeInput` via:
//
//          ReleaseTypeArgs{...}
type ReleaseTypeInput interface {
	pulumi.Input

	ToReleaseTypeOutput() ReleaseTypeOutput
	ToReleaseTypeOutputWithContext(context.Context) ReleaseTypeOutput
}

// A Release is an instance of a chart running in a Kubernetes cluster.
//
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
type ReleaseTypeArgs struct {
	ReleaseSpec  ReleaseSpecInput      `pulumi:"releaseSpec"`
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// Status of the deployed release.
	Status ReleaseStatusInput `pulumi:"status"`
}

func (ReleaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseType)(nil)).Elem()
}

func (i ReleaseTypeArgs) ToReleaseTypeOutput() ReleaseTypeOutput {
	return i.ToReleaseTypeOutputWithContext(context.Background())
}

func (i ReleaseTypeArgs) ToReleaseTypeOutputWithContext(ctx context.Context) ReleaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseTypeOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
//
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
type ReleaseTypeOutput struct{ *pulumi.OutputState }

func (ReleaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseType)(nil)).Elem()
}

func (o ReleaseTypeOutput) ToReleaseTypeOutput() ReleaseTypeOutput {
	return o
}

func (o ReleaseTypeOutput) ToReleaseTypeOutputWithContext(ctx context.Context) ReleaseTypeOutput {
	return o
}

func (o ReleaseTypeOutput) ReleaseSpec() ReleaseSpecOutput {
	return o.ApplyT(func(v ReleaseType) ReleaseSpec { return v.ReleaseSpec }).(ReleaseSpecOutput)
}

func (o ReleaseTypeOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseType) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// Status of the deployed release.
func (o ReleaseTypeOutput) Status() ReleaseStatusOutput {
	return o.ApplyT(func(v ReleaseType) ReleaseStatus { return v.Status }).(ReleaseStatusOutput)
}

// Specification defining the Helm Release to install.
type ReleaseSpec struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks *bool `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning
	Lint *bool `pulumi:"lint"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit
	MaxHistory *int `pulumi:"maxHistory"`
	// Release name.
	Name string `pulumi:"name"`
	// Namespace to install the release into.
	Namespace *string `pulumi:"namespace"`
	// Postrender command to run.
	Postrender *string `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback
	RecreatePods *bool `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace *bool `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositorySpec RepositorySpec `pulumi:"repositorySpec"`
	// When upgrading, reset the values to the ones built into the chart
	ResetValues *bool `pulumi:"resetValues"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
	ReuseValues *bool `pulumi:"reuseValues"`
	// Custom values to be merged with the values.
	Set []SetValue `pulumi:"set"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present
	SkipCrds *bool `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout *int `pulumi:"timeout"`
	// List of values in raw yaml format to pass to helm.
	Values []string `pulumi:"values"`
	// Verify the package before installing it.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all resources are in a ready state before marking the release as successful.
	Wait *bool `pulumi:"wait"`
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

// ReleaseSpecInput is an input type that accepts ReleaseSpecArgs and ReleaseSpecOutput values.
// You can construct a concrete instance of `ReleaseSpecInput` via:
//
//          ReleaseSpecArgs{...}
type ReleaseSpecInput interface {
	pulumi.Input

	ToReleaseSpecOutput() ReleaseSpecOutput
	ToReleaseSpecOutputWithContext(context.Context) ReleaseSpecOutput
}

// Specification defining the Helm Release to install.
type ReleaseSpecArgs struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
	Atomic pulumi.BoolPtrInput `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringInput `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart
	DependencyUpdate pulumi.BoolPtrInput `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel pulumi.BoolPtrInput `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks pulumi.BoolPtrInput `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation pulumi.BoolPtrInput `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks pulumi.BoolPtrInput `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// Run helm lint when planning
	Lint pulumi.BoolPtrInput `pulumi:"lint"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// Release name.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace to install the release into.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Postrender command to run.
	Postrender pulumi.StringPtrInput `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback
	RecreatePods pulumi.BoolPtrInput `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent
	RenderSubchartNotes pulumi.BoolPtrInput `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositorySpec RepositorySpecInput `pulumi:"repositorySpec"`
	// When upgrading, reset the values to the ones built into the chart
	ResetValues pulumi.BoolPtrInput `pulumi:"resetValues"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
	ReuseValues pulumi.BoolPtrInput `pulumi:"reuseValues"`
	// Custom values to be merged with the values.
	Set SetValueArrayInput `pulumi:"set"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present
	SkipCrds pulumi.BoolPtrInput `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// List of values in raw yaml format to pass to helm.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// Verify the package before installing it.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// Will wait until all resources are in a ready state before marking the release as successful.
	Wait pulumi.BoolPtrInput `pulumi:"wait"`
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
	WaitForJobs pulumi.BoolPtrInput `pulumi:"waitForJobs"`
}

func (ReleaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseSpec)(nil)).Elem()
}

func (i ReleaseSpecArgs) ToReleaseSpecOutput() ReleaseSpecOutput {
	return i.ToReleaseSpecOutputWithContext(context.Background())
}

func (i ReleaseSpecArgs) ToReleaseSpecOutputWithContext(ctx context.Context) ReleaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseSpecOutput)
}

func (i ReleaseSpecArgs) ToReleaseSpecPtrOutput() ReleaseSpecPtrOutput {
	return i.ToReleaseSpecPtrOutputWithContext(context.Background())
}

func (i ReleaseSpecArgs) ToReleaseSpecPtrOutputWithContext(ctx context.Context) ReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseSpecOutput).ToReleaseSpecPtrOutputWithContext(ctx)
}

// ReleaseSpecPtrInput is an input type that accepts ReleaseSpecArgs, ReleaseSpecPtr and ReleaseSpecPtrOutput values.
// You can construct a concrete instance of `ReleaseSpecPtrInput` via:
//
//          ReleaseSpecArgs{...}
//
//  or:
//
//          nil
type ReleaseSpecPtrInput interface {
	pulumi.Input

	ToReleaseSpecPtrOutput() ReleaseSpecPtrOutput
	ToReleaseSpecPtrOutputWithContext(context.Context) ReleaseSpecPtrOutput
}

type releaseSpecPtrType ReleaseSpecArgs

func ReleaseSpecPtr(v *ReleaseSpecArgs) ReleaseSpecPtrInput {
	return (*releaseSpecPtrType)(v)
}

func (*releaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseSpec)(nil)).Elem()
}

func (i *releaseSpecPtrType) ToReleaseSpecPtrOutput() ReleaseSpecPtrOutput {
	return i.ToReleaseSpecPtrOutputWithContext(context.Background())
}

func (i *releaseSpecPtrType) ToReleaseSpecPtrOutputWithContext(ctx context.Context) ReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseSpecPtrOutput)
}

// Specification defining the Helm Release to install.
type ReleaseSpecOutput struct{ *pulumi.OutputState }

func (ReleaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseSpec)(nil)).Elem()
}

func (o ReleaseSpecOutput) ToReleaseSpecOutput() ReleaseSpecOutput {
	return o
}

func (o ReleaseSpecOutput) ToReleaseSpecOutputWithContext(ctx context.Context) ReleaseSpecOutput {
	return o
}

func (o ReleaseSpecOutput) ToReleaseSpecPtrOutput() ReleaseSpecPtrOutput {
	return o.ToReleaseSpecPtrOutputWithContext(context.Background())
}

func (o ReleaseSpecOutput) ToReleaseSpecPtrOutputWithContext(ctx context.Context) ReleaseSpecPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *ReleaseSpec {
		return &v
	}).(ReleaseSpecPtrOutput)
}

// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
func (o ReleaseSpecOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Atomic }).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseSpecOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseSpec) string { return v.Chart }).(pulumi.StringOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails
func (o ReleaseSpecOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist
func (o ReleaseSpecOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart
func (o ReleaseSpecOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.DependencyUpdate }).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
func (o ReleaseSpecOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Devel }).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleaseSpecOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.DisableCRDHooks }).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleaseSpecOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.DisableOpenapiValidation }).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleaseSpecOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.DisableWebhooks }).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleaseSpecOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleaseSpecOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// Run helm lint when planning
func (o ReleaseSpecOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Lint }).(pulumi.BoolPtrOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit
func (o ReleaseSpecOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleaseSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseSpec) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace to install the release into.
func (o ReleaseSpecOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleaseSpecOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *string { return v.Postrender }).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback
func (o ReleaseSpecOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.RecreatePods }).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent
func (o ReleaseSpecOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.RenderSubchartNotes }).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleaseSpecOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleaseSpecOutput) RepositorySpec() RepositorySpecOutput {
	return o.ApplyT(func(v ReleaseSpec) RepositorySpec { return v.RepositorySpec }).(RepositorySpecOutput)
}

// When upgrading, reset the values to the ones built into the chart
func (o ReleaseSpecOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.ResetValues }).(pulumi.BoolPtrOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
func (o ReleaseSpecOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.ReuseValues }).(pulumi.BoolPtrOutput)
}

// Custom values to be merged with the values.
func (o ReleaseSpecOutput) Set() SetValueArrayOutput {
	return o.ApplyT(func(v ReleaseSpec) []SetValue { return v.Set }).(SetValueArrayOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present
func (o ReleaseSpecOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.SkipCrds }).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleaseSpecOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// List of values in raw yaml format to pass to helm.
func (o ReleaseSpecOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReleaseSpec) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Verify the package before installing it.
func (o ReleaseSpecOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Will wait until all resources are in a ready state before marking the release as successful.
func (o ReleaseSpecOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.Wait }).(pulumi.BoolPtrOutput)
}

// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
func (o ReleaseSpecOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReleaseSpec) *bool { return v.WaitForJobs }).(pulumi.BoolPtrOutput)
}

type ReleaseSpecPtrOutput struct{ *pulumi.OutputState }

func (ReleaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseSpec)(nil)).Elem()
}

func (o ReleaseSpecPtrOutput) ToReleaseSpecPtrOutput() ReleaseSpecPtrOutput {
	return o
}

func (o ReleaseSpecPtrOutput) ToReleaseSpecPtrOutputWithContext(ctx context.Context) ReleaseSpecPtrOutput {
	return o
}

func (o ReleaseSpecPtrOutput) Elem() ReleaseSpecOutput {
	return o.ApplyT(func(v *ReleaseSpec) ReleaseSpec { return *v }).(ReleaseSpecOutput)
}

// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
func (o ReleaseSpecPtrOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Atomic
	}).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseSpecPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Chart
	}).(pulumi.StringPtrOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails
func (o ReleaseSpecPtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist
func (o ReleaseSpecPtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart
func (o ReleaseSpecPtrOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DependencyUpdate
	}).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
func (o ReleaseSpecPtrOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Devel
	}).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleaseSpecPtrOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCRDHooks
	}).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleaseSpecPtrOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenapiValidation
	}).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleaseSpecPtrOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWebhooks
	}).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleaseSpecPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleaseSpecPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// Run helm lint when planning
func (o ReleaseSpecPtrOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Lint
	}).(pulumi.BoolPtrOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit
func (o ReleaseSpecPtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleaseSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleaseSpecPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleaseSpecPtrOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Postrender
	}).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback
func (o ReleaseSpecPtrOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.RecreatePods
	}).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent
func (o ReleaseSpecPtrOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.RenderSubchartNotes
	}).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleaseSpecPtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleaseSpecPtrOutput) RepositorySpec() RepositorySpecPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *RepositorySpec {
		if v == nil {
			return nil
		}
		return &v.RepositorySpec
	}).(RepositorySpecPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart
func (o ReleaseSpecPtrOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ResetValues
	}).(pulumi.BoolPtrOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
func (o ReleaseSpecPtrOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ReuseValues
	}).(pulumi.BoolPtrOutput)
}

// Custom values to be merged with the values.
func (o ReleaseSpecPtrOutput) Set() SetValueArrayOutput {
	return o.ApplyT(func(v *ReleaseSpec) []SetValue {
		if v == nil {
			return nil
		}
		return v.Set
	}).(SetValueArrayOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present
func (o ReleaseSpecPtrOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCrds
	}).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleaseSpecPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// List of values in raw yaml format to pass to helm.
func (o ReleaseSpecPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseSpec) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Verify the package before installing it.
func (o ReleaseSpecPtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Will wait until all resources are in a ready state before marking the release as successful.
func (o ReleaseSpecPtrOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(pulumi.BoolPtrOutput)
}

// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
func (o ReleaseSpecPtrOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForJobs
	}).(pulumi.BoolPtrOutput)
}

type ReleaseStatus struct {
	// The version number of the application being deployed.
	AppVersion *string `pulumi:"appVersion"`
	// The name of the chart.
	Chart *string `pulumi:"chart"`
	// The rendered manifest as JSON.
	Manifest *string `pulumi:"manifest"`
	// Name is the name of the release.
	Name *string `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace *string `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision *int `pulumi:"revision"`
	// Status of the release.
	Status string `pulumi:"status"`
	// Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
	Values *string `pulumi:"values"`
	// A SemVer 2 conformant version string of the chart.
	Version *string `pulumi:"version"`
}

// ReleaseStatusInput is an input type that accepts ReleaseStatusArgs and ReleaseStatusOutput values.
// You can construct a concrete instance of `ReleaseStatusInput` via:
//
//          ReleaseStatusArgs{...}
type ReleaseStatusInput interface {
	pulumi.Input

	ToReleaseStatusOutput() ReleaseStatusOutput
	ToReleaseStatusOutputWithContext(context.Context) ReleaseStatusOutput
}

type ReleaseStatusArgs struct {
	// The version number of the application being deployed.
	AppVersion pulumi.StringPtrInput `pulumi:"appVersion"`
	// The name of the chart.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// The rendered manifest as JSON.
	Manifest pulumi.StringPtrInput `pulumi:"manifest"`
	// Name is the name of the release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// Status of the release.
	Status pulumi.StringInput `pulumi:"status"`
	// Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
	Values pulumi.StringPtrInput `pulumi:"values"`
	// A SemVer 2 conformant version string of the chart.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (i ReleaseStatusArgs) ToReleaseStatusOutput() ReleaseStatusOutput {
	return i.ToReleaseStatusOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput)
}

func (i ReleaseStatusArgs) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return i.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput).ToReleaseStatusPtrOutputWithContext(ctx)
}

// ReleaseStatusPtrInput is an input type that accepts ReleaseStatusArgs, ReleaseStatusPtr and ReleaseStatusPtrOutput values.
// You can construct a concrete instance of `ReleaseStatusPtrInput` via:
//
//          ReleaseStatusArgs{...}
//
//  or:
//
//          nil
type ReleaseStatusPtrInput interface {
	pulumi.Input

	ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput
	ToReleaseStatusPtrOutputWithContext(context.Context) ReleaseStatusPtrOutput
}

type releaseStatusPtrType ReleaseStatusArgs

func ReleaseStatusPtr(v *ReleaseStatusArgs) ReleaseStatusPtrInput {
	return (*releaseStatusPtrType)(v)
}

func (*releaseStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseStatus)(nil)).Elem()
}

func (i *releaseStatusPtrType) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return i.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (i *releaseStatusPtrType) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusPtrOutput)
}

type ReleaseStatusOutput struct{ *pulumi.OutputState }

func (ReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusOutput) ToReleaseStatusOutput() ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return o.ToReleaseStatusPtrOutputWithContext(context.Background())
}

func (o ReleaseStatusOutput) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *ReleaseStatus {
		return &v
	}).(ReleaseStatusPtrOutput)
}

// The version number of the application being deployed.
func (o ReleaseStatusOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.AppVersion }).(pulumi.StringPtrOutput)
}

// The name of the chart.
func (o ReleaseStatusOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// The rendered manifest as JSON.
func (o ReleaseStatusOutput) Manifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Manifest }).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o ReleaseStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Status of the release.
func (o ReleaseStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Status }).(pulumi.StringOutput)
}

// Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
func (o ReleaseStatusOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Values }).(pulumi.StringPtrOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ReleaseStatusPtrOutput struct{ *pulumi.OutputState }

func (ReleaseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusPtrOutput) ToReleaseStatusPtrOutput() ReleaseStatusPtrOutput {
	return o
}

func (o ReleaseStatusPtrOutput) ToReleaseStatusPtrOutputWithContext(ctx context.Context) ReleaseStatusPtrOutput {
	return o
}

func (o ReleaseStatusPtrOutput) Elem() ReleaseStatusOutput {
	return o.ApplyT(func(v *ReleaseStatus) ReleaseStatus { return *v }).(ReleaseStatusOutput)
}

// The version number of the application being deployed.
func (o ReleaseStatusPtrOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.AppVersion
	}).(pulumi.StringPtrOutput)
}

// The name of the chart.
func (o ReleaseStatusPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// The rendered manifest as JSON.
func (o ReleaseStatusPtrOutput) Manifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Manifest
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o ReleaseStatusPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// Status of the release.
func (o ReleaseStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
func (o ReleaseStatusPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositorySpec struct {
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository *string `pulumi:"repository"`
	// The Repositories CA File
	RepositoryCAFile *string `pulumi:"repositoryCAFile"`
	// The repositories cert file
	RepositoryCertFile *string `pulumi:"repositoryCertFile"`
	// The repositories cert key file
	RepositoryKeyFile *string `pulumi:"repositoryKeyFile"`
	// Password for HTTP basic authentication
	RepositoryPassword *string `pulumi:"repositoryPassword"`
	// Username for HTTP basic authentication
	RepositoryUsername *string `pulumi:"repositoryUsername"`
}

// RepositorySpecInput is an input type that accepts RepositorySpecArgs and RepositorySpecOutput values.
// You can construct a concrete instance of `RepositorySpecInput` via:
//
//          RepositorySpecArgs{...}
type RepositorySpecInput interface {
	pulumi.Input

	ToRepositorySpecOutput() RepositorySpecOutput
	ToRepositorySpecOutputWithContext(context.Context) RepositorySpecOutput
}

// Specification defining the Helm chart repository to use.
type RepositorySpecArgs struct {
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The Repositories CA File
	RepositoryCAFile pulumi.StringPtrInput `pulumi:"repositoryCAFile"`
	// The repositories cert file
	RepositoryCertFile pulumi.StringPtrInput `pulumi:"repositoryCertFile"`
	// The repositories cert key file
	RepositoryKeyFile pulumi.StringPtrInput `pulumi:"repositoryKeyFile"`
	// Password for HTTP basic authentication
	RepositoryPassword pulumi.StringPtrInput `pulumi:"repositoryPassword"`
	// Username for HTTP basic authentication
	RepositoryUsername pulumi.StringPtrInput `pulumi:"repositoryUsername"`
}

func (RepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySpec)(nil)).Elem()
}

func (i RepositorySpecArgs) ToRepositorySpecOutput() RepositorySpecOutput {
	return i.ToRepositorySpecOutputWithContext(context.Background())
}

func (i RepositorySpecArgs) ToRepositorySpecOutputWithContext(ctx context.Context) RepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySpecOutput)
}

func (i RepositorySpecArgs) ToRepositorySpecPtrOutput() RepositorySpecPtrOutput {
	return i.ToRepositorySpecPtrOutputWithContext(context.Background())
}

func (i RepositorySpecArgs) ToRepositorySpecPtrOutputWithContext(ctx context.Context) RepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySpecOutput).ToRepositorySpecPtrOutputWithContext(ctx)
}

// RepositorySpecPtrInput is an input type that accepts RepositorySpecArgs, RepositorySpecPtr and RepositorySpecPtrOutput values.
// You can construct a concrete instance of `RepositorySpecPtrInput` via:
//
//          RepositorySpecArgs{...}
//
//  or:
//
//          nil
type RepositorySpecPtrInput interface {
	pulumi.Input

	ToRepositorySpecPtrOutput() RepositorySpecPtrOutput
	ToRepositorySpecPtrOutputWithContext(context.Context) RepositorySpecPtrOutput
}

type repositorySpecPtrType RepositorySpecArgs

func RepositorySpecPtr(v *RepositorySpecArgs) RepositorySpecPtrInput {
	return (*repositorySpecPtrType)(v)
}

func (*repositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySpec)(nil)).Elem()
}

func (i *repositorySpecPtrType) ToRepositorySpecPtrOutput() RepositorySpecPtrOutput {
	return i.ToRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *repositorySpecPtrType) ToRepositorySpecPtrOutputWithContext(ctx context.Context) RepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySpecPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositorySpecOutput struct{ *pulumi.OutputState }

func (RepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySpec)(nil)).Elem()
}

func (o RepositorySpecOutput) ToRepositorySpecOutput() RepositorySpecOutput {
	return o
}

func (o RepositorySpecOutput) ToRepositorySpecOutputWithContext(ctx context.Context) RepositorySpecOutput {
	return o
}

func (o RepositorySpecOutput) ToRepositorySpecPtrOutput() RepositorySpecPtrOutput {
	return o.ToRepositorySpecPtrOutputWithContext(context.Background())
}

func (o RepositorySpecOutput) ToRepositorySpecPtrOutputWithContext(ctx context.Context) RepositorySpecPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *RepositorySpec {
		return &v
	}).(RepositorySpecPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositorySpecOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The Repositories CA File
func (o RepositorySpecOutput) RepositoryCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.RepositoryCAFile }).(pulumi.StringPtrOutput)
}

// The repositories cert file
func (o RepositorySpecOutput) RepositoryCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.RepositoryCertFile }).(pulumi.StringPtrOutput)
}

// The repositories cert key file
func (o RepositorySpecOutput) RepositoryKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.RepositoryKeyFile }).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositorySpecOutput) RepositoryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.RepositoryPassword }).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositorySpecOutput) RepositoryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositorySpec) *string { return v.RepositoryUsername }).(pulumi.StringPtrOutput)
}

type RepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (RepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySpec)(nil)).Elem()
}

func (o RepositorySpecPtrOutput) ToRepositorySpecPtrOutput() RepositorySpecPtrOutput {
	return o
}

func (o RepositorySpecPtrOutput) ToRepositorySpecPtrOutputWithContext(ctx context.Context) RepositorySpecPtrOutput {
	return o
}

func (o RepositorySpecPtrOutput) Elem() RepositorySpecOutput {
	return o.ApplyT(func(v *RepositorySpec) RepositorySpec { return *v }).(RepositorySpecOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositorySpecPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The Repositories CA File
func (o RepositorySpecPtrOutput) RepositoryCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryCAFile
	}).(pulumi.StringPtrOutput)
}

// The repositories cert file
func (o RepositorySpecPtrOutput) RepositoryCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryCertFile
	}).(pulumi.StringPtrOutput)
}

// The repositories cert key file
func (o RepositorySpecPtrOutput) RepositoryKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryKeyFile
	}).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositorySpecPtrOutput) RepositoryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPassword
	}).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositorySpecPtrOutput) RepositoryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryUsername
	}).(pulumi.StringPtrOutput)
}

type SetValue struct {
	Name  string  `pulumi:"name"`
	Type  *string `pulumi:"type"`
	Value string  `pulumi:"value"`
}

// SetValueInput is an input type that accepts SetValueArgs and SetValueOutput values.
// You can construct a concrete instance of `SetValueInput` via:
//
//          SetValueArgs{...}
type SetValueInput interface {
	pulumi.Input

	ToSetValueOutput() SetValueOutput
	ToSetValueOutputWithContext(context.Context) SetValueOutput
}

type SetValueArgs struct {
	Name  pulumi.StringInput    `pulumi:"name"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringInput    `pulumi:"value"`
}

func (SetValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetValue)(nil)).Elem()
}

func (i SetValueArgs) ToSetValueOutput() SetValueOutput {
	return i.ToSetValueOutputWithContext(context.Background())
}

func (i SetValueArgs) ToSetValueOutputWithContext(ctx context.Context) SetValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetValueOutput)
}

// SetValueArrayInput is an input type that accepts SetValueArray and SetValueArrayOutput values.
// You can construct a concrete instance of `SetValueArrayInput` via:
//
//          SetValueArray{ SetValueArgs{...} }
type SetValueArrayInput interface {
	pulumi.Input

	ToSetValueArrayOutput() SetValueArrayOutput
	ToSetValueArrayOutputWithContext(context.Context) SetValueArrayOutput
}

type SetValueArray []SetValueInput

func (SetValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetValue)(nil)).Elem()
}

func (i SetValueArray) ToSetValueArrayOutput() SetValueArrayOutput {
	return i.ToSetValueArrayOutputWithContext(context.Background())
}

func (i SetValueArray) ToSetValueArrayOutputWithContext(ctx context.Context) SetValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetValueArrayOutput)
}

type SetValueOutput struct{ *pulumi.OutputState }

func (SetValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetValue)(nil)).Elem()
}

func (o SetValueOutput) ToSetValueOutput() SetValueOutput {
	return o
}

func (o SetValueOutput) ToSetValueOutputWithContext(ctx context.Context) SetValueOutput {
	return o
}

func (o SetValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SetValue) string { return v.Name }).(pulumi.StringOutput)
}

func (o SetValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o SetValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SetValue) string { return v.Value }).(pulumi.StringOutput)
}

type SetValueArrayOutput struct{ *pulumi.OutputState }

func (SetValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetValue)(nil)).Elem()
}

func (o SetValueArrayOutput) ToSetValueArrayOutput() SetValueArrayOutput {
	return o
}

func (o SetValueArrayOutput) ToSetValueArrayOutputWithContext(ctx context.Context) SetValueArrayOutput {
	return o
}

func (o SetValueArrayOutput) Index(i pulumi.IntInput) SetValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetValue {
		return vs[0].([]SetValue)[vs[1].(int)]
	}).(SetValueOutput)
}

func init() {
	pulumi.RegisterOutputType(ReleaseTypeOutput{})
	pulumi.RegisterOutputType(ReleaseSpecOutput{})
	pulumi.RegisterOutputType(ReleaseSpecPtrOutput{})
	pulumi.RegisterOutputType(ReleaseStatusOutput{})
	pulumi.RegisterOutputType(ReleaseStatusPtrOutput{})
	pulumi.RegisterOutputType(RepositorySpecOutput{})
	pulumi.RegisterOutputType(RepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(SetValueOutput{})
	pulumi.RegisterOutputType(SetValueArrayOutput{})
}
