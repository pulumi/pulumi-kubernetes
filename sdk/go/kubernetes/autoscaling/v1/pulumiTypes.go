// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReference struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind string `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`
}

// CrossVersionObjectReferenceInput is an input type that accepts CrossVersionObjectReferenceArgs and CrossVersionObjectReferenceOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferenceInput` via:
//
// 		 CrossVersionObjectReferenceArgs{...}
//
type CrossVersionObjectReferenceInput interface {
	pulumi.Input

	ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput
	ToCrossVersionObjectReferenceOutputWithContext(context.Context) CrossVersionObjectReferenceOutput
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (CrossVersionObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return i.ToCrossVersionObjectReferenceOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput)
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput).ToCrossVersionObjectReferencePtrOutputWithContext(ctx)
}

// CrossVersionObjectReferencePtrInput is an input type that accepts CrossVersionObjectReferenceArgs, CrossVersionObjectReferencePtr and CrossVersionObjectReferencePtrOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferencePtrInput` via:
//
// 		 CrossVersionObjectReferenceArgs{...}
//
//  or:
//
// 		 nil
//
type CrossVersionObjectReferencePtrInput interface {
	pulumi.Input

	ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput
	ToCrossVersionObjectReferencePtrOutputWithContext(context.Context) CrossVersionObjectReferencePtrOutput
}

type crossVersionObjectReferencePtrType CrossVersionObjectReferenceArgs

func CrossVersionObjectReferencePtr(v *CrossVersionObjectReferenceArgs) CrossVersionObjectReferencePtrInput {
	return (*crossVersionObjectReferencePtrType)(v)
}

func (*crossVersionObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePtrOutput)
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) *CrossVersionObjectReference {
		return &v
	}).(CrossVersionObjectReferencePtrOutput)
}

// API version of the referent
func (o CrossVersionObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o CrossVersionObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o CrossVersionObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Name }).(pulumi.StringOutput)
}

type CrossVersionObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) Elem() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) CrossVersionObjectReference { return *v }).(CrossVersionObjectReferenceOutput)
}

// API version of the referent
func (o CrossVersionObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o CrossVersionObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o CrossVersionObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *HorizontalPodAutoscalerSpec `pulumi:"spec"`
	// current information about the autoscaler.
	Status *HorizontalPodAutoscalerStatus `pulumi:"status"`
}

// HorizontalPodAutoscalerTypeInput is an input type that accepts HorizontalPodAutoscalerTypeArgs and HorizontalPodAutoscalerTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeInput` via:
//
// 		 HorizontalPodAutoscalerTypeArgs{...}
//
type HorizontalPodAutoscalerTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput
	ToHorizontalPodAutoscalerTypeOutputWithContext(context.Context) HorizontalPodAutoscalerTypeOutput
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec HorizontalPodAutoscalerSpecPtrInput `pulumi:"spec"`
	// current information about the autoscaler.
	Status HorizontalPodAutoscalerStatusPtrInput `pulumi:"status"`
}

func (HorizontalPodAutoscalerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return i.ToHorizontalPodAutoscalerTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeOutput)
}

// HorizontalPodAutoscalerTypeArrayInput is an input type that accepts HorizontalPodAutoscalerTypeArray and HorizontalPodAutoscalerTypeArrayOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeArrayInput` via:
//
// 		 HorizontalPodAutoscalerTypeArray{ HorizontalPodAutoscalerTypeArgs{...} }
//
type HorizontalPodAutoscalerTypeArrayInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput
	ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Context) HorizontalPodAutoscalerTypeArrayOutput
}

type HorizontalPodAutoscalerTypeArray []HorizontalPodAutoscalerTypeInput

func (HorizontalPodAutoscalerTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return i.ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeArrayOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HorizontalPodAutoscalerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o HorizontalPodAutoscalerTypeOutput) Spec() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerSpec { return v.Spec }).(HorizontalPodAutoscalerSpecPtrOutput)
}

// current information about the autoscaler.
func (o HorizontalPodAutoscalerTypeOutput) Status() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerStatus { return v.Status }).(HorizontalPodAutoscalerStatusPtrOutput)
}

type HorizontalPodAutoscalerTypeArrayOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) Index(i pulumi.IntInput) HorizontalPodAutoscalerTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HorizontalPodAutoscalerType {
		return vs[0].([]HorizontalPodAutoscalerType)[vs[1].(int)]
	}).(HorizontalPodAutoscalerTypeOutput)
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// list of horizontal pod autoscaler objects.
	Items []HorizontalPodAutoscalerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HorizontalPodAutoscalerListTypeInput is an input type that accepts HorizontalPodAutoscalerListTypeArgs and HorizontalPodAutoscalerListTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerListTypeInput` via:
//
// 		 HorizontalPodAutoscalerListTypeArgs{...}
//
type HorizontalPodAutoscalerListTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput
	ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Context) HorizontalPodAutoscalerListTypeOutput
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// list of horizontal pod autoscaler objects.
	Items HorizontalPodAutoscalerTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HorizontalPodAutoscalerListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return i.ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerListTypeOutput)
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// list of horizontal pod autoscaler objects.
func (o HorizontalPodAutoscalerListTypeOutput) Items() HorizontalPodAutoscalerTypeArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) []HorizontalPodAutoscalerType { return v.Items }).(HorizontalPodAutoscalerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o HorizontalPodAutoscalerListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpec struct {
	// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef CrossVersionObjectReference `pulumi:"scaleTargetRef"`
	// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `pulumi:"targetCPUUtilizationPercentage"`
}

// HorizontalPodAutoscalerSpecInput is an input type that accepts HorizontalPodAutoscalerSpecArgs and HorizontalPodAutoscalerSpecOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecInput` via:
//
// 		 HorizontalPodAutoscalerSpecArgs{...}
//
type HorizontalPodAutoscalerSpecInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput
	ToHorizontalPodAutoscalerSpecOutputWithContext(context.Context) HorizontalPodAutoscalerSpecOutput
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecArgs struct {
	// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef CrossVersionObjectReferenceInput `pulumi:"scaleTargetRef"`
	// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetCPUUtilizationPercentage"`
}

func (HorizontalPodAutoscalerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return i.ToHorizontalPodAutoscalerSpecOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput)
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput).ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerSpecPtrInput is an input type that accepts HorizontalPodAutoscalerSpecArgs, HorizontalPodAutoscalerSpecPtr and HorizontalPodAutoscalerSpecPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecPtrInput` via:
//
// 		 HorizontalPodAutoscalerSpecArgs{...}
//
//  or:
//
// 		 nil
//
type HorizontalPodAutoscalerSpecPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput
	ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Context) HorizontalPodAutoscalerSpecPtrOutput
}

type horizontalPodAutoscalerSpecPtrType HorizontalPodAutoscalerSpecArgs

func HorizontalPodAutoscalerSpecPtr(v *HorizontalPodAutoscalerSpecArgs) HorizontalPodAutoscalerSpecPtrInput {
	return (*horizontalPodAutoscalerSpecPtrType)(v)
}

func (*horizontalPodAutoscalerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpec {
		return &v
	}).(HorizontalPodAutoscalerSpecPtrOutput)
}

// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecOutput) ScaleTargetRef() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) CrossVersionObjectReference { return v.ScaleTargetRef }).(CrossVersionObjectReferenceOutput)
}

// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *int { return v.TargetCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerSpecPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) Elem() HorizontalPodAutoscalerSpecOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) HorizontalPodAutoscalerSpec { return *v }).(HorizontalPodAutoscalerSpecOutput)
}

// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecPtrOutput) ScaleTargetRef() CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *CrossVersionObjectReference {
		if v == nil {
			return nil
		}
		return &v.ScaleTargetRef
	}).(CrossVersionObjectReferencePtrOutput)
}

// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecPtrOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return v.TargetCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatus struct {
	// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage *int `pulumi:"currentCPUUtilizationPercentage"`
	// current number of replicas of pods managed by this autoscaler.
	CurrentReplicas int `pulumi:"currentReplicas"`
	// desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas int `pulumi:"desiredReplicas"`
	// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime *string `pulumi:"lastScaleTime"`
	// most recent generation observed by this autoscaler.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// HorizontalPodAutoscalerStatusInput is an input type that accepts HorizontalPodAutoscalerStatusArgs and HorizontalPodAutoscalerStatusOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusInput` via:
//
// 		 HorizontalPodAutoscalerStatusArgs{...}
//
type HorizontalPodAutoscalerStatusInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput
	ToHorizontalPodAutoscalerStatusOutputWithContext(context.Context) HorizontalPodAutoscalerStatusOutput
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusArgs struct {
	// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"currentCPUUtilizationPercentage"`
	// current number of replicas of pods managed by this autoscaler.
	CurrentReplicas pulumi.IntInput `pulumi:"currentReplicas"`
	// desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas pulumi.IntInput `pulumi:"desiredReplicas"`
	// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime pulumi.StringPtrInput `pulumi:"lastScaleTime"`
	// most recent generation observed by this autoscaler.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (HorizontalPodAutoscalerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return i.ToHorizontalPodAutoscalerStatusOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput)
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput).ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerStatusPtrInput is an input type that accepts HorizontalPodAutoscalerStatusArgs, HorizontalPodAutoscalerStatusPtr and HorizontalPodAutoscalerStatusPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusPtrInput` via:
//
// 		 HorizontalPodAutoscalerStatusArgs{...}
//
//  or:
//
// 		 nil
//
type HorizontalPodAutoscalerStatusPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput
	ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Context) HorizontalPodAutoscalerStatusPtrOutput
}

type horizontalPodAutoscalerStatusPtrType HorizontalPodAutoscalerStatusArgs

func HorizontalPodAutoscalerStatusPtr(v *HorizontalPodAutoscalerStatusArgs) HorizontalPodAutoscalerStatusPtrInput {
	return (*horizontalPodAutoscalerStatusPtrType)(v)
}

func (*horizontalPodAutoscalerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatus {
		return &v
	}).(HorizontalPodAutoscalerStatusPtrOutput)
}

// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *int { return v.CurrentCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

// current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) CurrentReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.CurrentReplicas }).(pulumi.IntOutput)
}

// desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) DesiredReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.DesiredReplicas }).(pulumi.IntOutput)
}

// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *string { return v.LastScaleTime }).(pulumi.StringPtrOutput)
}

// most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerStatusPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) Elem() HorizontalPodAutoscalerStatusOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) HorizontalPodAutoscalerStatus { return *v }).(HorizontalPodAutoscalerStatusOutput)
}

// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return v.CurrentCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) DesiredReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.DesiredReplicas
	}).(pulumi.IntPtrOutput)
}

// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusPtrOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastScaleTime
	}).(pulumi.StringPtrOutput)
}

// most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Scale represents a scaling request for a resource.
type Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpec `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatus `pulumi:"status"`
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
// 		 ScaleArgs{...}
//
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// Scale represents a scaling request for a resource.
type ScaleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPtrInput `pulumi:"spec"`
	// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPtrInput `pulumi:"status"`
}

func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

// Scale represents a scaling request for a resource.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScaleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScaleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScaleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Scale) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScaleOutput) Spec() ScaleSpecPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleSpec { return v.Spec }).(ScaleSpecPtrOutput)
}

// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScaleOutput) Status() ScaleStatusPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleStatus { return v.Status }).(ScaleStatusPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpec struct {
	// desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecInput is an input type that accepts ScaleSpecArgs and ScaleSpecOutput values.
// You can construct a concrete instance of `ScaleSpecInput` via:
//
// 		 ScaleSpecArgs{...}
//
type ScaleSpecInput interface {
	pulumi.Input

	ToScaleSpecOutput() ScaleSpecOutput
	ToScaleSpecOutputWithContext(context.Context) ScaleSpecOutput
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecArgs struct {
	// desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (i ScaleSpecArgs) ToScaleSpecOutput() ScaleSpecOutput {
	return i.ToScaleSpecOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput)
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput).ToScaleSpecPtrOutputWithContext(ctx)
}

// ScaleSpecPtrInput is an input type that accepts ScaleSpecArgs, ScaleSpecPtr and ScaleSpecPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPtrInput` via:
//
// 		 ScaleSpecArgs{...}
//
//  or:
//
// 		 nil
//
type ScaleSpecPtrInput interface {
	pulumi.Input

	ToScaleSpecPtrOutput() ScaleSpecPtrOutput
	ToScaleSpecPtrOutputWithContext(context.Context) ScaleSpecPtrOutput
}

type scaleSpecPtrType ScaleSpecArgs

func ScaleSpecPtr(v *ScaleSpecArgs) ScaleSpecPtrInput {
	return (*scaleSpecPtrType)(v)
}

func (*scaleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecOutput struct{ *pulumi.OutputState }

func (ScaleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecOutput) ToScaleSpecOutput() ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *ScaleSpec {
		return &v
	}).(ScaleSpecPtrOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) Elem() ScaleSpecOutput {
	return o.ApplyT(func(v *ScaleSpec) ScaleSpec { return *v }).(ScaleSpecOutput)
}

// desired number of instances for the scaled object.
func (o ScaleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatus struct {
	// actual number of observed instances of the scaled object.
	Replicas int `pulumi:"replicas"`
	// label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector *string `pulumi:"selector"`
}

// ScaleStatusInput is an input type that accepts ScaleStatusArgs and ScaleStatusOutput values.
// You can construct a concrete instance of `ScaleStatusInput` via:
//
// 		 ScaleStatusArgs{...}
//
type ScaleStatusInput interface {
	pulumi.Input

	ToScaleStatusOutput() ScaleStatusOutput
	ToScaleStatusOutputWithContext(context.Context) ScaleStatusOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusArgs struct {
	// actual number of observed instances of the scaled object.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ScaleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (i ScaleStatusArgs) ToScaleStatusOutput() ScaleStatusOutput {
	return i.ToScaleStatusOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput)
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput).ToScaleStatusPtrOutputWithContext(ctx)
}

// ScaleStatusPtrInput is an input type that accepts ScaleStatusArgs, ScaleStatusPtr and ScaleStatusPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPtrInput` via:
//
// 		 ScaleStatusArgs{...}
//
//  or:
//
// 		 nil
//
type ScaleStatusPtrInput interface {
	pulumi.Input

	ToScaleStatusPtrOutput() ScaleStatusPtrOutput
	ToScaleStatusPtrOutputWithContext(context.Context) ScaleStatusPtrOutput
}

type scaleStatusPtrType ScaleStatusArgs

func ScaleStatusPtr(v *ScaleStatusArgs) ScaleStatusPtrInput {
	return (*scaleStatusPtrType)(v)
}

func (*scaleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusOutput struct{ *pulumi.OutputState }

func (ScaleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusOutput) ToScaleStatusOutput() ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *ScaleStatus {
		return &v
	}).(ScaleStatusPtrOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) Elem() ScaleStatusOutput {
	return o.ApplyT(func(v *ScaleStatus) ScaleStatus { return *v }).(ScaleStatusOutput)
}

// actual number of observed instances of the scaled object.
func (o ScaleStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
func (o ScaleStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CrossVersionObjectReferenceOutput{})
	pulumi.RegisterOutputType(CrossVersionObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeArrayOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerListTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusPtrOutput{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScaleSpecOutput{})
	pulumi.RegisterOutputType(ScaleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusOutput{})
	pulumi.RegisterOutputType(ScaleStatusPtrOutput{})
}
