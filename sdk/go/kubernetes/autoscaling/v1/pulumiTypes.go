// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReference struct {
	// apiVersion is the API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
}

// CrossVersionObjectReferenceInput is an input type that accepts CrossVersionObjectReferenceArgs and CrossVersionObjectReferenceOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferenceInput` via:
//
//	CrossVersionObjectReferenceArgs{...}
type CrossVersionObjectReferenceInput interface {
	pulumi.Input

	ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput
	ToCrossVersionObjectReferenceOutputWithContext(context.Context) CrossVersionObjectReferenceOutput
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceArgs struct {
	// apiVersion is the API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (CrossVersionObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return i.ToCrossVersionObjectReferenceOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput)
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput).ToCrossVersionObjectReferencePtrOutputWithContext(ctx)
}

// CrossVersionObjectReferencePtrInput is an input type that accepts CrossVersionObjectReferenceArgs, CrossVersionObjectReferencePtr and CrossVersionObjectReferencePtrOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferencePtrInput` via:
//
//	        CrossVersionObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type CrossVersionObjectReferencePtrInput interface {
	pulumi.Input

	ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput
	ToCrossVersionObjectReferencePtrOutputWithContext(context.Context) CrossVersionObjectReferencePtrOutput
}

type crossVersionObjectReferencePtrType CrossVersionObjectReferenceArgs

func CrossVersionObjectReferencePtr(v *CrossVersionObjectReferenceArgs) CrossVersionObjectReferencePtrInput {
	return (*crossVersionObjectReferencePtrType)(v)
}

func (*crossVersionObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePtrOutput)
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrossVersionObjectReference) *CrossVersionObjectReference {
		return &v
	}).(CrossVersionObjectReferencePtrOutput)
}

// apiVersion is the API version of the referent
func (o CrossVersionObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CrossVersionObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Kind }).(pulumi.StringOutput)
}

// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CrossVersionObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Name }).(pulumi.StringOutput)
}

type CrossVersionObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) Elem() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) CrossVersionObjectReference {
		if v != nil {
			return *v
		}
		var ret CrossVersionObjectReference
		return ret
	}).(CrossVersionObjectReferenceOutput)
}

// apiVersion is the API version of the referent
func (o CrossVersionObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CrossVersionObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CrossVersionObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferencePatch struct {
	// apiVersion is the API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// CrossVersionObjectReferencePatchInput is an input type that accepts CrossVersionObjectReferencePatchArgs and CrossVersionObjectReferencePatchOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferencePatchInput` via:
//
//	CrossVersionObjectReferencePatchArgs{...}
type CrossVersionObjectReferencePatchInput interface {
	pulumi.Input

	ToCrossVersionObjectReferencePatchOutput() CrossVersionObjectReferencePatchOutput
	ToCrossVersionObjectReferencePatchOutputWithContext(context.Context) CrossVersionObjectReferencePatchOutput
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferencePatchArgs struct {
	// apiVersion is the API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CrossVersionObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReferencePatch)(nil)).Elem()
}

func (i CrossVersionObjectReferencePatchArgs) ToCrossVersionObjectReferencePatchOutput() CrossVersionObjectReferencePatchOutput {
	return i.ToCrossVersionObjectReferencePatchOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferencePatchArgs) ToCrossVersionObjectReferencePatchOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePatchOutput)
}

func (i CrossVersionObjectReferencePatchArgs) ToCrossVersionObjectReferencePatchPtrOutput() CrossVersionObjectReferencePatchPtrOutput {
	return i.ToCrossVersionObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferencePatchArgs) ToCrossVersionObjectReferencePatchPtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePatchOutput).ToCrossVersionObjectReferencePatchPtrOutputWithContext(ctx)
}

// CrossVersionObjectReferencePatchPtrInput is an input type that accepts CrossVersionObjectReferencePatchArgs, CrossVersionObjectReferencePatchPtr and CrossVersionObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferencePatchPtrInput` via:
//
//	        CrossVersionObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type CrossVersionObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToCrossVersionObjectReferencePatchPtrOutput() CrossVersionObjectReferencePatchPtrOutput
	ToCrossVersionObjectReferencePatchPtrOutputWithContext(context.Context) CrossVersionObjectReferencePatchPtrOutput
}

type crossVersionObjectReferencePatchPtrType CrossVersionObjectReferencePatchArgs

func CrossVersionObjectReferencePatchPtr(v *CrossVersionObjectReferencePatchArgs) CrossVersionObjectReferencePatchPtrInput {
	return (*crossVersionObjectReferencePatchPtrType)(v)
}

func (*crossVersionObjectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReferencePatch)(nil)).Elem()
}

func (i *crossVersionObjectReferencePatchPtrType) ToCrossVersionObjectReferencePatchPtrOutput() CrossVersionObjectReferencePatchPtrOutput {
	return i.ToCrossVersionObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *crossVersionObjectReferencePatchPtrType) ToCrossVersionObjectReferencePatchPtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePatchPtrOutput)
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReferencePatch)(nil)).Elem()
}

func (o CrossVersionObjectReferencePatchOutput) ToCrossVersionObjectReferencePatchOutput() CrossVersionObjectReferencePatchOutput {
	return o
}

func (o CrossVersionObjectReferencePatchOutput) ToCrossVersionObjectReferencePatchOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchOutput {
	return o
}

func (o CrossVersionObjectReferencePatchOutput) ToCrossVersionObjectReferencePatchPtrOutput() CrossVersionObjectReferencePatchPtrOutput {
	return o.ToCrossVersionObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o CrossVersionObjectReferencePatchOutput) ToCrossVersionObjectReferencePatchPtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrossVersionObjectReferencePatch) *CrossVersionObjectReferencePatch {
		return &v
	}).(CrossVersionObjectReferencePatchPtrOutput)
}

// apiVersion is the API version of the referent
func (o CrossVersionObjectReferencePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReferencePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CrossVersionObjectReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CrossVersionObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CrossVersionObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReferencePatch)(nil)).Elem()
}

func (o CrossVersionObjectReferencePatchPtrOutput) ToCrossVersionObjectReferencePatchPtrOutput() CrossVersionObjectReferencePatchPtrOutput {
	return o
}

func (o CrossVersionObjectReferencePatchPtrOutput) ToCrossVersionObjectReferencePatchPtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePatchPtrOutput {
	return o
}

func (o CrossVersionObjectReferencePatchPtrOutput) Elem() CrossVersionObjectReferencePatchOutput {
	return o.ApplyT(func(v *CrossVersionObjectReferencePatch) CrossVersionObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret CrossVersionObjectReferencePatch
		return ret
	}).(CrossVersionObjectReferencePatchOutput)
}

// apiVersion is the API version of the referent
func (o CrossVersionObjectReferencePatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CrossVersionObjectReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CrossVersionObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *HorizontalPodAutoscalerSpec `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status *HorizontalPodAutoscalerStatus `pulumi:"status"`
}

// HorizontalPodAutoscalerTypeInput is an input type that accepts HorizontalPodAutoscalerTypeArgs and HorizontalPodAutoscalerTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeInput` via:
//
//	HorizontalPodAutoscalerTypeArgs{...}
type HorizontalPodAutoscalerTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput
	ToHorizontalPodAutoscalerTypeOutputWithContext(context.Context) HorizontalPodAutoscalerTypeOutput
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec HorizontalPodAutoscalerSpecPtrInput `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status HorizontalPodAutoscalerStatusPtrInput `pulumi:"status"`
}

func (HorizontalPodAutoscalerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return i.ToHorizontalPodAutoscalerTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeOutput)
}

// HorizontalPodAutoscalerTypeArrayInput is an input type that accepts HorizontalPodAutoscalerTypeArray and HorizontalPodAutoscalerTypeArrayOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeArrayInput` via:
//
//	HorizontalPodAutoscalerTypeArray{ HorizontalPodAutoscalerTypeArgs{...} }
type HorizontalPodAutoscalerTypeArrayInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput
	ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Context) HorizontalPodAutoscalerTypeArrayOutput
}

type HorizontalPodAutoscalerTypeArray []HorizontalPodAutoscalerTypeInput

func (HorizontalPodAutoscalerTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return i.ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeArrayOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HorizontalPodAutoscalerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o HorizontalPodAutoscalerTypeOutput) Spec() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerSpec { return v.Spec }).(HorizontalPodAutoscalerSpecPtrOutput)
}

// status is the current information about the autoscaler.
func (o HorizontalPodAutoscalerTypeOutput) Status() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerStatus { return v.Status }).(HorizontalPodAutoscalerStatusPtrOutput)
}

type HorizontalPodAutoscalerTypeArrayOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) Index(i pulumi.IntInput) HorizontalPodAutoscalerTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HorizontalPodAutoscalerType {
		return vs[0].([]HorizontalPodAutoscalerType)[vs[1].(int)]
	}).(HorizontalPodAutoscalerTypeOutput)
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of horizontal pod autoscaler objects.
	Items []HorizontalPodAutoscalerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HorizontalPodAutoscalerListTypeInput is an input type that accepts HorizontalPodAutoscalerListTypeArgs and HorizontalPodAutoscalerListTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerListTypeInput` via:
//
//	HorizontalPodAutoscalerListTypeArgs{...}
type HorizontalPodAutoscalerListTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput
	ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Context) HorizontalPodAutoscalerListTypeOutput
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of horizontal pod autoscaler objects.
	Items HorizontalPodAutoscalerTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HorizontalPodAutoscalerListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return i.ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerListTypeOutput)
}

// list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of horizontal pod autoscaler objects.
func (o HorizontalPodAutoscalerListTypeOutput) Items() HorizontalPodAutoscalerTypeArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) []HorizontalPodAutoscalerType { return v.Items }).(HorizontalPodAutoscalerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o HorizontalPodAutoscalerListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *HorizontalPodAutoscalerSpecPatch `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status *HorizontalPodAutoscalerStatusPatch `pulumi:"status"`
}

// HorizontalPodAutoscalerPatchTypeInput is an input type that accepts HorizontalPodAutoscalerPatchTypeArgs and HorizontalPodAutoscalerPatchTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerPatchTypeInput` via:
//
//	HorizontalPodAutoscalerPatchTypeArgs{...}
type HorizontalPodAutoscalerPatchTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerPatchTypeOutput() HorizontalPodAutoscalerPatchTypeOutput
	ToHorizontalPodAutoscalerPatchTypeOutputWithContext(context.Context) HorizontalPodAutoscalerPatchTypeOutput
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec HorizontalPodAutoscalerSpecPatchPtrInput `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status HorizontalPodAutoscalerStatusPatchPtrInput `pulumi:"status"`
}

func (HorizontalPodAutoscalerPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerPatchType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerPatchTypeArgs) ToHorizontalPodAutoscalerPatchTypeOutput() HorizontalPodAutoscalerPatchTypeOutput {
	return i.ToHorizontalPodAutoscalerPatchTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerPatchTypeArgs) ToHorizontalPodAutoscalerPatchTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerPatchTypeOutput)
}

// configuration of a horizontal pod autoscaler.
type HorizontalPodAutoscalerPatchTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerPatchType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerPatchTypeOutput) ToHorizontalPodAutoscalerPatchTypeOutput() HorizontalPodAutoscalerPatchTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerPatchTypeOutput) ToHorizontalPodAutoscalerPatchTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HorizontalPodAutoscalerPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o HorizontalPodAutoscalerPatchTypeOutput) Spec() HorizontalPodAutoscalerSpecPatchPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerPatchType) *HorizontalPodAutoscalerSpecPatch { return v.Spec }).(HorizontalPodAutoscalerSpecPatchPtrOutput)
}

// status is the current information about the autoscaler.
func (o HorizontalPodAutoscalerPatchTypeOutput) Status() HorizontalPodAutoscalerStatusPatchPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerPatchType) *HorizontalPodAutoscalerStatusPatch { return v.Status }).(HorizontalPodAutoscalerStatusPatchPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpec struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef CrossVersionObjectReference `pulumi:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `pulumi:"targetCPUUtilizationPercentage"`
}

// HorizontalPodAutoscalerSpecInput is an input type that accepts HorizontalPodAutoscalerSpecArgs and HorizontalPodAutoscalerSpecOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecInput` via:
//
//	HorizontalPodAutoscalerSpecArgs{...}
type HorizontalPodAutoscalerSpecInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput
	ToHorizontalPodAutoscalerSpecOutputWithContext(context.Context) HorizontalPodAutoscalerSpecOutput
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecArgs struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef CrossVersionObjectReferenceInput `pulumi:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetCPUUtilizationPercentage"`
}

func (HorizontalPodAutoscalerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return i.ToHorizontalPodAutoscalerSpecOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput)
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput).ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerSpecPtrInput is an input type that accepts HorizontalPodAutoscalerSpecArgs, HorizontalPodAutoscalerSpecPtr and HorizontalPodAutoscalerSpecPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecPtrInput` via:
//
//	        HorizontalPodAutoscalerSpecArgs{...}
//
//	or:
//
//	        nil
type HorizontalPodAutoscalerSpecPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput
	ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Context) HorizontalPodAutoscalerSpecPtrOutput
}

type horizontalPodAutoscalerSpecPtrType HorizontalPodAutoscalerSpecArgs

func HorizontalPodAutoscalerSpecPtr(v *HorizontalPodAutoscalerSpecArgs) HorizontalPodAutoscalerSpecPtrInput {
	return (*horizontalPodAutoscalerSpecPtrType)(v)
}

func (*horizontalPodAutoscalerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpec {
		return &v
	}).(HorizontalPodAutoscalerSpecPtrOutput)
}

// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecOutput) ScaleTargetRef() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) CrossVersionObjectReference { return v.ScaleTargetRef }).(CrossVersionObjectReferenceOutput)
}

// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *int { return v.TargetCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerSpecPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) Elem() HorizontalPodAutoscalerSpecOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) HorizontalPodAutoscalerSpec {
		if v != nil {
			return *v
		}
		var ret HorizontalPodAutoscalerSpec
		return ret
	}).(HorizontalPodAutoscalerSpecOutput)
}

// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecPtrOutput) ScaleTargetRef() CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *CrossVersionObjectReference {
		if v == nil {
			return nil
		}
		return &v.ScaleTargetRef
	}).(CrossVersionObjectReferencePtrOutput)
}

// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecPtrOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return v.TargetCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecPatch struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef *CrossVersionObjectReferencePatch `pulumi:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `pulumi:"targetCPUUtilizationPercentage"`
}

// HorizontalPodAutoscalerSpecPatchInput is an input type that accepts HorizontalPodAutoscalerSpecPatchArgs and HorizontalPodAutoscalerSpecPatchOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecPatchInput` via:
//
//	HorizontalPodAutoscalerSpecPatchArgs{...}
type HorizontalPodAutoscalerSpecPatchInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecPatchOutput() HorizontalPodAutoscalerSpecPatchOutput
	ToHorizontalPodAutoscalerSpecPatchOutputWithContext(context.Context) HorizontalPodAutoscalerSpecPatchOutput
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecPatchArgs struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef CrossVersionObjectReferencePatchPtrInput `pulumi:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetCPUUtilizationPercentage"`
}

func (HorizontalPodAutoscalerSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpecPatch)(nil)).Elem()
}

func (i HorizontalPodAutoscalerSpecPatchArgs) ToHorizontalPodAutoscalerSpecPatchOutput() HorizontalPodAutoscalerSpecPatchOutput {
	return i.ToHorizontalPodAutoscalerSpecPatchOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecPatchArgs) ToHorizontalPodAutoscalerSpecPatchOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPatchOutput)
}

func (i HorizontalPodAutoscalerSpecPatchArgs) ToHorizontalPodAutoscalerSpecPatchPtrOutput() HorizontalPodAutoscalerSpecPatchPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecPatchArgs) ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPatchOutput).ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerSpecPatchPtrInput is an input type that accepts HorizontalPodAutoscalerSpecPatchArgs, HorizontalPodAutoscalerSpecPatchPtr and HorizontalPodAutoscalerSpecPatchPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecPatchPtrInput` via:
//
//	        HorizontalPodAutoscalerSpecPatchArgs{...}
//
//	or:
//
//	        nil
type HorizontalPodAutoscalerSpecPatchPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecPatchPtrOutput() HorizontalPodAutoscalerSpecPatchPtrOutput
	ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(context.Context) HorizontalPodAutoscalerSpecPatchPtrOutput
}

type horizontalPodAutoscalerSpecPatchPtrType HorizontalPodAutoscalerSpecPatchArgs

func HorizontalPodAutoscalerSpecPatchPtr(v *HorizontalPodAutoscalerSpecPatchArgs) HorizontalPodAutoscalerSpecPatchPtrInput {
	return (*horizontalPodAutoscalerSpecPatchPtrType)(v)
}

func (*horizontalPodAutoscalerSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpecPatch)(nil)).Elem()
}

func (i *horizontalPodAutoscalerSpecPatchPtrType) ToHorizontalPodAutoscalerSpecPatchPtrOutput() HorizontalPodAutoscalerSpecPatchPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerSpecPatchPtrType) ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPatchPtrOutput)
}

// specification of a horizontal pod autoscaler.
type HorizontalPodAutoscalerSpecPatchOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpecPatch)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecPatchOutput) ToHorizontalPodAutoscalerSpecPatchOutput() HorizontalPodAutoscalerSpecPatchOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPatchOutput) ToHorizontalPodAutoscalerSpecPatchOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPatchOutput) ToHorizontalPodAutoscalerSpecPatchPtrOutput() HorizontalPodAutoscalerSpecPatchPtrOutput {
	return o.ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerSpecPatchOutput) ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HorizontalPodAutoscalerSpecPatch) *HorizontalPodAutoscalerSpecPatch {
		return &v
	}).(HorizontalPodAutoscalerSpecPatchPtrOutput)
}

// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecPatchOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpecPatch) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecPatchOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpecPatch) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecPatchOutput) ScaleTargetRef() CrossVersionObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpecPatch) *CrossVersionObjectReferencePatch { return v.ScaleTargetRef }).(CrossVersionObjectReferencePatchPtrOutput)
}

// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecPatchOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpecPatch) *int { return v.TargetCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpecPatch)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecPatchPtrOutput) ToHorizontalPodAutoscalerSpecPatchPtrOutput() HorizontalPodAutoscalerSpecPatchPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPatchPtrOutput) ToHorizontalPodAutoscalerSpecPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPatchPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPatchPtrOutput) Elem() HorizontalPodAutoscalerSpecPatchOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpecPatch) HorizontalPodAutoscalerSpecPatch {
		if v != nil {
			return *v
		}
		var ret HorizontalPodAutoscalerSpecPatch
		return ret
	}).(HorizontalPodAutoscalerSpecPatchOutput)
}

// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o HorizontalPodAutoscalerSpecPatchPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecPatchPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o HorizontalPodAutoscalerSpecPatchPtrOutput) ScaleTargetRef() CrossVersionObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpecPatch) *CrossVersionObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.ScaleTargetRef
	}).(CrossVersionObjectReferencePatchPtrOutput)
}

// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o HorizontalPodAutoscalerSpecPatchPtrOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.TargetCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatus struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage *int `pulumi:"currentCPUUtilizationPercentage"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas int `pulumi:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas int `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime *string `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// HorizontalPodAutoscalerStatusInput is an input type that accepts HorizontalPodAutoscalerStatusArgs and HorizontalPodAutoscalerStatusOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusInput` via:
//
//	HorizontalPodAutoscalerStatusArgs{...}
type HorizontalPodAutoscalerStatusInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput
	ToHorizontalPodAutoscalerStatusOutputWithContext(context.Context) HorizontalPodAutoscalerStatusOutput
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusArgs struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"currentCPUUtilizationPercentage"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas pulumi.IntInput `pulumi:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas pulumi.IntInput `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime pulumi.StringPtrInput `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (HorizontalPodAutoscalerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return i.ToHorizontalPodAutoscalerStatusOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput)
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput).ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerStatusPtrInput is an input type that accepts HorizontalPodAutoscalerStatusArgs, HorizontalPodAutoscalerStatusPtr and HorizontalPodAutoscalerStatusPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusPtrInput` via:
//
//	        HorizontalPodAutoscalerStatusArgs{...}
//
//	or:
//
//	        nil
type HorizontalPodAutoscalerStatusPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput
	ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Context) HorizontalPodAutoscalerStatusPtrOutput
}

type horizontalPodAutoscalerStatusPtrType HorizontalPodAutoscalerStatusArgs

func HorizontalPodAutoscalerStatusPtr(v *HorizontalPodAutoscalerStatusArgs) HorizontalPodAutoscalerStatusPtrInput {
	return (*horizontalPodAutoscalerStatusPtrType)(v)
}

func (*horizontalPodAutoscalerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatus {
		return &v
	}).(HorizontalPodAutoscalerStatusPtrOutput)
}

// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *int { return v.CurrentCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

// currentReplicas is the current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) CurrentReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.CurrentReplicas }).(pulumi.IntOutput)
}

// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) DesiredReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.DesiredReplicas }).(pulumi.IntOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *string { return v.LastScaleTime }).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerStatusPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) Elem() HorizontalPodAutoscalerStatusOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) HorizontalPodAutoscalerStatus {
		if v != nil {
			return *v
		}
		var ret HorizontalPodAutoscalerStatus
		return ret
	}).(HorizontalPodAutoscalerStatusOutput)
}

// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return v.CurrentCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// currentReplicas is the current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) DesiredReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.DesiredReplicas
	}).(pulumi.IntPtrOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusPtrOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastScaleTime
	}).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusPatch struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage *int `pulumi:"currentCPUUtilizationPercentage"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas *int `pulumi:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas *int `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime *string `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// HorizontalPodAutoscalerStatusPatchInput is an input type that accepts HorizontalPodAutoscalerStatusPatchArgs and HorizontalPodAutoscalerStatusPatchOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusPatchInput` via:
//
//	HorizontalPodAutoscalerStatusPatchArgs{...}
type HorizontalPodAutoscalerStatusPatchInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusPatchOutput() HorizontalPodAutoscalerStatusPatchOutput
	ToHorizontalPodAutoscalerStatusPatchOutputWithContext(context.Context) HorizontalPodAutoscalerStatusPatchOutput
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusPatchArgs struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"currentCPUUtilizationPercentage"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas pulumi.IntPtrInput `pulumi:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas pulumi.IntPtrInput `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime pulumi.StringPtrInput `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (HorizontalPodAutoscalerStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatusPatch)(nil)).Elem()
}

func (i HorizontalPodAutoscalerStatusPatchArgs) ToHorizontalPodAutoscalerStatusPatchOutput() HorizontalPodAutoscalerStatusPatchOutput {
	return i.ToHorizontalPodAutoscalerStatusPatchOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusPatchArgs) ToHorizontalPodAutoscalerStatusPatchOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPatchOutput)
}

func (i HorizontalPodAutoscalerStatusPatchArgs) ToHorizontalPodAutoscalerStatusPatchPtrOutput() HorizontalPodAutoscalerStatusPatchPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusPatchArgs) ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPatchOutput).ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerStatusPatchPtrInput is an input type that accepts HorizontalPodAutoscalerStatusPatchArgs, HorizontalPodAutoscalerStatusPatchPtr and HorizontalPodAutoscalerStatusPatchPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusPatchPtrInput` via:
//
//	        HorizontalPodAutoscalerStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HorizontalPodAutoscalerStatusPatchPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusPatchPtrOutput() HorizontalPodAutoscalerStatusPatchPtrOutput
	ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(context.Context) HorizontalPodAutoscalerStatusPatchPtrOutput
}

type horizontalPodAutoscalerStatusPatchPtrType HorizontalPodAutoscalerStatusPatchArgs

func HorizontalPodAutoscalerStatusPatchPtr(v *HorizontalPodAutoscalerStatusPatchArgs) HorizontalPodAutoscalerStatusPatchPtrInput {
	return (*horizontalPodAutoscalerStatusPatchPtrType)(v)
}

func (*horizontalPodAutoscalerStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatusPatch)(nil)).Elem()
}

func (i *horizontalPodAutoscalerStatusPatchPtrType) ToHorizontalPodAutoscalerStatusPatchPtrOutput() HorizontalPodAutoscalerStatusPatchPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerStatusPatchPtrType) ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPatchPtrOutput)
}

// current status of a horizontal pod autoscaler
type HorizontalPodAutoscalerStatusPatchOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatusPatch)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusPatchOutput) ToHorizontalPodAutoscalerStatusPatchOutput() HorizontalPodAutoscalerStatusPatchOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPatchOutput) ToHorizontalPodAutoscalerStatusPatchOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPatchOutput) ToHorizontalPodAutoscalerStatusPatchPtrOutput() HorizontalPodAutoscalerStatusPatchPtrOutput {
	return o.ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerStatusPatchOutput) ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HorizontalPodAutoscalerStatusPatch) *HorizontalPodAutoscalerStatusPatch {
		return &v
	}).(HorizontalPodAutoscalerStatusPatchPtrOutput)
}

// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusPatchOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatusPatch) *int { return v.CurrentCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

// currentReplicas is the current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatusPatch) *int { return v.CurrentReplicas }).(pulumi.IntPtrOutput)
}

// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchOutput) DesiredReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatusPatch) *int { return v.DesiredReplicas }).(pulumi.IntPtrOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusPatchOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatusPatch) *string { return v.LastScaleTime }).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatusPatch)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusPatchPtrOutput) ToHorizontalPodAutoscalerStatusPatchPtrOutput() HorizontalPodAutoscalerStatusPatchPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPatchPtrOutput) ToHorizontalPodAutoscalerStatusPatchPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPatchPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPatchPtrOutput) Elem() HorizontalPodAutoscalerStatusPatchOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) HorizontalPodAutoscalerStatusPatch {
		if v != nil {
			return *v
		}
		var ret HorizontalPodAutoscalerStatusPatch
		return ret
	}).(HorizontalPodAutoscalerStatusPatchOutput)
}

// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (o HorizontalPodAutoscalerStatusPatchPtrOutput) CurrentCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.CurrentCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// currentReplicas is the current number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchPtrOutput) DesiredReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.DesiredReplicas
	}).(pulumi.IntPtrOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusPatchPtrOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastScaleTime
	}).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Scale represents a scaling request for a resource.
type Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpec `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatus `pulumi:"status"`
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
//	ScaleArgs{...}
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// Scale represents a scaling request for a resource.
type ScaleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPtrInput `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPtrInput `pulumi:"status"`
}

func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

// Scale represents a scaling request for a resource.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScaleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScaleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScaleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Scale) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScaleOutput) Spec() ScaleSpecPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleSpec { return v.Spec }).(ScaleSpecPtrOutput)
}

// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScaleOutput) Status() ScaleStatusPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleStatus { return v.Status }).(ScaleStatusPtrOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpecPatch `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatusPatch `pulumi:"status"`
}

// ScalePatchInput is an input type that accepts ScalePatchArgs and ScalePatchOutput values.
// You can construct a concrete instance of `ScalePatchInput` via:
//
//	ScalePatchArgs{...}
type ScalePatchInput interface {
	pulumi.Input

	ToScalePatchOutput() ScalePatchOutput
	ToScalePatchOutputWithContext(context.Context) ScalePatchOutput
}

// Scale represents a scaling request for a resource.
type ScalePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPatchPtrInput `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPatchPtrInput `pulumi:"status"`
}

func (ScalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (i ScalePatchArgs) ToScalePatchOutput() ScalePatchOutput {
	return i.ToScalePatchOutputWithContext(context.Background())
}

func (i ScalePatchArgs) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalePatchOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatchOutput struct{ *pulumi.OutputState }

func (ScalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (o ScalePatchOutput) ToScalePatchOutput() ScalePatchOutput {
	return o
}

func (o ScalePatchOutput) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScalePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScalePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScalePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScalePatchOutput) Spec() ScaleSpecPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleSpecPatch { return v.Spec }).(ScaleSpecPatchPtrOutput)
}

// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScalePatchOutput) Status() ScaleStatusPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleStatusPatch { return v.Status }).(ScaleStatusPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpec struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecInput is an input type that accepts ScaleSpecArgs and ScaleSpecOutput values.
// You can construct a concrete instance of `ScaleSpecInput` via:
//
//	ScaleSpecArgs{...}
type ScaleSpecInput interface {
	pulumi.Input

	ToScaleSpecOutput() ScaleSpecOutput
	ToScaleSpecOutputWithContext(context.Context) ScaleSpecOutput
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecArgs struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (i ScaleSpecArgs) ToScaleSpecOutput() ScaleSpecOutput {
	return i.ToScaleSpecOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput)
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput).ToScaleSpecPtrOutputWithContext(ctx)
}

// ScaleSpecPtrInput is an input type that accepts ScaleSpecArgs, ScaleSpecPtr and ScaleSpecPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPtrInput` via:
//
//	        ScaleSpecArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPtrInput interface {
	pulumi.Input

	ToScaleSpecPtrOutput() ScaleSpecPtrOutput
	ToScaleSpecPtrOutputWithContext(context.Context) ScaleSpecPtrOutput
}

type scaleSpecPtrType ScaleSpecArgs

func ScaleSpecPtr(v *ScaleSpecArgs) ScaleSpecPtrInput {
	return (*scaleSpecPtrType)(v)
}

func (*scaleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecOutput struct{ *pulumi.OutputState }

func (ScaleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecOutput) ToScaleSpecOutput() ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpec) *ScaleSpec {
		return &v
	}).(ScaleSpecPtrOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) Elem() ScaleSpecOutput {
	return o.ApplyT(func(v *ScaleSpec) ScaleSpec {
		if v != nil {
			return *v
		}
		var ret ScaleSpec
		return ret
	}).(ScaleSpecOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatch struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecPatchInput is an input type that accepts ScaleSpecPatchArgs and ScaleSpecPatchOutput values.
// You can construct a concrete instance of `ScaleSpecPatchInput` via:
//
//	ScaleSpecPatchArgs{...}
type ScaleSpecPatchInput interface {
	pulumi.Input

	ToScaleSpecPatchOutput() ScaleSpecPatchOutput
	ToScaleSpecPatchOutputWithContext(context.Context) ScaleSpecPatchOutput
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatchArgs struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return i.ToScaleSpecPatchOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput)
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput).ToScaleSpecPatchPtrOutputWithContext(ctx)
}

// ScaleSpecPatchPtrInput is an input type that accepts ScaleSpecPatchArgs, ScaleSpecPatchPtr and ScaleSpecPatchPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPatchPtrInput` via:
//
//	        ScaleSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPatchPtrInput interface {
	pulumi.Input

	ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput
	ToScaleSpecPatchPtrOutputWithContext(context.Context) ScaleSpecPatchPtrOutput
}

type scaleSpecPatchPtrType ScaleSpecPatchArgs

func ScaleSpecPatchPtr(v *ScaleSpecPatchArgs) ScaleSpecPatchPtrInput {
	return (*scaleSpecPatchPtrType)(v)
}

func (*scaleSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatchOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpecPatch) *ScaleSpecPatch {
		return &v
	}).(ScaleSpecPatchPtrOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) Elem() ScaleSpecPatchOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) ScaleSpecPatch {
		if v != nil {
			return *v
		}
		var ret ScaleSpecPatch
		return ret
	}).(ScaleSpecPatchOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatus struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas int `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `pulumi:"selector"`
}

// ScaleStatusInput is an input type that accepts ScaleStatusArgs and ScaleStatusOutput values.
// You can construct a concrete instance of `ScaleStatusInput` via:
//
//	ScaleStatusArgs{...}
type ScaleStatusInput interface {
	pulumi.Input

	ToScaleStatusOutput() ScaleStatusOutput
	ToScaleStatusOutputWithContext(context.Context) ScaleStatusOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusArgs struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ScaleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (i ScaleStatusArgs) ToScaleStatusOutput() ScaleStatusOutput {
	return i.ToScaleStatusOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput)
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput).ToScaleStatusPtrOutputWithContext(ctx)
}

// ScaleStatusPtrInput is an input type that accepts ScaleStatusArgs, ScaleStatusPtr and ScaleStatusPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPtrInput` via:
//
//	        ScaleStatusArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPtrInput interface {
	pulumi.Input

	ToScaleStatusPtrOutput() ScaleStatusPtrOutput
	ToScaleStatusPtrOutputWithContext(context.Context) ScaleStatusPtrOutput
}

type scaleStatusPtrType ScaleStatusArgs

func ScaleStatusPtr(v *ScaleStatusArgs) ScaleStatusPtrInput {
	return (*scaleStatusPtrType)(v)
}

func (*scaleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusOutput struct{ *pulumi.OutputState }

func (ScaleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusOutput) ToScaleStatusOutput() ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatus) *ScaleStatus {
		return &v
	}).(ScaleStatusPtrOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) Elem() ScaleStatusOutput {
	return o.ApplyT(func(v *ScaleStatus) ScaleStatus {
		if v != nil {
			return *v
		}
		var ret ScaleStatus
		return ret
	}).(ScaleStatusOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatch struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas *int `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `pulumi:"selector"`
}

// ScaleStatusPatchInput is an input type that accepts ScaleStatusPatchArgs and ScaleStatusPatchOutput values.
// You can construct a concrete instance of `ScaleStatusPatchInput` via:
//
//	ScaleStatusPatchArgs{...}
type ScaleStatusPatchInput interface {
	pulumi.Input

	ToScaleStatusPatchOutput() ScaleStatusPatchOutput
	ToScaleStatusPatchOutputWithContext(context.Context) ScaleStatusPatchOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchArgs struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ScaleStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return i.ToScaleStatusPatchOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput)
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput).ToScaleStatusPatchPtrOutputWithContext(ctx)
}

// ScaleStatusPatchPtrInput is an input type that accepts ScaleStatusPatchArgs, ScaleStatusPatchPtr and ScaleStatusPatchPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPatchPtrInput` via:
//
//	        ScaleStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPatchPtrInput interface {
	pulumi.Input

	ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput
	ToScaleStatusPatchPtrOutputWithContext(context.Context) ScaleStatusPatchPtrOutput
}

type scaleStatusPatchPtrType ScaleStatusPatchArgs

func ScaleStatusPatchPtr(v *ScaleStatusPatchArgs) ScaleStatusPatchPtrInput {
	return (*scaleStatusPatchPtrType)(v)
}

func (*scaleStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatusPatch) *ScaleStatusPatch {
		return &v
	}).(ScaleStatusPatchPtrOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPatchOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) Elem() ScaleStatusPatchOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) ScaleStatusPatch {
		if v != nil {
			return *v
		}
		var ret ScaleStatusPatch
		return ret
	}).(ScaleStatusPatchOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPatchPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrossVersionObjectReferenceInput)(nil)).Elem(), CrossVersionObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossVersionObjectReferencePtrInput)(nil)).Elem(), CrossVersionObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossVersionObjectReferencePatchInput)(nil)).Elem(), CrossVersionObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossVersionObjectReferencePatchPtrInput)(nil)).Elem(), CrossVersionObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerTypeInput)(nil)).Elem(), HorizontalPodAutoscalerTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerTypeArrayInput)(nil)).Elem(), HorizontalPodAutoscalerTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerListTypeInput)(nil)).Elem(), HorizontalPodAutoscalerListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerPatchTypeInput)(nil)).Elem(), HorizontalPodAutoscalerPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerSpecInput)(nil)).Elem(), HorizontalPodAutoscalerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerSpecPtrInput)(nil)).Elem(), HorizontalPodAutoscalerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerSpecPatchInput)(nil)).Elem(), HorizontalPodAutoscalerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerSpecPatchPtrInput)(nil)).Elem(), HorizontalPodAutoscalerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerStatusInput)(nil)).Elem(), HorizontalPodAutoscalerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerStatusPtrInput)(nil)).Elem(), HorizontalPodAutoscalerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerStatusPatchInput)(nil)).Elem(), HorizontalPodAutoscalerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalerStatusPatchPtrInput)(nil)).Elem(), HorizontalPodAutoscalerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleInput)(nil)).Elem(), ScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalePatchInput)(nil)).Elem(), ScalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPtrInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchPtrInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPtrInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchPtrInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterOutputType(CrossVersionObjectReferenceOutput{})
	pulumi.RegisterOutputType(CrossVersionObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(CrossVersionObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(CrossVersionObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeArrayOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerListTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerPatchTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecPatchOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusPatchOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScalePatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecOutput{})
	pulumi.RegisterOutputType(ScaleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusOutput{})
	pulumi.RegisterOutputType(ScaleStatusPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchPtrOutput{})
}
