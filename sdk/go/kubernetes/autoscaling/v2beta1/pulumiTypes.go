// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReference struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind string `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`
}

// CrossVersionObjectReferenceInput is an input type that accepts CrossVersionObjectReferenceArgs and CrossVersionObjectReferenceOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferenceInput` via:
//
//          CrossVersionObjectReferenceArgs{...}
type CrossVersionObjectReferenceInput interface {
	pulumi.Input

	ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput
	ToCrossVersionObjectReferenceOutputWithContext(context.Context) CrossVersionObjectReferenceOutput
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (CrossVersionObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return i.ToCrossVersionObjectReferenceOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput)
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i CrossVersionObjectReferenceArgs) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferenceOutput).ToCrossVersionObjectReferencePtrOutputWithContext(ctx)
}

// CrossVersionObjectReferencePtrInput is an input type that accepts CrossVersionObjectReferenceArgs, CrossVersionObjectReferencePtr and CrossVersionObjectReferencePtrOutput values.
// You can construct a concrete instance of `CrossVersionObjectReferencePtrInput` via:
//
//          CrossVersionObjectReferenceArgs{...}
//
//  or:
//
//          nil
type CrossVersionObjectReferencePtrInput interface {
	pulumi.Input

	ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput
	ToCrossVersionObjectReferencePtrOutputWithContext(context.Context) CrossVersionObjectReferencePtrOutput
}

type crossVersionObjectReferencePtrType CrossVersionObjectReferenceArgs

func CrossVersionObjectReferencePtr(v *CrossVersionObjectReferenceArgs) CrossVersionObjectReferencePtrInput {
	return (*crossVersionObjectReferencePtrType)(v)
}

func (*crossVersionObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return i.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (i *crossVersionObjectReferencePtrType) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossVersionObjectReferencePtrOutput)
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReferenceOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutput() CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferenceOutputWithContext(ctx context.Context) CrossVersionObjectReferenceOutput {
	return o
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o.ToCrossVersionObjectReferencePtrOutputWithContext(context.Background())
}

func (o CrossVersionObjectReferenceOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) *CrossVersionObjectReference {
		return &v
	}).(CrossVersionObjectReferencePtrOutput)
}

// API version of the referent
func (o CrossVersionObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o CrossVersionObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o CrossVersionObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CrossVersionObjectReference) string { return v.Name }).(pulumi.StringOutput)
}

type CrossVersionObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (CrossVersionObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossVersionObjectReference)(nil)).Elem()
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutput() CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) ToCrossVersionObjectReferencePtrOutputWithContext(ctx context.Context) CrossVersionObjectReferencePtrOutput {
	return o
}

func (o CrossVersionObjectReferencePtrOutput) Elem() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) CrossVersionObjectReference { return *v }).(CrossVersionObjectReferenceOutput)
}

// API version of the referent
func (o CrossVersionObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o CrossVersionObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o CrossVersionObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossVersionObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
type ExternalMetricSource struct {
	// metricName is the name of the metric in question.
	MetricName string `pulumi:"metricName"`
	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector *metav1.LabelSelector `pulumi:"metricSelector"`
	// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
	TargetAverageValue *string `pulumi:"targetAverageValue"`
	// targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
	TargetValue *string `pulumi:"targetValue"`
}

// ExternalMetricSourceInput is an input type that accepts ExternalMetricSourceArgs and ExternalMetricSourceOutput values.
// You can construct a concrete instance of `ExternalMetricSourceInput` via:
//
//          ExternalMetricSourceArgs{...}
type ExternalMetricSourceInput interface {
	pulumi.Input

	ToExternalMetricSourceOutput() ExternalMetricSourceOutput
	ToExternalMetricSourceOutputWithContext(context.Context) ExternalMetricSourceOutput
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
type ExternalMetricSourceArgs struct {
	// metricName is the name of the metric in question.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector metav1.LabelSelectorPtrInput `pulumi:"metricSelector"`
	// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
	TargetAverageValue pulumi.StringPtrInput `pulumi:"targetAverageValue"`
	// targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
	TargetValue pulumi.StringPtrInput `pulumi:"targetValue"`
}

func (ExternalMetricSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalMetricSource)(nil)).Elem()
}

func (i ExternalMetricSourceArgs) ToExternalMetricSourceOutput() ExternalMetricSourceOutput {
	return i.ToExternalMetricSourceOutputWithContext(context.Background())
}

func (i ExternalMetricSourceArgs) ToExternalMetricSourceOutputWithContext(ctx context.Context) ExternalMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricSourceOutput)
}

func (i ExternalMetricSourceArgs) ToExternalMetricSourcePtrOutput() ExternalMetricSourcePtrOutput {
	return i.ToExternalMetricSourcePtrOutputWithContext(context.Background())
}

func (i ExternalMetricSourceArgs) ToExternalMetricSourcePtrOutputWithContext(ctx context.Context) ExternalMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricSourceOutput).ToExternalMetricSourcePtrOutputWithContext(ctx)
}

// ExternalMetricSourcePtrInput is an input type that accepts ExternalMetricSourceArgs, ExternalMetricSourcePtr and ExternalMetricSourcePtrOutput values.
// You can construct a concrete instance of `ExternalMetricSourcePtrInput` via:
//
//          ExternalMetricSourceArgs{...}
//
//  or:
//
//          nil
type ExternalMetricSourcePtrInput interface {
	pulumi.Input

	ToExternalMetricSourcePtrOutput() ExternalMetricSourcePtrOutput
	ToExternalMetricSourcePtrOutputWithContext(context.Context) ExternalMetricSourcePtrOutput
}

type externalMetricSourcePtrType ExternalMetricSourceArgs

func ExternalMetricSourcePtr(v *ExternalMetricSourceArgs) ExternalMetricSourcePtrInput {
	return (*externalMetricSourcePtrType)(v)
}

func (*externalMetricSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMetricSource)(nil)).Elem()
}

func (i *externalMetricSourcePtrType) ToExternalMetricSourcePtrOutput() ExternalMetricSourcePtrOutput {
	return i.ToExternalMetricSourcePtrOutputWithContext(context.Background())
}

func (i *externalMetricSourcePtrType) ToExternalMetricSourcePtrOutputWithContext(ctx context.Context) ExternalMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricSourcePtrOutput)
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
type ExternalMetricSourceOutput struct{ *pulumi.OutputState }

func (ExternalMetricSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalMetricSource)(nil)).Elem()
}

func (o ExternalMetricSourceOutput) ToExternalMetricSourceOutput() ExternalMetricSourceOutput {
	return o
}

func (o ExternalMetricSourceOutput) ToExternalMetricSourceOutputWithContext(ctx context.Context) ExternalMetricSourceOutput {
	return o
}

func (o ExternalMetricSourceOutput) ToExternalMetricSourcePtrOutput() ExternalMetricSourcePtrOutput {
	return o.ToExternalMetricSourcePtrOutputWithContext(context.Background())
}

func (o ExternalMetricSourceOutput) ToExternalMetricSourcePtrOutputWithContext(ctx context.Context) ExternalMetricSourcePtrOutput {
	return o.ApplyT(func(v ExternalMetricSource) *ExternalMetricSource {
		return &v
	}).(ExternalMetricSourcePtrOutput)
}

// metricName is the name of the metric in question.
func (o ExternalMetricSourceOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalMetricSource) string { return v.MetricName }).(pulumi.StringOutput)
}

// metricSelector is used to identify a specific time series within a given metric.
func (o ExternalMetricSourceOutput) MetricSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ExternalMetricSource) *metav1.LabelSelector { return v.MetricSelector }).(metav1.LabelSelectorPtrOutput)
}

// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
func (o ExternalMetricSourceOutput) TargetAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalMetricSource) *string { return v.TargetAverageValue }).(pulumi.StringPtrOutput)
}

// targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
func (o ExternalMetricSourceOutput) TargetValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalMetricSource) *string { return v.TargetValue }).(pulumi.StringPtrOutput)
}

type ExternalMetricSourcePtrOutput struct{ *pulumi.OutputState }

func (ExternalMetricSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMetricSource)(nil)).Elem()
}

func (o ExternalMetricSourcePtrOutput) ToExternalMetricSourcePtrOutput() ExternalMetricSourcePtrOutput {
	return o
}

func (o ExternalMetricSourcePtrOutput) ToExternalMetricSourcePtrOutputWithContext(ctx context.Context) ExternalMetricSourcePtrOutput {
	return o
}

func (o ExternalMetricSourcePtrOutput) Elem() ExternalMetricSourceOutput {
	return o.ApplyT(func(v *ExternalMetricSource) ExternalMetricSource { return *v }).(ExternalMetricSourceOutput)
}

// metricName is the name of the metric in question.
func (o ExternalMetricSourcePtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// metricSelector is used to identify a specific time series within a given metric.
func (o ExternalMetricSourcePtrOutput) MetricSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *ExternalMetricSource) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.MetricSelector
	}).(metav1.LabelSelectorPtrOutput)
}

// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
func (o ExternalMetricSourcePtrOutput) TargetAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetAverageValue
	}).(pulumi.StringPtrOutput)
}

// targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
func (o ExternalMetricSourcePtrOutput) TargetValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetValue
	}).(pulumi.StringPtrOutput)
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
type ExternalMetricStatus struct {
	// currentAverageValue is the current value of metric averaged over autoscaled pods.
	CurrentAverageValue *string `pulumi:"currentAverageValue"`
	// currentValue is the current value of the metric (as a quantity)
	CurrentValue string `pulumi:"currentValue"`
	// metricName is the name of a metric used for autoscaling in metric system.
	MetricName string `pulumi:"metricName"`
	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector *metav1.LabelSelector `pulumi:"metricSelector"`
}

// ExternalMetricStatusInput is an input type that accepts ExternalMetricStatusArgs and ExternalMetricStatusOutput values.
// You can construct a concrete instance of `ExternalMetricStatusInput` via:
//
//          ExternalMetricStatusArgs{...}
type ExternalMetricStatusInput interface {
	pulumi.Input

	ToExternalMetricStatusOutput() ExternalMetricStatusOutput
	ToExternalMetricStatusOutputWithContext(context.Context) ExternalMetricStatusOutput
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
type ExternalMetricStatusArgs struct {
	// currentAverageValue is the current value of metric averaged over autoscaled pods.
	CurrentAverageValue pulumi.StringPtrInput `pulumi:"currentAverageValue"`
	// currentValue is the current value of the metric (as a quantity)
	CurrentValue pulumi.StringInput `pulumi:"currentValue"`
	// metricName is the name of a metric used for autoscaling in metric system.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// metricSelector is used to identify a specific time series within a given metric.
	MetricSelector metav1.LabelSelectorPtrInput `pulumi:"metricSelector"`
}

func (ExternalMetricStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalMetricStatus)(nil)).Elem()
}

func (i ExternalMetricStatusArgs) ToExternalMetricStatusOutput() ExternalMetricStatusOutput {
	return i.ToExternalMetricStatusOutputWithContext(context.Background())
}

func (i ExternalMetricStatusArgs) ToExternalMetricStatusOutputWithContext(ctx context.Context) ExternalMetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricStatusOutput)
}

func (i ExternalMetricStatusArgs) ToExternalMetricStatusPtrOutput() ExternalMetricStatusPtrOutput {
	return i.ToExternalMetricStatusPtrOutputWithContext(context.Background())
}

func (i ExternalMetricStatusArgs) ToExternalMetricStatusPtrOutputWithContext(ctx context.Context) ExternalMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricStatusOutput).ToExternalMetricStatusPtrOutputWithContext(ctx)
}

// ExternalMetricStatusPtrInput is an input type that accepts ExternalMetricStatusArgs, ExternalMetricStatusPtr and ExternalMetricStatusPtrOutput values.
// You can construct a concrete instance of `ExternalMetricStatusPtrInput` via:
//
//          ExternalMetricStatusArgs{...}
//
//  or:
//
//          nil
type ExternalMetricStatusPtrInput interface {
	pulumi.Input

	ToExternalMetricStatusPtrOutput() ExternalMetricStatusPtrOutput
	ToExternalMetricStatusPtrOutputWithContext(context.Context) ExternalMetricStatusPtrOutput
}

type externalMetricStatusPtrType ExternalMetricStatusArgs

func ExternalMetricStatusPtr(v *ExternalMetricStatusArgs) ExternalMetricStatusPtrInput {
	return (*externalMetricStatusPtrType)(v)
}

func (*externalMetricStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMetricStatus)(nil)).Elem()
}

func (i *externalMetricStatusPtrType) ToExternalMetricStatusPtrOutput() ExternalMetricStatusPtrOutput {
	return i.ToExternalMetricStatusPtrOutputWithContext(context.Background())
}

func (i *externalMetricStatusPtrType) ToExternalMetricStatusPtrOutputWithContext(ctx context.Context) ExternalMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMetricStatusPtrOutput)
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
type ExternalMetricStatusOutput struct{ *pulumi.OutputState }

func (ExternalMetricStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalMetricStatus)(nil)).Elem()
}

func (o ExternalMetricStatusOutput) ToExternalMetricStatusOutput() ExternalMetricStatusOutput {
	return o
}

func (o ExternalMetricStatusOutput) ToExternalMetricStatusOutputWithContext(ctx context.Context) ExternalMetricStatusOutput {
	return o
}

func (o ExternalMetricStatusOutput) ToExternalMetricStatusPtrOutput() ExternalMetricStatusPtrOutput {
	return o.ToExternalMetricStatusPtrOutputWithContext(context.Background())
}

func (o ExternalMetricStatusOutput) ToExternalMetricStatusPtrOutputWithContext(ctx context.Context) ExternalMetricStatusPtrOutput {
	return o.ApplyT(func(v ExternalMetricStatus) *ExternalMetricStatus {
		return &v
	}).(ExternalMetricStatusPtrOutput)
}

// currentAverageValue is the current value of metric averaged over autoscaled pods.
func (o ExternalMetricStatusOutput) CurrentAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalMetricStatus) *string { return v.CurrentAverageValue }).(pulumi.StringPtrOutput)
}

// currentValue is the current value of the metric (as a quantity)
func (o ExternalMetricStatusOutput) CurrentValue() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalMetricStatus) string { return v.CurrentValue }).(pulumi.StringOutput)
}

// metricName is the name of a metric used for autoscaling in metric system.
func (o ExternalMetricStatusOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalMetricStatus) string { return v.MetricName }).(pulumi.StringOutput)
}

// metricSelector is used to identify a specific time series within a given metric.
func (o ExternalMetricStatusOutput) MetricSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ExternalMetricStatus) *metav1.LabelSelector { return v.MetricSelector }).(metav1.LabelSelectorPtrOutput)
}

type ExternalMetricStatusPtrOutput struct{ *pulumi.OutputState }

func (ExternalMetricStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMetricStatus)(nil)).Elem()
}

func (o ExternalMetricStatusPtrOutput) ToExternalMetricStatusPtrOutput() ExternalMetricStatusPtrOutput {
	return o
}

func (o ExternalMetricStatusPtrOutput) ToExternalMetricStatusPtrOutputWithContext(ctx context.Context) ExternalMetricStatusPtrOutput {
	return o
}

func (o ExternalMetricStatusPtrOutput) Elem() ExternalMetricStatusOutput {
	return o.ApplyT(func(v *ExternalMetricStatus) ExternalMetricStatus { return *v }).(ExternalMetricStatusOutput)
}

// currentAverageValue is the current value of metric averaged over autoscaled pods.
func (o ExternalMetricStatusPtrOutput) CurrentAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricStatus) *string {
		if v == nil {
			return nil
		}
		return v.CurrentAverageValue
	}).(pulumi.StringPtrOutput)
}

// currentValue is the current value of the metric (as a quantity)
func (o ExternalMetricStatusPtrOutput) CurrentValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentValue
	}).(pulumi.StringPtrOutput)
}

// metricName is the name of a metric used for autoscaling in metric system.
func (o ExternalMetricStatusPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// metricSelector is used to identify a specific time series within a given metric.
func (o ExternalMetricStatusPtrOutput) MetricSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *ExternalMetricStatus) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.MetricSelector
	}).(metav1.LabelSelectorPtrOutput)
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
type HorizontalPodAutoscalerType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *HorizontalPodAutoscalerSpec `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status *HorizontalPodAutoscalerStatus `pulumi:"status"`
}

// HorizontalPodAutoscalerTypeInput is an input type that accepts HorizontalPodAutoscalerTypeArgs and HorizontalPodAutoscalerTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeInput` via:
//
//          HorizontalPodAutoscalerTypeArgs{...}
type HorizontalPodAutoscalerTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput
	ToHorizontalPodAutoscalerTypeOutputWithContext(context.Context) HorizontalPodAutoscalerTypeOutput
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
type HorizontalPodAutoscalerTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec HorizontalPodAutoscalerSpecPtrInput `pulumi:"spec"`
	// status is the current information about the autoscaler.
	Status HorizontalPodAutoscalerStatusPtrInput `pulumi:"status"`
}

func (HorizontalPodAutoscalerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return i.ToHorizontalPodAutoscalerTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArgs) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeOutput)
}

// HorizontalPodAutoscalerTypeArrayInput is an input type that accepts HorizontalPodAutoscalerTypeArray and HorizontalPodAutoscalerTypeArrayOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerTypeArrayInput` via:
//
//          HorizontalPodAutoscalerTypeArray{ HorizontalPodAutoscalerTypeArgs{...} }
type HorizontalPodAutoscalerTypeArrayInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput
	ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Context) HorizontalPodAutoscalerTypeArrayOutput
}

type HorizontalPodAutoscalerTypeArray []HorizontalPodAutoscalerTypeInput

func (HorizontalPodAutoscalerTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return i.ToHorizontalPodAutoscalerTypeArrayOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerTypeArray) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerTypeArrayOutput)
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
type HorizontalPodAutoscalerTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutput() HorizontalPodAutoscalerTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeOutput) ToHorizontalPodAutoscalerTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HorizontalPodAutoscalerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o HorizontalPodAutoscalerTypeOutput) Spec() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerSpec { return v.Spec }).(HorizontalPodAutoscalerSpecPtrOutput)
}

// status is the current information about the autoscaler.
func (o HorizontalPodAutoscalerTypeOutput) Status() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerType) *HorizontalPodAutoscalerStatus { return v.Status }).(HorizontalPodAutoscalerStatusPtrOutput)
}

type HorizontalPodAutoscalerTypeArrayOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutput() HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) ToHorizontalPodAutoscalerTypeArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerTypeArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerTypeArrayOutput) Index(i pulumi.IntInput) HorizontalPodAutoscalerTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HorizontalPodAutoscalerType {
		return vs[0].([]HorizontalPodAutoscalerType)[vs[1].(int)]
	}).(HorizontalPodAutoscalerTypeOutput)
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
type HorizontalPodAutoscalerCondition struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human-readable explanation containing details about the transition
	Message *string `pulumi:"message"`
	// reason is the reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// status is the status of the condition (True, False, Unknown)
	Status string `pulumi:"status"`
	// type describes the current condition
	Type string `pulumi:"type"`
}

// HorizontalPodAutoscalerConditionInput is an input type that accepts HorizontalPodAutoscalerConditionArgs and HorizontalPodAutoscalerConditionOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerConditionInput` via:
//
//          HorizontalPodAutoscalerConditionArgs{...}
type HorizontalPodAutoscalerConditionInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerConditionOutput() HorizontalPodAutoscalerConditionOutput
	ToHorizontalPodAutoscalerConditionOutputWithContext(context.Context) HorizontalPodAutoscalerConditionOutput
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
type HorizontalPodAutoscalerConditionArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human-readable explanation containing details about the transition
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is the reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status is the status of the condition (True, False, Unknown)
	Status pulumi.StringInput `pulumi:"status"`
	// type describes the current condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (HorizontalPodAutoscalerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerCondition)(nil)).Elem()
}

func (i HorizontalPodAutoscalerConditionArgs) ToHorizontalPodAutoscalerConditionOutput() HorizontalPodAutoscalerConditionOutput {
	return i.ToHorizontalPodAutoscalerConditionOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerConditionArgs) ToHorizontalPodAutoscalerConditionOutputWithContext(ctx context.Context) HorizontalPodAutoscalerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerConditionOutput)
}

// HorizontalPodAutoscalerConditionArrayInput is an input type that accepts HorizontalPodAutoscalerConditionArray and HorizontalPodAutoscalerConditionArrayOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerConditionArrayInput` via:
//
//          HorizontalPodAutoscalerConditionArray{ HorizontalPodAutoscalerConditionArgs{...} }
type HorizontalPodAutoscalerConditionArrayInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerConditionArrayOutput() HorizontalPodAutoscalerConditionArrayOutput
	ToHorizontalPodAutoscalerConditionArrayOutputWithContext(context.Context) HorizontalPodAutoscalerConditionArrayOutput
}

type HorizontalPodAutoscalerConditionArray []HorizontalPodAutoscalerConditionInput

func (HorizontalPodAutoscalerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerCondition)(nil)).Elem()
}

func (i HorizontalPodAutoscalerConditionArray) ToHorizontalPodAutoscalerConditionArrayOutput() HorizontalPodAutoscalerConditionArrayOutput {
	return i.ToHorizontalPodAutoscalerConditionArrayOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerConditionArray) ToHorizontalPodAutoscalerConditionArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerConditionArrayOutput)
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
type HorizontalPodAutoscalerConditionOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerCondition)(nil)).Elem()
}

func (o HorizontalPodAutoscalerConditionOutput) ToHorizontalPodAutoscalerConditionOutput() HorizontalPodAutoscalerConditionOutput {
	return o
}

func (o HorizontalPodAutoscalerConditionOutput) ToHorizontalPodAutoscalerConditionOutputWithContext(ctx context.Context) HorizontalPodAutoscalerConditionOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another
func (o HorizontalPodAutoscalerConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human-readable explanation containing details about the transition
func (o HorizontalPodAutoscalerConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is the reason for the condition's last transition.
func (o HorizontalPodAutoscalerConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status is the status of the condition (True, False, Unknown)
func (o HorizontalPodAutoscalerConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerCondition) string { return v.Status }).(pulumi.StringOutput)
}

// type describes the current condition
func (o HorizontalPodAutoscalerConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerCondition) string { return v.Type }).(pulumi.StringOutput)
}

type HorizontalPodAutoscalerConditionArrayOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HorizontalPodAutoscalerCondition)(nil)).Elem()
}

func (o HorizontalPodAutoscalerConditionArrayOutput) ToHorizontalPodAutoscalerConditionArrayOutput() HorizontalPodAutoscalerConditionArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerConditionArrayOutput) ToHorizontalPodAutoscalerConditionArrayOutputWithContext(ctx context.Context) HorizontalPodAutoscalerConditionArrayOutput {
	return o
}

func (o HorizontalPodAutoscalerConditionArrayOutput) Index(i pulumi.IntInput) HorizontalPodAutoscalerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HorizontalPodAutoscalerCondition {
		return vs[0].([]HorizontalPodAutoscalerCondition)[vs[1].(int)]
	}).(HorizontalPodAutoscalerConditionOutput)
}

// HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of horizontal pod autoscaler objects.
	Items []HorizontalPodAutoscalerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata is the standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HorizontalPodAutoscalerListTypeInput is an input type that accepts HorizontalPodAutoscalerListTypeArgs and HorizontalPodAutoscalerListTypeOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerListTypeInput` via:
//
//          HorizontalPodAutoscalerListTypeArgs{...}
type HorizontalPodAutoscalerListTypeInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput
	ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Context) HorizontalPodAutoscalerListTypeOutput
}

// HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of horizontal pod autoscaler objects.
	Items HorizontalPodAutoscalerTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata is the standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HorizontalPodAutoscalerListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return i.ToHorizontalPodAutoscalerListTypeOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerListTypeArgs) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerListTypeOutput)
}

// HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerListTypeOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerListType)(nil)).Elem()
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutput() HorizontalPodAutoscalerListTypeOutput {
	return o
}

func (o HorizontalPodAutoscalerListTypeOutput) ToHorizontalPodAutoscalerListTypeOutputWithContext(ctx context.Context) HorizontalPodAutoscalerListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HorizontalPodAutoscalerListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of horizontal pod autoscaler objects.
func (o HorizontalPodAutoscalerListTypeOutput) Items() HorizontalPodAutoscalerTypeArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) []HorizontalPodAutoscalerType { return v.Items }).(HorizontalPodAutoscalerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HorizontalPodAutoscalerListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata is the standard list metadata.
func (o HorizontalPodAutoscalerListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type HorizontalPodAutoscalerSpec struct {
	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
	Metrics []MetricSpec `pulumi:"metrics"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `pulumi:"minReplicas"`
	// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
	ScaleTargetRef CrossVersionObjectReference `pulumi:"scaleTargetRef"`
}

// HorizontalPodAutoscalerSpecInput is an input type that accepts HorizontalPodAutoscalerSpecArgs and HorizontalPodAutoscalerSpecOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecInput` via:
//
//          HorizontalPodAutoscalerSpecArgs{...}
type HorizontalPodAutoscalerSpecInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput
	ToHorizontalPodAutoscalerSpecOutputWithContext(context.Context) HorizontalPodAutoscalerSpecOutput
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type HorizontalPodAutoscalerSpecArgs struct {
	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
	Metrics MetricSpecArrayInput `pulumi:"metrics"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
	ScaleTargetRef CrossVersionObjectReferenceInput `pulumi:"scaleTargetRef"`
}

func (HorizontalPodAutoscalerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return i.ToHorizontalPodAutoscalerSpecOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput)
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerSpecArgs) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecOutput).ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerSpecPtrInput is an input type that accepts HorizontalPodAutoscalerSpecArgs, HorizontalPodAutoscalerSpecPtr and HorizontalPodAutoscalerSpecPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerSpecPtrInput` via:
//
//          HorizontalPodAutoscalerSpecArgs{...}
//
//  or:
//
//          nil
type HorizontalPodAutoscalerSpecPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput
	ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Context) HorizontalPodAutoscalerSpecPtrOutput
}

type horizontalPodAutoscalerSpecPtrType HorizontalPodAutoscalerSpecArgs

func HorizontalPodAutoscalerSpecPtr(v *HorizontalPodAutoscalerSpecArgs) HorizontalPodAutoscalerSpecPtrInput {
	return (*horizontalPodAutoscalerSpecPtrType)(v)
}

func (*horizontalPodAutoscalerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return i.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerSpecPtrType) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerSpecPtrOutput)
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type HorizontalPodAutoscalerSpecOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutput() HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o.ToHorizontalPodAutoscalerSpecPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerSpecOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpec {
		return &v
	}).(HorizontalPodAutoscalerSpecPtrOutput)
}

// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
func (o HorizontalPodAutoscalerSpecOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
func (o HorizontalPodAutoscalerSpecOutput) Metrics() MetricSpecArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) []MetricSpec { return v.Metrics }).(MetricSpecArrayOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
func (o HorizontalPodAutoscalerSpecOutput) ScaleTargetRef() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerSpec) CrossVersionObjectReference { return v.ScaleTargetRef }).(CrossVersionObjectReferenceOutput)
}

type HorizontalPodAutoscalerSpecPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerSpec)(nil)).Elem()
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutput() HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) ToHorizontalPodAutoscalerSpecPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerSpecPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerSpecPtrOutput) Elem() HorizontalPodAutoscalerSpecOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) HorizontalPodAutoscalerSpec { return *v }).(HorizontalPodAutoscalerSpecOutput)
}

// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
func (o HorizontalPodAutoscalerSpecPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
func (o HorizontalPodAutoscalerSpecPtrOutput) Metrics() MetricSpecArrayOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) []MetricSpec {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(MetricSpecArrayOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o HorizontalPodAutoscalerSpecPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
func (o HorizontalPodAutoscalerSpecPtrOutput) ScaleTargetRef() CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerSpec) *CrossVersionObjectReference {
		if v == nil {
			return nil
		}
		return &v.ScaleTargetRef
	}).(CrossVersionObjectReferencePtrOutput)
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type HorizontalPodAutoscalerStatus struct {
	// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
	Conditions []HorizontalPodAutoscalerCondition `pulumi:"conditions"`
	// currentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics []MetricStatus `pulumi:"currentMetrics"`
	// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
	CurrentReplicas int `pulumi:"currentReplicas"`
	// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
	DesiredReplicas int `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime *string `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// HorizontalPodAutoscalerStatusInput is an input type that accepts HorizontalPodAutoscalerStatusArgs and HorizontalPodAutoscalerStatusOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusInput` via:
//
//          HorizontalPodAutoscalerStatusArgs{...}
type HorizontalPodAutoscalerStatusInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput
	ToHorizontalPodAutoscalerStatusOutputWithContext(context.Context) HorizontalPodAutoscalerStatusOutput
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type HorizontalPodAutoscalerStatusArgs struct {
	// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
	Conditions HorizontalPodAutoscalerConditionArrayInput `pulumi:"conditions"`
	// currentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics MetricStatusArrayInput `pulumi:"currentMetrics"`
	// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
	CurrentReplicas pulumi.IntInput `pulumi:"currentReplicas"`
	// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
	DesiredReplicas pulumi.IntInput `pulumi:"desiredReplicas"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
	LastScaleTime pulumi.StringPtrInput `pulumi:"lastScaleTime"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (HorizontalPodAutoscalerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return i.ToHorizontalPodAutoscalerStatusOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput)
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalerStatusArgs) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusOutput).ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalerStatusPtrInput is an input type that accepts HorizontalPodAutoscalerStatusArgs, HorizontalPodAutoscalerStatusPtr and HorizontalPodAutoscalerStatusPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalerStatusPtrInput` via:
//
//          HorizontalPodAutoscalerStatusArgs{...}
//
//  or:
//
//          nil
type HorizontalPodAutoscalerStatusPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput
	ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Context) HorizontalPodAutoscalerStatusPtrOutput
}

type horizontalPodAutoscalerStatusPtrType HorizontalPodAutoscalerStatusArgs

func HorizontalPodAutoscalerStatusPtr(v *HorizontalPodAutoscalerStatusArgs) HorizontalPodAutoscalerStatusPtrInput {
	return (*horizontalPodAutoscalerStatusPtrType)(v)
}

func (*horizontalPodAutoscalerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return i.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalerStatusPtrType) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalerStatusPtrOutput)
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type HorizontalPodAutoscalerStatusOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutput() HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o.ToHorizontalPodAutoscalerStatusPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalerStatusOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatus {
		return &v
	}).(HorizontalPodAutoscalerStatusPtrOutput)
}

// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
func (o HorizontalPodAutoscalerStatusOutput) Conditions() HorizontalPodAutoscalerConditionArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) []HorizontalPodAutoscalerCondition { return v.Conditions }).(HorizontalPodAutoscalerConditionArrayOutput)
}

// currentMetrics is the last read state of the metrics used by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) CurrentMetrics() MetricStatusArrayOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) []MetricStatus { return v.CurrentMetrics }).(MetricStatusArrayOutput)
}

// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) CurrentReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.CurrentReplicas }).(pulumi.IntOutput)
}

// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) DesiredReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) int { return v.DesiredReplicas }).(pulumi.IntOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *string { return v.LastScaleTime }).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type HorizontalPodAutoscalerStatusPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalerStatus)(nil)).Elem()
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutput() HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) ToHorizontalPodAutoscalerStatusPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalerStatusPtrOutput {
	return o
}

func (o HorizontalPodAutoscalerStatusPtrOutput) Elem() HorizontalPodAutoscalerStatusOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) HorizontalPodAutoscalerStatus { return *v }).(HorizontalPodAutoscalerStatusOutput)
}

// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
func (o HorizontalPodAutoscalerStatusPtrOutput) Conditions() HorizontalPodAutoscalerConditionArrayOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) []HorizontalPodAutoscalerCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HorizontalPodAutoscalerConditionArrayOutput)
}

// currentMetrics is the last read state of the metrics used by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentMetrics() MetricStatusArrayOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) []MetricStatus {
		if v == nil {
			return nil
		}
		return v.CurrentMetrics
	}).(MetricStatusArrayOutput)
}

// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) CurrentReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentReplicas
	}).(pulumi.IntPtrOutput)
}

// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) DesiredReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.DesiredReplicas
	}).(pulumi.IntPtrOutput)
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
func (o HorizontalPodAutoscalerStatusPtrOutput) LastScaleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastScaleTime
	}).(pulumi.StringPtrOutput)
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (o HorizontalPodAutoscalerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
type MetricSpec struct {
	// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External *ExternalMetricSource `pulumi:"external"`
	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
	Object *ObjectMetricSource `pulumi:"object"`
	// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
	Pods *PodsMetricSource `pulumi:"pods"`
	// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource *ResourceMetricSource `pulumi:"resource"`
	// type is the type of metric source.  It should be one of "Object", "Pods", "Resource" or "External", each mapping to a matching field in the object.
	Type string `pulumi:"type"`
}

// MetricSpecInput is an input type that accepts MetricSpecArgs and MetricSpecOutput values.
// You can construct a concrete instance of `MetricSpecInput` via:
//
//          MetricSpecArgs{...}
type MetricSpecInput interface {
	pulumi.Input

	ToMetricSpecOutput() MetricSpecOutput
	ToMetricSpecOutputWithContext(context.Context) MetricSpecOutput
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
type MetricSpecArgs struct {
	// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External ExternalMetricSourcePtrInput `pulumi:"external"`
	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
	Object ObjectMetricSourcePtrInput `pulumi:"object"`
	// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
	Pods PodsMetricSourcePtrInput `pulumi:"pods"`
	// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource ResourceMetricSourcePtrInput `pulumi:"resource"`
	// type is the type of metric source.  It should be one of "Object", "Pods", "Resource" or "External", each mapping to a matching field in the object.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSpec)(nil)).Elem()
}

func (i MetricSpecArgs) ToMetricSpecOutput() MetricSpecOutput {
	return i.ToMetricSpecOutputWithContext(context.Background())
}

func (i MetricSpecArgs) ToMetricSpecOutputWithContext(ctx context.Context) MetricSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSpecOutput)
}

// MetricSpecArrayInput is an input type that accepts MetricSpecArray and MetricSpecArrayOutput values.
// You can construct a concrete instance of `MetricSpecArrayInput` via:
//
//          MetricSpecArray{ MetricSpecArgs{...} }
type MetricSpecArrayInput interface {
	pulumi.Input

	ToMetricSpecArrayOutput() MetricSpecArrayOutput
	ToMetricSpecArrayOutputWithContext(context.Context) MetricSpecArrayOutput
}

type MetricSpecArray []MetricSpecInput

func (MetricSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSpec)(nil)).Elem()
}

func (i MetricSpecArray) ToMetricSpecArrayOutput() MetricSpecArrayOutput {
	return i.ToMetricSpecArrayOutputWithContext(context.Background())
}

func (i MetricSpecArray) ToMetricSpecArrayOutputWithContext(ctx context.Context) MetricSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSpecArrayOutput)
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
type MetricSpecOutput struct{ *pulumi.OutputState }

func (MetricSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSpec)(nil)).Elem()
}

func (o MetricSpecOutput) ToMetricSpecOutput() MetricSpecOutput {
	return o
}

func (o MetricSpecOutput) ToMetricSpecOutputWithContext(ctx context.Context) MetricSpecOutput {
	return o
}

// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
func (o MetricSpecOutput) External() ExternalMetricSourcePtrOutput {
	return o.ApplyT(func(v MetricSpec) *ExternalMetricSource { return v.External }).(ExternalMetricSourcePtrOutput)
}

// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
func (o MetricSpecOutput) Object() ObjectMetricSourcePtrOutput {
	return o.ApplyT(func(v MetricSpec) *ObjectMetricSource { return v.Object }).(ObjectMetricSourcePtrOutput)
}

// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
func (o MetricSpecOutput) Pods() PodsMetricSourcePtrOutput {
	return o.ApplyT(func(v MetricSpec) *PodsMetricSource { return v.Pods }).(PodsMetricSourcePtrOutput)
}

// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
func (o MetricSpecOutput) Resource() ResourceMetricSourcePtrOutput {
	return o.ApplyT(func(v MetricSpec) *ResourceMetricSource { return v.Resource }).(ResourceMetricSourcePtrOutput)
}

// type is the type of metric source.  It should be one of "Object", "Pods", "Resource" or "External", each mapping to a matching field in the object.
func (o MetricSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricSpec) string { return v.Type }).(pulumi.StringOutput)
}

type MetricSpecArrayOutput struct{ *pulumi.OutputState }

func (MetricSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSpec)(nil)).Elem()
}

func (o MetricSpecArrayOutput) ToMetricSpecArrayOutput() MetricSpecArrayOutput {
	return o
}

func (o MetricSpecArrayOutput) ToMetricSpecArrayOutputWithContext(ctx context.Context) MetricSpecArrayOutput {
	return o
}

func (o MetricSpecArrayOutput) Index(i pulumi.IntInput) MetricSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSpec {
		return vs[0].([]MetricSpec)[vs[1].(int)]
	}).(MetricSpecOutput)
}

// MetricStatus describes the last-read state of a single metric.
type MetricStatus struct {
	// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External *ExternalMetricStatus `pulumi:"external"`
	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
	Object *ObjectMetricStatus `pulumi:"object"`
	// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
	Pods *PodsMetricStatus `pulumi:"pods"`
	// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource *ResourceMetricStatus `pulumi:"resource"`
	// type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
	Type string `pulumi:"type"`
}

// MetricStatusInput is an input type that accepts MetricStatusArgs and MetricStatusOutput values.
// You can construct a concrete instance of `MetricStatusInput` via:
//
//          MetricStatusArgs{...}
type MetricStatusInput interface {
	pulumi.Input

	ToMetricStatusOutput() MetricStatusOutput
	ToMetricStatusOutputWithContext(context.Context) MetricStatusOutput
}

// MetricStatus describes the last-read state of a single metric.
type MetricStatusArgs struct {
	// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External ExternalMetricStatusPtrInput `pulumi:"external"`
	// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
	Object ObjectMetricStatusPtrInput `pulumi:"object"`
	// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
	Pods PodsMetricStatusPtrInput `pulumi:"pods"`
	// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource ResourceMetricStatusPtrInput `pulumi:"resource"`
	// type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStatus)(nil)).Elem()
}

func (i MetricStatusArgs) ToMetricStatusOutput() MetricStatusOutput {
	return i.ToMetricStatusOutputWithContext(context.Background())
}

func (i MetricStatusArgs) ToMetricStatusOutputWithContext(ctx context.Context) MetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStatusOutput)
}

// MetricStatusArrayInput is an input type that accepts MetricStatusArray and MetricStatusArrayOutput values.
// You can construct a concrete instance of `MetricStatusArrayInput` via:
//
//          MetricStatusArray{ MetricStatusArgs{...} }
type MetricStatusArrayInput interface {
	pulumi.Input

	ToMetricStatusArrayOutput() MetricStatusArrayOutput
	ToMetricStatusArrayOutputWithContext(context.Context) MetricStatusArrayOutput
}

type MetricStatusArray []MetricStatusInput

func (MetricStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStatus)(nil)).Elem()
}

func (i MetricStatusArray) ToMetricStatusArrayOutput() MetricStatusArrayOutput {
	return i.ToMetricStatusArrayOutputWithContext(context.Background())
}

func (i MetricStatusArray) ToMetricStatusArrayOutputWithContext(ctx context.Context) MetricStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStatusArrayOutput)
}

// MetricStatus describes the last-read state of a single metric.
type MetricStatusOutput struct{ *pulumi.OutputState }

func (MetricStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStatus)(nil)).Elem()
}

func (o MetricStatusOutput) ToMetricStatusOutput() MetricStatusOutput {
	return o
}

func (o MetricStatusOutput) ToMetricStatusOutputWithContext(ctx context.Context) MetricStatusOutput {
	return o
}

// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
func (o MetricStatusOutput) External() ExternalMetricStatusPtrOutput {
	return o.ApplyT(func(v MetricStatus) *ExternalMetricStatus { return v.External }).(ExternalMetricStatusPtrOutput)
}

// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
func (o MetricStatusOutput) Object() ObjectMetricStatusPtrOutput {
	return o.ApplyT(func(v MetricStatus) *ObjectMetricStatus { return v.Object }).(ObjectMetricStatusPtrOutput)
}

// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
func (o MetricStatusOutput) Pods() PodsMetricStatusPtrOutput {
	return o.ApplyT(func(v MetricStatus) *PodsMetricStatus { return v.Pods }).(PodsMetricStatusPtrOutput)
}

// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
func (o MetricStatusOutput) Resource() ResourceMetricStatusPtrOutput {
	return o.ApplyT(func(v MetricStatus) *ResourceMetricStatus { return v.Resource }).(ResourceMetricStatusPtrOutput)
}

// type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
func (o MetricStatusOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStatus) string { return v.Type }).(pulumi.StringOutput)
}

type MetricStatusArrayOutput struct{ *pulumi.OutputState }

func (MetricStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStatus)(nil)).Elem()
}

func (o MetricStatusArrayOutput) ToMetricStatusArrayOutput() MetricStatusArrayOutput {
	return o
}

func (o MetricStatusArrayOutput) ToMetricStatusArrayOutputWithContext(ctx context.Context) MetricStatusArrayOutput {
	return o
}

func (o MetricStatusArrayOutput) Index(i pulumi.IntInput) MetricStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStatus {
		return vs[0].([]MetricStatus)[vs[1].(int)]
	}).(MetricStatusOutput)
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricSource struct {
	// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
	AverageValue *string `pulumi:"averageValue"`
	// metricName is the name of the metric in question.
	MetricName string `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// target is the described Kubernetes object.
	Target CrossVersionObjectReference `pulumi:"target"`
	// targetValue is the target value of the metric (as a quantity).
	TargetValue string `pulumi:"targetValue"`
}

// ObjectMetricSourceInput is an input type that accepts ObjectMetricSourceArgs and ObjectMetricSourceOutput values.
// You can construct a concrete instance of `ObjectMetricSourceInput` via:
//
//          ObjectMetricSourceArgs{...}
type ObjectMetricSourceInput interface {
	pulumi.Input

	ToObjectMetricSourceOutput() ObjectMetricSourceOutput
	ToObjectMetricSourceOutputWithContext(context.Context) ObjectMetricSourceOutput
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricSourceArgs struct {
	// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
	AverageValue pulumi.StringPtrInput `pulumi:"averageValue"`
	// metricName is the name of the metric in question.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// target is the described Kubernetes object.
	Target CrossVersionObjectReferenceInput `pulumi:"target"`
	// targetValue is the target value of the metric (as a quantity).
	TargetValue pulumi.StringInput `pulumi:"targetValue"`
}

func (ObjectMetricSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetricSource)(nil)).Elem()
}

func (i ObjectMetricSourceArgs) ToObjectMetricSourceOutput() ObjectMetricSourceOutput {
	return i.ToObjectMetricSourceOutputWithContext(context.Background())
}

func (i ObjectMetricSourceArgs) ToObjectMetricSourceOutputWithContext(ctx context.Context) ObjectMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricSourceOutput)
}

func (i ObjectMetricSourceArgs) ToObjectMetricSourcePtrOutput() ObjectMetricSourcePtrOutput {
	return i.ToObjectMetricSourcePtrOutputWithContext(context.Background())
}

func (i ObjectMetricSourceArgs) ToObjectMetricSourcePtrOutputWithContext(ctx context.Context) ObjectMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricSourceOutput).ToObjectMetricSourcePtrOutputWithContext(ctx)
}

// ObjectMetricSourcePtrInput is an input type that accepts ObjectMetricSourceArgs, ObjectMetricSourcePtr and ObjectMetricSourcePtrOutput values.
// You can construct a concrete instance of `ObjectMetricSourcePtrInput` via:
//
//          ObjectMetricSourceArgs{...}
//
//  or:
//
//          nil
type ObjectMetricSourcePtrInput interface {
	pulumi.Input

	ToObjectMetricSourcePtrOutput() ObjectMetricSourcePtrOutput
	ToObjectMetricSourcePtrOutputWithContext(context.Context) ObjectMetricSourcePtrOutput
}

type objectMetricSourcePtrType ObjectMetricSourceArgs

func ObjectMetricSourcePtr(v *ObjectMetricSourceArgs) ObjectMetricSourcePtrInput {
	return (*objectMetricSourcePtrType)(v)
}

func (*objectMetricSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetricSource)(nil)).Elem()
}

func (i *objectMetricSourcePtrType) ToObjectMetricSourcePtrOutput() ObjectMetricSourcePtrOutput {
	return i.ToObjectMetricSourcePtrOutputWithContext(context.Background())
}

func (i *objectMetricSourcePtrType) ToObjectMetricSourcePtrOutputWithContext(ctx context.Context) ObjectMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricSourcePtrOutput)
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricSourceOutput struct{ *pulumi.OutputState }

func (ObjectMetricSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetricSource)(nil)).Elem()
}

func (o ObjectMetricSourceOutput) ToObjectMetricSourceOutput() ObjectMetricSourceOutput {
	return o
}

func (o ObjectMetricSourceOutput) ToObjectMetricSourceOutputWithContext(ctx context.Context) ObjectMetricSourceOutput {
	return o
}

func (o ObjectMetricSourceOutput) ToObjectMetricSourcePtrOutput() ObjectMetricSourcePtrOutput {
	return o.ToObjectMetricSourcePtrOutputWithContext(context.Background())
}

func (o ObjectMetricSourceOutput) ToObjectMetricSourcePtrOutputWithContext(ctx context.Context) ObjectMetricSourcePtrOutput {
	return o.ApplyT(func(v ObjectMetricSource) *ObjectMetricSource {
		return &v
	}).(ObjectMetricSourcePtrOutput)
}

// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
func (o ObjectMetricSourceOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetricSource) *string { return v.AverageValue }).(pulumi.StringPtrOutput)
}

// metricName is the name of the metric in question.
func (o ObjectMetricSourceOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetricSource) string { return v.MetricName }).(pulumi.StringOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
func (o ObjectMetricSourceOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ObjectMetricSource) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// target is the described Kubernetes object.
func (o ObjectMetricSourceOutput) Target() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v ObjectMetricSource) CrossVersionObjectReference { return v.Target }).(CrossVersionObjectReferenceOutput)
}

// targetValue is the target value of the metric (as a quantity).
func (o ObjectMetricSourceOutput) TargetValue() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetricSource) string { return v.TargetValue }).(pulumi.StringOutput)
}

type ObjectMetricSourcePtrOutput struct{ *pulumi.OutputState }

func (ObjectMetricSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetricSource)(nil)).Elem()
}

func (o ObjectMetricSourcePtrOutput) ToObjectMetricSourcePtrOutput() ObjectMetricSourcePtrOutput {
	return o
}

func (o ObjectMetricSourcePtrOutput) ToObjectMetricSourcePtrOutputWithContext(ctx context.Context) ObjectMetricSourcePtrOutput {
	return o
}

func (o ObjectMetricSourcePtrOutput) Elem() ObjectMetricSourceOutput {
	return o.ApplyT(func(v *ObjectMetricSource) ObjectMetricSource { return *v }).(ObjectMetricSourceOutput)
}

// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
func (o ObjectMetricSourcePtrOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricSource) *string {
		if v == nil {
			return nil
		}
		return v.AverageValue
	}).(pulumi.StringPtrOutput)
}

// metricName is the name of the metric in question.
func (o ObjectMetricSourcePtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
func (o ObjectMetricSourcePtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *ObjectMetricSource) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// target is the described Kubernetes object.
func (o ObjectMetricSourcePtrOutput) Target() CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v *ObjectMetricSource) *CrossVersionObjectReference {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(CrossVersionObjectReferencePtrOutput)
}

// targetValue is the target value of the metric (as a quantity).
func (o ObjectMetricSourcePtrOutput) TargetValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.TargetValue
	}).(pulumi.StringPtrOutput)
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricStatus struct {
	// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
	AverageValue *string `pulumi:"averageValue"`
	// currentValue is the current value of the metric (as a quantity).
	CurrentValue string `pulumi:"currentValue"`
	// metricName is the name of the metric in question.
	MetricName string `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// target is the described Kubernetes object.
	Target CrossVersionObjectReference `pulumi:"target"`
}

// ObjectMetricStatusInput is an input type that accepts ObjectMetricStatusArgs and ObjectMetricStatusOutput values.
// You can construct a concrete instance of `ObjectMetricStatusInput` via:
//
//          ObjectMetricStatusArgs{...}
type ObjectMetricStatusInput interface {
	pulumi.Input

	ToObjectMetricStatusOutput() ObjectMetricStatusOutput
	ToObjectMetricStatusOutputWithContext(context.Context) ObjectMetricStatusOutput
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricStatusArgs struct {
	// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
	AverageValue pulumi.StringPtrInput `pulumi:"averageValue"`
	// currentValue is the current value of the metric (as a quantity).
	CurrentValue pulumi.StringInput `pulumi:"currentValue"`
	// metricName is the name of the metric in question.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// target is the described Kubernetes object.
	Target CrossVersionObjectReferenceInput `pulumi:"target"`
}

func (ObjectMetricStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetricStatus)(nil)).Elem()
}

func (i ObjectMetricStatusArgs) ToObjectMetricStatusOutput() ObjectMetricStatusOutput {
	return i.ToObjectMetricStatusOutputWithContext(context.Background())
}

func (i ObjectMetricStatusArgs) ToObjectMetricStatusOutputWithContext(ctx context.Context) ObjectMetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricStatusOutput)
}

func (i ObjectMetricStatusArgs) ToObjectMetricStatusPtrOutput() ObjectMetricStatusPtrOutput {
	return i.ToObjectMetricStatusPtrOutputWithContext(context.Background())
}

func (i ObjectMetricStatusArgs) ToObjectMetricStatusPtrOutputWithContext(ctx context.Context) ObjectMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricStatusOutput).ToObjectMetricStatusPtrOutputWithContext(ctx)
}

// ObjectMetricStatusPtrInput is an input type that accepts ObjectMetricStatusArgs, ObjectMetricStatusPtr and ObjectMetricStatusPtrOutput values.
// You can construct a concrete instance of `ObjectMetricStatusPtrInput` via:
//
//          ObjectMetricStatusArgs{...}
//
//  or:
//
//          nil
type ObjectMetricStatusPtrInput interface {
	pulumi.Input

	ToObjectMetricStatusPtrOutput() ObjectMetricStatusPtrOutput
	ToObjectMetricStatusPtrOutputWithContext(context.Context) ObjectMetricStatusPtrOutput
}

type objectMetricStatusPtrType ObjectMetricStatusArgs

func ObjectMetricStatusPtr(v *ObjectMetricStatusArgs) ObjectMetricStatusPtrInput {
	return (*objectMetricStatusPtrType)(v)
}

func (*objectMetricStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetricStatus)(nil)).Elem()
}

func (i *objectMetricStatusPtrType) ToObjectMetricStatusPtrOutput() ObjectMetricStatusPtrOutput {
	return i.ToObjectMetricStatusPtrOutputWithContext(context.Background())
}

func (i *objectMetricStatusPtrType) ToObjectMetricStatusPtrOutputWithContext(ctx context.Context) ObjectMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetricStatusPtrOutput)
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricStatusOutput struct{ *pulumi.OutputState }

func (ObjectMetricStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetricStatus)(nil)).Elem()
}

func (o ObjectMetricStatusOutput) ToObjectMetricStatusOutput() ObjectMetricStatusOutput {
	return o
}

func (o ObjectMetricStatusOutput) ToObjectMetricStatusOutputWithContext(ctx context.Context) ObjectMetricStatusOutput {
	return o
}

func (o ObjectMetricStatusOutput) ToObjectMetricStatusPtrOutput() ObjectMetricStatusPtrOutput {
	return o.ToObjectMetricStatusPtrOutputWithContext(context.Background())
}

func (o ObjectMetricStatusOutput) ToObjectMetricStatusPtrOutputWithContext(ctx context.Context) ObjectMetricStatusPtrOutput {
	return o.ApplyT(func(v ObjectMetricStatus) *ObjectMetricStatus {
		return &v
	}).(ObjectMetricStatusPtrOutput)
}

// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
func (o ObjectMetricStatusOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetricStatus) *string { return v.AverageValue }).(pulumi.StringPtrOutput)
}

// currentValue is the current value of the metric (as a quantity).
func (o ObjectMetricStatusOutput) CurrentValue() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetricStatus) string { return v.CurrentValue }).(pulumi.StringOutput)
}

// metricName is the name of the metric in question.
func (o ObjectMetricStatusOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetricStatus) string { return v.MetricName }).(pulumi.StringOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
func (o ObjectMetricStatusOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v ObjectMetricStatus) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// target is the described Kubernetes object.
func (o ObjectMetricStatusOutput) Target() CrossVersionObjectReferenceOutput {
	return o.ApplyT(func(v ObjectMetricStatus) CrossVersionObjectReference { return v.Target }).(CrossVersionObjectReferenceOutput)
}

type ObjectMetricStatusPtrOutput struct{ *pulumi.OutputState }

func (ObjectMetricStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetricStatus)(nil)).Elem()
}

func (o ObjectMetricStatusPtrOutput) ToObjectMetricStatusPtrOutput() ObjectMetricStatusPtrOutput {
	return o
}

func (o ObjectMetricStatusPtrOutput) ToObjectMetricStatusPtrOutputWithContext(ctx context.Context) ObjectMetricStatusPtrOutput {
	return o
}

func (o ObjectMetricStatusPtrOutput) Elem() ObjectMetricStatusOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) ObjectMetricStatus { return *v }).(ObjectMetricStatusOutput)
}

// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
func (o ObjectMetricStatusPtrOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) *string {
		if v == nil {
			return nil
		}
		return v.AverageValue
	}).(pulumi.StringPtrOutput)
}

// currentValue is the current value of the metric (as a quantity).
func (o ObjectMetricStatusPtrOutput) CurrentValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentValue
	}).(pulumi.StringPtrOutput)
}

// metricName is the name of the metric in question.
func (o ObjectMetricStatusPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
func (o ObjectMetricStatusPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// target is the described Kubernetes object.
func (o ObjectMetricStatusPtrOutput) Target() CrossVersionObjectReferencePtrOutput {
	return o.ApplyT(func(v *ObjectMetricStatus) *CrossVersionObjectReference {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(CrossVersionObjectReferencePtrOutput)
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
type PodsMetricSource struct {
	// metricName is the name of the metric in question
	MetricName string `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
	TargetAverageValue string `pulumi:"targetAverageValue"`
}

// PodsMetricSourceInput is an input type that accepts PodsMetricSourceArgs and PodsMetricSourceOutput values.
// You can construct a concrete instance of `PodsMetricSourceInput` via:
//
//          PodsMetricSourceArgs{...}
type PodsMetricSourceInput interface {
	pulumi.Input

	ToPodsMetricSourceOutput() PodsMetricSourceOutput
	ToPodsMetricSourceOutputWithContext(context.Context) PodsMetricSourceOutput
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
type PodsMetricSourceArgs struct {
	// metricName is the name of the metric in question
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
	TargetAverageValue pulumi.StringInput `pulumi:"targetAverageValue"`
}

func (PodsMetricSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodsMetricSource)(nil)).Elem()
}

func (i PodsMetricSourceArgs) ToPodsMetricSourceOutput() PodsMetricSourceOutput {
	return i.ToPodsMetricSourceOutputWithContext(context.Background())
}

func (i PodsMetricSourceArgs) ToPodsMetricSourceOutputWithContext(ctx context.Context) PodsMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricSourceOutput)
}

func (i PodsMetricSourceArgs) ToPodsMetricSourcePtrOutput() PodsMetricSourcePtrOutput {
	return i.ToPodsMetricSourcePtrOutputWithContext(context.Background())
}

func (i PodsMetricSourceArgs) ToPodsMetricSourcePtrOutputWithContext(ctx context.Context) PodsMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricSourceOutput).ToPodsMetricSourcePtrOutputWithContext(ctx)
}

// PodsMetricSourcePtrInput is an input type that accepts PodsMetricSourceArgs, PodsMetricSourcePtr and PodsMetricSourcePtrOutput values.
// You can construct a concrete instance of `PodsMetricSourcePtrInput` via:
//
//          PodsMetricSourceArgs{...}
//
//  or:
//
//          nil
type PodsMetricSourcePtrInput interface {
	pulumi.Input

	ToPodsMetricSourcePtrOutput() PodsMetricSourcePtrOutput
	ToPodsMetricSourcePtrOutputWithContext(context.Context) PodsMetricSourcePtrOutput
}

type podsMetricSourcePtrType PodsMetricSourceArgs

func PodsMetricSourcePtr(v *PodsMetricSourceArgs) PodsMetricSourcePtrInput {
	return (*podsMetricSourcePtrType)(v)
}

func (*podsMetricSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodsMetricSource)(nil)).Elem()
}

func (i *podsMetricSourcePtrType) ToPodsMetricSourcePtrOutput() PodsMetricSourcePtrOutput {
	return i.ToPodsMetricSourcePtrOutputWithContext(context.Background())
}

func (i *podsMetricSourcePtrType) ToPodsMetricSourcePtrOutputWithContext(ctx context.Context) PodsMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricSourcePtrOutput)
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
type PodsMetricSourceOutput struct{ *pulumi.OutputState }

func (PodsMetricSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodsMetricSource)(nil)).Elem()
}

func (o PodsMetricSourceOutput) ToPodsMetricSourceOutput() PodsMetricSourceOutput {
	return o
}

func (o PodsMetricSourceOutput) ToPodsMetricSourceOutputWithContext(ctx context.Context) PodsMetricSourceOutput {
	return o
}

func (o PodsMetricSourceOutput) ToPodsMetricSourcePtrOutput() PodsMetricSourcePtrOutput {
	return o.ToPodsMetricSourcePtrOutputWithContext(context.Background())
}

func (o PodsMetricSourceOutput) ToPodsMetricSourcePtrOutputWithContext(ctx context.Context) PodsMetricSourcePtrOutput {
	return o.ApplyT(func(v PodsMetricSource) *PodsMetricSource {
		return &v
	}).(PodsMetricSourcePtrOutput)
}

// metricName is the name of the metric in question
func (o PodsMetricSourceOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v PodsMetricSource) string { return v.MetricName }).(pulumi.StringOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
func (o PodsMetricSourceOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PodsMetricSource) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
func (o PodsMetricSourceOutput) TargetAverageValue() pulumi.StringOutput {
	return o.ApplyT(func(v PodsMetricSource) string { return v.TargetAverageValue }).(pulumi.StringOutput)
}

type PodsMetricSourcePtrOutput struct{ *pulumi.OutputState }

func (PodsMetricSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodsMetricSource)(nil)).Elem()
}

func (o PodsMetricSourcePtrOutput) ToPodsMetricSourcePtrOutput() PodsMetricSourcePtrOutput {
	return o
}

func (o PodsMetricSourcePtrOutput) ToPodsMetricSourcePtrOutputWithContext(ctx context.Context) PodsMetricSourcePtrOutput {
	return o
}

func (o PodsMetricSourcePtrOutput) Elem() PodsMetricSourceOutput {
	return o.ApplyT(func(v *PodsMetricSource) PodsMetricSource { return *v }).(PodsMetricSourceOutput)
}

// metricName is the name of the metric in question
func (o PodsMetricSourcePtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodsMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
func (o PodsMetricSourcePtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *PodsMetricSource) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
func (o PodsMetricSourcePtrOutput) TargetAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodsMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.TargetAverageValue
	}).(pulumi.StringPtrOutput)
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
type PodsMetricStatus struct {
	// currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
	CurrentAverageValue string `pulumi:"currentAverageValue"`
	// metricName is the name of the metric in question
	MetricName string `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
	Selector *metav1.LabelSelector `pulumi:"selector"`
}

// PodsMetricStatusInput is an input type that accepts PodsMetricStatusArgs and PodsMetricStatusOutput values.
// You can construct a concrete instance of `PodsMetricStatusInput` via:
//
//          PodsMetricStatusArgs{...}
type PodsMetricStatusInput interface {
	pulumi.Input

	ToPodsMetricStatusOutput() PodsMetricStatusOutput
	ToPodsMetricStatusOutputWithContext(context.Context) PodsMetricStatusOutput
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
type PodsMetricStatusArgs struct {
	// currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
	CurrentAverageValue pulumi.StringInput `pulumi:"currentAverageValue"`
	// metricName is the name of the metric in question
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
}

func (PodsMetricStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodsMetricStatus)(nil)).Elem()
}

func (i PodsMetricStatusArgs) ToPodsMetricStatusOutput() PodsMetricStatusOutput {
	return i.ToPodsMetricStatusOutputWithContext(context.Background())
}

func (i PodsMetricStatusArgs) ToPodsMetricStatusOutputWithContext(ctx context.Context) PodsMetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricStatusOutput)
}

func (i PodsMetricStatusArgs) ToPodsMetricStatusPtrOutput() PodsMetricStatusPtrOutput {
	return i.ToPodsMetricStatusPtrOutputWithContext(context.Background())
}

func (i PodsMetricStatusArgs) ToPodsMetricStatusPtrOutputWithContext(ctx context.Context) PodsMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricStatusOutput).ToPodsMetricStatusPtrOutputWithContext(ctx)
}

// PodsMetricStatusPtrInput is an input type that accepts PodsMetricStatusArgs, PodsMetricStatusPtr and PodsMetricStatusPtrOutput values.
// You can construct a concrete instance of `PodsMetricStatusPtrInput` via:
//
//          PodsMetricStatusArgs{...}
//
//  or:
//
//          nil
type PodsMetricStatusPtrInput interface {
	pulumi.Input

	ToPodsMetricStatusPtrOutput() PodsMetricStatusPtrOutput
	ToPodsMetricStatusPtrOutputWithContext(context.Context) PodsMetricStatusPtrOutput
}

type podsMetricStatusPtrType PodsMetricStatusArgs

func PodsMetricStatusPtr(v *PodsMetricStatusArgs) PodsMetricStatusPtrInput {
	return (*podsMetricStatusPtrType)(v)
}

func (*podsMetricStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodsMetricStatus)(nil)).Elem()
}

func (i *podsMetricStatusPtrType) ToPodsMetricStatusPtrOutput() PodsMetricStatusPtrOutput {
	return i.ToPodsMetricStatusPtrOutputWithContext(context.Background())
}

func (i *podsMetricStatusPtrType) ToPodsMetricStatusPtrOutputWithContext(ctx context.Context) PodsMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodsMetricStatusPtrOutput)
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
type PodsMetricStatusOutput struct{ *pulumi.OutputState }

func (PodsMetricStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodsMetricStatus)(nil)).Elem()
}

func (o PodsMetricStatusOutput) ToPodsMetricStatusOutput() PodsMetricStatusOutput {
	return o
}

func (o PodsMetricStatusOutput) ToPodsMetricStatusOutputWithContext(ctx context.Context) PodsMetricStatusOutput {
	return o
}

func (o PodsMetricStatusOutput) ToPodsMetricStatusPtrOutput() PodsMetricStatusPtrOutput {
	return o.ToPodsMetricStatusPtrOutputWithContext(context.Background())
}

func (o PodsMetricStatusOutput) ToPodsMetricStatusPtrOutputWithContext(ctx context.Context) PodsMetricStatusPtrOutput {
	return o.ApplyT(func(v PodsMetricStatus) *PodsMetricStatus {
		return &v
	}).(PodsMetricStatusPtrOutput)
}

// currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
func (o PodsMetricStatusOutput) CurrentAverageValue() pulumi.StringOutput {
	return o.ApplyT(func(v PodsMetricStatus) string { return v.CurrentAverageValue }).(pulumi.StringOutput)
}

// metricName is the name of the metric in question
func (o PodsMetricStatusOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v PodsMetricStatus) string { return v.MetricName }).(pulumi.StringOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
func (o PodsMetricStatusOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PodsMetricStatus) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

type PodsMetricStatusPtrOutput struct{ *pulumi.OutputState }

func (PodsMetricStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodsMetricStatus)(nil)).Elem()
}

func (o PodsMetricStatusPtrOutput) ToPodsMetricStatusPtrOutput() PodsMetricStatusPtrOutput {
	return o
}

func (o PodsMetricStatusPtrOutput) ToPodsMetricStatusPtrOutputWithContext(ctx context.Context) PodsMetricStatusPtrOutput {
	return o
}

func (o PodsMetricStatusPtrOutput) Elem() PodsMetricStatusOutput {
	return o.ApplyT(func(v *PodsMetricStatus) PodsMetricStatus { return *v }).(PodsMetricStatusOutput)
}

// currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
func (o PodsMetricStatusPtrOutput) CurrentAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodsMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentAverageValue
	}).(pulumi.StringPtrOutput)
}

// metricName is the name of the metric in question
func (o PodsMetricStatusPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodsMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
func (o PodsMetricStatusPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *PodsMetricStatus) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type ResourceMetricSource struct {
	// name is the name of the resource in question.
	Name string `pulumi:"name"`
	// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
	TargetAverageUtilization *int `pulumi:"targetAverageUtilization"`
	// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
	TargetAverageValue *string `pulumi:"targetAverageValue"`
}

// ResourceMetricSourceInput is an input type that accepts ResourceMetricSourceArgs and ResourceMetricSourceOutput values.
// You can construct a concrete instance of `ResourceMetricSourceInput` via:
//
//          ResourceMetricSourceArgs{...}
type ResourceMetricSourceInput interface {
	pulumi.Input

	ToResourceMetricSourceOutput() ResourceMetricSourceOutput
	ToResourceMetricSourceOutputWithContext(context.Context) ResourceMetricSourceOutput
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type ResourceMetricSourceArgs struct {
	// name is the name of the resource in question.
	Name pulumi.StringInput `pulumi:"name"`
	// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
	TargetAverageUtilization pulumi.IntPtrInput `pulumi:"targetAverageUtilization"`
	// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
	TargetAverageValue pulumi.StringPtrInput `pulumi:"targetAverageValue"`
}

func (ResourceMetricSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricSource)(nil)).Elem()
}

func (i ResourceMetricSourceArgs) ToResourceMetricSourceOutput() ResourceMetricSourceOutput {
	return i.ToResourceMetricSourceOutputWithContext(context.Background())
}

func (i ResourceMetricSourceArgs) ToResourceMetricSourceOutputWithContext(ctx context.Context) ResourceMetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSourceOutput)
}

func (i ResourceMetricSourceArgs) ToResourceMetricSourcePtrOutput() ResourceMetricSourcePtrOutput {
	return i.ToResourceMetricSourcePtrOutputWithContext(context.Background())
}

func (i ResourceMetricSourceArgs) ToResourceMetricSourcePtrOutputWithContext(ctx context.Context) ResourceMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSourceOutput).ToResourceMetricSourcePtrOutputWithContext(ctx)
}

// ResourceMetricSourcePtrInput is an input type that accepts ResourceMetricSourceArgs, ResourceMetricSourcePtr and ResourceMetricSourcePtrOutput values.
// You can construct a concrete instance of `ResourceMetricSourcePtrInput` via:
//
//          ResourceMetricSourceArgs{...}
//
//  or:
//
//          nil
type ResourceMetricSourcePtrInput interface {
	pulumi.Input

	ToResourceMetricSourcePtrOutput() ResourceMetricSourcePtrOutput
	ToResourceMetricSourcePtrOutputWithContext(context.Context) ResourceMetricSourcePtrOutput
}

type resourceMetricSourcePtrType ResourceMetricSourceArgs

func ResourceMetricSourcePtr(v *ResourceMetricSourceArgs) ResourceMetricSourcePtrInput {
	return (*resourceMetricSourcePtrType)(v)
}

func (*resourceMetricSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricSource)(nil)).Elem()
}

func (i *resourceMetricSourcePtrType) ToResourceMetricSourcePtrOutput() ResourceMetricSourcePtrOutput {
	return i.ToResourceMetricSourcePtrOutputWithContext(context.Background())
}

func (i *resourceMetricSourcePtrType) ToResourceMetricSourcePtrOutputWithContext(ctx context.Context) ResourceMetricSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSourcePtrOutput)
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type ResourceMetricSourceOutput struct{ *pulumi.OutputState }

func (ResourceMetricSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricSource)(nil)).Elem()
}

func (o ResourceMetricSourceOutput) ToResourceMetricSourceOutput() ResourceMetricSourceOutput {
	return o
}

func (o ResourceMetricSourceOutput) ToResourceMetricSourceOutputWithContext(ctx context.Context) ResourceMetricSourceOutput {
	return o
}

func (o ResourceMetricSourceOutput) ToResourceMetricSourcePtrOutput() ResourceMetricSourcePtrOutput {
	return o.ToResourceMetricSourcePtrOutputWithContext(context.Background())
}

func (o ResourceMetricSourceOutput) ToResourceMetricSourcePtrOutputWithContext(ctx context.Context) ResourceMetricSourcePtrOutput {
	return o.ApplyT(func(v ResourceMetricSource) *ResourceMetricSource {
		return &v
	}).(ResourceMetricSourcePtrOutput)
}

// name is the name of the resource in question.
func (o ResourceMetricSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSource) string { return v.Name }).(pulumi.StringOutput)
}

// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
func (o ResourceMetricSourceOutput) TargetAverageUtilization() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMetricSource) *int { return v.TargetAverageUtilization }).(pulumi.IntPtrOutput)
}

// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
func (o ResourceMetricSourceOutput) TargetAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSource) *string { return v.TargetAverageValue }).(pulumi.StringPtrOutput)
}

type ResourceMetricSourcePtrOutput struct{ *pulumi.OutputState }

func (ResourceMetricSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricSource)(nil)).Elem()
}

func (o ResourceMetricSourcePtrOutput) ToResourceMetricSourcePtrOutput() ResourceMetricSourcePtrOutput {
	return o
}

func (o ResourceMetricSourcePtrOutput) ToResourceMetricSourcePtrOutputWithContext(ctx context.Context) ResourceMetricSourcePtrOutput {
	return o
}

func (o ResourceMetricSourcePtrOutput) Elem() ResourceMetricSourceOutput {
	return o.ApplyT(func(v *ResourceMetricSource) ResourceMetricSource { return *v }).(ResourceMetricSourceOutput)
}

// name is the name of the resource in question.
func (o ResourceMetricSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
func (o ResourceMetricSourcePtrOutput) TargetAverageUtilization() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSource) *int {
		if v == nil {
			return nil
		}
		return v.TargetAverageUtilization
	}).(pulumi.IntPtrOutput)
}

// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
func (o ResourceMetricSourcePtrOutput) TargetAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetAverageValue
	}).(pulumi.StringPtrOutput)
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type ResourceMetricStatus struct {
	// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
	CurrentAverageUtilization *int `pulumi:"currentAverageUtilization"`
	// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
	CurrentAverageValue string `pulumi:"currentAverageValue"`
	// name is the name of the resource in question.
	Name string `pulumi:"name"`
}

// ResourceMetricStatusInput is an input type that accepts ResourceMetricStatusArgs and ResourceMetricStatusOutput values.
// You can construct a concrete instance of `ResourceMetricStatusInput` via:
//
//          ResourceMetricStatusArgs{...}
type ResourceMetricStatusInput interface {
	pulumi.Input

	ToResourceMetricStatusOutput() ResourceMetricStatusOutput
	ToResourceMetricStatusOutputWithContext(context.Context) ResourceMetricStatusOutput
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type ResourceMetricStatusArgs struct {
	// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
	CurrentAverageUtilization pulumi.IntPtrInput `pulumi:"currentAverageUtilization"`
	// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
	CurrentAverageValue pulumi.StringInput `pulumi:"currentAverageValue"`
	// name is the name of the resource in question.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ResourceMetricStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricStatus)(nil)).Elem()
}

func (i ResourceMetricStatusArgs) ToResourceMetricStatusOutput() ResourceMetricStatusOutput {
	return i.ToResourceMetricStatusOutputWithContext(context.Background())
}

func (i ResourceMetricStatusArgs) ToResourceMetricStatusOutputWithContext(ctx context.Context) ResourceMetricStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricStatusOutput)
}

func (i ResourceMetricStatusArgs) ToResourceMetricStatusPtrOutput() ResourceMetricStatusPtrOutput {
	return i.ToResourceMetricStatusPtrOutputWithContext(context.Background())
}

func (i ResourceMetricStatusArgs) ToResourceMetricStatusPtrOutputWithContext(ctx context.Context) ResourceMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricStatusOutput).ToResourceMetricStatusPtrOutputWithContext(ctx)
}

// ResourceMetricStatusPtrInput is an input type that accepts ResourceMetricStatusArgs, ResourceMetricStatusPtr and ResourceMetricStatusPtrOutput values.
// You can construct a concrete instance of `ResourceMetricStatusPtrInput` via:
//
//          ResourceMetricStatusArgs{...}
//
//  or:
//
//          nil
type ResourceMetricStatusPtrInput interface {
	pulumi.Input

	ToResourceMetricStatusPtrOutput() ResourceMetricStatusPtrOutput
	ToResourceMetricStatusPtrOutputWithContext(context.Context) ResourceMetricStatusPtrOutput
}

type resourceMetricStatusPtrType ResourceMetricStatusArgs

func ResourceMetricStatusPtr(v *ResourceMetricStatusArgs) ResourceMetricStatusPtrInput {
	return (*resourceMetricStatusPtrType)(v)
}

func (*resourceMetricStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricStatus)(nil)).Elem()
}

func (i *resourceMetricStatusPtrType) ToResourceMetricStatusPtrOutput() ResourceMetricStatusPtrOutput {
	return i.ToResourceMetricStatusPtrOutputWithContext(context.Background())
}

func (i *resourceMetricStatusPtrType) ToResourceMetricStatusPtrOutputWithContext(ctx context.Context) ResourceMetricStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricStatusPtrOutput)
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type ResourceMetricStatusOutput struct{ *pulumi.OutputState }

func (ResourceMetricStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricStatus)(nil)).Elem()
}

func (o ResourceMetricStatusOutput) ToResourceMetricStatusOutput() ResourceMetricStatusOutput {
	return o
}

func (o ResourceMetricStatusOutput) ToResourceMetricStatusOutputWithContext(ctx context.Context) ResourceMetricStatusOutput {
	return o
}

func (o ResourceMetricStatusOutput) ToResourceMetricStatusPtrOutput() ResourceMetricStatusPtrOutput {
	return o.ToResourceMetricStatusPtrOutputWithContext(context.Background())
}

func (o ResourceMetricStatusOutput) ToResourceMetricStatusPtrOutputWithContext(ctx context.Context) ResourceMetricStatusPtrOutput {
	return o.ApplyT(func(v ResourceMetricStatus) *ResourceMetricStatus {
		return &v
	}).(ResourceMetricStatusPtrOutput)
}

// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
func (o ResourceMetricStatusOutput) CurrentAverageUtilization() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMetricStatus) *int { return v.CurrentAverageUtilization }).(pulumi.IntPtrOutput)
}

// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
func (o ResourceMetricStatusOutput) CurrentAverageValue() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricStatus) string { return v.CurrentAverageValue }).(pulumi.StringOutput)
}

// name is the name of the resource in question.
func (o ResourceMetricStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricStatus) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceMetricStatusPtrOutput struct{ *pulumi.OutputState }

func (ResourceMetricStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricStatus)(nil)).Elem()
}

func (o ResourceMetricStatusPtrOutput) ToResourceMetricStatusPtrOutput() ResourceMetricStatusPtrOutput {
	return o
}

func (o ResourceMetricStatusPtrOutput) ToResourceMetricStatusPtrOutputWithContext(ctx context.Context) ResourceMetricStatusPtrOutput {
	return o
}

func (o ResourceMetricStatusPtrOutput) Elem() ResourceMetricStatusOutput {
	return o.ApplyT(func(v *ResourceMetricStatus) ResourceMetricStatus { return *v }).(ResourceMetricStatusOutput)
}

// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
func (o ResourceMetricStatusPtrOutput) CurrentAverageUtilization() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMetricStatus) *int {
		if v == nil {
			return nil
		}
		return v.CurrentAverageUtilization
	}).(pulumi.IntPtrOutput)
}

// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
func (o ResourceMetricStatusPtrOutput) CurrentAverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentAverageValue
	}).(pulumi.StringPtrOutput)
}

// name is the name of the resource in question.
func (o ResourceMetricStatusPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CrossVersionObjectReferenceOutput{})
	pulumi.RegisterOutputType(CrossVersionObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(ExternalMetricSourceOutput{})
	pulumi.RegisterOutputType(ExternalMetricSourcePtrOutput{})
	pulumi.RegisterOutputType(ExternalMetricStatusOutput{})
	pulumi.RegisterOutputType(ExternalMetricStatusPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerTypeArrayOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerConditionOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerConditionArrayOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerListTypeOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerSpecPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalerStatusPtrOutput{})
	pulumi.RegisterOutputType(MetricSpecOutput{})
	pulumi.RegisterOutputType(MetricSpecArrayOutput{})
	pulumi.RegisterOutputType(MetricStatusOutput{})
	pulumi.RegisterOutputType(MetricStatusArrayOutput{})
	pulumi.RegisterOutputType(ObjectMetricSourceOutput{})
	pulumi.RegisterOutputType(ObjectMetricSourcePtrOutput{})
	pulumi.RegisterOutputType(ObjectMetricStatusOutput{})
	pulumi.RegisterOutputType(ObjectMetricStatusPtrOutput{})
	pulumi.RegisterOutputType(PodsMetricSourceOutput{})
	pulumi.RegisterOutputType(PodsMetricSourcePtrOutput{})
	pulumi.RegisterOutputType(PodsMetricStatusOutput{})
	pulumi.RegisterOutputType(PodsMetricStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceMetricSourceOutput{})
	pulumi.RegisterOutputType(ResourceMetricSourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceMetricStatusOutput{})
	pulumi.RegisterOutputType(ResourceMetricStatusPtrOutput{})
}
