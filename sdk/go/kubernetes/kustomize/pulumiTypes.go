// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kustomize

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/yaml"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DirectoryArgs specifies arguments for constructing a kustomize resource.
type DirectoryArgs struct {
	// The directory containing the kustomization to apply. The value can be a local directory or a folder in a
	// git repository.
	// Example: ./helloWorld
	// Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
	Directory pulumi.StringInput
	// Transformations is an optional list of transformations to apply to Kubernetes resource definitions
	// before registering with the engine.
	Transformations []yaml.Transformation
	// ResourcePrefix is an optional prefix for the auto-generated resource names. For example, a resource named `bar`
	// created with resource prefix of `"foo"` would produce a resource named `"foo-bar"`.
	ResourcePrefix string
}

type directoryArgs struct {
	Directory       string                `pulumi:"directory"`
	ResourcePrefix  string                `pulumi:"resourcePrefix"`
	Transformations []yaml.Transformation `pulumi:"transformations"`
}

type DirectoryArgsInput interface {
	pulumi.Input

	ToDirectoryArgsOutput() DirectoryArgsOutput
	ToDirectoryArgsOutputWithContext(context.Context) DirectoryArgsOutput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

func (i DirectoryArgs) ToDirectoryArgsOutput() DirectoryArgsOutput {
	return i.ToDirectoryArgsOutputWithContext(context.Background())
}

func (i DirectoryArgs) ToDirectoryArgsOutputWithContext(ctx context.Context) DirectoryArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArgsOutput)
}

type DirectoryArgsOutput struct{ *pulumi.OutputState }

func (DirectoryArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

func (o DirectoryArgsOutput) ToDirectoryArgsOutput() DirectoryArgsOutput {
	return o
}

func (o DirectoryArgsOutput) ToDirectoryArgsOutputWithContext(ctx context.Context) DirectoryArgsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DirectoryArgsOutput{})
}
