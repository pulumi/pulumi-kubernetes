// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Directory is a component representing a collection of resources described by a kustomize directory (kustomization).
//
// ## Example Usage
// ### Local Kustomize Directory
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/kustomize/v2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kustomize.NewDirectory(ctx, "helloWorldLocal",
//				kustomize.DirectoryArgs{
//					Directory: pulumi.String("./helloWorld"),
//				},
//			)
//			if err != nil {
//				return err
//			}
//
//			return nil
//		})
//	}
//
// ```
// ### Kustomize Directory from a Git Repo
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/kustomize/v2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kustomize.NewDirectory(ctx, "helloWorldRemote",
//				kustomize.DirectoryArgs{
//					Directory: pulumi.String("https://github.com/kubernetes-sigs/kustomize/tree/v3.3.1/examples/helloWorld"),
//				},
//			)
//			if err != nil {
//				return err
//			}
//
//			return nil
//		})
//	}
//
// ```
type Directory struct {
	pulumi.ResourceState

	// Resources created by the Directory resource.
	Resources pulumi.StringPtrOutput `pulumi:"resources"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Directory == nil {
		return nil, errors.New("invalid value for required argument 'Directory'")
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Directory
	err := ctx.RegisterRemoteComponentResource("kubernetes:kustomize/v2:Directory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type directoryArgs struct {
	// The directory containing the kustomization to apply. The value can be a local directory or a folder in a
	// git repository.
	// Example: ./helloWorld
	// Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
	Directory string `pulumi:"directory"`
	// The default namespace to apply to the resources. Defaults to the provider's namespace.
	Namespace *string `pulumi:"namespace"`
	// A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo:resourceName".
	ResourcePrefix *string `pulumi:"resourcePrefix"`
	// Indicates that child resources should skip the await logic.
	SkipAwait *bool `pulumi:"skipAwait"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// The directory containing the kustomization to apply. The value can be a local directory or a folder in a
	// git repository.
	// Example: ./helloWorld
	// Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
	Directory pulumi.StringInput
	// The default namespace to apply to the resources. Defaults to the provider's namespace.
	Namespace pulumi.StringPtrInput
	// A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo:resourceName".
	ResourcePrefix pulumi.StringPtrInput
	// Indicates that child resources should skip the await logic.
	SkipAwait pulumi.BoolPtrInput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

type DirectoryInput interface {
	pulumi.Input

	ToDirectoryOutput() DirectoryOutput
	ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput
}

func (*Directory) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (i *Directory) ToDirectoryOutput() DirectoryOutput {
	return i.ToDirectoryOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryOutput)
}

// DirectoryArrayInput is an input type that accepts DirectoryArray and DirectoryArrayOutput values.
// You can construct a concrete instance of `DirectoryArrayInput` via:
//
//	DirectoryArray{ DirectoryArgs{...} }
type DirectoryArrayInput interface {
	pulumi.Input

	ToDirectoryArrayOutput() DirectoryArrayOutput
	ToDirectoryArrayOutputWithContext(context.Context) DirectoryArrayOutput
}

type DirectoryArray []DirectoryInput

func (DirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (i DirectoryArray) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return i.ToDirectoryArrayOutputWithContext(context.Background())
}

func (i DirectoryArray) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArrayOutput)
}

// DirectoryMapInput is an input type that accepts DirectoryMap and DirectoryMapOutput values.
// You can construct a concrete instance of `DirectoryMapInput` via:
//
//	DirectoryMap{ "key": DirectoryArgs{...} }
type DirectoryMapInput interface {
	pulumi.Input

	ToDirectoryMapOutput() DirectoryMapOutput
	ToDirectoryMapOutputWithContext(context.Context) DirectoryMapOutput
}

type DirectoryMap map[string]DirectoryInput

func (DirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (i DirectoryMap) ToDirectoryMapOutput() DirectoryMapOutput {
	return i.ToDirectoryMapOutputWithContext(context.Background())
}

func (i DirectoryMap) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryMapOutput)
}

type DirectoryOutput struct{ *pulumi.OutputState }

func (DirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (o DirectoryOutput) ToDirectoryOutput() DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return o
}

// Resources created by the Directory resource.
func (o DirectoryOutput) Resources() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringPtrOutput { return v.Resources }).(pulumi.StringPtrOutput)
}

type DirectoryArrayOutput struct{ *pulumi.OutputState }

func (DirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) Index(i pulumi.IntInput) DirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].([]*Directory)[vs[1].(int)]
	}).(DirectoryOutput)
}

type DirectoryMapOutput struct{ *pulumi.OutputState }

func (DirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (o DirectoryMapOutput) ToDirectoryMapOutput() DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) MapIndex(k pulumi.StringInput) DirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].(map[string]*Directory)[vs[1].(string)]
	}).(DirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryArrayInput)(nil)).Elem(), DirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryMapInput)(nil)).Elem(), DirectoryMap{})
	pulumi.RegisterOutputType(DirectoryOutput{})
	pulumi.RegisterOutputType(DirectoryArrayOutput{})
	pulumi.RegisterOutputType(DirectoryMapOutput{})
}
