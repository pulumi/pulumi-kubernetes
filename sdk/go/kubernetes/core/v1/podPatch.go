// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPatchPtrOutput `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PodStatusPatchPtrOutput `pulumi:"status"`
}

// NewPodPatch registers a new resource with the given unique name, arguments, and options.
func NewPodPatch(ctx *pulumi.Context,
	name string, args *PodPatchArgs, opts ...pulumi.ResourceOption) (*PodPatch, error) {
	if args == nil {
		args = &PodPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("v1")
	args.Kind = pulumi.StringPtr("Pod")
	var resource PodPatch
	err := ctx.RegisterResource("kubernetes:core/v1:PodPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodPatch gets an existing PodPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPodPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PodPatchState, opts ...pulumi.ResourceOption) (*PodPatch, error) {
	var resource PodPatch
	err := ctx.ReadResource("kubernetes:core/v1:PodPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PodPatch resources.
type podPatchState struct {
}

type PodPatchState struct {
}

func (PodPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*podPatchState)(nil)).Elem()
}

type podPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PodSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PodPatch resource.
type PodPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPatchPtrInput
}

func (PodPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*podPatchArgs)(nil)).Elem()
}

type PodPatchInput interface {
	pulumi.Input

	ToPodPatchOutput() PodPatchOutput
	ToPodPatchOutputWithContext(ctx context.Context) PodPatchOutput
}

func (*PodPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PodPatch)(nil)).Elem()
}

func (i *PodPatch) ToPodPatchOutput() PodPatchOutput {
	return i.ToPodPatchOutputWithContext(context.Background())
}

func (i *PodPatch) ToPodPatchOutputWithContext(ctx context.Context) PodPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodPatchOutput)
}

// PodPatchArrayInput is an input type that accepts PodPatchArray and PodPatchArrayOutput values.
// You can construct a concrete instance of `PodPatchArrayInput` via:
//
//	PodPatchArray{ PodPatchArgs{...} }
type PodPatchArrayInput interface {
	pulumi.Input

	ToPodPatchArrayOutput() PodPatchArrayOutput
	ToPodPatchArrayOutputWithContext(context.Context) PodPatchArrayOutput
}

type PodPatchArray []PodPatchInput

func (PodPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodPatch)(nil)).Elem()
}

func (i PodPatchArray) ToPodPatchArrayOutput() PodPatchArrayOutput {
	return i.ToPodPatchArrayOutputWithContext(context.Background())
}

func (i PodPatchArray) ToPodPatchArrayOutputWithContext(ctx context.Context) PodPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodPatchArrayOutput)
}

// PodPatchMapInput is an input type that accepts PodPatchMap and PodPatchMapOutput values.
// You can construct a concrete instance of `PodPatchMapInput` via:
//
//	PodPatchMap{ "key": PodPatchArgs{...} }
type PodPatchMapInput interface {
	pulumi.Input

	ToPodPatchMapOutput() PodPatchMapOutput
	ToPodPatchMapOutputWithContext(context.Context) PodPatchMapOutput
}

type PodPatchMap map[string]PodPatchInput

func (PodPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodPatch)(nil)).Elem()
}

func (i PodPatchMap) ToPodPatchMapOutput() PodPatchMapOutput {
	return i.ToPodPatchMapOutputWithContext(context.Background())
}

func (i PodPatchMap) ToPodPatchMapOutputWithContext(ctx context.Context) PodPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodPatchMapOutput)
}

type PodPatchOutput struct{ *pulumi.OutputState }

func (PodPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodPatch)(nil)).Elem()
}

func (o PodPatchOutput) ToPodPatchOutput() PodPatchOutput {
	return o
}

func (o PodPatchOutput) ToPodPatchOutputWithContext(ctx context.Context) PodPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PodPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodPatchOutput) Spec() PodSpecPatchPtrOutput {
	return o.ApplyT(func(v *PodPatch) PodSpecPatchPtrOutput { return v.Spec }).(PodSpecPatchPtrOutput)
}

// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodPatchOutput) Status() PodStatusPatchPtrOutput {
	return o.ApplyT(func(v *PodPatch) PodStatusPatchPtrOutput { return v.Status }).(PodStatusPatchPtrOutput)
}

type PodPatchArrayOutput struct{ *pulumi.OutputState }

func (PodPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodPatch)(nil)).Elem()
}

func (o PodPatchArrayOutput) ToPodPatchArrayOutput() PodPatchArrayOutput {
	return o
}

func (o PodPatchArrayOutput) ToPodPatchArrayOutputWithContext(ctx context.Context) PodPatchArrayOutput {
	return o
}

func (o PodPatchArrayOutput) Index(i pulumi.IntInput) PodPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PodPatch {
		return vs[0].([]*PodPatch)[vs[1].(int)]
	}).(PodPatchOutput)
}

type PodPatchMapOutput struct{ *pulumi.OutputState }

func (PodPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodPatch)(nil)).Elem()
}

func (o PodPatchMapOutput) ToPodPatchMapOutput() PodPatchMapOutput {
	return o
}

func (o PodPatchMapOutput) ToPodPatchMapOutputWithContext(ctx context.Context) PodPatchMapOutput {
	return o
}

func (o PodPatchMapOutput) MapIndex(k pulumi.StringInput) PodPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PodPatch {
		return vs[0].(map[string]*PodPatch)[vs[1].(string)]
	}).(PodPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PodPatchInput)(nil)).Elem(), &PodPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodPatchArrayInput)(nil)).Elem(), PodPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodPatchMapInput)(nil)).Elem(), PodPatchMap{})
	pulumi.RegisterOutputType(PodPatchOutput{})
	pulumi.RegisterOutputType(PodPatchArrayOutput{})
	pulumi.RegisterOutputType(PodPatchMapOutput{})
}
