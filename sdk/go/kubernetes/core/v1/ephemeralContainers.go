// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A list of ephemeral containers used with the Pod ephemeralcontainers subresource.
type EphemeralContainers struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
	EphemeralContainers EphemeralContainerArrayOutput `pulumi:"ephemeralContainers"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
}

// NewEphemeralContainers registers a new resource with the given unique name, arguments, and options.
func NewEphemeralContainers(ctx *pulumi.Context,
	name string, args *EphemeralContainersArgs, opts ...pulumi.ResourceOption) (*EphemeralContainers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EphemeralContainers == nil {
		return nil, errors.New("invalid value for required argument 'EphemeralContainers'")
	}
	args.ApiVersion = pulumi.StringPtr("v1")
	args.Kind = pulumi.StringPtr("EphemeralContainers")
	var resource EphemeralContainers
	err := ctx.RegisterResource("kubernetes:core/v1:EphemeralContainers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEphemeralContainers gets an existing EphemeralContainers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEphemeralContainers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EphemeralContainersState, opts ...pulumi.ResourceOption) (*EphemeralContainers, error) {
	var resource EphemeralContainers
	err := ctx.ReadResource("kubernetes:core/v1:EphemeralContainers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EphemeralContainers resources.
type ephemeralContainersState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
	EphemeralContainers []EphemeralContainer `pulumi:"ephemeralContainers"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

type EphemeralContainersState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
	EphemeralContainers EphemeralContainerArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
}

func (EphemeralContainersState) ElementType() reflect.Type {
	return reflect.TypeOf((*ephemeralContainersState)(nil)).Elem()
}

type ephemeralContainersArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
	EphemeralContainers []EphemeralContainer `pulumi:"ephemeralContainers"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a EphemeralContainers resource.
type EphemeralContainersArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
	EphemeralContainers EphemeralContainerArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
}

func (EphemeralContainersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ephemeralContainersArgs)(nil)).Elem()
}

type EphemeralContainersInput interface {
	pulumi.Input

	ToEphemeralContainersOutput() EphemeralContainersOutput
	ToEphemeralContainersOutputWithContext(ctx context.Context) EphemeralContainersOutput
}

func (*EphemeralContainers) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainers)(nil))
}

func (i *EphemeralContainers) ToEphemeralContainersOutput() EphemeralContainersOutput {
	return i.ToEphemeralContainersOutputWithContext(context.Background())
}

func (i *EphemeralContainers) ToEphemeralContainersOutputWithContext(ctx context.Context) EphemeralContainersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainersOutput)
}

func (i *EphemeralContainers) ToEphemeralContainersPtrOutput() EphemeralContainersPtrOutput {
	return i.ToEphemeralContainersPtrOutputWithContext(context.Background())
}

func (i *EphemeralContainers) ToEphemeralContainersPtrOutputWithContext(ctx context.Context) EphemeralContainersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainersPtrOutput)
}

type EphemeralContainersPtrInput interface {
	pulumi.Input

	ToEphemeralContainersPtrOutput() EphemeralContainersPtrOutput
	ToEphemeralContainersPtrOutputWithContext(ctx context.Context) EphemeralContainersPtrOutput
}

type ephemeralContainersPtrType EphemeralContainersArgs

func (*ephemeralContainersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralContainers)(nil))
}

func (i *ephemeralContainersPtrType) ToEphemeralContainersPtrOutput() EphemeralContainersPtrOutput {
	return i.ToEphemeralContainersPtrOutputWithContext(context.Background())
}

func (i *ephemeralContainersPtrType) ToEphemeralContainersPtrOutputWithContext(ctx context.Context) EphemeralContainersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainersPtrOutput)
}

// EphemeralContainersArrayInput is an input type that accepts EphemeralContainersArray and EphemeralContainersArrayOutput values.
// You can construct a concrete instance of `EphemeralContainersArrayInput` via:
//
//          EphemeralContainersArray{ EphemeralContainersArgs{...} }
type EphemeralContainersArrayInput interface {
	pulumi.Input

	ToEphemeralContainersArrayOutput() EphemeralContainersArrayOutput
	ToEphemeralContainersArrayOutputWithContext(context.Context) EphemeralContainersArrayOutput
}

type EphemeralContainersArray []EphemeralContainersInput

func (EphemeralContainersArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EphemeralContainers)(nil))
}

func (i EphemeralContainersArray) ToEphemeralContainersArrayOutput() EphemeralContainersArrayOutput {
	return i.ToEphemeralContainersArrayOutputWithContext(context.Background())
}

func (i EphemeralContainersArray) ToEphemeralContainersArrayOutputWithContext(ctx context.Context) EphemeralContainersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainersArrayOutput)
}

// EphemeralContainersMapInput is an input type that accepts EphemeralContainersMap and EphemeralContainersMapOutput values.
// You can construct a concrete instance of `EphemeralContainersMapInput` via:
//
//          EphemeralContainersMap{ "key": EphemeralContainersArgs{...} }
type EphemeralContainersMapInput interface {
	pulumi.Input

	ToEphemeralContainersMapOutput() EphemeralContainersMapOutput
	ToEphemeralContainersMapOutputWithContext(context.Context) EphemeralContainersMapOutput
}

type EphemeralContainersMap map[string]EphemeralContainersInput

func (EphemeralContainersMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EphemeralContainers)(nil))
}

func (i EphemeralContainersMap) ToEphemeralContainersMapOutput() EphemeralContainersMapOutput {
	return i.ToEphemeralContainersMapOutputWithContext(context.Background())
}

func (i EphemeralContainersMap) ToEphemeralContainersMapOutputWithContext(ctx context.Context) EphemeralContainersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainersMapOutput)
}

type EphemeralContainersOutput struct {
	*pulumi.OutputState
}

func (EphemeralContainersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainers)(nil))
}

func (o EphemeralContainersOutput) ToEphemeralContainersOutput() EphemeralContainersOutput {
	return o
}

func (o EphemeralContainersOutput) ToEphemeralContainersOutputWithContext(ctx context.Context) EphemeralContainersOutput {
	return o
}

func (o EphemeralContainersOutput) ToEphemeralContainersPtrOutput() EphemeralContainersPtrOutput {
	return o.ToEphemeralContainersPtrOutputWithContext(context.Background())
}

func (o EphemeralContainersOutput) ToEphemeralContainersPtrOutputWithContext(ctx context.Context) EphemeralContainersPtrOutput {
	return o.ApplyT(func(v EphemeralContainers) *EphemeralContainers {
		return &v
	}).(EphemeralContainersPtrOutput)
}

type EphemeralContainersPtrOutput struct {
	*pulumi.OutputState
}

func (EphemeralContainersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralContainers)(nil))
}

func (o EphemeralContainersPtrOutput) ToEphemeralContainersPtrOutput() EphemeralContainersPtrOutput {
	return o
}

func (o EphemeralContainersPtrOutput) ToEphemeralContainersPtrOutputWithContext(ctx context.Context) EphemeralContainersPtrOutput {
	return o
}

type EphemeralContainersArrayOutput struct{ *pulumi.OutputState }

func (EphemeralContainersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EphemeralContainers)(nil))
}

func (o EphemeralContainersArrayOutput) ToEphemeralContainersArrayOutput() EphemeralContainersArrayOutput {
	return o
}

func (o EphemeralContainersArrayOutput) ToEphemeralContainersArrayOutputWithContext(ctx context.Context) EphemeralContainersArrayOutput {
	return o
}

func (o EphemeralContainersArrayOutput) Index(i pulumi.IntInput) EphemeralContainersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EphemeralContainers {
		return vs[0].([]EphemeralContainers)[vs[1].(int)]
	}).(EphemeralContainersOutput)
}

type EphemeralContainersMapOutput struct{ *pulumi.OutputState }

func (EphemeralContainersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EphemeralContainers)(nil))
}

func (o EphemeralContainersMapOutput) ToEphemeralContainersMapOutput() EphemeralContainersMapOutput {
	return o
}

func (o EphemeralContainersMapOutput) ToEphemeralContainersMapOutputWithContext(ctx context.Context) EphemeralContainersMapOutput {
	return o
}

func (o EphemeralContainersMapOutput) MapIndex(k pulumi.StringInput) EphemeralContainersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EphemeralContainers {
		return vs[0].(map[string]EphemeralContainers)[vs[1].(string)]
	}).(EphemeralContainersOutput)
}

func init() {
	pulumi.RegisterOutputType(EphemeralContainersOutput{})
	pulumi.RegisterOutputType(EphemeralContainersPtrOutput{})
	pulumi.RegisterOutputType(EphemeralContainersArrayOutput{})
	pulumi.RegisterOutputType(EphemeralContainersMapOutput{})
}
