// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "kubernetes:core/v1:Binding":
		r = &Binding{}
	case "kubernetes:core/v1:ConfigMap":
		r = &ConfigMap{}
	case "kubernetes:core/v1:ConfigMapList":
		r = &ConfigMapList{}
	case "kubernetes:core/v1:Endpoints":
		r = &Endpoints{}
	case "kubernetes:core/v1:EndpointsList":
		r = &EndpointsList{}
	case "kubernetes:core/v1:Event":
		r = &Event{}
	case "kubernetes:core/v1:EventList":
		r = &EventList{}
	case "kubernetes:core/v1:LimitRange":
		r = &LimitRange{}
	case "kubernetes:core/v1:LimitRangeList":
		r = &LimitRangeList{}
	case "kubernetes:core/v1:Namespace":
		r = &Namespace{}
	case "kubernetes:core/v1:NamespaceList":
		r = &NamespaceList{}
	case "kubernetes:core/v1:Node":
		r = &Node{}
	case "kubernetes:core/v1:NodeList":
		r = &NodeList{}
	case "kubernetes:core/v1:PersistentVolume":
		r = &PersistentVolume{}
	case "kubernetes:core/v1:PersistentVolumeClaim":
		r = &PersistentVolumeClaim{}
	case "kubernetes:core/v1:PersistentVolumeClaimList":
		r = &PersistentVolumeClaimList{}
	case "kubernetes:core/v1:PersistentVolumeList":
		r = &PersistentVolumeList{}
	case "kubernetes:core/v1:Pod":
		r = &Pod{}
	case "kubernetes:core/v1:PodList":
		r = &PodList{}
	case "kubernetes:core/v1:PodTemplate":
		r = &PodTemplate{}
	case "kubernetes:core/v1:PodTemplateList":
		r = &PodTemplateList{}
	case "kubernetes:core/v1:ReplicationController":
		r = &ReplicationController{}
	case "kubernetes:core/v1:ReplicationControllerList":
		r = &ReplicationControllerList{}
	case "kubernetes:core/v1:ResourceQuota":
		r = &ResourceQuota{}
	case "kubernetes:core/v1:ResourceQuotaList":
		r = &ResourceQuotaList{}
	case "kubernetes:core/v1:Secret":
		r = &Secret{}
	case "kubernetes:core/v1:SecretList":
		r = &SecretList{}
	case "kubernetes:core/v1:Service":
		r = &Service{}
	case "kubernetes:core/v1:ServiceAccount":
		r = &ServiceAccount{}
	case "kubernetes:core/v1:ServiceAccountList":
		r = &ServiceAccountList{}
	case "kubernetes:core/v1:ServiceList":
		r = &ServiceList{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := kubernetes.PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"kubernetes",
		"core/v1",
		&module{version},
	)
}
