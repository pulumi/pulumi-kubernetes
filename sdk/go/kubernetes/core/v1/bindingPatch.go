// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target ObjectReferencePatchPtrOutput `pulumi:"target"`
}

// NewBindingPatch registers a new resource with the given unique name, arguments, and options.
func NewBindingPatch(ctx *pulumi.Context,
	name string, args *BindingPatchArgs, opts ...pulumi.ResourceOption) (*BindingPatch, error) {
	if args == nil {
		args = &BindingPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("v1")
	args.Kind = pulumi.StringPtr("Binding")
	var resource BindingPatch
	err := ctx.RegisterResource("kubernetes:core/v1:BindingPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBindingPatch gets an existing BindingPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBindingPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindingPatchState, opts ...pulumi.ResourceOption) (*BindingPatch, error) {
	var resource BindingPatch
	err := ctx.ReadResource("kubernetes:core/v1:BindingPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BindingPatch resources.
type bindingPatchState struct {
}

type BindingPatchState struct {
}

func (BindingPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingPatchState)(nil)).Elem()
}

type bindingPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target *ObjectReferencePatch `pulumi:"target"`
}

// The set of arguments for constructing a BindingPatch resource.
type BindingPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// The target object that you want to bind to the standard object.
	Target ObjectReferencePatchPtrInput
}

func (BindingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingPatchArgs)(nil)).Elem()
}

type BindingPatchInput interface {
	pulumi.Input

	ToBindingPatchOutput() BindingPatchOutput
	ToBindingPatchOutputWithContext(ctx context.Context) BindingPatchOutput
}

func (*BindingPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingPatch)(nil)).Elem()
}

func (i *BindingPatch) ToBindingPatchOutput() BindingPatchOutput {
	return i.ToBindingPatchOutputWithContext(context.Background())
}

func (i *BindingPatch) ToBindingPatchOutputWithContext(ctx context.Context) BindingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPatchOutput)
}

// BindingPatchArrayInput is an input type that accepts BindingPatchArray and BindingPatchArrayOutput values.
// You can construct a concrete instance of `BindingPatchArrayInput` via:
//
//	BindingPatchArray{ BindingPatchArgs{...} }
type BindingPatchArrayInput interface {
	pulumi.Input

	ToBindingPatchArrayOutput() BindingPatchArrayOutput
	ToBindingPatchArrayOutputWithContext(context.Context) BindingPatchArrayOutput
}

type BindingPatchArray []BindingPatchInput

func (BindingPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingPatch)(nil)).Elem()
}

func (i BindingPatchArray) ToBindingPatchArrayOutput() BindingPatchArrayOutput {
	return i.ToBindingPatchArrayOutputWithContext(context.Background())
}

func (i BindingPatchArray) ToBindingPatchArrayOutputWithContext(ctx context.Context) BindingPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPatchArrayOutput)
}

// BindingPatchMapInput is an input type that accepts BindingPatchMap and BindingPatchMapOutput values.
// You can construct a concrete instance of `BindingPatchMapInput` via:
//
//	BindingPatchMap{ "key": BindingPatchArgs{...} }
type BindingPatchMapInput interface {
	pulumi.Input

	ToBindingPatchMapOutput() BindingPatchMapOutput
	ToBindingPatchMapOutputWithContext(context.Context) BindingPatchMapOutput
}

type BindingPatchMap map[string]BindingPatchInput

func (BindingPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingPatch)(nil)).Elem()
}

func (i BindingPatchMap) ToBindingPatchMapOutput() BindingPatchMapOutput {
	return i.ToBindingPatchMapOutputWithContext(context.Background())
}

func (i BindingPatchMap) ToBindingPatchMapOutputWithContext(ctx context.Context) BindingPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPatchMapOutput)
}

type BindingPatchOutput struct{ *pulumi.OutputState }

func (BindingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingPatch)(nil)).Elem()
}

func (o BindingPatchOutput) ToBindingPatchOutput() BindingPatchOutput {
	return o
}

func (o BindingPatchOutput) ToBindingPatchOutputWithContext(ctx context.Context) BindingPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BindingPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindingPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BindingPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindingPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BindingPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *BindingPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// The target object that you want to bind to the standard object.
func (o BindingPatchOutput) Target() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *BindingPatch) ObjectReferencePatchPtrOutput { return v.Target }).(ObjectReferencePatchPtrOutput)
}

type BindingPatchArrayOutput struct{ *pulumi.OutputState }

func (BindingPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingPatch)(nil)).Elem()
}

func (o BindingPatchArrayOutput) ToBindingPatchArrayOutput() BindingPatchArrayOutput {
	return o
}

func (o BindingPatchArrayOutput) ToBindingPatchArrayOutputWithContext(ctx context.Context) BindingPatchArrayOutput {
	return o
}

func (o BindingPatchArrayOutput) Index(i pulumi.IntInput) BindingPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BindingPatch {
		return vs[0].([]*BindingPatch)[vs[1].(int)]
	}).(BindingPatchOutput)
}

type BindingPatchMapOutput struct{ *pulumi.OutputState }

func (BindingPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingPatch)(nil)).Elem()
}

func (o BindingPatchMapOutput) ToBindingPatchMapOutput() BindingPatchMapOutput {
	return o
}

func (o BindingPatchMapOutput) ToBindingPatchMapOutputWithContext(ctx context.Context) BindingPatchMapOutput {
	return o
}

func (o BindingPatchMapOutput) MapIndex(k pulumi.StringInput) BindingPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BindingPatch {
		return vs[0].(map[string]*BindingPatch)[vs[1].(string)]
	}).(BindingPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingPatchInput)(nil)).Elem(), &BindingPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingPatchArrayInput)(nil)).Elem(), BindingPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingPatchMapInput)(nil)).Elem(), BindingPatchMap{})
	pulumi.RegisterOutputType(BindingPatchOutput{})
	pulumi.RegisterOutputType(BindingPatchArrayOutput{})
	pulumi.RegisterOutputType(BindingPatchMapOutput{})
}
