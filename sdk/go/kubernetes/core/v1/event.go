// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type Event struct {
	pulumi.CustomResourceState

	// What action was taken/failed regarding to the Regarding object.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count pulumi.IntPtrOutput `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime pulumi.StringPtrOutput `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp pulumi.StringPtrOutput `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject ObjectReferenceOutput `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp pulumi.StringPtrOutput `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason pulumi.StringPtrOutput `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related ObjectReferencePtrOutput `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent pulumi.StringPtrOutput `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringPtrOutput `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesPtrOutput `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source EventSourcePtrOutput `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewEvent registers a new resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context,
	name string, args *EventArgs, opts ...pulumi.ResourceOption) (*Event, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InvolvedObject == nil {
		return nil, errors.New("invalid value for required argument 'InvolvedObject'")
	}
	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	args.ApiVersion = pulumi.StringPtr("v1")
	args.Kind = pulumi.StringPtr("Event")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:events.k8s.io/v1:Event"),
		},
		{
			Type: pulumi.String("kubernetes:events.k8s.io/v1beta1:Event"),
		},
	})
	opts = append(opts, aliases)
	var resource Event
	err := ctx.RegisterResource("kubernetes:core/v1:Event", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvent gets an existing Event resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventState, opts ...pulumi.ResourceOption) (*Event, error) {
	var resource Event
	err := ctx.ReadResource("kubernetes:core/v1:Event", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Event resources.
type eventState struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count *int `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime *string `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject *ObjectReference `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related *ObjectReference `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeries `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source *EventSource `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `pulumi:"type"`
}

type EventState struct {
	// What action was taken/failed regarding to the Regarding object.
	Action pulumi.StringPtrInput
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// The number of times this event has occurred.
	Count pulumi.IntPtrInput
	// Time when this Event was first observed.
	EventTime pulumi.StringPtrInput
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp pulumi.StringPtrInput
	// The object that this event is about.
	InvolvedObject ObjectReferencePtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp pulumi.StringPtrInput
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason pulumi.StringPtrInput
	// Optional secondary object for more complex actions.
	Related ObjectReferencePtrInput
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent pulumi.StringPtrInput
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringPtrInput
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesPtrInput
	// The component reporting this event. Should be a short machine understandable string.
	Source EventSourcePtrInput
	// Type of this event (Normal, Warning), new types could be added in the future
	Type pulumi.StringPtrInput
}

func (EventState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventState)(nil)).Elem()
}

type eventArgs struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count *int `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime *string `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject ObjectReference `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMeta `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related *ObjectReference `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeries `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source *EventSource `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Event resource.
type EventArgs struct {
	// What action was taken/failed regarding to the Regarding object.
	Action pulumi.StringPtrInput
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// The number of times this event has occurred.
	Count pulumi.IntPtrInput
	// Time when this Event was first observed.
	EventTime pulumi.StringPtrInput
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp pulumi.StringPtrInput
	// The object that this event is about.
	InvolvedObject ObjectReferenceInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp pulumi.StringPtrInput
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaInput
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason pulumi.StringPtrInput
	// Optional secondary object for more complex actions.
	Related ObjectReferencePtrInput
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent pulumi.StringPtrInput
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringPtrInput
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesPtrInput
	// The component reporting this event. Should be a short machine understandable string.
	Source EventSourcePtrInput
	// Type of this event (Normal, Warning), new types could be added in the future
	Type pulumi.StringPtrInput
}

func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArgs)(nil)).Elem()
}

type EventInput interface {
	pulumi.Input

	ToEventOutput() EventOutput
	ToEventOutputWithContext(ctx context.Context) EventOutput
}

func (*Event) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil))
}

func (i *Event) ToEventOutput() EventOutput {
	return i.ToEventOutputWithContext(context.Background())
}

func (i *Event) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOutput)
}

func (i *Event) ToEventPtrOutput() EventPtrOutput {
	return i.ToEventPtrOutputWithContext(context.Background())
}

func (i *Event) ToEventPtrOutputWithContext(ctx context.Context) EventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPtrOutput)
}

type EventPtrInput interface {
	pulumi.Input

	ToEventPtrOutput() EventPtrOutput
	ToEventPtrOutputWithContext(ctx context.Context) EventPtrOutput
}

type eventPtrType EventArgs

func (*eventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil))
}

func (i *eventPtrType) ToEventPtrOutput() EventPtrOutput {
	return i.ToEventPtrOutputWithContext(context.Background())
}

func (i *eventPtrType) ToEventPtrOutputWithContext(ctx context.Context) EventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPtrOutput)
}

// EventArrayInput is an input type that accepts EventArray and EventArrayOutput values.
// You can construct a concrete instance of `EventArrayInput` via:
//
//          EventArray{ EventArgs{...} }
type EventArrayInput interface {
	pulumi.Input

	ToEventArrayOutput() EventArrayOutput
	ToEventArrayOutputWithContext(context.Context) EventArrayOutput
}

type EventArray []EventInput

func (EventArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Event)(nil))
}

func (i EventArray) ToEventArrayOutput() EventArrayOutput {
	return i.ToEventArrayOutputWithContext(context.Background())
}

func (i EventArray) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArrayOutput)
}

// EventMapInput is an input type that accepts EventMap and EventMapOutput values.
// You can construct a concrete instance of `EventMapInput` via:
//
//          EventMap{ "key": EventArgs{...} }
type EventMapInput interface {
	pulumi.Input

	ToEventMapOutput() EventMapOutput
	ToEventMapOutputWithContext(context.Context) EventMapOutput
}

type EventMap map[string]EventInput

func (EventMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Event)(nil))
}

func (i EventMap) ToEventMapOutput() EventMapOutput {
	return i.ToEventMapOutputWithContext(context.Background())
}

func (i EventMap) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventMapOutput)
}

type EventOutput struct {
	*pulumi.OutputState
}

func (EventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil))
}

func (o EventOutput) ToEventOutput() EventOutput {
	return o
}

func (o EventOutput) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return o
}

func (o EventOutput) ToEventPtrOutput() EventPtrOutput {
	return o.ToEventPtrOutputWithContext(context.Background())
}

func (o EventOutput) ToEventPtrOutputWithContext(ctx context.Context) EventPtrOutput {
	return o.ApplyT(func(v Event) *Event {
		return &v
	}).(EventPtrOutput)
}

type EventPtrOutput struct {
	*pulumi.OutputState
}

func (EventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil))
}

func (o EventPtrOutput) ToEventPtrOutput() EventPtrOutput {
	return o
}

func (o EventPtrOutput) ToEventPtrOutputWithContext(ctx context.Context) EventPtrOutput {
	return o
}

type EventArrayOutput struct{ *pulumi.OutputState }

func (EventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Event)(nil))
}

func (o EventArrayOutput) ToEventArrayOutput() EventArrayOutput {
	return o
}

func (o EventArrayOutput) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return o
}

func (o EventArrayOutput) Index(i pulumi.IntInput) EventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Event {
		return vs[0].([]Event)[vs[1].(int)]
	}).(EventOutput)
}

type EventMapOutput struct{ *pulumi.OutputState }

func (EventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Event)(nil))
}

func (o EventMapOutput) ToEventMapOutput() EventMapOutput {
	return o
}

func (o EventMapOutput) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return o
}

func (o EventMapOutput) MapIndex(k pulumi.StringInput) EventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Event {
		return vs[0].(map[string]Event)[vs[1].(string)]
	}).(EventOutput)
}

func init() {
	pulumi.RegisterOutputType(EventOutput{})
	pulumi.RegisterOutputType(EventPtrOutput{})
	pulumi.RegisterOutputType(EventArrayOutput{})
	pulumi.RegisterOutputType(EventMapOutput{})
}
