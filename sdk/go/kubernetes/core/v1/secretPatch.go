// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapOutput `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrOutput `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData pulumi.StringMapOutput `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewSecretPatch registers a new resource with the given unique name, arguments, and options.
func NewSecretPatch(ctx *pulumi.Context,
	name string, args *SecretPatchArgs, opts ...pulumi.ResourceOption) (*SecretPatch, error) {
	if args == nil {
		args = &SecretPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("v1")
	args.Kind = pulumi.StringPtr("Secret")
	var resource SecretPatch
	err := ctx.RegisterResource("kubernetes:core/v1:SecretPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretPatch gets an existing SecretPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretPatchState, opts ...pulumi.ResourceOption) (*SecretPatch, error) {
	var resource SecretPatch
	err := ctx.ReadResource("kubernetes:core/v1:SecretPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretPatch resources.
type secretPatchState struct {
}

type SecretPatchState struct {
}

func (SecretPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretPatchState)(nil)).Elem()
}

type secretPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data map[string]string `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData map[string]string `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a SecretPatch resource.
type SecretPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapInput
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData pulumi.StringMapInput
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type pulumi.StringPtrInput
}

func (SecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretPatchArgs)(nil)).Elem()
}

type SecretPatchInput interface {
	pulumi.Input

	ToSecretPatchOutput() SecretPatchOutput
	ToSecretPatchOutputWithContext(ctx context.Context) SecretPatchOutput
}

func (*SecretPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretPatch)(nil)).Elem()
}

func (i *SecretPatch) ToSecretPatchOutput() SecretPatchOutput {
	return i.ToSecretPatchOutputWithContext(context.Background())
}

func (i *SecretPatch) ToSecretPatchOutputWithContext(ctx context.Context) SecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPatchOutput)
}

// SecretPatchArrayInput is an input type that accepts SecretPatchArray and SecretPatchArrayOutput values.
// You can construct a concrete instance of `SecretPatchArrayInput` via:
//
//	SecretPatchArray{ SecretPatchArgs{...} }
type SecretPatchArrayInput interface {
	pulumi.Input

	ToSecretPatchArrayOutput() SecretPatchArrayOutput
	ToSecretPatchArrayOutputWithContext(context.Context) SecretPatchArrayOutput
}

type SecretPatchArray []SecretPatchInput

func (SecretPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretPatch)(nil)).Elem()
}

func (i SecretPatchArray) ToSecretPatchArrayOutput() SecretPatchArrayOutput {
	return i.ToSecretPatchArrayOutputWithContext(context.Background())
}

func (i SecretPatchArray) ToSecretPatchArrayOutputWithContext(ctx context.Context) SecretPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPatchArrayOutput)
}

// SecretPatchMapInput is an input type that accepts SecretPatchMap and SecretPatchMapOutput values.
// You can construct a concrete instance of `SecretPatchMapInput` via:
//
//	SecretPatchMap{ "key": SecretPatchArgs{...} }
type SecretPatchMapInput interface {
	pulumi.Input

	ToSecretPatchMapOutput() SecretPatchMapOutput
	ToSecretPatchMapOutputWithContext(context.Context) SecretPatchMapOutput
}

type SecretPatchMap map[string]SecretPatchInput

func (SecretPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretPatch)(nil)).Elem()
}

func (i SecretPatchMap) ToSecretPatchMapOutput() SecretPatchMapOutput {
	return i.ToSecretPatchMapOutputWithContext(context.Background())
}

func (i SecretPatchMap) ToSecretPatchMapOutputWithContext(ctx context.Context) SecretPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPatchMapOutput)
}

type SecretPatchOutput struct{ *pulumi.OutputState }

func (SecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretPatch)(nil)).Elem()
}

func (o SecretPatchOutput) ToSecretPatchOutput() SecretPatchOutput {
	return o
}

func (o SecretPatchOutput) ToSecretPatchOutputWithContext(ctx context.Context) SecretPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SecretPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
func (o SecretPatchOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (o SecretPatchOutput) Immutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.BoolPtrOutput { return v.Immutable }).(pulumi.BoolPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SecretPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SecretPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
func (o SecretPatchOutput) StringData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.StringMapOutput { return v.StringData }).(pulumi.StringMapOutput)
}

// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
func (o SecretPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretPatch) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type SecretPatchArrayOutput struct{ *pulumi.OutputState }

func (SecretPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretPatch)(nil)).Elem()
}

func (o SecretPatchArrayOutput) ToSecretPatchArrayOutput() SecretPatchArrayOutput {
	return o
}

func (o SecretPatchArrayOutput) ToSecretPatchArrayOutputWithContext(ctx context.Context) SecretPatchArrayOutput {
	return o
}

func (o SecretPatchArrayOutput) Index(i pulumi.IntInput) SecretPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretPatch {
		return vs[0].([]*SecretPatch)[vs[1].(int)]
	}).(SecretPatchOutput)
}

type SecretPatchMapOutput struct{ *pulumi.OutputState }

func (SecretPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretPatch)(nil)).Elem()
}

func (o SecretPatchMapOutput) ToSecretPatchMapOutput() SecretPatchMapOutput {
	return o
}

func (o SecretPatchMapOutput) ToSecretPatchMapOutputWithContext(ctx context.Context) SecretPatchMapOutput {
	return o
}

func (o SecretPatchMapOutput) MapIndex(k pulumi.StringInput) SecretPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretPatch {
		return vs[0].(map[string]*SecretPatch)[vs[1].(string)]
	}).(SecretPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPatchInput)(nil)).Elem(), &SecretPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPatchArrayInput)(nil)).Elem(), SecretPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPatchMapInput)(nil)).Elem(), SecretPatchMap{})
	pulumi.RegisterOutputType(SecretPatchOutput{})
	pulumi.RegisterOutputType(SecretPatchArrayOutput{})
	pulumi.RegisterOutputType(SecretPatchMapOutput{})
}
