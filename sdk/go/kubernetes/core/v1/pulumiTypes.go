// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID string `pulumi:"volumeID"`
}

// AWSElasticBlockStoreVolumeSourceInput is an input type that accepts AWSElasticBlockStoreVolumeSourceArgs and AWSElasticBlockStoreVolumeSourceOutput values.
// You can construct a concrete instance of `AWSElasticBlockStoreVolumeSourceInput` via:
//
//	AWSElasticBlockStoreVolumeSourceArgs{...}
type AWSElasticBlockStoreVolumeSourceInput interface {
	pulumi.Input

	ToAWSElasticBlockStoreVolumeSourceOutput() AWSElasticBlockStoreVolumeSourceOutput
	ToAWSElasticBlockStoreVolumeSourceOutputWithContext(context.Context) AWSElasticBlockStoreVolumeSourceOutput
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSourceArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (AWSElasticBlockStoreVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AWSElasticBlockStoreVolumeSource)(nil)).Elem()
}

func (i AWSElasticBlockStoreVolumeSourceArgs) ToAWSElasticBlockStoreVolumeSourceOutput() AWSElasticBlockStoreVolumeSourceOutput {
	return i.ToAWSElasticBlockStoreVolumeSourceOutputWithContext(context.Background())
}

func (i AWSElasticBlockStoreVolumeSourceArgs) ToAWSElasticBlockStoreVolumeSourceOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourceOutput)
}

func (i AWSElasticBlockStoreVolumeSourceArgs) ToAWSElasticBlockStoreVolumeSourcePtrOutput() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return i.ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(context.Background())
}

func (i AWSElasticBlockStoreVolumeSourceArgs) ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourceOutput).ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(ctx)
}

// AWSElasticBlockStoreVolumeSourcePtrInput is an input type that accepts AWSElasticBlockStoreVolumeSourceArgs, AWSElasticBlockStoreVolumeSourcePtr and AWSElasticBlockStoreVolumeSourcePtrOutput values.
// You can construct a concrete instance of `AWSElasticBlockStoreVolumeSourcePtrInput` via:
//
//	        AWSElasticBlockStoreVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type AWSElasticBlockStoreVolumeSourcePtrInput interface {
	pulumi.Input

	ToAWSElasticBlockStoreVolumeSourcePtrOutput() AWSElasticBlockStoreVolumeSourcePtrOutput
	ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(context.Context) AWSElasticBlockStoreVolumeSourcePtrOutput
}

type awselasticBlockStoreVolumeSourcePtrType AWSElasticBlockStoreVolumeSourceArgs

func AWSElasticBlockStoreVolumeSourcePtr(v *AWSElasticBlockStoreVolumeSourceArgs) AWSElasticBlockStoreVolumeSourcePtrInput {
	return (*awselasticBlockStoreVolumeSourcePtrType)(v)
}

func (*awselasticBlockStoreVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AWSElasticBlockStoreVolumeSource)(nil)).Elem()
}

func (i *awselasticBlockStoreVolumeSourcePtrType) ToAWSElasticBlockStoreVolumeSourcePtrOutput() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return i.ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *awselasticBlockStoreVolumeSourcePtrType) ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourcePtrOutput)
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSourceOutput struct{ *pulumi.OutputState }

func (AWSElasticBlockStoreVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AWSElasticBlockStoreVolumeSource)(nil)).Elem()
}

func (o AWSElasticBlockStoreVolumeSourceOutput) ToAWSElasticBlockStoreVolumeSourceOutput() AWSElasticBlockStoreVolumeSourceOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourceOutput) ToAWSElasticBlockStoreVolumeSourceOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourceOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourceOutput) ToAWSElasticBlockStoreVolumeSourcePtrOutput() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o.ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(context.Background())
}

func (o AWSElasticBlockStoreVolumeSourceOutput) ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AWSElasticBlockStoreVolumeSource) *AWSElasticBlockStoreVolumeSource {
		return &v
	}).(AWSElasticBlockStoreVolumeSourcePtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AWSElasticBlockStoreVolumeSourceOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSource) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSource) string { return v.VolumeID }).(pulumi.StringOutput)
}

type AWSElasticBlockStoreVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (AWSElasticBlockStoreVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AWSElasticBlockStoreVolumeSource)(nil)).Elem()
}

func (o AWSElasticBlockStoreVolumeSourcePtrOutput) ToAWSElasticBlockStoreVolumeSourcePtrOutput() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePtrOutput) ToAWSElasticBlockStoreVolumeSourcePtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePtrOutput) Elem() AWSElasticBlockStoreVolumeSourceOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSource) AWSElasticBlockStoreVolumeSource {
		if v != nil {
			return *v
		}
		var ret AWSElasticBlockStoreVolumeSource
		return ret
	}).(AWSElasticBlockStoreVolumeSourceOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AWSElasticBlockStoreVolumeSourcePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSourcePatch struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID *string `pulumi:"volumeID"`
}

// AWSElasticBlockStoreVolumeSourcePatchInput is an input type that accepts AWSElasticBlockStoreVolumeSourcePatchArgs and AWSElasticBlockStoreVolumeSourcePatchOutput values.
// You can construct a concrete instance of `AWSElasticBlockStoreVolumeSourcePatchInput` via:
//
//	AWSElasticBlockStoreVolumeSourcePatchArgs{...}
type AWSElasticBlockStoreVolumeSourcePatchInput interface {
	pulumi.Input

	ToAWSElasticBlockStoreVolumeSourcePatchOutput() AWSElasticBlockStoreVolumeSourcePatchOutput
	ToAWSElasticBlockStoreVolumeSourcePatchOutputWithContext(context.Context) AWSElasticBlockStoreVolumeSourcePatchOutput
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSourcePatchArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (AWSElasticBlockStoreVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AWSElasticBlockStoreVolumeSourcePatch)(nil)).Elem()
}

func (i AWSElasticBlockStoreVolumeSourcePatchArgs) ToAWSElasticBlockStoreVolumeSourcePatchOutput() AWSElasticBlockStoreVolumeSourcePatchOutput {
	return i.ToAWSElasticBlockStoreVolumeSourcePatchOutputWithContext(context.Background())
}

func (i AWSElasticBlockStoreVolumeSourcePatchArgs) ToAWSElasticBlockStoreVolumeSourcePatchOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourcePatchOutput)
}

func (i AWSElasticBlockStoreVolumeSourcePatchArgs) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutput() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return i.ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i AWSElasticBlockStoreVolumeSourcePatchArgs) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourcePatchOutput).ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(ctx)
}

// AWSElasticBlockStoreVolumeSourcePatchPtrInput is an input type that accepts AWSElasticBlockStoreVolumeSourcePatchArgs, AWSElasticBlockStoreVolumeSourcePatchPtr and AWSElasticBlockStoreVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `AWSElasticBlockStoreVolumeSourcePatchPtrInput` via:
//
//	        AWSElasticBlockStoreVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type AWSElasticBlockStoreVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToAWSElasticBlockStoreVolumeSourcePatchPtrOutput() AWSElasticBlockStoreVolumeSourcePatchPtrOutput
	ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(context.Context) AWSElasticBlockStoreVolumeSourcePatchPtrOutput
}

type awselasticBlockStoreVolumeSourcePatchPtrType AWSElasticBlockStoreVolumeSourcePatchArgs

func AWSElasticBlockStoreVolumeSourcePatchPtr(v *AWSElasticBlockStoreVolumeSourcePatchArgs) AWSElasticBlockStoreVolumeSourcePatchPtrInput {
	return (*awselasticBlockStoreVolumeSourcePatchPtrType)(v)
}

func (*awselasticBlockStoreVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AWSElasticBlockStoreVolumeSourcePatch)(nil)).Elem()
}

func (i *awselasticBlockStoreVolumeSourcePatchPtrType) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutput() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return i.ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *awselasticBlockStoreVolumeSourcePatchPtrType) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AWSElasticBlockStoreVolumeSourcePatchPtrOutput)
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (AWSElasticBlockStoreVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AWSElasticBlockStoreVolumeSourcePatch)(nil)).Elem()
}

func (o AWSElasticBlockStoreVolumeSourcePatchOutput) ToAWSElasticBlockStoreVolumeSourcePatchOutput() AWSElasticBlockStoreVolumeSourcePatchOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePatchOutput) ToAWSElasticBlockStoreVolumeSourcePatchOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePatchOutput) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutput() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o.ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o AWSElasticBlockStoreVolumeSourcePatchOutput) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AWSElasticBlockStoreVolumeSourcePatch) *AWSElasticBlockStoreVolumeSourcePatch {
		return &v
	}).(AWSElasticBlockStoreVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AWSElasticBlockStoreVolumeSourcePatchOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSourcePatch) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AWSElasticBlockStoreVolumeSourcePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type AWSElasticBlockStoreVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (AWSElasticBlockStoreVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AWSElasticBlockStoreVolumeSourcePatch)(nil)).Elem()
}

func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutput() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) ToAWSElasticBlockStoreVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o
}

func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) Elem() AWSElasticBlockStoreVolumeSourcePatchOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSourcePatch) AWSElasticBlockStoreVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret AWSElasticBlockStoreVolumeSourcePatch
		return ret
	}).(AWSElasticBlockStoreVolumeSourcePatchOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AWSElasticBlockStoreVolumeSourcePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AWSElasticBlockStoreVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
type Affinity struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity *NodeAffinity `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *PodAffinity `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity *PodAntiAffinity `pulumi:"podAntiAffinity"`
}

// AffinityInput is an input type that accepts AffinityArgs and AffinityOutput values.
// You can construct a concrete instance of `AffinityInput` via:
//
//	AffinityArgs{...}
type AffinityInput interface {
	pulumi.Input

	ToAffinityOutput() AffinityOutput
	ToAffinityOutputWithContext(context.Context) AffinityOutput
}

// Affinity is a group of affinity scheduling rules.
type AffinityArgs struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity NodeAffinityPtrInput `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity PodAffinityPtrInput `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity PodAntiAffinityPtrInput `pulumi:"podAntiAffinity"`
}

func (AffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Affinity)(nil)).Elem()
}

func (i AffinityArgs) ToAffinityOutput() AffinityOutput {
	return i.ToAffinityOutputWithContext(context.Background())
}

func (i AffinityArgs) ToAffinityOutputWithContext(ctx context.Context) AffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityOutput)
}

func (i AffinityArgs) ToAffinityPtrOutput() AffinityPtrOutput {
	return i.ToAffinityPtrOutputWithContext(context.Background())
}

func (i AffinityArgs) ToAffinityPtrOutputWithContext(ctx context.Context) AffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityOutput).ToAffinityPtrOutputWithContext(ctx)
}

// AffinityPtrInput is an input type that accepts AffinityArgs, AffinityPtr and AffinityPtrOutput values.
// You can construct a concrete instance of `AffinityPtrInput` via:
//
//	        AffinityArgs{...}
//
//	or:
//
//	        nil
type AffinityPtrInput interface {
	pulumi.Input

	ToAffinityPtrOutput() AffinityPtrOutput
	ToAffinityPtrOutputWithContext(context.Context) AffinityPtrOutput
}

type affinityPtrType AffinityArgs

func AffinityPtr(v *AffinityArgs) AffinityPtrInput {
	return (*affinityPtrType)(v)
}

func (*affinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Affinity)(nil)).Elem()
}

func (i *affinityPtrType) ToAffinityPtrOutput() AffinityPtrOutput {
	return i.ToAffinityPtrOutputWithContext(context.Background())
}

func (i *affinityPtrType) ToAffinityPtrOutputWithContext(ctx context.Context) AffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
type AffinityOutput struct{ *pulumi.OutputState }

func (AffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Affinity)(nil)).Elem()
}

func (o AffinityOutput) ToAffinityOutput() AffinityOutput {
	return o
}

func (o AffinityOutput) ToAffinityOutputWithContext(ctx context.Context) AffinityOutput {
	return o
}

func (o AffinityOutput) ToAffinityPtrOutput() AffinityPtrOutput {
	return o.ToAffinityPtrOutputWithContext(context.Background())
}

func (o AffinityOutput) ToAffinityPtrOutputWithContext(ctx context.Context) AffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Affinity) *Affinity {
		return &v
	}).(AffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AffinityOutput) NodeAffinity() NodeAffinityPtrOutput {
	return o.ApplyT(func(v Affinity) *NodeAffinity { return v.NodeAffinity }).(NodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityOutput) PodAffinity() PodAffinityPtrOutput {
	return o.ApplyT(func(v Affinity) *PodAffinity { return v.PodAffinity }).(PodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityOutput) PodAntiAffinity() PodAntiAffinityPtrOutput {
	return o.ApplyT(func(v Affinity) *PodAntiAffinity { return v.PodAntiAffinity }).(PodAntiAffinityPtrOutput)
}

type AffinityPtrOutput struct{ *pulumi.OutputState }

func (AffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Affinity)(nil)).Elem()
}

func (o AffinityPtrOutput) ToAffinityPtrOutput() AffinityPtrOutput {
	return o
}

func (o AffinityPtrOutput) ToAffinityPtrOutputWithContext(ctx context.Context) AffinityPtrOutput {
	return o
}

func (o AffinityPtrOutput) Elem() AffinityOutput {
	return o.ApplyT(func(v *Affinity) Affinity {
		if v != nil {
			return *v
		}
		var ret Affinity
		return ret
	}).(AffinityOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AffinityPtrOutput) NodeAffinity() NodeAffinityPtrOutput {
	return o.ApplyT(func(v *Affinity) *NodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(NodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPtrOutput) PodAffinity() PodAffinityPtrOutput {
	return o.ApplyT(func(v *Affinity) *PodAffinity {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(PodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPtrOutput) PodAntiAffinity() PodAntiAffinityPtrOutput {
	return o.ApplyT(func(v *Affinity) *PodAntiAffinity {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(PodAntiAffinityPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
type AffinityPatch struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity *NodeAffinityPatch `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *PodAffinityPatch `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity *PodAntiAffinityPatch `pulumi:"podAntiAffinity"`
}

// AffinityPatchInput is an input type that accepts AffinityPatchArgs and AffinityPatchOutput values.
// You can construct a concrete instance of `AffinityPatchInput` via:
//
//	AffinityPatchArgs{...}
type AffinityPatchInput interface {
	pulumi.Input

	ToAffinityPatchOutput() AffinityPatchOutput
	ToAffinityPatchOutputWithContext(context.Context) AffinityPatchOutput
}

// Affinity is a group of affinity scheduling rules.
type AffinityPatchArgs struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity NodeAffinityPatchPtrInput `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity PodAffinityPatchPtrInput `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity PodAntiAffinityPatchPtrInput `pulumi:"podAntiAffinity"`
}

func (AffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AffinityPatch)(nil)).Elem()
}

func (i AffinityPatchArgs) ToAffinityPatchOutput() AffinityPatchOutput {
	return i.ToAffinityPatchOutputWithContext(context.Background())
}

func (i AffinityPatchArgs) ToAffinityPatchOutputWithContext(ctx context.Context) AffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityPatchOutput)
}

func (i AffinityPatchArgs) ToAffinityPatchPtrOutput() AffinityPatchPtrOutput {
	return i.ToAffinityPatchPtrOutputWithContext(context.Background())
}

func (i AffinityPatchArgs) ToAffinityPatchPtrOutputWithContext(ctx context.Context) AffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityPatchOutput).ToAffinityPatchPtrOutputWithContext(ctx)
}

// AffinityPatchPtrInput is an input type that accepts AffinityPatchArgs, AffinityPatchPtr and AffinityPatchPtrOutput values.
// You can construct a concrete instance of `AffinityPatchPtrInput` via:
//
//	        AffinityPatchArgs{...}
//
//	or:
//
//	        nil
type AffinityPatchPtrInput interface {
	pulumi.Input

	ToAffinityPatchPtrOutput() AffinityPatchPtrOutput
	ToAffinityPatchPtrOutputWithContext(context.Context) AffinityPatchPtrOutput
}

type affinityPatchPtrType AffinityPatchArgs

func AffinityPatchPtr(v *AffinityPatchArgs) AffinityPatchPtrInput {
	return (*affinityPatchPtrType)(v)
}

func (*affinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AffinityPatch)(nil)).Elem()
}

func (i *affinityPatchPtrType) ToAffinityPatchPtrOutput() AffinityPatchPtrOutput {
	return i.ToAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *affinityPatchPtrType) ToAffinityPatchPtrOutputWithContext(ctx context.Context) AffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AffinityPatchPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
type AffinityPatchOutput struct{ *pulumi.OutputState }

func (AffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AffinityPatch)(nil)).Elem()
}

func (o AffinityPatchOutput) ToAffinityPatchOutput() AffinityPatchOutput {
	return o
}

func (o AffinityPatchOutput) ToAffinityPatchOutputWithContext(ctx context.Context) AffinityPatchOutput {
	return o
}

func (o AffinityPatchOutput) ToAffinityPatchPtrOutput() AffinityPatchPtrOutput {
	return o.ToAffinityPatchPtrOutputWithContext(context.Background())
}

func (o AffinityPatchOutput) ToAffinityPatchPtrOutputWithContext(ctx context.Context) AffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AffinityPatch) *AffinityPatch {
		return &v
	}).(AffinityPatchPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AffinityPatchOutput) NodeAffinity() NodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v AffinityPatch) *NodeAffinityPatch { return v.NodeAffinity }).(NodeAffinityPatchPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPatchOutput) PodAffinity() PodAffinityPatchPtrOutput {
	return o.ApplyT(func(v AffinityPatch) *PodAffinityPatch { return v.PodAffinity }).(PodAffinityPatchPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPatchOutput) PodAntiAffinity() PodAntiAffinityPatchPtrOutput {
	return o.ApplyT(func(v AffinityPatch) *PodAntiAffinityPatch { return v.PodAntiAffinity }).(PodAntiAffinityPatchPtrOutput)
}

type AffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (AffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AffinityPatch)(nil)).Elem()
}

func (o AffinityPatchPtrOutput) ToAffinityPatchPtrOutput() AffinityPatchPtrOutput {
	return o
}

func (o AffinityPatchPtrOutput) ToAffinityPatchPtrOutputWithContext(ctx context.Context) AffinityPatchPtrOutput {
	return o
}

func (o AffinityPatchPtrOutput) Elem() AffinityPatchOutput {
	return o.ApplyT(func(v *AffinityPatch) AffinityPatch {
		if v != nil {
			return *v
		}
		var ret AffinityPatch
		return ret
	}).(AffinityPatchOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AffinityPatchPtrOutput) NodeAffinity() NodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v *AffinityPatch) *NodeAffinityPatch {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(NodeAffinityPatchPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPatchPtrOutput) PodAffinity() PodAffinityPatchPtrOutput {
	return o.ApplyT(func(v *AffinityPatch) *PodAffinityPatch {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(PodAffinityPatchPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AffinityPatchPtrOutput) PodAntiAffinity() PodAntiAffinityPatchPtrOutput {
	return o.ApplyT(func(v *AffinityPatch) *PodAntiAffinityPatch {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(PodAntiAffinityPatchPtrOutput)
}

// AttachedVolume describes a volume attached to a node
type AttachedVolume struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath string `pulumi:"devicePath"`
	// Name of the attached volume
	Name string `pulumi:"name"`
}

// AttachedVolumeInput is an input type that accepts AttachedVolumeArgs and AttachedVolumeOutput values.
// You can construct a concrete instance of `AttachedVolumeInput` via:
//
//	AttachedVolumeArgs{...}
type AttachedVolumeInput interface {
	pulumi.Input

	ToAttachedVolumeOutput() AttachedVolumeOutput
	ToAttachedVolumeOutputWithContext(context.Context) AttachedVolumeOutput
}

// AttachedVolume describes a volume attached to a node
type AttachedVolumeArgs struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath pulumi.StringInput `pulumi:"devicePath"`
	// Name of the attached volume
	Name pulumi.StringInput `pulumi:"name"`
}

func (AttachedVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedVolume)(nil)).Elem()
}

func (i AttachedVolumeArgs) ToAttachedVolumeOutput() AttachedVolumeOutput {
	return i.ToAttachedVolumeOutputWithContext(context.Background())
}

func (i AttachedVolumeArgs) ToAttachedVolumeOutputWithContext(ctx context.Context) AttachedVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedVolumeOutput)
}

// AttachedVolumeArrayInput is an input type that accepts AttachedVolumeArray and AttachedVolumeArrayOutput values.
// You can construct a concrete instance of `AttachedVolumeArrayInput` via:
//
//	AttachedVolumeArray{ AttachedVolumeArgs{...} }
type AttachedVolumeArrayInput interface {
	pulumi.Input

	ToAttachedVolumeArrayOutput() AttachedVolumeArrayOutput
	ToAttachedVolumeArrayOutputWithContext(context.Context) AttachedVolumeArrayOutput
}

type AttachedVolumeArray []AttachedVolumeInput

func (AttachedVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedVolume)(nil)).Elem()
}

func (i AttachedVolumeArray) ToAttachedVolumeArrayOutput() AttachedVolumeArrayOutput {
	return i.ToAttachedVolumeArrayOutputWithContext(context.Background())
}

func (i AttachedVolumeArray) ToAttachedVolumeArrayOutputWithContext(ctx context.Context) AttachedVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedVolumeArrayOutput)
}

// AttachedVolume describes a volume attached to a node
type AttachedVolumeOutput struct{ *pulumi.OutputState }

func (AttachedVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedVolume)(nil)).Elem()
}

func (o AttachedVolumeOutput) ToAttachedVolumeOutput() AttachedVolumeOutput {
	return o
}

func (o AttachedVolumeOutput) ToAttachedVolumeOutputWithContext(ctx context.Context) AttachedVolumeOutput {
	return o
}

// DevicePath represents the device path where the volume should be available
func (o AttachedVolumeOutput) DevicePath() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedVolume) string { return v.DevicePath }).(pulumi.StringOutput)
}

// Name of the attached volume
func (o AttachedVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedVolume) string { return v.Name }).(pulumi.StringOutput)
}

type AttachedVolumeArrayOutput struct{ *pulumi.OutputState }

func (AttachedVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedVolume)(nil)).Elem()
}

func (o AttachedVolumeArrayOutput) ToAttachedVolumeArrayOutput() AttachedVolumeArrayOutput {
	return o
}

func (o AttachedVolumeArrayOutput) ToAttachedVolumeArrayOutputWithContext(ctx context.Context) AttachedVolumeArrayOutput {
	return o
}

func (o AttachedVolumeArrayOutput) Index(i pulumi.IntInput) AttachedVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedVolume {
		return vs[0].([]AttachedVolume)[vs[1].(int)]
	}).(AttachedVolumeOutput)
}

// AttachedVolume describes a volume attached to a node
type AttachedVolumePatch struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath *string `pulumi:"devicePath"`
	// Name of the attached volume
	Name *string `pulumi:"name"`
}

// AttachedVolumePatchInput is an input type that accepts AttachedVolumePatchArgs and AttachedVolumePatchOutput values.
// You can construct a concrete instance of `AttachedVolumePatchInput` via:
//
//	AttachedVolumePatchArgs{...}
type AttachedVolumePatchInput interface {
	pulumi.Input

	ToAttachedVolumePatchOutput() AttachedVolumePatchOutput
	ToAttachedVolumePatchOutputWithContext(context.Context) AttachedVolumePatchOutput
}

// AttachedVolume describes a volume attached to a node
type AttachedVolumePatchArgs struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
	// Name of the attached volume
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AttachedVolumePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedVolumePatch)(nil)).Elem()
}

func (i AttachedVolumePatchArgs) ToAttachedVolumePatchOutput() AttachedVolumePatchOutput {
	return i.ToAttachedVolumePatchOutputWithContext(context.Background())
}

func (i AttachedVolumePatchArgs) ToAttachedVolumePatchOutputWithContext(ctx context.Context) AttachedVolumePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedVolumePatchOutput)
}

// AttachedVolumePatchArrayInput is an input type that accepts AttachedVolumePatchArray and AttachedVolumePatchArrayOutput values.
// You can construct a concrete instance of `AttachedVolumePatchArrayInput` via:
//
//	AttachedVolumePatchArray{ AttachedVolumePatchArgs{...} }
type AttachedVolumePatchArrayInput interface {
	pulumi.Input

	ToAttachedVolumePatchArrayOutput() AttachedVolumePatchArrayOutput
	ToAttachedVolumePatchArrayOutputWithContext(context.Context) AttachedVolumePatchArrayOutput
}

type AttachedVolumePatchArray []AttachedVolumePatchInput

func (AttachedVolumePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedVolumePatch)(nil)).Elem()
}

func (i AttachedVolumePatchArray) ToAttachedVolumePatchArrayOutput() AttachedVolumePatchArrayOutput {
	return i.ToAttachedVolumePatchArrayOutputWithContext(context.Background())
}

func (i AttachedVolumePatchArray) ToAttachedVolumePatchArrayOutputWithContext(ctx context.Context) AttachedVolumePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedVolumePatchArrayOutput)
}

// AttachedVolume describes a volume attached to a node
type AttachedVolumePatchOutput struct{ *pulumi.OutputState }

func (AttachedVolumePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedVolumePatch)(nil)).Elem()
}

func (o AttachedVolumePatchOutput) ToAttachedVolumePatchOutput() AttachedVolumePatchOutput {
	return o
}

func (o AttachedVolumePatchOutput) ToAttachedVolumePatchOutputWithContext(ctx context.Context) AttachedVolumePatchOutput {
	return o
}

// DevicePath represents the device path where the volume should be available
func (o AttachedVolumePatchOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedVolumePatch) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

// Name of the attached volume
func (o AttachedVolumePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedVolumePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AttachedVolumePatchArrayOutput struct{ *pulumi.OutputState }

func (AttachedVolumePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedVolumePatch)(nil)).Elem()
}

func (o AttachedVolumePatchArrayOutput) ToAttachedVolumePatchArrayOutput() AttachedVolumePatchArrayOutput {
	return o
}

func (o AttachedVolumePatchArrayOutput) ToAttachedVolumePatchArrayOutputWithContext(ctx context.Context) AttachedVolumePatchArrayOutput {
	return o
}

func (o AttachedVolumePatchArrayOutput) Index(i pulumi.IntInput) AttachedVolumePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedVolumePatch {
		return vs[0].([]AttachedVolumePatch)[vs[1].(int)]
	}).(AttachedVolumePatchOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSource struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName string `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI string `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AzureDiskVolumeSourceInput is an input type that accepts AzureDiskVolumeSourceArgs and AzureDiskVolumeSourceOutput values.
// You can construct a concrete instance of `AzureDiskVolumeSourceInput` via:
//
//	AzureDiskVolumeSourceArgs{...}
type AzureDiskVolumeSourceInput interface {
	pulumi.Input

	ToAzureDiskVolumeSourceOutput() AzureDiskVolumeSourceOutput
	ToAzureDiskVolumeSourceOutputWithContext(context.Context) AzureDiskVolumeSourceOutput
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSourceArgs struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName pulumi.StringInput `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI pulumi.StringInput `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AzureDiskVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskVolumeSource)(nil)).Elem()
}

func (i AzureDiskVolumeSourceArgs) ToAzureDiskVolumeSourceOutput() AzureDiskVolumeSourceOutput {
	return i.ToAzureDiskVolumeSourceOutputWithContext(context.Background())
}

func (i AzureDiskVolumeSourceArgs) ToAzureDiskVolumeSourceOutputWithContext(ctx context.Context) AzureDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourceOutput)
}

func (i AzureDiskVolumeSourceArgs) ToAzureDiskVolumeSourcePtrOutput() AzureDiskVolumeSourcePtrOutput {
	return i.ToAzureDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i AzureDiskVolumeSourceArgs) ToAzureDiskVolumeSourcePtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourceOutput).ToAzureDiskVolumeSourcePtrOutputWithContext(ctx)
}

// AzureDiskVolumeSourcePtrInput is an input type that accepts AzureDiskVolumeSourceArgs, AzureDiskVolumeSourcePtr and AzureDiskVolumeSourcePtrOutput values.
// You can construct a concrete instance of `AzureDiskVolumeSourcePtrInput` via:
//
//	        AzureDiskVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type AzureDiskVolumeSourcePtrInput interface {
	pulumi.Input

	ToAzureDiskVolumeSourcePtrOutput() AzureDiskVolumeSourcePtrOutput
	ToAzureDiskVolumeSourcePtrOutputWithContext(context.Context) AzureDiskVolumeSourcePtrOutput
}

type azureDiskVolumeSourcePtrType AzureDiskVolumeSourceArgs

func AzureDiskVolumeSourcePtr(v *AzureDiskVolumeSourceArgs) AzureDiskVolumeSourcePtrInput {
	return (*azureDiskVolumeSourcePtrType)(v)
}

func (*azureDiskVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDiskVolumeSource)(nil)).Elem()
}

func (i *azureDiskVolumeSourcePtrType) ToAzureDiskVolumeSourcePtrOutput() AzureDiskVolumeSourcePtrOutput {
	return i.ToAzureDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *azureDiskVolumeSourcePtrType) ToAzureDiskVolumeSourcePtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourcePtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSourceOutput struct{ *pulumi.OutputState }

func (AzureDiskVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskVolumeSource)(nil)).Elem()
}

func (o AzureDiskVolumeSourceOutput) ToAzureDiskVolumeSourceOutput() AzureDiskVolumeSourceOutput {
	return o
}

func (o AzureDiskVolumeSourceOutput) ToAzureDiskVolumeSourceOutputWithContext(ctx context.Context) AzureDiskVolumeSourceOutput {
	return o
}

func (o AzureDiskVolumeSourceOutput) ToAzureDiskVolumeSourcePtrOutput() AzureDiskVolumeSourcePtrOutput {
	return o.ToAzureDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (o AzureDiskVolumeSourceOutput) ToAzureDiskVolumeSourcePtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDiskVolumeSource) *AzureDiskVolumeSource {
		return &v
	}).(AzureDiskVolumeSourcePtrOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o AzureDiskVolumeSourceOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o AzureDiskVolumeSourceOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) string { return v.DiskName }).(pulumi.StringOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o AzureDiskVolumeSourceOutput) DiskURI() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) string { return v.DiskURI }).(pulumi.StringOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AzureDiskVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AzureDiskVolumeSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureDiskVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AzureDiskVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureDiskVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDiskVolumeSource)(nil)).Elem()
}

func (o AzureDiskVolumeSourcePtrOutput) ToAzureDiskVolumeSourcePtrOutput() AzureDiskVolumeSourcePtrOutput {
	return o
}

func (o AzureDiskVolumeSourcePtrOutput) ToAzureDiskVolumeSourcePtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePtrOutput {
	return o
}

func (o AzureDiskVolumeSourcePtrOutput) Elem() AzureDiskVolumeSourceOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) AzureDiskVolumeSource {
		if v != nil {
			return *v
		}
		var ret AzureDiskVolumeSource
		return ret
	}).(AzureDiskVolumeSourceOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o AzureDiskVolumeSourcePtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o AzureDiskVolumeSourcePtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.DiskName
	}).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o AzureDiskVolumeSourcePtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AzureDiskVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AzureDiskVolumeSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureDiskVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSourcePatch struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName *string `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI *string `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AzureDiskVolumeSourcePatchInput is an input type that accepts AzureDiskVolumeSourcePatchArgs and AzureDiskVolumeSourcePatchOutput values.
// You can construct a concrete instance of `AzureDiskVolumeSourcePatchInput` via:
//
//	AzureDiskVolumeSourcePatchArgs{...}
type AzureDiskVolumeSourcePatchInput interface {
	pulumi.Input

	ToAzureDiskVolumeSourcePatchOutput() AzureDiskVolumeSourcePatchOutput
	ToAzureDiskVolumeSourcePatchOutputWithContext(context.Context) AzureDiskVolumeSourcePatchOutput
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSourcePatchArgs struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI pulumi.StringPtrInput `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AzureDiskVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskVolumeSourcePatch)(nil)).Elem()
}

func (i AzureDiskVolumeSourcePatchArgs) ToAzureDiskVolumeSourcePatchOutput() AzureDiskVolumeSourcePatchOutput {
	return i.ToAzureDiskVolumeSourcePatchOutputWithContext(context.Background())
}

func (i AzureDiskVolumeSourcePatchArgs) ToAzureDiskVolumeSourcePatchOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourcePatchOutput)
}

func (i AzureDiskVolumeSourcePatchArgs) ToAzureDiskVolumeSourcePatchPtrOutput() AzureDiskVolumeSourcePatchPtrOutput {
	return i.ToAzureDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i AzureDiskVolumeSourcePatchArgs) ToAzureDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourcePatchOutput).ToAzureDiskVolumeSourcePatchPtrOutputWithContext(ctx)
}

// AzureDiskVolumeSourcePatchPtrInput is an input type that accepts AzureDiskVolumeSourcePatchArgs, AzureDiskVolumeSourcePatchPtr and AzureDiskVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `AzureDiskVolumeSourcePatchPtrInput` via:
//
//	        AzureDiskVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type AzureDiskVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToAzureDiskVolumeSourcePatchPtrOutput() AzureDiskVolumeSourcePatchPtrOutput
	ToAzureDiskVolumeSourcePatchPtrOutputWithContext(context.Context) AzureDiskVolumeSourcePatchPtrOutput
}

type azureDiskVolumeSourcePatchPtrType AzureDiskVolumeSourcePatchArgs

func AzureDiskVolumeSourcePatchPtr(v *AzureDiskVolumeSourcePatchArgs) AzureDiskVolumeSourcePatchPtrInput {
	return (*azureDiskVolumeSourcePatchPtrType)(v)
}

func (*azureDiskVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDiskVolumeSourcePatch)(nil)).Elem()
}

func (i *azureDiskVolumeSourcePatchPtrType) ToAzureDiskVolumeSourcePatchPtrOutput() AzureDiskVolumeSourcePatchPtrOutput {
	return i.ToAzureDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *azureDiskVolumeSourcePatchPtrType) ToAzureDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskVolumeSourcePatchPtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (AzureDiskVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskVolumeSourcePatch)(nil)).Elem()
}

func (o AzureDiskVolumeSourcePatchOutput) ToAzureDiskVolumeSourcePatchOutput() AzureDiskVolumeSourcePatchOutput {
	return o
}

func (o AzureDiskVolumeSourcePatchOutput) ToAzureDiskVolumeSourcePatchOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchOutput {
	return o
}

func (o AzureDiskVolumeSourcePatchOutput) ToAzureDiskVolumeSourcePatchPtrOutput() AzureDiskVolumeSourcePatchPtrOutput {
	return o.ToAzureDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o AzureDiskVolumeSourcePatchOutput) ToAzureDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDiskVolumeSourcePatch) *AzureDiskVolumeSourcePatch {
		return &v
	}).(AzureDiskVolumeSourcePatchPtrOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o AzureDiskVolumeSourcePatchOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o AzureDiskVolumeSourcePatchOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o AzureDiskVolumeSourcePatchOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *string { return v.DiskURI }).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AzureDiskVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AzureDiskVolumeSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureDiskVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureDiskVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AzureDiskVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (AzureDiskVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDiskVolumeSourcePatch)(nil)).Elem()
}

func (o AzureDiskVolumeSourcePatchPtrOutput) ToAzureDiskVolumeSourcePatchPtrOutput() AzureDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureDiskVolumeSourcePatchPtrOutput) ToAzureDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureDiskVolumeSourcePatchPtrOutput) Elem() AzureDiskVolumeSourcePatchOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) AzureDiskVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret AzureDiskVolumeSourcePatch
		return ret
	}).(AzureDiskVolumeSourcePatchOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o AzureDiskVolumeSourcePatchPtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o AzureDiskVolumeSourcePatchPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o AzureDiskVolumeSourcePatchPtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AzureDiskVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AzureDiskVolumeSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureDiskVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureDiskVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSource struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName string `pulumi:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace *string `pulumi:"secretNamespace"`
	// shareName is the azure Share Name
	ShareName string `pulumi:"shareName"`
}

// AzureFilePersistentVolumeSourceInput is an input type that accepts AzureFilePersistentVolumeSourceArgs and AzureFilePersistentVolumeSourceOutput values.
// You can construct a concrete instance of `AzureFilePersistentVolumeSourceInput` via:
//
//	AzureFilePersistentVolumeSourceArgs{...}
type AzureFilePersistentVolumeSourceInput interface {
	pulumi.Input

	ToAzureFilePersistentVolumeSourceOutput() AzureFilePersistentVolumeSourceOutput
	ToAzureFilePersistentVolumeSourceOutputWithContext(context.Context) AzureFilePersistentVolumeSourceOutput
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSourceArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace pulumi.StringPtrInput `pulumi:"secretNamespace"`
	// shareName is the azure Share Name
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (AzureFilePersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFilePersistentVolumeSource)(nil)).Elem()
}

func (i AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourceOutput() AzureFilePersistentVolumeSourceOutput {
	return i.ToAzureFilePersistentVolumeSourceOutputWithContext(context.Background())
}

func (i AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourceOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourceOutput)
}

func (i AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourcePtrOutput() AzureFilePersistentVolumeSourcePtrOutput {
	return i.ToAzureFilePersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i AzureFilePersistentVolumeSourceArgs) ToAzureFilePersistentVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourceOutput).ToAzureFilePersistentVolumeSourcePtrOutputWithContext(ctx)
}

// AzureFilePersistentVolumeSourcePtrInput is an input type that accepts AzureFilePersistentVolumeSourceArgs, AzureFilePersistentVolumeSourcePtr and AzureFilePersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `AzureFilePersistentVolumeSourcePtrInput` via:
//
//	        AzureFilePersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type AzureFilePersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToAzureFilePersistentVolumeSourcePtrOutput() AzureFilePersistentVolumeSourcePtrOutput
	ToAzureFilePersistentVolumeSourcePtrOutputWithContext(context.Context) AzureFilePersistentVolumeSourcePtrOutput
}

type azureFilePersistentVolumeSourcePtrType AzureFilePersistentVolumeSourceArgs

func AzureFilePersistentVolumeSourcePtr(v *AzureFilePersistentVolumeSourceArgs) AzureFilePersistentVolumeSourcePtrInput {
	return (*azureFilePersistentVolumeSourcePtrType)(v)
}

func (*azureFilePersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFilePersistentVolumeSource)(nil)).Elem()
}

func (i *azureFilePersistentVolumeSourcePtrType) ToAzureFilePersistentVolumeSourcePtrOutput() AzureFilePersistentVolumeSourcePtrOutput {
	return i.ToAzureFilePersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *azureFilePersistentVolumeSourcePtrType) ToAzureFilePersistentVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourcePtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (AzureFilePersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFilePersistentVolumeSource)(nil)).Elem()
}

func (o AzureFilePersistentVolumeSourceOutput) ToAzureFilePersistentVolumeSourceOutput() AzureFilePersistentVolumeSourceOutput {
	return o
}

func (o AzureFilePersistentVolumeSourceOutput) ToAzureFilePersistentVolumeSourceOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourceOutput {
	return o
}

func (o AzureFilePersistentVolumeSourceOutput) ToAzureFilePersistentVolumeSourcePtrOutput() AzureFilePersistentVolumeSourcePtrOutput {
	return o.ToAzureFilePersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o AzureFilePersistentVolumeSourceOutput) ToAzureFilePersistentVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFilePersistentVolumeSource) *AzureFilePersistentVolumeSource {
		return &v
	}).(AzureFilePersistentVolumeSourcePtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFilePersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the name of secret that contains Azure Storage Account Name and Key
func (o AzureFilePersistentVolumeSourceOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSource) string { return v.SecretName }).(pulumi.StringOutput)
}

// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
func (o AzureFilePersistentVolumeSourceOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSource) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

// shareName is the azure Share Name
func (o AzureFilePersistentVolumeSourceOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSource) string { return v.ShareName }).(pulumi.StringOutput)
}

type AzureFilePersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureFilePersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFilePersistentVolumeSource)(nil)).Elem()
}

func (o AzureFilePersistentVolumeSourcePtrOutput) ToAzureFilePersistentVolumeSourcePtrOutput() AzureFilePersistentVolumeSourcePtrOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePtrOutput) ToAzureFilePersistentVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePtrOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePtrOutput) Elem() AzureFilePersistentVolumeSourceOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSource) AzureFilePersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret AzureFilePersistentVolumeSource
		return ret
	}).(AzureFilePersistentVolumeSourceOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFilePersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of secret that contains Azure Storage Account Name and Key
func (o AzureFilePersistentVolumeSourcePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
func (o AzureFilePersistentVolumeSourcePtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure Share Name
func (o AzureFilePersistentVolumeSourcePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSourcePatch struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName *string `pulumi:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace *string `pulumi:"secretNamespace"`
	// shareName is the azure Share Name
	ShareName *string `pulumi:"shareName"`
}

// AzureFilePersistentVolumeSourcePatchInput is an input type that accepts AzureFilePersistentVolumeSourcePatchArgs and AzureFilePersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `AzureFilePersistentVolumeSourcePatchInput` via:
//
//	AzureFilePersistentVolumeSourcePatchArgs{...}
type AzureFilePersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToAzureFilePersistentVolumeSourcePatchOutput() AzureFilePersistentVolumeSourcePatchOutput
	ToAzureFilePersistentVolumeSourcePatchOutputWithContext(context.Context) AzureFilePersistentVolumeSourcePatchOutput
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSourcePatchArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace pulumi.StringPtrInput `pulumi:"secretNamespace"`
	// shareName is the azure Share Name
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
}

func (AzureFilePersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFilePersistentVolumeSourcePatch)(nil)).Elem()
}

func (i AzureFilePersistentVolumeSourcePatchArgs) ToAzureFilePersistentVolumeSourcePatchOutput() AzureFilePersistentVolumeSourcePatchOutput {
	return i.ToAzureFilePersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i AzureFilePersistentVolumeSourcePatchArgs) ToAzureFilePersistentVolumeSourcePatchOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourcePatchOutput)
}

func (i AzureFilePersistentVolumeSourcePatchArgs) ToAzureFilePersistentVolumeSourcePatchPtrOutput() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return i.ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i AzureFilePersistentVolumeSourcePatchArgs) ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourcePatchOutput).ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// AzureFilePersistentVolumeSourcePatchPtrInput is an input type that accepts AzureFilePersistentVolumeSourcePatchArgs, AzureFilePersistentVolumeSourcePatchPtr and AzureFilePersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `AzureFilePersistentVolumeSourcePatchPtrInput` via:
//
//	        AzureFilePersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type AzureFilePersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToAzureFilePersistentVolumeSourcePatchPtrOutput() AzureFilePersistentVolumeSourcePatchPtrOutput
	ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(context.Context) AzureFilePersistentVolumeSourcePatchPtrOutput
}

type azureFilePersistentVolumeSourcePatchPtrType AzureFilePersistentVolumeSourcePatchArgs

func AzureFilePersistentVolumeSourcePatchPtr(v *AzureFilePersistentVolumeSourcePatchArgs) AzureFilePersistentVolumeSourcePatchPtrInput {
	return (*azureFilePersistentVolumeSourcePatchPtrType)(v)
}

func (*azureFilePersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFilePersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *azureFilePersistentVolumeSourcePatchPtrType) ToAzureFilePersistentVolumeSourcePatchPtrOutput() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return i.ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *azureFilePersistentVolumeSourcePatchPtrType) ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePersistentVolumeSourcePatchPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFilePersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (AzureFilePersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFilePersistentVolumeSourcePatch)(nil)).Elem()
}

func (o AzureFilePersistentVolumeSourcePatchOutput) ToAzureFilePersistentVolumeSourcePatchOutput() AzureFilePersistentVolumeSourcePatchOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePatchOutput) ToAzureFilePersistentVolumeSourcePatchOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePatchOutput) ToAzureFilePersistentVolumeSourcePatchPtrOutput() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o.ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o AzureFilePersistentVolumeSourcePatchOutput) ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFilePersistentVolumeSourcePatch) *AzureFilePersistentVolumeSourcePatch {
		return &v
	}).(AzureFilePersistentVolumeSourcePatchPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFilePersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the name of secret that contains Azure Storage Account Name and Key
func (o AzureFilePersistentVolumeSourcePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSourcePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
func (o AzureFilePersistentVolumeSourcePatchOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSourcePatch) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

// shareName is the azure Share Name
func (o AzureFilePersistentVolumeSourcePatchOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePersistentVolumeSourcePatch) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type AzureFilePersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (AzureFilePersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFilePersistentVolumeSourcePatch)(nil)).Elem()
}

func (o AzureFilePersistentVolumeSourcePatchPtrOutput) ToAzureFilePersistentVolumeSourcePatchPtrOutput() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePatchPtrOutput) ToAzureFilePersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureFilePersistentVolumeSourcePatchPtrOutput) Elem() AzureFilePersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSourcePatch) AzureFilePersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret AzureFilePersistentVolumeSourcePatch
		return ret
	}).(AzureFilePersistentVolumeSourcePatchOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFilePersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of secret that contains Azure Storage Account Name and Key
func (o AzureFilePersistentVolumeSourcePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
func (o AzureFilePersistentVolumeSourcePatchPtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure Share Name
func (o AzureFilePersistentVolumeSourcePatchPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSource struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName string `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName string `pulumi:"shareName"`
}

// AzureFileVolumeSourceInput is an input type that accepts AzureFileVolumeSourceArgs and AzureFileVolumeSourceOutput values.
// You can construct a concrete instance of `AzureFileVolumeSourceInput` via:
//
//	AzureFileVolumeSourceArgs{...}
type AzureFileVolumeSourceInput interface {
	pulumi.Input

	ToAzureFileVolumeSourceOutput() AzureFileVolumeSourceOutput
	ToAzureFileVolumeSourceOutputWithContext(context.Context) AzureFileVolumeSourceOutput
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSourceArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (AzureFileVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeSource)(nil)).Elem()
}

func (i AzureFileVolumeSourceArgs) ToAzureFileVolumeSourceOutput() AzureFileVolumeSourceOutput {
	return i.ToAzureFileVolumeSourceOutputWithContext(context.Background())
}

func (i AzureFileVolumeSourceArgs) ToAzureFileVolumeSourceOutputWithContext(ctx context.Context) AzureFileVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourceOutput)
}

func (i AzureFileVolumeSourceArgs) ToAzureFileVolumeSourcePtrOutput() AzureFileVolumeSourcePtrOutput {
	return i.ToAzureFileVolumeSourcePtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeSourceArgs) ToAzureFileVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourceOutput).ToAzureFileVolumeSourcePtrOutputWithContext(ctx)
}

// AzureFileVolumeSourcePtrInput is an input type that accepts AzureFileVolumeSourceArgs, AzureFileVolumeSourcePtr and AzureFileVolumeSourcePtrOutput values.
// You can construct a concrete instance of `AzureFileVolumeSourcePtrInput` via:
//
//	        AzureFileVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type AzureFileVolumeSourcePtrInput interface {
	pulumi.Input

	ToAzureFileVolumeSourcePtrOutput() AzureFileVolumeSourcePtrOutput
	ToAzureFileVolumeSourcePtrOutputWithContext(context.Context) AzureFileVolumeSourcePtrOutput
}

type azureFileVolumeSourcePtrType AzureFileVolumeSourceArgs

func AzureFileVolumeSourcePtr(v *AzureFileVolumeSourceArgs) AzureFileVolumeSourcePtrInput {
	return (*azureFileVolumeSourcePtrType)(v)
}

func (*azureFileVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeSource)(nil)).Elem()
}

func (i *azureFileVolumeSourcePtrType) ToAzureFileVolumeSourcePtrOutput() AzureFileVolumeSourcePtrOutput {
	return i.ToAzureFileVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *azureFileVolumeSourcePtrType) ToAzureFileVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourcePtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSourceOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeSource)(nil)).Elem()
}

func (o AzureFileVolumeSourceOutput) ToAzureFileVolumeSourceOutput() AzureFileVolumeSourceOutput {
	return o
}

func (o AzureFileVolumeSourceOutput) ToAzureFileVolumeSourceOutputWithContext(ctx context.Context) AzureFileVolumeSourceOutput {
	return o
}

func (o AzureFileVolumeSourceOutput) ToAzureFileVolumeSourcePtrOutput() AzureFileVolumeSourcePtrOutput {
	return o.ToAzureFileVolumeSourcePtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeSourceOutput) ToAzureFileVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileVolumeSource) *AzureFileVolumeSource {
		return &v
	}).(AzureFileVolumeSourcePtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFileVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o AzureFileVolumeSourceOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeSource) string { return v.SecretName }).(pulumi.StringOutput)
}

// shareName is the azure share Name
func (o AzureFileVolumeSourceOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeSource) string { return v.ShareName }).(pulumi.StringOutput)
}

type AzureFileVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeSource)(nil)).Elem()
}

func (o AzureFileVolumeSourcePtrOutput) ToAzureFileVolumeSourcePtrOutput() AzureFileVolumeSourcePtrOutput {
	return o
}

func (o AzureFileVolumeSourcePtrOutput) ToAzureFileVolumeSourcePtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePtrOutput {
	return o
}

func (o AzureFileVolumeSourcePtrOutput) Elem() AzureFileVolumeSourceOutput {
	return o.ApplyT(func(v *AzureFileVolumeSource) AzureFileVolumeSource {
		if v != nil {
			return *v
		}
		var ret AzureFileVolumeSource
		return ret
	}).(AzureFileVolumeSourceOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFileVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o AzureFileVolumeSourcePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o AzureFileVolumeSourcePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSourcePatch struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName *string `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName *string `pulumi:"shareName"`
}

// AzureFileVolumeSourcePatchInput is an input type that accepts AzureFileVolumeSourcePatchArgs and AzureFileVolumeSourcePatchOutput values.
// You can construct a concrete instance of `AzureFileVolumeSourcePatchInput` via:
//
//	AzureFileVolumeSourcePatchArgs{...}
type AzureFileVolumeSourcePatchInput interface {
	pulumi.Input

	ToAzureFileVolumeSourcePatchOutput() AzureFileVolumeSourcePatchOutput
	ToAzureFileVolumeSourcePatchOutputWithContext(context.Context) AzureFileVolumeSourcePatchOutput
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSourcePatchArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
}

func (AzureFileVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeSourcePatch)(nil)).Elem()
}

func (i AzureFileVolumeSourcePatchArgs) ToAzureFileVolumeSourcePatchOutput() AzureFileVolumeSourcePatchOutput {
	return i.ToAzureFileVolumeSourcePatchOutputWithContext(context.Background())
}

func (i AzureFileVolumeSourcePatchArgs) ToAzureFileVolumeSourcePatchOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourcePatchOutput)
}

func (i AzureFileVolumeSourcePatchArgs) ToAzureFileVolumeSourcePatchPtrOutput() AzureFileVolumeSourcePatchPtrOutput {
	return i.ToAzureFileVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeSourcePatchArgs) ToAzureFileVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourcePatchOutput).ToAzureFileVolumeSourcePatchPtrOutputWithContext(ctx)
}

// AzureFileVolumeSourcePatchPtrInput is an input type that accepts AzureFileVolumeSourcePatchArgs, AzureFileVolumeSourcePatchPtr and AzureFileVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `AzureFileVolumeSourcePatchPtrInput` via:
//
//	        AzureFileVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type AzureFileVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToAzureFileVolumeSourcePatchPtrOutput() AzureFileVolumeSourcePatchPtrOutput
	ToAzureFileVolumeSourcePatchPtrOutputWithContext(context.Context) AzureFileVolumeSourcePatchPtrOutput
}

type azureFileVolumeSourcePatchPtrType AzureFileVolumeSourcePatchArgs

func AzureFileVolumeSourcePatchPtr(v *AzureFileVolumeSourcePatchArgs) AzureFileVolumeSourcePatchPtrInput {
	return (*azureFileVolumeSourcePatchPtrType)(v)
}

func (*azureFileVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeSourcePatch)(nil)).Elem()
}

func (i *azureFileVolumeSourcePatchPtrType) ToAzureFileVolumeSourcePatchPtrOutput() AzureFileVolumeSourcePatchPtrOutput {
	return i.ToAzureFileVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *azureFileVolumeSourcePatchPtrType) ToAzureFileVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeSourcePatchPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeSourcePatch)(nil)).Elem()
}

func (o AzureFileVolumeSourcePatchOutput) ToAzureFileVolumeSourcePatchOutput() AzureFileVolumeSourcePatchOutput {
	return o
}

func (o AzureFileVolumeSourcePatchOutput) ToAzureFileVolumeSourcePatchOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchOutput {
	return o
}

func (o AzureFileVolumeSourcePatchOutput) ToAzureFileVolumeSourcePatchPtrOutput() AzureFileVolumeSourcePatchPtrOutput {
	return o.ToAzureFileVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeSourcePatchOutput) ToAzureFileVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileVolumeSourcePatch) *AzureFileVolumeSourcePatch {
		return &v
	}).(AzureFileVolumeSourcePatchPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFileVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o AzureFileVolumeSourcePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeSourcePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o AzureFileVolumeSourcePatchOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeSourcePatch) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type AzureFileVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeSourcePatch)(nil)).Elem()
}

func (o AzureFileVolumeSourcePatchPtrOutput) ToAzureFileVolumeSourcePatchPtrOutput() AzureFileVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureFileVolumeSourcePatchPtrOutput) ToAzureFileVolumeSourcePatchPtrOutputWithContext(ctx context.Context) AzureFileVolumeSourcePatchPtrOutput {
	return o
}

func (o AzureFileVolumeSourcePatchPtrOutput) Elem() AzureFileVolumeSourcePatchOutput {
	return o.ApplyT(func(v *AzureFileVolumeSourcePatch) AzureFileVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret AzureFileVolumeSourcePatch
		return ret
	}).(AzureFileVolumeSourcePatchOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AzureFileVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o AzureFileVolumeSourcePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o AzureFileVolumeSourcePatchPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target ObjectReference `pulumi:"target"`
}

// BindingTypeInput is an input type that accepts BindingTypeArgs and BindingTypeOutput values.
// You can construct a concrete instance of `BindingTypeInput` via:
//
//	BindingTypeArgs{...}
type BindingTypeInput interface {
	pulumi.Input

	ToBindingTypeOutput() BindingTypeOutput
	ToBindingTypeOutputWithContext(context.Context) BindingTypeOutput
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target ObjectReferenceInput `pulumi:"target"`
}

func (BindingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingType)(nil)).Elem()
}

func (i BindingTypeArgs) ToBindingTypeOutput() BindingTypeOutput {
	return i.ToBindingTypeOutputWithContext(context.Background())
}

func (i BindingTypeArgs) ToBindingTypeOutputWithContext(ctx context.Context) BindingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingTypeOutput)
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingTypeOutput struct{ *pulumi.OutputState }

func (BindingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingType)(nil)).Elem()
}

func (o BindingTypeOutput) ToBindingTypeOutput() BindingTypeOutput {
	return o
}

func (o BindingTypeOutput) ToBindingTypeOutputWithContext(ctx context.Context) BindingTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BindingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BindingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BindingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BindingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The target object that you want to bind to the standard object.
func (o BindingTypeOutput) Target() ObjectReferenceOutput {
	return o.ApplyT(func(v BindingType) ObjectReference { return v.Target }).(ObjectReferenceOutput)
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target *ObjectReferencePatch `pulumi:"target"`
}

// BindingPatchTypeInput is an input type that accepts BindingPatchTypeArgs and BindingPatchTypeOutput values.
// You can construct a concrete instance of `BindingPatchTypeInput` via:
//
//	BindingPatchTypeArgs{...}
type BindingPatchTypeInput interface {
	pulumi.Input

	ToBindingPatchTypeOutput() BindingPatchTypeOutput
	ToBindingPatchTypeOutputWithContext(context.Context) BindingPatchTypeOutput
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// The target object that you want to bind to the standard object.
	Target ObjectReferencePatchPtrInput `pulumi:"target"`
}

func (BindingPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingPatchType)(nil)).Elem()
}

func (i BindingPatchTypeArgs) ToBindingPatchTypeOutput() BindingPatchTypeOutput {
	return i.ToBindingPatchTypeOutputWithContext(context.Background())
}

func (i BindingPatchTypeArgs) ToBindingPatchTypeOutputWithContext(ctx context.Context) BindingPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPatchTypeOutput)
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type BindingPatchTypeOutput struct{ *pulumi.OutputState }

func (BindingPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingPatchType)(nil)).Elem()
}

func (o BindingPatchTypeOutput) ToBindingPatchTypeOutput() BindingPatchTypeOutput {
	return o
}

func (o BindingPatchTypeOutput) ToBindingPatchTypeOutputWithContext(ctx context.Context) BindingPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BindingPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindingPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BindingPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindingPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BindingPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v BindingPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// The target object that you want to bind to the standard object.
func (o BindingPatchTypeOutput) Target() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v BindingPatchType) *ObjectReferencePatch { return v.Target }).(ObjectReferencePatchPtrOutput)
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSource struct {
	// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerExpandSecretRef *SecretReference `pulumi:"controllerExpandSecretRef"`
	// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef *SecretReference `pulumi:"controllerPublishSecretRef"`
	// driver is the name of the driver to use for this volume. Required.
	Driver string `pulumi:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType *string `pulumi:"fsType"`
	// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeExpandSecretRef *SecretReference `pulumi:"nodeExpandSecretRef"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodePublishSecretRef *SecretReference `pulumi:"nodePublishSecretRef"`
	// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeStageSecretRef *SecretReference `pulumi:"nodeStageSecretRef"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle string `pulumi:"volumeHandle"`
}

// CSIPersistentVolumeSourceInput is an input type that accepts CSIPersistentVolumeSourceArgs and CSIPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `CSIPersistentVolumeSourceInput` via:
//
//	CSIPersistentVolumeSourceArgs{...}
type CSIPersistentVolumeSourceInput interface {
	pulumi.Input

	ToCSIPersistentVolumeSourceOutput() CSIPersistentVolumeSourceOutput
	ToCSIPersistentVolumeSourceOutputWithContext(context.Context) CSIPersistentVolumeSourceOutput
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSourceArgs struct {
	// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerExpandSecretRef SecretReferencePtrInput `pulumi:"controllerExpandSecretRef"`
	// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef SecretReferencePtrInput `pulumi:"controllerPublishSecretRef"`
	// driver is the name of the driver to use for this volume. Required.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeExpandSecretRef SecretReferencePtrInput `pulumi:"nodeExpandSecretRef"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodePublishSecretRef SecretReferencePtrInput `pulumi:"nodePublishSecretRef"`
	// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeStageSecretRef SecretReferencePtrInput `pulumi:"nodeStageSecretRef"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle pulumi.StringInput `pulumi:"volumeHandle"`
}

func (CSIPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPersistentVolumeSource)(nil)).Elem()
}

func (i CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourceOutput() CSIPersistentVolumeSourceOutput {
	return i.ToCSIPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) CSIPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourceOutput)
}

func (i CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourcePtrOutput() CSIPersistentVolumeSourcePtrOutput {
	return i.ToCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CSIPersistentVolumeSourceArgs) ToCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourceOutput).ToCSIPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// CSIPersistentVolumeSourcePtrInput is an input type that accepts CSIPersistentVolumeSourceArgs, CSIPersistentVolumeSourcePtr and CSIPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CSIPersistentVolumeSourcePtrInput` via:
//
//	        CSIPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CSIPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToCSIPersistentVolumeSourcePtrOutput() CSIPersistentVolumeSourcePtrOutput
	ToCSIPersistentVolumeSourcePtrOutputWithContext(context.Context) CSIPersistentVolumeSourcePtrOutput
}

type csipersistentVolumeSourcePtrType CSIPersistentVolumeSourceArgs

func CSIPersistentVolumeSourcePtr(v *CSIPersistentVolumeSourceArgs) CSIPersistentVolumeSourcePtrInput {
	return (*csipersistentVolumeSourcePtrType)(v)
}

func (*csipersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPersistentVolumeSource)(nil)).Elem()
}

func (i *csipersistentVolumeSourcePtrType) ToCSIPersistentVolumeSourcePtrOutput() CSIPersistentVolumeSourcePtrOutput {
	return i.ToCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *csipersistentVolumeSourcePtrType) ToCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourcePtrOutput)
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (CSIPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPersistentVolumeSource)(nil)).Elem()
}

func (o CSIPersistentVolumeSourceOutput) ToCSIPersistentVolumeSourceOutput() CSIPersistentVolumeSourceOutput {
	return o
}

func (o CSIPersistentVolumeSourceOutput) ToCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) CSIPersistentVolumeSourceOutput {
	return o
}

func (o CSIPersistentVolumeSourceOutput) ToCSIPersistentVolumeSourcePtrOutput() CSIPersistentVolumeSourcePtrOutput {
	return o.ToCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CSIPersistentVolumeSourceOutput) ToCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSIPersistentVolumeSource) *CSIPersistentVolumeSource {
		return &v
	}).(CSIPersistentVolumeSourcePtrOutput)
}

// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourceOutput) ControllerExpandSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *SecretReference { return v.ControllerExpandSecretRef }).(SecretReferencePtrOutput)
}

// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourceOutput) ControllerPublishSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *SecretReference { return v.ControllerPublishSecretRef }).(SecretReferencePtrOutput)
}

// driver is the name of the driver to use for this volume. Required.
func (o CSIPersistentVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
func (o CSIPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourceOutput) NodeExpandSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *SecretReference { return v.NodeExpandSecretRef }).(SecretReferencePtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourceOutput) NodePublishSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *SecretReference { return v.NodePublishSecretRef }).(SecretReferencePtrOutput)
}

// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourceOutput) NodeStageSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *SecretReference { return v.NodeStageSecretRef }).(SecretReferencePtrOutput)
}

// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
func (o CSIPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes of the volume to publish.
func (o CSIPersistentVolumeSourceOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
func (o CSIPersistentVolumeSourceOutput) VolumeHandle() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSource) string { return v.VolumeHandle }).(pulumi.StringOutput)
}

type CSIPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CSIPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPersistentVolumeSource)(nil)).Elem()
}

func (o CSIPersistentVolumeSourcePtrOutput) ToCSIPersistentVolumeSourcePtrOutput() CSIPersistentVolumeSourcePtrOutput {
	return o
}

func (o CSIPersistentVolumeSourcePtrOutput) ToCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePtrOutput {
	return o
}

func (o CSIPersistentVolumeSourcePtrOutput) Elem() CSIPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) CSIPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret CSIPersistentVolumeSource
		return ret
	}).(CSIPersistentVolumeSourceOutput)
}

// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePtrOutput) ControllerExpandSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.ControllerExpandSecretRef
	}).(SecretReferencePtrOutput)
}

// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePtrOutput) ControllerPublishSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.ControllerPublishSecretRef
	}).(SecretReferencePtrOutput)
}

// driver is the name of the driver to use for this volume. Required.
func (o CSIPersistentVolumeSourcePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
func (o CSIPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePtrOutput) NodeExpandSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.NodeExpandSecretRef
	}).(SecretReferencePtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePtrOutput) NodePublishSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(SecretReferencePtrOutput)
}

// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePtrOutput) NodeStageSecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.NodeStageSecretRef
	}).(SecretReferencePtrOutput)
}

// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
func (o CSIPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes of the volume to publish.
func (o CSIPersistentVolumeSourcePtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
func (o CSIPersistentVolumeSourcePtrOutput) VolumeHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeHandle
	}).(pulumi.StringPtrOutput)
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSourcePatch struct {
	// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerExpandSecretRef *SecretReferencePatch `pulumi:"controllerExpandSecretRef"`
	// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef *SecretReferencePatch `pulumi:"controllerPublishSecretRef"`
	// driver is the name of the driver to use for this volume. Required.
	Driver *string `pulumi:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType *string `pulumi:"fsType"`
	// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeExpandSecretRef *SecretReferencePatch `pulumi:"nodeExpandSecretRef"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodePublishSecretRef *SecretReferencePatch `pulumi:"nodePublishSecretRef"`
	// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeStageSecretRef *SecretReferencePatch `pulumi:"nodeStageSecretRef"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle *string `pulumi:"volumeHandle"`
}

// CSIPersistentVolumeSourcePatchInput is an input type that accepts CSIPersistentVolumeSourcePatchArgs and CSIPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CSIPersistentVolumeSourcePatchInput` via:
//
//	CSIPersistentVolumeSourcePatchArgs{...}
type CSIPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToCSIPersistentVolumeSourcePatchOutput() CSIPersistentVolumeSourcePatchOutput
	ToCSIPersistentVolumeSourcePatchOutputWithContext(context.Context) CSIPersistentVolumeSourcePatchOutput
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSourcePatchArgs struct {
	// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerExpandSecretRef SecretReferencePatchPtrInput `pulumi:"controllerExpandSecretRef"`
	// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef SecretReferencePatchPtrInput `pulumi:"controllerPublishSecretRef"`
	// driver is the name of the driver to use for this volume. Required.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeExpandSecretRef SecretReferencePatchPtrInput `pulumi:"nodeExpandSecretRef"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodePublishSecretRef SecretReferencePatchPtrInput `pulumi:"nodePublishSecretRef"`
	// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeStageSecretRef SecretReferencePatchPtrInput `pulumi:"nodeStageSecretRef"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle pulumi.StringPtrInput `pulumi:"volumeHandle"`
}

func (CSIPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i CSIPersistentVolumeSourcePatchArgs) ToCSIPersistentVolumeSourcePatchOutput() CSIPersistentVolumeSourcePatchOutput {
	return i.ToCSIPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CSIPersistentVolumeSourcePatchArgs) ToCSIPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourcePatchOutput)
}

func (i CSIPersistentVolumeSourcePatchArgs) ToCSIPersistentVolumeSourcePatchPtrOutput() CSIPersistentVolumeSourcePatchPtrOutput {
	return i.ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CSIPersistentVolumeSourcePatchArgs) ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourcePatchOutput).ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CSIPersistentVolumeSourcePatchPtrInput is an input type that accepts CSIPersistentVolumeSourcePatchArgs, CSIPersistentVolumeSourcePatchPtr and CSIPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CSIPersistentVolumeSourcePatchPtrInput` via:
//
//	        CSIPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CSIPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCSIPersistentVolumeSourcePatchPtrOutput() CSIPersistentVolumeSourcePatchPtrOutput
	ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) CSIPersistentVolumeSourcePatchPtrOutput
}

type csipersistentVolumeSourcePatchPtrType CSIPersistentVolumeSourcePatchArgs

func CSIPersistentVolumeSourcePatchPtr(v *CSIPersistentVolumeSourcePatchArgs) CSIPersistentVolumeSourcePatchPtrInput {
	return (*csipersistentVolumeSourcePatchPtrType)(v)
}

func (*csipersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *csipersistentVolumeSourcePatchPtrType) ToCSIPersistentVolumeSourcePatchPtrOutput() CSIPersistentVolumeSourcePatchPtrOutput {
	return i.ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *csipersistentVolumeSourcePatchPtrType) ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPersistentVolumeSourcePatchPtrOutput)
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type CSIPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CSIPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CSIPersistentVolumeSourcePatchOutput) ToCSIPersistentVolumeSourcePatchOutput() CSIPersistentVolumeSourcePatchOutput {
	return o
}

func (o CSIPersistentVolumeSourcePatchOutput) ToCSIPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchOutput {
	return o
}

func (o CSIPersistentVolumeSourcePatchOutput) ToCSIPersistentVolumeSourcePatchPtrOutput() CSIPersistentVolumeSourcePatchPtrOutput {
	return o.ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CSIPersistentVolumeSourcePatchOutput) ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSIPersistentVolumeSourcePatch) *CSIPersistentVolumeSourcePatch {
		return &v
	}).(CSIPersistentVolumeSourcePatchPtrOutput)
}

// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchOutput) ControllerExpandSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.ControllerExpandSecretRef }).(SecretReferencePatchPtrOutput)
}

// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchOutput) ControllerPublishSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.ControllerPublishSecretRef }).(SecretReferencePatchPtrOutput)
}

// driver is the name of the driver to use for this volume. Required.
func (o CSIPersistentVolumeSourcePatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
func (o CSIPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchOutput) NodeExpandSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.NodeExpandSecretRef }).(SecretReferencePatchPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchOutput) NodePublishSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.NodePublishSecretRef }).(SecretReferencePatchPtrOutput)
}

// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchOutput) NodeStageSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.NodeStageSecretRef }).(SecretReferencePatchPtrOutput)
}

// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
func (o CSIPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes of the volume to publish.
func (o CSIPersistentVolumeSourcePatchOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
func (o CSIPersistentVolumeSourcePatchOutput) VolumeHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPersistentVolumeSourcePatch) *string { return v.VolumeHandle }).(pulumi.StringPtrOutput)
}

type CSIPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CSIPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CSIPersistentVolumeSourcePatchPtrOutput) ToCSIPersistentVolumeSourcePatchPtrOutput() CSIPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CSIPersistentVolumeSourcePatchPtrOutput) ToCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CSIPersistentVolumeSourcePatchPtrOutput) Elem() CSIPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) CSIPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CSIPersistentVolumeSourcePatch
		return ret
	}).(CSIPersistentVolumeSourcePatchOutput)
}

// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchPtrOutput) ControllerExpandSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.ControllerExpandSecretRef
	}).(SecretReferencePatchPtrOutput)
}

// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchPtrOutput) ControllerPublishSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.ControllerPublishSecretRef
	}).(SecretReferencePatchPtrOutput)
}

// driver is the name of the driver to use for this volume. Required.
func (o CSIPersistentVolumeSourcePatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
func (o CSIPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchPtrOutput) NodeExpandSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.NodeExpandSecretRef
	}).(SecretReferencePatchPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchPtrOutput) NodePublishSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(SecretReferencePatchPtrOutput)
}

// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (o CSIPersistentVolumeSourcePatchPtrOutput) NodeStageSecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.NodeStageSecretRef
	}).(SecretReferencePatchPtrOutput)
}

// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
func (o CSIPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes of the volume to publish.
func (o CSIPersistentVolumeSourcePatchPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
func (o CSIPersistentVolumeSourcePatchPtrOutput) VolumeHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeHandle
	}).(pulumi.StringPtrOutput)
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSource struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef *LocalObjectReference `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// CSIVolumeSourceInput is an input type that accepts CSIVolumeSourceArgs and CSIVolumeSourceOutput values.
// You can construct a concrete instance of `CSIVolumeSourceInput` via:
//
//	CSIVolumeSourceArgs{...}
type CSIVolumeSourceInput interface {
	pulumi.Input

	ToCSIVolumeSourceOutput() CSIVolumeSourceOutput
	ToCSIVolumeSourceOutputWithContext(context.Context) CSIVolumeSourceOutput
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSourceArgs struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef LocalObjectReferencePtrInput `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (CSIVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVolumeSource)(nil)).Elem()
}

func (i CSIVolumeSourceArgs) ToCSIVolumeSourceOutput() CSIVolumeSourceOutput {
	return i.ToCSIVolumeSourceOutputWithContext(context.Background())
}

func (i CSIVolumeSourceArgs) ToCSIVolumeSourceOutputWithContext(ctx context.Context) CSIVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourceOutput)
}

func (i CSIVolumeSourceArgs) ToCSIVolumeSourcePtrOutput() CSIVolumeSourcePtrOutput {
	return i.ToCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CSIVolumeSourceArgs) ToCSIVolumeSourcePtrOutputWithContext(ctx context.Context) CSIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourceOutput).ToCSIVolumeSourcePtrOutputWithContext(ctx)
}

// CSIVolumeSourcePtrInput is an input type that accepts CSIVolumeSourceArgs, CSIVolumeSourcePtr and CSIVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CSIVolumeSourcePtrInput` via:
//
//	        CSIVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CSIVolumeSourcePtrInput interface {
	pulumi.Input

	ToCSIVolumeSourcePtrOutput() CSIVolumeSourcePtrOutput
	ToCSIVolumeSourcePtrOutputWithContext(context.Context) CSIVolumeSourcePtrOutput
}

type csivolumeSourcePtrType CSIVolumeSourceArgs

func CSIVolumeSourcePtr(v *CSIVolumeSourceArgs) CSIVolumeSourcePtrInput {
	return (*csivolumeSourcePtrType)(v)
}

func (*csivolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVolumeSource)(nil)).Elem()
}

func (i *csivolumeSourcePtrType) ToCSIVolumeSourcePtrOutput() CSIVolumeSourcePtrOutput {
	return i.ToCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *csivolumeSourcePtrType) ToCSIVolumeSourcePtrOutputWithContext(ctx context.Context) CSIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourcePtrOutput)
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSourceOutput struct{ *pulumi.OutputState }

func (CSIVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVolumeSource)(nil)).Elem()
}

func (o CSIVolumeSourceOutput) ToCSIVolumeSourceOutput() CSIVolumeSourceOutput {
	return o
}

func (o CSIVolumeSourceOutput) ToCSIVolumeSourceOutputWithContext(ctx context.Context) CSIVolumeSourceOutput {
	return o
}

func (o CSIVolumeSourceOutput) ToCSIVolumeSourcePtrOutput() CSIVolumeSourcePtrOutput {
	return o.ToCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CSIVolumeSourceOutput) ToCSIVolumeSourcePtrOutputWithContext(ctx context.Context) CSIVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSIVolumeSource) *CSIVolumeSource {
		return &v
	}).(CSIVolumeSourcePtrOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o CSIVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVolumeSource) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o CSIVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o CSIVolumeSourceOutput) NodePublishSecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v CSIVolumeSource) *LocalObjectReference { return v.NodePublishSecretRef }).(LocalObjectReferencePtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o CSIVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o CSIVolumeSourceOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVolumeSource) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type CSIVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CSIVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVolumeSource)(nil)).Elem()
}

func (o CSIVolumeSourcePtrOutput) ToCSIVolumeSourcePtrOutput() CSIVolumeSourcePtrOutput {
	return o
}

func (o CSIVolumeSourcePtrOutput) ToCSIVolumeSourcePtrOutputWithContext(ctx context.Context) CSIVolumeSourcePtrOutput {
	return o
}

func (o CSIVolumeSourcePtrOutput) Elem() CSIVolumeSourceOutput {
	return o.ApplyT(func(v *CSIVolumeSource) CSIVolumeSource {
		if v != nil {
			return *v
		}
		var ret CSIVolumeSource
		return ret
	}).(CSIVolumeSourceOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o CSIVolumeSourcePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o CSIVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o CSIVolumeSourcePtrOutput) NodePublishSecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *CSIVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(LocalObjectReferencePtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o CSIVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o CSIVolumeSourcePtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIVolumeSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSourcePatch struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver *string `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef *LocalObjectReferencePatch `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// CSIVolumeSourcePatchInput is an input type that accepts CSIVolumeSourcePatchArgs and CSIVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CSIVolumeSourcePatchInput` via:
//
//	CSIVolumeSourcePatchArgs{...}
type CSIVolumeSourcePatchInput interface {
	pulumi.Input

	ToCSIVolumeSourcePatchOutput() CSIVolumeSourcePatchOutput
	ToCSIVolumeSourcePatchOutputWithContext(context.Context) CSIVolumeSourcePatchOutput
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSourcePatchArgs struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef LocalObjectReferencePatchPtrInput `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (CSIVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVolumeSourcePatch)(nil)).Elem()
}

func (i CSIVolumeSourcePatchArgs) ToCSIVolumeSourcePatchOutput() CSIVolumeSourcePatchOutput {
	return i.ToCSIVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CSIVolumeSourcePatchArgs) ToCSIVolumeSourcePatchOutputWithContext(ctx context.Context) CSIVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourcePatchOutput)
}

func (i CSIVolumeSourcePatchArgs) ToCSIVolumeSourcePatchPtrOutput() CSIVolumeSourcePatchPtrOutput {
	return i.ToCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CSIVolumeSourcePatchArgs) ToCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourcePatchOutput).ToCSIVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CSIVolumeSourcePatchPtrInput is an input type that accepts CSIVolumeSourcePatchArgs, CSIVolumeSourcePatchPtr and CSIVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CSIVolumeSourcePatchPtrInput` via:
//
//	        CSIVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CSIVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCSIVolumeSourcePatchPtrOutput() CSIVolumeSourcePatchPtrOutput
	ToCSIVolumeSourcePatchPtrOutputWithContext(context.Context) CSIVolumeSourcePatchPtrOutput
}

type csivolumeSourcePatchPtrType CSIVolumeSourcePatchArgs

func CSIVolumeSourcePatchPtr(v *CSIVolumeSourcePatchArgs) CSIVolumeSourcePatchPtrInput {
	return (*csivolumeSourcePatchPtrType)(v)
}

func (*csivolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVolumeSourcePatch)(nil)).Elem()
}

func (i *csivolumeSourcePatchPtrType) ToCSIVolumeSourcePatchPtrOutput() CSIVolumeSourcePatchPtrOutput {
	return i.ToCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *csivolumeSourcePatchPtrType) ToCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVolumeSourcePatchPtrOutput)
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type CSIVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CSIVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVolumeSourcePatch)(nil)).Elem()
}

func (o CSIVolumeSourcePatchOutput) ToCSIVolumeSourcePatchOutput() CSIVolumeSourcePatchOutput {
	return o
}

func (o CSIVolumeSourcePatchOutput) ToCSIVolumeSourcePatchOutputWithContext(ctx context.Context) CSIVolumeSourcePatchOutput {
	return o
}

func (o CSIVolumeSourcePatchOutput) ToCSIVolumeSourcePatchPtrOutput() CSIVolumeSourcePatchPtrOutput {
	return o.ToCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CSIVolumeSourcePatchOutput) ToCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSIVolumeSourcePatch) *CSIVolumeSourcePatch {
		return &v
	}).(CSIVolumeSourcePatchPtrOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o CSIVolumeSourcePatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVolumeSourcePatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o CSIVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o CSIVolumeSourcePatchOutput) NodePublishSecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v CSIVolumeSourcePatch) *LocalObjectReferencePatch { return v.NodePublishSecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o CSIVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o CSIVolumeSourcePatchOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVolumeSourcePatch) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type CSIVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CSIVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVolumeSourcePatch)(nil)).Elem()
}

func (o CSIVolumeSourcePatchPtrOutput) ToCSIVolumeSourcePatchPtrOutput() CSIVolumeSourcePatchPtrOutput {
	return o
}

func (o CSIVolumeSourcePatchPtrOutput) ToCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CSIVolumeSourcePatchPtrOutput {
	return o
}

func (o CSIVolumeSourcePatchPtrOutput) Elem() CSIVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) CSIVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CSIVolumeSourcePatch
		return ret
	}).(CSIVolumeSourcePatchOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o CSIVolumeSourcePatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o CSIVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o CSIVolumeSourcePatchPtrOutput) NodePublishSecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o CSIVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o CSIVolumeSourcePatchPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIVolumeSourcePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// Adds and removes POSIX capabilities from running containers.
type Capabilities struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// CapabilitiesInput is an input type that accepts CapabilitiesArgs and CapabilitiesOutput values.
// You can construct a concrete instance of `CapabilitiesInput` via:
//
//	CapabilitiesArgs{...}
type CapabilitiesInput interface {
	pulumi.Input

	ToCapabilitiesOutput() CapabilitiesOutput
	ToCapabilitiesOutputWithContext(context.Context) CapabilitiesOutput
}

// Adds and removes POSIX capabilities from running containers.
type CapabilitiesArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (CapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Capabilities)(nil)).Elem()
}

func (i CapabilitiesArgs) ToCapabilitiesOutput() CapabilitiesOutput {
	return i.ToCapabilitiesOutputWithContext(context.Background())
}

func (i CapabilitiesArgs) ToCapabilitiesOutputWithContext(ctx context.Context) CapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesOutput)
}

func (i CapabilitiesArgs) ToCapabilitiesPtrOutput() CapabilitiesPtrOutput {
	return i.ToCapabilitiesPtrOutputWithContext(context.Background())
}

func (i CapabilitiesArgs) ToCapabilitiesPtrOutputWithContext(ctx context.Context) CapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesOutput).ToCapabilitiesPtrOutputWithContext(ctx)
}

// CapabilitiesPtrInput is an input type that accepts CapabilitiesArgs, CapabilitiesPtr and CapabilitiesPtrOutput values.
// You can construct a concrete instance of `CapabilitiesPtrInput` via:
//
//	        CapabilitiesArgs{...}
//
//	or:
//
//	        nil
type CapabilitiesPtrInput interface {
	pulumi.Input

	ToCapabilitiesPtrOutput() CapabilitiesPtrOutput
	ToCapabilitiesPtrOutputWithContext(context.Context) CapabilitiesPtrOutput
}

type capabilitiesPtrType CapabilitiesArgs

func CapabilitiesPtr(v *CapabilitiesArgs) CapabilitiesPtrInput {
	return (*capabilitiesPtrType)(v)
}

func (*capabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Capabilities)(nil)).Elem()
}

func (i *capabilitiesPtrType) ToCapabilitiesPtrOutput() CapabilitiesPtrOutput {
	return i.ToCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *capabilitiesPtrType) ToCapabilitiesPtrOutputWithContext(ctx context.Context) CapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesPtrOutput)
}

// Adds and removes POSIX capabilities from running containers.
type CapabilitiesOutput struct{ *pulumi.OutputState }

func (CapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Capabilities)(nil)).Elem()
}

func (o CapabilitiesOutput) ToCapabilitiesOutput() CapabilitiesOutput {
	return o
}

func (o CapabilitiesOutput) ToCapabilitiesOutputWithContext(ctx context.Context) CapabilitiesOutput {
	return o
}

func (o CapabilitiesOutput) ToCapabilitiesPtrOutput() CapabilitiesPtrOutput {
	return o.ToCapabilitiesPtrOutputWithContext(context.Background())
}

func (o CapabilitiesOutput) ToCapabilitiesPtrOutputWithContext(ctx context.Context) CapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Capabilities) *Capabilities {
		return &v
	}).(CapabilitiesPtrOutput)
}

// Added capabilities
func (o CapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Capabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o CapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Capabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type CapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (CapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Capabilities)(nil)).Elem()
}

func (o CapabilitiesPtrOutput) ToCapabilitiesPtrOutput() CapabilitiesPtrOutput {
	return o
}

func (o CapabilitiesPtrOutput) ToCapabilitiesPtrOutputWithContext(ctx context.Context) CapabilitiesPtrOutput {
	return o
}

func (o CapabilitiesPtrOutput) Elem() CapabilitiesOutput {
	return o.ApplyT(func(v *Capabilities) Capabilities {
		if v != nil {
			return *v
		}
		var ret Capabilities
		return ret
	}).(CapabilitiesOutput)
}

// Added capabilities
func (o CapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Capabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o CapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Capabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// Adds and removes POSIX capabilities from running containers.
type CapabilitiesPatch struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// CapabilitiesPatchInput is an input type that accepts CapabilitiesPatchArgs and CapabilitiesPatchOutput values.
// You can construct a concrete instance of `CapabilitiesPatchInput` via:
//
//	CapabilitiesPatchArgs{...}
type CapabilitiesPatchInput interface {
	pulumi.Input

	ToCapabilitiesPatchOutput() CapabilitiesPatchOutput
	ToCapabilitiesPatchOutputWithContext(context.Context) CapabilitiesPatchOutput
}

// Adds and removes POSIX capabilities from running containers.
type CapabilitiesPatchArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (CapabilitiesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilitiesPatch)(nil)).Elem()
}

func (i CapabilitiesPatchArgs) ToCapabilitiesPatchOutput() CapabilitiesPatchOutput {
	return i.ToCapabilitiesPatchOutputWithContext(context.Background())
}

func (i CapabilitiesPatchArgs) ToCapabilitiesPatchOutputWithContext(ctx context.Context) CapabilitiesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesPatchOutput)
}

func (i CapabilitiesPatchArgs) ToCapabilitiesPatchPtrOutput() CapabilitiesPatchPtrOutput {
	return i.ToCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (i CapabilitiesPatchArgs) ToCapabilitiesPatchPtrOutputWithContext(ctx context.Context) CapabilitiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesPatchOutput).ToCapabilitiesPatchPtrOutputWithContext(ctx)
}

// CapabilitiesPatchPtrInput is an input type that accepts CapabilitiesPatchArgs, CapabilitiesPatchPtr and CapabilitiesPatchPtrOutput values.
// You can construct a concrete instance of `CapabilitiesPatchPtrInput` via:
//
//	        CapabilitiesPatchArgs{...}
//
//	or:
//
//	        nil
type CapabilitiesPatchPtrInput interface {
	pulumi.Input

	ToCapabilitiesPatchPtrOutput() CapabilitiesPatchPtrOutput
	ToCapabilitiesPatchPtrOutputWithContext(context.Context) CapabilitiesPatchPtrOutput
}

type capabilitiesPatchPtrType CapabilitiesPatchArgs

func CapabilitiesPatchPtr(v *CapabilitiesPatchArgs) CapabilitiesPatchPtrInput {
	return (*capabilitiesPatchPtrType)(v)
}

func (*capabilitiesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilitiesPatch)(nil)).Elem()
}

func (i *capabilitiesPatchPtrType) ToCapabilitiesPatchPtrOutput() CapabilitiesPatchPtrOutput {
	return i.ToCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (i *capabilitiesPatchPtrType) ToCapabilitiesPatchPtrOutputWithContext(ctx context.Context) CapabilitiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilitiesPatchPtrOutput)
}

// Adds and removes POSIX capabilities from running containers.
type CapabilitiesPatchOutput struct{ *pulumi.OutputState }

func (CapabilitiesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilitiesPatch)(nil)).Elem()
}

func (o CapabilitiesPatchOutput) ToCapabilitiesPatchOutput() CapabilitiesPatchOutput {
	return o
}

func (o CapabilitiesPatchOutput) ToCapabilitiesPatchOutputWithContext(ctx context.Context) CapabilitiesPatchOutput {
	return o
}

func (o CapabilitiesPatchOutput) ToCapabilitiesPatchPtrOutput() CapabilitiesPatchPtrOutput {
	return o.ToCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (o CapabilitiesPatchOutput) ToCapabilitiesPatchPtrOutputWithContext(ctx context.Context) CapabilitiesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapabilitiesPatch) *CapabilitiesPatch {
		return &v
	}).(CapabilitiesPatchPtrOutput)
}

// Added capabilities
func (o CapabilitiesPatchOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapabilitiesPatch) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o CapabilitiesPatchOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapabilitiesPatch) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type CapabilitiesPatchPtrOutput struct{ *pulumi.OutputState }

func (CapabilitiesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilitiesPatch)(nil)).Elem()
}

func (o CapabilitiesPatchPtrOutput) ToCapabilitiesPatchPtrOutput() CapabilitiesPatchPtrOutput {
	return o
}

func (o CapabilitiesPatchPtrOutput) ToCapabilitiesPatchPtrOutputWithContext(ctx context.Context) CapabilitiesPatchPtrOutput {
	return o
}

func (o CapabilitiesPatchPtrOutput) Elem() CapabilitiesPatchOutput {
	return o.ApplyT(func(v *CapabilitiesPatch) CapabilitiesPatch {
		if v != nil {
			return *v
		}
		var ret CapabilitiesPatch
		return ret
	}).(CapabilitiesPatchOutput)
}

// Added capabilities
func (o CapabilitiesPatchPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapabilitiesPatch) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o CapabilitiesPatchPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapabilitiesPatch) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSource struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *SecretReference `pulumi:"secretRef"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// CephFSPersistentVolumeSourceInput is an input type that accepts CephFSPersistentVolumeSourceArgs and CephFSPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `CephFSPersistentVolumeSourceInput` via:
//
//	CephFSPersistentVolumeSourceArgs{...}
type CephFSPersistentVolumeSourceInput interface {
	pulumi.Input

	ToCephFSPersistentVolumeSourceOutput() CephFSPersistentVolumeSourceOutput
	ToCephFSPersistentVolumeSourceOutputWithContext(context.Context) CephFSPersistentVolumeSourceOutput
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSourceArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef SecretReferencePtrInput `pulumi:"secretRef"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (CephFSPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSPersistentVolumeSource)(nil)).Elem()
}

func (i CephFSPersistentVolumeSourceArgs) ToCephFSPersistentVolumeSourceOutput() CephFSPersistentVolumeSourceOutput {
	return i.ToCephFSPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i CephFSPersistentVolumeSourceArgs) ToCephFSPersistentVolumeSourceOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourceOutput)
}

func (i CephFSPersistentVolumeSourceArgs) ToCephFSPersistentVolumeSourcePtrOutput() CephFSPersistentVolumeSourcePtrOutput {
	return i.ToCephFSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CephFSPersistentVolumeSourceArgs) ToCephFSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourceOutput).ToCephFSPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// CephFSPersistentVolumeSourcePtrInput is an input type that accepts CephFSPersistentVolumeSourceArgs, CephFSPersistentVolumeSourcePtr and CephFSPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CephFSPersistentVolumeSourcePtrInput` via:
//
//	        CephFSPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CephFSPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToCephFSPersistentVolumeSourcePtrOutput() CephFSPersistentVolumeSourcePtrOutput
	ToCephFSPersistentVolumeSourcePtrOutputWithContext(context.Context) CephFSPersistentVolumeSourcePtrOutput
}

type cephFSPersistentVolumeSourcePtrType CephFSPersistentVolumeSourceArgs

func CephFSPersistentVolumeSourcePtr(v *CephFSPersistentVolumeSourceArgs) CephFSPersistentVolumeSourcePtrInput {
	return (*cephFSPersistentVolumeSourcePtrType)(v)
}

func (*cephFSPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSPersistentVolumeSource)(nil)).Elem()
}

func (i *cephFSPersistentVolumeSourcePtrType) ToCephFSPersistentVolumeSourcePtrOutput() CephFSPersistentVolumeSourcePtrOutput {
	return i.ToCephFSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *cephFSPersistentVolumeSourcePtrType) ToCephFSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourcePtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (CephFSPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSPersistentVolumeSource)(nil)).Elem()
}

func (o CephFSPersistentVolumeSourceOutput) ToCephFSPersistentVolumeSourceOutput() CephFSPersistentVolumeSourceOutput {
	return o
}

func (o CephFSPersistentVolumeSourceOutput) ToCephFSPersistentVolumeSourceOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourceOutput {
	return o
}

func (o CephFSPersistentVolumeSourceOutput) ToCephFSPersistentVolumeSourcePtrOutput() CephFSPersistentVolumeSourcePtrOutput {
	return o.ToCephFSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CephFSPersistentVolumeSourceOutput) ToCephFSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CephFSPersistentVolumeSource) *CephFSPersistentVolumeSource {
		return &v
	}).(CephFSPersistentVolumeSourcePtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourceOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSPersistentVolumeSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourceOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourceOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) *SecretReference { return v.SecretRef }).(SecretReferencePtrOutput)
}

// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type CephFSPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CephFSPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSPersistentVolumeSource)(nil)).Elem()
}

func (o CephFSPersistentVolumeSourcePtrOutput) ToCephFSPersistentVolumeSourcePtrOutput() CephFSPersistentVolumeSourcePtrOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePtrOutput) ToCephFSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePtrOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePtrOutput) Elem() CephFSPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) CephFSPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret CephFSPersistentVolumeSource
		return ret
	}).(CephFSPersistentVolumeSourceOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSPersistentVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePtrOutput)
}

// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSourcePatch struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// CephFSPersistentVolumeSourcePatchInput is an input type that accepts CephFSPersistentVolumeSourcePatchArgs and CephFSPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CephFSPersistentVolumeSourcePatchInput` via:
//
//	CephFSPersistentVolumeSourcePatchArgs{...}
type CephFSPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToCephFSPersistentVolumeSourcePatchOutput() CephFSPersistentVolumeSourcePatchOutput
	ToCephFSPersistentVolumeSourcePatchOutputWithContext(context.Context) CephFSPersistentVolumeSourcePatchOutput
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSourcePatchArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (CephFSPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i CephFSPersistentVolumeSourcePatchArgs) ToCephFSPersistentVolumeSourcePatchOutput() CephFSPersistentVolumeSourcePatchOutput {
	return i.ToCephFSPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CephFSPersistentVolumeSourcePatchArgs) ToCephFSPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourcePatchOutput)
}

func (i CephFSPersistentVolumeSourcePatchArgs) ToCephFSPersistentVolumeSourcePatchPtrOutput() CephFSPersistentVolumeSourcePatchPtrOutput {
	return i.ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CephFSPersistentVolumeSourcePatchArgs) ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourcePatchOutput).ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CephFSPersistentVolumeSourcePatchPtrInput is an input type that accepts CephFSPersistentVolumeSourcePatchArgs, CephFSPersistentVolumeSourcePatchPtr and CephFSPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CephFSPersistentVolumeSourcePatchPtrInput` via:
//
//	        CephFSPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CephFSPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCephFSPersistentVolumeSourcePatchPtrOutput() CephFSPersistentVolumeSourcePatchPtrOutput
	ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) CephFSPersistentVolumeSourcePatchPtrOutput
}

type cephFSPersistentVolumeSourcePatchPtrType CephFSPersistentVolumeSourcePatchArgs

func CephFSPersistentVolumeSourcePatchPtr(v *CephFSPersistentVolumeSourcePatchArgs) CephFSPersistentVolumeSourcePatchPtrInput {
	return (*cephFSPersistentVolumeSourcePatchPtrType)(v)
}

func (*cephFSPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *cephFSPersistentVolumeSourcePatchPtrType) ToCephFSPersistentVolumeSourcePatchPtrOutput() CephFSPersistentVolumeSourcePatchPtrOutput {
	return i.ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *cephFSPersistentVolumeSourcePatchPtrType) ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSPersistentVolumeSourcePatchPtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CephFSPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CephFSPersistentVolumeSourcePatchOutput) ToCephFSPersistentVolumeSourcePatchOutput() CephFSPersistentVolumeSourcePatchOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePatchOutput) ToCephFSPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePatchOutput) ToCephFSPersistentVolumeSourcePatchPtrOutput() CephFSPersistentVolumeSourcePatchPtrOutput {
	return o.ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CephFSPersistentVolumeSourcePatchOutput) ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CephFSPersistentVolumeSourcePatch) *CephFSPersistentVolumeSourcePatch {
		return &v
	}).(CephFSPersistentVolumeSourcePatchPtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSPersistentVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSPersistentVolumeSourcePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type CephFSPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CephFSPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CephFSPersistentVolumeSourcePatchPtrOutput) ToCephFSPersistentVolumeSourcePatchPtrOutput() CephFSPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePatchPtrOutput) ToCephFSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CephFSPersistentVolumeSourcePatchPtrOutput) Elem() CephFSPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) CephFSPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CephFSPersistentVolumeSourcePatch
		return ret
	}).(CephFSPersistentVolumeSourcePatchOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSPersistentVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSPersistentVolumeSourcePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSource struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// CephFSVolumeSourceInput is an input type that accepts CephFSVolumeSourceArgs and CephFSVolumeSourceOutput values.
// You can construct a concrete instance of `CephFSVolumeSourceInput` via:
//
//	CephFSVolumeSourceArgs{...}
type CephFSVolumeSourceInput interface {
	pulumi.Input

	ToCephFSVolumeSourceOutput() CephFSVolumeSourceOutput
	ToCephFSVolumeSourceOutputWithContext(context.Context) CephFSVolumeSourceOutput
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSourceArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (CephFSVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSVolumeSource)(nil)).Elem()
}

func (i CephFSVolumeSourceArgs) ToCephFSVolumeSourceOutput() CephFSVolumeSourceOutput {
	return i.ToCephFSVolumeSourceOutputWithContext(context.Background())
}

func (i CephFSVolumeSourceArgs) ToCephFSVolumeSourceOutputWithContext(ctx context.Context) CephFSVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourceOutput)
}

func (i CephFSVolumeSourceArgs) ToCephFSVolumeSourcePtrOutput() CephFSVolumeSourcePtrOutput {
	return i.ToCephFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CephFSVolumeSourceArgs) ToCephFSVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourceOutput).ToCephFSVolumeSourcePtrOutputWithContext(ctx)
}

// CephFSVolumeSourcePtrInput is an input type that accepts CephFSVolumeSourceArgs, CephFSVolumeSourcePtr and CephFSVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CephFSVolumeSourcePtrInput` via:
//
//	        CephFSVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CephFSVolumeSourcePtrInput interface {
	pulumi.Input

	ToCephFSVolumeSourcePtrOutput() CephFSVolumeSourcePtrOutput
	ToCephFSVolumeSourcePtrOutputWithContext(context.Context) CephFSVolumeSourcePtrOutput
}

type cephFSVolumeSourcePtrType CephFSVolumeSourceArgs

func CephFSVolumeSourcePtr(v *CephFSVolumeSourceArgs) CephFSVolumeSourcePtrInput {
	return (*cephFSVolumeSourcePtrType)(v)
}

func (*cephFSVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSVolumeSource)(nil)).Elem()
}

func (i *cephFSVolumeSourcePtrType) ToCephFSVolumeSourcePtrOutput() CephFSVolumeSourcePtrOutput {
	return i.ToCephFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *cephFSVolumeSourcePtrType) ToCephFSVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourcePtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSourceOutput struct{ *pulumi.OutputState }

func (CephFSVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSVolumeSource)(nil)).Elem()
}

func (o CephFSVolumeSourceOutput) ToCephFSVolumeSourceOutput() CephFSVolumeSourceOutput {
	return o
}

func (o CephFSVolumeSourceOutput) ToCephFSVolumeSourceOutputWithContext(ctx context.Context) CephFSVolumeSourceOutput {
	return o
}

func (o CephFSVolumeSourceOutput) ToCephFSVolumeSourcePtrOutput() CephFSVolumeSourcePtrOutput {
	return o.ToCephFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CephFSVolumeSourceOutput) ToCephFSVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CephFSVolumeSource) *CephFSVolumeSource {
		return &v
	}).(CephFSVolumeSourcePtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourceOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CephFSVolumeSource) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSVolumeSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourceOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSource) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v CephFSVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type CephFSVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CephFSVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSVolumeSource)(nil)).Elem()
}

func (o CephFSVolumeSourcePtrOutput) ToCephFSVolumeSourcePtrOutput() CephFSVolumeSourcePtrOutput {
	return o
}

func (o CephFSVolumeSourcePtrOutput) ToCephFSVolumeSourcePtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePtrOutput {
	return o
}

func (o CephFSVolumeSourcePtrOutput) Elem() CephFSVolumeSourceOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) CephFSVolumeSource {
		if v != nil {
			return *v
		}
		var ret CephFSVolumeSource
		return ret
	}).(CephFSVolumeSourceOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSourcePatch struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// CephFSVolumeSourcePatchInput is an input type that accepts CephFSVolumeSourcePatchArgs and CephFSVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CephFSVolumeSourcePatchInput` via:
//
//	CephFSVolumeSourcePatchArgs{...}
type CephFSVolumeSourcePatchInput interface {
	pulumi.Input

	ToCephFSVolumeSourcePatchOutput() CephFSVolumeSourcePatchOutput
	ToCephFSVolumeSourcePatchOutputWithContext(context.Context) CephFSVolumeSourcePatchOutput
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSourcePatchArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (CephFSVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSVolumeSourcePatch)(nil)).Elem()
}

func (i CephFSVolumeSourcePatchArgs) ToCephFSVolumeSourcePatchOutput() CephFSVolumeSourcePatchOutput {
	return i.ToCephFSVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CephFSVolumeSourcePatchArgs) ToCephFSVolumeSourcePatchOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourcePatchOutput)
}

func (i CephFSVolumeSourcePatchArgs) ToCephFSVolumeSourcePatchPtrOutput() CephFSVolumeSourcePatchPtrOutput {
	return i.ToCephFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CephFSVolumeSourcePatchArgs) ToCephFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourcePatchOutput).ToCephFSVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CephFSVolumeSourcePatchPtrInput is an input type that accepts CephFSVolumeSourcePatchArgs, CephFSVolumeSourcePatchPtr and CephFSVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CephFSVolumeSourcePatchPtrInput` via:
//
//	        CephFSVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CephFSVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCephFSVolumeSourcePatchPtrOutput() CephFSVolumeSourcePatchPtrOutput
	ToCephFSVolumeSourcePatchPtrOutputWithContext(context.Context) CephFSVolumeSourcePatchPtrOutput
}

type cephFSVolumeSourcePatchPtrType CephFSVolumeSourcePatchArgs

func CephFSVolumeSourcePatchPtr(v *CephFSVolumeSourcePatchArgs) CephFSVolumeSourcePatchPtrInput {
	return (*cephFSVolumeSourcePatchPtrType)(v)
}

func (*cephFSVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSVolumeSourcePatch)(nil)).Elem()
}

func (i *cephFSVolumeSourcePatchPtrType) ToCephFSVolumeSourcePatchPtrOutput() CephFSVolumeSourcePatchPtrOutput {
	return i.ToCephFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *cephFSVolumeSourcePatchPtrType) ToCephFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CephFSVolumeSourcePatchPtrOutput)
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CephFSVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CephFSVolumeSourcePatch)(nil)).Elem()
}

func (o CephFSVolumeSourcePatchOutput) ToCephFSVolumeSourcePatchOutput() CephFSVolumeSourcePatchOutput {
	return o
}

func (o CephFSVolumeSourcePatchOutput) ToCephFSVolumeSourcePatchOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchOutput {
	return o
}

func (o CephFSVolumeSourcePatchOutput) ToCephFSVolumeSourcePatchPtrOutput() CephFSVolumeSourcePatchPtrOutput {
	return o.ToCephFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CephFSVolumeSourcePatchOutput) ToCephFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CephFSVolumeSourcePatch) *CephFSVolumeSourcePatch {
		return &v
	}).(CephFSVolumeSourcePatchPtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CephFSVolumeSourcePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type CephFSVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CephFSVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CephFSVolumeSourcePatch)(nil)).Elem()
}

func (o CephFSVolumeSourcePatchPtrOutput) ToCephFSVolumeSourcePatchPtrOutput() CephFSVolumeSourcePatchPtrOutput {
	return o
}

func (o CephFSVolumeSourcePatchPtrOutput) ToCephFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CephFSVolumeSourcePatchPtrOutput {
	return o
}

func (o CephFSVolumeSourcePatchPtrOutput) Elem() CephFSVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) CephFSVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CephFSVolumeSourcePatch
		return ret
	}).(CephFSVolumeSourcePatchOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o CephFSVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o CephFSVolumeSourcePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CephFSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSource struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *SecretReference `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `pulumi:"volumeID"`
}

// CinderPersistentVolumeSourceInput is an input type that accepts CinderPersistentVolumeSourceArgs and CinderPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `CinderPersistentVolumeSourceInput` via:
//
//	CinderPersistentVolumeSourceArgs{...}
type CinderPersistentVolumeSourceInput interface {
	pulumi.Input

	ToCinderPersistentVolumeSourceOutput() CinderPersistentVolumeSourceOutput
	ToCinderPersistentVolumeSourceOutputWithContext(context.Context) CinderPersistentVolumeSourceOutput
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSourceArgs struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef SecretReferencePtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (CinderPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderPersistentVolumeSource)(nil)).Elem()
}

func (i CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourceOutput() CinderPersistentVolumeSourceOutput {
	return i.ToCinderPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourceOutputWithContext(ctx context.Context) CinderPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourceOutput)
}

func (i CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourcePtrOutput() CinderPersistentVolumeSourcePtrOutput {
	return i.ToCinderPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CinderPersistentVolumeSourceArgs) ToCinderPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourceOutput).ToCinderPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// CinderPersistentVolumeSourcePtrInput is an input type that accepts CinderPersistentVolumeSourceArgs, CinderPersistentVolumeSourcePtr and CinderPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CinderPersistentVolumeSourcePtrInput` via:
//
//	        CinderPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CinderPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToCinderPersistentVolumeSourcePtrOutput() CinderPersistentVolumeSourcePtrOutput
	ToCinderPersistentVolumeSourcePtrOutputWithContext(context.Context) CinderPersistentVolumeSourcePtrOutput
}

type cinderPersistentVolumeSourcePtrType CinderPersistentVolumeSourceArgs

func CinderPersistentVolumeSourcePtr(v *CinderPersistentVolumeSourceArgs) CinderPersistentVolumeSourcePtrInput {
	return (*cinderPersistentVolumeSourcePtrType)(v)
}

func (*cinderPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderPersistentVolumeSource)(nil)).Elem()
}

func (i *cinderPersistentVolumeSourcePtrType) ToCinderPersistentVolumeSourcePtrOutput() CinderPersistentVolumeSourcePtrOutput {
	return i.ToCinderPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *cinderPersistentVolumeSourcePtrType) ToCinderPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourcePtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (CinderPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderPersistentVolumeSource)(nil)).Elem()
}

func (o CinderPersistentVolumeSourceOutput) ToCinderPersistentVolumeSourceOutput() CinderPersistentVolumeSourceOutput {
	return o
}

func (o CinderPersistentVolumeSourceOutput) ToCinderPersistentVolumeSourceOutputWithContext(ctx context.Context) CinderPersistentVolumeSourceOutput {
	return o
}

func (o CinderPersistentVolumeSourceOutput) ToCinderPersistentVolumeSourcePtrOutput() CinderPersistentVolumeSourcePtrOutput {
	return o.ToCinderPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CinderPersistentVolumeSourceOutput) ToCinderPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CinderPersistentVolumeSource) *CinderPersistentVolumeSource {
		return &v
	}).(CinderPersistentVolumeSourcePtrOutput)
}

// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderPersistentVolumeSourceOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSource) *SecretReference { return v.SecretRef }).(SecretReferencePtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSource) string { return v.VolumeID }).(pulumi.StringOutput)
}

type CinderPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CinderPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderPersistentVolumeSource)(nil)).Elem()
}

func (o CinderPersistentVolumeSourcePtrOutput) ToCinderPersistentVolumeSourcePtrOutput() CinderPersistentVolumeSourcePtrOutput {
	return o
}

func (o CinderPersistentVolumeSourcePtrOutput) ToCinderPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePtrOutput {
	return o
}

func (o CinderPersistentVolumeSourcePtrOutput) Elem() CinderPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSource) CinderPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret CinderPersistentVolumeSource
		return ret
	}).(CinderPersistentVolumeSourceOutput)
}

// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSourcePatch struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID *string `pulumi:"volumeID"`
}

// CinderPersistentVolumeSourcePatchInput is an input type that accepts CinderPersistentVolumeSourcePatchArgs and CinderPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CinderPersistentVolumeSourcePatchInput` via:
//
//	CinderPersistentVolumeSourcePatchArgs{...}
type CinderPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToCinderPersistentVolumeSourcePatchOutput() CinderPersistentVolumeSourcePatchOutput
	ToCinderPersistentVolumeSourcePatchOutputWithContext(context.Context) CinderPersistentVolumeSourcePatchOutput
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSourcePatchArgs struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (CinderPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i CinderPersistentVolumeSourcePatchArgs) ToCinderPersistentVolumeSourcePatchOutput() CinderPersistentVolumeSourcePatchOutput {
	return i.ToCinderPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CinderPersistentVolumeSourcePatchArgs) ToCinderPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourcePatchOutput)
}

func (i CinderPersistentVolumeSourcePatchArgs) ToCinderPersistentVolumeSourcePatchPtrOutput() CinderPersistentVolumeSourcePatchPtrOutput {
	return i.ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CinderPersistentVolumeSourcePatchArgs) ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourcePatchOutput).ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CinderPersistentVolumeSourcePatchPtrInput is an input type that accepts CinderPersistentVolumeSourcePatchArgs, CinderPersistentVolumeSourcePatchPtr and CinderPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CinderPersistentVolumeSourcePatchPtrInput` via:
//
//	        CinderPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CinderPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCinderPersistentVolumeSourcePatchPtrOutput() CinderPersistentVolumeSourcePatchPtrOutput
	ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) CinderPersistentVolumeSourcePatchPtrOutput
}

type cinderPersistentVolumeSourcePatchPtrType CinderPersistentVolumeSourcePatchArgs

func CinderPersistentVolumeSourcePatchPtr(v *CinderPersistentVolumeSourcePatchArgs) CinderPersistentVolumeSourcePatchPtrInput {
	return (*cinderPersistentVolumeSourcePatchPtrType)(v)
}

func (*cinderPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *cinderPersistentVolumeSourcePatchPtrType) ToCinderPersistentVolumeSourcePatchPtrOutput() CinderPersistentVolumeSourcePatchPtrOutput {
	return i.ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *cinderPersistentVolumeSourcePatchPtrType) ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderPersistentVolumeSourcePatchPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CinderPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CinderPersistentVolumeSourcePatchOutput) ToCinderPersistentVolumeSourcePatchOutput() CinderPersistentVolumeSourcePatchOutput {
	return o
}

func (o CinderPersistentVolumeSourcePatchOutput) ToCinderPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchOutput {
	return o
}

func (o CinderPersistentVolumeSourcePatchOutput) ToCinderPersistentVolumeSourcePatchPtrOutput() CinderPersistentVolumeSourcePatchPtrOutput {
	return o.ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CinderPersistentVolumeSourcePatchOutput) ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CinderPersistentVolumeSourcePatch) *CinderPersistentVolumeSourcePatch {
		return &v
	}).(CinderPersistentVolumeSourcePatchPtrOutput)
}

// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderPersistentVolumeSourcePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type CinderPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CinderPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o CinderPersistentVolumeSourcePatchPtrOutput) ToCinderPersistentVolumeSourcePatchPtrOutput() CinderPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CinderPersistentVolumeSourcePatchPtrOutput) ToCinderPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o CinderPersistentVolumeSourcePatchPtrOutput) Elem() CinderPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSourcePatch) CinderPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CinderPersistentVolumeSourcePatch
		return ret
	}).(CinderPersistentVolumeSourcePatchOutput)
}

// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderPersistentVolumeSourcePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `pulumi:"volumeID"`
}

// CinderVolumeSourceInput is an input type that accepts CinderVolumeSourceArgs and CinderVolumeSourceOutput values.
// You can construct a concrete instance of `CinderVolumeSourceInput` via:
//
//	CinderVolumeSourceArgs{...}
type CinderVolumeSourceInput interface {
	pulumi.Input

	ToCinderVolumeSourceOutput() CinderVolumeSourceOutput
	ToCinderVolumeSourceOutputWithContext(context.Context) CinderVolumeSourceOutput
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (CinderVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderVolumeSource)(nil)).Elem()
}

func (i CinderVolumeSourceArgs) ToCinderVolumeSourceOutput() CinderVolumeSourceOutput {
	return i.ToCinderVolumeSourceOutputWithContext(context.Background())
}

func (i CinderVolumeSourceArgs) ToCinderVolumeSourceOutputWithContext(ctx context.Context) CinderVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourceOutput)
}

func (i CinderVolumeSourceArgs) ToCinderVolumeSourcePtrOutput() CinderVolumeSourcePtrOutput {
	return i.ToCinderVolumeSourcePtrOutputWithContext(context.Background())
}

func (i CinderVolumeSourceArgs) ToCinderVolumeSourcePtrOutputWithContext(ctx context.Context) CinderVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourceOutput).ToCinderVolumeSourcePtrOutputWithContext(ctx)
}

// CinderVolumeSourcePtrInput is an input type that accepts CinderVolumeSourceArgs, CinderVolumeSourcePtr and CinderVolumeSourcePtrOutput values.
// You can construct a concrete instance of `CinderVolumeSourcePtrInput` via:
//
//	        CinderVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type CinderVolumeSourcePtrInput interface {
	pulumi.Input

	ToCinderVolumeSourcePtrOutput() CinderVolumeSourcePtrOutput
	ToCinderVolumeSourcePtrOutputWithContext(context.Context) CinderVolumeSourcePtrOutput
}

type cinderVolumeSourcePtrType CinderVolumeSourceArgs

func CinderVolumeSourcePtr(v *CinderVolumeSourceArgs) CinderVolumeSourcePtrInput {
	return (*cinderVolumeSourcePtrType)(v)
}

func (*cinderVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderVolumeSource)(nil)).Elem()
}

func (i *cinderVolumeSourcePtrType) ToCinderVolumeSourcePtrOutput() CinderVolumeSourcePtrOutput {
	return i.ToCinderVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *cinderVolumeSourcePtrType) ToCinderVolumeSourcePtrOutputWithContext(ctx context.Context) CinderVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourcePtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSourceOutput struct{ *pulumi.OutputState }

func (CinderVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderVolumeSource)(nil)).Elem()
}

func (o CinderVolumeSourceOutput) ToCinderVolumeSourceOutput() CinderVolumeSourceOutput {
	return o
}

func (o CinderVolumeSourceOutput) ToCinderVolumeSourceOutputWithContext(ctx context.Context) CinderVolumeSourceOutput {
	return o
}

func (o CinderVolumeSourceOutput) ToCinderVolumeSourcePtrOutput() CinderVolumeSourcePtrOutput {
	return o.ToCinderVolumeSourcePtrOutputWithContext(context.Background())
}

func (o CinderVolumeSourceOutput) ToCinderVolumeSourcePtrOutputWithContext(ctx context.Context) CinderVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CinderVolumeSource) *CinderVolumeSource {
		return &v
	}).(CinderVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CinderVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v CinderVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v CinderVolumeSource) string { return v.VolumeID }).(pulumi.StringOutput)
}

type CinderVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (CinderVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderVolumeSource)(nil)).Elem()
}

func (o CinderVolumeSourcePtrOutput) ToCinderVolumeSourcePtrOutput() CinderVolumeSourcePtrOutput {
	return o
}

func (o CinderVolumeSourcePtrOutput) ToCinderVolumeSourcePtrOutputWithContext(ctx context.Context) CinderVolumeSourcePtrOutput {
	return o
}

func (o CinderVolumeSourcePtrOutput) Elem() CinderVolumeSourceOutput {
	return o.ApplyT(func(v *CinderVolumeSource) CinderVolumeSource {
		if v != nil {
			return *v
		}
		var ret CinderVolumeSource
		return ret
	}).(CinderVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *CinderVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID *string `pulumi:"volumeID"`
}

// CinderVolumeSourcePatchInput is an input type that accepts CinderVolumeSourcePatchArgs and CinderVolumeSourcePatchOutput values.
// You can construct a concrete instance of `CinderVolumeSourcePatchInput` via:
//
//	CinderVolumeSourcePatchArgs{...}
type CinderVolumeSourcePatchInput interface {
	pulumi.Input

	ToCinderVolumeSourcePatchOutput() CinderVolumeSourcePatchOutput
	ToCinderVolumeSourcePatchOutputWithContext(context.Context) CinderVolumeSourcePatchOutput
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (CinderVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderVolumeSourcePatch)(nil)).Elem()
}

func (i CinderVolumeSourcePatchArgs) ToCinderVolumeSourcePatchOutput() CinderVolumeSourcePatchOutput {
	return i.ToCinderVolumeSourcePatchOutputWithContext(context.Background())
}

func (i CinderVolumeSourcePatchArgs) ToCinderVolumeSourcePatchOutputWithContext(ctx context.Context) CinderVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourcePatchOutput)
}

func (i CinderVolumeSourcePatchArgs) ToCinderVolumeSourcePatchPtrOutput() CinderVolumeSourcePatchPtrOutput {
	return i.ToCinderVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i CinderVolumeSourcePatchArgs) ToCinderVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourcePatchOutput).ToCinderVolumeSourcePatchPtrOutputWithContext(ctx)
}

// CinderVolumeSourcePatchPtrInput is an input type that accepts CinderVolumeSourcePatchArgs, CinderVolumeSourcePatchPtr and CinderVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `CinderVolumeSourcePatchPtrInput` via:
//
//	        CinderVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type CinderVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToCinderVolumeSourcePatchPtrOutput() CinderVolumeSourcePatchPtrOutput
	ToCinderVolumeSourcePatchPtrOutputWithContext(context.Context) CinderVolumeSourcePatchPtrOutput
}

type cinderVolumeSourcePatchPtrType CinderVolumeSourcePatchArgs

func CinderVolumeSourcePatchPtr(v *CinderVolumeSourcePatchArgs) CinderVolumeSourcePatchPtrInput {
	return (*cinderVolumeSourcePatchPtrType)(v)
}

func (*cinderVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderVolumeSourcePatch)(nil)).Elem()
}

func (i *cinderVolumeSourcePatchPtrType) ToCinderVolumeSourcePatchPtrOutput() CinderVolumeSourcePatchPtrOutput {
	return i.ToCinderVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *cinderVolumeSourcePatchPtrType) ToCinderVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CinderVolumeSourcePatchPtrOutput)
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (CinderVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CinderVolumeSourcePatch)(nil)).Elem()
}

func (o CinderVolumeSourcePatchOutput) ToCinderVolumeSourcePatchOutput() CinderVolumeSourcePatchOutput {
	return o
}

func (o CinderVolumeSourcePatchOutput) ToCinderVolumeSourcePatchOutputWithContext(ctx context.Context) CinderVolumeSourcePatchOutput {
	return o
}

func (o CinderVolumeSourcePatchOutput) ToCinderVolumeSourcePatchPtrOutput() CinderVolumeSourcePatchPtrOutput {
	return o.ToCinderVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o CinderVolumeSourcePatchOutput) ToCinderVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CinderVolumeSourcePatch) *CinderVolumeSourcePatch {
		return &v
	}).(CinderVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CinderVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v CinderVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CinderVolumeSourcePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type CinderVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (CinderVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CinderVolumeSourcePatch)(nil)).Elem()
}

func (o CinderVolumeSourcePatchPtrOutput) ToCinderVolumeSourcePatchPtrOutput() CinderVolumeSourcePatchPtrOutput {
	return o
}

func (o CinderVolumeSourcePatchPtrOutput) ToCinderVolumeSourcePatchPtrOutputWithContext(ctx context.Context) CinderVolumeSourcePatchPtrOutput {
	return o
}

func (o CinderVolumeSourcePatchPtrOutput) Elem() CinderVolumeSourcePatchOutput {
	return o.ApplyT(func(v *CinderVolumeSourcePatch) CinderVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret CinderVolumeSourcePatch
		return ret
	}).(CinderVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o CinderVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o CinderVolumeSourcePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CinderVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSource struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName *string `pulumi:"resourceClaimName"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName *string `pulumi:"resourceClaimTemplateName"`
}

// ClaimSourceInput is an input type that accepts ClaimSourceArgs and ClaimSourceOutput values.
// You can construct a concrete instance of `ClaimSourceInput` via:
//
//	ClaimSourceArgs{...}
type ClaimSourceInput interface {
	pulumi.Input

	ToClaimSourceOutput() ClaimSourceOutput
	ToClaimSourceOutputWithContext(context.Context) ClaimSourceOutput
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSourceArgs struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName pulumi.StringPtrInput `pulumi:"resourceClaimName"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName pulumi.StringPtrInput `pulumi:"resourceClaimTemplateName"`
}

func (ClaimSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClaimSource)(nil)).Elem()
}

func (i ClaimSourceArgs) ToClaimSourceOutput() ClaimSourceOutput {
	return i.ToClaimSourceOutputWithContext(context.Background())
}

func (i ClaimSourceArgs) ToClaimSourceOutputWithContext(ctx context.Context) ClaimSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourceOutput)
}

func (i ClaimSourceArgs) ToClaimSourcePtrOutput() ClaimSourcePtrOutput {
	return i.ToClaimSourcePtrOutputWithContext(context.Background())
}

func (i ClaimSourceArgs) ToClaimSourcePtrOutputWithContext(ctx context.Context) ClaimSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourceOutput).ToClaimSourcePtrOutputWithContext(ctx)
}

// ClaimSourcePtrInput is an input type that accepts ClaimSourceArgs, ClaimSourcePtr and ClaimSourcePtrOutput values.
// You can construct a concrete instance of `ClaimSourcePtrInput` via:
//
//	        ClaimSourceArgs{...}
//
//	or:
//
//	        nil
type ClaimSourcePtrInput interface {
	pulumi.Input

	ToClaimSourcePtrOutput() ClaimSourcePtrOutput
	ToClaimSourcePtrOutputWithContext(context.Context) ClaimSourcePtrOutput
}

type claimSourcePtrType ClaimSourceArgs

func ClaimSourcePtr(v *ClaimSourceArgs) ClaimSourcePtrInput {
	return (*claimSourcePtrType)(v)
}

func (*claimSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClaimSource)(nil)).Elem()
}

func (i *claimSourcePtrType) ToClaimSourcePtrOutput() ClaimSourcePtrOutput {
	return i.ToClaimSourcePtrOutputWithContext(context.Background())
}

func (i *claimSourcePtrType) ToClaimSourcePtrOutputWithContext(ctx context.Context) ClaimSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourcePtrOutput)
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSourceOutput struct{ *pulumi.OutputState }

func (ClaimSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClaimSource)(nil)).Elem()
}

func (o ClaimSourceOutput) ToClaimSourceOutput() ClaimSourceOutput {
	return o
}

func (o ClaimSourceOutput) ToClaimSourceOutputWithContext(ctx context.Context) ClaimSourceOutput {
	return o
}

func (o ClaimSourceOutput) ToClaimSourcePtrOutput() ClaimSourcePtrOutput {
	return o.ToClaimSourcePtrOutputWithContext(context.Background())
}

func (o ClaimSourceOutput) ToClaimSourcePtrOutputWithContext(ctx context.Context) ClaimSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClaimSource) *ClaimSource {
		return &v
	}).(ClaimSourcePtrOutput)
}

// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
func (o ClaimSourceOutput) ResourceClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClaimSource) *string { return v.ResourceClaimName }).(pulumi.StringPtrOutput)
}

// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
//
// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
//
// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
//
// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
func (o ClaimSourceOutput) ResourceClaimTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClaimSource) *string { return v.ResourceClaimTemplateName }).(pulumi.StringPtrOutput)
}

type ClaimSourcePtrOutput struct{ *pulumi.OutputState }

func (ClaimSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClaimSource)(nil)).Elem()
}

func (o ClaimSourcePtrOutput) ToClaimSourcePtrOutput() ClaimSourcePtrOutput {
	return o
}

func (o ClaimSourcePtrOutput) ToClaimSourcePtrOutputWithContext(ctx context.Context) ClaimSourcePtrOutput {
	return o
}

func (o ClaimSourcePtrOutput) Elem() ClaimSourceOutput {
	return o.ApplyT(func(v *ClaimSource) ClaimSource {
		if v != nil {
			return *v
		}
		var ret ClaimSource
		return ret
	}).(ClaimSourceOutput)
}

// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
func (o ClaimSourcePtrOutput) ResourceClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClaimSource) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClaimName
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
//
// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
//
// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
//
// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
func (o ClaimSourcePtrOutput) ResourceClaimTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClaimSource) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClaimTemplateName
	}).(pulumi.StringPtrOutput)
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSourcePatch struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName *string `pulumi:"resourceClaimName"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName *string `pulumi:"resourceClaimTemplateName"`
}

// ClaimSourcePatchInput is an input type that accepts ClaimSourcePatchArgs and ClaimSourcePatchOutput values.
// You can construct a concrete instance of `ClaimSourcePatchInput` via:
//
//	ClaimSourcePatchArgs{...}
type ClaimSourcePatchInput interface {
	pulumi.Input

	ToClaimSourcePatchOutput() ClaimSourcePatchOutput
	ToClaimSourcePatchOutputWithContext(context.Context) ClaimSourcePatchOutput
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSourcePatchArgs struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName pulumi.StringPtrInput `pulumi:"resourceClaimName"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName pulumi.StringPtrInput `pulumi:"resourceClaimTemplateName"`
}

func (ClaimSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClaimSourcePatch)(nil)).Elem()
}

func (i ClaimSourcePatchArgs) ToClaimSourcePatchOutput() ClaimSourcePatchOutput {
	return i.ToClaimSourcePatchOutputWithContext(context.Background())
}

func (i ClaimSourcePatchArgs) ToClaimSourcePatchOutputWithContext(ctx context.Context) ClaimSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourcePatchOutput)
}

func (i ClaimSourcePatchArgs) ToClaimSourcePatchPtrOutput() ClaimSourcePatchPtrOutput {
	return i.ToClaimSourcePatchPtrOutputWithContext(context.Background())
}

func (i ClaimSourcePatchArgs) ToClaimSourcePatchPtrOutputWithContext(ctx context.Context) ClaimSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourcePatchOutput).ToClaimSourcePatchPtrOutputWithContext(ctx)
}

// ClaimSourcePatchPtrInput is an input type that accepts ClaimSourcePatchArgs, ClaimSourcePatchPtr and ClaimSourcePatchPtrOutput values.
// You can construct a concrete instance of `ClaimSourcePatchPtrInput` via:
//
//	        ClaimSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ClaimSourcePatchPtrInput interface {
	pulumi.Input

	ToClaimSourcePatchPtrOutput() ClaimSourcePatchPtrOutput
	ToClaimSourcePatchPtrOutputWithContext(context.Context) ClaimSourcePatchPtrOutput
}

type claimSourcePatchPtrType ClaimSourcePatchArgs

func ClaimSourcePatchPtr(v *ClaimSourcePatchArgs) ClaimSourcePatchPtrInput {
	return (*claimSourcePatchPtrType)(v)
}

func (*claimSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClaimSourcePatch)(nil)).Elem()
}

func (i *claimSourcePatchPtrType) ToClaimSourcePatchPtrOutput() ClaimSourcePatchPtrOutput {
	return i.ToClaimSourcePatchPtrOutputWithContext(context.Background())
}

func (i *claimSourcePatchPtrType) ToClaimSourcePatchPtrOutputWithContext(ctx context.Context) ClaimSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimSourcePatchPtrOutput)
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type ClaimSourcePatchOutput struct{ *pulumi.OutputState }

func (ClaimSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClaimSourcePatch)(nil)).Elem()
}

func (o ClaimSourcePatchOutput) ToClaimSourcePatchOutput() ClaimSourcePatchOutput {
	return o
}

func (o ClaimSourcePatchOutput) ToClaimSourcePatchOutputWithContext(ctx context.Context) ClaimSourcePatchOutput {
	return o
}

func (o ClaimSourcePatchOutput) ToClaimSourcePatchPtrOutput() ClaimSourcePatchPtrOutput {
	return o.ToClaimSourcePatchPtrOutputWithContext(context.Background())
}

func (o ClaimSourcePatchOutput) ToClaimSourcePatchPtrOutputWithContext(ctx context.Context) ClaimSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClaimSourcePatch) *ClaimSourcePatch {
		return &v
	}).(ClaimSourcePatchPtrOutput)
}

// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
func (o ClaimSourcePatchOutput) ResourceClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClaimSourcePatch) *string { return v.ResourceClaimName }).(pulumi.StringPtrOutput)
}

// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
//
// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
//
// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
//
// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
func (o ClaimSourcePatchOutput) ResourceClaimTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClaimSourcePatch) *string { return v.ResourceClaimTemplateName }).(pulumi.StringPtrOutput)
}

type ClaimSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ClaimSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClaimSourcePatch)(nil)).Elem()
}

func (o ClaimSourcePatchPtrOutput) ToClaimSourcePatchPtrOutput() ClaimSourcePatchPtrOutput {
	return o
}

func (o ClaimSourcePatchPtrOutput) ToClaimSourcePatchPtrOutputWithContext(ctx context.Context) ClaimSourcePatchPtrOutput {
	return o
}

func (o ClaimSourcePatchPtrOutput) Elem() ClaimSourcePatchOutput {
	return o.ApplyT(func(v *ClaimSourcePatch) ClaimSourcePatch {
		if v != nil {
			return *v
		}
		var ret ClaimSourcePatch
		return ret
	}).(ClaimSourcePatchOutput)
}

// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
func (o ClaimSourcePatchPtrOutput) ResourceClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClaimSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClaimName
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
//
// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
//
// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
//
// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
func (o ClaimSourcePatchPtrOutput) ResourceClaimTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClaimSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClaimTemplateName
	}).(pulumi.StringPtrOutput)
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfig struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ClientIPConfigInput is an input type that accepts ClientIPConfigArgs and ClientIPConfigOutput values.
// You can construct a concrete instance of `ClientIPConfigInput` via:
//
//	ClientIPConfigArgs{...}
type ClientIPConfigInput interface {
	pulumi.Input

	ToClientIPConfigOutput() ClientIPConfigOutput
	ToClientIPConfigOutputWithContext(context.Context) ClientIPConfigOutput
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfigArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ClientIPConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientIPConfig)(nil)).Elem()
}

func (i ClientIPConfigArgs) ToClientIPConfigOutput() ClientIPConfigOutput {
	return i.ToClientIPConfigOutputWithContext(context.Background())
}

func (i ClientIPConfigArgs) ToClientIPConfigOutputWithContext(ctx context.Context) ClientIPConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigOutput)
}

func (i ClientIPConfigArgs) ToClientIPConfigPtrOutput() ClientIPConfigPtrOutput {
	return i.ToClientIPConfigPtrOutputWithContext(context.Background())
}

func (i ClientIPConfigArgs) ToClientIPConfigPtrOutputWithContext(ctx context.Context) ClientIPConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigOutput).ToClientIPConfigPtrOutputWithContext(ctx)
}

// ClientIPConfigPtrInput is an input type that accepts ClientIPConfigArgs, ClientIPConfigPtr and ClientIPConfigPtrOutput values.
// You can construct a concrete instance of `ClientIPConfigPtrInput` via:
//
//	        ClientIPConfigArgs{...}
//
//	or:
//
//	        nil
type ClientIPConfigPtrInput interface {
	pulumi.Input

	ToClientIPConfigPtrOutput() ClientIPConfigPtrOutput
	ToClientIPConfigPtrOutputWithContext(context.Context) ClientIPConfigPtrOutput
}

type clientIPConfigPtrType ClientIPConfigArgs

func ClientIPConfigPtr(v *ClientIPConfigArgs) ClientIPConfigPtrInput {
	return (*clientIPConfigPtrType)(v)
}

func (*clientIPConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientIPConfig)(nil)).Elem()
}

func (i *clientIPConfigPtrType) ToClientIPConfigPtrOutput() ClientIPConfigPtrOutput {
	return i.ToClientIPConfigPtrOutputWithContext(context.Background())
}

func (i *clientIPConfigPtrType) ToClientIPConfigPtrOutputWithContext(ctx context.Context) ClientIPConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigPtrOutput)
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfigOutput struct{ *pulumi.OutputState }

func (ClientIPConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientIPConfig)(nil)).Elem()
}

func (o ClientIPConfigOutput) ToClientIPConfigOutput() ClientIPConfigOutput {
	return o
}

func (o ClientIPConfigOutput) ToClientIPConfigOutputWithContext(ctx context.Context) ClientIPConfigOutput {
	return o
}

func (o ClientIPConfigOutput) ToClientIPConfigPtrOutput() ClientIPConfigPtrOutput {
	return o.ToClientIPConfigPtrOutputWithContext(context.Background())
}

func (o ClientIPConfigOutput) ToClientIPConfigPtrOutputWithContext(ctx context.Context) ClientIPConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientIPConfig) *ClientIPConfig {
		return &v
	}).(ClientIPConfigPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ClientIPConfigOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClientIPConfig) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ClientIPConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientIPConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientIPConfig)(nil)).Elem()
}

func (o ClientIPConfigPtrOutput) ToClientIPConfigPtrOutput() ClientIPConfigPtrOutput {
	return o
}

func (o ClientIPConfigPtrOutput) ToClientIPConfigPtrOutputWithContext(ctx context.Context) ClientIPConfigPtrOutput {
	return o
}

func (o ClientIPConfigPtrOutput) Elem() ClientIPConfigOutput {
	return o.ApplyT(func(v *ClientIPConfig) ClientIPConfig {
		if v != nil {
			return *v
		}
		var ret ClientIPConfig
		return ret
	}).(ClientIPConfigOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ClientIPConfigPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClientIPConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfigPatch struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ClientIPConfigPatchInput is an input type that accepts ClientIPConfigPatchArgs and ClientIPConfigPatchOutput values.
// You can construct a concrete instance of `ClientIPConfigPatchInput` via:
//
//	ClientIPConfigPatchArgs{...}
type ClientIPConfigPatchInput interface {
	pulumi.Input

	ToClientIPConfigPatchOutput() ClientIPConfigPatchOutput
	ToClientIPConfigPatchOutputWithContext(context.Context) ClientIPConfigPatchOutput
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfigPatchArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ClientIPConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientIPConfigPatch)(nil)).Elem()
}

func (i ClientIPConfigPatchArgs) ToClientIPConfigPatchOutput() ClientIPConfigPatchOutput {
	return i.ToClientIPConfigPatchOutputWithContext(context.Background())
}

func (i ClientIPConfigPatchArgs) ToClientIPConfigPatchOutputWithContext(ctx context.Context) ClientIPConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigPatchOutput)
}

func (i ClientIPConfigPatchArgs) ToClientIPConfigPatchPtrOutput() ClientIPConfigPatchPtrOutput {
	return i.ToClientIPConfigPatchPtrOutputWithContext(context.Background())
}

func (i ClientIPConfigPatchArgs) ToClientIPConfigPatchPtrOutputWithContext(ctx context.Context) ClientIPConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigPatchOutput).ToClientIPConfigPatchPtrOutputWithContext(ctx)
}

// ClientIPConfigPatchPtrInput is an input type that accepts ClientIPConfigPatchArgs, ClientIPConfigPatchPtr and ClientIPConfigPatchPtrOutput values.
// You can construct a concrete instance of `ClientIPConfigPatchPtrInput` via:
//
//	        ClientIPConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ClientIPConfigPatchPtrInput interface {
	pulumi.Input

	ToClientIPConfigPatchPtrOutput() ClientIPConfigPatchPtrOutput
	ToClientIPConfigPatchPtrOutputWithContext(context.Context) ClientIPConfigPatchPtrOutput
}

type clientIPConfigPatchPtrType ClientIPConfigPatchArgs

func ClientIPConfigPatchPtr(v *ClientIPConfigPatchArgs) ClientIPConfigPatchPtrInput {
	return (*clientIPConfigPatchPtrType)(v)
}

func (*clientIPConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientIPConfigPatch)(nil)).Elem()
}

func (i *clientIPConfigPatchPtrType) ToClientIPConfigPatchPtrOutput() ClientIPConfigPatchPtrOutput {
	return i.ToClientIPConfigPatchPtrOutputWithContext(context.Background())
}

func (i *clientIPConfigPatchPtrType) ToClientIPConfigPatchPtrOutputWithContext(ctx context.Context) ClientIPConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientIPConfigPatchPtrOutput)
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type ClientIPConfigPatchOutput struct{ *pulumi.OutputState }

func (ClientIPConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientIPConfigPatch)(nil)).Elem()
}

func (o ClientIPConfigPatchOutput) ToClientIPConfigPatchOutput() ClientIPConfigPatchOutput {
	return o
}

func (o ClientIPConfigPatchOutput) ToClientIPConfigPatchOutputWithContext(ctx context.Context) ClientIPConfigPatchOutput {
	return o
}

func (o ClientIPConfigPatchOutput) ToClientIPConfigPatchPtrOutput() ClientIPConfigPatchPtrOutput {
	return o.ToClientIPConfigPatchPtrOutputWithContext(context.Background())
}

func (o ClientIPConfigPatchOutput) ToClientIPConfigPatchPtrOutputWithContext(ctx context.Context) ClientIPConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientIPConfigPatch) *ClientIPConfigPatch {
		return &v
	}).(ClientIPConfigPatchPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ClientIPConfigPatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClientIPConfigPatch) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ClientIPConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ClientIPConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientIPConfigPatch)(nil)).Elem()
}

func (o ClientIPConfigPatchPtrOutput) ToClientIPConfigPatchPtrOutput() ClientIPConfigPatchPtrOutput {
	return o
}

func (o ClientIPConfigPatchPtrOutput) ToClientIPConfigPatchPtrOutputWithContext(ctx context.Context) ClientIPConfigPatchPtrOutput {
	return o
}

func (o ClientIPConfigPatchPtrOutput) Elem() ClientIPConfigPatchOutput {
	return o.ApplyT(func(v *ClientIPConfigPatch) ClientIPConfigPatch {
		if v != nil {
			return *v
		}
		var ret ClientIPConfigPatch
		return ret
	}).(ClientIPConfigPatchOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ClientIPConfigPatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClientIPConfigPatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Information about the condition of a component.
type ComponentCondition struct {
	// Condition error code for a component. For example, a health check error code.
	Error *string `pulumi:"error"`
	// Message about the condition for a component. For example, information about a health check.
	Message *string `pulumi:"message"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status string `pulumi:"status"`
	// Type of condition for a component. Valid value: "Healthy"
	Type string `pulumi:"type"`
}

// ComponentConditionInput is an input type that accepts ComponentConditionArgs and ComponentConditionOutput values.
// You can construct a concrete instance of `ComponentConditionInput` via:
//
//	ComponentConditionArgs{...}
type ComponentConditionInput interface {
	pulumi.Input

	ToComponentConditionOutput() ComponentConditionOutput
	ToComponentConditionOutputWithContext(context.Context) ComponentConditionOutput
}

// Information about the condition of a component.
type ComponentConditionArgs struct {
	// Condition error code for a component. For example, a health check error code.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Message about the condition for a component. For example, information about a health check.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition for a component. Valid value: "Healthy"
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCondition)(nil)).Elem()
}

func (i ComponentConditionArgs) ToComponentConditionOutput() ComponentConditionOutput {
	return i.ToComponentConditionOutputWithContext(context.Background())
}

func (i ComponentConditionArgs) ToComponentConditionOutputWithContext(ctx context.Context) ComponentConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionOutput)
}

// ComponentConditionArrayInput is an input type that accepts ComponentConditionArray and ComponentConditionArrayOutput values.
// You can construct a concrete instance of `ComponentConditionArrayInput` via:
//
//	ComponentConditionArray{ ComponentConditionArgs{...} }
type ComponentConditionArrayInput interface {
	pulumi.Input

	ToComponentConditionArrayOutput() ComponentConditionArrayOutput
	ToComponentConditionArrayOutputWithContext(context.Context) ComponentConditionArrayOutput
}

type ComponentConditionArray []ComponentConditionInput

func (ComponentConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentCondition)(nil)).Elem()
}

func (i ComponentConditionArray) ToComponentConditionArrayOutput() ComponentConditionArrayOutput {
	return i.ToComponentConditionArrayOutputWithContext(context.Background())
}

func (i ComponentConditionArray) ToComponentConditionArrayOutputWithContext(ctx context.Context) ComponentConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionArrayOutput)
}

// Information about the condition of a component.
type ComponentConditionOutput struct{ *pulumi.OutputState }

func (ComponentConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCondition)(nil)).Elem()
}

func (o ComponentConditionOutput) ToComponentConditionOutput() ComponentConditionOutput {
	return o
}

func (o ComponentConditionOutput) ToComponentConditionOutputWithContext(ctx context.Context) ComponentConditionOutput {
	return o
}

// Condition error code for a component. For example, a health check error code.
func (o ComponentConditionOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentCondition) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Message about the condition for a component. For example, information about a health check.
func (o ComponentConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
func (o ComponentConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition for a component. Valid value: "Healthy"
func (o ComponentConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentCondition) string { return v.Type }).(pulumi.StringOutput)
}

type ComponentConditionArrayOutput struct{ *pulumi.OutputState }

func (ComponentConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentCondition)(nil)).Elem()
}

func (o ComponentConditionArrayOutput) ToComponentConditionArrayOutput() ComponentConditionArrayOutput {
	return o
}

func (o ComponentConditionArrayOutput) ToComponentConditionArrayOutputWithContext(ctx context.Context) ComponentConditionArrayOutput {
	return o
}

func (o ComponentConditionArrayOutput) Index(i pulumi.IntInput) ComponentConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentCondition {
		return vs[0].([]ComponentCondition)[vs[1].(int)]
	}).(ComponentConditionOutput)
}

// Information about the condition of a component.
type ComponentConditionPatch struct {
	// Condition error code for a component. For example, a health check error code.
	Error *string `pulumi:"error"`
	// Message about the condition for a component. For example, information about a health check.
	Message *string `pulumi:"message"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status *string `pulumi:"status"`
	// Type of condition for a component. Valid value: "Healthy"
	Type *string `pulumi:"type"`
}

// ComponentConditionPatchInput is an input type that accepts ComponentConditionPatchArgs and ComponentConditionPatchOutput values.
// You can construct a concrete instance of `ComponentConditionPatchInput` via:
//
//	ComponentConditionPatchArgs{...}
type ComponentConditionPatchInput interface {
	pulumi.Input

	ToComponentConditionPatchOutput() ComponentConditionPatchOutput
	ToComponentConditionPatchOutputWithContext(context.Context) ComponentConditionPatchOutput
}

// Information about the condition of a component.
type ComponentConditionPatchArgs struct {
	// Condition error code for a component. For example, a health check error code.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Message about the condition for a component. For example, information about a health check.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of condition for a component. Valid value: "Healthy"
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ComponentConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConditionPatch)(nil)).Elem()
}

func (i ComponentConditionPatchArgs) ToComponentConditionPatchOutput() ComponentConditionPatchOutput {
	return i.ToComponentConditionPatchOutputWithContext(context.Background())
}

func (i ComponentConditionPatchArgs) ToComponentConditionPatchOutputWithContext(ctx context.Context) ComponentConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionPatchOutput)
}

// ComponentConditionPatchArrayInput is an input type that accepts ComponentConditionPatchArray and ComponentConditionPatchArrayOutput values.
// You can construct a concrete instance of `ComponentConditionPatchArrayInput` via:
//
//	ComponentConditionPatchArray{ ComponentConditionPatchArgs{...} }
type ComponentConditionPatchArrayInput interface {
	pulumi.Input

	ToComponentConditionPatchArrayOutput() ComponentConditionPatchArrayOutput
	ToComponentConditionPatchArrayOutputWithContext(context.Context) ComponentConditionPatchArrayOutput
}

type ComponentConditionPatchArray []ComponentConditionPatchInput

func (ComponentConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentConditionPatch)(nil)).Elem()
}

func (i ComponentConditionPatchArray) ToComponentConditionPatchArrayOutput() ComponentConditionPatchArrayOutput {
	return i.ToComponentConditionPatchArrayOutputWithContext(context.Background())
}

func (i ComponentConditionPatchArray) ToComponentConditionPatchArrayOutputWithContext(ctx context.Context) ComponentConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionPatchArrayOutput)
}

// Information about the condition of a component.
type ComponentConditionPatchOutput struct{ *pulumi.OutputState }

func (ComponentConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConditionPatch)(nil)).Elem()
}

func (o ComponentConditionPatchOutput) ToComponentConditionPatchOutput() ComponentConditionPatchOutput {
	return o
}

func (o ComponentConditionPatchOutput) ToComponentConditionPatchOutputWithContext(ctx context.Context) ComponentConditionPatchOutput {
	return o
}

// Condition error code for a component. For example, a health check error code.
func (o ComponentConditionPatchOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionPatch) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Message about the condition for a component. For example, information about a health check.
func (o ComponentConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
func (o ComponentConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of condition for a component. Valid value: "Healthy"
func (o ComponentConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ComponentConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (ComponentConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentConditionPatch)(nil)).Elem()
}

func (o ComponentConditionPatchArrayOutput) ToComponentConditionPatchArrayOutput() ComponentConditionPatchArrayOutput {
	return o
}

func (o ComponentConditionPatchArrayOutput) ToComponentConditionPatchArrayOutputWithContext(ctx context.Context) ComponentConditionPatchArrayOutput {
	return o
}

func (o ComponentConditionPatchArrayOutput) Index(i pulumi.IntInput) ComponentConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentConditionPatch {
		return vs[0].([]ComponentConditionPatch)[vs[1].(int)]
	}).(ComponentConditionPatchOutput)
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatus struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of component conditions observed
	Conditions []ComponentCondition `pulumi:"conditions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// ComponentStatusInput is an input type that accepts ComponentStatusArgs and ComponentStatusOutput values.
// You can construct a concrete instance of `ComponentStatusInput` via:
//
//	ComponentStatusArgs{...}
type ComponentStatusInput interface {
	pulumi.Input

	ToComponentStatusOutput() ComponentStatusOutput
	ToComponentStatusOutputWithContext(context.Context) ComponentStatusOutput
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatusArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of component conditions observed
	Conditions ComponentConditionArrayInput `pulumi:"conditions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
}

func (ComponentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatus)(nil)).Elem()
}

func (i ComponentStatusArgs) ToComponentStatusOutput() ComponentStatusOutput {
	return i.ToComponentStatusOutputWithContext(context.Background())
}

func (i ComponentStatusArgs) ToComponentStatusOutputWithContext(ctx context.Context) ComponentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentStatusOutput)
}

// ComponentStatusArrayInput is an input type that accepts ComponentStatusArray and ComponentStatusArrayOutput values.
// You can construct a concrete instance of `ComponentStatusArrayInput` via:
//
//	ComponentStatusArray{ ComponentStatusArgs{...} }
type ComponentStatusArrayInput interface {
	pulumi.Input

	ToComponentStatusArrayOutput() ComponentStatusArrayOutput
	ToComponentStatusArrayOutputWithContext(context.Context) ComponentStatusArrayOutput
}

type ComponentStatusArray []ComponentStatusInput

func (ComponentStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentStatus)(nil)).Elem()
}

func (i ComponentStatusArray) ToComponentStatusArrayOutput() ComponentStatusArrayOutput {
	return i.ToComponentStatusArrayOutputWithContext(context.Background())
}

func (i ComponentStatusArray) ToComponentStatusArrayOutputWithContext(ctx context.Context) ComponentStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentStatusArrayOutput)
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatusOutput struct{ *pulumi.OutputState }

func (ComponentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatus)(nil)).Elem()
}

func (o ComponentStatusOutput) ToComponentStatusOutput() ComponentStatusOutput {
	return o
}

func (o ComponentStatusOutput) ToComponentStatusOutputWithContext(ctx context.Context) ComponentStatusOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ComponentStatusOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatus) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of component conditions observed
func (o ComponentStatusOutput) Conditions() ComponentConditionArrayOutput {
	return o.ApplyT(func(v ComponentStatus) []ComponentCondition { return v.Conditions }).(ComponentConditionArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ComponentStatusOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatus) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ComponentStatusOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ComponentStatus) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

type ComponentStatusArrayOutput struct{ *pulumi.OutputState }

func (ComponentStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentStatus)(nil)).Elem()
}

func (o ComponentStatusArrayOutput) ToComponentStatusArrayOutput() ComponentStatusArrayOutput {
	return o
}

func (o ComponentStatusArrayOutput) ToComponentStatusArrayOutputWithContext(ctx context.Context) ComponentStatusArrayOutput {
	return o
}

func (o ComponentStatusArrayOutput) Index(i pulumi.IntInput) ComponentStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentStatus {
		return vs[0].([]ComponentStatus)[vs[1].(int)]
	}).(ComponentStatusOutput)
}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
type ComponentStatusList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ComponentStatus objects.
	Items []ComponentStatus `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ComponentStatusListInput is an input type that accepts ComponentStatusListArgs and ComponentStatusListOutput values.
// You can construct a concrete instance of `ComponentStatusListInput` via:
//
//	ComponentStatusListArgs{...}
type ComponentStatusListInput interface {
	pulumi.Input

	ToComponentStatusListOutput() ComponentStatusListOutput
	ToComponentStatusListOutputWithContext(context.Context) ComponentStatusListOutput
}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
type ComponentStatusListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ComponentStatus objects.
	Items ComponentStatusArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ComponentStatusListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatusList)(nil)).Elem()
}

func (i ComponentStatusListArgs) ToComponentStatusListOutput() ComponentStatusListOutput {
	return i.ToComponentStatusListOutputWithContext(context.Background())
}

func (i ComponentStatusListArgs) ToComponentStatusListOutputWithContext(ctx context.Context) ComponentStatusListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentStatusListOutput)
}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
type ComponentStatusListOutput struct{ *pulumi.OutputState }

func (ComponentStatusListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatusList)(nil)).Elem()
}

func (o ComponentStatusListOutput) ToComponentStatusListOutput() ComponentStatusListOutput {
	return o
}

func (o ComponentStatusListOutput) ToComponentStatusListOutputWithContext(ctx context.Context) ComponentStatusListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ComponentStatusListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatusList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ComponentStatus objects.
func (o ComponentStatusListOutput) Items() ComponentStatusArrayOutput {
	return o.ApplyT(func(v ComponentStatusList) []ComponentStatus { return v.Items }).(ComponentStatusArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ComponentStatusListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatusList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ComponentStatusListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ComponentStatusList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatusPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of component conditions observed
	Conditions []ComponentConditionPatch `pulumi:"conditions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// ComponentStatusPatchInput is an input type that accepts ComponentStatusPatchArgs and ComponentStatusPatchOutput values.
// You can construct a concrete instance of `ComponentStatusPatchInput` via:
//
//	ComponentStatusPatchArgs{...}
type ComponentStatusPatchInput interface {
	pulumi.Input

	ToComponentStatusPatchOutput() ComponentStatusPatchOutput
	ToComponentStatusPatchOutputWithContext(context.Context) ComponentStatusPatchOutput
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of component conditions observed
	Conditions ComponentConditionPatchArrayInput `pulumi:"conditions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
}

func (ComponentStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatusPatch)(nil)).Elem()
}

func (i ComponentStatusPatchArgs) ToComponentStatusPatchOutput() ComponentStatusPatchOutput {
	return i.ToComponentStatusPatchOutputWithContext(context.Background())
}

func (i ComponentStatusPatchArgs) ToComponentStatusPatchOutputWithContext(ctx context.Context) ComponentStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentStatusPatchOutput)
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type ComponentStatusPatchOutput struct{ *pulumi.OutputState }

func (ComponentStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentStatusPatch)(nil)).Elem()
}

func (o ComponentStatusPatchOutput) ToComponentStatusPatchOutput() ComponentStatusPatchOutput {
	return o
}

func (o ComponentStatusPatchOutput) ToComponentStatusPatchOutputWithContext(ctx context.Context) ComponentStatusPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ComponentStatusPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatusPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of component conditions observed
func (o ComponentStatusPatchOutput) Conditions() ComponentConditionPatchArrayOutput {
	return o.ApplyT(func(v ComponentStatusPatch) []ComponentConditionPatch { return v.Conditions }).(ComponentConditionPatchArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ComponentStatusPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentStatusPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ComponentStatusPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ComponentStatusPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData map[string]string `pulumi:"binaryData"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data map[string]string `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// ConfigMapTypeInput is an input type that accepts ConfigMapTypeArgs and ConfigMapTypeOutput values.
// You can construct a concrete instance of `ConfigMapTypeInput` via:
//
//	ConfigMapTypeArgs{...}
type ConfigMapTypeInput interface {
	pulumi.Input

	ToConfigMapTypeOutput() ConfigMapTypeOutput
	ToConfigMapTypeOutputWithContext(context.Context) ConfigMapTypeOutput
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData pulumi.StringMapInput `pulumi:"binaryData"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data pulumi.StringMapInput `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrInput `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
}

func (ConfigMapTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapType)(nil)).Elem()
}

func (i ConfigMapTypeArgs) ToConfigMapTypeOutput() ConfigMapTypeOutput {
	return i.ToConfigMapTypeOutputWithContext(context.Background())
}

func (i ConfigMapTypeArgs) ToConfigMapTypeOutputWithContext(ctx context.Context) ConfigMapTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapTypeOutput)
}

// ConfigMapTypeArrayInput is an input type that accepts ConfigMapTypeArray and ConfigMapTypeArrayOutput values.
// You can construct a concrete instance of `ConfigMapTypeArrayInput` via:
//
//	ConfigMapTypeArray{ ConfigMapTypeArgs{...} }
type ConfigMapTypeArrayInput interface {
	pulumi.Input

	ToConfigMapTypeArrayOutput() ConfigMapTypeArrayOutput
	ToConfigMapTypeArrayOutputWithContext(context.Context) ConfigMapTypeArrayOutput
}

type ConfigMapTypeArray []ConfigMapTypeInput

func (ConfigMapTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigMapType)(nil)).Elem()
}

func (i ConfigMapTypeArray) ToConfigMapTypeArrayOutput() ConfigMapTypeArrayOutput {
	return i.ToConfigMapTypeArrayOutputWithContext(context.Background())
}

func (i ConfigMapTypeArray) ToConfigMapTypeArrayOutputWithContext(ctx context.Context) ConfigMapTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapTypeArrayOutput)
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapTypeOutput struct{ *pulumi.OutputState }

func (ConfigMapTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapType)(nil)).Elem()
}

func (o ConfigMapTypeOutput) ToConfigMapTypeOutput() ConfigMapTypeOutput {
	return o
}

func (o ConfigMapTypeOutput) ToConfigMapTypeOutputWithContext(ctx context.Context) ConfigMapTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConfigMapTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
func (o ConfigMapTypeOutput) BinaryData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigMapType) map[string]string { return v.BinaryData }).(pulumi.StringMapOutput)
}

// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
func (o ConfigMapTypeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigMapType) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (o ConfigMapTypeOutput) Immutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapType) *bool { return v.Immutable }).(pulumi.BoolPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConfigMapTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ConfigMapTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ConfigMapType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

type ConfigMapTypeArrayOutput struct{ *pulumi.OutputState }

func (ConfigMapTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigMapType)(nil)).Elem()
}

func (o ConfigMapTypeArrayOutput) ToConfigMapTypeArrayOutput() ConfigMapTypeArrayOutput {
	return o
}

func (o ConfigMapTypeArrayOutput) ToConfigMapTypeArrayOutputWithContext(ctx context.Context) ConfigMapTypeArrayOutput {
	return o
}

func (o ConfigMapTypeArrayOutput) Index(i pulumi.IntInput) ConfigMapTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigMapType {
		return vs[0].([]ConfigMapType)[vs[1].(int)]
	}).(ConfigMapTypeOutput)
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapEnvSourceInput is an input type that accepts ConfigMapEnvSourceArgs and ConfigMapEnvSourceOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourceInput` via:
//
//	ConfigMapEnvSourceArgs{...}
type ConfigMapEnvSourceInput interface {
	pulumi.Input

	ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput
	ToConfigMapEnvSourceOutputWithContext(context.Context) ConfigMapEnvSourceOutput
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return i.ToConfigMapEnvSourceOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput)
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput).ToConfigMapEnvSourcePtrOutputWithContext(ctx)
}

// ConfigMapEnvSourcePtrInput is an input type that accepts ConfigMapEnvSourceArgs, ConfigMapEnvSourcePtr and ConfigMapEnvSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourcePtrInput` via:
//
//	        ConfigMapEnvSourceArgs{...}
//
//	or:
//
//	        nil
type ConfigMapEnvSourcePtrInput interface {
	pulumi.Input

	ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput
	ToConfigMapEnvSourcePtrOutputWithContext(context.Context) ConfigMapEnvSourcePtrOutput
}

type configMapEnvSourcePtrType ConfigMapEnvSourceArgs

func ConfigMapEnvSourcePtr(v *ConfigMapEnvSourceArgs) ConfigMapEnvSourcePtrInput {
	return (*configMapEnvSourcePtrType)(v)
}

func (*configMapEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePtrOutput)
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapEnvSource) *ConfigMapEnvSource {
		return &v
	}).(ConfigMapEnvSourcePtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) Elem() ConfigMapEnvSourceOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) ConfigMapEnvSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapEnvSource
		return ret
	}).(ConfigMapEnvSourceOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourcePatch struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapEnvSourcePatchInput is an input type that accepts ConfigMapEnvSourcePatchArgs and ConfigMapEnvSourcePatchOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourcePatchInput` via:
//
//	ConfigMapEnvSourcePatchArgs{...}
type ConfigMapEnvSourcePatchInput interface {
	pulumi.Input

	ToConfigMapEnvSourcePatchOutput() ConfigMapEnvSourcePatchOutput
	ToConfigMapEnvSourcePatchOutputWithContext(context.Context) ConfigMapEnvSourcePatchOutput
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourcePatchArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapEnvSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSourcePatch)(nil)).Elem()
}

func (i ConfigMapEnvSourcePatchArgs) ToConfigMapEnvSourcePatchOutput() ConfigMapEnvSourcePatchOutput {
	return i.ToConfigMapEnvSourcePatchOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourcePatchArgs) ToConfigMapEnvSourcePatchOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePatchOutput)
}

func (i ConfigMapEnvSourcePatchArgs) ToConfigMapEnvSourcePatchPtrOutput() ConfigMapEnvSourcePatchPtrOutput {
	return i.ToConfigMapEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourcePatchArgs) ToConfigMapEnvSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePatchOutput).ToConfigMapEnvSourcePatchPtrOutputWithContext(ctx)
}

// ConfigMapEnvSourcePatchPtrInput is an input type that accepts ConfigMapEnvSourcePatchArgs, ConfigMapEnvSourcePatchPtr and ConfigMapEnvSourcePatchPtrOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourcePatchPtrInput` via:
//
//	        ConfigMapEnvSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ConfigMapEnvSourcePatchPtrInput interface {
	pulumi.Input

	ToConfigMapEnvSourcePatchPtrOutput() ConfigMapEnvSourcePatchPtrOutput
	ToConfigMapEnvSourcePatchPtrOutputWithContext(context.Context) ConfigMapEnvSourcePatchPtrOutput
}

type configMapEnvSourcePatchPtrType ConfigMapEnvSourcePatchArgs

func ConfigMapEnvSourcePatchPtr(v *ConfigMapEnvSourcePatchArgs) ConfigMapEnvSourcePatchPtrInput {
	return (*configMapEnvSourcePatchPtrType)(v)
}

func (*configMapEnvSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSourcePatch)(nil)).Elem()
}

func (i *configMapEnvSourcePatchPtrType) ToConfigMapEnvSourcePatchPtrOutput() ConfigMapEnvSourcePatchPtrOutput {
	return i.ToConfigMapEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (i *configMapEnvSourcePatchPtrType) ToConfigMapEnvSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePatchPtrOutput)
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourcePatchOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSourcePatch)(nil)).Elem()
}

func (o ConfigMapEnvSourcePatchOutput) ToConfigMapEnvSourcePatchOutput() ConfigMapEnvSourcePatchOutput {
	return o
}

func (o ConfigMapEnvSourcePatchOutput) ToConfigMapEnvSourcePatchOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchOutput {
	return o
}

func (o ConfigMapEnvSourcePatchOutput) ToConfigMapEnvSourcePatchPtrOutput() ConfigMapEnvSourcePatchPtrOutput {
	return o.ToConfigMapEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (o ConfigMapEnvSourcePatchOutput) ToConfigMapEnvSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapEnvSourcePatch) *ConfigMapEnvSourcePatch {
		return &v
	}).(ConfigMapEnvSourcePatchPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapEnvSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourcePatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSourcePatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapEnvSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSourcePatch)(nil)).Elem()
}

func (o ConfigMapEnvSourcePatchPtrOutput) ToConfigMapEnvSourcePatchPtrOutput() ConfigMapEnvSourcePatchPtrOutput {
	return o
}

func (o ConfigMapEnvSourcePatchPtrOutput) ToConfigMapEnvSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePatchPtrOutput {
	return o
}

func (o ConfigMapEnvSourcePatchPtrOutput) Elem() ConfigMapEnvSourcePatchOutput {
	return o.ApplyT(func(v *ConfigMapEnvSourcePatch) ConfigMapEnvSourcePatch {
		if v != nil {
			return *v
		}
		var ret ConfigMapEnvSourcePatch
		return ret
	}).(ConfigMapEnvSourcePatchOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapEnvSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourcePatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelector struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapKeySelectorInput is an input type that accepts ConfigMapKeySelectorArgs and ConfigMapKeySelectorOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorInput` via:
//
//	ConfigMapKeySelectorArgs{...}
type ConfigMapKeySelectorInput interface {
	pulumi.Input

	ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput
	ToConfigMapKeySelectorOutputWithContext(context.Context) ConfigMapKeySelectorOutput
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelectorArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return i.ToConfigMapKeySelectorOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput)
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput).ToConfigMapKeySelectorPtrOutputWithContext(ctx)
}

// ConfigMapKeySelectorPtrInput is an input type that accepts ConfigMapKeySelectorArgs, ConfigMapKeySelectorPtr and ConfigMapKeySelectorPtrOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorPtrInput` via:
//
//	        ConfigMapKeySelectorArgs{...}
//
//	or:
//
//	        nil
type ConfigMapKeySelectorPtrInput interface {
	pulumi.Input

	ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput
	ToConfigMapKeySelectorPtrOutputWithContext(context.Context) ConfigMapKeySelectorPtrOutput
}

type configMapKeySelectorPtrType ConfigMapKeySelectorArgs

func ConfigMapKeySelectorPtr(v *ConfigMapKeySelectorArgs) ConfigMapKeySelectorPtrInput {
	return (*configMapKeySelectorPtrType)(v)
}

func (*configMapKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPtrOutput)
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelectorOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapKeySelector) *ConfigMapKeySelector {
		return &v
	}).(ConfigMapKeySelectorPtrOutput)
}

// The key to select.
func (o ConfigMapKeySelectorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapKeySelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) Elem() ConfigMapKeySelectorOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) ConfigMapKeySelector {
		if v != nil {
			return *v
		}
		var ret ConfigMapKeySelector
		return ret
	}).(ConfigMapKeySelectorOutput)
}

// The key to select.
func (o ConfigMapKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelectorPatch struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapKeySelectorPatchInput is an input type that accepts ConfigMapKeySelectorPatchArgs and ConfigMapKeySelectorPatchOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorPatchInput` via:
//
//	ConfigMapKeySelectorPatchArgs{...}
type ConfigMapKeySelectorPatchInput interface {
	pulumi.Input

	ToConfigMapKeySelectorPatchOutput() ConfigMapKeySelectorPatchOutput
	ToConfigMapKeySelectorPatchOutputWithContext(context.Context) ConfigMapKeySelectorPatchOutput
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelectorPatchArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapKeySelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelectorPatch)(nil)).Elem()
}

func (i ConfigMapKeySelectorPatchArgs) ToConfigMapKeySelectorPatchOutput() ConfigMapKeySelectorPatchOutput {
	return i.ToConfigMapKeySelectorPatchOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorPatchArgs) ToConfigMapKeySelectorPatchOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPatchOutput)
}

func (i ConfigMapKeySelectorPatchArgs) ToConfigMapKeySelectorPatchPtrOutput() ConfigMapKeySelectorPatchPtrOutput {
	return i.ToConfigMapKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorPatchArgs) ToConfigMapKeySelectorPatchPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPatchOutput).ToConfigMapKeySelectorPatchPtrOutputWithContext(ctx)
}

// ConfigMapKeySelectorPatchPtrInput is an input type that accepts ConfigMapKeySelectorPatchArgs, ConfigMapKeySelectorPatchPtr and ConfigMapKeySelectorPatchPtrOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorPatchPtrInput` via:
//
//	        ConfigMapKeySelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ConfigMapKeySelectorPatchPtrInput interface {
	pulumi.Input

	ToConfigMapKeySelectorPatchPtrOutput() ConfigMapKeySelectorPatchPtrOutput
	ToConfigMapKeySelectorPatchPtrOutputWithContext(context.Context) ConfigMapKeySelectorPatchPtrOutput
}

type configMapKeySelectorPatchPtrType ConfigMapKeySelectorPatchArgs

func ConfigMapKeySelectorPatchPtr(v *ConfigMapKeySelectorPatchArgs) ConfigMapKeySelectorPatchPtrInput {
	return (*configMapKeySelectorPatchPtrType)(v)
}

func (*configMapKeySelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelectorPatch)(nil)).Elem()
}

func (i *configMapKeySelectorPatchPtrType) ToConfigMapKeySelectorPatchPtrOutput() ConfigMapKeySelectorPatchPtrOutput {
	return i.ToConfigMapKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (i *configMapKeySelectorPatchPtrType) ToConfigMapKeySelectorPatchPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPatchPtrOutput)
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelectorPatchOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelectorPatch)(nil)).Elem()
}

func (o ConfigMapKeySelectorPatchOutput) ToConfigMapKeySelectorPatchOutput() ConfigMapKeySelectorPatchOutput {
	return o
}

func (o ConfigMapKeySelectorPatchOutput) ToConfigMapKeySelectorPatchOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchOutput {
	return o
}

func (o ConfigMapKeySelectorPatchOutput) ToConfigMapKeySelectorPatchPtrOutput() ConfigMapKeySelectorPatchPtrOutput {
	return o.ToConfigMapKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (o ConfigMapKeySelectorPatchOutput) ToConfigMapKeySelectorPatchPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapKeySelectorPatch) *ConfigMapKeySelectorPatch {
		return &v
	}).(ConfigMapKeySelectorPatchPtrOutput)
}

// The key to select.
func (o ConfigMapKeySelectorPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapKeySelectorPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapKeySelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelectorPatch)(nil)).Elem()
}

func (o ConfigMapKeySelectorPatchPtrOutput) ToConfigMapKeySelectorPatchPtrOutput() ConfigMapKeySelectorPatchPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPatchPtrOutput) ToConfigMapKeySelectorPatchPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPatchPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPatchPtrOutput) Elem() ConfigMapKeySelectorPatchOutput {
	return o.ApplyT(func(v *ConfigMapKeySelectorPatch) ConfigMapKeySelectorPatch {
		if v != nil {
			return *v
		}
		var ret ConfigMapKeySelectorPatch
		return ret
	}).(ConfigMapKeySelectorPatchOutput)
}

// The key to select.
func (o ConfigMapKeySelectorPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapKeySelectorPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelectorPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
type ConfigMapListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of ConfigMaps.
	Items []ConfigMapType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ConfigMapListTypeInput is an input type that accepts ConfigMapListTypeArgs and ConfigMapListTypeOutput values.
// You can construct a concrete instance of `ConfigMapListTypeInput` via:
//
//	ConfigMapListTypeArgs{...}
type ConfigMapListTypeInput interface {
	pulumi.Input

	ToConfigMapListTypeOutput() ConfigMapListTypeOutput
	ToConfigMapListTypeOutputWithContext(context.Context) ConfigMapListTypeOutput
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
type ConfigMapListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of ConfigMaps.
	Items ConfigMapTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ConfigMapListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapListType)(nil)).Elem()
}

func (i ConfigMapListTypeArgs) ToConfigMapListTypeOutput() ConfigMapListTypeOutput {
	return i.ToConfigMapListTypeOutputWithContext(context.Background())
}

func (i ConfigMapListTypeArgs) ToConfigMapListTypeOutputWithContext(ctx context.Context) ConfigMapListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapListTypeOutput)
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
type ConfigMapListTypeOutput struct{ *pulumi.OutputState }

func (ConfigMapListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapListType)(nil)).Elem()
}

func (o ConfigMapListTypeOutput) ToConfigMapListTypeOutput() ConfigMapListTypeOutput {
	return o
}

func (o ConfigMapListTypeOutput) ToConfigMapListTypeOutputWithContext(ctx context.Context) ConfigMapListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConfigMapListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of ConfigMaps.
func (o ConfigMapListTypeOutput) Items() ConfigMapTypeArrayOutput {
	return o.ApplyT(func(v ConfigMapListType) []ConfigMapType { return v.Items }).(ConfigMapTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConfigMapListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ConfigMapListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ConfigMapListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSource struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `pulumi:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `pulumi:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace string `pulumi:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid *string `pulumi:"uid"`
}

// ConfigMapNodeConfigSourceInput is an input type that accepts ConfigMapNodeConfigSourceArgs and ConfigMapNodeConfigSourceOutput values.
// You can construct a concrete instance of `ConfigMapNodeConfigSourceInput` via:
//
//	ConfigMapNodeConfigSourceArgs{...}
type ConfigMapNodeConfigSourceInput interface {
	pulumi.Input

	ToConfigMapNodeConfigSourceOutput() ConfigMapNodeConfigSourceOutput
	ToConfigMapNodeConfigSourceOutputWithContext(context.Context) ConfigMapNodeConfigSourceOutput
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSourceArgs struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey pulumi.StringInput `pulumi:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ConfigMapNodeConfigSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapNodeConfigSource)(nil)).Elem()
}

func (i ConfigMapNodeConfigSourceArgs) ToConfigMapNodeConfigSourceOutput() ConfigMapNodeConfigSourceOutput {
	return i.ToConfigMapNodeConfigSourceOutputWithContext(context.Background())
}

func (i ConfigMapNodeConfigSourceArgs) ToConfigMapNodeConfigSourceOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourceOutput)
}

func (i ConfigMapNodeConfigSourceArgs) ToConfigMapNodeConfigSourcePtrOutput() ConfigMapNodeConfigSourcePtrOutput {
	return i.ToConfigMapNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapNodeConfigSourceArgs) ToConfigMapNodeConfigSourcePtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourceOutput).ToConfigMapNodeConfigSourcePtrOutputWithContext(ctx)
}

// ConfigMapNodeConfigSourcePtrInput is an input type that accepts ConfigMapNodeConfigSourceArgs, ConfigMapNodeConfigSourcePtr and ConfigMapNodeConfigSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapNodeConfigSourcePtrInput` via:
//
//	        ConfigMapNodeConfigSourceArgs{...}
//
//	or:
//
//	        nil
type ConfigMapNodeConfigSourcePtrInput interface {
	pulumi.Input

	ToConfigMapNodeConfigSourcePtrOutput() ConfigMapNodeConfigSourcePtrOutput
	ToConfigMapNodeConfigSourcePtrOutputWithContext(context.Context) ConfigMapNodeConfigSourcePtrOutput
}

type configMapNodeConfigSourcePtrType ConfigMapNodeConfigSourceArgs

func ConfigMapNodeConfigSourcePtr(v *ConfigMapNodeConfigSourceArgs) ConfigMapNodeConfigSourcePtrInput {
	return (*configMapNodeConfigSourcePtrType)(v)
}

func (*configMapNodeConfigSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapNodeConfigSource)(nil)).Elem()
}

func (i *configMapNodeConfigSourcePtrType) ToConfigMapNodeConfigSourcePtrOutput() ConfigMapNodeConfigSourcePtrOutput {
	return i.ToConfigMapNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (i *configMapNodeConfigSourcePtrType) ToConfigMapNodeConfigSourcePtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourcePtrOutput)
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapNodeConfigSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapNodeConfigSource)(nil)).Elem()
}

func (o ConfigMapNodeConfigSourceOutput) ToConfigMapNodeConfigSourceOutput() ConfigMapNodeConfigSourceOutput {
	return o
}

func (o ConfigMapNodeConfigSourceOutput) ToConfigMapNodeConfigSourceOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourceOutput {
	return o
}

func (o ConfigMapNodeConfigSourceOutput) ToConfigMapNodeConfigSourcePtrOutput() ConfigMapNodeConfigSourcePtrOutput {
	return o.ToConfigMapNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapNodeConfigSourceOutput) ToConfigMapNodeConfigSourcePtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapNodeConfigSource) *ConfigMapNodeConfigSource {
		return &v
	}).(ConfigMapNodeConfigSourcePtrOutput)
}

// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
func (o ConfigMapNodeConfigSourceOutput) KubeletConfigKey() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSource) string { return v.KubeletConfigKey }).(pulumi.StringOutput)
}

// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSource) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourceOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSource) string { return v.Namespace }).(pulumi.StringOutput)
}

// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourceOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSource) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSource) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ConfigMapNodeConfigSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapNodeConfigSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapNodeConfigSource)(nil)).Elem()
}

func (o ConfigMapNodeConfigSourcePtrOutput) ToConfigMapNodeConfigSourcePtrOutput() ConfigMapNodeConfigSourcePtrOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePtrOutput) ToConfigMapNodeConfigSourcePtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePtrOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePtrOutput) Elem() ConfigMapNodeConfigSourceOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) ConfigMapNodeConfigSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapNodeConfigSource
		return ret
	}).(ConfigMapNodeConfigSourceOutput)
}

// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
func (o ConfigMapNodeConfigSourcePtrOutput) KubeletConfigKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) *string {
		if v == nil {
			return nil
		}
		return &v.KubeletConfigKey
	}).(pulumi.StringPtrOutput)
}

// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSourcePatch struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey *string `pulumi:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name *string `pulumi:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace *string `pulumi:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid *string `pulumi:"uid"`
}

// ConfigMapNodeConfigSourcePatchInput is an input type that accepts ConfigMapNodeConfigSourcePatchArgs and ConfigMapNodeConfigSourcePatchOutput values.
// You can construct a concrete instance of `ConfigMapNodeConfigSourcePatchInput` via:
//
//	ConfigMapNodeConfigSourcePatchArgs{...}
type ConfigMapNodeConfigSourcePatchInput interface {
	pulumi.Input

	ToConfigMapNodeConfigSourcePatchOutput() ConfigMapNodeConfigSourcePatchOutput
	ToConfigMapNodeConfigSourcePatchOutputWithContext(context.Context) ConfigMapNodeConfigSourcePatchOutput
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSourcePatchArgs struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey pulumi.StringPtrInput `pulumi:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ConfigMapNodeConfigSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapNodeConfigSourcePatch)(nil)).Elem()
}

func (i ConfigMapNodeConfigSourcePatchArgs) ToConfigMapNodeConfigSourcePatchOutput() ConfigMapNodeConfigSourcePatchOutput {
	return i.ToConfigMapNodeConfigSourcePatchOutputWithContext(context.Background())
}

func (i ConfigMapNodeConfigSourcePatchArgs) ToConfigMapNodeConfigSourcePatchOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourcePatchOutput)
}

func (i ConfigMapNodeConfigSourcePatchArgs) ToConfigMapNodeConfigSourcePatchPtrOutput() ConfigMapNodeConfigSourcePatchPtrOutput {
	return i.ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (i ConfigMapNodeConfigSourcePatchArgs) ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourcePatchOutput).ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(ctx)
}

// ConfigMapNodeConfigSourcePatchPtrInput is an input type that accepts ConfigMapNodeConfigSourcePatchArgs, ConfigMapNodeConfigSourcePatchPtr and ConfigMapNodeConfigSourcePatchPtrOutput values.
// You can construct a concrete instance of `ConfigMapNodeConfigSourcePatchPtrInput` via:
//
//	        ConfigMapNodeConfigSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ConfigMapNodeConfigSourcePatchPtrInput interface {
	pulumi.Input

	ToConfigMapNodeConfigSourcePatchPtrOutput() ConfigMapNodeConfigSourcePatchPtrOutput
	ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(context.Context) ConfigMapNodeConfigSourcePatchPtrOutput
}

type configMapNodeConfigSourcePatchPtrType ConfigMapNodeConfigSourcePatchArgs

func ConfigMapNodeConfigSourcePatchPtr(v *ConfigMapNodeConfigSourcePatchArgs) ConfigMapNodeConfigSourcePatchPtrInput {
	return (*configMapNodeConfigSourcePatchPtrType)(v)
}

func (*configMapNodeConfigSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapNodeConfigSourcePatch)(nil)).Elem()
}

func (i *configMapNodeConfigSourcePatchPtrType) ToConfigMapNodeConfigSourcePatchPtrOutput() ConfigMapNodeConfigSourcePatchPtrOutput {
	return i.ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (i *configMapNodeConfigSourcePatchPtrType) ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapNodeConfigSourcePatchPtrOutput)
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type ConfigMapNodeConfigSourcePatchOutput struct{ *pulumi.OutputState }

func (ConfigMapNodeConfigSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapNodeConfigSourcePatch)(nil)).Elem()
}

func (o ConfigMapNodeConfigSourcePatchOutput) ToConfigMapNodeConfigSourcePatchOutput() ConfigMapNodeConfigSourcePatchOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePatchOutput) ToConfigMapNodeConfigSourcePatchOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePatchOutput) ToConfigMapNodeConfigSourcePatchPtrOutput() ConfigMapNodeConfigSourcePatchPtrOutput {
	return o.ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (o ConfigMapNodeConfigSourcePatchOutput) ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapNodeConfigSourcePatch) *ConfigMapNodeConfigSourcePatch {
		return &v
	}).(ConfigMapNodeConfigSourcePatchPtrOutput)
}

// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchOutput) KubeletConfigKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSourcePatch) *string { return v.KubeletConfigKey }).(pulumi.StringPtrOutput)
}

// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSourcePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSourcePatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapNodeConfigSourcePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ConfigMapNodeConfigSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapNodeConfigSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapNodeConfigSourcePatch)(nil)).Elem()
}

func (o ConfigMapNodeConfigSourcePatchPtrOutput) ToConfigMapNodeConfigSourcePatchPtrOutput() ConfigMapNodeConfigSourcePatchPtrOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePatchPtrOutput) ToConfigMapNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapNodeConfigSourcePatchPtrOutput {
	return o
}

func (o ConfigMapNodeConfigSourcePatchPtrOutput) Elem() ConfigMapNodeConfigSourcePatchOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) ConfigMapNodeConfigSourcePatch {
		if v != nil {
			return *v
		}
		var ret ConfigMapNodeConfigSourcePatch
		return ret
	}).(ConfigMapNodeConfigSourcePatchOutput)
}

// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchPtrOutput) KubeletConfigKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.KubeletConfigKey
	}).(pulumi.StringPtrOutput)
}

// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
func (o ConfigMapNodeConfigSourcePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (o ConfigMapNodeConfigSourcePatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapNodeConfigSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData map[string]string `pulumi:"binaryData"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data map[string]string `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// ConfigMapPatchTypeInput is an input type that accepts ConfigMapPatchTypeArgs and ConfigMapPatchTypeOutput values.
// You can construct a concrete instance of `ConfigMapPatchTypeInput` via:
//
//	ConfigMapPatchTypeArgs{...}
type ConfigMapPatchTypeInput interface {
	pulumi.Input

	ToConfigMapPatchTypeOutput() ConfigMapPatchTypeOutput
	ToConfigMapPatchTypeOutputWithContext(context.Context) ConfigMapPatchTypeOutput
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData pulumi.StringMapInput `pulumi:"binaryData"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data pulumi.StringMapInput `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrInput `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
}

func (ConfigMapPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapPatchType)(nil)).Elem()
}

func (i ConfigMapPatchTypeArgs) ToConfigMapPatchTypeOutput() ConfigMapPatchTypeOutput {
	return i.ToConfigMapPatchTypeOutputWithContext(context.Background())
}

func (i ConfigMapPatchTypeArgs) ToConfigMapPatchTypeOutputWithContext(ctx context.Context) ConfigMapPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapPatchTypeOutput)
}

// ConfigMap holds configuration data for pods to consume.
type ConfigMapPatchTypeOutput struct{ *pulumi.OutputState }

func (ConfigMapPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapPatchType)(nil)).Elem()
}

func (o ConfigMapPatchTypeOutput) ToConfigMapPatchTypeOutput() ConfigMapPatchTypeOutput {
	return o
}

func (o ConfigMapPatchTypeOutput) ToConfigMapPatchTypeOutputWithContext(ctx context.Context) ConfigMapPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConfigMapPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
func (o ConfigMapPatchTypeOutput) BinaryData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigMapPatchType) map[string]string { return v.BinaryData }).(pulumi.StringMapOutput)
}

// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
func (o ConfigMapPatchTypeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigMapPatchType) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (o ConfigMapPatchTypeOutput) Immutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapPatchType) *bool { return v.Immutable }).(pulumi.BoolPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConfigMapPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ConfigMapPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ConfigMapPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjection struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPath `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapProjectionInput is an input type that accepts ConfigMapProjectionArgs and ConfigMapProjectionOutput values.
// You can construct a concrete instance of `ConfigMapProjectionInput` via:
//
//	ConfigMapProjectionArgs{...}
type ConfigMapProjectionInput interface {
	pulumi.Input

	ToConfigMapProjectionOutput() ConfigMapProjectionOutput
	ToConfigMapProjectionOutputWithContext(context.Context) ConfigMapProjectionOutput
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjectionArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapProjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapProjection)(nil)).Elem()
}

func (i ConfigMapProjectionArgs) ToConfigMapProjectionOutput() ConfigMapProjectionOutput {
	return i.ToConfigMapProjectionOutputWithContext(context.Background())
}

func (i ConfigMapProjectionArgs) ToConfigMapProjectionOutputWithContext(ctx context.Context) ConfigMapProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionOutput)
}

func (i ConfigMapProjectionArgs) ToConfigMapProjectionPtrOutput() ConfigMapProjectionPtrOutput {
	return i.ToConfigMapProjectionPtrOutputWithContext(context.Background())
}

func (i ConfigMapProjectionArgs) ToConfigMapProjectionPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionOutput).ToConfigMapProjectionPtrOutputWithContext(ctx)
}

// ConfigMapProjectionPtrInput is an input type that accepts ConfigMapProjectionArgs, ConfigMapProjectionPtr and ConfigMapProjectionPtrOutput values.
// You can construct a concrete instance of `ConfigMapProjectionPtrInput` via:
//
//	        ConfigMapProjectionArgs{...}
//
//	or:
//
//	        nil
type ConfigMapProjectionPtrInput interface {
	pulumi.Input

	ToConfigMapProjectionPtrOutput() ConfigMapProjectionPtrOutput
	ToConfigMapProjectionPtrOutputWithContext(context.Context) ConfigMapProjectionPtrOutput
}

type configMapProjectionPtrType ConfigMapProjectionArgs

func ConfigMapProjectionPtr(v *ConfigMapProjectionArgs) ConfigMapProjectionPtrInput {
	return (*configMapProjectionPtrType)(v)
}

func (*configMapProjectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapProjection)(nil)).Elem()
}

func (i *configMapProjectionPtrType) ToConfigMapProjectionPtrOutput() ConfigMapProjectionPtrOutput {
	return i.ToConfigMapProjectionPtrOutputWithContext(context.Background())
}

func (i *configMapProjectionPtrType) ToConfigMapProjectionPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionPtrOutput)
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjectionOutput struct{ *pulumi.OutputState }

func (ConfigMapProjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapProjection)(nil)).Elem()
}

func (o ConfigMapProjectionOutput) ToConfigMapProjectionOutput() ConfigMapProjectionOutput {
	return o
}

func (o ConfigMapProjectionOutput) ToConfigMapProjectionOutputWithContext(ctx context.Context) ConfigMapProjectionOutput {
	return o
}

func (o ConfigMapProjectionOutput) ToConfigMapProjectionPtrOutput() ConfigMapProjectionPtrOutput {
	return o.ToConfigMapProjectionPtrOutputWithContext(context.Background())
}

func (o ConfigMapProjectionOutput) ToConfigMapProjectionPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapProjection) *ConfigMapProjection {
		return &v
	}).(ConfigMapProjectionPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapProjectionOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v ConfigMapProjection) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapProjectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapProjection) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapProjectionOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapProjection) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapProjectionPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapProjectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapProjection)(nil)).Elem()
}

func (o ConfigMapProjectionPtrOutput) ToConfigMapProjectionPtrOutput() ConfigMapProjectionPtrOutput {
	return o
}

func (o ConfigMapProjectionPtrOutput) ToConfigMapProjectionPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPtrOutput {
	return o
}

func (o ConfigMapProjectionPtrOutput) Elem() ConfigMapProjectionOutput {
	return o.ApplyT(func(v *ConfigMapProjection) ConfigMapProjection {
		if v != nil {
			return *v
		}
		var ret ConfigMapProjection
		return ret
	}).(ConfigMapProjectionOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapProjectionPtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *ConfigMapProjection) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapProjectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapProjection) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapProjectionPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapProjection) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjectionPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPathPatch `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapProjectionPatchInput is an input type that accepts ConfigMapProjectionPatchArgs and ConfigMapProjectionPatchOutput values.
// You can construct a concrete instance of `ConfigMapProjectionPatchInput` via:
//
//	ConfigMapProjectionPatchArgs{...}
type ConfigMapProjectionPatchInput interface {
	pulumi.Input

	ToConfigMapProjectionPatchOutput() ConfigMapProjectionPatchOutput
	ToConfigMapProjectionPatchOutputWithContext(context.Context) ConfigMapProjectionPatchOutput
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjectionPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathPatchArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapProjectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapProjectionPatch)(nil)).Elem()
}

func (i ConfigMapProjectionPatchArgs) ToConfigMapProjectionPatchOutput() ConfigMapProjectionPatchOutput {
	return i.ToConfigMapProjectionPatchOutputWithContext(context.Background())
}

func (i ConfigMapProjectionPatchArgs) ToConfigMapProjectionPatchOutputWithContext(ctx context.Context) ConfigMapProjectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionPatchOutput)
}

func (i ConfigMapProjectionPatchArgs) ToConfigMapProjectionPatchPtrOutput() ConfigMapProjectionPatchPtrOutput {
	return i.ToConfigMapProjectionPatchPtrOutputWithContext(context.Background())
}

func (i ConfigMapProjectionPatchArgs) ToConfigMapProjectionPatchPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionPatchOutput).ToConfigMapProjectionPatchPtrOutputWithContext(ctx)
}

// ConfigMapProjectionPatchPtrInput is an input type that accepts ConfigMapProjectionPatchArgs, ConfigMapProjectionPatchPtr and ConfigMapProjectionPatchPtrOutput values.
// You can construct a concrete instance of `ConfigMapProjectionPatchPtrInput` via:
//
//	        ConfigMapProjectionPatchArgs{...}
//
//	or:
//
//	        nil
type ConfigMapProjectionPatchPtrInput interface {
	pulumi.Input

	ToConfigMapProjectionPatchPtrOutput() ConfigMapProjectionPatchPtrOutput
	ToConfigMapProjectionPatchPtrOutputWithContext(context.Context) ConfigMapProjectionPatchPtrOutput
}

type configMapProjectionPatchPtrType ConfigMapProjectionPatchArgs

func ConfigMapProjectionPatchPtr(v *ConfigMapProjectionPatchArgs) ConfigMapProjectionPatchPtrInput {
	return (*configMapProjectionPatchPtrType)(v)
}

func (*configMapProjectionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapProjectionPatch)(nil)).Elem()
}

func (i *configMapProjectionPatchPtrType) ToConfigMapProjectionPatchPtrOutput() ConfigMapProjectionPatchPtrOutput {
	return i.ToConfigMapProjectionPatchPtrOutputWithContext(context.Background())
}

func (i *configMapProjectionPatchPtrType) ToConfigMapProjectionPatchPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapProjectionPatchPtrOutput)
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type ConfigMapProjectionPatchOutput struct{ *pulumi.OutputState }

func (ConfigMapProjectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapProjectionPatch)(nil)).Elem()
}

func (o ConfigMapProjectionPatchOutput) ToConfigMapProjectionPatchOutput() ConfigMapProjectionPatchOutput {
	return o
}

func (o ConfigMapProjectionPatchOutput) ToConfigMapProjectionPatchOutputWithContext(ctx context.Context) ConfigMapProjectionPatchOutput {
	return o
}

func (o ConfigMapProjectionPatchOutput) ToConfigMapProjectionPatchPtrOutput() ConfigMapProjectionPatchPtrOutput {
	return o.ToConfigMapProjectionPatchPtrOutputWithContext(context.Background())
}

func (o ConfigMapProjectionPatchOutput) ToConfigMapProjectionPatchPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapProjectionPatch) *ConfigMapProjectionPatch {
		return &v
	}).(ConfigMapProjectionPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapProjectionPatchOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v ConfigMapProjectionPatch) []KeyToPathPatch { return v.Items }).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapProjectionPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapProjectionPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapProjectionPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapProjectionPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapProjectionPatchPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapProjectionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapProjectionPatch)(nil)).Elem()
}

func (o ConfigMapProjectionPatchPtrOutput) ToConfigMapProjectionPatchPtrOutput() ConfigMapProjectionPatchPtrOutput {
	return o
}

func (o ConfigMapProjectionPatchPtrOutput) ToConfigMapProjectionPatchPtrOutputWithContext(ctx context.Context) ConfigMapProjectionPatchPtrOutput {
	return o
}

func (o ConfigMapProjectionPatchPtrOutput) Elem() ConfigMapProjectionPatchOutput {
	return o.ApplyT(func(v *ConfigMapProjectionPatch) ConfigMapProjectionPatch {
		if v != nil {
			return *v
		}
		var ret ConfigMapProjectionPatch
		return ret
	}).(ConfigMapProjectionPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapProjectionPatchPtrOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v *ConfigMapProjectionPatch) []KeyToPathPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapProjectionPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapProjectionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapProjectionPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapProjectionPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSource struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPath `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapVolumeSourceInput is an input type that accepts ConfigMapVolumeSourceArgs and ConfigMapVolumeSourceOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourceInput` via:
//
//	ConfigMapVolumeSourceArgs{...}
type ConfigMapVolumeSourceInput interface {
	pulumi.Input

	ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput
	ToConfigMapVolumeSourceOutputWithContext(context.Context) ConfigMapVolumeSourceOutput
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSourceArgs struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return i.ToConfigMapVolumeSourceOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput)
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput).ToConfigMapVolumeSourcePtrOutputWithContext(ctx)
}

// ConfigMapVolumeSourcePtrInput is an input type that accepts ConfigMapVolumeSourceArgs, ConfigMapVolumeSourcePtr and ConfigMapVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourcePtrInput` via:
//
//	        ConfigMapVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ConfigMapVolumeSourcePtrInput interface {
	pulumi.Input

	ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput
	ToConfigMapVolumeSourcePtrOutputWithContext(context.Context) ConfigMapVolumeSourcePtrOutput
}

type configMapVolumeSourcePtrType ConfigMapVolumeSourceArgs

func ConfigMapVolumeSourcePtr(v *ConfigMapVolumeSourceArgs) ConfigMapVolumeSourcePtrInput {
	return (*configMapVolumeSourcePtrType)(v)
}

func (*configMapVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePtrOutput)
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapVolumeSource) *ConfigMapVolumeSource {
		return &v
	}).(ConfigMapVolumeSourcePtrOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapVolumeSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) Elem() ConfigMapVolumeSourceOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) ConfigMapVolumeSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapVolumeSource
		return ret
	}).(ConfigMapVolumeSourceOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapVolumeSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSourcePatch struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPathPatch `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapVolumeSourcePatchInput is an input type that accepts ConfigMapVolumeSourcePatchArgs and ConfigMapVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourcePatchInput` via:
//
//	ConfigMapVolumeSourcePatchArgs{...}
type ConfigMapVolumeSourcePatchInput interface {
	pulumi.Input

	ToConfigMapVolumeSourcePatchOutput() ConfigMapVolumeSourcePatchOutput
	ToConfigMapVolumeSourcePatchOutputWithContext(context.Context) ConfigMapVolumeSourcePatchOutput
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSourcePatchArgs struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathPatchArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSourcePatch)(nil)).Elem()
}

func (i ConfigMapVolumeSourcePatchArgs) ToConfigMapVolumeSourcePatchOutput() ConfigMapVolumeSourcePatchOutput {
	return i.ToConfigMapVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourcePatchArgs) ToConfigMapVolumeSourcePatchOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePatchOutput)
}

func (i ConfigMapVolumeSourcePatchArgs) ToConfigMapVolumeSourcePatchPtrOutput() ConfigMapVolumeSourcePatchPtrOutput {
	return i.ToConfigMapVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourcePatchArgs) ToConfigMapVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePatchOutput).ToConfigMapVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ConfigMapVolumeSourcePatchPtrInput is an input type that accepts ConfigMapVolumeSourcePatchArgs, ConfigMapVolumeSourcePatchPtr and ConfigMapVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourcePatchPtrInput` via:
//
//	        ConfigMapVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ConfigMapVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToConfigMapVolumeSourcePatchPtrOutput() ConfigMapVolumeSourcePatchPtrOutput
	ToConfigMapVolumeSourcePatchPtrOutputWithContext(context.Context) ConfigMapVolumeSourcePatchPtrOutput
}

type configMapVolumeSourcePatchPtrType ConfigMapVolumeSourcePatchArgs

func ConfigMapVolumeSourcePatchPtr(v *ConfigMapVolumeSourcePatchArgs) ConfigMapVolumeSourcePatchPtrInput {
	return (*configMapVolumeSourcePatchPtrType)(v)
}

func (*configMapVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSourcePatch)(nil)).Elem()
}

func (i *configMapVolumeSourcePatchPtrType) ToConfigMapVolumeSourcePatchPtrOutput() ConfigMapVolumeSourcePatchPtrOutput {
	return i.ToConfigMapVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *configMapVolumeSourcePatchPtrType) ToConfigMapVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePatchPtrOutput)
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSourcePatch)(nil)).Elem()
}

func (o ConfigMapVolumeSourcePatchOutput) ToConfigMapVolumeSourcePatchOutput() ConfigMapVolumeSourcePatchOutput {
	return o
}

func (o ConfigMapVolumeSourcePatchOutput) ToConfigMapVolumeSourcePatchOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchOutput {
	return o
}

func (o ConfigMapVolumeSourcePatchOutput) ToConfigMapVolumeSourcePatchPtrOutput() ConfigMapVolumeSourcePatchPtrOutput {
	return o.ToConfigMapVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ConfigMapVolumeSourcePatchOutput) ToConfigMapVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapVolumeSourcePatch) *ConfigMapVolumeSourcePatch {
		return &v
	}).(ConfigMapVolumeSourcePatchPtrOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourcePatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourcePatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapVolumeSourcePatchOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourcePatch) []KeyToPathPatch { return v.Items }).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapVolumeSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapVolumeSourcePatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourcePatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSourcePatch)(nil)).Elem()
}

func (o ConfigMapVolumeSourcePatchPtrOutput) ToConfigMapVolumeSourcePatchPtrOutput() ConfigMapVolumeSourcePatchPtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePatchPtrOutput) ToConfigMapVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePatchPtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePatchPtrOutput) Elem() ConfigMapVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSourcePatch) ConfigMapVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ConfigMapVolumeSourcePatch
		return ret
	}).(ConfigMapVolumeSourcePatchOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourcePatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o ConfigMapVolumeSourcePatchPtrOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSourcePatch) []KeyToPathPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ConfigMapVolumeSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ConfigMapVolumeSourcePatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// A single application container that you want to run within a pod.
type Container struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []EnvVar `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSource `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle *Lifecycle `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *Probe `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports []ContainerPort `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *Probe `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Resources *ResourceRequirements `pulumi:"resources"`
	// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *SecurityContext `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *Probe `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []VolumeDevice `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//	ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A single application container that you want to run within a pod.
type ContainerArgs struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env EnvVarArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourceArrayInput `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle LifecyclePtrInput `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbePtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbePtrInput `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Resources ResourceRequirementsPtrInput `pulumi:"resources"`
	// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextPtrInput `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbePtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices VolumeDeviceArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// A single application container that you want to run within a pod.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o ContainerOutput) Env() EnvVarArrayOutput {
	return o.ApplyT(func(v Container) []EnvVar { return v.Env }).(EnvVarArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o ContainerOutput) EnvFrom() EnvFromSourceArrayOutput {
	return o.ApplyT(func(v Container) []EnvFromSource { return v.EnvFrom }).(EnvFromSourceArrayOutput)
}

// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
func (o ContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o ContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
func (o ContainerOutput) Lifecycle() LifecyclePtrOutput {
	return o.ApplyT(func(v Container) *Lifecycle { return v.Lifecycle }).(LifecyclePtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) LivenessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.LivenessProbe }).(ProbePtrOutput)
}

// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v Container) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) ReadinessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.ReadinessProbe }).(ProbePtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ContainerOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v Container) *ResourceRequirements { return v.Resources }).(ResourceRequirementsPtrOutput)
}

// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o ContainerOutput) SecurityContext() SecurityContextPtrOutput {
	return o.ApplyT(func(v Container) *SecurityContext { return v.SecurityContext }).(SecurityContextPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) StartupProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.StartupProbe }).(ProbePtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o ContainerOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Container) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o ContainerOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Container) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o ContainerOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o ContainerOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Container) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container.
func (o ContainerOutput) VolumeDevices() VolumeDeviceArrayOutput {
	return o.ApplyT(func(v Container) []VolumeDevice { return v.VolumeDevices }).(VolumeDeviceArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Cannot be updated.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// Describe a container image
type ContainerImage struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names []string `pulumi:"names"`
	// The size of the image in bytes.
	SizeBytes *int `pulumi:"sizeBytes"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//	ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Describe a container image
type ContainerImageArgs struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names pulumi.StringArrayInput `pulumi:"names"`
	// The size of the image in bytes.
	SizeBytes pulumi.IntPtrInput `pulumi:"sizeBytes"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

// ContainerImageArrayInput is an input type that accepts ContainerImageArray and ContainerImageArrayOutput values.
// You can construct a concrete instance of `ContainerImageArrayInput` via:
//
//	ContainerImageArray{ ContainerImageArgs{...} }
type ContainerImageArrayInput interface {
	pulumi.Input

	ToContainerImageArrayOutput() ContainerImageArrayOutput
	ToContainerImageArrayOutputWithContext(context.Context) ContainerImageArrayOutput
}

type ContainerImageArray []ContainerImageInput

func (ContainerImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImage)(nil)).Elem()
}

func (i ContainerImageArray) ToContainerImageArrayOutput() ContainerImageArrayOutput {
	return i.ToContainerImageArrayOutputWithContext(context.Background())
}

func (i ContainerImageArray) ToContainerImageArrayOutputWithContext(ctx context.Context) ContainerImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageArrayOutput)
}

// Describe a container image
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
func (o ContainerImageOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerImage) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// The size of the image in bytes.
func (o ContainerImageOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerImage) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

type ContainerImageArrayOutput struct{ *pulumi.OutputState }

func (ContainerImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImage)(nil)).Elem()
}

func (o ContainerImageArrayOutput) ToContainerImageArrayOutput() ContainerImageArrayOutput {
	return o
}

func (o ContainerImageArrayOutput) ToContainerImageArrayOutputWithContext(ctx context.Context) ContainerImageArrayOutput {
	return o
}

func (o ContainerImageArrayOutput) Index(i pulumi.IntInput) ContainerImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerImage {
		return vs[0].([]ContainerImage)[vs[1].(int)]
	}).(ContainerImageOutput)
}

// Describe a container image
type ContainerImagePatch struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names []string `pulumi:"names"`
	// The size of the image in bytes.
	SizeBytes *int `pulumi:"sizeBytes"`
}

// ContainerImagePatchInput is an input type that accepts ContainerImagePatchArgs and ContainerImagePatchOutput values.
// You can construct a concrete instance of `ContainerImagePatchInput` via:
//
//	ContainerImagePatchArgs{...}
type ContainerImagePatchInput interface {
	pulumi.Input

	ToContainerImagePatchOutput() ContainerImagePatchOutput
	ToContainerImagePatchOutputWithContext(context.Context) ContainerImagePatchOutput
}

// Describe a container image
type ContainerImagePatchArgs struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names pulumi.StringArrayInput `pulumi:"names"`
	// The size of the image in bytes.
	SizeBytes pulumi.IntPtrInput `pulumi:"sizeBytes"`
}

func (ContainerImagePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImagePatch)(nil)).Elem()
}

func (i ContainerImagePatchArgs) ToContainerImagePatchOutput() ContainerImagePatchOutput {
	return i.ToContainerImagePatchOutputWithContext(context.Background())
}

func (i ContainerImagePatchArgs) ToContainerImagePatchOutputWithContext(ctx context.Context) ContainerImagePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePatchOutput)
}

// ContainerImagePatchArrayInput is an input type that accepts ContainerImagePatchArray and ContainerImagePatchArrayOutput values.
// You can construct a concrete instance of `ContainerImagePatchArrayInput` via:
//
//	ContainerImagePatchArray{ ContainerImagePatchArgs{...} }
type ContainerImagePatchArrayInput interface {
	pulumi.Input

	ToContainerImagePatchArrayOutput() ContainerImagePatchArrayOutput
	ToContainerImagePatchArrayOutputWithContext(context.Context) ContainerImagePatchArrayOutput
}

type ContainerImagePatchArray []ContainerImagePatchInput

func (ContainerImagePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImagePatch)(nil)).Elem()
}

func (i ContainerImagePatchArray) ToContainerImagePatchArrayOutput() ContainerImagePatchArrayOutput {
	return i.ToContainerImagePatchArrayOutputWithContext(context.Background())
}

func (i ContainerImagePatchArray) ToContainerImagePatchArrayOutputWithContext(ctx context.Context) ContainerImagePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePatchArrayOutput)
}

// Describe a container image
type ContainerImagePatchOutput struct{ *pulumi.OutputState }

func (ContainerImagePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImagePatch)(nil)).Elem()
}

func (o ContainerImagePatchOutput) ToContainerImagePatchOutput() ContainerImagePatchOutput {
	return o
}

func (o ContainerImagePatchOutput) ToContainerImagePatchOutputWithContext(ctx context.Context) ContainerImagePatchOutput {
	return o
}

// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
func (o ContainerImagePatchOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerImagePatch) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// The size of the image in bytes.
func (o ContainerImagePatchOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerImagePatch) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

type ContainerImagePatchArrayOutput struct{ *pulumi.OutputState }

func (ContainerImagePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImagePatch)(nil)).Elem()
}

func (o ContainerImagePatchArrayOutput) ToContainerImagePatchArrayOutput() ContainerImagePatchArrayOutput {
	return o
}

func (o ContainerImagePatchArrayOutput) ToContainerImagePatchArrayOutputWithContext(ctx context.Context) ContainerImagePatchArrayOutput {
	return o
}

func (o ContainerImagePatchArrayOutput) Index(i pulumi.IntInput) ContainerImagePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerImagePatch {
		return vs[0].([]ContainerImagePatch)[vs[1].(int)]
	}).(ContainerImagePatchOutput)
}

// A single application container that you want to run within a pod.
type ContainerPatch struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []EnvVarPatch `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSourcePatch `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle *LifecyclePatch `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *ProbePatch `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name *string `pulumi:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports []ContainerPortPatch `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *ProbePatch `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Resources *ResourceRequirementsPatch `pulumi:"resources"`
	// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *SecurityContextPatch `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *ProbePatch `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []VolumeDevicePatch `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []VolumeMountPatch `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerPatchInput is an input type that accepts ContainerPatchArgs and ContainerPatchOutput values.
// You can construct a concrete instance of `ContainerPatchInput` via:
//
//	ContainerPatchArgs{...}
type ContainerPatchInput interface {
	pulumi.Input

	ToContainerPatchOutput() ContainerPatchOutput
	ToContainerPatchOutputWithContext(context.Context) ContainerPatchOutput
}

// A single application container that you want to run within a pod.
type ContainerPatchArgs struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env EnvVarPatchArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourcePatchArrayInput `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle LifecyclePatchPtrInput `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbePatchPtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports ContainerPortPatchArrayInput `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbePatchPtrInput `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Resources ResourceRequirementsPatchPtrInput `pulumi:"resources"`
	// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextPatchPtrInput `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbePatchPtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices VolumeDevicePatchArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts VolumeMountPatchArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPatch)(nil)).Elem()
}

func (i ContainerPatchArgs) ToContainerPatchOutput() ContainerPatchOutput {
	return i.ToContainerPatchOutputWithContext(context.Background())
}

func (i ContainerPatchArgs) ToContainerPatchOutputWithContext(ctx context.Context) ContainerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPatchOutput)
}

// ContainerPatchArrayInput is an input type that accepts ContainerPatchArray and ContainerPatchArrayOutput values.
// You can construct a concrete instance of `ContainerPatchArrayInput` via:
//
//	ContainerPatchArray{ ContainerPatchArgs{...} }
type ContainerPatchArrayInput interface {
	pulumi.Input

	ToContainerPatchArrayOutput() ContainerPatchArrayOutput
	ToContainerPatchArrayOutputWithContext(context.Context) ContainerPatchArrayOutput
}

type ContainerPatchArray []ContainerPatchInput

func (ContainerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPatch)(nil)).Elem()
}

func (i ContainerPatchArray) ToContainerPatchArrayOutput() ContainerPatchArrayOutput {
	return i.ToContainerPatchArrayOutputWithContext(context.Background())
}

func (i ContainerPatchArray) ToContainerPatchArrayOutputWithContext(ctx context.Context) ContainerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPatchArrayOutput)
}

// A single application container that you want to run within a pod.
type ContainerPatchOutput struct{ *pulumi.OutputState }

func (ContainerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPatch)(nil)).Elem()
}

func (o ContainerPatchOutput) ToContainerPatchOutput() ContainerPatchOutput {
	return o
}

func (o ContainerPatchOutput) ToContainerPatchOutputWithContext(ctx context.Context) ContainerPatchOutput {
	return o
}

// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerPatchOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerPatchOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o ContainerPatchOutput) Env() EnvVarPatchArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []EnvVarPatch { return v.Env }).(EnvVarPatchArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o ContainerPatchOutput) EnvFrom() EnvFromSourcePatchArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []EnvFromSourcePatch { return v.EnvFrom }).(EnvFromSourcePatchArrayOutput)
}

// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
func (o ContainerPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o ContainerPatchOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
func (o ContainerPatchOutput) Lifecycle() LifecyclePatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *LifecyclePatch { return v.Lifecycle }).(LifecyclePatchPtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerPatchOutput) LivenessProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *ProbePatch { return v.LivenessProbe }).(ProbePatchPtrOutput)
}

// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
func (o ContainerPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
func (o ContainerPatchOutput) Ports() ContainerPortPatchArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []ContainerPortPatch { return v.Ports }).(ContainerPortPatchArrayOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerPatchOutput) ReadinessProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *ProbePatch { return v.ReadinessProbe }).(ProbePatchPtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ContainerPatchOutput) Resources() ResourceRequirementsPatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *ResourceRequirementsPatch { return v.Resources }).(ResourceRequirementsPatchPtrOutput)
}

// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o ContainerPatchOutput) SecurityContext() SecurityContextPatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *SecurityContextPatch { return v.SecurityContext }).(SecurityContextPatchPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerPatchOutput) StartupProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *ProbePatch { return v.StartupProbe }).(ProbePatchPtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o ContainerPatchOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o ContainerPatchOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o ContainerPatchOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerPatchOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o ContainerPatchOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container.
func (o ContainerPatchOutput) VolumeDevices() VolumeDevicePatchArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []VolumeDevicePatch { return v.VolumeDevices }).(VolumeDevicePatchArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Cannot be updated.
func (o ContainerPatchOutput) VolumeMounts() VolumeMountPatchArrayOutput {
	return o.ApplyT(func(v ContainerPatch) []VolumeMountPatch { return v.VolumeMounts }).(VolumeMountPatchArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o ContainerPatchOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPatch) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerPatchArrayOutput struct{ *pulumi.OutputState }

func (ContainerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPatch)(nil)).Elem()
}

func (o ContainerPatchArrayOutput) ToContainerPatchArrayOutput() ContainerPatchArrayOutput {
	return o
}

func (o ContainerPatchArrayOutput) ToContainerPatchArrayOutputWithContext(ctx context.Context) ContainerPatchArrayOutput {
	return o
}

func (o ContainerPatchArrayOutput) Index(i pulumi.IntInput) ContainerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPatch {
		return vs[0].([]ContainerPatch)[vs[1].(int)]
	}).(ContainerPatchOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPort struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//	ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// ContainerPort represents a network port in a single container.
type ContainerPortArgs struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//	ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (o ContainerPortOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPort) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// What host IP to bind the external port to.
func (o ContainerPortOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (o ContainerPortOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPort) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (o ContainerPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortPatch struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort *int `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortPatchInput is an input type that accepts ContainerPortPatchArgs and ContainerPortPatchOutput values.
// You can construct a concrete instance of `ContainerPortPatchInput` via:
//
//	ContainerPortPatchArgs{...}
type ContainerPortPatchInput interface {
	pulumi.Input

	ToContainerPortPatchOutput() ContainerPortPatchOutput
	ToContainerPortPatchOutputWithContext(context.Context) ContainerPortPatchOutput
}

// ContainerPort represents a network port in a single container.
type ContainerPortPatchArgs struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortPatch)(nil)).Elem()
}

func (i ContainerPortPatchArgs) ToContainerPortPatchOutput() ContainerPortPatchOutput {
	return i.ToContainerPortPatchOutputWithContext(context.Background())
}

func (i ContainerPortPatchArgs) ToContainerPortPatchOutputWithContext(ctx context.Context) ContainerPortPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortPatchOutput)
}

// ContainerPortPatchArrayInput is an input type that accepts ContainerPortPatchArray and ContainerPortPatchArrayOutput values.
// You can construct a concrete instance of `ContainerPortPatchArrayInput` via:
//
//	ContainerPortPatchArray{ ContainerPortPatchArgs{...} }
type ContainerPortPatchArrayInput interface {
	pulumi.Input

	ToContainerPortPatchArrayOutput() ContainerPortPatchArrayOutput
	ToContainerPortPatchArrayOutputWithContext(context.Context) ContainerPortPatchArrayOutput
}

type ContainerPortPatchArray []ContainerPortPatchInput

func (ContainerPortPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortPatch)(nil)).Elem()
}

func (i ContainerPortPatchArray) ToContainerPortPatchArrayOutput() ContainerPortPatchArrayOutput {
	return i.ToContainerPortPatchArrayOutputWithContext(context.Background())
}

func (i ContainerPortPatchArray) ToContainerPortPatchArrayOutputWithContext(ctx context.Context) ContainerPortPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortPatchArrayOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortPatchOutput struct{ *pulumi.OutputState }

func (ContainerPortPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortPatch)(nil)).Elem()
}

func (o ContainerPortPatchOutput) ToContainerPortPatchOutput() ContainerPortPatchOutput {
	return o
}

func (o ContainerPortPatchOutput) ToContainerPortPatchOutputWithContext(ctx context.Context) ContainerPortPatchOutput {
	return o
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (o ContainerPortPatchOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPortPatch) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// What host IP to bind the external port to.
func (o ContainerPortPatchOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortPatch) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (o ContainerPortPatchOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPortPatch) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (o ContainerPortPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (o ContainerPortPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortPatchArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortPatch)(nil)).Elem()
}

func (o ContainerPortPatchArrayOutput) ToContainerPortPatchArrayOutput() ContainerPortPatchArrayOutput {
	return o
}

func (o ContainerPortPatchArrayOutput) ToContainerPortPatchArrayOutputWithContext(ctx context.Context) ContainerPortPatchArrayOutput {
	return o
}

func (o ContainerPortPatchArrayOutput) Index(i pulumi.IntInput) ContainerPortPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortPatch {
		return vs[0].([]ContainerPortPatch)[vs[1].(int)]
	}).(ContainerPortPatchOutput)
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerState struct {
	// Details about a running container
	Running *ContainerStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *ContainerStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *ContainerStateWaiting `pulumi:"waiting"`
}

// ContainerStateInput is an input type that accepts ContainerStateArgs and ContainerStateOutput values.
// You can construct a concrete instance of `ContainerStateInput` via:
//
//	ContainerStateArgs{...}
type ContainerStateInput interface {
	pulumi.Input

	ToContainerStateOutput() ContainerStateOutput
	ToContainerStateOutputWithContext(context.Context) ContainerStateOutput
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerStateArgs struct {
	// Details about a running container
	Running ContainerStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated ContainerStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting ContainerStateWaitingPtrInput `pulumi:"waiting"`
}

func (ContainerStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerState)(nil)).Elem()
}

func (i ContainerStateArgs) ToContainerStateOutput() ContainerStateOutput {
	return i.ToContainerStateOutputWithContext(context.Background())
}

func (i ContainerStateArgs) ToContainerStateOutputWithContext(ctx context.Context) ContainerStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateOutput)
}

func (i ContainerStateArgs) ToContainerStatePtrOutput() ContainerStatePtrOutput {
	return i.ToContainerStatePtrOutputWithContext(context.Background())
}

func (i ContainerStateArgs) ToContainerStatePtrOutputWithContext(ctx context.Context) ContainerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateOutput).ToContainerStatePtrOutputWithContext(ctx)
}

// ContainerStatePtrInput is an input type that accepts ContainerStateArgs, ContainerStatePtr and ContainerStatePtrOutput values.
// You can construct a concrete instance of `ContainerStatePtrInput` via:
//
//	        ContainerStateArgs{...}
//
//	or:
//
//	        nil
type ContainerStatePtrInput interface {
	pulumi.Input

	ToContainerStatePtrOutput() ContainerStatePtrOutput
	ToContainerStatePtrOutputWithContext(context.Context) ContainerStatePtrOutput
}

type containerStatePtrType ContainerStateArgs

func ContainerStatePtr(v *ContainerStateArgs) ContainerStatePtrInput {
	return (*containerStatePtrType)(v)
}

func (*containerStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerState)(nil)).Elem()
}

func (i *containerStatePtrType) ToContainerStatePtrOutput() ContainerStatePtrOutput {
	return i.ToContainerStatePtrOutputWithContext(context.Background())
}

func (i *containerStatePtrType) ToContainerStatePtrOutputWithContext(ctx context.Context) ContainerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatePtrOutput)
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerStateOutput struct{ *pulumi.OutputState }

func (ContainerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerState)(nil)).Elem()
}

func (o ContainerStateOutput) ToContainerStateOutput() ContainerStateOutput {
	return o
}

func (o ContainerStateOutput) ToContainerStateOutputWithContext(ctx context.Context) ContainerStateOutput {
	return o
}

func (o ContainerStateOutput) ToContainerStatePtrOutput() ContainerStatePtrOutput {
	return o.ToContainerStatePtrOutputWithContext(context.Background())
}

func (o ContainerStateOutput) ToContainerStatePtrOutputWithContext(ctx context.Context) ContainerStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerState) *ContainerState {
		return &v
	}).(ContainerStatePtrOutput)
}

// Details about a running container
func (o ContainerStateOutput) Running() ContainerStateRunningPtrOutput {
	return o.ApplyT(func(v ContainerState) *ContainerStateRunning { return v.Running }).(ContainerStateRunningPtrOutput)
}

// Details about a terminated container
func (o ContainerStateOutput) Terminated() ContainerStateTerminatedPtrOutput {
	return o.ApplyT(func(v ContainerState) *ContainerStateTerminated { return v.Terminated }).(ContainerStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o ContainerStateOutput) Waiting() ContainerStateWaitingPtrOutput {
	return o.ApplyT(func(v ContainerState) *ContainerStateWaiting { return v.Waiting }).(ContainerStateWaitingPtrOutput)
}

type ContainerStatePtrOutput struct{ *pulumi.OutputState }

func (ContainerStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerState)(nil)).Elem()
}

func (o ContainerStatePtrOutput) ToContainerStatePtrOutput() ContainerStatePtrOutput {
	return o
}

func (o ContainerStatePtrOutput) ToContainerStatePtrOutputWithContext(ctx context.Context) ContainerStatePtrOutput {
	return o
}

func (o ContainerStatePtrOutput) Elem() ContainerStateOutput {
	return o.ApplyT(func(v *ContainerState) ContainerState {
		if v != nil {
			return *v
		}
		var ret ContainerState
		return ret
	}).(ContainerStateOutput)
}

// Details about a running container
func (o ContainerStatePtrOutput) Running() ContainerStateRunningPtrOutput {
	return o.ApplyT(func(v *ContainerState) *ContainerStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(ContainerStateRunningPtrOutput)
}

// Details about a terminated container
func (o ContainerStatePtrOutput) Terminated() ContainerStateTerminatedPtrOutput {
	return o.ApplyT(func(v *ContainerState) *ContainerStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(ContainerStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o ContainerStatePtrOutput) Waiting() ContainerStateWaitingPtrOutput {
	return o.ApplyT(func(v *ContainerState) *ContainerStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(ContainerStateWaitingPtrOutput)
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerStatePatch struct {
	// Details about a running container
	Running *ContainerStateRunningPatch `pulumi:"running"`
	// Details about a terminated container
	Terminated *ContainerStateTerminatedPatch `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *ContainerStateWaitingPatch `pulumi:"waiting"`
}

// ContainerStatePatchInput is an input type that accepts ContainerStatePatchArgs and ContainerStatePatchOutput values.
// You can construct a concrete instance of `ContainerStatePatchInput` via:
//
//	ContainerStatePatchArgs{...}
type ContainerStatePatchInput interface {
	pulumi.Input

	ToContainerStatePatchOutput() ContainerStatePatchOutput
	ToContainerStatePatchOutputWithContext(context.Context) ContainerStatePatchOutput
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerStatePatchArgs struct {
	// Details about a running container
	Running ContainerStateRunningPatchPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated ContainerStateTerminatedPatchPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting ContainerStateWaitingPatchPtrInput `pulumi:"waiting"`
}

func (ContainerStatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatePatch)(nil)).Elem()
}

func (i ContainerStatePatchArgs) ToContainerStatePatchOutput() ContainerStatePatchOutput {
	return i.ToContainerStatePatchOutputWithContext(context.Background())
}

func (i ContainerStatePatchArgs) ToContainerStatePatchOutputWithContext(ctx context.Context) ContainerStatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatePatchOutput)
}

func (i ContainerStatePatchArgs) ToContainerStatePatchPtrOutput() ContainerStatePatchPtrOutput {
	return i.ToContainerStatePatchPtrOutputWithContext(context.Background())
}

func (i ContainerStatePatchArgs) ToContainerStatePatchPtrOutputWithContext(ctx context.Context) ContainerStatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatePatchOutput).ToContainerStatePatchPtrOutputWithContext(ctx)
}

// ContainerStatePatchPtrInput is an input type that accepts ContainerStatePatchArgs, ContainerStatePatchPtr and ContainerStatePatchPtrOutput values.
// You can construct a concrete instance of `ContainerStatePatchPtrInput` via:
//
//	        ContainerStatePatchArgs{...}
//
//	or:
//
//	        nil
type ContainerStatePatchPtrInput interface {
	pulumi.Input

	ToContainerStatePatchPtrOutput() ContainerStatePatchPtrOutput
	ToContainerStatePatchPtrOutputWithContext(context.Context) ContainerStatePatchPtrOutput
}

type containerStatePatchPtrType ContainerStatePatchArgs

func ContainerStatePatchPtr(v *ContainerStatePatchArgs) ContainerStatePatchPtrInput {
	return (*containerStatePatchPtrType)(v)
}

func (*containerStatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStatePatch)(nil)).Elem()
}

func (i *containerStatePatchPtrType) ToContainerStatePatchPtrOutput() ContainerStatePatchPtrOutput {
	return i.ToContainerStatePatchPtrOutputWithContext(context.Background())
}

func (i *containerStatePatchPtrType) ToContainerStatePatchPtrOutputWithContext(ctx context.Context) ContainerStatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatePatchPtrOutput)
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type ContainerStatePatchOutput struct{ *pulumi.OutputState }

func (ContainerStatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatePatch)(nil)).Elem()
}

func (o ContainerStatePatchOutput) ToContainerStatePatchOutput() ContainerStatePatchOutput {
	return o
}

func (o ContainerStatePatchOutput) ToContainerStatePatchOutputWithContext(ctx context.Context) ContainerStatePatchOutput {
	return o
}

func (o ContainerStatePatchOutput) ToContainerStatePatchPtrOutput() ContainerStatePatchPtrOutput {
	return o.ToContainerStatePatchPtrOutputWithContext(context.Background())
}

func (o ContainerStatePatchOutput) ToContainerStatePatchPtrOutputWithContext(ctx context.Context) ContainerStatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStatePatch) *ContainerStatePatch {
		return &v
	}).(ContainerStatePatchPtrOutput)
}

// Details about a running container
func (o ContainerStatePatchOutput) Running() ContainerStateRunningPatchPtrOutput {
	return o.ApplyT(func(v ContainerStatePatch) *ContainerStateRunningPatch { return v.Running }).(ContainerStateRunningPatchPtrOutput)
}

// Details about a terminated container
func (o ContainerStatePatchOutput) Terminated() ContainerStateTerminatedPatchPtrOutput {
	return o.ApplyT(func(v ContainerStatePatch) *ContainerStateTerminatedPatch { return v.Terminated }).(ContainerStateTerminatedPatchPtrOutput)
}

// Details about a waiting container
func (o ContainerStatePatchOutput) Waiting() ContainerStateWaitingPatchPtrOutput {
	return o.ApplyT(func(v ContainerStatePatch) *ContainerStateWaitingPatch { return v.Waiting }).(ContainerStateWaitingPatchPtrOutput)
}

type ContainerStatePatchPtrOutput struct{ *pulumi.OutputState }

func (ContainerStatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStatePatch)(nil)).Elem()
}

func (o ContainerStatePatchPtrOutput) ToContainerStatePatchPtrOutput() ContainerStatePatchPtrOutput {
	return o
}

func (o ContainerStatePatchPtrOutput) ToContainerStatePatchPtrOutputWithContext(ctx context.Context) ContainerStatePatchPtrOutput {
	return o
}

func (o ContainerStatePatchPtrOutput) Elem() ContainerStatePatchOutput {
	return o.ApplyT(func(v *ContainerStatePatch) ContainerStatePatch {
		if v != nil {
			return *v
		}
		var ret ContainerStatePatch
		return ret
	}).(ContainerStatePatchOutput)
}

// Details about a running container
func (o ContainerStatePatchPtrOutput) Running() ContainerStateRunningPatchPtrOutput {
	return o.ApplyT(func(v *ContainerStatePatch) *ContainerStateRunningPatch {
		if v == nil {
			return nil
		}
		return v.Running
	}).(ContainerStateRunningPatchPtrOutput)
}

// Details about a terminated container
func (o ContainerStatePatchPtrOutput) Terminated() ContainerStateTerminatedPatchPtrOutput {
	return o.ApplyT(func(v *ContainerStatePatch) *ContainerStateTerminatedPatch {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(ContainerStateTerminatedPatchPtrOutput)
}

// Details about a waiting container
func (o ContainerStatePatchPtrOutput) Waiting() ContainerStateWaitingPatchPtrOutput {
	return o.ApplyT(func(v *ContainerStatePatch) *ContainerStateWaitingPatch {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(ContainerStateWaitingPatchPtrOutput)
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// ContainerStateRunningInput is an input type that accepts ContainerStateRunningArgs and ContainerStateRunningOutput values.
// You can construct a concrete instance of `ContainerStateRunningInput` via:
//
//	ContainerStateRunningArgs{...}
type ContainerStateRunningInput interface {
	pulumi.Input

	ToContainerStateRunningOutput() ContainerStateRunningOutput
	ToContainerStateRunningOutputWithContext(context.Context) ContainerStateRunningOutput
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (ContainerStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateRunning)(nil)).Elem()
}

func (i ContainerStateRunningArgs) ToContainerStateRunningOutput() ContainerStateRunningOutput {
	return i.ToContainerStateRunningOutputWithContext(context.Background())
}

func (i ContainerStateRunningArgs) ToContainerStateRunningOutputWithContext(ctx context.Context) ContainerStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningOutput)
}

func (i ContainerStateRunningArgs) ToContainerStateRunningPtrOutput() ContainerStateRunningPtrOutput {
	return i.ToContainerStateRunningPtrOutputWithContext(context.Background())
}

func (i ContainerStateRunningArgs) ToContainerStateRunningPtrOutputWithContext(ctx context.Context) ContainerStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningOutput).ToContainerStateRunningPtrOutputWithContext(ctx)
}

// ContainerStateRunningPtrInput is an input type that accepts ContainerStateRunningArgs, ContainerStateRunningPtr and ContainerStateRunningPtrOutput values.
// You can construct a concrete instance of `ContainerStateRunningPtrInput` via:
//
//	        ContainerStateRunningArgs{...}
//
//	or:
//
//	        nil
type ContainerStateRunningPtrInput interface {
	pulumi.Input

	ToContainerStateRunningPtrOutput() ContainerStateRunningPtrOutput
	ToContainerStateRunningPtrOutputWithContext(context.Context) ContainerStateRunningPtrOutput
}

type containerStateRunningPtrType ContainerStateRunningArgs

func ContainerStateRunningPtr(v *ContainerStateRunningArgs) ContainerStateRunningPtrInput {
	return (*containerStateRunningPtrType)(v)
}

func (*containerStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateRunning)(nil)).Elem()
}

func (i *containerStateRunningPtrType) ToContainerStateRunningPtrOutput() ContainerStateRunningPtrOutput {
	return i.ToContainerStateRunningPtrOutputWithContext(context.Background())
}

func (i *containerStateRunningPtrType) ToContainerStateRunningPtrOutputWithContext(ctx context.Context) ContainerStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningPtrOutput)
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunningOutput struct{ *pulumi.OutputState }

func (ContainerStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateRunning)(nil)).Elem()
}

func (o ContainerStateRunningOutput) ToContainerStateRunningOutput() ContainerStateRunningOutput {
	return o
}

func (o ContainerStateRunningOutput) ToContainerStateRunningOutputWithContext(ctx context.Context) ContainerStateRunningOutput {
	return o
}

func (o ContainerStateRunningOutput) ToContainerStateRunningPtrOutput() ContainerStateRunningPtrOutput {
	return o.ToContainerStateRunningPtrOutputWithContext(context.Background())
}

func (o ContainerStateRunningOutput) ToContainerStateRunningPtrOutputWithContext(ctx context.Context) ContainerStateRunningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateRunning) *ContainerStateRunning {
		return &v
	}).(ContainerStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o ContainerStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type ContainerStateRunningPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateRunning)(nil)).Elem()
}

func (o ContainerStateRunningPtrOutput) ToContainerStateRunningPtrOutput() ContainerStateRunningPtrOutput {
	return o
}

func (o ContainerStateRunningPtrOutput) ToContainerStateRunningPtrOutputWithContext(ctx context.Context) ContainerStateRunningPtrOutput {
	return o
}

func (o ContainerStateRunningPtrOutput) Elem() ContainerStateRunningOutput {
	return o.ApplyT(func(v *ContainerStateRunning) ContainerStateRunning {
		if v != nil {
			return *v
		}
		var ret ContainerStateRunning
		return ret
	}).(ContainerStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o ContainerStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunningPatch struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// ContainerStateRunningPatchInput is an input type that accepts ContainerStateRunningPatchArgs and ContainerStateRunningPatchOutput values.
// You can construct a concrete instance of `ContainerStateRunningPatchInput` via:
//
//	ContainerStateRunningPatchArgs{...}
type ContainerStateRunningPatchInput interface {
	pulumi.Input

	ToContainerStateRunningPatchOutput() ContainerStateRunningPatchOutput
	ToContainerStateRunningPatchOutputWithContext(context.Context) ContainerStateRunningPatchOutput
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunningPatchArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (ContainerStateRunningPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateRunningPatch)(nil)).Elem()
}

func (i ContainerStateRunningPatchArgs) ToContainerStateRunningPatchOutput() ContainerStateRunningPatchOutput {
	return i.ToContainerStateRunningPatchOutputWithContext(context.Background())
}

func (i ContainerStateRunningPatchArgs) ToContainerStateRunningPatchOutputWithContext(ctx context.Context) ContainerStateRunningPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningPatchOutput)
}

func (i ContainerStateRunningPatchArgs) ToContainerStateRunningPatchPtrOutput() ContainerStateRunningPatchPtrOutput {
	return i.ToContainerStateRunningPatchPtrOutputWithContext(context.Background())
}

func (i ContainerStateRunningPatchArgs) ToContainerStateRunningPatchPtrOutputWithContext(ctx context.Context) ContainerStateRunningPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningPatchOutput).ToContainerStateRunningPatchPtrOutputWithContext(ctx)
}

// ContainerStateRunningPatchPtrInput is an input type that accepts ContainerStateRunningPatchArgs, ContainerStateRunningPatchPtr and ContainerStateRunningPatchPtrOutput values.
// You can construct a concrete instance of `ContainerStateRunningPatchPtrInput` via:
//
//	        ContainerStateRunningPatchArgs{...}
//
//	or:
//
//	        nil
type ContainerStateRunningPatchPtrInput interface {
	pulumi.Input

	ToContainerStateRunningPatchPtrOutput() ContainerStateRunningPatchPtrOutput
	ToContainerStateRunningPatchPtrOutputWithContext(context.Context) ContainerStateRunningPatchPtrOutput
}

type containerStateRunningPatchPtrType ContainerStateRunningPatchArgs

func ContainerStateRunningPatchPtr(v *ContainerStateRunningPatchArgs) ContainerStateRunningPatchPtrInput {
	return (*containerStateRunningPatchPtrType)(v)
}

func (*containerStateRunningPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateRunningPatch)(nil)).Elem()
}

func (i *containerStateRunningPatchPtrType) ToContainerStateRunningPatchPtrOutput() ContainerStateRunningPatchPtrOutput {
	return i.ToContainerStateRunningPatchPtrOutputWithContext(context.Background())
}

func (i *containerStateRunningPatchPtrType) ToContainerStateRunningPatchPtrOutputWithContext(ctx context.Context) ContainerStateRunningPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateRunningPatchPtrOutput)
}

// ContainerStateRunning is a running state of a container.
type ContainerStateRunningPatchOutput struct{ *pulumi.OutputState }

func (ContainerStateRunningPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateRunningPatch)(nil)).Elem()
}

func (o ContainerStateRunningPatchOutput) ToContainerStateRunningPatchOutput() ContainerStateRunningPatchOutput {
	return o
}

func (o ContainerStateRunningPatchOutput) ToContainerStateRunningPatchOutputWithContext(ctx context.Context) ContainerStateRunningPatchOutput {
	return o
}

func (o ContainerStateRunningPatchOutput) ToContainerStateRunningPatchPtrOutput() ContainerStateRunningPatchPtrOutput {
	return o.ToContainerStateRunningPatchPtrOutputWithContext(context.Background())
}

func (o ContainerStateRunningPatchOutput) ToContainerStateRunningPatchPtrOutputWithContext(ctx context.Context) ContainerStateRunningPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateRunningPatch) *ContainerStateRunningPatch {
		return &v
	}).(ContainerStateRunningPatchPtrOutput)
}

// Time at which the container was last (re-)started
func (o ContainerStateRunningPatchOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateRunningPatch) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type ContainerStateRunningPatchPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateRunningPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateRunningPatch)(nil)).Elem()
}

func (o ContainerStateRunningPatchPtrOutput) ToContainerStateRunningPatchPtrOutput() ContainerStateRunningPatchPtrOutput {
	return o
}

func (o ContainerStateRunningPatchPtrOutput) ToContainerStateRunningPatchPtrOutputWithContext(ctx context.Context) ContainerStateRunningPatchPtrOutput {
	return o
}

func (o ContainerStateRunningPatchPtrOutput) Elem() ContainerStateRunningPatchOutput {
	return o.ApplyT(func(v *ContainerStateRunningPatch) ContainerStateRunningPatch {
		if v != nil {
			return *v
		}
		var ret ContainerStateRunningPatch
		return ret
	}).(ContainerStateRunningPatchOutput)
}

// Time at which the container was last (re-)started
func (o ContainerStateRunningPatchPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateRunningPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminated struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// ContainerStateTerminatedInput is an input type that accepts ContainerStateTerminatedArgs and ContainerStateTerminatedOutput values.
// You can construct a concrete instance of `ContainerStateTerminatedInput` via:
//
//	ContainerStateTerminatedArgs{...}
type ContainerStateTerminatedInput interface {
	pulumi.Input

	ToContainerStateTerminatedOutput() ContainerStateTerminatedOutput
	ToContainerStateTerminatedOutputWithContext(context.Context) ContainerStateTerminatedOutput
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminatedArgs struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (ContainerStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateTerminated)(nil)).Elem()
}

func (i ContainerStateTerminatedArgs) ToContainerStateTerminatedOutput() ContainerStateTerminatedOutput {
	return i.ToContainerStateTerminatedOutputWithContext(context.Background())
}

func (i ContainerStateTerminatedArgs) ToContainerStateTerminatedOutputWithContext(ctx context.Context) ContainerStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedOutput)
}

func (i ContainerStateTerminatedArgs) ToContainerStateTerminatedPtrOutput() ContainerStateTerminatedPtrOutput {
	return i.ToContainerStateTerminatedPtrOutputWithContext(context.Background())
}

func (i ContainerStateTerminatedArgs) ToContainerStateTerminatedPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedOutput).ToContainerStateTerminatedPtrOutputWithContext(ctx)
}

// ContainerStateTerminatedPtrInput is an input type that accepts ContainerStateTerminatedArgs, ContainerStateTerminatedPtr and ContainerStateTerminatedPtrOutput values.
// You can construct a concrete instance of `ContainerStateTerminatedPtrInput` via:
//
//	        ContainerStateTerminatedArgs{...}
//
//	or:
//
//	        nil
type ContainerStateTerminatedPtrInput interface {
	pulumi.Input

	ToContainerStateTerminatedPtrOutput() ContainerStateTerminatedPtrOutput
	ToContainerStateTerminatedPtrOutputWithContext(context.Context) ContainerStateTerminatedPtrOutput
}

type containerStateTerminatedPtrType ContainerStateTerminatedArgs

func ContainerStateTerminatedPtr(v *ContainerStateTerminatedArgs) ContainerStateTerminatedPtrInput {
	return (*containerStateTerminatedPtrType)(v)
}

func (*containerStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateTerminated)(nil)).Elem()
}

func (i *containerStateTerminatedPtrType) ToContainerStateTerminatedPtrOutput() ContainerStateTerminatedPtrOutput {
	return i.ToContainerStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *containerStateTerminatedPtrType) ToContainerStateTerminatedPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedPtrOutput)
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminatedOutput struct{ *pulumi.OutputState }

func (ContainerStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateTerminated)(nil)).Elem()
}

func (o ContainerStateTerminatedOutput) ToContainerStateTerminatedOutput() ContainerStateTerminatedOutput {
	return o
}

func (o ContainerStateTerminatedOutput) ToContainerStateTerminatedOutputWithContext(ctx context.Context) ContainerStateTerminatedOutput {
	return o
}

func (o ContainerStateTerminatedOutput) ToContainerStateTerminatedPtrOutput() ContainerStateTerminatedPtrOutput {
	return o.ToContainerStateTerminatedPtrOutputWithContext(context.Background())
}

func (o ContainerStateTerminatedOutput) ToContainerStateTerminatedPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateTerminated) *ContainerStateTerminated {
		return &v
	}).(ContainerStateTerminatedPtrOutput)
}

// Container's ID in the format '<type>://<container_id>'
func (o ContainerStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o ContainerStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o ContainerStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o ContainerStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o ContainerStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o ContainerStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o ContainerStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type ContainerStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateTerminated)(nil)).Elem()
}

func (o ContainerStateTerminatedPtrOutput) ToContainerStateTerminatedPtrOutput() ContainerStateTerminatedPtrOutput {
	return o
}

func (o ContainerStateTerminatedPtrOutput) ToContainerStateTerminatedPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPtrOutput {
	return o
}

func (o ContainerStateTerminatedPtrOutput) Elem() ContainerStateTerminatedOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) ContainerStateTerminated {
		if v != nil {
			return *v
		}
		var ret ContainerStateTerminated
		return ret
	}).(ContainerStateTerminatedOutput)
}

// Container's ID in the format '<type>://<container_id>'
func (o ContainerStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o ContainerStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o ContainerStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o ContainerStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o ContainerStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o ContainerStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o ContainerStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminatedPatch struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode *int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// ContainerStateTerminatedPatchInput is an input type that accepts ContainerStateTerminatedPatchArgs and ContainerStateTerminatedPatchOutput values.
// You can construct a concrete instance of `ContainerStateTerminatedPatchInput` via:
//
//	ContainerStateTerminatedPatchArgs{...}
type ContainerStateTerminatedPatchInput interface {
	pulumi.Input

	ToContainerStateTerminatedPatchOutput() ContainerStateTerminatedPatchOutput
	ToContainerStateTerminatedPatchOutputWithContext(context.Context) ContainerStateTerminatedPatchOutput
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminatedPatchArgs struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntPtrInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (ContainerStateTerminatedPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateTerminatedPatch)(nil)).Elem()
}

func (i ContainerStateTerminatedPatchArgs) ToContainerStateTerminatedPatchOutput() ContainerStateTerminatedPatchOutput {
	return i.ToContainerStateTerminatedPatchOutputWithContext(context.Background())
}

func (i ContainerStateTerminatedPatchArgs) ToContainerStateTerminatedPatchOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedPatchOutput)
}

func (i ContainerStateTerminatedPatchArgs) ToContainerStateTerminatedPatchPtrOutput() ContainerStateTerminatedPatchPtrOutput {
	return i.ToContainerStateTerminatedPatchPtrOutputWithContext(context.Background())
}

func (i ContainerStateTerminatedPatchArgs) ToContainerStateTerminatedPatchPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedPatchOutput).ToContainerStateTerminatedPatchPtrOutputWithContext(ctx)
}

// ContainerStateTerminatedPatchPtrInput is an input type that accepts ContainerStateTerminatedPatchArgs, ContainerStateTerminatedPatchPtr and ContainerStateTerminatedPatchPtrOutput values.
// You can construct a concrete instance of `ContainerStateTerminatedPatchPtrInput` via:
//
//	        ContainerStateTerminatedPatchArgs{...}
//
//	or:
//
//	        nil
type ContainerStateTerminatedPatchPtrInput interface {
	pulumi.Input

	ToContainerStateTerminatedPatchPtrOutput() ContainerStateTerminatedPatchPtrOutput
	ToContainerStateTerminatedPatchPtrOutputWithContext(context.Context) ContainerStateTerminatedPatchPtrOutput
}

type containerStateTerminatedPatchPtrType ContainerStateTerminatedPatchArgs

func ContainerStateTerminatedPatchPtr(v *ContainerStateTerminatedPatchArgs) ContainerStateTerminatedPatchPtrInput {
	return (*containerStateTerminatedPatchPtrType)(v)
}

func (*containerStateTerminatedPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateTerminatedPatch)(nil)).Elem()
}

func (i *containerStateTerminatedPatchPtrType) ToContainerStateTerminatedPatchPtrOutput() ContainerStateTerminatedPatchPtrOutput {
	return i.ToContainerStateTerminatedPatchPtrOutputWithContext(context.Background())
}

func (i *containerStateTerminatedPatchPtrType) ToContainerStateTerminatedPatchPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateTerminatedPatchPtrOutput)
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminatedPatchOutput struct{ *pulumi.OutputState }

func (ContainerStateTerminatedPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateTerminatedPatch)(nil)).Elem()
}

func (o ContainerStateTerminatedPatchOutput) ToContainerStateTerminatedPatchOutput() ContainerStateTerminatedPatchOutput {
	return o
}

func (o ContainerStateTerminatedPatchOutput) ToContainerStateTerminatedPatchOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchOutput {
	return o
}

func (o ContainerStateTerminatedPatchOutput) ToContainerStateTerminatedPatchPtrOutput() ContainerStateTerminatedPatchPtrOutput {
	return o.ToContainerStateTerminatedPatchPtrOutputWithContext(context.Background())
}

func (o ContainerStateTerminatedPatchOutput) ToContainerStateTerminatedPatchPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateTerminatedPatch) *ContainerStateTerminatedPatch {
		return &v
	}).(ContainerStateTerminatedPatchPtrOutput)
}

// Container's ID in the format '<type>://<container_id>'
func (o ContainerStateTerminatedPatchOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o ContainerStateTerminatedPatchOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o ContainerStateTerminatedPatchOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o ContainerStateTerminatedPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o ContainerStateTerminatedPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o ContainerStateTerminatedPatchOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o ContainerStateTerminatedPatchOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateTerminatedPatch) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type ContainerStateTerminatedPatchPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateTerminatedPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateTerminatedPatch)(nil)).Elem()
}

func (o ContainerStateTerminatedPatchPtrOutput) ToContainerStateTerminatedPatchPtrOutput() ContainerStateTerminatedPatchPtrOutput {
	return o
}

func (o ContainerStateTerminatedPatchPtrOutput) ToContainerStateTerminatedPatchPtrOutputWithContext(ctx context.Context) ContainerStateTerminatedPatchPtrOutput {
	return o
}

func (o ContainerStateTerminatedPatchPtrOutput) Elem() ContainerStateTerminatedPatchOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) ContainerStateTerminatedPatch {
		if v != nil {
			return *v
		}
		var ret ContainerStateTerminatedPatch
		return ret
	}).(ContainerStateTerminatedPatchOutput)
}

// Container's ID in the format '<type>://<container_id>'
func (o ContainerStateTerminatedPatchPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o ContainerStateTerminatedPatchPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o ContainerStateTerminatedPatchPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o ContainerStateTerminatedPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o ContainerStateTerminatedPatchPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o ContainerStateTerminatedPatchPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o ContainerStateTerminatedPatchPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateTerminatedPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// ContainerStateWaitingInput is an input type that accepts ContainerStateWaitingArgs and ContainerStateWaitingOutput values.
// You can construct a concrete instance of `ContainerStateWaitingInput` via:
//
//	ContainerStateWaitingArgs{...}
type ContainerStateWaitingInput interface {
	pulumi.Input

	ToContainerStateWaitingOutput() ContainerStateWaitingOutput
	ToContainerStateWaitingOutputWithContext(context.Context) ContainerStateWaitingOutput
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ContainerStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateWaiting)(nil)).Elem()
}

func (i ContainerStateWaitingArgs) ToContainerStateWaitingOutput() ContainerStateWaitingOutput {
	return i.ToContainerStateWaitingOutputWithContext(context.Background())
}

func (i ContainerStateWaitingArgs) ToContainerStateWaitingOutputWithContext(ctx context.Context) ContainerStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingOutput)
}

func (i ContainerStateWaitingArgs) ToContainerStateWaitingPtrOutput() ContainerStateWaitingPtrOutput {
	return i.ToContainerStateWaitingPtrOutputWithContext(context.Background())
}

func (i ContainerStateWaitingArgs) ToContainerStateWaitingPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingOutput).ToContainerStateWaitingPtrOutputWithContext(ctx)
}

// ContainerStateWaitingPtrInput is an input type that accepts ContainerStateWaitingArgs, ContainerStateWaitingPtr and ContainerStateWaitingPtrOutput values.
// You can construct a concrete instance of `ContainerStateWaitingPtrInput` via:
//
//	        ContainerStateWaitingArgs{...}
//
//	or:
//
//	        nil
type ContainerStateWaitingPtrInput interface {
	pulumi.Input

	ToContainerStateWaitingPtrOutput() ContainerStateWaitingPtrOutput
	ToContainerStateWaitingPtrOutputWithContext(context.Context) ContainerStateWaitingPtrOutput
}

type containerStateWaitingPtrType ContainerStateWaitingArgs

func ContainerStateWaitingPtr(v *ContainerStateWaitingArgs) ContainerStateWaitingPtrInput {
	return (*containerStateWaitingPtrType)(v)
}

func (*containerStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateWaiting)(nil)).Elem()
}

func (i *containerStateWaitingPtrType) ToContainerStateWaitingPtrOutput() ContainerStateWaitingPtrOutput {
	return i.ToContainerStateWaitingPtrOutputWithContext(context.Background())
}

func (i *containerStateWaitingPtrType) ToContainerStateWaitingPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingPtrOutput)
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaitingOutput struct{ *pulumi.OutputState }

func (ContainerStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateWaiting)(nil)).Elem()
}

func (o ContainerStateWaitingOutput) ToContainerStateWaitingOutput() ContainerStateWaitingOutput {
	return o
}

func (o ContainerStateWaitingOutput) ToContainerStateWaitingOutputWithContext(ctx context.Context) ContainerStateWaitingOutput {
	return o
}

func (o ContainerStateWaitingOutput) ToContainerStateWaitingPtrOutput() ContainerStateWaitingPtrOutput {
	return o.ToContainerStateWaitingPtrOutputWithContext(context.Background())
}

func (o ContainerStateWaitingOutput) ToContainerStateWaitingPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateWaiting) *ContainerStateWaiting {
		return &v
	}).(ContainerStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o ContainerStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o ContainerStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ContainerStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateWaiting)(nil)).Elem()
}

func (o ContainerStateWaitingPtrOutput) ToContainerStateWaitingPtrOutput() ContainerStateWaitingPtrOutput {
	return o
}

func (o ContainerStateWaitingPtrOutput) ToContainerStateWaitingPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPtrOutput {
	return o
}

func (o ContainerStateWaitingPtrOutput) Elem() ContainerStateWaitingOutput {
	return o.ApplyT(func(v *ContainerStateWaiting) ContainerStateWaiting {
		if v != nil {
			return *v
		}
		var ret ContainerStateWaiting
		return ret
	}).(ContainerStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o ContainerStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o ContainerStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaitingPatch struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// ContainerStateWaitingPatchInput is an input type that accepts ContainerStateWaitingPatchArgs and ContainerStateWaitingPatchOutput values.
// You can construct a concrete instance of `ContainerStateWaitingPatchInput` via:
//
//	ContainerStateWaitingPatchArgs{...}
type ContainerStateWaitingPatchInput interface {
	pulumi.Input

	ToContainerStateWaitingPatchOutput() ContainerStateWaitingPatchOutput
	ToContainerStateWaitingPatchOutputWithContext(context.Context) ContainerStateWaitingPatchOutput
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaitingPatchArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ContainerStateWaitingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateWaitingPatch)(nil)).Elem()
}

func (i ContainerStateWaitingPatchArgs) ToContainerStateWaitingPatchOutput() ContainerStateWaitingPatchOutput {
	return i.ToContainerStateWaitingPatchOutputWithContext(context.Background())
}

func (i ContainerStateWaitingPatchArgs) ToContainerStateWaitingPatchOutputWithContext(ctx context.Context) ContainerStateWaitingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingPatchOutput)
}

func (i ContainerStateWaitingPatchArgs) ToContainerStateWaitingPatchPtrOutput() ContainerStateWaitingPatchPtrOutput {
	return i.ToContainerStateWaitingPatchPtrOutputWithContext(context.Background())
}

func (i ContainerStateWaitingPatchArgs) ToContainerStateWaitingPatchPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingPatchOutput).ToContainerStateWaitingPatchPtrOutputWithContext(ctx)
}

// ContainerStateWaitingPatchPtrInput is an input type that accepts ContainerStateWaitingPatchArgs, ContainerStateWaitingPatchPtr and ContainerStateWaitingPatchPtrOutput values.
// You can construct a concrete instance of `ContainerStateWaitingPatchPtrInput` via:
//
//	        ContainerStateWaitingPatchArgs{...}
//
//	or:
//
//	        nil
type ContainerStateWaitingPatchPtrInput interface {
	pulumi.Input

	ToContainerStateWaitingPatchPtrOutput() ContainerStateWaitingPatchPtrOutput
	ToContainerStateWaitingPatchPtrOutputWithContext(context.Context) ContainerStateWaitingPatchPtrOutput
}

type containerStateWaitingPatchPtrType ContainerStateWaitingPatchArgs

func ContainerStateWaitingPatchPtr(v *ContainerStateWaitingPatchArgs) ContainerStateWaitingPatchPtrInput {
	return (*containerStateWaitingPatchPtrType)(v)
}

func (*containerStateWaitingPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateWaitingPatch)(nil)).Elem()
}

func (i *containerStateWaitingPatchPtrType) ToContainerStateWaitingPatchPtrOutput() ContainerStateWaitingPatchPtrOutput {
	return i.ToContainerStateWaitingPatchPtrOutputWithContext(context.Background())
}

func (i *containerStateWaitingPatchPtrType) ToContainerStateWaitingPatchPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateWaitingPatchPtrOutput)
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaitingPatchOutput struct{ *pulumi.OutputState }

func (ContainerStateWaitingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateWaitingPatch)(nil)).Elem()
}

func (o ContainerStateWaitingPatchOutput) ToContainerStateWaitingPatchOutput() ContainerStateWaitingPatchOutput {
	return o
}

func (o ContainerStateWaitingPatchOutput) ToContainerStateWaitingPatchOutputWithContext(ctx context.Context) ContainerStateWaitingPatchOutput {
	return o
}

func (o ContainerStateWaitingPatchOutput) ToContainerStateWaitingPatchPtrOutput() ContainerStateWaitingPatchPtrOutput {
	return o.ToContainerStateWaitingPatchPtrOutputWithContext(context.Background())
}

func (o ContainerStateWaitingPatchOutput) ToContainerStateWaitingPatchPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerStateWaitingPatch) *ContainerStateWaitingPatch {
		return &v
	}).(ContainerStateWaitingPatchPtrOutput)
}

// Message regarding why the container is not yet running.
func (o ContainerStateWaitingPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateWaitingPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o ContainerStateWaitingPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateWaitingPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ContainerStateWaitingPatchPtrOutput struct{ *pulumi.OutputState }

func (ContainerStateWaitingPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateWaitingPatch)(nil)).Elem()
}

func (o ContainerStateWaitingPatchPtrOutput) ToContainerStateWaitingPatchPtrOutput() ContainerStateWaitingPatchPtrOutput {
	return o
}

func (o ContainerStateWaitingPatchPtrOutput) ToContainerStateWaitingPatchPtrOutputWithContext(ctx context.Context) ContainerStateWaitingPatchPtrOutput {
	return o
}

func (o ContainerStateWaitingPatchPtrOutput) Elem() ContainerStateWaitingPatchOutput {
	return o.ApplyT(func(v *ContainerStateWaitingPatch) ContainerStateWaitingPatch {
		if v != nil {
			return *v
		}
		var ret ContainerStateWaitingPatch
		return ret
	}).(ContainerStateWaitingPatchOutput)
}

// Message regarding why the container is not yet running.
func (o ContainerStateWaitingPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateWaitingPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o ContainerStateWaitingPatchPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateWaitingPatch) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatus struct {
	// Container's ID in the format '<type>://<container_id>'.
	ContainerID *string `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image string `pulumi:"image"`
	// ImageID of the container's image.
	ImageID string `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState *ContainerState `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready bool `pulumi:"ready"`
	// The number of times the container has been restarted.
	RestartCount int `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`
	// Details about the container's current condition.
	State *ContainerState `pulumi:"state"`
}

// ContainerStatusInput is an input type that accepts ContainerStatusArgs and ContainerStatusOutput values.
// You can construct a concrete instance of `ContainerStatusInput` via:
//
//	ContainerStatusArgs{...}
type ContainerStatusInput interface {
	pulumi.Input

	ToContainerStatusOutput() ContainerStatusOutput
	ToContainerStatusOutputWithContext(context.Context) ContainerStatusOutput
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatusArgs struct {
	// Container's ID in the format '<type>://<container_id>'.
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image pulumi.StringInput `pulumi:"image"`
	// ImageID of the container's image.
	ImageID pulumi.StringInput `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState ContainerStatePtrInput `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times the container has been restarted.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolPtrInput `pulumi:"started"`
	// Details about the container's current condition.
	State ContainerStatePtrInput `pulumi:"state"`
}

func (ContainerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatus)(nil)).Elem()
}

func (i ContainerStatusArgs) ToContainerStatusOutput() ContainerStatusOutput {
	return i.ToContainerStatusOutputWithContext(context.Background())
}

func (i ContainerStatusArgs) ToContainerStatusOutputWithContext(ctx context.Context) ContainerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatusOutput)
}

// ContainerStatusArrayInput is an input type that accepts ContainerStatusArray and ContainerStatusArrayOutput values.
// You can construct a concrete instance of `ContainerStatusArrayInput` via:
//
//	ContainerStatusArray{ ContainerStatusArgs{...} }
type ContainerStatusArrayInput interface {
	pulumi.Input

	ToContainerStatusArrayOutput() ContainerStatusArrayOutput
	ToContainerStatusArrayOutputWithContext(context.Context) ContainerStatusArrayOutput
}

type ContainerStatusArray []ContainerStatusInput

func (ContainerStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerStatus)(nil)).Elem()
}

func (i ContainerStatusArray) ToContainerStatusArrayOutput() ContainerStatusArrayOutput {
	return i.ToContainerStatusArrayOutputWithContext(context.Background())
}

func (i ContainerStatusArray) ToContainerStatusArrayOutputWithContext(ctx context.Context) ContainerStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatusArrayOutput)
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatusOutput struct{ *pulumi.OutputState }

func (ContainerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatus)(nil)).Elem()
}

func (o ContainerStatusOutput) ToContainerStatusOutput() ContainerStatusOutput {
	return o
}

func (o ContainerStatusOutput) ToContainerStatusOutputWithContext(ctx context.Context) ContainerStatusOutput {
	return o
}

// Container's ID in the format '<type>://<container_id>'.
func (o ContainerStatusOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStatus) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
func (o ContainerStatusOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStatus) string { return v.Image }).(pulumi.StringOutput)
}

// ImageID of the container's image.
func (o ContainerStatusOutput) ImageID() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStatus) string { return v.ImageID }).(pulumi.StringOutput)
}

// Details about the container's last termination condition.
func (o ContainerStatusOutput) LastState() ContainerStatePtrOutput {
	return o.ApplyT(func(v ContainerStatus) *ContainerState { return v.LastState }).(ContainerStatePtrOutput)
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (o ContainerStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStatus) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the container has passed its readiness probe.
func (o ContainerStatusOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v ContainerStatus) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times the container has been restarted.
func (o ContainerStatusOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerStatus) int { return v.RestartCount }).(pulumi.IntOutput)
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (o ContainerStatusOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerStatus) *bool { return v.Started }).(pulumi.BoolPtrOutput)
}

// Details about the container's current condition.
func (o ContainerStatusOutput) State() ContainerStatePtrOutput {
	return o.ApplyT(func(v ContainerStatus) *ContainerState { return v.State }).(ContainerStatePtrOutput)
}

type ContainerStatusArrayOutput struct{ *pulumi.OutputState }

func (ContainerStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerStatus)(nil)).Elem()
}

func (o ContainerStatusArrayOutput) ToContainerStatusArrayOutput() ContainerStatusArrayOutput {
	return o
}

func (o ContainerStatusArrayOutput) ToContainerStatusArrayOutputWithContext(ctx context.Context) ContainerStatusArrayOutput {
	return o
}

func (o ContainerStatusArrayOutput) Index(i pulumi.IntInput) ContainerStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerStatus {
		return vs[0].([]ContainerStatus)[vs[1].(int)]
	}).(ContainerStatusOutput)
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatusPatch struct {
	// Container's ID in the format '<type>://<container_id>'.
	ContainerID *string `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image *string `pulumi:"image"`
	// ImageID of the container's image.
	ImageID *string `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState *ContainerStatePatch `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name *string `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready *bool `pulumi:"ready"`
	// The number of times the container has been restarted.
	RestartCount *int `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`
	// Details about the container's current condition.
	State *ContainerStatePatch `pulumi:"state"`
}

// ContainerStatusPatchInput is an input type that accepts ContainerStatusPatchArgs and ContainerStatusPatchOutput values.
// You can construct a concrete instance of `ContainerStatusPatchInput` via:
//
//	ContainerStatusPatchArgs{...}
type ContainerStatusPatchInput interface {
	pulumi.Input

	ToContainerStatusPatchOutput() ContainerStatusPatchOutput
	ToContainerStatusPatchOutputWithContext(context.Context) ContainerStatusPatchOutput
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatusPatchArgs struct {
	// Container's ID in the format '<type>://<container_id>'.
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImageID of the container's image.
	ImageID pulumi.StringPtrInput `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState ContainerStatePatchPtrInput `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
	// The number of times the container has been restarted.
	RestartCount pulumi.IntPtrInput `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolPtrInput `pulumi:"started"`
	// Details about the container's current condition.
	State ContainerStatePatchPtrInput `pulumi:"state"`
}

func (ContainerStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatusPatch)(nil)).Elem()
}

func (i ContainerStatusPatchArgs) ToContainerStatusPatchOutput() ContainerStatusPatchOutput {
	return i.ToContainerStatusPatchOutputWithContext(context.Background())
}

func (i ContainerStatusPatchArgs) ToContainerStatusPatchOutputWithContext(ctx context.Context) ContainerStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatusPatchOutput)
}

// ContainerStatusPatchArrayInput is an input type that accepts ContainerStatusPatchArray and ContainerStatusPatchArrayOutput values.
// You can construct a concrete instance of `ContainerStatusPatchArrayInput` via:
//
//	ContainerStatusPatchArray{ ContainerStatusPatchArgs{...} }
type ContainerStatusPatchArrayInput interface {
	pulumi.Input

	ToContainerStatusPatchArrayOutput() ContainerStatusPatchArrayOutput
	ToContainerStatusPatchArrayOutputWithContext(context.Context) ContainerStatusPatchArrayOutput
}

type ContainerStatusPatchArray []ContainerStatusPatchInput

func (ContainerStatusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerStatusPatch)(nil)).Elem()
}

func (i ContainerStatusPatchArray) ToContainerStatusPatchArrayOutput() ContainerStatusPatchArrayOutput {
	return i.ToContainerStatusPatchArrayOutputWithContext(context.Background())
}

func (i ContainerStatusPatchArray) ToContainerStatusPatchArrayOutputWithContext(ctx context.Context) ContainerStatusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStatusPatchArrayOutput)
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatusPatchOutput struct{ *pulumi.OutputState }

func (ContainerStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStatusPatch)(nil)).Elem()
}

func (o ContainerStatusPatchOutput) ToContainerStatusPatchOutput() ContainerStatusPatchOutput {
	return o
}

func (o ContainerStatusPatchOutput) ToContainerStatusPatchOutputWithContext(ctx context.Context) ContainerStatusPatchOutput {
	return o
}

// Container's ID in the format '<type>://<container_id>'.
func (o ContainerStatusPatchOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
func (o ContainerStatusPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImageID of the container's image.
func (o ContainerStatusPatchOutput) ImageID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *string { return v.ImageID }).(pulumi.StringPtrOutput)
}

// Details about the container's last termination condition.
func (o ContainerStatusPatchOutput) LastState() ContainerStatePatchPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *ContainerStatePatch { return v.LastState }).(ContainerStatePatchPtrOutput)
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (o ContainerStatusPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the container has passed its readiness probe.
func (o ContainerStatusPatchOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// The number of times the container has been restarted.
func (o ContainerStatusPatchOutput) RestartCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *int { return v.RestartCount }).(pulumi.IntPtrOutput)
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (o ContainerStatusPatchOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *bool { return v.Started }).(pulumi.BoolPtrOutput)
}

// Details about the container's current condition.
func (o ContainerStatusPatchOutput) State() ContainerStatePatchPtrOutput {
	return o.ApplyT(func(v ContainerStatusPatch) *ContainerStatePatch { return v.State }).(ContainerStatePatchPtrOutput)
}

type ContainerStatusPatchArrayOutput struct{ *pulumi.OutputState }

func (ContainerStatusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerStatusPatch)(nil)).Elem()
}

func (o ContainerStatusPatchArrayOutput) ToContainerStatusPatchArrayOutput() ContainerStatusPatchArrayOutput {
	return o
}

func (o ContainerStatusPatchArrayOutput) ToContainerStatusPatchArrayOutputWithContext(ctx context.Context) ContainerStatusPatchArrayOutput {
	return o
}

func (o ContainerStatusPatchArrayOutput) Index(i pulumi.IntInput) ContainerStatusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerStatusPatch {
		return vs[0].([]ContainerStatusPatch)[vs[1].(int)]
	}).(ContainerStatusPatchOutput)
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpoint struct {
	// Port number of the given endpoint.
	Port int `pulumi:"Port"`
}

// DaemonEndpointInput is an input type that accepts DaemonEndpointArgs and DaemonEndpointOutput values.
// You can construct a concrete instance of `DaemonEndpointInput` via:
//
//	DaemonEndpointArgs{...}
type DaemonEndpointInput interface {
	pulumi.Input

	ToDaemonEndpointOutput() DaemonEndpointOutput
	ToDaemonEndpointOutputWithContext(context.Context) DaemonEndpointOutput
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpointArgs struct {
	// Port number of the given endpoint.
	Port pulumi.IntInput `pulumi:"Port"`
}

func (DaemonEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonEndpoint)(nil)).Elem()
}

func (i DaemonEndpointArgs) ToDaemonEndpointOutput() DaemonEndpointOutput {
	return i.ToDaemonEndpointOutputWithContext(context.Background())
}

func (i DaemonEndpointArgs) ToDaemonEndpointOutputWithContext(ctx context.Context) DaemonEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointOutput)
}

func (i DaemonEndpointArgs) ToDaemonEndpointPtrOutput() DaemonEndpointPtrOutput {
	return i.ToDaemonEndpointPtrOutputWithContext(context.Background())
}

func (i DaemonEndpointArgs) ToDaemonEndpointPtrOutputWithContext(ctx context.Context) DaemonEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointOutput).ToDaemonEndpointPtrOutputWithContext(ctx)
}

// DaemonEndpointPtrInput is an input type that accepts DaemonEndpointArgs, DaemonEndpointPtr and DaemonEndpointPtrOutput values.
// You can construct a concrete instance of `DaemonEndpointPtrInput` via:
//
//	        DaemonEndpointArgs{...}
//
//	or:
//
//	        nil
type DaemonEndpointPtrInput interface {
	pulumi.Input

	ToDaemonEndpointPtrOutput() DaemonEndpointPtrOutput
	ToDaemonEndpointPtrOutputWithContext(context.Context) DaemonEndpointPtrOutput
}

type daemonEndpointPtrType DaemonEndpointArgs

func DaemonEndpointPtr(v *DaemonEndpointArgs) DaemonEndpointPtrInput {
	return (*daemonEndpointPtrType)(v)
}

func (*daemonEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonEndpoint)(nil)).Elem()
}

func (i *daemonEndpointPtrType) ToDaemonEndpointPtrOutput() DaemonEndpointPtrOutput {
	return i.ToDaemonEndpointPtrOutputWithContext(context.Background())
}

func (i *daemonEndpointPtrType) ToDaemonEndpointPtrOutputWithContext(ctx context.Context) DaemonEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointPtrOutput)
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpointOutput struct{ *pulumi.OutputState }

func (DaemonEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonEndpoint)(nil)).Elem()
}

func (o DaemonEndpointOutput) ToDaemonEndpointOutput() DaemonEndpointOutput {
	return o
}

func (o DaemonEndpointOutput) ToDaemonEndpointOutputWithContext(ctx context.Context) DaemonEndpointOutput {
	return o
}

func (o DaemonEndpointOutput) ToDaemonEndpointPtrOutput() DaemonEndpointPtrOutput {
	return o.ToDaemonEndpointPtrOutputWithContext(context.Background())
}

func (o DaemonEndpointOutput) ToDaemonEndpointPtrOutputWithContext(ctx context.Context) DaemonEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DaemonEndpoint) *DaemonEndpoint {
		return &v
	}).(DaemonEndpointPtrOutput)
}

// Port number of the given endpoint.
func (o DaemonEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DaemonEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

type DaemonEndpointPtrOutput struct{ *pulumi.OutputState }

func (DaemonEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonEndpoint)(nil)).Elem()
}

func (o DaemonEndpointPtrOutput) ToDaemonEndpointPtrOutput() DaemonEndpointPtrOutput {
	return o
}

func (o DaemonEndpointPtrOutput) ToDaemonEndpointPtrOutputWithContext(ctx context.Context) DaemonEndpointPtrOutput {
	return o
}

func (o DaemonEndpointPtrOutput) Elem() DaemonEndpointOutput {
	return o.ApplyT(func(v *DaemonEndpoint) DaemonEndpoint {
		if v != nil {
			return *v
		}
		var ret DaemonEndpoint
		return ret
	}).(DaemonEndpointOutput)
}

// Port number of the given endpoint.
func (o DaemonEndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DaemonEndpoint) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpointPatch struct {
	// Port number of the given endpoint.
	Port *int `pulumi:"Port"`
}

// DaemonEndpointPatchInput is an input type that accepts DaemonEndpointPatchArgs and DaemonEndpointPatchOutput values.
// You can construct a concrete instance of `DaemonEndpointPatchInput` via:
//
//	DaemonEndpointPatchArgs{...}
type DaemonEndpointPatchInput interface {
	pulumi.Input

	ToDaemonEndpointPatchOutput() DaemonEndpointPatchOutput
	ToDaemonEndpointPatchOutputWithContext(context.Context) DaemonEndpointPatchOutput
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpointPatchArgs struct {
	// Port number of the given endpoint.
	Port pulumi.IntPtrInput `pulumi:"Port"`
}

func (DaemonEndpointPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonEndpointPatch)(nil)).Elem()
}

func (i DaemonEndpointPatchArgs) ToDaemonEndpointPatchOutput() DaemonEndpointPatchOutput {
	return i.ToDaemonEndpointPatchOutputWithContext(context.Background())
}

func (i DaemonEndpointPatchArgs) ToDaemonEndpointPatchOutputWithContext(ctx context.Context) DaemonEndpointPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointPatchOutput)
}

func (i DaemonEndpointPatchArgs) ToDaemonEndpointPatchPtrOutput() DaemonEndpointPatchPtrOutput {
	return i.ToDaemonEndpointPatchPtrOutputWithContext(context.Background())
}

func (i DaemonEndpointPatchArgs) ToDaemonEndpointPatchPtrOutputWithContext(ctx context.Context) DaemonEndpointPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointPatchOutput).ToDaemonEndpointPatchPtrOutputWithContext(ctx)
}

// DaemonEndpointPatchPtrInput is an input type that accepts DaemonEndpointPatchArgs, DaemonEndpointPatchPtr and DaemonEndpointPatchPtrOutput values.
// You can construct a concrete instance of `DaemonEndpointPatchPtrInput` via:
//
//	        DaemonEndpointPatchArgs{...}
//
//	or:
//
//	        nil
type DaemonEndpointPatchPtrInput interface {
	pulumi.Input

	ToDaemonEndpointPatchPtrOutput() DaemonEndpointPatchPtrOutput
	ToDaemonEndpointPatchPtrOutputWithContext(context.Context) DaemonEndpointPatchPtrOutput
}

type daemonEndpointPatchPtrType DaemonEndpointPatchArgs

func DaemonEndpointPatchPtr(v *DaemonEndpointPatchArgs) DaemonEndpointPatchPtrInput {
	return (*daemonEndpointPatchPtrType)(v)
}

func (*daemonEndpointPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonEndpointPatch)(nil)).Elem()
}

func (i *daemonEndpointPatchPtrType) ToDaemonEndpointPatchPtrOutput() DaemonEndpointPatchPtrOutput {
	return i.ToDaemonEndpointPatchPtrOutputWithContext(context.Background())
}

func (i *daemonEndpointPatchPtrType) ToDaemonEndpointPatchPtrOutputWithContext(ctx context.Context) DaemonEndpointPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaemonEndpointPatchPtrOutput)
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type DaemonEndpointPatchOutput struct{ *pulumi.OutputState }

func (DaemonEndpointPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaemonEndpointPatch)(nil)).Elem()
}

func (o DaemonEndpointPatchOutput) ToDaemonEndpointPatchOutput() DaemonEndpointPatchOutput {
	return o
}

func (o DaemonEndpointPatchOutput) ToDaemonEndpointPatchOutputWithContext(ctx context.Context) DaemonEndpointPatchOutput {
	return o
}

func (o DaemonEndpointPatchOutput) ToDaemonEndpointPatchPtrOutput() DaemonEndpointPatchPtrOutput {
	return o.ToDaemonEndpointPatchPtrOutputWithContext(context.Background())
}

func (o DaemonEndpointPatchOutput) ToDaemonEndpointPatchPtrOutputWithContext(ctx context.Context) DaemonEndpointPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DaemonEndpointPatch) *DaemonEndpointPatch {
		return &v
	}).(DaemonEndpointPatchPtrOutput)
}

// Port number of the given endpoint.
func (o DaemonEndpointPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaemonEndpointPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DaemonEndpointPatchPtrOutput struct{ *pulumi.OutputState }

func (DaemonEndpointPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaemonEndpointPatch)(nil)).Elem()
}

func (o DaemonEndpointPatchPtrOutput) ToDaemonEndpointPatchPtrOutput() DaemonEndpointPatchPtrOutput {
	return o
}

func (o DaemonEndpointPatchPtrOutput) ToDaemonEndpointPatchPtrOutputWithContext(ctx context.Context) DaemonEndpointPatchPtrOutput {
	return o
}

func (o DaemonEndpointPatchPtrOutput) Elem() DaemonEndpointPatchOutput {
	return o.ApplyT(func(v *DaemonEndpointPatch) DaemonEndpointPatch {
		if v != nil {
			return *v
		}
		var ret DaemonEndpointPatch
		return ret
	}).(DaemonEndpointPatchOutput)
}

// Port number of the given endpoint.
func (o DaemonEndpointPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DaemonEndpointPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjection struct {
	// Items is a list of DownwardAPIVolume file
	Items []DownwardAPIVolumeFile `pulumi:"items"`
}

// DownwardAPIProjectionInput is an input type that accepts DownwardAPIProjectionArgs and DownwardAPIProjectionOutput values.
// You can construct a concrete instance of `DownwardAPIProjectionInput` via:
//
//	DownwardAPIProjectionArgs{...}
type DownwardAPIProjectionInput interface {
	pulumi.Input

	ToDownwardAPIProjectionOutput() DownwardAPIProjectionOutput
	ToDownwardAPIProjectionOutputWithContext(context.Context) DownwardAPIProjectionOutput
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjectionArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items DownwardAPIVolumeFileArrayInput `pulumi:"items"`
}

func (DownwardAPIProjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIProjection)(nil)).Elem()
}

func (i DownwardAPIProjectionArgs) ToDownwardAPIProjectionOutput() DownwardAPIProjectionOutput {
	return i.ToDownwardAPIProjectionOutputWithContext(context.Background())
}

func (i DownwardAPIProjectionArgs) ToDownwardAPIProjectionOutputWithContext(ctx context.Context) DownwardAPIProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionOutput)
}

func (i DownwardAPIProjectionArgs) ToDownwardAPIProjectionPtrOutput() DownwardAPIProjectionPtrOutput {
	return i.ToDownwardAPIProjectionPtrOutputWithContext(context.Background())
}

func (i DownwardAPIProjectionArgs) ToDownwardAPIProjectionPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionOutput).ToDownwardAPIProjectionPtrOutputWithContext(ctx)
}

// DownwardAPIProjectionPtrInput is an input type that accepts DownwardAPIProjectionArgs, DownwardAPIProjectionPtr and DownwardAPIProjectionPtrOutput values.
// You can construct a concrete instance of `DownwardAPIProjectionPtrInput` via:
//
//	        DownwardAPIProjectionArgs{...}
//
//	or:
//
//	        nil
type DownwardAPIProjectionPtrInput interface {
	pulumi.Input

	ToDownwardAPIProjectionPtrOutput() DownwardAPIProjectionPtrOutput
	ToDownwardAPIProjectionPtrOutputWithContext(context.Context) DownwardAPIProjectionPtrOutput
}

type downwardAPIProjectionPtrType DownwardAPIProjectionArgs

func DownwardAPIProjectionPtr(v *DownwardAPIProjectionArgs) DownwardAPIProjectionPtrInput {
	return (*downwardAPIProjectionPtrType)(v)
}

func (*downwardAPIProjectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIProjection)(nil)).Elem()
}

func (i *downwardAPIProjectionPtrType) ToDownwardAPIProjectionPtrOutput() DownwardAPIProjectionPtrOutput {
	return i.ToDownwardAPIProjectionPtrOutputWithContext(context.Background())
}

func (i *downwardAPIProjectionPtrType) ToDownwardAPIProjectionPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionPtrOutput)
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjectionOutput struct{ *pulumi.OutputState }

func (DownwardAPIProjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIProjection)(nil)).Elem()
}

func (o DownwardAPIProjectionOutput) ToDownwardAPIProjectionOutput() DownwardAPIProjectionOutput {
	return o
}

func (o DownwardAPIProjectionOutput) ToDownwardAPIProjectionOutputWithContext(ctx context.Context) DownwardAPIProjectionOutput {
	return o
}

func (o DownwardAPIProjectionOutput) ToDownwardAPIProjectionPtrOutput() DownwardAPIProjectionPtrOutput {
	return o.ToDownwardAPIProjectionPtrOutputWithContext(context.Background())
}

func (o DownwardAPIProjectionOutput) ToDownwardAPIProjectionPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DownwardAPIProjection) *DownwardAPIProjection {
		return &v
	}).(DownwardAPIProjectionPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o DownwardAPIProjectionOutput) Items() DownwardAPIVolumeFileArrayOutput {
	return o.ApplyT(func(v DownwardAPIProjection) []DownwardAPIVolumeFile { return v.Items }).(DownwardAPIVolumeFileArrayOutput)
}

type DownwardAPIProjectionPtrOutput struct{ *pulumi.OutputState }

func (DownwardAPIProjectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIProjection)(nil)).Elem()
}

func (o DownwardAPIProjectionPtrOutput) ToDownwardAPIProjectionPtrOutput() DownwardAPIProjectionPtrOutput {
	return o
}

func (o DownwardAPIProjectionPtrOutput) ToDownwardAPIProjectionPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPtrOutput {
	return o
}

func (o DownwardAPIProjectionPtrOutput) Elem() DownwardAPIProjectionOutput {
	return o.ApplyT(func(v *DownwardAPIProjection) DownwardAPIProjection {
		if v != nil {
			return *v
		}
		var ret DownwardAPIProjection
		return ret
	}).(DownwardAPIProjectionOutput)
}

// Items is a list of DownwardAPIVolume file
func (o DownwardAPIProjectionPtrOutput) Items() DownwardAPIVolumeFileArrayOutput {
	return o.ApplyT(func(v *DownwardAPIProjection) []DownwardAPIVolumeFile {
		if v == nil {
			return nil
		}
		return v.Items
	}).(DownwardAPIVolumeFileArrayOutput)
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjectionPatch struct {
	// Items is a list of DownwardAPIVolume file
	Items []DownwardAPIVolumeFilePatch `pulumi:"items"`
}

// DownwardAPIProjectionPatchInput is an input type that accepts DownwardAPIProjectionPatchArgs and DownwardAPIProjectionPatchOutput values.
// You can construct a concrete instance of `DownwardAPIProjectionPatchInput` via:
//
//	DownwardAPIProjectionPatchArgs{...}
type DownwardAPIProjectionPatchInput interface {
	pulumi.Input

	ToDownwardAPIProjectionPatchOutput() DownwardAPIProjectionPatchOutput
	ToDownwardAPIProjectionPatchOutputWithContext(context.Context) DownwardAPIProjectionPatchOutput
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjectionPatchArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items DownwardAPIVolumeFilePatchArrayInput `pulumi:"items"`
}

func (DownwardAPIProjectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIProjectionPatch)(nil)).Elem()
}

func (i DownwardAPIProjectionPatchArgs) ToDownwardAPIProjectionPatchOutput() DownwardAPIProjectionPatchOutput {
	return i.ToDownwardAPIProjectionPatchOutputWithContext(context.Background())
}

func (i DownwardAPIProjectionPatchArgs) ToDownwardAPIProjectionPatchOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionPatchOutput)
}

func (i DownwardAPIProjectionPatchArgs) ToDownwardAPIProjectionPatchPtrOutput() DownwardAPIProjectionPatchPtrOutput {
	return i.ToDownwardAPIProjectionPatchPtrOutputWithContext(context.Background())
}

func (i DownwardAPIProjectionPatchArgs) ToDownwardAPIProjectionPatchPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionPatchOutput).ToDownwardAPIProjectionPatchPtrOutputWithContext(ctx)
}

// DownwardAPIProjectionPatchPtrInput is an input type that accepts DownwardAPIProjectionPatchArgs, DownwardAPIProjectionPatchPtr and DownwardAPIProjectionPatchPtrOutput values.
// You can construct a concrete instance of `DownwardAPIProjectionPatchPtrInput` via:
//
//	        DownwardAPIProjectionPatchArgs{...}
//
//	or:
//
//	        nil
type DownwardAPIProjectionPatchPtrInput interface {
	pulumi.Input

	ToDownwardAPIProjectionPatchPtrOutput() DownwardAPIProjectionPatchPtrOutput
	ToDownwardAPIProjectionPatchPtrOutputWithContext(context.Context) DownwardAPIProjectionPatchPtrOutput
}

type downwardAPIProjectionPatchPtrType DownwardAPIProjectionPatchArgs

func DownwardAPIProjectionPatchPtr(v *DownwardAPIProjectionPatchArgs) DownwardAPIProjectionPatchPtrInput {
	return (*downwardAPIProjectionPatchPtrType)(v)
}

func (*downwardAPIProjectionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIProjectionPatch)(nil)).Elem()
}

func (i *downwardAPIProjectionPatchPtrType) ToDownwardAPIProjectionPatchPtrOutput() DownwardAPIProjectionPatchPtrOutput {
	return i.ToDownwardAPIProjectionPatchPtrOutputWithContext(context.Background())
}

func (i *downwardAPIProjectionPatchPtrType) ToDownwardAPIProjectionPatchPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIProjectionPatchPtrOutput)
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type DownwardAPIProjectionPatchOutput struct{ *pulumi.OutputState }

func (DownwardAPIProjectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIProjectionPatch)(nil)).Elem()
}

func (o DownwardAPIProjectionPatchOutput) ToDownwardAPIProjectionPatchOutput() DownwardAPIProjectionPatchOutput {
	return o
}

func (o DownwardAPIProjectionPatchOutput) ToDownwardAPIProjectionPatchOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchOutput {
	return o
}

func (o DownwardAPIProjectionPatchOutput) ToDownwardAPIProjectionPatchPtrOutput() DownwardAPIProjectionPatchPtrOutput {
	return o.ToDownwardAPIProjectionPatchPtrOutputWithContext(context.Background())
}

func (o DownwardAPIProjectionPatchOutput) ToDownwardAPIProjectionPatchPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DownwardAPIProjectionPatch) *DownwardAPIProjectionPatch {
		return &v
	}).(DownwardAPIProjectionPatchPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o DownwardAPIProjectionPatchOutput) Items() DownwardAPIVolumeFilePatchArrayOutput {
	return o.ApplyT(func(v DownwardAPIProjectionPatch) []DownwardAPIVolumeFilePatch { return v.Items }).(DownwardAPIVolumeFilePatchArrayOutput)
}

type DownwardAPIProjectionPatchPtrOutput struct{ *pulumi.OutputState }

func (DownwardAPIProjectionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIProjectionPatch)(nil)).Elem()
}

func (o DownwardAPIProjectionPatchPtrOutput) ToDownwardAPIProjectionPatchPtrOutput() DownwardAPIProjectionPatchPtrOutput {
	return o
}

func (o DownwardAPIProjectionPatchPtrOutput) ToDownwardAPIProjectionPatchPtrOutputWithContext(ctx context.Context) DownwardAPIProjectionPatchPtrOutput {
	return o
}

func (o DownwardAPIProjectionPatchPtrOutput) Elem() DownwardAPIProjectionPatchOutput {
	return o.ApplyT(func(v *DownwardAPIProjectionPatch) DownwardAPIProjectionPatch {
		if v != nil {
			return *v
		}
		var ret DownwardAPIProjectionPatch
		return ret
	}).(DownwardAPIProjectionPatchOutput)
}

// Items is a list of DownwardAPIVolume file
func (o DownwardAPIProjectionPatchPtrOutput) Items() DownwardAPIVolumeFilePatchArrayOutput {
	return o.ApplyT(func(v *DownwardAPIProjectionPatch) []DownwardAPIVolumeFilePatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(DownwardAPIVolumeFilePatchArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFile struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *ObjectFieldSelector `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *ResourceFieldSelector `pulumi:"resourceFieldRef"`
}

// DownwardAPIVolumeFileInput is an input type that accepts DownwardAPIVolumeFileArgs and DownwardAPIVolumeFileOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeFileInput` via:
//
//	DownwardAPIVolumeFileArgs{...}
type DownwardAPIVolumeFileInput interface {
	pulumi.Input

	ToDownwardAPIVolumeFileOutput() DownwardAPIVolumeFileOutput
	ToDownwardAPIVolumeFileOutputWithContext(context.Context) DownwardAPIVolumeFileOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFileArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef ObjectFieldSelectorPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef ResourceFieldSelectorPtrInput `pulumi:"resourceFieldRef"`
}

func (DownwardAPIVolumeFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeFile)(nil)).Elem()
}

func (i DownwardAPIVolumeFileArgs) ToDownwardAPIVolumeFileOutput() DownwardAPIVolumeFileOutput {
	return i.ToDownwardAPIVolumeFileOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeFileArgs) ToDownwardAPIVolumeFileOutputWithContext(ctx context.Context) DownwardAPIVolumeFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeFileOutput)
}

// DownwardAPIVolumeFileArrayInput is an input type that accepts DownwardAPIVolumeFileArray and DownwardAPIVolumeFileArrayOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeFileArrayInput` via:
//
//	DownwardAPIVolumeFileArray{ DownwardAPIVolumeFileArgs{...} }
type DownwardAPIVolumeFileArrayInput interface {
	pulumi.Input

	ToDownwardAPIVolumeFileArrayOutput() DownwardAPIVolumeFileArrayOutput
	ToDownwardAPIVolumeFileArrayOutputWithContext(context.Context) DownwardAPIVolumeFileArrayOutput
}

type DownwardAPIVolumeFileArray []DownwardAPIVolumeFileInput

func (DownwardAPIVolumeFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DownwardAPIVolumeFile)(nil)).Elem()
}

func (i DownwardAPIVolumeFileArray) ToDownwardAPIVolumeFileArrayOutput() DownwardAPIVolumeFileArrayOutput {
	return i.ToDownwardAPIVolumeFileArrayOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeFileArray) ToDownwardAPIVolumeFileArrayOutputWithContext(ctx context.Context) DownwardAPIVolumeFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeFileArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFileOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeFile)(nil)).Elem()
}

func (o DownwardAPIVolumeFileOutput) ToDownwardAPIVolumeFileOutput() DownwardAPIVolumeFileOutput {
	return o
}

func (o DownwardAPIVolumeFileOutput) ToDownwardAPIVolumeFileOutputWithContext(ctx context.Context) DownwardAPIVolumeFileOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o DownwardAPIVolumeFileOutput) FieldRef() ObjectFieldSelectorPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFile) *ObjectFieldSelector { return v.FieldRef }).(ObjectFieldSelectorPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeFileOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFile) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o DownwardAPIVolumeFileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFile) string { return v.Path }).(pulumi.StringOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o DownwardAPIVolumeFileOutput) ResourceFieldRef() ResourceFieldSelectorPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFile) *ResourceFieldSelector { return v.ResourceFieldRef }).(ResourceFieldSelectorPtrOutput)
}

type DownwardAPIVolumeFileArrayOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DownwardAPIVolumeFile)(nil)).Elem()
}

func (o DownwardAPIVolumeFileArrayOutput) ToDownwardAPIVolumeFileArrayOutput() DownwardAPIVolumeFileArrayOutput {
	return o
}

func (o DownwardAPIVolumeFileArrayOutput) ToDownwardAPIVolumeFileArrayOutputWithContext(ctx context.Context) DownwardAPIVolumeFileArrayOutput {
	return o
}

func (o DownwardAPIVolumeFileArrayOutput) Index(i pulumi.IntInput) DownwardAPIVolumeFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DownwardAPIVolumeFile {
		return vs[0].([]DownwardAPIVolumeFile)[vs[1].(int)]
	}).(DownwardAPIVolumeFileOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFilePatch struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *ObjectFieldSelectorPatch `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path *string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *ResourceFieldSelectorPatch `pulumi:"resourceFieldRef"`
}

// DownwardAPIVolumeFilePatchInput is an input type that accepts DownwardAPIVolumeFilePatchArgs and DownwardAPIVolumeFilePatchOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeFilePatchInput` via:
//
//	DownwardAPIVolumeFilePatchArgs{...}
type DownwardAPIVolumeFilePatchInput interface {
	pulumi.Input

	ToDownwardAPIVolumeFilePatchOutput() DownwardAPIVolumeFilePatchOutput
	ToDownwardAPIVolumeFilePatchOutputWithContext(context.Context) DownwardAPIVolumeFilePatchOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFilePatchArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef ObjectFieldSelectorPatchPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef ResourceFieldSelectorPatchPtrInput `pulumi:"resourceFieldRef"`
}

func (DownwardAPIVolumeFilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeFilePatch)(nil)).Elem()
}

func (i DownwardAPIVolumeFilePatchArgs) ToDownwardAPIVolumeFilePatchOutput() DownwardAPIVolumeFilePatchOutput {
	return i.ToDownwardAPIVolumeFilePatchOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeFilePatchArgs) ToDownwardAPIVolumeFilePatchOutputWithContext(ctx context.Context) DownwardAPIVolumeFilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeFilePatchOutput)
}

// DownwardAPIVolumeFilePatchArrayInput is an input type that accepts DownwardAPIVolumeFilePatchArray and DownwardAPIVolumeFilePatchArrayOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeFilePatchArrayInput` via:
//
//	DownwardAPIVolumeFilePatchArray{ DownwardAPIVolumeFilePatchArgs{...} }
type DownwardAPIVolumeFilePatchArrayInput interface {
	pulumi.Input

	ToDownwardAPIVolumeFilePatchArrayOutput() DownwardAPIVolumeFilePatchArrayOutput
	ToDownwardAPIVolumeFilePatchArrayOutputWithContext(context.Context) DownwardAPIVolumeFilePatchArrayOutput
}

type DownwardAPIVolumeFilePatchArray []DownwardAPIVolumeFilePatchInput

func (DownwardAPIVolumeFilePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DownwardAPIVolumeFilePatch)(nil)).Elem()
}

func (i DownwardAPIVolumeFilePatchArray) ToDownwardAPIVolumeFilePatchArrayOutput() DownwardAPIVolumeFilePatchArrayOutput {
	return i.ToDownwardAPIVolumeFilePatchArrayOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeFilePatchArray) ToDownwardAPIVolumeFilePatchArrayOutputWithContext(ctx context.Context) DownwardAPIVolumeFilePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeFilePatchArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFilePatchOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeFilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeFilePatch)(nil)).Elem()
}

func (o DownwardAPIVolumeFilePatchOutput) ToDownwardAPIVolumeFilePatchOutput() DownwardAPIVolumeFilePatchOutput {
	return o
}

func (o DownwardAPIVolumeFilePatchOutput) ToDownwardAPIVolumeFilePatchOutputWithContext(ctx context.Context) DownwardAPIVolumeFilePatchOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o DownwardAPIVolumeFilePatchOutput) FieldRef() ObjectFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFilePatch) *ObjectFieldSelectorPatch { return v.FieldRef }).(ObjectFieldSelectorPatchPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeFilePatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFilePatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o DownwardAPIVolumeFilePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFilePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o DownwardAPIVolumeFilePatchOutput) ResourceFieldRef() ResourceFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeFilePatch) *ResourceFieldSelectorPatch { return v.ResourceFieldRef }).(ResourceFieldSelectorPatchPtrOutput)
}

type DownwardAPIVolumeFilePatchArrayOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeFilePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DownwardAPIVolumeFilePatch)(nil)).Elem()
}

func (o DownwardAPIVolumeFilePatchArrayOutput) ToDownwardAPIVolumeFilePatchArrayOutput() DownwardAPIVolumeFilePatchArrayOutput {
	return o
}

func (o DownwardAPIVolumeFilePatchArrayOutput) ToDownwardAPIVolumeFilePatchArrayOutputWithContext(ctx context.Context) DownwardAPIVolumeFilePatchArrayOutput {
	return o
}

func (o DownwardAPIVolumeFilePatchArrayOutput) Index(i pulumi.IntInput) DownwardAPIVolumeFilePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DownwardAPIVolumeFilePatch {
		return vs[0].([]DownwardAPIVolumeFilePatch)[vs[1].(int)]
	}).(DownwardAPIVolumeFilePatchOutput)
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSource struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []DownwardAPIVolumeFile `pulumi:"items"`
}

// DownwardAPIVolumeSourceInput is an input type that accepts DownwardAPIVolumeSourceArgs and DownwardAPIVolumeSourceOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeSourceInput` via:
//
//	DownwardAPIVolumeSourceArgs{...}
type DownwardAPIVolumeSourceInput interface {
	pulumi.Input

	ToDownwardAPIVolumeSourceOutput() DownwardAPIVolumeSourceOutput
	ToDownwardAPIVolumeSourceOutputWithContext(context.Context) DownwardAPIVolumeSourceOutput
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSourceArgs struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items DownwardAPIVolumeFileArrayInput `pulumi:"items"`
}

func (DownwardAPIVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeSource)(nil)).Elem()
}

func (i DownwardAPIVolumeSourceArgs) ToDownwardAPIVolumeSourceOutput() DownwardAPIVolumeSourceOutput {
	return i.ToDownwardAPIVolumeSourceOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeSourceArgs) ToDownwardAPIVolumeSourceOutputWithContext(ctx context.Context) DownwardAPIVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourceOutput)
}

func (i DownwardAPIVolumeSourceArgs) ToDownwardAPIVolumeSourcePtrOutput() DownwardAPIVolumeSourcePtrOutput {
	return i.ToDownwardAPIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeSourceArgs) ToDownwardAPIVolumeSourcePtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourceOutput).ToDownwardAPIVolumeSourcePtrOutputWithContext(ctx)
}

// DownwardAPIVolumeSourcePtrInput is an input type that accepts DownwardAPIVolumeSourceArgs, DownwardAPIVolumeSourcePtr and DownwardAPIVolumeSourcePtrOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeSourcePtrInput` via:
//
//	        DownwardAPIVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type DownwardAPIVolumeSourcePtrInput interface {
	pulumi.Input

	ToDownwardAPIVolumeSourcePtrOutput() DownwardAPIVolumeSourcePtrOutput
	ToDownwardAPIVolumeSourcePtrOutputWithContext(context.Context) DownwardAPIVolumeSourcePtrOutput
}

type downwardAPIVolumeSourcePtrType DownwardAPIVolumeSourceArgs

func DownwardAPIVolumeSourcePtr(v *DownwardAPIVolumeSourceArgs) DownwardAPIVolumeSourcePtrInput {
	return (*downwardAPIVolumeSourcePtrType)(v)
}

func (*downwardAPIVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIVolumeSource)(nil)).Elem()
}

func (i *downwardAPIVolumeSourcePtrType) ToDownwardAPIVolumeSourcePtrOutput() DownwardAPIVolumeSourcePtrOutput {
	return i.ToDownwardAPIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *downwardAPIVolumeSourcePtrType) ToDownwardAPIVolumeSourcePtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourcePtrOutput)
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSourceOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeSource)(nil)).Elem()
}

func (o DownwardAPIVolumeSourceOutput) ToDownwardAPIVolumeSourceOutput() DownwardAPIVolumeSourceOutput {
	return o
}

func (o DownwardAPIVolumeSourceOutput) ToDownwardAPIVolumeSourceOutputWithContext(ctx context.Context) DownwardAPIVolumeSourceOutput {
	return o
}

func (o DownwardAPIVolumeSourceOutput) ToDownwardAPIVolumeSourcePtrOutput() DownwardAPIVolumeSourcePtrOutput {
	return o.ToDownwardAPIVolumeSourcePtrOutputWithContext(context.Background())
}

func (o DownwardAPIVolumeSourceOutput) ToDownwardAPIVolumeSourcePtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DownwardAPIVolumeSource) *DownwardAPIVolumeSource {
		return &v
	}).(DownwardAPIVolumeSourcePtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o DownwardAPIVolumeSourceOutput) Items() DownwardAPIVolumeFileArrayOutput {
	return o.ApplyT(func(v DownwardAPIVolumeSource) []DownwardAPIVolumeFile { return v.Items }).(DownwardAPIVolumeFileArrayOutput)
}

type DownwardAPIVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIVolumeSource)(nil)).Elem()
}

func (o DownwardAPIVolumeSourcePtrOutput) ToDownwardAPIVolumeSourcePtrOutput() DownwardAPIVolumeSourcePtrOutput {
	return o
}

func (o DownwardAPIVolumeSourcePtrOutput) ToDownwardAPIVolumeSourcePtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePtrOutput {
	return o
}

func (o DownwardAPIVolumeSourcePtrOutput) Elem() DownwardAPIVolumeSourceOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSource) DownwardAPIVolumeSource {
		if v != nil {
			return *v
		}
		var ret DownwardAPIVolumeSource
		return ret
	}).(DownwardAPIVolumeSourceOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o DownwardAPIVolumeSourcePtrOutput) Items() DownwardAPIVolumeFileArrayOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSource) []DownwardAPIVolumeFile {
		if v == nil {
			return nil
		}
		return v.Items
	}).(DownwardAPIVolumeFileArrayOutput)
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSourcePatch struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []DownwardAPIVolumeFilePatch `pulumi:"items"`
}

// DownwardAPIVolumeSourcePatchInput is an input type that accepts DownwardAPIVolumeSourcePatchArgs and DownwardAPIVolumeSourcePatchOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeSourcePatchInput` via:
//
//	DownwardAPIVolumeSourcePatchArgs{...}
type DownwardAPIVolumeSourcePatchInput interface {
	pulumi.Input

	ToDownwardAPIVolumeSourcePatchOutput() DownwardAPIVolumeSourcePatchOutput
	ToDownwardAPIVolumeSourcePatchOutputWithContext(context.Context) DownwardAPIVolumeSourcePatchOutput
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSourcePatchArgs struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items DownwardAPIVolumeFilePatchArrayInput `pulumi:"items"`
}

func (DownwardAPIVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeSourcePatch)(nil)).Elem()
}

func (i DownwardAPIVolumeSourcePatchArgs) ToDownwardAPIVolumeSourcePatchOutput() DownwardAPIVolumeSourcePatchOutput {
	return i.ToDownwardAPIVolumeSourcePatchOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeSourcePatchArgs) ToDownwardAPIVolumeSourcePatchOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourcePatchOutput)
}

func (i DownwardAPIVolumeSourcePatchArgs) ToDownwardAPIVolumeSourcePatchPtrOutput() DownwardAPIVolumeSourcePatchPtrOutput {
	return i.ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i DownwardAPIVolumeSourcePatchArgs) ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourcePatchOutput).ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(ctx)
}

// DownwardAPIVolumeSourcePatchPtrInput is an input type that accepts DownwardAPIVolumeSourcePatchArgs, DownwardAPIVolumeSourcePatchPtr and DownwardAPIVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `DownwardAPIVolumeSourcePatchPtrInput` via:
//
//	        DownwardAPIVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type DownwardAPIVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToDownwardAPIVolumeSourcePatchPtrOutput() DownwardAPIVolumeSourcePatchPtrOutput
	ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(context.Context) DownwardAPIVolumeSourcePatchPtrOutput
}

type downwardAPIVolumeSourcePatchPtrType DownwardAPIVolumeSourcePatchArgs

func DownwardAPIVolumeSourcePatchPtr(v *DownwardAPIVolumeSourcePatchArgs) DownwardAPIVolumeSourcePatchPtrInput {
	return (*downwardAPIVolumeSourcePatchPtrType)(v)
}

func (*downwardAPIVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIVolumeSourcePatch)(nil)).Elem()
}

func (i *downwardAPIVolumeSourcePatchPtrType) ToDownwardAPIVolumeSourcePatchPtrOutput() DownwardAPIVolumeSourcePatchPtrOutput {
	return i.ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *downwardAPIVolumeSourcePatchPtrType) ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownwardAPIVolumeSourcePatchPtrOutput)
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownwardAPIVolumeSourcePatch)(nil)).Elem()
}

func (o DownwardAPIVolumeSourcePatchOutput) ToDownwardAPIVolumeSourcePatchOutput() DownwardAPIVolumeSourcePatchOutput {
	return o
}

func (o DownwardAPIVolumeSourcePatchOutput) ToDownwardAPIVolumeSourcePatchOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchOutput {
	return o
}

func (o DownwardAPIVolumeSourcePatchOutput) ToDownwardAPIVolumeSourcePatchPtrOutput() DownwardAPIVolumeSourcePatchPtrOutput {
	return o.ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o DownwardAPIVolumeSourcePatchOutput) ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DownwardAPIVolumeSourcePatch) *DownwardAPIVolumeSourcePatch {
		return &v
	}).(DownwardAPIVolumeSourcePatchPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeSourcePatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DownwardAPIVolumeSourcePatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o DownwardAPIVolumeSourcePatchOutput) Items() DownwardAPIVolumeFilePatchArrayOutput {
	return o.ApplyT(func(v DownwardAPIVolumeSourcePatch) []DownwardAPIVolumeFilePatch { return v.Items }).(DownwardAPIVolumeFilePatchArrayOutput)
}

type DownwardAPIVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (DownwardAPIVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownwardAPIVolumeSourcePatch)(nil)).Elem()
}

func (o DownwardAPIVolumeSourcePatchPtrOutput) ToDownwardAPIVolumeSourcePatchPtrOutput() DownwardAPIVolumeSourcePatchPtrOutput {
	return o
}

func (o DownwardAPIVolumeSourcePatchPtrOutput) ToDownwardAPIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) DownwardAPIVolumeSourcePatchPtrOutput {
	return o
}

func (o DownwardAPIVolumeSourcePatchPtrOutput) Elem() DownwardAPIVolumeSourcePatchOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSourcePatch) DownwardAPIVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret DownwardAPIVolumeSourcePatch
		return ret
	}).(DownwardAPIVolumeSourcePatchOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o DownwardAPIVolumeSourcePatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o DownwardAPIVolumeSourcePatchPtrOutput) Items() DownwardAPIVolumeFilePatchArrayOutput {
	return o.ApplyT(func(v *DownwardAPIVolumeSourcePatch) []DownwardAPIVolumeFilePatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(DownwardAPIVolumeFilePatchArrayOutput)
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSource struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit *string `pulumi:"sizeLimit"`
}

// EmptyDirVolumeSourceInput is an input type that accepts EmptyDirVolumeSourceArgs and EmptyDirVolumeSourceOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourceInput` via:
//
//	EmptyDirVolumeSourceArgs{...}
type EmptyDirVolumeSourceInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput
	ToEmptyDirVolumeSourceOutputWithContext(context.Context) EmptyDirVolumeSourceOutput
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSourceArgs struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (EmptyDirVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSource)(nil)).Elem()
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput {
	return i.ToEmptyDirVolumeSourceOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourceOutputWithContext(ctx context.Context) EmptyDirVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourceOutput)
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return i.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourceOutput).ToEmptyDirVolumeSourcePtrOutputWithContext(ctx)
}

// EmptyDirVolumeSourcePtrInput is an input type that accepts EmptyDirVolumeSourceArgs, EmptyDirVolumeSourcePtr and EmptyDirVolumeSourcePtrOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourcePtrInput` via:
//
//	        EmptyDirVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type EmptyDirVolumeSourcePtrInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput
	ToEmptyDirVolumeSourcePtrOutputWithContext(context.Context) EmptyDirVolumeSourcePtrOutput
}

type emptyDirVolumeSourcePtrType EmptyDirVolumeSourceArgs

func EmptyDirVolumeSourcePtr(v *EmptyDirVolumeSourceArgs) EmptyDirVolumeSourcePtrInput {
	return (*emptyDirVolumeSourcePtrType)(v)
}

func (*emptyDirVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSource)(nil)).Elem()
}

func (i *emptyDirVolumeSourcePtrType) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return i.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *emptyDirVolumeSourcePtrType) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourcePtrOutput)
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSourceOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSource)(nil)).Elem()
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput {
	return o
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourceOutputWithContext(ctx context.Context) EmptyDirVolumeSourceOutput {
	return o
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return o.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmptyDirVolumeSource) *EmptyDirVolumeSource {
		return &v
	}).(EmptyDirVolumeSourcePtrOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourceOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSource) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o EmptyDirVolumeSourceOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSource) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type EmptyDirVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSource)(nil)).Elem()
}

func (o EmptyDirVolumeSourcePtrOutput) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePtrOutput) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePtrOutput) Elem() EmptyDirVolumeSourceOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) EmptyDirVolumeSource {
		if v != nil {
			return *v
		}
		var ret EmptyDirVolumeSource
		return ret
	}).(EmptyDirVolumeSourceOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourcePtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o EmptyDirVolumeSourcePtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSourcePatch struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit *string `pulumi:"sizeLimit"`
}

// EmptyDirVolumeSourcePatchInput is an input type that accepts EmptyDirVolumeSourcePatchArgs and EmptyDirVolumeSourcePatchOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourcePatchInput` via:
//
//	EmptyDirVolumeSourcePatchArgs{...}
type EmptyDirVolumeSourcePatchInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourcePatchOutput() EmptyDirVolumeSourcePatchOutput
	ToEmptyDirVolumeSourcePatchOutputWithContext(context.Context) EmptyDirVolumeSourcePatchOutput
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSourcePatchArgs struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (EmptyDirVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSourcePatch)(nil)).Elem()
}

func (i EmptyDirVolumeSourcePatchArgs) ToEmptyDirVolumeSourcePatchOutput() EmptyDirVolumeSourcePatchOutput {
	return i.ToEmptyDirVolumeSourcePatchOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourcePatchArgs) ToEmptyDirVolumeSourcePatchOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourcePatchOutput)
}

func (i EmptyDirVolumeSourcePatchArgs) ToEmptyDirVolumeSourcePatchPtrOutput() EmptyDirVolumeSourcePatchPtrOutput {
	return i.ToEmptyDirVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourcePatchArgs) ToEmptyDirVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourcePatchOutput).ToEmptyDirVolumeSourcePatchPtrOutputWithContext(ctx)
}

// EmptyDirVolumeSourcePatchPtrInput is an input type that accepts EmptyDirVolumeSourcePatchArgs, EmptyDirVolumeSourcePatchPtr and EmptyDirVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourcePatchPtrInput` via:
//
//	        EmptyDirVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type EmptyDirVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourcePatchPtrOutput() EmptyDirVolumeSourcePatchPtrOutput
	ToEmptyDirVolumeSourcePatchPtrOutputWithContext(context.Context) EmptyDirVolumeSourcePatchPtrOutput
}

type emptyDirVolumeSourcePatchPtrType EmptyDirVolumeSourcePatchArgs

func EmptyDirVolumeSourcePatchPtr(v *EmptyDirVolumeSourcePatchArgs) EmptyDirVolumeSourcePatchPtrInput {
	return (*emptyDirVolumeSourcePatchPtrType)(v)
}

func (*emptyDirVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSourcePatch)(nil)).Elem()
}

func (i *emptyDirVolumeSourcePatchPtrType) ToEmptyDirVolumeSourcePatchPtrOutput() EmptyDirVolumeSourcePatchPtrOutput {
	return i.ToEmptyDirVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *emptyDirVolumeSourcePatchPtrType) ToEmptyDirVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourcePatchPtrOutput)
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSourcePatch)(nil)).Elem()
}

func (o EmptyDirVolumeSourcePatchOutput) ToEmptyDirVolumeSourcePatchOutput() EmptyDirVolumeSourcePatchOutput {
	return o
}

func (o EmptyDirVolumeSourcePatchOutput) ToEmptyDirVolumeSourcePatchOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchOutput {
	return o
}

func (o EmptyDirVolumeSourcePatchOutput) ToEmptyDirVolumeSourcePatchPtrOutput() EmptyDirVolumeSourcePatchPtrOutput {
	return o.ToEmptyDirVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o EmptyDirVolumeSourcePatchOutput) ToEmptyDirVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmptyDirVolumeSourcePatch) *EmptyDirVolumeSourcePatch {
		return &v
	}).(EmptyDirVolumeSourcePatchPtrOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourcePatchOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSourcePatch) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o EmptyDirVolumeSourcePatchOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSourcePatch) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type EmptyDirVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSourcePatch)(nil)).Elem()
}

func (o EmptyDirVolumeSourcePatchPtrOutput) ToEmptyDirVolumeSourcePatchPtrOutput() EmptyDirVolumeSourcePatchPtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePatchPtrOutput) ToEmptyDirVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePatchPtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePatchPtrOutput) Elem() EmptyDirVolumeSourcePatchOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSourcePatch) EmptyDirVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret EmptyDirVolumeSourcePatch
		return ret
	}).(EmptyDirVolumeSourcePatchOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourcePatchPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o EmptyDirVolumeSourcePatchPtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddress struct {
	// The Hostname of this endpoint
	Hostname *string `pulumi:"hostname"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	Ip string `pulumi:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName *string `pulumi:"nodeName"`
	// Reference to object providing the endpoint.
	TargetRef *ObjectReference `pulumi:"targetRef"`
}

// EndpointAddressInput is an input type that accepts EndpointAddressArgs and EndpointAddressOutput values.
// You can construct a concrete instance of `EndpointAddressInput` via:
//
//	EndpointAddressArgs{...}
type EndpointAddressInput interface {
	pulumi.Input

	ToEndpointAddressOutput() EndpointAddressOutput
	ToEndpointAddressOutputWithContext(context.Context) EndpointAddressOutput
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddressArgs struct {
	// The Hostname of this endpoint
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Reference to object providing the endpoint.
	TargetRef ObjectReferencePtrInput `pulumi:"targetRef"`
}

func (EndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddress)(nil)).Elem()
}

func (i EndpointAddressArgs) ToEndpointAddressOutput() EndpointAddressOutput {
	return i.ToEndpointAddressOutputWithContext(context.Background())
}

func (i EndpointAddressArgs) ToEndpointAddressOutputWithContext(ctx context.Context) EndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAddressOutput)
}

// EndpointAddressArrayInput is an input type that accepts EndpointAddressArray and EndpointAddressArrayOutput values.
// You can construct a concrete instance of `EndpointAddressArrayInput` via:
//
//	EndpointAddressArray{ EndpointAddressArgs{...} }
type EndpointAddressArrayInput interface {
	pulumi.Input

	ToEndpointAddressArrayOutput() EndpointAddressArrayOutput
	ToEndpointAddressArrayOutputWithContext(context.Context) EndpointAddressArrayOutput
}

type EndpointAddressArray []EndpointAddressInput

func (EndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAddress)(nil)).Elem()
}

func (i EndpointAddressArray) ToEndpointAddressArrayOutput() EndpointAddressArrayOutput {
	return i.ToEndpointAddressArrayOutputWithContext(context.Background())
}

func (i EndpointAddressArray) ToEndpointAddressArrayOutputWithContext(ctx context.Context) EndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAddressArrayOutput)
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddressOutput struct{ *pulumi.OutputState }

func (EndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddress)(nil)).Elem()
}

func (o EndpointAddressOutput) ToEndpointAddressOutput() EndpointAddressOutput {
	return o
}

func (o EndpointAddressOutput) ToEndpointAddressOutputWithContext(ctx context.Context) EndpointAddressOutput {
	return o
}

// The Hostname of this endpoint
func (o EndpointAddressOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAddress) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
func (o EndpointAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
func (o EndpointAddressOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAddress) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Reference to object providing the endpoint.
func (o EndpointAddressOutput) TargetRef() ObjectReferencePtrOutput {
	return o.ApplyT(func(v EndpointAddress) *ObjectReference { return v.TargetRef }).(ObjectReferencePtrOutput)
}

type EndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (EndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAddress)(nil)).Elem()
}

func (o EndpointAddressArrayOutput) ToEndpointAddressArrayOutput() EndpointAddressArrayOutput {
	return o
}

func (o EndpointAddressArrayOutput) ToEndpointAddressArrayOutputWithContext(ctx context.Context) EndpointAddressArrayOutput {
	return o
}

func (o EndpointAddressArrayOutput) Index(i pulumi.IntInput) EndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointAddress {
		return vs[0].([]EndpointAddress)[vs[1].(int)]
	}).(EndpointAddressOutput)
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddressPatch struct {
	// The Hostname of this endpoint
	Hostname *string `pulumi:"hostname"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	Ip *string `pulumi:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName *string `pulumi:"nodeName"`
	// Reference to object providing the endpoint.
	TargetRef *ObjectReferencePatch `pulumi:"targetRef"`
}

// EndpointAddressPatchInput is an input type that accepts EndpointAddressPatchArgs and EndpointAddressPatchOutput values.
// You can construct a concrete instance of `EndpointAddressPatchInput` via:
//
//	EndpointAddressPatchArgs{...}
type EndpointAddressPatchInput interface {
	pulumi.Input

	ToEndpointAddressPatchOutput() EndpointAddressPatchOutput
	ToEndpointAddressPatchOutputWithContext(context.Context) EndpointAddressPatchOutput
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddressPatchArgs struct {
	// The Hostname of this endpoint
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Reference to object providing the endpoint.
	TargetRef ObjectReferencePatchPtrInput `pulumi:"targetRef"`
}

func (EndpointAddressPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddressPatch)(nil)).Elem()
}

func (i EndpointAddressPatchArgs) ToEndpointAddressPatchOutput() EndpointAddressPatchOutput {
	return i.ToEndpointAddressPatchOutputWithContext(context.Background())
}

func (i EndpointAddressPatchArgs) ToEndpointAddressPatchOutputWithContext(ctx context.Context) EndpointAddressPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAddressPatchOutput)
}

// EndpointAddressPatchArrayInput is an input type that accepts EndpointAddressPatchArray and EndpointAddressPatchArrayOutput values.
// You can construct a concrete instance of `EndpointAddressPatchArrayInput` via:
//
//	EndpointAddressPatchArray{ EndpointAddressPatchArgs{...} }
type EndpointAddressPatchArrayInput interface {
	pulumi.Input

	ToEndpointAddressPatchArrayOutput() EndpointAddressPatchArrayOutput
	ToEndpointAddressPatchArrayOutputWithContext(context.Context) EndpointAddressPatchArrayOutput
}

type EndpointAddressPatchArray []EndpointAddressPatchInput

func (EndpointAddressPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAddressPatch)(nil)).Elem()
}

func (i EndpointAddressPatchArray) ToEndpointAddressPatchArrayOutput() EndpointAddressPatchArrayOutput {
	return i.ToEndpointAddressPatchArrayOutputWithContext(context.Background())
}

func (i EndpointAddressPatchArray) ToEndpointAddressPatchArrayOutputWithContext(ctx context.Context) EndpointAddressPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAddressPatchArrayOutput)
}

// EndpointAddress is a tuple that describes single IP address.
type EndpointAddressPatchOutput struct{ *pulumi.OutputState }

func (EndpointAddressPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddressPatch)(nil)).Elem()
}

func (o EndpointAddressPatchOutput) ToEndpointAddressPatchOutput() EndpointAddressPatchOutput {
	return o
}

func (o EndpointAddressPatchOutput) ToEndpointAddressPatchOutputWithContext(ctx context.Context) EndpointAddressPatchOutput {
	return o
}

// The Hostname of this endpoint
func (o EndpointAddressPatchOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAddressPatch) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
func (o EndpointAddressPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAddressPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
func (o EndpointAddressPatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAddressPatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Reference to object providing the endpoint.
func (o EndpointAddressPatchOutput) TargetRef() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v EndpointAddressPatch) *ObjectReferencePatch { return v.TargetRef }).(ObjectReferencePatchPtrOutput)
}

type EndpointAddressPatchArrayOutput struct{ *pulumi.OutputState }

func (EndpointAddressPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAddressPatch)(nil)).Elem()
}

func (o EndpointAddressPatchArrayOutput) ToEndpointAddressPatchArrayOutput() EndpointAddressPatchArrayOutput {
	return o
}

func (o EndpointAddressPatchArrayOutput) ToEndpointAddressPatchArrayOutputWithContext(ctx context.Context) EndpointAddressPatchArrayOutput {
	return o
}

func (o EndpointAddressPatchArrayOutput) Index(i pulumi.IntInput) EndpointAddressPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointAddressPatch {
		return vs[0].([]EndpointAddressPatch)[vs[1].(int)]
	}).(EndpointAddressPatchOutput)
}

// EndpointPort is a tuple that describes a single port.
type EndpointPort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name *string `pulumi:"name"`
	// The port number of the endpoint.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `pulumi:"protocol"`
}

// EndpointPortInput is an input type that accepts EndpointPortArgs and EndpointPortOutput values.
// You can construct a concrete instance of `EndpointPortInput` via:
//
//	EndpointPortArgs{...}
type EndpointPortInput interface {
	pulumi.Input

	ToEndpointPortOutput() EndpointPortOutput
	ToEndpointPortOutputWithContext(context.Context) EndpointPortOutput
}

// EndpointPort is a tuple that describes a single port.
type EndpointPortArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port number of the endpoint.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (EndpointPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (i EndpointPortArgs) ToEndpointPortOutput() EndpointPortOutput {
	return i.ToEndpointPortOutputWithContext(context.Background())
}

func (i EndpointPortArgs) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortOutput)
}

// EndpointPortArrayInput is an input type that accepts EndpointPortArray and EndpointPortArrayOutput values.
// You can construct a concrete instance of `EndpointPortArrayInput` via:
//
//	EndpointPortArray{ EndpointPortArgs{...} }
type EndpointPortArrayInput interface {
	pulumi.Input

	ToEndpointPortArrayOutput() EndpointPortArrayOutput
	ToEndpointPortArrayOutputWithContext(context.Context) EndpointPortArrayOutput
}

type EndpointPortArray []EndpointPortInput

func (EndpointPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (i EndpointPortArray) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return i.ToEndpointPortArrayOutputWithContext(context.Background())
}

func (i EndpointPortArray) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortArrayOutput)
}

// EndpointPort is a tuple that describes a single port.
type EndpointPortOutput struct{ *pulumi.OutputState }

func (EndpointPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPort)(nil)).Elem()
}

func (o EndpointPortOutput) ToEndpointPortOutput() EndpointPortOutput {
	return o
}

func (o EndpointPortOutput) ToEndpointPortOutputWithContext(ctx context.Context) EndpointPortOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (o EndpointPortOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
func (o EndpointPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port number of the endpoint.
func (o EndpointPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointPort) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (o EndpointPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type EndpointPortArrayOutput struct{ *pulumi.OutputState }

func (EndpointPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPort)(nil)).Elem()
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutput() EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) ToEndpointPortArrayOutputWithContext(ctx context.Context) EndpointPortArrayOutput {
	return o
}

func (o EndpointPortArrayOutput) Index(i pulumi.IntInput) EndpointPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPort {
		return vs[0].([]EndpointPort)[vs[1].(int)]
	}).(EndpointPortOutput)
}

// EndpointPort is a tuple that describes a single port.
type EndpointPortPatch struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name *string `pulumi:"name"`
	// The port number of the endpoint.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `pulumi:"protocol"`
}

// EndpointPortPatchInput is an input type that accepts EndpointPortPatchArgs and EndpointPortPatchOutput values.
// You can construct a concrete instance of `EndpointPortPatchInput` via:
//
//	EndpointPortPatchArgs{...}
type EndpointPortPatchInput interface {
	pulumi.Input

	ToEndpointPortPatchOutput() EndpointPortPatchOutput
	ToEndpointPortPatchOutputWithContext(context.Context) EndpointPortPatchOutput
}

// EndpointPort is a tuple that describes a single port.
type EndpointPortPatchArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port number of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (EndpointPortPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPortPatch)(nil)).Elem()
}

func (i EndpointPortPatchArgs) ToEndpointPortPatchOutput() EndpointPortPatchOutput {
	return i.ToEndpointPortPatchOutputWithContext(context.Background())
}

func (i EndpointPortPatchArgs) ToEndpointPortPatchOutputWithContext(ctx context.Context) EndpointPortPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortPatchOutput)
}

// EndpointPortPatchArrayInput is an input type that accepts EndpointPortPatchArray and EndpointPortPatchArrayOutput values.
// You can construct a concrete instance of `EndpointPortPatchArrayInput` via:
//
//	EndpointPortPatchArray{ EndpointPortPatchArgs{...} }
type EndpointPortPatchArrayInput interface {
	pulumi.Input

	ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput
	ToEndpointPortPatchArrayOutputWithContext(context.Context) EndpointPortPatchArrayOutput
}

type EndpointPortPatchArray []EndpointPortPatchInput

func (EndpointPortPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPortPatch)(nil)).Elem()
}

func (i EndpointPortPatchArray) ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput {
	return i.ToEndpointPortPatchArrayOutputWithContext(context.Background())
}

func (i EndpointPortPatchArray) ToEndpointPortPatchArrayOutputWithContext(ctx context.Context) EndpointPortPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPortPatchArrayOutput)
}

// EndpointPort is a tuple that describes a single port.
type EndpointPortPatchOutput struct{ *pulumi.OutputState }

func (EndpointPortPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPortPatch)(nil)).Elem()
}

func (o EndpointPortPatchOutput) ToEndpointPortPatchOutput() EndpointPortPatchOutput {
	return o
}

func (o EndpointPortPatchOutput) ToEndpointPortPatchOutputWithContext(ctx context.Context) EndpointPortPatchOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (o EndpointPortPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
func (o EndpointPortPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port number of the endpoint.
func (o EndpointPortPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (o EndpointPortPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPortPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type EndpointPortPatchArrayOutput struct{ *pulumi.OutputState }

func (EndpointPortPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPortPatch)(nil)).Elem()
}

func (o EndpointPortPatchArrayOutput) ToEndpointPortPatchArrayOutput() EndpointPortPatchArrayOutput {
	return o
}

func (o EndpointPortPatchArrayOutput) ToEndpointPortPatchArrayOutputWithContext(ctx context.Context) EndpointPortPatchArrayOutput {
	return o
}

func (o EndpointPortPatchArrayOutput) Index(i pulumi.IntInput) EndpointPortPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPortPatch {
		return vs[0].([]EndpointPortPatch)[vs[1].(int)]
	}).(EndpointPortPatchOutput)
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubset struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []EndpointAddress `pulumi:"addresses"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []EndpointAddress `pulumi:"notReadyAddresses"`
	// Port numbers available on the related IP addresses.
	Ports []EndpointPort `pulumi:"ports"`
}

// EndpointSubsetInput is an input type that accepts EndpointSubsetArgs and EndpointSubsetOutput values.
// You can construct a concrete instance of `EndpointSubsetInput` via:
//
//	EndpointSubsetArgs{...}
type EndpointSubsetInput interface {
	pulumi.Input

	ToEndpointSubsetOutput() EndpointSubsetOutput
	ToEndpointSubsetOutputWithContext(context.Context) EndpointSubsetOutput
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubsetArgs struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses EndpointAddressArrayInput `pulumi:"addresses"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses EndpointAddressArrayInput `pulumi:"notReadyAddresses"`
	// Port numbers available on the related IP addresses.
	Ports EndpointPortArrayInput `pulumi:"ports"`
}

func (EndpointSubsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSubset)(nil)).Elem()
}

func (i EndpointSubsetArgs) ToEndpointSubsetOutput() EndpointSubsetOutput {
	return i.ToEndpointSubsetOutputWithContext(context.Background())
}

func (i EndpointSubsetArgs) ToEndpointSubsetOutputWithContext(ctx context.Context) EndpointSubsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSubsetOutput)
}

// EndpointSubsetArrayInput is an input type that accepts EndpointSubsetArray and EndpointSubsetArrayOutput values.
// You can construct a concrete instance of `EndpointSubsetArrayInput` via:
//
//	EndpointSubsetArray{ EndpointSubsetArgs{...} }
type EndpointSubsetArrayInput interface {
	pulumi.Input

	ToEndpointSubsetArrayOutput() EndpointSubsetArrayOutput
	ToEndpointSubsetArrayOutputWithContext(context.Context) EndpointSubsetArrayOutput
}

type EndpointSubsetArray []EndpointSubsetInput

func (EndpointSubsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSubset)(nil)).Elem()
}

func (i EndpointSubsetArray) ToEndpointSubsetArrayOutput() EndpointSubsetArrayOutput {
	return i.ToEndpointSubsetArrayOutputWithContext(context.Background())
}

func (i EndpointSubsetArray) ToEndpointSubsetArrayOutputWithContext(ctx context.Context) EndpointSubsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSubsetArrayOutput)
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubsetOutput struct{ *pulumi.OutputState }

func (EndpointSubsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSubset)(nil)).Elem()
}

func (o EndpointSubsetOutput) ToEndpointSubsetOutput() EndpointSubsetOutput {
	return o
}

func (o EndpointSubsetOutput) ToEndpointSubsetOutputWithContext(ctx context.Context) EndpointSubsetOutput {
	return o
}

// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
func (o EndpointSubsetOutput) Addresses() EndpointAddressArrayOutput {
	return o.ApplyT(func(v EndpointSubset) []EndpointAddress { return v.Addresses }).(EndpointAddressArrayOutput)
}

// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
func (o EndpointSubsetOutput) NotReadyAddresses() EndpointAddressArrayOutput {
	return o.ApplyT(func(v EndpointSubset) []EndpointAddress { return v.NotReadyAddresses }).(EndpointAddressArrayOutput)
}

// Port numbers available on the related IP addresses.
func (o EndpointSubsetOutput) Ports() EndpointPortArrayOutput {
	return o.ApplyT(func(v EndpointSubset) []EndpointPort { return v.Ports }).(EndpointPortArrayOutput)
}

type EndpointSubsetArrayOutput struct{ *pulumi.OutputState }

func (EndpointSubsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSubset)(nil)).Elem()
}

func (o EndpointSubsetArrayOutput) ToEndpointSubsetArrayOutput() EndpointSubsetArrayOutput {
	return o
}

func (o EndpointSubsetArrayOutput) ToEndpointSubsetArrayOutputWithContext(ctx context.Context) EndpointSubsetArrayOutput {
	return o
}

func (o EndpointSubsetArrayOutput) Index(i pulumi.IntInput) EndpointSubsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointSubset {
		return vs[0].([]EndpointSubset)[vs[1].(int)]
	}).(EndpointSubsetOutput)
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubsetPatch struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []EndpointAddressPatch `pulumi:"addresses"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []EndpointAddressPatch `pulumi:"notReadyAddresses"`
	// Port numbers available on the related IP addresses.
	Ports []EndpointPortPatch `pulumi:"ports"`
}

// EndpointSubsetPatchInput is an input type that accepts EndpointSubsetPatchArgs and EndpointSubsetPatchOutput values.
// You can construct a concrete instance of `EndpointSubsetPatchInput` via:
//
//	EndpointSubsetPatchArgs{...}
type EndpointSubsetPatchInput interface {
	pulumi.Input

	ToEndpointSubsetPatchOutput() EndpointSubsetPatchOutput
	ToEndpointSubsetPatchOutputWithContext(context.Context) EndpointSubsetPatchOutput
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubsetPatchArgs struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses EndpointAddressPatchArrayInput `pulumi:"addresses"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses EndpointAddressPatchArrayInput `pulumi:"notReadyAddresses"`
	// Port numbers available on the related IP addresses.
	Ports EndpointPortPatchArrayInput `pulumi:"ports"`
}

func (EndpointSubsetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSubsetPatch)(nil)).Elem()
}

func (i EndpointSubsetPatchArgs) ToEndpointSubsetPatchOutput() EndpointSubsetPatchOutput {
	return i.ToEndpointSubsetPatchOutputWithContext(context.Background())
}

func (i EndpointSubsetPatchArgs) ToEndpointSubsetPatchOutputWithContext(ctx context.Context) EndpointSubsetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSubsetPatchOutput)
}

// EndpointSubsetPatchArrayInput is an input type that accepts EndpointSubsetPatchArray and EndpointSubsetPatchArrayOutput values.
// You can construct a concrete instance of `EndpointSubsetPatchArrayInput` via:
//
//	EndpointSubsetPatchArray{ EndpointSubsetPatchArgs{...} }
type EndpointSubsetPatchArrayInput interface {
	pulumi.Input

	ToEndpointSubsetPatchArrayOutput() EndpointSubsetPatchArrayOutput
	ToEndpointSubsetPatchArrayOutputWithContext(context.Context) EndpointSubsetPatchArrayOutput
}

type EndpointSubsetPatchArray []EndpointSubsetPatchInput

func (EndpointSubsetPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSubsetPatch)(nil)).Elem()
}

func (i EndpointSubsetPatchArray) ToEndpointSubsetPatchArrayOutput() EndpointSubsetPatchArrayOutput {
	return i.ToEndpointSubsetPatchArrayOutputWithContext(context.Background())
}

func (i EndpointSubsetPatchArray) ToEndpointSubsetPatchArrayOutputWithContext(ctx context.Context) EndpointSubsetPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSubsetPatchArrayOutput)
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type EndpointSubsetPatchOutput struct{ *pulumi.OutputState }

func (EndpointSubsetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSubsetPatch)(nil)).Elem()
}

func (o EndpointSubsetPatchOutput) ToEndpointSubsetPatchOutput() EndpointSubsetPatchOutput {
	return o
}

func (o EndpointSubsetPatchOutput) ToEndpointSubsetPatchOutputWithContext(ctx context.Context) EndpointSubsetPatchOutput {
	return o
}

// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
func (o EndpointSubsetPatchOutput) Addresses() EndpointAddressPatchArrayOutput {
	return o.ApplyT(func(v EndpointSubsetPatch) []EndpointAddressPatch { return v.Addresses }).(EndpointAddressPatchArrayOutput)
}

// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
func (o EndpointSubsetPatchOutput) NotReadyAddresses() EndpointAddressPatchArrayOutput {
	return o.ApplyT(func(v EndpointSubsetPatch) []EndpointAddressPatch { return v.NotReadyAddresses }).(EndpointAddressPatchArrayOutput)
}

// Port numbers available on the related IP addresses.
func (o EndpointSubsetPatchOutput) Ports() EndpointPortPatchArrayOutput {
	return o.ApplyT(func(v EndpointSubsetPatch) []EndpointPortPatch { return v.Ports }).(EndpointPortPatchArrayOutput)
}

type EndpointSubsetPatchArrayOutput struct{ *pulumi.OutputState }

func (EndpointSubsetPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointSubsetPatch)(nil)).Elem()
}

func (o EndpointSubsetPatchArrayOutput) ToEndpointSubsetPatchArrayOutput() EndpointSubsetPatchArrayOutput {
	return o
}

func (o EndpointSubsetPatchArrayOutput) ToEndpointSubsetPatchArrayOutputWithContext(ctx context.Context) EndpointSubsetPatchArrayOutput {
	return o
}

func (o EndpointSubsetPatchArrayOutput) Index(i pulumi.IntInput) EndpointSubsetPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointSubsetPatch {
		return vs[0].([]EndpointSubsetPatch)[vs[1].(int)]
	}).(EndpointSubsetPatchOutput)
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []EndpointSubset `pulumi:"subsets"`
}

// EndpointsTypeInput is an input type that accepts EndpointsTypeArgs and EndpointsTypeOutput values.
// You can construct a concrete instance of `EndpointsTypeInput` via:
//
//	EndpointsTypeArgs{...}
type EndpointsTypeInput interface {
	pulumi.Input

	ToEndpointsTypeOutput() EndpointsTypeOutput
	ToEndpointsTypeOutputWithContext(context.Context) EndpointsTypeOutput
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets EndpointSubsetArrayInput `pulumi:"subsets"`
}

func (EndpointsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsType)(nil)).Elem()
}

func (i EndpointsTypeArgs) ToEndpointsTypeOutput() EndpointsTypeOutput {
	return i.ToEndpointsTypeOutputWithContext(context.Background())
}

func (i EndpointsTypeArgs) ToEndpointsTypeOutputWithContext(ctx context.Context) EndpointsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsTypeOutput)
}

// EndpointsTypeArrayInput is an input type that accepts EndpointsTypeArray and EndpointsTypeArrayOutput values.
// You can construct a concrete instance of `EndpointsTypeArrayInput` via:
//
//	EndpointsTypeArray{ EndpointsTypeArgs{...} }
type EndpointsTypeArrayInput interface {
	pulumi.Input

	ToEndpointsTypeArrayOutput() EndpointsTypeArrayOutput
	ToEndpointsTypeArrayOutputWithContext(context.Context) EndpointsTypeArrayOutput
}

type EndpointsTypeArray []EndpointsTypeInput

func (EndpointsTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsType)(nil)).Elem()
}

func (i EndpointsTypeArray) ToEndpointsTypeArrayOutput() EndpointsTypeArrayOutput {
	return i.ToEndpointsTypeArrayOutputWithContext(context.Background())
}

func (i EndpointsTypeArray) ToEndpointsTypeArrayOutputWithContext(ctx context.Context) EndpointsTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsTypeArrayOutput)
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsTypeOutput struct{ *pulumi.OutputState }

func (EndpointsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsType)(nil)).Elem()
}

func (o EndpointsTypeOutput) ToEndpointsTypeOutput() EndpointsTypeOutput {
	return o
}

func (o EndpointsTypeOutput) ToEndpointsTypeOutputWithContext(ctx context.Context) EndpointsTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointsTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointsTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EndpointsTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EndpointsType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
func (o EndpointsTypeOutput) Subsets() EndpointSubsetArrayOutput {
	return o.ApplyT(func(v EndpointsType) []EndpointSubset { return v.Subsets }).(EndpointSubsetArrayOutput)
}

type EndpointsTypeArrayOutput struct{ *pulumi.OutputState }

func (EndpointsTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsType)(nil)).Elem()
}

func (o EndpointsTypeArrayOutput) ToEndpointsTypeArrayOutput() EndpointsTypeArrayOutput {
	return o
}

func (o EndpointsTypeArrayOutput) ToEndpointsTypeArrayOutputWithContext(ctx context.Context) EndpointsTypeArrayOutput {
	return o
}

func (o EndpointsTypeArrayOutput) Index(i pulumi.IntInput) EndpointsTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsType {
		return vs[0].([]EndpointsType)[vs[1].(int)]
	}).(EndpointsTypeOutput)
}

// EndpointsList is a list of endpoints.
type EndpointsListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of endpoints.
	Items []EndpointsType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EndpointsListTypeInput is an input type that accepts EndpointsListTypeArgs and EndpointsListTypeOutput values.
// You can construct a concrete instance of `EndpointsListTypeInput` via:
//
//	EndpointsListTypeArgs{...}
type EndpointsListTypeInput interface {
	pulumi.Input

	ToEndpointsListTypeOutput() EndpointsListTypeOutput
	ToEndpointsListTypeOutputWithContext(context.Context) EndpointsListTypeOutput
}

// EndpointsList is a list of endpoints.
type EndpointsListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of endpoints.
	Items EndpointsTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EndpointsListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsListType)(nil)).Elem()
}

func (i EndpointsListTypeArgs) ToEndpointsListTypeOutput() EndpointsListTypeOutput {
	return i.ToEndpointsListTypeOutputWithContext(context.Background())
}

func (i EndpointsListTypeArgs) ToEndpointsListTypeOutputWithContext(ctx context.Context) EndpointsListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsListTypeOutput)
}

// EndpointsList is a list of endpoints.
type EndpointsListTypeOutput struct{ *pulumi.OutputState }

func (EndpointsListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsListType)(nil)).Elem()
}

func (o EndpointsListTypeOutput) ToEndpointsListTypeOutput() EndpointsListTypeOutput {
	return o
}

func (o EndpointsListTypeOutput) ToEndpointsListTypeOutputWithContext(ctx context.Context) EndpointsListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointsListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of endpoints.
func (o EndpointsListTypeOutput) Items() EndpointsTypeArrayOutput {
	return o.ApplyT(func(v EndpointsListType) []EndpointsType { return v.Items }).(EndpointsTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointsListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointsListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EndpointsListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []EndpointSubsetPatch `pulumi:"subsets"`
}

// EndpointsPatchTypeInput is an input type that accepts EndpointsPatchTypeArgs and EndpointsPatchTypeOutput values.
// You can construct a concrete instance of `EndpointsPatchTypeInput` via:
//
//	EndpointsPatchTypeArgs{...}
type EndpointsPatchTypeInput interface {
	pulumi.Input

	ToEndpointsPatchTypeOutput() EndpointsPatchTypeOutput
	ToEndpointsPatchTypeOutputWithContext(context.Context) EndpointsPatchTypeOutput
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets EndpointSubsetPatchArrayInput `pulumi:"subsets"`
}

func (EndpointsPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsPatchType)(nil)).Elem()
}

func (i EndpointsPatchTypeArgs) ToEndpointsPatchTypeOutput() EndpointsPatchTypeOutput {
	return i.ToEndpointsPatchTypeOutputWithContext(context.Background())
}

func (i EndpointsPatchTypeArgs) ToEndpointsPatchTypeOutputWithContext(ctx context.Context) EndpointsPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsPatchTypeOutput)
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type EndpointsPatchTypeOutput struct{ *pulumi.OutputState }

func (EndpointsPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsPatchType)(nil)).Elem()
}

func (o EndpointsPatchTypeOutput) ToEndpointsPatchTypeOutput() EndpointsPatchTypeOutput {
	return o
}

func (o EndpointsPatchTypeOutput) ToEndpointsPatchTypeOutputWithContext(ctx context.Context) EndpointsPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EndpointsPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EndpointsPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EndpointsPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EndpointsPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
func (o EndpointsPatchTypeOutput) Subsets() EndpointSubsetPatchArrayOutput {
	return o.ApplyT(func(v EndpointsPatchType) []EndpointSubsetPatch { return v.Subsets }).(EndpointSubsetPatchArrayOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSource struct {
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef *SecretEnvSource `pulumi:"secretRef"`
}

// EnvFromSourceInput is an input type that accepts EnvFromSourceArgs and EnvFromSourceOutput values.
// You can construct a concrete instance of `EnvFromSourceInput` via:
//
//	EnvFromSourceArgs{...}
type EnvFromSourceInput interface {
	pulumi.Input

	ToEnvFromSourceOutput() EnvFromSourceOutput
	ToEnvFromSourceOutputWithContext(context.Context) EnvFromSourceOutput
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceArgs struct {
	// The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourcePtrInput `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The Secret to select from
	SecretRef SecretEnvSourcePtrInput `pulumi:"secretRef"`
}

func (EnvFromSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return i.ToEnvFromSourceOutputWithContext(context.Background())
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceOutput)
}

// EnvFromSourceArrayInput is an input type that accepts EnvFromSourceArray and EnvFromSourceArrayOutput values.
// You can construct a concrete instance of `EnvFromSourceArrayInput` via:
//
//	EnvFromSourceArray{ EnvFromSourceArgs{...} }
type EnvFromSourceArrayInput interface {
	pulumi.Input

	ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput
	ToEnvFromSourceArrayOutputWithContext(context.Context) EnvFromSourceArrayOutput
}

type EnvFromSourceArray []EnvFromSourceInput

func (EnvFromSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return i.ToEnvFromSourceArrayOutputWithContext(context.Background())
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceArrayOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceOutput struct{ *pulumi.OutputState }

func (EnvFromSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return o
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return o
}

// The ConfigMap to select from
func (o EnvFromSourceOutput) ConfigMapRef() ConfigMapEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *ConfigMapEnvSource { return v.ConfigMapRef }).(ConfigMapEnvSourcePtrOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvFromSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The Secret to select from
func (o EnvFromSourceOutput) SecretRef() SecretEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *SecretEnvSource { return v.SecretRef }).(SecretEnvSourcePtrOutput)
}

type EnvFromSourceArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) Index(i pulumi.IntInput) EnvFromSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSource {
		return vs[0].([]EnvFromSource)[vs[1].(int)]
	}).(EnvFromSourceOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourcePatch struct {
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSourcePatch `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef *SecretEnvSourcePatch `pulumi:"secretRef"`
}

// EnvFromSourcePatchInput is an input type that accepts EnvFromSourcePatchArgs and EnvFromSourcePatchOutput values.
// You can construct a concrete instance of `EnvFromSourcePatchInput` via:
//
//	EnvFromSourcePatchArgs{...}
type EnvFromSourcePatchInput interface {
	pulumi.Input

	ToEnvFromSourcePatchOutput() EnvFromSourcePatchOutput
	ToEnvFromSourcePatchOutputWithContext(context.Context) EnvFromSourcePatchOutput
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourcePatchArgs struct {
	// The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourcePatchPtrInput `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The Secret to select from
	SecretRef SecretEnvSourcePatchPtrInput `pulumi:"secretRef"`
}

func (EnvFromSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSourcePatch)(nil)).Elem()
}

func (i EnvFromSourcePatchArgs) ToEnvFromSourcePatchOutput() EnvFromSourcePatchOutput {
	return i.ToEnvFromSourcePatchOutputWithContext(context.Background())
}

func (i EnvFromSourcePatchArgs) ToEnvFromSourcePatchOutputWithContext(ctx context.Context) EnvFromSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourcePatchOutput)
}

// EnvFromSourcePatchArrayInput is an input type that accepts EnvFromSourcePatchArray and EnvFromSourcePatchArrayOutput values.
// You can construct a concrete instance of `EnvFromSourcePatchArrayInput` via:
//
//	EnvFromSourcePatchArray{ EnvFromSourcePatchArgs{...} }
type EnvFromSourcePatchArrayInput interface {
	pulumi.Input

	ToEnvFromSourcePatchArrayOutput() EnvFromSourcePatchArrayOutput
	ToEnvFromSourcePatchArrayOutputWithContext(context.Context) EnvFromSourcePatchArrayOutput
}

type EnvFromSourcePatchArray []EnvFromSourcePatchInput

func (EnvFromSourcePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSourcePatch)(nil)).Elem()
}

func (i EnvFromSourcePatchArray) ToEnvFromSourcePatchArrayOutput() EnvFromSourcePatchArrayOutput {
	return i.ToEnvFromSourcePatchArrayOutputWithContext(context.Background())
}

func (i EnvFromSourcePatchArray) ToEnvFromSourcePatchArrayOutputWithContext(ctx context.Context) EnvFromSourcePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourcePatchArrayOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourcePatchOutput struct{ *pulumi.OutputState }

func (EnvFromSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSourcePatch)(nil)).Elem()
}

func (o EnvFromSourcePatchOutput) ToEnvFromSourcePatchOutput() EnvFromSourcePatchOutput {
	return o
}

func (o EnvFromSourcePatchOutput) ToEnvFromSourcePatchOutputWithContext(ctx context.Context) EnvFromSourcePatchOutput {
	return o
}

// The ConfigMap to select from
func (o EnvFromSourcePatchOutput) ConfigMapRef() ConfigMapEnvSourcePatchPtrOutput {
	return o.ApplyT(func(v EnvFromSourcePatch) *ConfigMapEnvSourcePatch { return v.ConfigMapRef }).(ConfigMapEnvSourcePatchPtrOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourcePatchOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvFromSourcePatch) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The Secret to select from
func (o EnvFromSourcePatchOutput) SecretRef() SecretEnvSourcePatchPtrOutput {
	return o.ApplyT(func(v EnvFromSourcePatch) *SecretEnvSourcePatch { return v.SecretRef }).(SecretEnvSourcePatchPtrOutput)
}

type EnvFromSourcePatchArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourcePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSourcePatch)(nil)).Elem()
}

func (o EnvFromSourcePatchArrayOutput) ToEnvFromSourcePatchArrayOutput() EnvFromSourcePatchArrayOutput {
	return o
}

func (o EnvFromSourcePatchArrayOutput) ToEnvFromSourcePatchArrayOutputWithContext(ctx context.Context) EnvFromSourcePatchArrayOutput {
	return o
}

func (o EnvFromSourcePatchArrayOutput) Index(i pulumi.IntInput) EnvFromSourcePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSourcePatch {
		return vs[0].([]EnvFromSourcePatch)[vs[1].(int)]
	}).(EnvFromSourcePatchOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `pulumi:"valueFrom"`
}

// EnvVarInput is an input type that accepts EnvVarArgs and EnvVarOutput values.
// You can construct a concrete instance of `EnvVarInput` via:
//
//	EnvVarArgs{...}
type EnvVarInput interface {
	pulumi.Input

	ToEnvVarOutput() EnvVarOutput
	ToEnvVarOutputWithContext(context.Context) EnvVarOutput
}

// EnvVar represents an environment variable present in a Container.
type EnvVarArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourcePtrInput `pulumi:"valueFrom"`
}

func (EnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (i EnvVarArgs) ToEnvVarOutput() EnvVarOutput {
	return i.ToEnvVarOutputWithContext(context.Background())
}

func (i EnvVarArgs) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarOutput)
}

// EnvVarArrayInput is an input type that accepts EnvVarArray and EnvVarArrayOutput values.
// You can construct a concrete instance of `EnvVarArrayInput` via:
//
//	EnvVarArray{ EnvVarArgs{...} }
type EnvVarArrayInput interface {
	pulumi.Input

	ToEnvVarArrayOutput() EnvVarArrayOutput
	ToEnvVarArrayOutputWithContext(context.Context) EnvVarArrayOutput
}

type EnvVarArray []EnvVarInput

func (EnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (i EnvVarArray) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return i.ToEnvVarArrayOutputWithContext(context.Background())
}

func (i EnvVarArray) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarOutput struct{ *pulumi.OutputState }

func (EnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (o EnvVarOutput) ToEnvVarOutput() EnvVarOutput {
	return o
}

func (o EnvVarOutput) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o EnvVarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVar) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o EnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o EnvVarOutput) ValueFrom() EnvVarSourcePtrOutput {
	return o.ApplyT(func(v EnvVar) *EnvVarSource { return v.ValueFrom }).(EnvVarSourcePtrOutput)
}

type EnvVarArrayOutput struct{ *pulumi.OutputState }

func (EnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) Index(i pulumi.IntInput) EnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVar {
		return vs[0].([]EnvVar)[vs[1].(int)]
	}).(EnvVarOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarPatch struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name *string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSourcePatch `pulumi:"valueFrom"`
}

// EnvVarPatchInput is an input type that accepts EnvVarPatchArgs and EnvVarPatchOutput values.
// You can construct a concrete instance of `EnvVarPatchInput` via:
//
//	EnvVarPatchArgs{...}
type EnvVarPatchInput interface {
	pulumi.Input

	ToEnvVarPatchOutput() EnvVarPatchOutput
	ToEnvVarPatchOutputWithContext(context.Context) EnvVarPatchOutput
}

// EnvVar represents an environment variable present in a Container.
type EnvVarPatchArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourcePatchPtrInput `pulumi:"valueFrom"`
}

func (EnvVarPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarPatch)(nil)).Elem()
}

func (i EnvVarPatchArgs) ToEnvVarPatchOutput() EnvVarPatchOutput {
	return i.ToEnvVarPatchOutputWithContext(context.Background())
}

func (i EnvVarPatchArgs) ToEnvVarPatchOutputWithContext(ctx context.Context) EnvVarPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarPatchOutput)
}

// EnvVarPatchArrayInput is an input type that accepts EnvVarPatchArray and EnvVarPatchArrayOutput values.
// You can construct a concrete instance of `EnvVarPatchArrayInput` via:
//
//	EnvVarPatchArray{ EnvVarPatchArgs{...} }
type EnvVarPatchArrayInput interface {
	pulumi.Input

	ToEnvVarPatchArrayOutput() EnvVarPatchArrayOutput
	ToEnvVarPatchArrayOutputWithContext(context.Context) EnvVarPatchArrayOutput
}

type EnvVarPatchArray []EnvVarPatchInput

func (EnvVarPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVarPatch)(nil)).Elem()
}

func (i EnvVarPatchArray) ToEnvVarPatchArrayOutput() EnvVarPatchArrayOutput {
	return i.ToEnvVarPatchArrayOutputWithContext(context.Background())
}

func (i EnvVarPatchArray) ToEnvVarPatchArrayOutputWithContext(ctx context.Context) EnvVarPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarPatchArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarPatchOutput struct{ *pulumi.OutputState }

func (EnvVarPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarPatch)(nil)).Elem()
}

func (o EnvVarPatchOutput) ToEnvVarPatchOutput() EnvVarPatchOutput {
	return o
}

func (o EnvVarPatchOutput) ToEnvVarPatchOutputWithContext(ctx context.Context) EnvVarPatchOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o EnvVarPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVarPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o EnvVarPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVarPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o EnvVarPatchOutput) ValueFrom() EnvVarSourcePatchPtrOutput {
	return o.ApplyT(func(v EnvVarPatch) *EnvVarSourcePatch { return v.ValueFrom }).(EnvVarSourcePatchPtrOutput)
}

type EnvVarPatchArrayOutput struct{ *pulumi.OutputState }

func (EnvVarPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVarPatch)(nil)).Elem()
}

func (o EnvVarPatchArrayOutput) ToEnvVarPatchArrayOutput() EnvVarPatchArrayOutput {
	return o
}

func (o EnvVarPatchArrayOutput) ToEnvVarPatchArrayOutputWithContext(ctx context.Context) EnvVarPatchArrayOutput {
	return o
}

func (o EnvVarPatchArrayOutput) Index(i pulumi.IntInput) EnvVarPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVarPatch {
		return vs[0].([]EnvVarPatch)[vs[1].(int)]
	}).(EnvVarPatchOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelector `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *ObjectFieldSelector `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *ResourceFieldSelector `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *SecretKeySelector `pulumi:"secretKeyRef"`
}

// EnvVarSourceInput is an input type that accepts EnvVarSourceArgs and EnvVarSourceOutput values.
// You can construct a concrete instance of `EnvVarSourceInput` via:
//
//	EnvVarSourceArgs{...}
type EnvVarSourceInput interface {
	pulumi.Input

	ToEnvVarSourceOutput() EnvVarSourceOutput
	ToEnvVarSourceOutputWithContext(context.Context) EnvVarSourceOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef ConfigMapKeySelectorPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef ObjectFieldSelectorPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef ResourceFieldSelectorPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef SecretKeySelectorPtrInput `pulumi:"secretKeyRef"`
}

func (EnvVarSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return i.ToEnvVarSourceOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput)
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput).ToEnvVarSourcePtrOutputWithContext(ctx)
}

// EnvVarSourcePtrInput is an input type that accepts EnvVarSourceArgs, EnvVarSourcePtr and EnvVarSourcePtrOutput values.
// You can construct a concrete instance of `EnvVarSourcePtrInput` via:
//
//	        EnvVarSourceArgs{...}
//
//	or:
//
//	        nil
type EnvVarSourcePtrInput interface {
	pulumi.Input

	ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput
	ToEnvVarSourcePtrOutputWithContext(context.Context) EnvVarSourcePtrOutput
}

type envVarSourcePtrType EnvVarSourceArgs

func EnvVarSourcePtr(v *EnvVarSourceArgs) EnvVarSourcePtrInput {
	return (*envVarSourcePtrType)(v)
}

func (*envVarSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceOutput struct{ *pulumi.OutputState }

func (EnvVarSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnvVarSource) *EnvVarSource {
		return &v
	}).(EnvVarSourcePtrOutput)
}

// Selects a key of a ConfigMap.
func (o EnvVarSourceOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *ConfigMapKeySelector { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o EnvVarSourceOutput) FieldRef() ObjectFieldSelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *ObjectFieldSelector { return v.FieldRef }).(ObjectFieldSelectorPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o EnvVarSourceOutput) ResourceFieldRef() ResourceFieldSelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *ResourceFieldSelector { return v.ResourceFieldRef }).(ResourceFieldSelectorPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o EnvVarSourceOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *SecretKeySelector { return v.SecretKeyRef }).(SecretKeySelectorPtrOutput)
}

type EnvVarSourcePtrOutput struct{ *pulumi.OutputState }

func (EnvVarSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) Elem() EnvVarSourceOutput {
	return o.ApplyT(func(v *EnvVarSource) EnvVarSource {
		if v != nil {
			return *v
		}
		var ret EnvVarSource
		return ret
	}).(EnvVarSourceOutput)
}

// Selects a key of a ConfigMap.
func (o EnvVarSourcePtrOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *ConfigMapKeySelector {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(ConfigMapKeySelectorPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o EnvVarSourcePtrOutput) FieldRef() ObjectFieldSelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *ObjectFieldSelector {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(ObjectFieldSelectorPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o EnvVarSourcePtrOutput) ResourceFieldRef() ResourceFieldSelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *ResourceFieldSelector {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(ResourceFieldSelectorPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o EnvVarSourcePtrOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *SecretKeySelector {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(SecretKeySelectorPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourcePatch struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelectorPatch `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *ObjectFieldSelectorPatch `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *ResourceFieldSelectorPatch `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *SecretKeySelectorPatch `pulumi:"secretKeyRef"`
}

// EnvVarSourcePatchInput is an input type that accepts EnvVarSourcePatchArgs and EnvVarSourcePatchOutput values.
// You can construct a concrete instance of `EnvVarSourcePatchInput` via:
//
//	EnvVarSourcePatchArgs{...}
type EnvVarSourcePatchInput interface {
	pulumi.Input

	ToEnvVarSourcePatchOutput() EnvVarSourcePatchOutput
	ToEnvVarSourcePatchOutputWithContext(context.Context) EnvVarSourcePatchOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourcePatchArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef ConfigMapKeySelectorPatchPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef ObjectFieldSelectorPatchPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef ResourceFieldSelectorPatchPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef SecretKeySelectorPatchPtrInput `pulumi:"secretKeyRef"`
}

func (EnvVarSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSourcePatch)(nil)).Elem()
}

func (i EnvVarSourcePatchArgs) ToEnvVarSourcePatchOutput() EnvVarSourcePatchOutput {
	return i.ToEnvVarSourcePatchOutputWithContext(context.Background())
}

func (i EnvVarSourcePatchArgs) ToEnvVarSourcePatchOutputWithContext(ctx context.Context) EnvVarSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePatchOutput)
}

func (i EnvVarSourcePatchArgs) ToEnvVarSourcePatchPtrOutput() EnvVarSourcePatchPtrOutput {
	return i.ToEnvVarSourcePatchPtrOutputWithContext(context.Background())
}

func (i EnvVarSourcePatchArgs) ToEnvVarSourcePatchPtrOutputWithContext(ctx context.Context) EnvVarSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePatchOutput).ToEnvVarSourcePatchPtrOutputWithContext(ctx)
}

// EnvVarSourcePatchPtrInput is an input type that accepts EnvVarSourcePatchArgs, EnvVarSourcePatchPtr and EnvVarSourcePatchPtrOutput values.
// You can construct a concrete instance of `EnvVarSourcePatchPtrInput` via:
//
//	        EnvVarSourcePatchArgs{...}
//
//	or:
//
//	        nil
type EnvVarSourcePatchPtrInput interface {
	pulumi.Input

	ToEnvVarSourcePatchPtrOutput() EnvVarSourcePatchPtrOutput
	ToEnvVarSourcePatchPtrOutputWithContext(context.Context) EnvVarSourcePatchPtrOutput
}

type envVarSourcePatchPtrType EnvVarSourcePatchArgs

func EnvVarSourcePatchPtr(v *EnvVarSourcePatchArgs) EnvVarSourcePatchPtrInput {
	return (*envVarSourcePatchPtrType)(v)
}

func (*envVarSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSourcePatch)(nil)).Elem()
}

func (i *envVarSourcePatchPtrType) ToEnvVarSourcePatchPtrOutput() EnvVarSourcePatchPtrOutput {
	return i.ToEnvVarSourcePatchPtrOutputWithContext(context.Background())
}

func (i *envVarSourcePatchPtrType) ToEnvVarSourcePatchPtrOutputWithContext(ctx context.Context) EnvVarSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePatchPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourcePatchOutput struct{ *pulumi.OutputState }

func (EnvVarSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSourcePatch)(nil)).Elem()
}

func (o EnvVarSourcePatchOutput) ToEnvVarSourcePatchOutput() EnvVarSourcePatchOutput {
	return o
}

func (o EnvVarSourcePatchOutput) ToEnvVarSourcePatchOutputWithContext(ctx context.Context) EnvVarSourcePatchOutput {
	return o
}

func (o EnvVarSourcePatchOutput) ToEnvVarSourcePatchPtrOutput() EnvVarSourcePatchPtrOutput {
	return o.ToEnvVarSourcePatchPtrOutputWithContext(context.Background())
}

func (o EnvVarSourcePatchOutput) ToEnvVarSourcePatchPtrOutputWithContext(ctx context.Context) EnvVarSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnvVarSourcePatch) *EnvVarSourcePatch {
		return &v
	}).(EnvVarSourcePatchPtrOutput)
}

// Selects a key of a ConfigMap.
func (o EnvVarSourcePatchOutput) ConfigMapKeyRef() ConfigMapKeySelectorPatchPtrOutput {
	return o.ApplyT(func(v EnvVarSourcePatch) *ConfigMapKeySelectorPatch { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorPatchPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o EnvVarSourcePatchOutput) FieldRef() ObjectFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v EnvVarSourcePatch) *ObjectFieldSelectorPatch { return v.FieldRef }).(ObjectFieldSelectorPatchPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o EnvVarSourcePatchOutput) ResourceFieldRef() ResourceFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v EnvVarSourcePatch) *ResourceFieldSelectorPatch { return v.ResourceFieldRef }).(ResourceFieldSelectorPatchPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o EnvVarSourcePatchOutput) SecretKeyRef() SecretKeySelectorPatchPtrOutput {
	return o.ApplyT(func(v EnvVarSourcePatch) *SecretKeySelectorPatch { return v.SecretKeyRef }).(SecretKeySelectorPatchPtrOutput)
}

type EnvVarSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (EnvVarSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSourcePatch)(nil)).Elem()
}

func (o EnvVarSourcePatchPtrOutput) ToEnvVarSourcePatchPtrOutput() EnvVarSourcePatchPtrOutput {
	return o
}

func (o EnvVarSourcePatchPtrOutput) ToEnvVarSourcePatchPtrOutputWithContext(ctx context.Context) EnvVarSourcePatchPtrOutput {
	return o
}

func (o EnvVarSourcePatchPtrOutput) Elem() EnvVarSourcePatchOutput {
	return o.ApplyT(func(v *EnvVarSourcePatch) EnvVarSourcePatch {
		if v != nil {
			return *v
		}
		var ret EnvVarSourcePatch
		return ret
	}).(EnvVarSourcePatchOutput)
}

// Selects a key of a ConfigMap.
func (o EnvVarSourcePatchPtrOutput) ConfigMapKeyRef() ConfigMapKeySelectorPatchPtrOutput {
	return o.ApplyT(func(v *EnvVarSourcePatch) *ConfigMapKeySelectorPatch {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(ConfigMapKeySelectorPatchPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o EnvVarSourcePatchPtrOutput) FieldRef() ObjectFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v *EnvVarSourcePatch) *ObjectFieldSelectorPatch {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(ObjectFieldSelectorPatchPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o EnvVarSourcePatchPtrOutput) ResourceFieldRef() ResourceFieldSelectorPatchPtrOutput {
	return o.ApplyT(func(v *EnvVarSourcePatch) *ResourceFieldSelectorPatch {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(ResourceFieldSelectorPatchPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o EnvVarSourcePatchPtrOutput) SecretKeyRef() SecretKeySelectorPatchPtrOutput {
	return o.ApplyT(func(v *EnvVarSourcePatch) *SecretKeySelectorPatch {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(SecretKeySelectorPatchPtrOutput)
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainer struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []EnvVar `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSource `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Lifecycle is not allowed for ephemeral containers.
	Lifecycle *Lifecycle `pulumi:"lifecycle"`
	// Probes are not allowed for ephemeral containers.
	LivenessProbe *Probe `pulumi:"livenessProbe"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name string `pulumi:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports []ContainerPort `pulumi:"ports"`
	// Probes are not allowed for ephemeral containers.
	ReadinessProbe *Probe `pulumi:"readinessProbe"`
	// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
	Resources *ResourceRequirements `pulumi:"resources"`
	// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
	SecurityContext *SecurityContext `pulumi:"securityContext"`
	// Probes are not allowed for ephemeral containers.
	StartupProbe *Probe `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName *string `pulumi:"targetContainerName"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []VolumeDevice `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// EphemeralContainerInput is an input type that accepts EphemeralContainerArgs and EphemeralContainerOutput values.
// You can construct a concrete instance of `EphemeralContainerInput` via:
//
//	EphemeralContainerArgs{...}
type EphemeralContainerInput interface {
	pulumi.Input

	ToEphemeralContainerOutput() EphemeralContainerOutput
	ToEphemeralContainerOutputWithContext(context.Context) EphemeralContainerOutput
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainerArgs struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env EnvVarArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourceArrayInput `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Lifecycle is not allowed for ephemeral containers.
	Lifecycle LifecyclePtrInput `pulumi:"lifecycle"`
	// Probes are not allowed for ephemeral containers.
	LivenessProbe ProbePtrInput `pulumi:"livenessProbe"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name pulumi.StringInput `pulumi:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// Probes are not allowed for ephemeral containers.
	ReadinessProbe ProbePtrInput `pulumi:"readinessProbe"`
	// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
	Resources ResourceRequirementsPtrInput `pulumi:"resources"`
	// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
	SecurityContext SecurityContextPtrInput `pulumi:"securityContext"`
	// Probes are not allowed for ephemeral containers.
	StartupProbe ProbePtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName pulumi.StringPtrInput `pulumi:"targetContainerName"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices VolumeDeviceArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (EphemeralContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainer)(nil)).Elem()
}

func (i EphemeralContainerArgs) ToEphemeralContainerOutput() EphemeralContainerOutput {
	return i.ToEphemeralContainerOutputWithContext(context.Background())
}

func (i EphemeralContainerArgs) ToEphemeralContainerOutputWithContext(ctx context.Context) EphemeralContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainerOutput)
}

// EphemeralContainerArrayInput is an input type that accepts EphemeralContainerArray and EphemeralContainerArrayOutput values.
// You can construct a concrete instance of `EphemeralContainerArrayInput` via:
//
//	EphemeralContainerArray{ EphemeralContainerArgs{...} }
type EphemeralContainerArrayInput interface {
	pulumi.Input

	ToEphemeralContainerArrayOutput() EphemeralContainerArrayOutput
	ToEphemeralContainerArrayOutputWithContext(context.Context) EphemeralContainerArrayOutput
}

type EphemeralContainerArray []EphemeralContainerInput

func (EphemeralContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EphemeralContainer)(nil)).Elem()
}

func (i EphemeralContainerArray) ToEphemeralContainerArrayOutput() EphemeralContainerArrayOutput {
	return i.ToEphemeralContainerArrayOutputWithContext(context.Background())
}

func (i EphemeralContainerArray) ToEphemeralContainerArrayOutputWithContext(ctx context.Context) EphemeralContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainerArrayOutput)
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainerOutput struct{ *pulumi.OutputState }

func (EphemeralContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainer)(nil)).Elem()
}

func (o EphemeralContainerOutput) ToEphemeralContainerOutput() EphemeralContainerOutput {
	return o
}

func (o EphemeralContainerOutput) ToEphemeralContainerOutputWithContext(ctx context.Context) EphemeralContainerOutput {
	return o
}

// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o EphemeralContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o EphemeralContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o EphemeralContainerOutput) Env() EnvVarArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []EnvVar { return v.Env }).(EnvVarArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o EphemeralContainerOutput) EnvFrom() EnvFromSourceArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []EnvFromSource { return v.EnvFrom }).(EnvFromSourceArrayOutput)
}

// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
func (o EphemeralContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o EphemeralContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Lifecycle is not allowed for ephemeral containers.
func (o EphemeralContainerOutput) Lifecycle() LifecyclePtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *Lifecycle { return v.Lifecycle }).(LifecyclePtrOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerOutput) LivenessProbe() ProbePtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *Probe { return v.LivenessProbe }).(ProbePtrOutput)
}

// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
func (o EphemeralContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EphemeralContainer) string { return v.Name }).(pulumi.StringOutput)
}

// Ports are not allowed for ephemeral containers.
func (o EphemeralContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerOutput) ReadinessProbe() ProbePtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *Probe { return v.ReadinessProbe }).(ProbePtrOutput)
}

// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
func (o EphemeralContainerOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *ResourceRequirements { return v.Resources }).(ResourceRequirementsPtrOutput)
}

// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
func (o EphemeralContainerOutput) SecurityContext() SecurityContextPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *SecurityContext { return v.SecurityContext }).(SecurityContextPtrOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerOutput) StartupProbe() ProbePtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *Probe { return v.StartupProbe }).(ProbePtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o EphemeralContainerOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o EphemeralContainerOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
//
// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
func (o EphemeralContainerOutput) TargetContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.TargetContainerName }).(pulumi.StringPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o EphemeralContainerOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o EphemeralContainerOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o EphemeralContainerOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container.
func (o EphemeralContainerOutput) VolumeDevices() VolumeDeviceArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []VolumeDevice { return v.VolumeDevices }).(VolumeDeviceArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
func (o EphemeralContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v EphemeralContainer) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o EphemeralContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type EphemeralContainerArrayOutput struct{ *pulumi.OutputState }

func (EphemeralContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EphemeralContainer)(nil)).Elem()
}

func (o EphemeralContainerArrayOutput) ToEphemeralContainerArrayOutput() EphemeralContainerArrayOutput {
	return o
}

func (o EphemeralContainerArrayOutput) ToEphemeralContainerArrayOutputWithContext(ctx context.Context) EphemeralContainerArrayOutput {
	return o
}

func (o EphemeralContainerArrayOutput) Index(i pulumi.IntInput) EphemeralContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EphemeralContainer {
		return vs[0].([]EphemeralContainer)[vs[1].(int)]
	}).(EphemeralContainerOutput)
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainerPatch struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []EnvVarPatch `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSourcePatch `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Lifecycle is not allowed for ephemeral containers.
	Lifecycle *LifecyclePatch `pulumi:"lifecycle"`
	// Probes are not allowed for ephemeral containers.
	LivenessProbe *ProbePatch `pulumi:"livenessProbe"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name *string `pulumi:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports []ContainerPortPatch `pulumi:"ports"`
	// Probes are not allowed for ephemeral containers.
	ReadinessProbe *ProbePatch `pulumi:"readinessProbe"`
	// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
	Resources *ResourceRequirementsPatch `pulumi:"resources"`
	// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
	SecurityContext *SecurityContextPatch `pulumi:"securityContext"`
	// Probes are not allowed for ephemeral containers.
	StartupProbe *ProbePatch `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName *string `pulumi:"targetContainerName"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []VolumeDevicePatch `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts []VolumeMountPatch `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// EphemeralContainerPatchInput is an input type that accepts EphemeralContainerPatchArgs and EphemeralContainerPatchOutput values.
// You can construct a concrete instance of `EphemeralContainerPatchInput` via:
//
//	EphemeralContainerPatchArgs{...}
type EphemeralContainerPatchInput interface {
	pulumi.Input

	ToEphemeralContainerPatchOutput() EphemeralContainerPatchOutput
	ToEphemeralContainerPatchOutputWithContext(context.Context) EphemeralContainerPatchOutput
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainerPatchArgs struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env EnvVarPatchArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourcePatchArrayInput `pulumi:"envFrom"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Lifecycle is not allowed for ephemeral containers.
	Lifecycle LifecyclePatchPtrInput `pulumi:"lifecycle"`
	// Probes are not allowed for ephemeral containers.
	LivenessProbe ProbePatchPtrInput `pulumi:"livenessProbe"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports ContainerPortPatchArrayInput `pulumi:"ports"`
	// Probes are not allowed for ephemeral containers.
	ReadinessProbe ProbePatchPtrInput `pulumi:"readinessProbe"`
	// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
	Resources ResourceRequirementsPatchPtrInput `pulumi:"resources"`
	// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
	SecurityContext SecurityContextPatchPtrInput `pulumi:"securityContext"`
	// Probes are not allowed for ephemeral containers.
	StartupProbe ProbePatchPtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName pulumi.StringPtrInput `pulumi:"targetContainerName"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices VolumeDevicePatchArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts VolumeMountPatchArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (EphemeralContainerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainerPatch)(nil)).Elem()
}

func (i EphemeralContainerPatchArgs) ToEphemeralContainerPatchOutput() EphemeralContainerPatchOutput {
	return i.ToEphemeralContainerPatchOutputWithContext(context.Background())
}

func (i EphemeralContainerPatchArgs) ToEphemeralContainerPatchOutputWithContext(ctx context.Context) EphemeralContainerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainerPatchOutput)
}

// EphemeralContainerPatchArrayInput is an input type that accepts EphemeralContainerPatchArray and EphemeralContainerPatchArrayOutput values.
// You can construct a concrete instance of `EphemeralContainerPatchArrayInput` via:
//
//	EphemeralContainerPatchArray{ EphemeralContainerPatchArgs{...} }
type EphemeralContainerPatchArrayInput interface {
	pulumi.Input

	ToEphemeralContainerPatchArrayOutput() EphemeralContainerPatchArrayOutput
	ToEphemeralContainerPatchArrayOutputWithContext(context.Context) EphemeralContainerPatchArrayOutput
}

type EphemeralContainerPatchArray []EphemeralContainerPatchInput

func (EphemeralContainerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EphemeralContainerPatch)(nil)).Elem()
}

func (i EphemeralContainerPatchArray) ToEphemeralContainerPatchArrayOutput() EphemeralContainerPatchArrayOutput {
	return i.ToEphemeralContainerPatchArrayOutputWithContext(context.Background())
}

func (i EphemeralContainerPatchArray) ToEphemeralContainerPatchArrayOutputWithContext(ctx context.Context) EphemeralContainerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralContainerPatchArrayOutput)
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type EphemeralContainerPatchOutput struct{ *pulumi.OutputState }

func (EphemeralContainerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralContainerPatch)(nil)).Elem()
}

func (o EphemeralContainerPatchOutput) ToEphemeralContainerPatchOutput() EphemeralContainerPatchOutput {
	return o
}

func (o EphemeralContainerPatchOutput) ToEphemeralContainerPatchOutputWithContext(ctx context.Context) EphemeralContainerPatchOutput {
	return o
}

// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o EphemeralContainerPatchOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o EphemeralContainerPatchOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o EphemeralContainerPatchOutput) Env() EnvVarPatchArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []EnvVarPatch { return v.Env }).(EnvVarPatchArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o EphemeralContainerPatchOutput) EnvFrom() EnvFromSourcePatchArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []EnvFromSourcePatch { return v.EnvFrom }).(EnvFromSourcePatchArrayOutput)
}

// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
func (o EphemeralContainerPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o EphemeralContainerPatchOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Lifecycle is not allowed for ephemeral containers.
func (o EphemeralContainerPatchOutput) Lifecycle() LifecyclePatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *LifecyclePatch { return v.Lifecycle }).(LifecyclePatchPtrOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerPatchOutput) LivenessProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *ProbePatch { return v.LivenessProbe }).(ProbePatchPtrOutput)
}

// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
func (o EphemeralContainerPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Ports are not allowed for ephemeral containers.
func (o EphemeralContainerPatchOutput) Ports() ContainerPortPatchArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []ContainerPortPatch { return v.Ports }).(ContainerPortPatchArrayOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerPatchOutput) ReadinessProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *ProbePatch { return v.ReadinessProbe }).(ProbePatchPtrOutput)
}

// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
func (o EphemeralContainerPatchOutput) Resources() ResourceRequirementsPatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *ResourceRequirementsPatch { return v.Resources }).(ResourceRequirementsPatchPtrOutput)
}

// Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
func (o EphemeralContainerPatchOutput) SecurityContext() SecurityContextPatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *SecurityContextPatch { return v.SecurityContext }).(SecurityContextPatchPtrOutput)
}

// Probes are not allowed for ephemeral containers.
func (o EphemeralContainerPatchOutput) StartupProbe() ProbePatchPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *ProbePatch { return v.StartupProbe }).(ProbePatchPtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o EphemeralContainerPatchOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o EphemeralContainerPatchOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
//
// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
func (o EphemeralContainerPatchOutput) TargetContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.TargetContainerName }).(pulumi.StringPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o EphemeralContainerPatchOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o EphemeralContainerPatchOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o EphemeralContainerPatchOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container.
func (o EphemeralContainerPatchOutput) VolumeDevices() VolumeDevicePatchArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []VolumeDevicePatch { return v.VolumeDevices }).(VolumeDevicePatchArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
func (o EphemeralContainerPatchOutput) VolumeMounts() VolumeMountPatchArrayOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) []VolumeMountPatch { return v.VolumeMounts }).(VolumeMountPatchArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o EphemeralContainerPatchOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EphemeralContainerPatch) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type EphemeralContainerPatchArrayOutput struct{ *pulumi.OutputState }

func (EphemeralContainerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EphemeralContainerPatch)(nil)).Elem()
}

func (o EphemeralContainerPatchArrayOutput) ToEphemeralContainerPatchArrayOutput() EphemeralContainerPatchArrayOutput {
	return o
}

func (o EphemeralContainerPatchArrayOutput) ToEphemeralContainerPatchArrayOutputWithContext(ctx context.Context) EphemeralContainerPatchArrayOutput {
	return o
}

func (o EphemeralContainerPatchArrayOutput) Index(i pulumi.IntInput) EphemeralContainerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EphemeralContainerPatch {
		return vs[0].([]EphemeralContainerPatch)[vs[1].(int)]
	}).(EphemeralContainerPatchOutput)
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSource struct {
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//
	// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//
	// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//
	// Required, must not be nil.
	VolumeClaimTemplate *PersistentVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// EphemeralVolumeSourceInput is an input type that accepts EphemeralVolumeSourceArgs and EphemeralVolumeSourceOutput values.
// You can construct a concrete instance of `EphemeralVolumeSourceInput` via:
//
//	EphemeralVolumeSourceArgs{...}
type EphemeralVolumeSourceInput interface {
	pulumi.Input

	ToEphemeralVolumeSourceOutput() EphemeralVolumeSourceOutput
	ToEphemeralVolumeSourceOutputWithContext(context.Context) EphemeralVolumeSourceOutput
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSourceArgs struct {
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//
	// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//
	// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//
	// Required, must not be nil.
	VolumeClaimTemplate PersistentVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (EphemeralVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralVolumeSource)(nil)).Elem()
}

func (i EphemeralVolumeSourceArgs) ToEphemeralVolumeSourceOutput() EphemeralVolumeSourceOutput {
	return i.ToEphemeralVolumeSourceOutputWithContext(context.Background())
}

func (i EphemeralVolumeSourceArgs) ToEphemeralVolumeSourceOutputWithContext(ctx context.Context) EphemeralVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourceOutput)
}

func (i EphemeralVolumeSourceArgs) ToEphemeralVolumeSourcePtrOutput() EphemeralVolumeSourcePtrOutput {
	return i.ToEphemeralVolumeSourcePtrOutputWithContext(context.Background())
}

func (i EphemeralVolumeSourceArgs) ToEphemeralVolumeSourcePtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourceOutput).ToEphemeralVolumeSourcePtrOutputWithContext(ctx)
}

// EphemeralVolumeSourcePtrInput is an input type that accepts EphemeralVolumeSourceArgs, EphemeralVolumeSourcePtr and EphemeralVolumeSourcePtrOutput values.
// You can construct a concrete instance of `EphemeralVolumeSourcePtrInput` via:
//
//	        EphemeralVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type EphemeralVolumeSourcePtrInput interface {
	pulumi.Input

	ToEphemeralVolumeSourcePtrOutput() EphemeralVolumeSourcePtrOutput
	ToEphemeralVolumeSourcePtrOutputWithContext(context.Context) EphemeralVolumeSourcePtrOutput
}

type ephemeralVolumeSourcePtrType EphemeralVolumeSourceArgs

func EphemeralVolumeSourcePtr(v *EphemeralVolumeSourceArgs) EphemeralVolumeSourcePtrInput {
	return (*ephemeralVolumeSourcePtrType)(v)
}

func (*ephemeralVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralVolumeSource)(nil)).Elem()
}

func (i *ephemeralVolumeSourcePtrType) ToEphemeralVolumeSourcePtrOutput() EphemeralVolumeSourcePtrOutput {
	return i.ToEphemeralVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *ephemeralVolumeSourcePtrType) ToEphemeralVolumeSourcePtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourcePtrOutput)
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSourceOutput struct{ *pulumi.OutputState }

func (EphemeralVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralVolumeSource)(nil)).Elem()
}

func (o EphemeralVolumeSourceOutput) ToEphemeralVolumeSourceOutput() EphemeralVolumeSourceOutput {
	return o
}

func (o EphemeralVolumeSourceOutput) ToEphemeralVolumeSourceOutputWithContext(ctx context.Context) EphemeralVolumeSourceOutput {
	return o
}

func (o EphemeralVolumeSourceOutput) ToEphemeralVolumeSourcePtrOutput() EphemeralVolumeSourcePtrOutput {
	return o.ToEphemeralVolumeSourcePtrOutputWithContext(context.Background())
}

func (o EphemeralVolumeSourceOutput) ToEphemeralVolumeSourcePtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EphemeralVolumeSource) *EphemeralVolumeSource {
		return &v
	}).(EphemeralVolumeSourcePtrOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o EphemeralVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//
// Required, must not be nil.
func (o EphemeralVolumeSourceOutput) VolumeClaimTemplate() PersistentVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v EphemeralVolumeSource) *PersistentVolumeClaimTemplate { return v.VolumeClaimTemplate }).(PersistentVolumeClaimTemplatePtrOutput)
}

type EphemeralVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (EphemeralVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralVolumeSource)(nil)).Elem()
}

func (o EphemeralVolumeSourcePtrOutput) ToEphemeralVolumeSourcePtrOutput() EphemeralVolumeSourcePtrOutput {
	return o
}

func (o EphemeralVolumeSourcePtrOutput) ToEphemeralVolumeSourcePtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePtrOutput {
	return o
}

func (o EphemeralVolumeSourcePtrOutput) Elem() EphemeralVolumeSourceOutput {
	return o.ApplyT(func(v *EphemeralVolumeSource) EphemeralVolumeSource {
		if v != nil {
			return *v
		}
		var ret EphemeralVolumeSource
		return ret
	}).(EphemeralVolumeSourceOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o EphemeralVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EphemeralVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//
// Required, must not be nil.
func (o EphemeralVolumeSourcePtrOutput) VolumeClaimTemplate() PersistentVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *EphemeralVolumeSource) *PersistentVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(PersistentVolumeClaimTemplatePtrOutput)
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSourcePatch struct {
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//
	// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//
	// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//
	// Required, must not be nil.
	VolumeClaimTemplate *PersistentVolumeClaimTemplatePatch `pulumi:"volumeClaimTemplate"`
}

// EphemeralVolumeSourcePatchInput is an input type that accepts EphemeralVolumeSourcePatchArgs and EphemeralVolumeSourcePatchOutput values.
// You can construct a concrete instance of `EphemeralVolumeSourcePatchInput` via:
//
//	EphemeralVolumeSourcePatchArgs{...}
type EphemeralVolumeSourcePatchInput interface {
	pulumi.Input

	ToEphemeralVolumeSourcePatchOutput() EphemeralVolumeSourcePatchOutput
	ToEphemeralVolumeSourcePatchOutputWithContext(context.Context) EphemeralVolumeSourcePatchOutput
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSourcePatchArgs struct {
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//
	// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//
	// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//
	// Required, must not be nil.
	VolumeClaimTemplate PersistentVolumeClaimTemplatePatchPtrInput `pulumi:"volumeClaimTemplate"`
}

func (EphemeralVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralVolumeSourcePatch)(nil)).Elem()
}

func (i EphemeralVolumeSourcePatchArgs) ToEphemeralVolumeSourcePatchOutput() EphemeralVolumeSourcePatchOutput {
	return i.ToEphemeralVolumeSourcePatchOutputWithContext(context.Background())
}

func (i EphemeralVolumeSourcePatchArgs) ToEphemeralVolumeSourcePatchOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourcePatchOutput)
}

func (i EphemeralVolumeSourcePatchArgs) ToEphemeralVolumeSourcePatchPtrOutput() EphemeralVolumeSourcePatchPtrOutput {
	return i.ToEphemeralVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i EphemeralVolumeSourcePatchArgs) ToEphemeralVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourcePatchOutput).ToEphemeralVolumeSourcePatchPtrOutputWithContext(ctx)
}

// EphemeralVolumeSourcePatchPtrInput is an input type that accepts EphemeralVolumeSourcePatchArgs, EphemeralVolumeSourcePatchPtr and EphemeralVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `EphemeralVolumeSourcePatchPtrInput` via:
//
//	        EphemeralVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type EphemeralVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToEphemeralVolumeSourcePatchPtrOutput() EphemeralVolumeSourcePatchPtrOutput
	ToEphemeralVolumeSourcePatchPtrOutputWithContext(context.Context) EphemeralVolumeSourcePatchPtrOutput
}

type ephemeralVolumeSourcePatchPtrType EphemeralVolumeSourcePatchArgs

func EphemeralVolumeSourcePatchPtr(v *EphemeralVolumeSourcePatchArgs) EphemeralVolumeSourcePatchPtrInput {
	return (*ephemeralVolumeSourcePatchPtrType)(v)
}

func (*ephemeralVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralVolumeSourcePatch)(nil)).Elem()
}

func (i *ephemeralVolumeSourcePatchPtrType) ToEphemeralVolumeSourcePatchPtrOutput() EphemeralVolumeSourcePatchPtrOutput {
	return i.ToEphemeralVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *ephemeralVolumeSourcePatchPtrType) ToEphemeralVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralVolumeSourcePatchPtrOutput)
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type EphemeralVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (EphemeralVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralVolumeSourcePatch)(nil)).Elem()
}

func (o EphemeralVolumeSourcePatchOutput) ToEphemeralVolumeSourcePatchOutput() EphemeralVolumeSourcePatchOutput {
	return o
}

func (o EphemeralVolumeSourcePatchOutput) ToEphemeralVolumeSourcePatchOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchOutput {
	return o
}

func (o EphemeralVolumeSourcePatchOutput) ToEphemeralVolumeSourcePatchPtrOutput() EphemeralVolumeSourcePatchPtrOutput {
	return o.ToEphemeralVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o EphemeralVolumeSourcePatchOutput) ToEphemeralVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EphemeralVolumeSourcePatch) *EphemeralVolumeSourcePatch {
		return &v
	}).(EphemeralVolumeSourcePatchPtrOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o EphemeralVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//
// Required, must not be nil.
func (o EphemeralVolumeSourcePatchOutput) VolumeClaimTemplate() PersistentVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v EphemeralVolumeSourcePatch) *PersistentVolumeClaimTemplatePatch { return v.VolumeClaimTemplate }).(PersistentVolumeClaimTemplatePatchPtrOutput)
}

type EphemeralVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (EphemeralVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralVolumeSourcePatch)(nil)).Elem()
}

func (o EphemeralVolumeSourcePatchPtrOutput) ToEphemeralVolumeSourcePatchPtrOutput() EphemeralVolumeSourcePatchPtrOutput {
	return o
}

func (o EphemeralVolumeSourcePatchPtrOutput) ToEphemeralVolumeSourcePatchPtrOutputWithContext(ctx context.Context) EphemeralVolumeSourcePatchPtrOutput {
	return o
}

func (o EphemeralVolumeSourcePatchPtrOutput) Elem() EphemeralVolumeSourcePatchOutput {
	return o.ApplyT(func(v *EphemeralVolumeSourcePatch) EphemeralVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret EphemeralVolumeSourcePatch
		return ret
	}).(EphemeralVolumeSourcePatchOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o EphemeralVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EphemeralVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//
// Required, must not be nil.
func (o EphemeralVolumeSourcePatchPtrOutput) VolumeClaimTemplate() PersistentVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v *EphemeralVolumeSourcePatch) *PersistentVolumeClaimTemplatePatch {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(PersistentVolumeClaimTemplatePatchPtrOutput)
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventType struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count *int `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime *string `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject ObjectReference `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMeta `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related *ObjectReference `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeries `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source *EventSource `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `pulumi:"type"`
}

// EventTypeInput is an input type that accepts EventTypeArgs and EventTypeOutput values.
// You can construct a concrete instance of `EventTypeInput` via:
//
//	EventTypeArgs{...}
type EventTypeInput interface {
	pulumi.Input

	ToEventTypeOutput() EventTypeOutput
	ToEventTypeOutputWithContext(context.Context) EventTypeOutput
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventTypeArgs struct {
	// What action was taken/failed regarding to the Regarding object.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp pulumi.StringPtrInput `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject ObjectReferenceInput `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp pulumi.StringPtrInput `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaInput `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related ObjectReferencePtrInput `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent pulumi.StringPtrInput `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringPtrInput `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesPtrInput `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source EventSourcePtrInput `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventType)(nil)).Elem()
}

func (i EventTypeArgs) ToEventTypeOutput() EventTypeOutput {
	return i.ToEventTypeOutputWithContext(context.Background())
}

func (i EventTypeArgs) ToEventTypeOutputWithContext(ctx context.Context) EventTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeOutput)
}

// EventTypeArrayInput is an input type that accepts EventTypeArray and EventTypeArrayOutput values.
// You can construct a concrete instance of `EventTypeArrayInput` via:
//
//	EventTypeArray{ EventTypeArgs{...} }
type EventTypeArrayInput interface {
	pulumi.Input

	ToEventTypeArrayOutput() EventTypeArrayOutput
	ToEventTypeArrayOutputWithContext(context.Context) EventTypeArrayOutput
}

type EventTypeArray []EventTypeInput

func (EventTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventType)(nil)).Elem()
}

func (i EventTypeArray) ToEventTypeArrayOutput() EventTypeArrayOutput {
	return i.ToEventTypeArrayOutputWithContext(context.Background())
}

func (i EventTypeArray) ToEventTypeArrayOutputWithContext(ctx context.Context) EventTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeArrayOutput)
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventTypeOutput struct{ *pulumi.OutputState }

func (EventTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventType)(nil)).Elem()
}

func (o EventTypeOutput) ToEventTypeOutput() EventTypeOutput {
	return o
}

func (o EventTypeOutput) ToEventTypeOutputWithContext(ctx context.Context) EventTypeOutput {
	return o
}

// What action was taken/failed regarding to the Regarding object.
func (o EventTypeOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The number of times this event has occurred.
func (o EventTypeOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventType) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Time when this Event was first observed.
func (o EventTypeOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
func (o EventTypeOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// The object that this event is about.
func (o EventTypeOutput) InvolvedObject() ObjectReferenceOutput {
	return o.ApplyT(func(v EventType) ObjectReference { return v.InvolvedObject }).(ObjectReferenceOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The time at which the most recent occurrence of this event was recorded.
func (o EventTypeOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// A human-readable description of the status of this operation.
func (o EventTypeOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v EventType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
func (o EventTypeOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Optional secondary object for more complex actions.
func (o EventTypeOutput) Related() ObjectReferencePtrOutput {
	return o.ApplyT(func(v EventType) *ObjectReference { return v.Related }).(ObjectReferencePtrOutput)
}

// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
func (o EventTypeOutput) ReportingComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.ReportingComponent }).(pulumi.StringPtrOutput)
}

// ID of the controller instance, e.g. `kubelet-xyzf`.
func (o EventTypeOutput) ReportingInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.ReportingInstance }).(pulumi.StringPtrOutput)
}

// Data about the Event series this event represents or nil if it's a singleton Event.
func (o EventTypeOutput) Series() EventSeriesPtrOutput {
	return o.ApplyT(func(v EventType) *EventSeries { return v.Series }).(EventSeriesPtrOutput)
}

// The component reporting this event. Should be a short machine understandable string.
func (o EventTypeOutput) Source() EventSourcePtrOutput {
	return o.ApplyT(func(v EventType) *EventSource { return v.Source }).(EventSourcePtrOutput)
}

// Type of this event (Normal, Warning), new types could be added in the future
func (o EventTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EventTypeArrayOutput struct{ *pulumi.OutputState }

func (EventTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventType)(nil)).Elem()
}

func (o EventTypeArrayOutput) ToEventTypeArrayOutput() EventTypeArrayOutput {
	return o
}

func (o EventTypeArrayOutput) ToEventTypeArrayOutputWithContext(ctx context.Context) EventTypeArrayOutput {
	return o
}

func (o EventTypeArrayOutput) Index(i pulumi.IntInput) EventTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventType {
		return vs[0].([]EventType)[vs[1].(int)]
	}).(EventTypeOutput)
}

// EventList is a list of events.
type EventListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of events
	Items []EventType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EventListTypeInput is an input type that accepts EventListTypeArgs and EventListTypeOutput values.
// You can construct a concrete instance of `EventListTypeInput` via:
//
//	EventListTypeArgs{...}
type EventListTypeInput interface {
	pulumi.Input

	ToEventListTypeOutput() EventListTypeOutput
	ToEventListTypeOutputWithContext(context.Context) EventListTypeOutput
}

// EventList is a list of events.
type EventListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of events
	Items EventTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EventListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventListType)(nil)).Elem()
}

func (i EventListTypeArgs) ToEventListTypeOutput() EventListTypeOutput {
	return i.ToEventListTypeOutputWithContext(context.Background())
}

func (i EventListTypeArgs) ToEventListTypeOutputWithContext(ctx context.Context) EventListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventListTypeOutput)
}

// EventList is a list of events.
type EventListTypeOutput struct{ *pulumi.OutputState }

func (EventListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventListType)(nil)).Elem()
}

func (o EventListTypeOutput) ToEventListTypeOutput() EventListTypeOutput {
	return o
}

func (o EventListTypeOutput) ToEventListTypeOutputWithContext(ctx context.Context) EventListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of events
func (o EventListTypeOutput) Items() EventTypeArrayOutput {
	return o.ApplyT(func(v EventListType) []EventType { return v.Items }).(EventTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EventListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventPatchType struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count *int `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime *string `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject *ObjectReferencePatch `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related *ObjectReferencePatch `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *EventSeriesPatch `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source *EventSourcePatch `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `pulumi:"type"`
}

// EventPatchTypeInput is an input type that accepts EventPatchTypeArgs and EventPatchTypeOutput values.
// You can construct a concrete instance of `EventPatchTypeInput` via:
//
//	EventPatchTypeArgs{...}
type EventPatchTypeInput interface {
	pulumi.Input

	ToEventPatchTypeOutput() EventPatchTypeOutput
	ToEventPatchTypeOutputWithContext(context.Context) EventPatchTypeOutput
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventPatchTypeArgs struct {
	// What action was taken/failed regarding to the Regarding object.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The number of times this event has occurred.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Time when this Event was first observed.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp pulumi.StringPtrInput `pulumi:"firstTimestamp"`
	// The object that this event is about.
	InvolvedObject ObjectReferencePatchPtrInput `pulumi:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp pulumi.StringPtrInput `pulumi:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Optional secondary object for more complex actions.
	Related ObjectReferencePatchPtrInput `pulumi:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent pulumi.StringPtrInput `pulumi:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance pulumi.StringPtrInput `pulumi:"reportingInstance"`
	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series EventSeriesPatchPtrInput `pulumi:"series"`
	// The component reporting this event. Should be a short machine understandable string.
	Source EventSourcePatchPtrInput `pulumi:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPatchType)(nil)).Elem()
}

func (i EventPatchTypeArgs) ToEventPatchTypeOutput() EventPatchTypeOutput {
	return i.ToEventPatchTypeOutputWithContext(context.Background())
}

func (i EventPatchTypeArgs) ToEventPatchTypeOutputWithContext(ctx context.Context) EventPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPatchTypeOutput)
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventPatchTypeOutput struct{ *pulumi.OutputState }

func (EventPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPatchType)(nil)).Elem()
}

func (o EventPatchTypeOutput) ToEventPatchTypeOutput() EventPatchTypeOutput {
	return o
}

func (o EventPatchTypeOutput) ToEventPatchTypeOutputWithContext(ctx context.Context) EventPatchTypeOutput {
	return o
}

// What action was taken/failed regarding to the Regarding object.
func (o EventPatchTypeOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The number of times this event has occurred.
func (o EventPatchTypeOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventPatchType) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Time when this Event was first observed.
func (o EventPatchTypeOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
func (o EventPatchTypeOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// The object that this event is about.
func (o EventPatchTypeOutput) InvolvedObject() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v EventPatchType) *ObjectReferencePatch { return v.InvolvedObject }).(ObjectReferencePatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The time at which the most recent occurrence of this event was recorded.
func (o EventPatchTypeOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// A human-readable description of the status of this operation.
func (o EventPatchTypeOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EventPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
func (o EventPatchTypeOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Optional secondary object for more complex actions.
func (o EventPatchTypeOutput) Related() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v EventPatchType) *ObjectReferencePatch { return v.Related }).(ObjectReferencePatchPtrOutput)
}

// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
func (o EventPatchTypeOutput) ReportingComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.ReportingComponent }).(pulumi.StringPtrOutput)
}

// ID of the controller instance, e.g. `kubelet-xyzf`.
func (o EventPatchTypeOutput) ReportingInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.ReportingInstance }).(pulumi.StringPtrOutput)
}

// Data about the Event series this event represents or nil if it's a singleton Event.
func (o EventPatchTypeOutput) Series() EventSeriesPatchPtrOutput {
	return o.ApplyT(func(v EventPatchType) *EventSeriesPatch { return v.Series }).(EventSeriesPatchPtrOutput)
}

// The component reporting this event. Should be a short machine understandable string.
func (o EventPatchTypeOutput) Source() EventSourcePatchPtrOutput {
	return o.ApplyT(func(v EventPatchType) *EventSourcePatch { return v.Source }).(EventSourcePatchPtrOutput)
}

// Type of this event (Normal, Warning), new types could be added in the future
func (o EventPatchTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventPatchType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeries struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int `pulumi:"count"`
	// Time of the last occurrence observed
	LastObservedTime *string `pulumi:"lastObservedTime"`
	// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
	State *string `pulumi:"state"`
}

// EventSeriesInput is an input type that accepts EventSeriesArgs and EventSeriesOutput values.
// You can construct a concrete instance of `EventSeriesInput` via:
//
//	EventSeriesArgs{...}
type EventSeriesInput interface {
	pulumi.Input

	ToEventSeriesOutput() EventSeriesOutput
	ToEventSeriesOutputWithContext(context.Context) EventSeriesOutput
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeriesArgs struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Time of the last occurrence observed
	LastObservedTime pulumi.StringPtrInput `pulumi:"lastObservedTime"`
	// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (EventSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSeries)(nil)).Elem()
}

func (i EventSeriesArgs) ToEventSeriesOutput() EventSeriesOutput {
	return i.ToEventSeriesOutputWithContext(context.Background())
}

func (i EventSeriesArgs) ToEventSeriesOutputWithContext(ctx context.Context) EventSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesOutput)
}

func (i EventSeriesArgs) ToEventSeriesPtrOutput() EventSeriesPtrOutput {
	return i.ToEventSeriesPtrOutputWithContext(context.Background())
}

func (i EventSeriesArgs) ToEventSeriesPtrOutputWithContext(ctx context.Context) EventSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesOutput).ToEventSeriesPtrOutputWithContext(ctx)
}

// EventSeriesPtrInput is an input type that accepts EventSeriesArgs, EventSeriesPtr and EventSeriesPtrOutput values.
// You can construct a concrete instance of `EventSeriesPtrInput` via:
//
//	        EventSeriesArgs{...}
//
//	or:
//
//	        nil
type EventSeriesPtrInput interface {
	pulumi.Input

	ToEventSeriesPtrOutput() EventSeriesPtrOutput
	ToEventSeriesPtrOutputWithContext(context.Context) EventSeriesPtrOutput
}

type eventSeriesPtrType EventSeriesArgs

func EventSeriesPtr(v *EventSeriesArgs) EventSeriesPtrInput {
	return (*eventSeriesPtrType)(v)
}

func (*eventSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSeries)(nil)).Elem()
}

func (i *eventSeriesPtrType) ToEventSeriesPtrOutput() EventSeriesPtrOutput {
	return i.ToEventSeriesPtrOutputWithContext(context.Background())
}

func (i *eventSeriesPtrType) ToEventSeriesPtrOutputWithContext(ctx context.Context) EventSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesPtrOutput)
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeriesOutput struct{ *pulumi.OutputState }

func (EventSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSeries)(nil)).Elem()
}

func (o EventSeriesOutput) ToEventSeriesOutput() EventSeriesOutput {
	return o
}

func (o EventSeriesOutput) ToEventSeriesOutputWithContext(ctx context.Context) EventSeriesOutput {
	return o
}

func (o EventSeriesOutput) ToEventSeriesPtrOutput() EventSeriesPtrOutput {
	return o.ToEventSeriesPtrOutputWithContext(context.Background())
}

func (o EventSeriesOutput) ToEventSeriesPtrOutputWithContext(ctx context.Context) EventSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSeries) *EventSeries {
		return &v
	}).(EventSeriesPtrOutput)
}

// Number of occurrences in this series up to the last heartbeat time
func (o EventSeriesOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSeries) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Time of the last occurrence observed
func (o EventSeriesOutput) LastObservedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSeries) *string { return v.LastObservedTime }).(pulumi.StringPtrOutput)
}

// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
func (o EventSeriesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSeries) *string { return v.State }).(pulumi.StringPtrOutput)
}

type EventSeriesPtrOutput struct{ *pulumi.OutputState }

func (EventSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSeries)(nil)).Elem()
}

func (o EventSeriesPtrOutput) ToEventSeriesPtrOutput() EventSeriesPtrOutput {
	return o
}

func (o EventSeriesPtrOutput) ToEventSeriesPtrOutputWithContext(ctx context.Context) EventSeriesPtrOutput {
	return o
}

func (o EventSeriesPtrOutput) Elem() EventSeriesOutput {
	return o.ApplyT(func(v *EventSeries) EventSeries {
		if v != nil {
			return *v
		}
		var ret EventSeries
		return ret
	}).(EventSeriesOutput)
}

// Number of occurrences in this series up to the last heartbeat time
func (o EventSeriesPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSeries) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Time of the last occurrence observed
func (o EventSeriesPtrOutput) LastObservedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSeries) *string {
		if v == nil {
			return nil
		}
		return v.LastObservedTime
	}).(pulumi.StringPtrOutput)
}

// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
func (o EventSeriesPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSeries) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeriesPatch struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int `pulumi:"count"`
	// Time of the last occurrence observed
	LastObservedTime *string `pulumi:"lastObservedTime"`
	// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
	State *string `pulumi:"state"`
}

// EventSeriesPatchInput is an input type that accepts EventSeriesPatchArgs and EventSeriesPatchOutput values.
// You can construct a concrete instance of `EventSeriesPatchInput` via:
//
//	EventSeriesPatchArgs{...}
type EventSeriesPatchInput interface {
	pulumi.Input

	ToEventSeriesPatchOutput() EventSeriesPatchOutput
	ToEventSeriesPatchOutputWithContext(context.Context) EventSeriesPatchOutput
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeriesPatchArgs struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Time of the last occurrence observed
	LastObservedTime pulumi.StringPtrInput `pulumi:"lastObservedTime"`
	// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (EventSeriesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSeriesPatch)(nil)).Elem()
}

func (i EventSeriesPatchArgs) ToEventSeriesPatchOutput() EventSeriesPatchOutput {
	return i.ToEventSeriesPatchOutputWithContext(context.Background())
}

func (i EventSeriesPatchArgs) ToEventSeriesPatchOutputWithContext(ctx context.Context) EventSeriesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesPatchOutput)
}

func (i EventSeriesPatchArgs) ToEventSeriesPatchPtrOutput() EventSeriesPatchPtrOutput {
	return i.ToEventSeriesPatchPtrOutputWithContext(context.Background())
}

func (i EventSeriesPatchArgs) ToEventSeriesPatchPtrOutputWithContext(ctx context.Context) EventSeriesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesPatchOutput).ToEventSeriesPatchPtrOutputWithContext(ctx)
}

// EventSeriesPatchPtrInput is an input type that accepts EventSeriesPatchArgs, EventSeriesPatchPtr and EventSeriesPatchPtrOutput values.
// You can construct a concrete instance of `EventSeriesPatchPtrInput` via:
//
//	        EventSeriesPatchArgs{...}
//
//	or:
//
//	        nil
type EventSeriesPatchPtrInput interface {
	pulumi.Input

	ToEventSeriesPatchPtrOutput() EventSeriesPatchPtrOutput
	ToEventSeriesPatchPtrOutputWithContext(context.Context) EventSeriesPatchPtrOutput
}

type eventSeriesPatchPtrType EventSeriesPatchArgs

func EventSeriesPatchPtr(v *EventSeriesPatchArgs) EventSeriesPatchPtrInput {
	return (*eventSeriesPatchPtrType)(v)
}

func (*eventSeriesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSeriesPatch)(nil)).Elem()
}

func (i *eventSeriesPatchPtrType) ToEventSeriesPatchPtrOutput() EventSeriesPatchPtrOutput {
	return i.ToEventSeriesPatchPtrOutputWithContext(context.Background())
}

func (i *eventSeriesPatchPtrType) ToEventSeriesPatchPtrOutputWithContext(ctx context.Context) EventSeriesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSeriesPatchPtrOutput)
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type EventSeriesPatchOutput struct{ *pulumi.OutputState }

func (EventSeriesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSeriesPatch)(nil)).Elem()
}

func (o EventSeriesPatchOutput) ToEventSeriesPatchOutput() EventSeriesPatchOutput {
	return o
}

func (o EventSeriesPatchOutput) ToEventSeriesPatchOutputWithContext(ctx context.Context) EventSeriesPatchOutput {
	return o
}

func (o EventSeriesPatchOutput) ToEventSeriesPatchPtrOutput() EventSeriesPatchPtrOutput {
	return o.ToEventSeriesPatchPtrOutputWithContext(context.Background())
}

func (o EventSeriesPatchOutput) ToEventSeriesPatchPtrOutputWithContext(ctx context.Context) EventSeriesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSeriesPatch) *EventSeriesPatch {
		return &v
	}).(EventSeriesPatchPtrOutput)
}

// Number of occurrences in this series up to the last heartbeat time
func (o EventSeriesPatchOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSeriesPatch) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Time of the last occurrence observed
func (o EventSeriesPatchOutput) LastObservedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSeriesPatch) *string { return v.LastObservedTime }).(pulumi.StringPtrOutput)
}

// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
func (o EventSeriesPatchOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSeriesPatch) *string { return v.State }).(pulumi.StringPtrOutput)
}

type EventSeriesPatchPtrOutput struct{ *pulumi.OutputState }

func (EventSeriesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSeriesPatch)(nil)).Elem()
}

func (o EventSeriesPatchPtrOutput) ToEventSeriesPatchPtrOutput() EventSeriesPatchPtrOutput {
	return o
}

func (o EventSeriesPatchPtrOutput) ToEventSeriesPatchPtrOutputWithContext(ctx context.Context) EventSeriesPatchPtrOutput {
	return o
}

func (o EventSeriesPatchPtrOutput) Elem() EventSeriesPatchOutput {
	return o.ApplyT(func(v *EventSeriesPatch) EventSeriesPatch {
		if v != nil {
			return *v
		}
		var ret EventSeriesPatch
		return ret
	}).(EventSeriesPatchOutput)
}

// Number of occurrences in this series up to the last heartbeat time
func (o EventSeriesPatchPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSeriesPatch) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Time of the last occurrence observed
func (o EventSeriesPatchPtrOutput) LastObservedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSeriesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastObservedTime
	}).(pulumi.StringPtrOutput)
}

// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
func (o EventSeriesPatchPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSeriesPatch) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// EventSource contains information for an event.
type EventSource struct {
	// Component from which the event is generated.
	Component *string `pulumi:"component"`
	// Node name on which the event is generated.
	Host *string `pulumi:"host"`
}

// EventSourceInput is an input type that accepts EventSourceArgs and EventSourceOutput values.
// You can construct a concrete instance of `EventSourceInput` via:
//
//	EventSourceArgs{...}
type EventSourceInput interface {
	pulumi.Input

	ToEventSourceOutput() EventSourceOutput
	ToEventSourceOutputWithContext(context.Context) EventSourceOutput
}

// EventSource contains information for an event.
type EventSourceArgs struct {
	// Component from which the event is generated.
	Component pulumi.StringPtrInput `pulumi:"component"`
	// Node name on which the event is generated.
	Host pulumi.StringPtrInput `pulumi:"host"`
}

func (EventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSource)(nil)).Elem()
}

func (i EventSourceArgs) ToEventSourceOutput() EventSourceOutput {
	return i.ToEventSourceOutputWithContext(context.Background())
}

func (i EventSourceArgs) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceOutput)
}

func (i EventSourceArgs) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return i.ToEventSourcePtrOutputWithContext(context.Background())
}

func (i EventSourceArgs) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceOutput).ToEventSourcePtrOutputWithContext(ctx)
}

// EventSourcePtrInput is an input type that accepts EventSourceArgs, EventSourcePtr and EventSourcePtrOutput values.
// You can construct a concrete instance of `EventSourcePtrInput` via:
//
//	        EventSourceArgs{...}
//
//	or:
//
//	        nil
type EventSourcePtrInput interface {
	pulumi.Input

	ToEventSourcePtrOutput() EventSourcePtrOutput
	ToEventSourcePtrOutputWithContext(context.Context) EventSourcePtrOutput
}

type eventSourcePtrType EventSourceArgs

func EventSourcePtr(v *EventSourceArgs) EventSourcePtrInput {
	return (*eventSourcePtrType)(v)
}

func (*eventSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSource)(nil)).Elem()
}

func (i *eventSourcePtrType) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return i.ToEventSourcePtrOutputWithContext(context.Background())
}

func (i *eventSourcePtrType) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePtrOutput)
}

// EventSource contains information for an event.
type EventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSource)(nil)).Elem()
}

func (o EventSourceOutput) ToEventSourceOutput() EventSourceOutput {
	return o
}

func (o EventSourceOutput) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return o
}

func (o EventSourceOutput) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return o.ToEventSourcePtrOutputWithContext(context.Background())
}

func (o EventSourceOutput) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSource) *EventSource {
		return &v
	}).(EventSourcePtrOutput)
}

// Component from which the event is generated.
func (o EventSourceOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSource) *string { return v.Component }).(pulumi.StringPtrOutput)
}

// Node name on which the event is generated.
func (o EventSourceOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSource) *string { return v.Host }).(pulumi.StringPtrOutput)
}

type EventSourcePtrOutput struct{ *pulumi.OutputState }

func (EventSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSource)(nil)).Elem()
}

func (o EventSourcePtrOutput) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return o
}

func (o EventSourcePtrOutput) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return o
}

func (o EventSourcePtrOutput) Elem() EventSourceOutput {
	return o.ApplyT(func(v *EventSource) EventSource {
		if v != nil {
			return *v
		}
		var ret EventSource
		return ret
	}).(EventSourceOutput)
}

// Component from which the event is generated.
func (o EventSourcePtrOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSource) *string {
		if v == nil {
			return nil
		}
		return v.Component
	}).(pulumi.StringPtrOutput)
}

// Node name on which the event is generated.
func (o EventSourcePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSource) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// EventSource contains information for an event.
type EventSourcePatch struct {
	// Component from which the event is generated.
	Component *string `pulumi:"component"`
	// Node name on which the event is generated.
	Host *string `pulumi:"host"`
}

// EventSourcePatchInput is an input type that accepts EventSourcePatchArgs and EventSourcePatchOutput values.
// You can construct a concrete instance of `EventSourcePatchInput` via:
//
//	EventSourcePatchArgs{...}
type EventSourcePatchInput interface {
	pulumi.Input

	ToEventSourcePatchOutput() EventSourcePatchOutput
	ToEventSourcePatchOutputWithContext(context.Context) EventSourcePatchOutput
}

// EventSource contains information for an event.
type EventSourcePatchArgs struct {
	// Component from which the event is generated.
	Component pulumi.StringPtrInput `pulumi:"component"`
	// Node name on which the event is generated.
	Host pulumi.StringPtrInput `pulumi:"host"`
}

func (EventSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourcePatch)(nil)).Elem()
}

func (i EventSourcePatchArgs) ToEventSourcePatchOutput() EventSourcePatchOutput {
	return i.ToEventSourcePatchOutputWithContext(context.Background())
}

func (i EventSourcePatchArgs) ToEventSourcePatchOutputWithContext(ctx context.Context) EventSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchOutput)
}

func (i EventSourcePatchArgs) ToEventSourcePatchPtrOutput() EventSourcePatchPtrOutput {
	return i.ToEventSourcePatchPtrOutputWithContext(context.Background())
}

func (i EventSourcePatchArgs) ToEventSourcePatchPtrOutputWithContext(ctx context.Context) EventSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchOutput).ToEventSourcePatchPtrOutputWithContext(ctx)
}

// EventSourcePatchPtrInput is an input type that accepts EventSourcePatchArgs, EventSourcePatchPtr and EventSourcePatchPtrOutput values.
// You can construct a concrete instance of `EventSourcePatchPtrInput` via:
//
//	        EventSourcePatchArgs{...}
//
//	or:
//
//	        nil
type EventSourcePatchPtrInput interface {
	pulumi.Input

	ToEventSourcePatchPtrOutput() EventSourcePatchPtrOutput
	ToEventSourcePatchPtrOutputWithContext(context.Context) EventSourcePatchPtrOutput
}

type eventSourcePatchPtrType EventSourcePatchArgs

func EventSourcePatchPtr(v *EventSourcePatchArgs) EventSourcePatchPtrInput {
	return (*eventSourcePatchPtrType)(v)
}

func (*eventSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcePatch)(nil)).Elem()
}

func (i *eventSourcePatchPtrType) ToEventSourcePatchPtrOutput() EventSourcePatchPtrOutput {
	return i.ToEventSourcePatchPtrOutputWithContext(context.Background())
}

func (i *eventSourcePatchPtrType) ToEventSourcePatchPtrOutputWithContext(ctx context.Context) EventSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchPtrOutput)
}

// EventSource contains information for an event.
type EventSourcePatchOutput struct{ *pulumi.OutputState }

func (EventSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourcePatch)(nil)).Elem()
}

func (o EventSourcePatchOutput) ToEventSourcePatchOutput() EventSourcePatchOutput {
	return o
}

func (o EventSourcePatchOutput) ToEventSourcePatchOutputWithContext(ctx context.Context) EventSourcePatchOutput {
	return o
}

func (o EventSourcePatchOutput) ToEventSourcePatchPtrOutput() EventSourcePatchPtrOutput {
	return o.ToEventSourcePatchPtrOutputWithContext(context.Background())
}

func (o EventSourcePatchOutput) ToEventSourcePatchPtrOutputWithContext(ctx context.Context) EventSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourcePatch) *EventSourcePatch {
		return &v
	}).(EventSourcePatchPtrOutput)
}

// Component from which the event is generated.
func (o EventSourcePatchOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourcePatch) *string { return v.Component }).(pulumi.StringPtrOutput)
}

// Node name on which the event is generated.
func (o EventSourcePatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourcePatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

type EventSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (EventSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcePatch)(nil)).Elem()
}

func (o EventSourcePatchPtrOutput) ToEventSourcePatchPtrOutput() EventSourcePatchPtrOutput {
	return o
}

func (o EventSourcePatchPtrOutput) ToEventSourcePatchPtrOutputWithContext(ctx context.Context) EventSourcePatchPtrOutput {
	return o
}

func (o EventSourcePatchPtrOutput) Elem() EventSourcePatchOutput {
	return o.ApplyT(func(v *EventSourcePatch) EventSourcePatch {
		if v != nil {
			return *v
		}
		var ret EventSourcePatch
		return ret
	}).(EventSourcePatchOutput)
}

// Component from which the event is generated.
func (o EventSourcePatchPtrOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Component
	}).(pulumi.StringPtrOutput)
}

// Node name on which the event is generated.
func (o EventSourcePatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// ExecAction describes a "run in container" action.
type ExecAction struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ExecActionInput is an input type that accepts ExecActionArgs and ExecActionOutput values.
// You can construct a concrete instance of `ExecActionInput` via:
//
//	ExecActionArgs{...}
type ExecActionInput interface {
	pulumi.Input

	ToExecActionOutput() ExecActionOutput
	ToExecActionOutputWithContext(context.Context) ExecActionOutput
}

// ExecAction describes a "run in container" action.
type ExecActionArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ExecActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (i ExecActionArgs) ToExecActionOutput() ExecActionOutput {
	return i.ToExecActionOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput)
}

func (i ExecActionArgs) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput).ToExecActionPtrOutputWithContext(ctx)
}

// ExecActionPtrInput is an input type that accepts ExecActionArgs, ExecActionPtr and ExecActionPtrOutput values.
// You can construct a concrete instance of `ExecActionPtrInput` via:
//
//	        ExecActionArgs{...}
//
//	or:
//
//	        nil
type ExecActionPtrInput interface {
	pulumi.Input

	ToExecActionPtrOutput() ExecActionPtrOutput
	ToExecActionPtrOutputWithContext(context.Context) ExecActionPtrOutput
}

type execActionPtrType ExecActionArgs

func ExecActionPtr(v *ExecActionArgs) ExecActionPtrInput {
	return (*execActionPtrType)(v)
}

func (*execActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (i *execActionPtrType) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i *execActionPtrType) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPtrOutput)
}

// ExecAction describes a "run in container" action.
type ExecActionOutput struct{ *pulumi.OutputState }

func (ExecActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (o ExecActionOutput) ToExecActionOutput() ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o.ToExecActionPtrOutputWithContext(context.Background())
}

func (o ExecActionOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecAction) *ExecAction {
		return &v
	}).(ExecActionPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecAction) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ExecActionPtrOutput struct{ *pulumi.OutputState }

func (ExecActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (o ExecActionPtrOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) Elem() ExecActionOutput {
	return o.ApplyT(func(v *ExecAction) ExecAction {
		if v != nil {
			return *v
		}
		var ret ExecAction
		return ret
	}).(ExecActionOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecAction) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// ExecAction describes a "run in container" action.
type ExecActionPatch struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ExecActionPatchInput is an input type that accepts ExecActionPatchArgs and ExecActionPatchOutput values.
// You can construct a concrete instance of `ExecActionPatchInput` via:
//
//	ExecActionPatchArgs{...}
type ExecActionPatchInput interface {
	pulumi.Input

	ToExecActionPatchOutput() ExecActionPatchOutput
	ToExecActionPatchOutputWithContext(context.Context) ExecActionPatchOutput
}

// ExecAction describes a "run in container" action.
type ExecActionPatchArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ExecActionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecActionPatch)(nil)).Elem()
}

func (i ExecActionPatchArgs) ToExecActionPatchOutput() ExecActionPatchOutput {
	return i.ToExecActionPatchOutputWithContext(context.Background())
}

func (i ExecActionPatchArgs) ToExecActionPatchOutputWithContext(ctx context.Context) ExecActionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPatchOutput)
}

func (i ExecActionPatchArgs) ToExecActionPatchPtrOutput() ExecActionPatchPtrOutput {
	return i.ToExecActionPatchPtrOutputWithContext(context.Background())
}

func (i ExecActionPatchArgs) ToExecActionPatchPtrOutputWithContext(ctx context.Context) ExecActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPatchOutput).ToExecActionPatchPtrOutputWithContext(ctx)
}

// ExecActionPatchPtrInput is an input type that accepts ExecActionPatchArgs, ExecActionPatchPtr and ExecActionPatchPtrOutput values.
// You can construct a concrete instance of `ExecActionPatchPtrInput` via:
//
//	        ExecActionPatchArgs{...}
//
//	or:
//
//	        nil
type ExecActionPatchPtrInput interface {
	pulumi.Input

	ToExecActionPatchPtrOutput() ExecActionPatchPtrOutput
	ToExecActionPatchPtrOutputWithContext(context.Context) ExecActionPatchPtrOutput
}

type execActionPatchPtrType ExecActionPatchArgs

func ExecActionPatchPtr(v *ExecActionPatchArgs) ExecActionPatchPtrInput {
	return (*execActionPatchPtrType)(v)
}

func (*execActionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecActionPatch)(nil)).Elem()
}

func (i *execActionPatchPtrType) ToExecActionPatchPtrOutput() ExecActionPatchPtrOutput {
	return i.ToExecActionPatchPtrOutputWithContext(context.Background())
}

func (i *execActionPatchPtrType) ToExecActionPatchPtrOutputWithContext(ctx context.Context) ExecActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPatchPtrOutput)
}

// ExecAction describes a "run in container" action.
type ExecActionPatchOutput struct{ *pulumi.OutputState }

func (ExecActionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecActionPatch)(nil)).Elem()
}

func (o ExecActionPatchOutput) ToExecActionPatchOutput() ExecActionPatchOutput {
	return o
}

func (o ExecActionPatchOutput) ToExecActionPatchOutputWithContext(ctx context.Context) ExecActionPatchOutput {
	return o
}

func (o ExecActionPatchOutput) ToExecActionPatchPtrOutput() ExecActionPatchPtrOutput {
	return o.ToExecActionPatchPtrOutputWithContext(context.Background())
}

func (o ExecActionPatchOutput) ToExecActionPatchPtrOutputWithContext(ctx context.Context) ExecActionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecActionPatch) *ExecActionPatch {
		return &v
	}).(ExecActionPatchPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionPatchOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecActionPatch) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ExecActionPatchPtrOutput struct{ *pulumi.OutputState }

func (ExecActionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecActionPatch)(nil)).Elem()
}

func (o ExecActionPatchPtrOutput) ToExecActionPatchPtrOutput() ExecActionPatchPtrOutput {
	return o
}

func (o ExecActionPatchPtrOutput) ToExecActionPatchPtrOutputWithContext(ctx context.Context) ExecActionPatchPtrOutput {
	return o
}

func (o ExecActionPatchPtrOutput) Elem() ExecActionPatchOutput {
	return o.ApplyT(func(v *ExecActionPatch) ExecActionPatch {
		if v != nil {
			return *v
		}
		var ret ExecActionPatch
		return ret
	}).(ExecActionPatchOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionPatchPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecActionPatch) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// FCVolumeSourceInput is an input type that accepts FCVolumeSourceArgs and FCVolumeSourceOutput values.
// You can construct a concrete instance of `FCVolumeSourceInput` via:
//
//	FCVolumeSourceArgs{...}
type FCVolumeSourceInput interface {
	pulumi.Input

	ToFCVolumeSourceOutput() FCVolumeSourceOutput
	ToFCVolumeSourceOutputWithContext(context.Context) FCVolumeSourceOutput
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (FCVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FCVolumeSource)(nil)).Elem()
}

func (i FCVolumeSourceArgs) ToFCVolumeSourceOutput() FCVolumeSourceOutput {
	return i.ToFCVolumeSourceOutputWithContext(context.Background())
}

func (i FCVolumeSourceArgs) ToFCVolumeSourceOutputWithContext(ctx context.Context) FCVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourceOutput)
}

func (i FCVolumeSourceArgs) ToFCVolumeSourcePtrOutput() FCVolumeSourcePtrOutput {
	return i.ToFCVolumeSourcePtrOutputWithContext(context.Background())
}

func (i FCVolumeSourceArgs) ToFCVolumeSourcePtrOutputWithContext(ctx context.Context) FCVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourceOutput).ToFCVolumeSourcePtrOutputWithContext(ctx)
}

// FCVolumeSourcePtrInput is an input type that accepts FCVolumeSourceArgs, FCVolumeSourcePtr and FCVolumeSourcePtrOutput values.
// You can construct a concrete instance of `FCVolumeSourcePtrInput` via:
//
//	        FCVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type FCVolumeSourcePtrInput interface {
	pulumi.Input

	ToFCVolumeSourcePtrOutput() FCVolumeSourcePtrOutput
	ToFCVolumeSourcePtrOutputWithContext(context.Context) FCVolumeSourcePtrOutput
}

type fcvolumeSourcePtrType FCVolumeSourceArgs

func FCVolumeSourcePtr(v *FCVolumeSourceArgs) FCVolumeSourcePtrInput {
	return (*fcvolumeSourcePtrType)(v)
}

func (*fcvolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FCVolumeSource)(nil)).Elem()
}

func (i *fcvolumeSourcePtrType) ToFCVolumeSourcePtrOutput() FCVolumeSourcePtrOutput {
	return i.ToFCVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *fcvolumeSourcePtrType) ToFCVolumeSourcePtrOutputWithContext(ctx context.Context) FCVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourcePtrOutput)
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSourceOutput struct{ *pulumi.OutputState }

func (FCVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FCVolumeSource)(nil)).Elem()
}

func (o FCVolumeSourceOutput) ToFCVolumeSourceOutput() FCVolumeSourceOutput {
	return o
}

func (o FCVolumeSourceOutput) ToFCVolumeSourceOutputWithContext(ctx context.Context) FCVolumeSourceOutput {
	return o
}

func (o FCVolumeSourceOutput) ToFCVolumeSourcePtrOutput() FCVolumeSourcePtrOutput {
	return o.ToFCVolumeSourcePtrOutputWithContext(context.Background())
}

func (o FCVolumeSourceOutput) ToFCVolumeSourcePtrOutputWithContext(ctx context.Context) FCVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FCVolumeSource) *FCVolumeSource {
		return &v
	}).(FCVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o FCVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FCVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o FCVolumeSourceOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FCVolumeSource) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FCVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FCVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o FCVolumeSourceOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FCVolumeSource) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o FCVolumeSourceOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FCVolumeSource) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type FCVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (FCVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FCVolumeSource)(nil)).Elem()
}

func (o FCVolumeSourcePtrOutput) ToFCVolumeSourcePtrOutput() FCVolumeSourcePtrOutput {
	return o
}

func (o FCVolumeSourcePtrOutput) ToFCVolumeSourcePtrOutputWithContext(ctx context.Context) FCVolumeSourcePtrOutput {
	return o
}

func (o FCVolumeSourcePtrOutput) Elem() FCVolumeSourceOutput {
	return o.ApplyT(func(v *FCVolumeSource) FCVolumeSource {
		if v != nil {
			return *v
		}
		var ret FCVolumeSource
		return ret
	}).(FCVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o FCVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FCVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o FCVolumeSourcePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FCVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FCVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FCVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o FCVolumeSourcePtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FCVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o FCVolumeSourcePtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FCVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// FCVolumeSourcePatchInput is an input type that accepts FCVolumeSourcePatchArgs and FCVolumeSourcePatchOutput values.
// You can construct a concrete instance of `FCVolumeSourcePatchInput` via:
//
//	FCVolumeSourcePatchArgs{...}
type FCVolumeSourcePatchInput interface {
	pulumi.Input

	ToFCVolumeSourcePatchOutput() FCVolumeSourcePatchOutput
	ToFCVolumeSourcePatchOutputWithContext(context.Context) FCVolumeSourcePatchOutput
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (FCVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FCVolumeSourcePatch)(nil)).Elem()
}

func (i FCVolumeSourcePatchArgs) ToFCVolumeSourcePatchOutput() FCVolumeSourcePatchOutput {
	return i.ToFCVolumeSourcePatchOutputWithContext(context.Background())
}

func (i FCVolumeSourcePatchArgs) ToFCVolumeSourcePatchOutputWithContext(ctx context.Context) FCVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourcePatchOutput)
}

func (i FCVolumeSourcePatchArgs) ToFCVolumeSourcePatchPtrOutput() FCVolumeSourcePatchPtrOutput {
	return i.ToFCVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i FCVolumeSourcePatchArgs) ToFCVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FCVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourcePatchOutput).ToFCVolumeSourcePatchPtrOutputWithContext(ctx)
}

// FCVolumeSourcePatchPtrInput is an input type that accepts FCVolumeSourcePatchArgs, FCVolumeSourcePatchPtr and FCVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `FCVolumeSourcePatchPtrInput` via:
//
//	        FCVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type FCVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToFCVolumeSourcePatchPtrOutput() FCVolumeSourcePatchPtrOutput
	ToFCVolumeSourcePatchPtrOutputWithContext(context.Context) FCVolumeSourcePatchPtrOutput
}

type fcvolumeSourcePatchPtrType FCVolumeSourcePatchArgs

func FCVolumeSourcePatchPtr(v *FCVolumeSourcePatchArgs) FCVolumeSourcePatchPtrInput {
	return (*fcvolumeSourcePatchPtrType)(v)
}

func (*fcvolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FCVolumeSourcePatch)(nil)).Elem()
}

func (i *fcvolumeSourcePatchPtrType) ToFCVolumeSourcePatchPtrOutput() FCVolumeSourcePatchPtrOutput {
	return i.ToFCVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *fcvolumeSourcePatchPtrType) ToFCVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FCVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FCVolumeSourcePatchPtrOutput)
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (FCVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FCVolumeSourcePatch)(nil)).Elem()
}

func (o FCVolumeSourcePatchOutput) ToFCVolumeSourcePatchOutput() FCVolumeSourcePatchOutput {
	return o
}

func (o FCVolumeSourcePatchOutput) ToFCVolumeSourcePatchOutputWithContext(ctx context.Context) FCVolumeSourcePatchOutput {
	return o
}

func (o FCVolumeSourcePatchOutput) ToFCVolumeSourcePatchPtrOutput() FCVolumeSourcePatchPtrOutput {
	return o.ToFCVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o FCVolumeSourcePatchOutput) ToFCVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FCVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FCVolumeSourcePatch) *FCVolumeSourcePatch {
		return &v
	}).(FCVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o FCVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FCVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o FCVolumeSourcePatchOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FCVolumeSourcePatch) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FCVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FCVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o FCVolumeSourcePatchOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FCVolumeSourcePatch) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o FCVolumeSourcePatchOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FCVolumeSourcePatch) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type FCVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (FCVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FCVolumeSourcePatch)(nil)).Elem()
}

func (o FCVolumeSourcePatchPtrOutput) ToFCVolumeSourcePatchPtrOutput() FCVolumeSourcePatchPtrOutput {
	return o
}

func (o FCVolumeSourcePatchPtrOutput) ToFCVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FCVolumeSourcePatchPtrOutput {
	return o
}

func (o FCVolumeSourcePatchPtrOutput) Elem() FCVolumeSourcePatchOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) FCVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret FCVolumeSourcePatch
		return ret
	}).(FCVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o FCVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o FCVolumeSourcePatchPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FCVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o FCVolumeSourcePatchPtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o FCVolumeSourcePatchPtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FCVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSource struct {
	// driver is the name of the driver to use for this volume.
	Driver string `pulumi:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *SecretReference `pulumi:"secretRef"`
}

// FlexPersistentVolumeSourceInput is an input type that accepts FlexPersistentVolumeSourceArgs and FlexPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `FlexPersistentVolumeSourceInput` via:
//
//	FlexPersistentVolumeSourceArgs{...}
type FlexPersistentVolumeSourceInput interface {
	pulumi.Input

	ToFlexPersistentVolumeSourceOutput() FlexPersistentVolumeSourceOutput
	ToFlexPersistentVolumeSourceOutputWithContext(context.Context) FlexPersistentVolumeSourceOutput
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSourceArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef SecretReferencePtrInput `pulumi:"secretRef"`
}

func (FlexPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexPersistentVolumeSource)(nil)).Elem()
}

func (i FlexPersistentVolumeSourceArgs) ToFlexPersistentVolumeSourceOutput() FlexPersistentVolumeSourceOutput {
	return i.ToFlexPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i FlexPersistentVolumeSourceArgs) ToFlexPersistentVolumeSourceOutputWithContext(ctx context.Context) FlexPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourceOutput)
}

func (i FlexPersistentVolumeSourceArgs) ToFlexPersistentVolumeSourcePtrOutput() FlexPersistentVolumeSourcePtrOutput {
	return i.ToFlexPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i FlexPersistentVolumeSourceArgs) ToFlexPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourceOutput).ToFlexPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// FlexPersistentVolumeSourcePtrInput is an input type that accepts FlexPersistentVolumeSourceArgs, FlexPersistentVolumeSourcePtr and FlexPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `FlexPersistentVolumeSourcePtrInput` via:
//
//	        FlexPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type FlexPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToFlexPersistentVolumeSourcePtrOutput() FlexPersistentVolumeSourcePtrOutput
	ToFlexPersistentVolumeSourcePtrOutputWithContext(context.Context) FlexPersistentVolumeSourcePtrOutput
}

type flexPersistentVolumeSourcePtrType FlexPersistentVolumeSourceArgs

func FlexPersistentVolumeSourcePtr(v *FlexPersistentVolumeSourceArgs) FlexPersistentVolumeSourcePtrInput {
	return (*flexPersistentVolumeSourcePtrType)(v)
}

func (*flexPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexPersistentVolumeSource)(nil)).Elem()
}

func (i *flexPersistentVolumeSourcePtrType) ToFlexPersistentVolumeSourcePtrOutput() FlexPersistentVolumeSourcePtrOutput {
	return i.ToFlexPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *flexPersistentVolumeSourcePtrType) ToFlexPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourcePtrOutput)
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (FlexPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexPersistentVolumeSource)(nil)).Elem()
}

func (o FlexPersistentVolumeSourceOutput) ToFlexPersistentVolumeSourceOutput() FlexPersistentVolumeSourceOutput {
	return o
}

func (o FlexPersistentVolumeSourceOutput) ToFlexPersistentVolumeSourceOutputWithContext(ctx context.Context) FlexPersistentVolumeSourceOutput {
	return o
}

func (o FlexPersistentVolumeSourceOutput) ToFlexPersistentVolumeSourcePtrOutput() FlexPersistentVolumeSourcePtrOutput {
	return o.ToFlexPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o FlexPersistentVolumeSourceOutput) ToFlexPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexPersistentVolumeSource) *FlexPersistentVolumeSource {
		return &v
	}).(FlexPersistentVolumeSourcePtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexPersistentVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSource) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexPersistentVolumeSourceOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSource) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexPersistentVolumeSourceOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSource) *SecretReference { return v.SecretRef }).(SecretReferencePtrOutput)
}

type FlexPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (FlexPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexPersistentVolumeSource)(nil)).Elem()
}

func (o FlexPersistentVolumeSourcePtrOutput) ToFlexPersistentVolumeSourcePtrOutput() FlexPersistentVolumeSourcePtrOutput {
	return o
}

func (o FlexPersistentVolumeSourcePtrOutput) ToFlexPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePtrOutput {
	return o
}

func (o FlexPersistentVolumeSourcePtrOutput) Elem() FlexPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) FlexPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret FlexPersistentVolumeSource
		return ret
	}).(FlexPersistentVolumeSourceOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexPersistentVolumeSourcePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexPersistentVolumeSourcePtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePtrOutput)
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSourcePatch struct {
	// driver is the name of the driver to use for this volume.
	Driver *string `pulumi:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
}

// FlexPersistentVolumeSourcePatchInput is an input type that accepts FlexPersistentVolumeSourcePatchArgs and FlexPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `FlexPersistentVolumeSourcePatchInput` via:
//
//	FlexPersistentVolumeSourcePatchArgs{...}
type FlexPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToFlexPersistentVolumeSourcePatchOutput() FlexPersistentVolumeSourcePatchOutput
	ToFlexPersistentVolumeSourcePatchOutputWithContext(context.Context) FlexPersistentVolumeSourcePatchOutput
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSourcePatchArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
}

func (FlexPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i FlexPersistentVolumeSourcePatchArgs) ToFlexPersistentVolumeSourcePatchOutput() FlexPersistentVolumeSourcePatchOutput {
	return i.ToFlexPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i FlexPersistentVolumeSourcePatchArgs) ToFlexPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourcePatchOutput)
}

func (i FlexPersistentVolumeSourcePatchArgs) ToFlexPersistentVolumeSourcePatchPtrOutput() FlexPersistentVolumeSourcePatchPtrOutput {
	return i.ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i FlexPersistentVolumeSourcePatchArgs) ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourcePatchOutput).ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// FlexPersistentVolumeSourcePatchPtrInput is an input type that accepts FlexPersistentVolumeSourcePatchArgs, FlexPersistentVolumeSourcePatchPtr and FlexPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `FlexPersistentVolumeSourcePatchPtrInput` via:
//
//	        FlexPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type FlexPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToFlexPersistentVolumeSourcePatchPtrOutput() FlexPersistentVolumeSourcePatchPtrOutput
	ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) FlexPersistentVolumeSourcePatchPtrOutput
}

type flexPersistentVolumeSourcePatchPtrType FlexPersistentVolumeSourcePatchArgs

func FlexPersistentVolumeSourcePatchPtr(v *FlexPersistentVolumeSourcePatchArgs) FlexPersistentVolumeSourcePatchPtrInput {
	return (*flexPersistentVolumeSourcePatchPtrType)(v)
}

func (*flexPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *flexPersistentVolumeSourcePatchPtrType) ToFlexPersistentVolumeSourcePatchPtrOutput() FlexPersistentVolumeSourcePatchPtrOutput {
	return i.ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *flexPersistentVolumeSourcePatchPtrType) ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexPersistentVolumeSourcePatchPtrOutput)
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type FlexPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (FlexPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o FlexPersistentVolumeSourcePatchOutput) ToFlexPersistentVolumeSourcePatchOutput() FlexPersistentVolumeSourcePatchOutput {
	return o
}

func (o FlexPersistentVolumeSourcePatchOutput) ToFlexPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchOutput {
	return o
}

func (o FlexPersistentVolumeSourcePatchOutput) ToFlexPersistentVolumeSourcePatchPtrOutput() FlexPersistentVolumeSourcePatchPtrOutput {
	return o.ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o FlexPersistentVolumeSourcePatchOutput) ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexPersistentVolumeSourcePatch) *FlexPersistentVolumeSourcePatch {
		return &v
	}).(FlexPersistentVolumeSourcePatchPtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexPersistentVolumeSourcePatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSourcePatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexPersistentVolumeSourcePatchOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSourcePatch) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v FlexPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

type FlexPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (FlexPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o FlexPersistentVolumeSourcePatchPtrOutput) ToFlexPersistentVolumeSourcePatchPtrOutput() FlexPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o FlexPersistentVolumeSourcePatchPtrOutput) ToFlexPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o FlexPersistentVolumeSourcePatchPtrOutput) Elem() FlexPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) FlexPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret FlexPersistentVolumeSourcePatch
		return ret
	}).(FlexPersistentVolumeSourcePatchOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexPersistentVolumeSourcePatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexPersistentVolumeSourcePatchPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *FlexPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSource struct {
	// driver is the name of the driver to use for this volume.
	Driver string `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
}

// FlexVolumeSourceInput is an input type that accepts FlexVolumeSourceArgs and FlexVolumeSourceOutput values.
// You can construct a concrete instance of `FlexVolumeSourceInput` via:
//
//	FlexVolumeSourceArgs{...}
type FlexVolumeSourceInput interface {
	pulumi.Input

	ToFlexVolumeSourceOutput() FlexVolumeSourceOutput
	ToFlexVolumeSourceOutputWithContext(context.Context) FlexVolumeSourceOutput
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSourceArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
}

func (FlexVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexVolumeSource)(nil)).Elem()
}

func (i FlexVolumeSourceArgs) ToFlexVolumeSourceOutput() FlexVolumeSourceOutput {
	return i.ToFlexVolumeSourceOutputWithContext(context.Background())
}

func (i FlexVolumeSourceArgs) ToFlexVolumeSourceOutputWithContext(ctx context.Context) FlexVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourceOutput)
}

func (i FlexVolumeSourceArgs) ToFlexVolumeSourcePtrOutput() FlexVolumeSourcePtrOutput {
	return i.ToFlexVolumeSourcePtrOutputWithContext(context.Background())
}

func (i FlexVolumeSourceArgs) ToFlexVolumeSourcePtrOutputWithContext(ctx context.Context) FlexVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourceOutput).ToFlexVolumeSourcePtrOutputWithContext(ctx)
}

// FlexVolumeSourcePtrInput is an input type that accepts FlexVolumeSourceArgs, FlexVolumeSourcePtr and FlexVolumeSourcePtrOutput values.
// You can construct a concrete instance of `FlexVolumeSourcePtrInput` via:
//
//	        FlexVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type FlexVolumeSourcePtrInput interface {
	pulumi.Input

	ToFlexVolumeSourcePtrOutput() FlexVolumeSourcePtrOutput
	ToFlexVolumeSourcePtrOutputWithContext(context.Context) FlexVolumeSourcePtrOutput
}

type flexVolumeSourcePtrType FlexVolumeSourceArgs

func FlexVolumeSourcePtr(v *FlexVolumeSourceArgs) FlexVolumeSourcePtrInput {
	return (*flexVolumeSourcePtrType)(v)
}

func (*flexVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexVolumeSource)(nil)).Elem()
}

func (i *flexVolumeSourcePtrType) ToFlexVolumeSourcePtrOutput() FlexVolumeSourcePtrOutput {
	return i.ToFlexVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *flexVolumeSourcePtrType) ToFlexVolumeSourcePtrOutputWithContext(ctx context.Context) FlexVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourcePtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSourceOutput struct{ *pulumi.OutputState }

func (FlexVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexVolumeSource)(nil)).Elem()
}

func (o FlexVolumeSourceOutput) ToFlexVolumeSourceOutput() FlexVolumeSourceOutput {
	return o
}

func (o FlexVolumeSourceOutput) ToFlexVolumeSourceOutputWithContext(ctx context.Context) FlexVolumeSourceOutput {
	return o
}

func (o FlexVolumeSourceOutput) ToFlexVolumeSourcePtrOutput() FlexVolumeSourcePtrOutput {
	return o.ToFlexVolumeSourcePtrOutputWithContext(context.Background())
}

func (o FlexVolumeSourceOutput) ToFlexVolumeSourcePtrOutputWithContext(ctx context.Context) FlexVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexVolumeSource) *FlexVolumeSource {
		return &v
	}).(FlexVolumeSourcePtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexVolumeSourceOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v FlexVolumeSource) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexVolumeSourceOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlexVolumeSource) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v FlexVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

type FlexVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (FlexVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexVolumeSource)(nil)).Elem()
}

func (o FlexVolumeSourcePtrOutput) ToFlexVolumeSourcePtrOutput() FlexVolumeSourcePtrOutput {
	return o
}

func (o FlexVolumeSourcePtrOutput) ToFlexVolumeSourcePtrOutputWithContext(ctx context.Context) FlexVolumeSourcePtrOutput {
	return o
}

func (o FlexVolumeSourcePtrOutput) Elem() FlexVolumeSourceOutput {
	return o.ApplyT(func(v *FlexVolumeSource) FlexVolumeSource {
		if v != nil {
			return *v
		}
		var ret FlexVolumeSource
		return ret
	}).(FlexVolumeSourceOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexVolumeSourcePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexVolumeSourcePtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexVolumeSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *FlexVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSourcePatch struct {
	// driver is the name of the driver to use for this volume.
	Driver *string `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
}

// FlexVolumeSourcePatchInput is an input type that accepts FlexVolumeSourcePatchArgs and FlexVolumeSourcePatchOutput values.
// You can construct a concrete instance of `FlexVolumeSourcePatchInput` via:
//
//	FlexVolumeSourcePatchArgs{...}
type FlexVolumeSourcePatchInput interface {
	pulumi.Input

	ToFlexVolumeSourcePatchOutput() FlexVolumeSourcePatchOutput
	ToFlexVolumeSourcePatchOutputWithContext(context.Context) FlexVolumeSourcePatchOutput
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSourcePatchArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
}

func (FlexVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexVolumeSourcePatch)(nil)).Elem()
}

func (i FlexVolumeSourcePatchArgs) ToFlexVolumeSourcePatchOutput() FlexVolumeSourcePatchOutput {
	return i.ToFlexVolumeSourcePatchOutputWithContext(context.Background())
}

func (i FlexVolumeSourcePatchArgs) ToFlexVolumeSourcePatchOutputWithContext(ctx context.Context) FlexVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourcePatchOutput)
}

func (i FlexVolumeSourcePatchArgs) ToFlexVolumeSourcePatchPtrOutput() FlexVolumeSourcePatchPtrOutput {
	return i.ToFlexVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i FlexVolumeSourcePatchArgs) ToFlexVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourcePatchOutput).ToFlexVolumeSourcePatchPtrOutputWithContext(ctx)
}

// FlexVolumeSourcePatchPtrInput is an input type that accepts FlexVolumeSourcePatchArgs, FlexVolumeSourcePatchPtr and FlexVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `FlexVolumeSourcePatchPtrInput` via:
//
//	        FlexVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type FlexVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToFlexVolumeSourcePatchPtrOutput() FlexVolumeSourcePatchPtrOutput
	ToFlexVolumeSourcePatchPtrOutputWithContext(context.Context) FlexVolumeSourcePatchPtrOutput
}

type flexVolumeSourcePatchPtrType FlexVolumeSourcePatchArgs

func FlexVolumeSourcePatchPtr(v *FlexVolumeSourcePatchArgs) FlexVolumeSourcePatchPtrInput {
	return (*flexVolumeSourcePatchPtrType)(v)
}

func (*flexVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexVolumeSourcePatch)(nil)).Elem()
}

func (i *flexVolumeSourcePatchPtrType) ToFlexVolumeSourcePatchPtrOutput() FlexVolumeSourcePatchPtrOutput {
	return i.ToFlexVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *flexVolumeSourcePatchPtrType) ToFlexVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexVolumeSourcePatchPtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type FlexVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (FlexVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexVolumeSourcePatch)(nil)).Elem()
}

func (o FlexVolumeSourcePatchOutput) ToFlexVolumeSourcePatchOutput() FlexVolumeSourcePatchOutput {
	return o
}

func (o FlexVolumeSourcePatchOutput) ToFlexVolumeSourcePatchOutputWithContext(ctx context.Context) FlexVolumeSourcePatchOutput {
	return o
}

func (o FlexVolumeSourcePatchOutput) ToFlexVolumeSourcePatchPtrOutput() FlexVolumeSourcePatchPtrOutput {
	return o.ToFlexVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o FlexVolumeSourcePatchOutput) ToFlexVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexVolumeSourcePatch) *FlexVolumeSourcePatch {
		return &v
	}).(FlexVolumeSourcePatchPtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexVolumeSourcePatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexVolumeSourcePatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexVolumeSourcePatchOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlexVolumeSourcePatch) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v FlexVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

type FlexVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (FlexVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexVolumeSourcePatch)(nil)).Elem()
}

func (o FlexVolumeSourcePatchPtrOutput) ToFlexVolumeSourcePatchPtrOutput() FlexVolumeSourcePatchPtrOutput {
	return o
}

func (o FlexVolumeSourcePatchPtrOutput) ToFlexVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlexVolumeSourcePatchPtrOutput {
	return o
}

func (o FlexVolumeSourcePatchPtrOutput) Elem() FlexVolumeSourcePatchOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) FlexVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret FlexVolumeSourcePatch
		return ret
	}).(FlexVolumeSourcePatchOutput)
}

// driver is the name of the driver to use for this volume.
func (o FlexVolumeSourcePatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o FlexVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o FlexVolumeSourcePatchPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o FlexVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o FlexVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *FlexVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSource struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// FlockerVolumeSourceInput is an input type that accepts FlockerVolumeSourceArgs and FlockerVolumeSourceOutput values.
// You can construct a concrete instance of `FlockerVolumeSourceInput` via:
//
//	FlockerVolumeSourceArgs{...}
type FlockerVolumeSourceInput interface {
	pulumi.Input

	ToFlockerVolumeSourceOutput() FlockerVolumeSourceOutput
	ToFlockerVolumeSourceOutputWithContext(context.Context) FlockerVolumeSourceOutput
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSourceArgs struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (FlockerVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlockerVolumeSource)(nil)).Elem()
}

func (i FlockerVolumeSourceArgs) ToFlockerVolumeSourceOutput() FlockerVolumeSourceOutput {
	return i.ToFlockerVolumeSourceOutputWithContext(context.Background())
}

func (i FlockerVolumeSourceArgs) ToFlockerVolumeSourceOutputWithContext(ctx context.Context) FlockerVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourceOutput)
}

func (i FlockerVolumeSourceArgs) ToFlockerVolumeSourcePtrOutput() FlockerVolumeSourcePtrOutput {
	return i.ToFlockerVolumeSourcePtrOutputWithContext(context.Background())
}

func (i FlockerVolumeSourceArgs) ToFlockerVolumeSourcePtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourceOutput).ToFlockerVolumeSourcePtrOutputWithContext(ctx)
}

// FlockerVolumeSourcePtrInput is an input type that accepts FlockerVolumeSourceArgs, FlockerVolumeSourcePtr and FlockerVolumeSourcePtrOutput values.
// You can construct a concrete instance of `FlockerVolumeSourcePtrInput` via:
//
//	        FlockerVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type FlockerVolumeSourcePtrInput interface {
	pulumi.Input

	ToFlockerVolumeSourcePtrOutput() FlockerVolumeSourcePtrOutput
	ToFlockerVolumeSourcePtrOutputWithContext(context.Context) FlockerVolumeSourcePtrOutput
}

type flockerVolumeSourcePtrType FlockerVolumeSourceArgs

func FlockerVolumeSourcePtr(v *FlockerVolumeSourceArgs) FlockerVolumeSourcePtrInput {
	return (*flockerVolumeSourcePtrType)(v)
}

func (*flockerVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlockerVolumeSource)(nil)).Elem()
}

func (i *flockerVolumeSourcePtrType) ToFlockerVolumeSourcePtrOutput() FlockerVolumeSourcePtrOutput {
	return i.ToFlockerVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *flockerVolumeSourcePtrType) ToFlockerVolumeSourcePtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourcePtrOutput)
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSourceOutput struct{ *pulumi.OutputState }

func (FlockerVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlockerVolumeSource)(nil)).Elem()
}

func (o FlockerVolumeSourceOutput) ToFlockerVolumeSourceOutput() FlockerVolumeSourceOutput {
	return o
}

func (o FlockerVolumeSourceOutput) ToFlockerVolumeSourceOutputWithContext(ctx context.Context) FlockerVolumeSourceOutput {
	return o
}

func (o FlockerVolumeSourceOutput) ToFlockerVolumeSourcePtrOutput() FlockerVolumeSourcePtrOutput {
	return o.ToFlockerVolumeSourcePtrOutputWithContext(context.Background())
}

func (o FlockerVolumeSourceOutput) ToFlockerVolumeSourcePtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlockerVolumeSource) *FlockerVolumeSource {
		return &v
	}).(FlockerVolumeSourcePtrOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o FlockerVolumeSourceOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlockerVolumeSource) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o FlockerVolumeSourceOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlockerVolumeSource) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type FlockerVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (FlockerVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlockerVolumeSource)(nil)).Elem()
}

func (o FlockerVolumeSourcePtrOutput) ToFlockerVolumeSourcePtrOutput() FlockerVolumeSourcePtrOutput {
	return o
}

func (o FlockerVolumeSourcePtrOutput) ToFlockerVolumeSourcePtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePtrOutput {
	return o
}

func (o FlockerVolumeSourcePtrOutput) Elem() FlockerVolumeSourceOutput {
	return o.ApplyT(func(v *FlockerVolumeSource) FlockerVolumeSource {
		if v != nil {
			return *v
		}
		var ret FlockerVolumeSource
		return ret
	}).(FlockerVolumeSourceOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o FlockerVolumeSourcePtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlockerVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o FlockerVolumeSourcePtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlockerVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSourcePatch struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// FlockerVolumeSourcePatchInput is an input type that accepts FlockerVolumeSourcePatchArgs and FlockerVolumeSourcePatchOutput values.
// You can construct a concrete instance of `FlockerVolumeSourcePatchInput` via:
//
//	FlockerVolumeSourcePatchArgs{...}
type FlockerVolumeSourcePatchInput interface {
	pulumi.Input

	ToFlockerVolumeSourcePatchOutput() FlockerVolumeSourcePatchOutput
	ToFlockerVolumeSourcePatchOutputWithContext(context.Context) FlockerVolumeSourcePatchOutput
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSourcePatchArgs struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (FlockerVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlockerVolumeSourcePatch)(nil)).Elem()
}

func (i FlockerVolumeSourcePatchArgs) ToFlockerVolumeSourcePatchOutput() FlockerVolumeSourcePatchOutput {
	return i.ToFlockerVolumeSourcePatchOutputWithContext(context.Background())
}

func (i FlockerVolumeSourcePatchArgs) ToFlockerVolumeSourcePatchOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourcePatchOutput)
}

func (i FlockerVolumeSourcePatchArgs) ToFlockerVolumeSourcePatchPtrOutput() FlockerVolumeSourcePatchPtrOutput {
	return i.ToFlockerVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i FlockerVolumeSourcePatchArgs) ToFlockerVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourcePatchOutput).ToFlockerVolumeSourcePatchPtrOutputWithContext(ctx)
}

// FlockerVolumeSourcePatchPtrInput is an input type that accepts FlockerVolumeSourcePatchArgs, FlockerVolumeSourcePatchPtr and FlockerVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `FlockerVolumeSourcePatchPtrInput` via:
//
//	        FlockerVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type FlockerVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToFlockerVolumeSourcePatchPtrOutput() FlockerVolumeSourcePatchPtrOutput
	ToFlockerVolumeSourcePatchPtrOutputWithContext(context.Context) FlockerVolumeSourcePatchPtrOutput
}

type flockerVolumeSourcePatchPtrType FlockerVolumeSourcePatchArgs

func FlockerVolumeSourcePatchPtr(v *FlockerVolumeSourcePatchArgs) FlockerVolumeSourcePatchPtrInput {
	return (*flockerVolumeSourcePatchPtrType)(v)
}

func (*flockerVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlockerVolumeSourcePatch)(nil)).Elem()
}

func (i *flockerVolumeSourcePatchPtrType) ToFlockerVolumeSourcePatchPtrOutput() FlockerVolumeSourcePatchPtrOutput {
	return i.ToFlockerVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *flockerVolumeSourcePatchPtrType) ToFlockerVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlockerVolumeSourcePatchPtrOutput)
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (FlockerVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlockerVolumeSourcePatch)(nil)).Elem()
}

func (o FlockerVolumeSourcePatchOutput) ToFlockerVolumeSourcePatchOutput() FlockerVolumeSourcePatchOutput {
	return o
}

func (o FlockerVolumeSourcePatchOutput) ToFlockerVolumeSourcePatchOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchOutput {
	return o
}

func (o FlockerVolumeSourcePatchOutput) ToFlockerVolumeSourcePatchPtrOutput() FlockerVolumeSourcePatchPtrOutput {
	return o.ToFlockerVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o FlockerVolumeSourcePatchOutput) ToFlockerVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlockerVolumeSourcePatch) *FlockerVolumeSourcePatch {
		return &v
	}).(FlockerVolumeSourcePatchPtrOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o FlockerVolumeSourcePatchOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlockerVolumeSourcePatch) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o FlockerVolumeSourcePatchOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlockerVolumeSourcePatch) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type FlockerVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (FlockerVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlockerVolumeSourcePatch)(nil)).Elem()
}

func (o FlockerVolumeSourcePatchPtrOutput) ToFlockerVolumeSourcePatchPtrOutput() FlockerVolumeSourcePatchPtrOutput {
	return o
}

func (o FlockerVolumeSourcePatchPtrOutput) ToFlockerVolumeSourcePatchPtrOutputWithContext(ctx context.Context) FlockerVolumeSourcePatchPtrOutput {
	return o
}

func (o FlockerVolumeSourcePatchPtrOutput) Elem() FlockerVolumeSourcePatchOutput {
	return o.ApplyT(func(v *FlockerVolumeSourcePatch) FlockerVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret FlockerVolumeSourcePatch
		return ret
	}).(FlockerVolumeSourcePatchOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o FlockerVolumeSourcePatchPtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlockerVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o FlockerVolumeSourcePatchPtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlockerVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSource struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// GCEPersistentDiskVolumeSourceInput is an input type that accepts GCEPersistentDiskVolumeSourceArgs and GCEPersistentDiskVolumeSourceOutput values.
// You can construct a concrete instance of `GCEPersistentDiskVolumeSourceInput` via:
//
//	GCEPersistentDiskVolumeSourceArgs{...}
type GCEPersistentDiskVolumeSourceInput interface {
	pulumi.Input

	ToGCEPersistentDiskVolumeSourceOutput() GCEPersistentDiskVolumeSourceOutput
	ToGCEPersistentDiskVolumeSourceOutputWithContext(context.Context) GCEPersistentDiskVolumeSourceOutput
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSourceArgs struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringInput `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GCEPersistentDiskVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCEPersistentDiskVolumeSource)(nil)).Elem()
}

func (i GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourceOutput() GCEPersistentDiskVolumeSourceOutput {
	return i.ToGCEPersistentDiskVolumeSourceOutputWithContext(context.Background())
}

func (i GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourceOutput)
}

func (i GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourcePtrOutput() GCEPersistentDiskVolumeSourcePtrOutput {
	return i.ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GCEPersistentDiskVolumeSourceArgs) ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourceOutput).ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(ctx)
}

// GCEPersistentDiskVolumeSourcePtrInput is an input type that accepts GCEPersistentDiskVolumeSourceArgs, GCEPersistentDiskVolumeSourcePtr and GCEPersistentDiskVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GCEPersistentDiskVolumeSourcePtrInput` via:
//
//	        GCEPersistentDiskVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type GCEPersistentDiskVolumeSourcePtrInput interface {
	pulumi.Input

	ToGCEPersistentDiskVolumeSourcePtrOutput() GCEPersistentDiskVolumeSourcePtrOutput
	ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(context.Context) GCEPersistentDiskVolumeSourcePtrOutput
}

type gcepersistentDiskVolumeSourcePtrType GCEPersistentDiskVolumeSourceArgs

func GCEPersistentDiskVolumeSourcePtr(v *GCEPersistentDiskVolumeSourceArgs) GCEPersistentDiskVolumeSourcePtrInput {
	return (*gcepersistentDiskVolumeSourcePtrType)(v)
}

func (*gcepersistentDiskVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCEPersistentDiskVolumeSource)(nil)).Elem()
}

func (i *gcepersistentDiskVolumeSourcePtrType) ToGCEPersistentDiskVolumeSourcePtrOutput() GCEPersistentDiskVolumeSourcePtrOutput {
	return i.ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *gcepersistentDiskVolumeSourcePtrType) ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourcePtrOutput)
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSourceOutput struct{ *pulumi.OutputState }

func (GCEPersistentDiskVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCEPersistentDiskVolumeSource)(nil)).Elem()
}

func (o GCEPersistentDiskVolumeSourceOutput) ToGCEPersistentDiskVolumeSourceOutput() GCEPersistentDiskVolumeSourceOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourceOutput) ToGCEPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourceOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourceOutput) ToGCEPersistentDiskVolumeSourcePtrOutput() GCEPersistentDiskVolumeSourcePtrOutput {
	return o.ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GCEPersistentDiskVolumeSourceOutput) ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCEPersistentDiskVolumeSource) *GCEPersistentDiskVolumeSource {
		return &v
	}).(GCEPersistentDiskVolumeSourcePtrOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourceOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSource) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourceOutput) PdName() pulumi.StringOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSource) string { return v.PdName }).(pulumi.StringOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GCEPersistentDiskVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GCEPersistentDiskVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCEPersistentDiskVolumeSource)(nil)).Elem()
}

func (o GCEPersistentDiskVolumeSourcePtrOutput) ToGCEPersistentDiskVolumeSourcePtrOutput() GCEPersistentDiskVolumeSourcePtrOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePtrOutput) ToGCEPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePtrOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePtrOutput) Elem() GCEPersistentDiskVolumeSourceOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSource) GCEPersistentDiskVolumeSource {
		if v != nil {
			return *v
		}
		var ret GCEPersistentDiskVolumeSource
		return ret
	}).(GCEPersistentDiskVolumeSourceOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.PdName
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSourcePatch struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName *string `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// GCEPersistentDiskVolumeSourcePatchInput is an input type that accepts GCEPersistentDiskVolumeSourcePatchArgs and GCEPersistentDiskVolumeSourcePatchOutput values.
// You can construct a concrete instance of `GCEPersistentDiskVolumeSourcePatchInput` via:
//
//	GCEPersistentDiskVolumeSourcePatchArgs{...}
type GCEPersistentDiskVolumeSourcePatchInput interface {
	pulumi.Input

	ToGCEPersistentDiskVolumeSourcePatchOutput() GCEPersistentDiskVolumeSourcePatchOutput
	ToGCEPersistentDiskVolumeSourcePatchOutputWithContext(context.Context) GCEPersistentDiskVolumeSourcePatchOutput
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSourcePatchArgs struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringPtrInput `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GCEPersistentDiskVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCEPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (i GCEPersistentDiskVolumeSourcePatchArgs) ToGCEPersistentDiskVolumeSourcePatchOutput() GCEPersistentDiskVolumeSourcePatchOutput {
	return i.ToGCEPersistentDiskVolumeSourcePatchOutputWithContext(context.Background())
}

func (i GCEPersistentDiskVolumeSourcePatchArgs) ToGCEPersistentDiskVolumeSourcePatchOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourcePatchOutput)
}

func (i GCEPersistentDiskVolumeSourcePatchArgs) ToGCEPersistentDiskVolumeSourcePatchPtrOutput() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return i.ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i GCEPersistentDiskVolumeSourcePatchArgs) ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourcePatchOutput).ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx)
}

// GCEPersistentDiskVolumeSourcePatchPtrInput is an input type that accepts GCEPersistentDiskVolumeSourcePatchArgs, GCEPersistentDiskVolumeSourcePatchPtr and GCEPersistentDiskVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `GCEPersistentDiskVolumeSourcePatchPtrInput` via:
//
//	        GCEPersistentDiskVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type GCEPersistentDiskVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToGCEPersistentDiskVolumeSourcePatchPtrOutput() GCEPersistentDiskVolumeSourcePatchPtrOutput
	ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Context) GCEPersistentDiskVolumeSourcePatchPtrOutput
}

type gcepersistentDiskVolumeSourcePatchPtrType GCEPersistentDiskVolumeSourcePatchArgs

func GCEPersistentDiskVolumeSourcePatchPtr(v *GCEPersistentDiskVolumeSourcePatchArgs) GCEPersistentDiskVolumeSourcePatchPtrInput {
	return (*gcepersistentDiskVolumeSourcePatchPtrType)(v)
}

func (*gcepersistentDiskVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCEPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (i *gcepersistentDiskVolumeSourcePatchPtrType) ToGCEPersistentDiskVolumeSourcePatchPtrOutput() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return i.ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *gcepersistentDiskVolumeSourcePatchPtrType) ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCEPersistentDiskVolumeSourcePatchPtrOutput)
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (GCEPersistentDiskVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCEPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (o GCEPersistentDiskVolumeSourcePatchOutput) ToGCEPersistentDiskVolumeSourcePatchOutput() GCEPersistentDiskVolumeSourcePatchOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePatchOutput) ToGCEPersistentDiskVolumeSourcePatchOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePatchOutput) ToGCEPersistentDiskVolumeSourcePatchPtrOutput() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o GCEPersistentDiskVolumeSourcePatchOutput) ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCEPersistentDiskVolumeSourcePatch) *GCEPersistentDiskVolumeSourcePatch {
		return &v
	}).(GCEPersistentDiskVolumeSourcePatchPtrOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSourcePatch) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSourcePatch) *string { return v.PdName }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GCEPersistentDiskVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GCEPersistentDiskVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (GCEPersistentDiskVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCEPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) ToGCEPersistentDiskVolumeSourcePatchPtrOutput() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) ToGCEPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) Elem() GCEPersistentDiskVolumeSourcePatchOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSourcePatch) GCEPersistentDiskVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret GCEPersistentDiskVolumeSourcePatch
		return ret
	}).(GCEPersistentDiskVolumeSourcePatchOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.PdName
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o GCEPersistentDiskVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GCEPersistentDiskVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

type GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// GRPCActionInput is an input type that accepts GRPCActionArgs and GRPCActionOutput values.
// You can construct a concrete instance of `GRPCActionInput` via:
//
//	GRPCActionArgs{...}
type GRPCActionInput interface {
	pulumi.Input

	ToGRPCActionOutput() GRPCActionOutput
	ToGRPCActionOutputWithContext(context.Context) GRPCActionOutput
}

type GRPCActionArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GRPCActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCAction)(nil)).Elem()
}

func (i GRPCActionArgs) ToGRPCActionOutput() GRPCActionOutput {
	return i.ToGRPCActionOutputWithContext(context.Background())
}

func (i GRPCActionArgs) ToGRPCActionOutputWithContext(ctx context.Context) GRPCActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionOutput)
}

func (i GRPCActionArgs) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return i.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (i GRPCActionArgs) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionOutput).ToGRPCActionPtrOutputWithContext(ctx)
}

// GRPCActionPtrInput is an input type that accepts GRPCActionArgs, GRPCActionPtr and GRPCActionPtrOutput values.
// You can construct a concrete instance of `GRPCActionPtrInput` via:
//
//	        GRPCActionArgs{...}
//
//	or:
//
//	        nil
type GRPCActionPtrInput interface {
	pulumi.Input

	ToGRPCActionPtrOutput() GRPCActionPtrOutput
	ToGRPCActionPtrOutputWithContext(context.Context) GRPCActionPtrOutput
}

type grpcactionPtrType GRPCActionArgs

func GRPCActionPtr(v *GRPCActionArgs) GRPCActionPtrInput {
	return (*grpcactionPtrType)(v)
}

func (*grpcactionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCAction)(nil)).Elem()
}

func (i *grpcactionPtrType) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return i.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (i *grpcactionPtrType) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionPtrOutput)
}

type GRPCActionOutput struct{ *pulumi.OutputState }

func (GRPCActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCAction)(nil)).Elem()
}

func (o GRPCActionOutput) ToGRPCActionOutput() GRPCActionOutput {
	return o
}

func (o GRPCActionOutput) ToGRPCActionOutputWithContext(ctx context.Context) GRPCActionOutput {
	return o
}

func (o GRPCActionOutput) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return o.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (o GRPCActionOutput) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCAction) *GRPCAction {
		return &v
	}).(GRPCActionPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GRPCAction) int { return v.Port }).(pulumi.IntOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCAction) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GRPCActionPtrOutput struct{ *pulumi.OutputState }

func (GRPCActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCAction)(nil)).Elem()
}

func (o GRPCActionPtrOutput) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return o
}

func (o GRPCActionPtrOutput) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return o
}

func (o GRPCActionPtrOutput) Elem() GRPCActionOutput {
	return o.ApplyT(func(v *GRPCAction) GRPCAction {
		if v != nil {
			return *v
		}
		var ret GRPCAction
		return ret
	}).(GRPCActionOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCAction) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCAction) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

type GRPCActionPatch struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// GRPCActionPatchInput is an input type that accepts GRPCActionPatchArgs and GRPCActionPatchOutput values.
// You can construct a concrete instance of `GRPCActionPatchInput` via:
//
//	GRPCActionPatchArgs{...}
type GRPCActionPatchInput interface {
	pulumi.Input

	ToGRPCActionPatchOutput() GRPCActionPatchOutput
	ToGRPCActionPatchOutputWithContext(context.Context) GRPCActionPatchOutput
}

type GRPCActionPatchArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GRPCActionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCActionPatch)(nil)).Elem()
}

func (i GRPCActionPatchArgs) ToGRPCActionPatchOutput() GRPCActionPatchOutput {
	return i.ToGRPCActionPatchOutputWithContext(context.Background())
}

func (i GRPCActionPatchArgs) ToGRPCActionPatchOutputWithContext(ctx context.Context) GRPCActionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionPatchOutput)
}

func (i GRPCActionPatchArgs) ToGRPCActionPatchPtrOutput() GRPCActionPatchPtrOutput {
	return i.ToGRPCActionPatchPtrOutputWithContext(context.Background())
}

func (i GRPCActionPatchArgs) ToGRPCActionPatchPtrOutputWithContext(ctx context.Context) GRPCActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionPatchOutput).ToGRPCActionPatchPtrOutputWithContext(ctx)
}

// GRPCActionPatchPtrInput is an input type that accepts GRPCActionPatchArgs, GRPCActionPatchPtr and GRPCActionPatchPtrOutput values.
// You can construct a concrete instance of `GRPCActionPatchPtrInput` via:
//
//	        GRPCActionPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCActionPatchPtrInput interface {
	pulumi.Input

	ToGRPCActionPatchPtrOutput() GRPCActionPatchPtrOutput
	ToGRPCActionPatchPtrOutputWithContext(context.Context) GRPCActionPatchPtrOutput
}

type grpcactionPatchPtrType GRPCActionPatchArgs

func GRPCActionPatchPtr(v *GRPCActionPatchArgs) GRPCActionPatchPtrInput {
	return (*grpcactionPatchPtrType)(v)
}

func (*grpcactionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCActionPatch)(nil)).Elem()
}

func (i *grpcactionPatchPtrType) ToGRPCActionPatchPtrOutput() GRPCActionPatchPtrOutput {
	return i.ToGRPCActionPatchPtrOutputWithContext(context.Background())
}

func (i *grpcactionPatchPtrType) ToGRPCActionPatchPtrOutputWithContext(ctx context.Context) GRPCActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionPatchPtrOutput)
}

type GRPCActionPatchOutput struct{ *pulumi.OutputState }

func (GRPCActionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCActionPatch)(nil)).Elem()
}

func (o GRPCActionPatchOutput) ToGRPCActionPatchOutput() GRPCActionPatchOutput {
	return o
}

func (o GRPCActionPatchOutput) ToGRPCActionPatchOutputWithContext(ctx context.Context) GRPCActionPatchOutput {
	return o
}

func (o GRPCActionPatchOutput) ToGRPCActionPatchPtrOutput() GRPCActionPatchPtrOutput {
	return o.ToGRPCActionPatchPtrOutputWithContext(context.Background())
}

func (o GRPCActionPatchOutput) ToGRPCActionPatchPtrOutputWithContext(ctx context.Context) GRPCActionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCActionPatch) *GRPCActionPatch {
		return &v
	}).(GRPCActionPatchPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCActionPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCActionPatch) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GRPCActionPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCActionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCActionPatch)(nil)).Elem()
}

func (o GRPCActionPatchPtrOutput) ToGRPCActionPatchPtrOutput() GRPCActionPatchPtrOutput {
	return o
}

func (o GRPCActionPatchPtrOutput) ToGRPCActionPatchPtrOutputWithContext(ctx context.Context) GRPCActionPatchPtrOutput {
	return o
}

func (o GRPCActionPatchPtrOutput) Elem() GRPCActionPatchOutput {
	return o.ApplyT(func(v *GRPCActionPatch) GRPCActionPatch {
		if v != nil {
			return *v
		}
		var ret GRPCActionPatch
		return ret
	}).(GRPCActionPatchOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCActionPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCActionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSource struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// repository is the URL
	Repository string `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeSourceInput is an input type that accepts GitRepoVolumeSourceArgs and GitRepoVolumeSourceOutput values.
// You can construct a concrete instance of `GitRepoVolumeSourceInput` via:
//
//	GitRepoVolumeSourceArgs{...}
type GitRepoVolumeSourceInput interface {
	pulumi.Input

	ToGitRepoVolumeSourceOutput() GitRepoVolumeSourceOutput
	ToGitRepoVolumeSourceOutputWithContext(context.Context) GitRepoVolumeSourceOutput
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSourceArgs struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// repository is the URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeSource)(nil)).Elem()
}

func (i GitRepoVolumeSourceArgs) ToGitRepoVolumeSourceOutput() GitRepoVolumeSourceOutput {
	return i.ToGitRepoVolumeSourceOutputWithContext(context.Background())
}

func (i GitRepoVolumeSourceArgs) ToGitRepoVolumeSourceOutputWithContext(ctx context.Context) GitRepoVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourceOutput)
}

func (i GitRepoVolumeSourceArgs) ToGitRepoVolumeSourcePtrOutput() GitRepoVolumeSourcePtrOutput {
	return i.ToGitRepoVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeSourceArgs) ToGitRepoVolumeSourcePtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourceOutput).ToGitRepoVolumeSourcePtrOutputWithContext(ctx)
}

// GitRepoVolumeSourcePtrInput is an input type that accepts GitRepoVolumeSourceArgs, GitRepoVolumeSourcePtr and GitRepoVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GitRepoVolumeSourcePtrInput` via:
//
//	        GitRepoVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type GitRepoVolumeSourcePtrInput interface {
	pulumi.Input

	ToGitRepoVolumeSourcePtrOutput() GitRepoVolumeSourcePtrOutput
	ToGitRepoVolumeSourcePtrOutputWithContext(context.Context) GitRepoVolumeSourcePtrOutput
}

type gitRepoVolumeSourcePtrType GitRepoVolumeSourceArgs

func GitRepoVolumeSourcePtr(v *GitRepoVolumeSourceArgs) GitRepoVolumeSourcePtrInput {
	return (*gitRepoVolumeSourcePtrType)(v)
}

func (*gitRepoVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeSource)(nil)).Elem()
}

func (i *gitRepoVolumeSourcePtrType) ToGitRepoVolumeSourcePtrOutput() GitRepoVolumeSourcePtrOutput {
	return i.ToGitRepoVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumeSourcePtrType) ToGitRepoVolumeSourcePtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourcePtrOutput)
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSourceOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeSource)(nil)).Elem()
}

func (o GitRepoVolumeSourceOutput) ToGitRepoVolumeSourceOutput() GitRepoVolumeSourceOutput {
	return o
}

func (o GitRepoVolumeSourceOutput) ToGitRepoVolumeSourceOutputWithContext(ctx context.Context) GitRepoVolumeSourceOutput {
	return o
}

func (o GitRepoVolumeSourceOutput) ToGitRepoVolumeSourcePtrOutput() GitRepoVolumeSourcePtrOutput {
	return o.ToGitRepoVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeSourceOutput) ToGitRepoVolumeSourcePtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepoVolumeSource) *GitRepoVolumeSource {
		return &v
	}).(GitRepoVolumeSourcePtrOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeSourceOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeSource) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o GitRepoVolumeSourceOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolumeSource) string { return v.Repository }).(pulumi.StringOutput)
}

// revision is the commit hash for the specified revision.
func (o GitRepoVolumeSourceOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeSource) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeSource)(nil)).Elem()
}

func (o GitRepoVolumeSourcePtrOutput) ToGitRepoVolumeSourcePtrOutput() GitRepoVolumeSourcePtrOutput {
	return o
}

func (o GitRepoVolumeSourcePtrOutput) ToGitRepoVolumeSourcePtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePtrOutput {
	return o
}

func (o GitRepoVolumeSourcePtrOutput) Elem() GitRepoVolumeSourceOutput {
	return o.ApplyT(func(v *GitRepoVolumeSource) GitRepoVolumeSource {
		if v != nil {
			return *v
		}
		var ret GitRepoVolumeSource
		return ret
	}).(GitRepoVolumeSourceOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeSourcePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o GitRepoVolumeSourcePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o GitRepoVolumeSourcePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSourcePatch struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// repository is the URL
	Repository *string `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeSourcePatchInput is an input type that accepts GitRepoVolumeSourcePatchArgs and GitRepoVolumeSourcePatchOutput values.
// You can construct a concrete instance of `GitRepoVolumeSourcePatchInput` via:
//
//	GitRepoVolumeSourcePatchArgs{...}
type GitRepoVolumeSourcePatchInput interface {
	pulumi.Input

	ToGitRepoVolumeSourcePatchOutput() GitRepoVolumeSourcePatchOutput
	ToGitRepoVolumeSourcePatchOutputWithContext(context.Context) GitRepoVolumeSourcePatchOutput
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSourcePatchArgs struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// repository is the URL
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeSourcePatch)(nil)).Elem()
}

func (i GitRepoVolumeSourcePatchArgs) ToGitRepoVolumeSourcePatchOutput() GitRepoVolumeSourcePatchOutput {
	return i.ToGitRepoVolumeSourcePatchOutputWithContext(context.Background())
}

func (i GitRepoVolumeSourcePatchArgs) ToGitRepoVolumeSourcePatchOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourcePatchOutput)
}

func (i GitRepoVolumeSourcePatchArgs) ToGitRepoVolumeSourcePatchPtrOutput() GitRepoVolumeSourcePatchPtrOutput {
	return i.ToGitRepoVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeSourcePatchArgs) ToGitRepoVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourcePatchOutput).ToGitRepoVolumeSourcePatchPtrOutputWithContext(ctx)
}

// GitRepoVolumeSourcePatchPtrInput is an input type that accepts GitRepoVolumeSourcePatchArgs, GitRepoVolumeSourcePatchPtr and GitRepoVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `GitRepoVolumeSourcePatchPtrInput` via:
//
//	        GitRepoVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type GitRepoVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToGitRepoVolumeSourcePatchPtrOutput() GitRepoVolumeSourcePatchPtrOutput
	ToGitRepoVolumeSourcePatchPtrOutputWithContext(context.Context) GitRepoVolumeSourcePatchPtrOutput
}

type gitRepoVolumeSourcePatchPtrType GitRepoVolumeSourcePatchArgs

func GitRepoVolumeSourcePatchPtr(v *GitRepoVolumeSourcePatchArgs) GitRepoVolumeSourcePatchPtrInput {
	return (*gitRepoVolumeSourcePatchPtrType)(v)
}

func (*gitRepoVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeSourcePatch)(nil)).Elem()
}

func (i *gitRepoVolumeSourcePatchPtrType) ToGitRepoVolumeSourcePatchPtrOutput() GitRepoVolumeSourcePatchPtrOutput {
	return i.ToGitRepoVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumeSourcePatchPtrType) ToGitRepoVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeSourcePatchPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type GitRepoVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeSourcePatch)(nil)).Elem()
}

func (o GitRepoVolumeSourcePatchOutput) ToGitRepoVolumeSourcePatchOutput() GitRepoVolumeSourcePatchOutput {
	return o
}

func (o GitRepoVolumeSourcePatchOutput) ToGitRepoVolumeSourcePatchOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchOutput {
	return o
}

func (o GitRepoVolumeSourcePatchOutput) ToGitRepoVolumeSourcePatchPtrOutput() GitRepoVolumeSourcePatchPtrOutput {
	return o.ToGitRepoVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeSourcePatchOutput) ToGitRepoVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepoVolumeSourcePatch) *GitRepoVolumeSourcePatch {
		return &v
	}).(GitRepoVolumeSourcePatchPtrOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeSourcePatchOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeSourcePatch) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o GitRepoVolumeSourcePatchOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeSourcePatch) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o GitRepoVolumeSourcePatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeSourcePatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeSourcePatch)(nil)).Elem()
}

func (o GitRepoVolumeSourcePatchPtrOutput) ToGitRepoVolumeSourcePatchPtrOutput() GitRepoVolumeSourcePatchPtrOutput {
	return o
}

func (o GitRepoVolumeSourcePatchPtrOutput) ToGitRepoVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GitRepoVolumeSourcePatchPtrOutput {
	return o
}

func (o GitRepoVolumeSourcePatchPtrOutput) Elem() GitRepoVolumeSourcePatchOutput {
	return o.ApplyT(func(v *GitRepoVolumeSourcePatch) GitRepoVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret GitRepoVolumeSourcePatch
		return ret
	}).(GitRepoVolumeSourcePatchOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeSourcePatchPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o GitRepoVolumeSourcePatchPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o GitRepoVolumeSourcePatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSource struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `pulumi:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace *string `pulumi:"endpointsNamespace"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// GlusterfsPersistentVolumeSourceInput is an input type that accepts GlusterfsPersistentVolumeSourceArgs and GlusterfsPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `GlusterfsPersistentVolumeSourceInput` via:
//
//	GlusterfsPersistentVolumeSourceArgs{...}
type GlusterfsPersistentVolumeSourceInput interface {
	pulumi.Input

	ToGlusterfsPersistentVolumeSourceOutput() GlusterfsPersistentVolumeSourceOutput
	ToGlusterfsPersistentVolumeSourceOutputWithContext(context.Context) GlusterfsPersistentVolumeSourceOutput
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSourceArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringInput `pulumi:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace pulumi.StringPtrInput `pulumi:"endpointsNamespace"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GlusterfsPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsPersistentVolumeSource)(nil)).Elem()
}

func (i GlusterfsPersistentVolumeSourceArgs) ToGlusterfsPersistentVolumeSourceOutput() GlusterfsPersistentVolumeSourceOutput {
	return i.ToGlusterfsPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i GlusterfsPersistentVolumeSourceArgs) ToGlusterfsPersistentVolumeSourceOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourceOutput)
}

func (i GlusterfsPersistentVolumeSourceArgs) ToGlusterfsPersistentVolumeSourcePtrOutput() GlusterfsPersistentVolumeSourcePtrOutput {
	return i.ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GlusterfsPersistentVolumeSourceArgs) ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourceOutput).ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// GlusterfsPersistentVolumeSourcePtrInput is an input type that accepts GlusterfsPersistentVolumeSourceArgs, GlusterfsPersistentVolumeSourcePtr and GlusterfsPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GlusterfsPersistentVolumeSourcePtrInput` via:
//
//	        GlusterfsPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type GlusterfsPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToGlusterfsPersistentVolumeSourcePtrOutput() GlusterfsPersistentVolumeSourcePtrOutput
	ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(context.Context) GlusterfsPersistentVolumeSourcePtrOutput
}

type glusterfsPersistentVolumeSourcePtrType GlusterfsPersistentVolumeSourceArgs

func GlusterfsPersistentVolumeSourcePtr(v *GlusterfsPersistentVolumeSourceArgs) GlusterfsPersistentVolumeSourcePtrInput {
	return (*glusterfsPersistentVolumeSourcePtrType)(v)
}

func (*glusterfsPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsPersistentVolumeSource)(nil)).Elem()
}

func (i *glusterfsPersistentVolumeSourcePtrType) ToGlusterfsPersistentVolumeSourcePtrOutput() GlusterfsPersistentVolumeSourcePtrOutput {
	return i.ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *glusterfsPersistentVolumeSourcePtrType) ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourcePtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (GlusterfsPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsPersistentVolumeSource)(nil)).Elem()
}

func (o GlusterfsPersistentVolumeSourceOutput) ToGlusterfsPersistentVolumeSourceOutput() GlusterfsPersistentVolumeSourceOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourceOutput) ToGlusterfsPersistentVolumeSourceOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourceOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourceOutput) ToGlusterfsPersistentVolumeSourcePtrOutput() GlusterfsPersistentVolumeSourcePtrOutput {
	return o.ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GlusterfsPersistentVolumeSourceOutput) ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlusterfsPersistentVolumeSource) *GlusterfsPersistentVolumeSource {
		return &v
	}).(GlusterfsPersistentVolumeSourcePtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourceOutput) Endpoints() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSource) string { return v.Endpoints }).(pulumi.StringOutput)
}

// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourceOutput) EndpointsNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSource) *string { return v.EndpointsNamespace }).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSource) string { return v.Path }).(pulumi.StringOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GlusterfsPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GlusterfsPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsPersistentVolumeSource)(nil)).Elem()
}

func (o GlusterfsPersistentVolumeSourcePtrOutput) ToGlusterfsPersistentVolumeSourcePtrOutput() GlusterfsPersistentVolumeSourcePtrOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePtrOutput) ToGlusterfsPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePtrOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePtrOutput) Elem() GlusterfsPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSource) GlusterfsPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret GlusterfsPersistentVolumeSource
		return ret
	}).(GlusterfsPersistentVolumeSourceOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePtrOutput) EndpointsNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.EndpointsNamespace
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSourcePatch struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints *string `pulumi:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace *string `pulumi:"endpointsNamespace"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path *string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// GlusterfsPersistentVolumeSourcePatchInput is an input type that accepts GlusterfsPersistentVolumeSourcePatchArgs and GlusterfsPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `GlusterfsPersistentVolumeSourcePatchInput` via:
//
//	GlusterfsPersistentVolumeSourcePatchArgs{...}
type GlusterfsPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToGlusterfsPersistentVolumeSourcePatchOutput() GlusterfsPersistentVolumeSourcePatchOutput
	ToGlusterfsPersistentVolumeSourcePatchOutputWithContext(context.Context) GlusterfsPersistentVolumeSourcePatchOutput
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSourcePatchArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringPtrInput `pulumi:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace pulumi.StringPtrInput `pulumi:"endpointsNamespace"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GlusterfsPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i GlusterfsPersistentVolumeSourcePatchArgs) ToGlusterfsPersistentVolumeSourcePatchOutput() GlusterfsPersistentVolumeSourcePatchOutput {
	return i.ToGlusterfsPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i GlusterfsPersistentVolumeSourcePatchArgs) ToGlusterfsPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourcePatchOutput)
}

func (i GlusterfsPersistentVolumeSourcePatchArgs) ToGlusterfsPersistentVolumeSourcePatchPtrOutput() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return i.ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i GlusterfsPersistentVolumeSourcePatchArgs) ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourcePatchOutput).ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// GlusterfsPersistentVolumeSourcePatchPtrInput is an input type that accepts GlusterfsPersistentVolumeSourcePatchArgs, GlusterfsPersistentVolumeSourcePatchPtr and GlusterfsPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `GlusterfsPersistentVolumeSourcePatchPtrInput` via:
//
//	        GlusterfsPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type GlusterfsPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToGlusterfsPersistentVolumeSourcePatchPtrOutput() GlusterfsPersistentVolumeSourcePatchPtrOutput
	ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) GlusterfsPersistentVolumeSourcePatchPtrOutput
}

type glusterfsPersistentVolumeSourcePatchPtrType GlusterfsPersistentVolumeSourcePatchArgs

func GlusterfsPersistentVolumeSourcePatchPtr(v *GlusterfsPersistentVolumeSourcePatchArgs) GlusterfsPersistentVolumeSourcePatchPtrInput {
	return (*glusterfsPersistentVolumeSourcePatchPtrType)(v)
}

func (*glusterfsPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *glusterfsPersistentVolumeSourcePatchPtrType) ToGlusterfsPersistentVolumeSourcePatchPtrOutput() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return i.ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *glusterfsPersistentVolumeSourcePatchPtrType) ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsPersistentVolumeSourcePatchPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (GlusterfsPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o GlusterfsPersistentVolumeSourcePatchOutput) ToGlusterfsPersistentVolumeSourcePatchOutput() GlusterfsPersistentVolumeSourcePatchOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePatchOutput) ToGlusterfsPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePatchOutput) ToGlusterfsPersistentVolumeSourcePatchPtrOutput() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o.ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o GlusterfsPersistentVolumeSourcePatchOutput) ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlusterfsPersistentVolumeSourcePatch) *GlusterfsPersistentVolumeSourcePatch {
		return &v
	}).(GlusterfsPersistentVolumeSourcePatchPtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSourcePatch) *string { return v.Endpoints }).(pulumi.StringPtrOutput)
}

// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchOutput) EndpointsNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSourcePatch) *string { return v.EndpointsNamespace }).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlusterfsPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GlusterfsPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (GlusterfsPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) ToGlusterfsPersistentVolumeSourcePatchPtrOutput() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) ToGlusterfsPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) Elem() GlusterfsPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSourcePatch) GlusterfsPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret GlusterfsPersistentVolumeSourcePatch
		return ret
	}).(GlusterfsPersistentVolumeSourcePatchOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) EndpointsNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.EndpointsNamespace
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlusterfsPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSource struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// GlusterfsVolumeSourceInput is an input type that accepts GlusterfsVolumeSourceArgs and GlusterfsVolumeSourceOutput values.
// You can construct a concrete instance of `GlusterfsVolumeSourceInput` via:
//
//	GlusterfsVolumeSourceArgs{...}
type GlusterfsVolumeSourceInput interface {
	pulumi.Input

	ToGlusterfsVolumeSourceOutput() GlusterfsVolumeSourceOutput
	ToGlusterfsVolumeSourceOutputWithContext(context.Context) GlusterfsVolumeSourceOutput
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSourceArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringInput `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GlusterfsVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsVolumeSource)(nil)).Elem()
}

func (i GlusterfsVolumeSourceArgs) ToGlusterfsVolumeSourceOutput() GlusterfsVolumeSourceOutput {
	return i.ToGlusterfsVolumeSourceOutputWithContext(context.Background())
}

func (i GlusterfsVolumeSourceArgs) ToGlusterfsVolumeSourceOutputWithContext(ctx context.Context) GlusterfsVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourceOutput)
}

func (i GlusterfsVolumeSourceArgs) ToGlusterfsVolumeSourcePtrOutput() GlusterfsVolumeSourcePtrOutput {
	return i.ToGlusterfsVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GlusterfsVolumeSourceArgs) ToGlusterfsVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourceOutput).ToGlusterfsVolumeSourcePtrOutputWithContext(ctx)
}

// GlusterfsVolumeSourcePtrInput is an input type that accepts GlusterfsVolumeSourceArgs, GlusterfsVolumeSourcePtr and GlusterfsVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GlusterfsVolumeSourcePtrInput` via:
//
//	        GlusterfsVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type GlusterfsVolumeSourcePtrInput interface {
	pulumi.Input

	ToGlusterfsVolumeSourcePtrOutput() GlusterfsVolumeSourcePtrOutput
	ToGlusterfsVolumeSourcePtrOutputWithContext(context.Context) GlusterfsVolumeSourcePtrOutput
}

type glusterfsVolumeSourcePtrType GlusterfsVolumeSourceArgs

func GlusterfsVolumeSourcePtr(v *GlusterfsVolumeSourceArgs) GlusterfsVolumeSourcePtrInput {
	return (*glusterfsVolumeSourcePtrType)(v)
}

func (*glusterfsVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsVolumeSource)(nil)).Elem()
}

func (i *glusterfsVolumeSourcePtrType) ToGlusterfsVolumeSourcePtrOutput() GlusterfsVolumeSourcePtrOutput {
	return i.ToGlusterfsVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *glusterfsVolumeSourcePtrType) ToGlusterfsVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourcePtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSourceOutput struct{ *pulumi.OutputState }

func (GlusterfsVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsVolumeSource)(nil)).Elem()
}

func (o GlusterfsVolumeSourceOutput) ToGlusterfsVolumeSourceOutput() GlusterfsVolumeSourceOutput {
	return o
}

func (o GlusterfsVolumeSourceOutput) ToGlusterfsVolumeSourceOutputWithContext(ctx context.Context) GlusterfsVolumeSourceOutput {
	return o
}

func (o GlusterfsVolumeSourceOutput) ToGlusterfsVolumeSourcePtrOutput() GlusterfsVolumeSourcePtrOutput {
	return o.ToGlusterfsVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GlusterfsVolumeSourceOutput) ToGlusterfsVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlusterfsVolumeSource) *GlusterfsVolumeSource {
		return &v
	}).(GlusterfsVolumeSourcePtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourceOutput) Endpoints() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterfsVolumeSource) string { return v.Endpoints }).(pulumi.StringOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterfsVolumeSource) string { return v.Path }).(pulumi.StringOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlusterfsVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GlusterfsVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GlusterfsVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsVolumeSource)(nil)).Elem()
}

func (o GlusterfsVolumeSourcePtrOutput) ToGlusterfsVolumeSourcePtrOutput() GlusterfsVolumeSourcePtrOutput {
	return o
}

func (o GlusterfsVolumeSourcePtrOutput) ToGlusterfsVolumeSourcePtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePtrOutput {
	return o
}

func (o GlusterfsVolumeSourcePtrOutput) Elem() GlusterfsVolumeSourceOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSource) GlusterfsVolumeSource {
		if v != nil {
			return *v
		}
		var ret GlusterfsVolumeSource
		return ret
	}).(GlusterfsVolumeSourceOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSourcePatch struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints *string `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path *string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// GlusterfsVolumeSourcePatchInput is an input type that accepts GlusterfsVolumeSourcePatchArgs and GlusterfsVolumeSourcePatchOutput values.
// You can construct a concrete instance of `GlusterfsVolumeSourcePatchInput` via:
//
//	GlusterfsVolumeSourcePatchArgs{...}
type GlusterfsVolumeSourcePatchInput interface {
	pulumi.Input

	ToGlusterfsVolumeSourcePatchOutput() GlusterfsVolumeSourcePatchOutput
	ToGlusterfsVolumeSourcePatchOutputWithContext(context.Context) GlusterfsVolumeSourcePatchOutput
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSourcePatchArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringPtrInput `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (GlusterfsVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsVolumeSourcePatch)(nil)).Elem()
}

func (i GlusterfsVolumeSourcePatchArgs) ToGlusterfsVolumeSourcePatchOutput() GlusterfsVolumeSourcePatchOutput {
	return i.ToGlusterfsVolumeSourcePatchOutputWithContext(context.Background())
}

func (i GlusterfsVolumeSourcePatchArgs) ToGlusterfsVolumeSourcePatchOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourcePatchOutput)
}

func (i GlusterfsVolumeSourcePatchArgs) ToGlusterfsVolumeSourcePatchPtrOutput() GlusterfsVolumeSourcePatchPtrOutput {
	return i.ToGlusterfsVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i GlusterfsVolumeSourcePatchArgs) ToGlusterfsVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourcePatchOutput).ToGlusterfsVolumeSourcePatchPtrOutputWithContext(ctx)
}

// GlusterfsVolumeSourcePatchPtrInput is an input type that accepts GlusterfsVolumeSourcePatchArgs, GlusterfsVolumeSourcePatchPtr and GlusterfsVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `GlusterfsVolumeSourcePatchPtrInput` via:
//
//	        GlusterfsVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type GlusterfsVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToGlusterfsVolumeSourcePatchPtrOutput() GlusterfsVolumeSourcePatchPtrOutput
	ToGlusterfsVolumeSourcePatchPtrOutputWithContext(context.Context) GlusterfsVolumeSourcePatchPtrOutput
}

type glusterfsVolumeSourcePatchPtrType GlusterfsVolumeSourcePatchArgs

func GlusterfsVolumeSourcePatchPtr(v *GlusterfsVolumeSourcePatchArgs) GlusterfsVolumeSourcePatchPtrInput {
	return (*glusterfsVolumeSourcePatchPtrType)(v)
}

func (*glusterfsVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsVolumeSourcePatch)(nil)).Elem()
}

func (i *glusterfsVolumeSourcePatchPtrType) ToGlusterfsVolumeSourcePatchPtrOutput() GlusterfsVolumeSourcePatchPtrOutput {
	return i.ToGlusterfsVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *glusterfsVolumeSourcePatchPtrType) ToGlusterfsVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlusterfsVolumeSourcePatchPtrOutput)
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (GlusterfsVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterfsVolumeSourcePatch)(nil)).Elem()
}

func (o GlusterfsVolumeSourcePatchOutput) ToGlusterfsVolumeSourcePatchOutput() GlusterfsVolumeSourcePatchOutput {
	return o
}

func (o GlusterfsVolumeSourcePatchOutput) ToGlusterfsVolumeSourcePatchOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchOutput {
	return o
}

func (o GlusterfsVolumeSourcePatchOutput) ToGlusterfsVolumeSourcePatchPtrOutput() GlusterfsVolumeSourcePatchPtrOutput {
	return o.ToGlusterfsVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o GlusterfsVolumeSourcePatchOutput) ToGlusterfsVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlusterfsVolumeSourcePatch) *GlusterfsVolumeSourcePatch {
		return &v
	}).(GlusterfsVolumeSourcePatchPtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsVolumeSourcePatch) *string { return v.Endpoints }).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlusterfsVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlusterfsVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type GlusterfsVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (GlusterfsVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterfsVolumeSourcePatch)(nil)).Elem()
}

func (o GlusterfsVolumeSourcePatchPtrOutput) ToGlusterfsVolumeSourcePatchPtrOutput() GlusterfsVolumeSourcePatchPtrOutput {
	return o
}

func (o GlusterfsVolumeSourcePatchPtrOutput) ToGlusterfsVolumeSourcePatchPtrOutputWithContext(ctx context.Context) GlusterfsVolumeSourcePatchPtrOutput {
	return o
}

func (o GlusterfsVolumeSourcePatchPtrOutput) Elem() GlusterfsVolumeSourcePatchOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSourcePatch) GlusterfsVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret GlusterfsVolumeSourcePatch
		return ret
	}).(GlusterfsVolumeSourcePatchOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o GlusterfsVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlusterfsVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeader `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// HTTPGetActionInput is an input type that accepts HTTPGetActionArgs and HTTPGetActionOutput values.
// You can construct a concrete instance of `HTTPGetActionInput` via:
//
//	HTTPGetActionArgs{...}
type HTTPGetActionInput interface {
	pulumi.Input

	ToHTTPGetActionOutput() HTTPGetActionOutput
	ToHTTPGetActionOutputWithContext(context.Context) HTTPGetActionOutput
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders HTTPHeaderArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (HTTPGetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return i.ToHTTPGetActionOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput)
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput).ToHTTPGetActionPtrOutputWithContext(ctx)
}

// HTTPGetActionPtrInput is an input type that accepts HTTPGetActionArgs, HTTPGetActionPtr and HTTPGetActionPtrOutput values.
// You can construct a concrete instance of `HTTPGetActionPtrInput` via:
//
//	        HTTPGetActionArgs{...}
//
//	or:
//
//	        nil
type HTTPGetActionPtrInput interface {
	pulumi.Input

	ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput
	ToHTTPGetActionPtrOutputWithContext(context.Context) HTTPGetActionPtrOutput
}

type httpgetActionPtrType HTTPGetActionArgs

func HTTPGetActionPtr(v *HTTPGetActionArgs) HTTPGetActionPtrInput {
	return (*httpgetActionPtrType)(v)
}

func (*httpgetActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionOutput struct{ *pulumi.OutputState }

func (HTTPGetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HTTPGetAction) *HTTPGetAction {
		return &v
	}).(HTTPGetActionPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v HTTPGetAction) []HTTPHeader { return v.HttpHeaders }).(HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o HTTPGetActionOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HTTPGetAction) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type HTTPGetActionPtrOutput struct{ *pulumi.OutputState }

func (HTTPGetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) Elem() HTTPGetActionOutput {
	return o.ApplyT(func(v *HTTPGetAction) HTTPGetAction {
		if v != nil {
			return *v
		}
		var ret HTTPGetAction
		return ret
	}).(HTTPGetActionOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionPtrOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v *HTTPGetAction) []HTTPHeader {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o HTTPGetActionPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *HTTPGetAction) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionPatch struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeaderPatch `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// HTTPGetActionPatchInput is an input type that accepts HTTPGetActionPatchArgs and HTTPGetActionPatchOutput values.
// You can construct a concrete instance of `HTTPGetActionPatchInput` via:
//
//	HTTPGetActionPatchArgs{...}
type HTTPGetActionPatchInput interface {
	pulumi.Input

	ToHTTPGetActionPatchOutput() HTTPGetActionPatchOutput
	ToHTTPGetActionPatchOutputWithContext(context.Context) HTTPGetActionPatchOutput
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionPatchArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders HTTPHeaderPatchArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (HTTPGetActionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetActionPatch)(nil)).Elem()
}

func (i HTTPGetActionPatchArgs) ToHTTPGetActionPatchOutput() HTTPGetActionPatchOutput {
	return i.ToHTTPGetActionPatchOutputWithContext(context.Background())
}

func (i HTTPGetActionPatchArgs) ToHTTPGetActionPatchOutputWithContext(ctx context.Context) HTTPGetActionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPatchOutput)
}

func (i HTTPGetActionPatchArgs) ToHTTPGetActionPatchPtrOutput() HTTPGetActionPatchPtrOutput {
	return i.ToHTTPGetActionPatchPtrOutputWithContext(context.Background())
}

func (i HTTPGetActionPatchArgs) ToHTTPGetActionPatchPtrOutputWithContext(ctx context.Context) HTTPGetActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPatchOutput).ToHTTPGetActionPatchPtrOutputWithContext(ctx)
}

// HTTPGetActionPatchPtrInput is an input type that accepts HTTPGetActionPatchArgs, HTTPGetActionPatchPtr and HTTPGetActionPatchPtrOutput values.
// You can construct a concrete instance of `HTTPGetActionPatchPtrInput` via:
//
//	        HTTPGetActionPatchArgs{...}
//
//	or:
//
//	        nil
type HTTPGetActionPatchPtrInput interface {
	pulumi.Input

	ToHTTPGetActionPatchPtrOutput() HTTPGetActionPatchPtrOutput
	ToHTTPGetActionPatchPtrOutputWithContext(context.Context) HTTPGetActionPatchPtrOutput
}

type httpgetActionPatchPtrType HTTPGetActionPatchArgs

func HTTPGetActionPatchPtr(v *HTTPGetActionPatchArgs) HTTPGetActionPatchPtrInput {
	return (*httpgetActionPatchPtrType)(v)
}

func (*httpgetActionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetActionPatch)(nil)).Elem()
}

func (i *httpgetActionPatchPtrType) ToHTTPGetActionPatchPtrOutput() HTTPGetActionPatchPtrOutput {
	return i.ToHTTPGetActionPatchPtrOutputWithContext(context.Background())
}

func (i *httpgetActionPatchPtrType) ToHTTPGetActionPatchPtrOutputWithContext(ctx context.Context) HTTPGetActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPatchPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionPatchOutput struct{ *pulumi.OutputState }

func (HTTPGetActionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetActionPatch)(nil)).Elem()
}

func (o HTTPGetActionPatchOutput) ToHTTPGetActionPatchOutput() HTTPGetActionPatchOutput {
	return o
}

func (o HTTPGetActionPatchOutput) ToHTTPGetActionPatchOutputWithContext(ctx context.Context) HTTPGetActionPatchOutput {
	return o
}

func (o HTTPGetActionPatchOutput) ToHTTPGetActionPatchPtrOutput() HTTPGetActionPatchPtrOutput {
	return o.ToHTTPGetActionPatchPtrOutputWithContext(context.Background())
}

func (o HTTPGetActionPatchOutput) ToHTTPGetActionPatchPtrOutputWithContext(ctx context.Context) HTTPGetActionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HTTPGetActionPatch) *HTTPGetActionPatch {
		return &v
	}).(HTTPGetActionPatchPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetActionPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionPatchOutput) HttpHeaders() HTTPHeaderPatchArrayOutput {
	return o.ApplyT(func(v HTTPGetActionPatch) []HTTPHeaderPatch { return v.HttpHeaders }).(HTTPHeaderPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetActionPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o HTTPGetActionPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HTTPGetActionPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionPatchOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetActionPatch) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type HTTPGetActionPatchPtrOutput struct{ *pulumi.OutputState }

func (HTTPGetActionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetActionPatch)(nil)).Elem()
}

func (o HTTPGetActionPatchPtrOutput) ToHTTPGetActionPatchPtrOutput() HTTPGetActionPatchPtrOutput {
	return o
}

func (o HTTPGetActionPatchPtrOutput) ToHTTPGetActionPatchPtrOutputWithContext(ctx context.Context) HTTPGetActionPatchPtrOutput {
	return o
}

func (o HTTPGetActionPatchPtrOutput) Elem() HTTPGetActionPatchOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) HTTPGetActionPatch {
		if v != nil {
			return *v
		}
		var ret HTTPGetActionPatch
		return ret
	}).(HTTPGetActionPatchOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionPatchPtrOutput) HttpHeaders() HTTPHeaderPatchArrayOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) []HTTPHeaderPatch {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HTTPHeaderPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o HTTPGetActionPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionPatchPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetActionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeader struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// HTTPHeaderInput is an input type that accepts HTTPHeaderArgs and HTTPHeaderOutput values.
// You can construct a concrete instance of `HTTPHeaderInput` via:
//
//	HTTPHeaderArgs{...}
type HTTPHeaderInput interface {
	pulumi.Input

	ToHTTPHeaderOutput() HTTPHeaderOutput
	ToHTTPHeaderOutputWithContext(context.Context) HTTPHeaderOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (HTTPHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return i.ToHTTPHeaderOutputWithContext(context.Background())
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderOutput)
}

// HTTPHeaderArrayInput is an input type that accepts HTTPHeaderArray and HTTPHeaderArrayOutput values.
// You can construct a concrete instance of `HTTPHeaderArrayInput` via:
//
//	HTTPHeaderArray{ HTTPHeaderArgs{...} }
type HTTPHeaderArrayInput interface {
	pulumi.Input

	ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput
	ToHTTPHeaderArrayOutputWithContext(context.Context) HTTPHeaderArrayOutput
}

type HTTPHeaderArray []HTTPHeaderInput

func (HTTPHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return i.ToHTTPHeaderArrayOutputWithContext(context.Background())
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderOutput struct{ *pulumi.OutputState }

func (HTTPHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return o
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return o
}

// The header field name
func (o HTTPHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o HTTPHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeader) string { return v.Value }).(pulumi.StringOutput)
}

type HTTPHeaderArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) Index(i pulumi.IntInput) HTTPHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeader {
		return vs[0].([]HTTPHeader)[vs[1].(int)]
	}).(HTTPHeaderOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderPatch struct {
	// The header field name
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// HTTPHeaderPatchInput is an input type that accepts HTTPHeaderPatchArgs and HTTPHeaderPatchOutput values.
// You can construct a concrete instance of `HTTPHeaderPatchInput` via:
//
//	HTTPHeaderPatchArgs{...}
type HTTPHeaderPatchInput interface {
	pulumi.Input

	ToHTTPHeaderPatchOutput() HTTPHeaderPatchOutput
	ToHTTPHeaderPatchOutputWithContext(context.Context) HTTPHeaderPatchOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderPatchArgs struct {
	// The header field name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HTTPHeaderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeaderPatch)(nil)).Elem()
}

func (i HTTPHeaderPatchArgs) ToHTTPHeaderPatchOutput() HTTPHeaderPatchOutput {
	return i.ToHTTPHeaderPatchOutputWithContext(context.Background())
}

func (i HTTPHeaderPatchArgs) ToHTTPHeaderPatchOutputWithContext(ctx context.Context) HTTPHeaderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderPatchOutput)
}

// HTTPHeaderPatchArrayInput is an input type that accepts HTTPHeaderPatchArray and HTTPHeaderPatchArrayOutput values.
// You can construct a concrete instance of `HTTPHeaderPatchArrayInput` via:
//
//	HTTPHeaderPatchArray{ HTTPHeaderPatchArgs{...} }
type HTTPHeaderPatchArrayInput interface {
	pulumi.Input

	ToHTTPHeaderPatchArrayOutput() HTTPHeaderPatchArrayOutput
	ToHTTPHeaderPatchArrayOutputWithContext(context.Context) HTTPHeaderPatchArrayOutput
}

type HTTPHeaderPatchArray []HTTPHeaderPatchInput

func (HTTPHeaderPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeaderPatch)(nil)).Elem()
}

func (i HTTPHeaderPatchArray) ToHTTPHeaderPatchArrayOutput() HTTPHeaderPatchArrayOutput {
	return i.ToHTTPHeaderPatchArrayOutputWithContext(context.Background())
}

func (i HTTPHeaderPatchArray) ToHTTPHeaderPatchArrayOutputWithContext(ctx context.Context) HTTPHeaderPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderPatchArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderPatchOutput struct{ *pulumi.OutputState }

func (HTTPHeaderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeaderPatch)(nil)).Elem()
}

func (o HTTPHeaderPatchOutput) ToHTTPHeaderPatchOutput() HTTPHeaderPatchOutput {
	return o
}

func (o HTTPHeaderPatchOutput) ToHTTPHeaderPatchOutputWithContext(ctx context.Context) HTTPHeaderPatchOutput {
	return o
}

// The header field name
func (o HTTPHeaderPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHeaderPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o HTTPHeaderPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHeaderPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HTTPHeaderPatchArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeaderPatch)(nil)).Elem()
}

func (o HTTPHeaderPatchArrayOutput) ToHTTPHeaderPatchArrayOutput() HTTPHeaderPatchArrayOutput {
	return o
}

func (o HTTPHeaderPatchArrayOutput) ToHTTPHeaderPatchArrayOutputWithContext(ctx context.Context) HTTPHeaderPatchArrayOutput {
	return o
}

func (o HTTPHeaderPatchArrayOutput) Index(i pulumi.IntInput) HTTPHeaderPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeaderPatch {
		return vs[0].([]HTTPHeaderPatch)[vs[1].(int)]
	}).(HTTPHeaderPatchOutput)
}

// Handler defines a specific action that should be taken
type Handler struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *ExecAction `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`
}

// HandlerInput is an input type that accepts HandlerArgs and HandlerOutput values.
// You can construct a concrete instance of `HandlerInput` via:
//
//	HandlerArgs{...}
type HandlerInput interface {
	pulumi.Input

	ToHandlerOutput() HandlerOutput
	ToHandlerOutputWithContext(context.Context) HandlerOutput
}

// Handler defines a specific action that should be taken
type HandlerArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec ExecActionPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket TCPSocketActionPtrInput `pulumi:"tcpSocket"`
}

func (HandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Handler)(nil)).Elem()
}

func (i HandlerArgs) ToHandlerOutput() HandlerOutput {
	return i.ToHandlerOutputWithContext(context.Background())
}

func (i HandlerArgs) ToHandlerOutputWithContext(ctx context.Context) HandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HandlerOutput)
}

// Handler defines a specific action that should be taken
type HandlerOutput struct{ *pulumi.OutputState }

func (HandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Handler)(nil)).Elem()
}

func (o HandlerOutput) ToHandlerOutput() HandlerOutput {
	return o
}

func (o HandlerOutput) ToHandlerOutputWithContext(ctx context.Context) HandlerOutput {
	return o
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o HandlerOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v Handler) *ExecAction { return v.Exec }).(ExecActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o HandlerOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v Handler) *HTTPGetAction { return v.HttpGet }).(HTTPGetActionPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
func (o HandlerOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v Handler) *TCPSocketAction { return v.TcpSocket }).(TCPSocketActionPtrOutput)
}

// Handler defines a specific action that should be taken
type HandlerPatch struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *ExecActionPatch `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetActionPatch `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket *TCPSocketActionPatch `pulumi:"tcpSocket"`
}

// HandlerPatchInput is an input type that accepts HandlerPatchArgs and HandlerPatchOutput values.
// You can construct a concrete instance of `HandlerPatchInput` via:
//
//	HandlerPatchArgs{...}
type HandlerPatchInput interface {
	pulumi.Input

	ToHandlerPatchOutput() HandlerPatchOutput
	ToHandlerPatchOutputWithContext(context.Context) HandlerPatchOutput
}

// Handler defines a specific action that should be taken
type HandlerPatchArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec ExecActionPatchPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPatchPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	TcpSocket TCPSocketActionPatchPtrInput `pulumi:"tcpSocket"`
}

func (HandlerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HandlerPatch)(nil)).Elem()
}

func (i HandlerPatchArgs) ToHandlerPatchOutput() HandlerPatchOutput {
	return i.ToHandlerPatchOutputWithContext(context.Background())
}

func (i HandlerPatchArgs) ToHandlerPatchOutputWithContext(ctx context.Context) HandlerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HandlerPatchOutput)
}

// Handler defines a specific action that should be taken
type HandlerPatchOutput struct{ *pulumi.OutputState }

func (HandlerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HandlerPatch)(nil)).Elem()
}

func (o HandlerPatchOutput) ToHandlerPatchOutput() HandlerPatchOutput {
	return o
}

func (o HandlerPatchOutput) ToHandlerPatchOutputWithContext(ctx context.Context) HandlerPatchOutput {
	return o
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o HandlerPatchOutput) Exec() ExecActionPatchPtrOutput {
	return o.ApplyT(func(v HandlerPatch) *ExecActionPatch { return v.Exec }).(ExecActionPatchPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o HandlerPatchOutput) HttpGet() HTTPGetActionPatchPtrOutput {
	return o.ApplyT(func(v HandlerPatch) *HTTPGetActionPatch { return v.HttpGet }).(HTTPGetActionPatchPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
func (o HandlerPatchOutput) TcpSocket() TCPSocketActionPatchPtrOutput {
	return o.ApplyT(func(v HandlerPatch) *TCPSocketActionPatch { return v.TcpSocket }).(TCPSocketActionPatchPtrOutput)
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAlias struct {
	// Hostnames for the above IP address.
	Hostnames []string `pulumi:"hostnames"`
	// IP address of the host file entry.
	Ip *string `pulumi:"ip"`
}

// HostAliasInput is an input type that accepts HostAliasArgs and HostAliasOutput values.
// You can construct a concrete instance of `HostAliasInput` via:
//
//	HostAliasArgs{...}
type HostAliasInput interface {
	pulumi.Input

	ToHostAliasOutput() HostAliasOutput
	ToHostAliasOutputWithContext(context.Context) HostAliasOutput
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAliasArgs struct {
	// Hostnames for the above IP address.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// IP address of the host file entry.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (HostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostAlias)(nil)).Elem()
}

func (i HostAliasArgs) ToHostAliasOutput() HostAliasOutput {
	return i.ToHostAliasOutputWithContext(context.Background())
}

func (i HostAliasArgs) ToHostAliasOutputWithContext(ctx context.Context) HostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasOutput)
}

// HostAliasArrayInput is an input type that accepts HostAliasArray and HostAliasArrayOutput values.
// You can construct a concrete instance of `HostAliasArrayInput` via:
//
//	HostAliasArray{ HostAliasArgs{...} }
type HostAliasArrayInput interface {
	pulumi.Input

	ToHostAliasArrayOutput() HostAliasArrayOutput
	ToHostAliasArrayOutputWithContext(context.Context) HostAliasArrayOutput
}

type HostAliasArray []HostAliasInput

func (HostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostAlias)(nil)).Elem()
}

func (i HostAliasArray) ToHostAliasArrayOutput() HostAliasArrayOutput {
	return i.ToHostAliasArrayOutputWithContext(context.Background())
}

func (i HostAliasArray) ToHostAliasArrayOutputWithContext(ctx context.Context) HostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasArrayOutput)
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAliasOutput struct{ *pulumi.OutputState }

func (HostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostAlias)(nil)).Elem()
}

func (o HostAliasOutput) ToHostAliasOutput() HostAliasOutput {
	return o
}

func (o HostAliasOutput) ToHostAliasOutputWithContext(ctx context.Context) HostAliasOutput {
	return o
}

// Hostnames for the above IP address.
func (o HostAliasOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostAlias) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// IP address of the host file entry.
func (o HostAliasOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostAlias) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type HostAliasArrayOutput struct{ *pulumi.OutputState }

func (HostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostAlias)(nil)).Elem()
}

func (o HostAliasArrayOutput) ToHostAliasArrayOutput() HostAliasArrayOutput {
	return o
}

func (o HostAliasArrayOutput) ToHostAliasArrayOutputWithContext(ctx context.Context) HostAliasArrayOutput {
	return o
}

func (o HostAliasArrayOutput) Index(i pulumi.IntInput) HostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostAlias {
		return vs[0].([]HostAlias)[vs[1].(int)]
	}).(HostAliasOutput)
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAliasPatch struct {
	// Hostnames for the above IP address.
	Hostnames []string `pulumi:"hostnames"`
	// IP address of the host file entry.
	Ip *string `pulumi:"ip"`
}

// HostAliasPatchInput is an input type that accepts HostAliasPatchArgs and HostAliasPatchOutput values.
// You can construct a concrete instance of `HostAliasPatchInput` via:
//
//	HostAliasPatchArgs{...}
type HostAliasPatchInput interface {
	pulumi.Input

	ToHostAliasPatchOutput() HostAliasPatchOutput
	ToHostAliasPatchOutputWithContext(context.Context) HostAliasPatchOutput
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAliasPatchArgs struct {
	// Hostnames for the above IP address.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// IP address of the host file entry.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (HostAliasPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostAliasPatch)(nil)).Elem()
}

func (i HostAliasPatchArgs) ToHostAliasPatchOutput() HostAliasPatchOutput {
	return i.ToHostAliasPatchOutputWithContext(context.Background())
}

func (i HostAliasPatchArgs) ToHostAliasPatchOutputWithContext(ctx context.Context) HostAliasPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasPatchOutput)
}

// HostAliasPatchArrayInput is an input type that accepts HostAliasPatchArray and HostAliasPatchArrayOutput values.
// You can construct a concrete instance of `HostAliasPatchArrayInput` via:
//
//	HostAliasPatchArray{ HostAliasPatchArgs{...} }
type HostAliasPatchArrayInput interface {
	pulumi.Input

	ToHostAliasPatchArrayOutput() HostAliasPatchArrayOutput
	ToHostAliasPatchArrayOutputWithContext(context.Context) HostAliasPatchArrayOutput
}

type HostAliasPatchArray []HostAliasPatchInput

func (HostAliasPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostAliasPatch)(nil)).Elem()
}

func (i HostAliasPatchArray) ToHostAliasPatchArrayOutput() HostAliasPatchArrayOutput {
	return i.ToHostAliasPatchArrayOutputWithContext(context.Background())
}

func (i HostAliasPatchArray) ToHostAliasPatchArrayOutputWithContext(ctx context.Context) HostAliasPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasPatchArrayOutput)
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type HostAliasPatchOutput struct{ *pulumi.OutputState }

func (HostAliasPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostAliasPatch)(nil)).Elem()
}

func (o HostAliasPatchOutput) ToHostAliasPatchOutput() HostAliasPatchOutput {
	return o
}

func (o HostAliasPatchOutput) ToHostAliasPatchOutputWithContext(ctx context.Context) HostAliasPatchOutput {
	return o
}

// Hostnames for the above IP address.
func (o HostAliasPatchOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostAliasPatch) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// IP address of the host file entry.
func (o HostAliasPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostAliasPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type HostAliasPatchArrayOutput struct{ *pulumi.OutputState }

func (HostAliasPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostAliasPatch)(nil)).Elem()
}

func (o HostAliasPatchArrayOutput) ToHostAliasPatchArrayOutput() HostAliasPatchArrayOutput {
	return o
}

func (o HostAliasPatchArrayOutput) ToHostAliasPatchArrayOutputWithContext(ctx context.Context) HostAliasPatchArrayOutput {
	return o
}

func (o HostAliasPatchArrayOutput) Index(i pulumi.IntInput) HostAliasPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostAliasPatch {
		return vs[0].([]HostAliasPatch)[vs[1].(int)]
	}).(HostAliasPatchOutput)
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSource struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// HostPathVolumeSourceInput is an input type that accepts HostPathVolumeSourceArgs and HostPathVolumeSourceOutput values.
// You can construct a concrete instance of `HostPathVolumeSourceInput` via:
//
//	HostPathVolumeSourceArgs{...}
type HostPathVolumeSourceInput interface {
	pulumi.Input

	ToHostPathVolumeSourceOutput() HostPathVolumeSourceOutput
	ToHostPathVolumeSourceOutputWithContext(context.Context) HostPathVolumeSourceOutput
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSourceArgs struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringInput `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HostPathVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPathVolumeSource)(nil)).Elem()
}

func (i HostPathVolumeSourceArgs) ToHostPathVolumeSourceOutput() HostPathVolumeSourceOutput {
	return i.ToHostPathVolumeSourceOutputWithContext(context.Background())
}

func (i HostPathVolumeSourceArgs) ToHostPathVolumeSourceOutputWithContext(ctx context.Context) HostPathVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourceOutput)
}

func (i HostPathVolumeSourceArgs) ToHostPathVolumeSourcePtrOutput() HostPathVolumeSourcePtrOutput {
	return i.ToHostPathVolumeSourcePtrOutputWithContext(context.Background())
}

func (i HostPathVolumeSourceArgs) ToHostPathVolumeSourcePtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourceOutput).ToHostPathVolumeSourcePtrOutputWithContext(ctx)
}

// HostPathVolumeSourcePtrInput is an input type that accepts HostPathVolumeSourceArgs, HostPathVolumeSourcePtr and HostPathVolumeSourcePtrOutput values.
// You can construct a concrete instance of `HostPathVolumeSourcePtrInput` via:
//
//	        HostPathVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type HostPathVolumeSourcePtrInput interface {
	pulumi.Input

	ToHostPathVolumeSourcePtrOutput() HostPathVolumeSourcePtrOutput
	ToHostPathVolumeSourcePtrOutputWithContext(context.Context) HostPathVolumeSourcePtrOutput
}

type hostPathVolumeSourcePtrType HostPathVolumeSourceArgs

func HostPathVolumeSourcePtr(v *HostPathVolumeSourceArgs) HostPathVolumeSourcePtrInput {
	return (*hostPathVolumeSourcePtrType)(v)
}

func (*hostPathVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPathVolumeSource)(nil)).Elem()
}

func (i *hostPathVolumeSourcePtrType) ToHostPathVolumeSourcePtrOutput() HostPathVolumeSourcePtrOutput {
	return i.ToHostPathVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *hostPathVolumeSourcePtrType) ToHostPathVolumeSourcePtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourcePtrOutput)
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSourceOutput struct{ *pulumi.OutputState }

func (HostPathVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPathVolumeSource)(nil)).Elem()
}

func (o HostPathVolumeSourceOutput) ToHostPathVolumeSourceOutput() HostPathVolumeSourceOutput {
	return o
}

func (o HostPathVolumeSourceOutput) ToHostPathVolumeSourceOutputWithContext(ctx context.Context) HostPathVolumeSourceOutput {
	return o
}

func (o HostPathVolumeSourceOutput) ToHostPathVolumeSourcePtrOutput() HostPathVolumeSourcePtrOutput {
	return o.ToHostPathVolumeSourcePtrOutputWithContext(context.Background())
}

func (o HostPathVolumeSourceOutput) ToHostPathVolumeSourcePtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostPathVolumeSource) *HostPathVolumeSource {
		return &v
	}).(HostPathVolumeSourcePtrOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v HostPathVolumeSource) string { return v.Path }).(pulumi.StringOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPathVolumeSource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HostPathVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (HostPathVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPathVolumeSource)(nil)).Elem()
}

func (o HostPathVolumeSourcePtrOutput) ToHostPathVolumeSourcePtrOutput() HostPathVolumeSourcePtrOutput {
	return o
}

func (o HostPathVolumeSourcePtrOutput) ToHostPathVolumeSourcePtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePtrOutput {
	return o
}

func (o HostPathVolumeSourcePtrOutput) Elem() HostPathVolumeSourceOutput {
	return o.ApplyT(func(v *HostPathVolumeSource) HostPathVolumeSource {
		if v != nil {
			return *v
		}
		var ret HostPathVolumeSource
		return ret
	}).(HostPathVolumeSourceOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPathVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPathVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSourcePatch struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path *string `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// HostPathVolumeSourcePatchInput is an input type that accepts HostPathVolumeSourcePatchArgs and HostPathVolumeSourcePatchOutput values.
// You can construct a concrete instance of `HostPathVolumeSourcePatchInput` via:
//
//	HostPathVolumeSourcePatchArgs{...}
type HostPathVolumeSourcePatchInput interface {
	pulumi.Input

	ToHostPathVolumeSourcePatchOutput() HostPathVolumeSourcePatchOutput
	ToHostPathVolumeSourcePatchOutputWithContext(context.Context) HostPathVolumeSourcePatchOutput
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSourcePatchArgs struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringPtrInput `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HostPathVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPathVolumeSourcePatch)(nil)).Elem()
}

func (i HostPathVolumeSourcePatchArgs) ToHostPathVolumeSourcePatchOutput() HostPathVolumeSourcePatchOutput {
	return i.ToHostPathVolumeSourcePatchOutputWithContext(context.Background())
}

func (i HostPathVolumeSourcePatchArgs) ToHostPathVolumeSourcePatchOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourcePatchOutput)
}

func (i HostPathVolumeSourcePatchArgs) ToHostPathVolumeSourcePatchPtrOutput() HostPathVolumeSourcePatchPtrOutput {
	return i.ToHostPathVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i HostPathVolumeSourcePatchArgs) ToHostPathVolumeSourcePatchPtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourcePatchOutput).ToHostPathVolumeSourcePatchPtrOutputWithContext(ctx)
}

// HostPathVolumeSourcePatchPtrInput is an input type that accepts HostPathVolumeSourcePatchArgs, HostPathVolumeSourcePatchPtr and HostPathVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `HostPathVolumeSourcePatchPtrInput` via:
//
//	        HostPathVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type HostPathVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToHostPathVolumeSourcePatchPtrOutput() HostPathVolumeSourcePatchPtrOutput
	ToHostPathVolumeSourcePatchPtrOutputWithContext(context.Context) HostPathVolumeSourcePatchPtrOutput
}

type hostPathVolumeSourcePatchPtrType HostPathVolumeSourcePatchArgs

func HostPathVolumeSourcePatchPtr(v *HostPathVolumeSourcePatchArgs) HostPathVolumeSourcePatchPtrInput {
	return (*hostPathVolumeSourcePatchPtrType)(v)
}

func (*hostPathVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPathVolumeSourcePatch)(nil)).Elem()
}

func (i *hostPathVolumeSourcePatchPtrType) ToHostPathVolumeSourcePatchPtrOutput() HostPathVolumeSourcePatchPtrOutput {
	return i.ToHostPathVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *hostPathVolumeSourcePatchPtrType) ToHostPathVolumeSourcePatchPtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPathVolumeSourcePatchPtrOutput)
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (HostPathVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPathVolumeSourcePatch)(nil)).Elem()
}

func (o HostPathVolumeSourcePatchOutput) ToHostPathVolumeSourcePatchOutput() HostPathVolumeSourcePatchOutput {
	return o
}

func (o HostPathVolumeSourcePatchOutput) ToHostPathVolumeSourcePatchOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchOutput {
	return o
}

func (o HostPathVolumeSourcePatchOutput) ToHostPathVolumeSourcePatchPtrOutput() HostPathVolumeSourcePatchPtrOutput {
	return o.ToHostPathVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o HostPathVolumeSourcePatchOutput) ToHostPathVolumeSourcePatchPtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostPathVolumeSourcePatch) *HostPathVolumeSourcePatch {
		return &v
	}).(HostPathVolumeSourcePatchPtrOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPathVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPathVolumeSourcePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HostPathVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (HostPathVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPathVolumeSourcePatch)(nil)).Elem()
}

func (o HostPathVolumeSourcePatchPtrOutput) ToHostPathVolumeSourcePatchPtrOutput() HostPathVolumeSourcePatchPtrOutput {
	return o
}

func (o HostPathVolumeSourcePatchPtrOutput) ToHostPathVolumeSourcePatchPtrOutputWithContext(ctx context.Context) HostPathVolumeSourcePatchPtrOutput {
	return o
}

func (o HostPathVolumeSourcePatchPtrOutput) Elem() HostPathVolumeSourcePatchOutput {
	return o.ApplyT(func(v *HostPathVolumeSourcePatch) HostPathVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret HostPathVolumeSourcePatch
		return ret
	}).(HostPathVolumeSourcePatchOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPathVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o HostPathVolumeSourcePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPathVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSource struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is Target iSCSI Qualified Name.
	Iqn string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun is iSCSI Target Lun number.
	Lun int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *SecretReference `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `pulumi:"targetPortal"`
}

// ISCSIPersistentVolumeSourceInput is an input type that accepts ISCSIPersistentVolumeSourceArgs and ISCSIPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `ISCSIPersistentVolumeSourceInput` via:
//
//	ISCSIPersistentVolumeSourceArgs{...}
type ISCSIPersistentVolumeSourceInput interface {
	pulumi.Input

	ToISCSIPersistentVolumeSourceOutput() ISCSIPersistentVolumeSourceOutput
	ToISCSIPersistentVolumeSourceOutputWithContext(context.Context) ISCSIPersistentVolumeSourceOutput
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSourceArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is Target iSCSI Qualified Name.
	Iqn pulumi.StringInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun is iSCSI Target Lun number.
	Lun pulumi.IntInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef SecretReferencePtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringInput `pulumi:"targetPortal"`
}

func (ISCSIPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIPersistentVolumeSource)(nil)).Elem()
}

func (i ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourceOutput() ISCSIPersistentVolumeSourceOutput {
	return i.ToISCSIPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourceOutput)
}

func (i ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourcePtrOutput() ISCSIPersistentVolumeSourcePtrOutput {
	return i.ToISCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ISCSIPersistentVolumeSourceArgs) ToISCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourceOutput).ToISCSIPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// ISCSIPersistentVolumeSourcePtrInput is an input type that accepts ISCSIPersistentVolumeSourceArgs, ISCSIPersistentVolumeSourcePtr and ISCSIPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ISCSIPersistentVolumeSourcePtrInput` via:
//
//	        ISCSIPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ISCSIPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToISCSIPersistentVolumeSourcePtrOutput() ISCSIPersistentVolumeSourcePtrOutput
	ToISCSIPersistentVolumeSourcePtrOutputWithContext(context.Context) ISCSIPersistentVolumeSourcePtrOutput
}

type iscsipersistentVolumeSourcePtrType ISCSIPersistentVolumeSourceArgs

func ISCSIPersistentVolumeSourcePtr(v *ISCSIPersistentVolumeSourceArgs) ISCSIPersistentVolumeSourcePtrInput {
	return (*iscsipersistentVolumeSourcePtrType)(v)
}

func (*iscsipersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIPersistentVolumeSource)(nil)).Elem()
}

func (i *iscsipersistentVolumeSourcePtrType) ToISCSIPersistentVolumeSourcePtrOutput() ISCSIPersistentVolumeSourcePtrOutput {
	return i.ToISCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *iscsipersistentVolumeSourcePtrType) ToISCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourcePtrOutput)
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (ISCSIPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIPersistentVolumeSource)(nil)).Elem()
}

func (o ISCSIPersistentVolumeSourceOutput) ToISCSIPersistentVolumeSourceOutput() ISCSIPersistentVolumeSourceOutput {
	return o
}

func (o ISCSIPersistentVolumeSourceOutput) ToISCSIPersistentVolumeSourceOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourceOutput {
	return o
}

func (o ISCSIPersistentVolumeSourceOutput) ToISCSIPersistentVolumeSourcePtrOutput() ISCSIPersistentVolumeSourcePtrOutput {
	return o.ToISCSIPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ISCSIPersistentVolumeSourceOutput) ToISCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ISCSIPersistentVolumeSource) *ISCSIPersistentVolumeSource {
		return &v
	}).(ISCSIPersistentVolumeSourcePtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIPersistentVolumeSourceOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIPersistentVolumeSourceOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIPersistentVolumeSourceOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is Target iSCSI Qualified Name.
func (o ISCSIPersistentVolumeSourceOutput) Iqn() pulumi.StringOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) string { return v.Iqn }).(pulumi.StringOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIPersistentVolumeSourceOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun is iSCSI Target Lun number.
func (o ISCSIPersistentVolumeSourceOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) int { return v.Lun }).(pulumi.IntOutput)
}

// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourceOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIPersistentVolumeSourceOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) *SecretReference { return v.SecretRef }).(SecretReferencePtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourceOutput) TargetPortal() pulumi.StringOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSource) string { return v.TargetPortal }).(pulumi.StringOutput)
}

type ISCSIPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ISCSIPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIPersistentVolumeSource)(nil)).Elem()
}

func (o ISCSIPersistentVolumeSourcePtrOutput) ToISCSIPersistentVolumeSourcePtrOutput() ISCSIPersistentVolumeSourcePtrOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePtrOutput) ToISCSIPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePtrOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePtrOutput) Elem() ISCSIPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) ISCSIPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret ISCSIPersistentVolumeSource
		return ret
	}).(ISCSIPersistentVolumeSourceOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIPersistentVolumeSourcePtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIPersistentVolumeSourcePtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIPersistentVolumeSourcePtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is Target iSCSI Qualified Name.
func (o ISCSIPersistentVolumeSourcePtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIPersistentVolumeSourcePtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun is iSCSI Target Lun number.
func (o ISCSIPersistentVolumeSourcePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *int {
		if v == nil {
			return nil
		}
		return &v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSourcePatch struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is Target iSCSI Qualified Name.
	Iqn *string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun is iSCSI Target Lun number.
	Lun *int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal *string `pulumi:"targetPortal"`
}

// ISCSIPersistentVolumeSourcePatchInput is an input type that accepts ISCSIPersistentVolumeSourcePatchArgs and ISCSIPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ISCSIPersistentVolumeSourcePatchInput` via:
//
//	ISCSIPersistentVolumeSourcePatchArgs{...}
type ISCSIPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToISCSIPersistentVolumeSourcePatchOutput() ISCSIPersistentVolumeSourcePatchOutput
	ToISCSIPersistentVolumeSourcePatchOutputWithContext(context.Context) ISCSIPersistentVolumeSourcePatchOutput
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSourcePatchArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is Target iSCSI Qualified Name.
	Iqn pulumi.StringPtrInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun is iSCSI Target Lun number.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringPtrInput `pulumi:"targetPortal"`
}

func (ISCSIPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i ISCSIPersistentVolumeSourcePatchArgs) ToISCSIPersistentVolumeSourcePatchOutput() ISCSIPersistentVolumeSourcePatchOutput {
	return i.ToISCSIPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ISCSIPersistentVolumeSourcePatchArgs) ToISCSIPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourcePatchOutput)
}

func (i ISCSIPersistentVolumeSourcePatchArgs) ToISCSIPersistentVolumeSourcePatchPtrOutput() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return i.ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ISCSIPersistentVolumeSourcePatchArgs) ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourcePatchOutput).ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ISCSIPersistentVolumeSourcePatchPtrInput is an input type that accepts ISCSIPersistentVolumeSourcePatchArgs, ISCSIPersistentVolumeSourcePatchPtr and ISCSIPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ISCSIPersistentVolumeSourcePatchPtrInput` via:
//
//	        ISCSIPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ISCSIPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToISCSIPersistentVolumeSourcePatchPtrOutput() ISCSIPersistentVolumeSourcePatchPtrOutput
	ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) ISCSIPersistentVolumeSourcePatchPtrOutput
}

type iscsipersistentVolumeSourcePatchPtrType ISCSIPersistentVolumeSourcePatchArgs

func ISCSIPersistentVolumeSourcePatchPtr(v *ISCSIPersistentVolumeSourcePatchArgs) ISCSIPersistentVolumeSourcePatchPtrInput {
	return (*iscsipersistentVolumeSourcePatchPtrType)(v)
}

func (*iscsipersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *iscsipersistentVolumeSourcePatchPtrType) ToISCSIPersistentVolumeSourcePatchPtrOutput() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return i.ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *iscsipersistentVolumeSourcePatchPtrType) ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIPersistentVolumeSourcePatchPtrOutput)
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ISCSIPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o ISCSIPersistentVolumeSourcePatchOutput) ToISCSIPersistentVolumeSourcePatchOutput() ISCSIPersistentVolumeSourcePatchOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePatchOutput) ToISCSIPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePatchOutput) ToISCSIPersistentVolumeSourcePatchPtrOutput() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o.ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ISCSIPersistentVolumeSourcePatchOutput) ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ISCSIPersistentVolumeSourcePatch) *ISCSIPersistentVolumeSourcePatch {
		return &v
	}).(ISCSIPersistentVolumeSourcePatchPtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIPersistentVolumeSourcePatchOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIPersistentVolumeSourcePatchOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIPersistentVolumeSourcePatchOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is Target iSCSI Qualified Name.
func (o ISCSIPersistentVolumeSourcePatchOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *string { return v.Iqn }).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIPersistentVolumeSourcePatchOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun is iSCSI Target Lun number.
func (o ISCSIPersistentVolumeSourcePatchOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePatchOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePatchOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIPersistentVolumeSourcePatch) *string { return v.TargetPortal }).(pulumi.StringPtrOutput)
}

type ISCSIPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ISCSIPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o ISCSIPersistentVolumeSourcePatchPtrOutput) ToISCSIPersistentVolumeSourcePatchPtrOutput() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePatchPtrOutput) ToISCSIPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o ISCSIPersistentVolumeSourcePatchPtrOutput) Elem() ISCSIPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) ISCSIPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ISCSIPersistentVolumeSourcePatch
		return ret
	}).(ISCSIPersistentVolumeSourcePatchOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is Target iSCSI Qualified Name.
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun is iSCSI Target Lun number.
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIPersistentVolumeSourcePatchPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSource struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `pulumi:"targetPortal"`
}

// ISCSIVolumeSourceInput is an input type that accepts ISCSIVolumeSourceArgs and ISCSIVolumeSourceOutput values.
// You can construct a concrete instance of `ISCSIVolumeSourceInput` via:
//
//	ISCSIVolumeSourceArgs{...}
type ISCSIVolumeSourceInput interface {
	pulumi.Input

	ToISCSIVolumeSourceOutput() ISCSIVolumeSourceOutput
	ToISCSIVolumeSourceOutputWithContext(context.Context) ISCSIVolumeSourceOutput
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSourceArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn pulumi.StringInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun pulumi.IntInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringInput `pulumi:"targetPortal"`
}

func (ISCSIVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIVolumeSource)(nil)).Elem()
}

func (i ISCSIVolumeSourceArgs) ToISCSIVolumeSourceOutput() ISCSIVolumeSourceOutput {
	return i.ToISCSIVolumeSourceOutputWithContext(context.Background())
}

func (i ISCSIVolumeSourceArgs) ToISCSIVolumeSourceOutputWithContext(ctx context.Context) ISCSIVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourceOutput)
}

func (i ISCSIVolumeSourceArgs) ToISCSIVolumeSourcePtrOutput() ISCSIVolumeSourcePtrOutput {
	return i.ToISCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ISCSIVolumeSourceArgs) ToISCSIVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourceOutput).ToISCSIVolumeSourcePtrOutputWithContext(ctx)
}

// ISCSIVolumeSourcePtrInput is an input type that accepts ISCSIVolumeSourceArgs, ISCSIVolumeSourcePtr and ISCSIVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ISCSIVolumeSourcePtrInput` via:
//
//	        ISCSIVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ISCSIVolumeSourcePtrInput interface {
	pulumi.Input

	ToISCSIVolumeSourcePtrOutput() ISCSIVolumeSourcePtrOutput
	ToISCSIVolumeSourcePtrOutputWithContext(context.Context) ISCSIVolumeSourcePtrOutput
}

type iscsivolumeSourcePtrType ISCSIVolumeSourceArgs

func ISCSIVolumeSourcePtr(v *ISCSIVolumeSourceArgs) ISCSIVolumeSourcePtrInput {
	return (*iscsivolumeSourcePtrType)(v)
}

func (*iscsivolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIVolumeSource)(nil)).Elem()
}

func (i *iscsivolumeSourcePtrType) ToISCSIVolumeSourcePtrOutput() ISCSIVolumeSourcePtrOutput {
	return i.ToISCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *iscsivolumeSourcePtrType) ToISCSIVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourcePtrOutput)
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSourceOutput struct{ *pulumi.OutputState }

func (ISCSIVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIVolumeSource)(nil)).Elem()
}

func (o ISCSIVolumeSourceOutput) ToISCSIVolumeSourceOutput() ISCSIVolumeSourceOutput {
	return o
}

func (o ISCSIVolumeSourceOutput) ToISCSIVolumeSourceOutputWithContext(ctx context.Context) ISCSIVolumeSourceOutput {
	return o
}

func (o ISCSIVolumeSourceOutput) ToISCSIVolumeSourcePtrOutput() ISCSIVolumeSourcePtrOutput {
	return o.ToISCSIVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ISCSIVolumeSourceOutput) ToISCSIVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ISCSIVolumeSource) *ISCSIVolumeSource {
		return &v
	}).(ISCSIVolumeSourcePtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIVolumeSourceOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIVolumeSourceOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIVolumeSourceOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ISCSIVolumeSourceOutput) Iqn() pulumi.StringOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) string { return v.Iqn }).(pulumi.StringOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIVolumeSourceOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ISCSIVolumeSourceOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) int { return v.Lun }).(pulumi.IntOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourceOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourceOutput) TargetPortal() pulumi.StringOutput {
	return o.ApplyT(func(v ISCSIVolumeSource) string { return v.TargetPortal }).(pulumi.StringOutput)
}

type ISCSIVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ISCSIVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIVolumeSource)(nil)).Elem()
}

func (o ISCSIVolumeSourcePtrOutput) ToISCSIVolumeSourcePtrOutput() ISCSIVolumeSourcePtrOutput {
	return o
}

func (o ISCSIVolumeSourcePtrOutput) ToISCSIVolumeSourcePtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePtrOutput {
	return o
}

func (o ISCSIVolumeSourcePtrOutput) Elem() ISCSIVolumeSourceOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) ISCSIVolumeSource {
		if v != nil {
			return *v
		}
		var ret ISCSIVolumeSource
		return ret
	}).(ISCSIVolumeSourceOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIVolumeSourcePtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIVolumeSourcePtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIVolumeSourcePtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ISCSIVolumeSourcePtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIVolumeSourcePtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ISCSIVolumeSourcePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *int {
		if v == nil {
			return nil
		}
		return &v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSourcePatch struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn *string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun *int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal *string `pulumi:"targetPortal"`
}

// ISCSIVolumeSourcePatchInput is an input type that accepts ISCSIVolumeSourcePatchArgs and ISCSIVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ISCSIVolumeSourcePatchInput` via:
//
//	ISCSIVolumeSourcePatchArgs{...}
type ISCSIVolumeSourcePatchInput interface {
	pulumi.Input

	ToISCSIVolumeSourcePatchOutput() ISCSIVolumeSourcePatchOutput
	ToISCSIVolumeSourcePatchOutputWithContext(context.Context) ISCSIVolumeSourcePatchOutput
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSourcePatchArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn pulumi.StringPtrInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringPtrInput `pulumi:"targetPortal"`
}

func (ISCSIVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIVolumeSourcePatch)(nil)).Elem()
}

func (i ISCSIVolumeSourcePatchArgs) ToISCSIVolumeSourcePatchOutput() ISCSIVolumeSourcePatchOutput {
	return i.ToISCSIVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ISCSIVolumeSourcePatchArgs) ToISCSIVolumeSourcePatchOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourcePatchOutput)
}

func (i ISCSIVolumeSourcePatchArgs) ToISCSIVolumeSourcePatchPtrOutput() ISCSIVolumeSourcePatchPtrOutput {
	return i.ToISCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ISCSIVolumeSourcePatchArgs) ToISCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourcePatchOutput).ToISCSIVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ISCSIVolumeSourcePatchPtrInput is an input type that accepts ISCSIVolumeSourcePatchArgs, ISCSIVolumeSourcePatchPtr and ISCSIVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ISCSIVolumeSourcePatchPtrInput` via:
//
//	        ISCSIVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ISCSIVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToISCSIVolumeSourcePatchPtrOutput() ISCSIVolumeSourcePatchPtrOutput
	ToISCSIVolumeSourcePatchPtrOutputWithContext(context.Context) ISCSIVolumeSourcePatchPtrOutput
}

type iscsivolumeSourcePatchPtrType ISCSIVolumeSourcePatchArgs

func ISCSIVolumeSourcePatchPtr(v *ISCSIVolumeSourcePatchArgs) ISCSIVolumeSourcePatchPtrInput {
	return (*iscsivolumeSourcePatchPtrType)(v)
}

func (*iscsivolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIVolumeSourcePatch)(nil)).Elem()
}

func (i *iscsivolumeSourcePatchPtrType) ToISCSIVolumeSourcePatchPtrOutput() ISCSIVolumeSourcePatchPtrOutput {
	return i.ToISCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *iscsivolumeSourcePatchPtrType) ToISCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ISCSIVolumeSourcePatchPtrOutput)
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ISCSIVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ISCSIVolumeSourcePatch)(nil)).Elem()
}

func (o ISCSIVolumeSourcePatchOutput) ToISCSIVolumeSourcePatchOutput() ISCSIVolumeSourcePatchOutput {
	return o
}

func (o ISCSIVolumeSourcePatchOutput) ToISCSIVolumeSourcePatchOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchOutput {
	return o
}

func (o ISCSIVolumeSourcePatchOutput) ToISCSIVolumeSourcePatchPtrOutput() ISCSIVolumeSourcePatchPtrOutput {
	return o.ToISCSIVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ISCSIVolumeSourcePatchOutput) ToISCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ISCSIVolumeSourcePatch) *ISCSIVolumeSourcePatch {
		return &v
	}).(ISCSIVolumeSourcePatchPtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIVolumeSourcePatchOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIVolumeSourcePatchOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIVolumeSourcePatchOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ISCSIVolumeSourcePatchOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *string { return v.Iqn }).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIVolumeSourcePatchOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ISCSIVolumeSourcePatchOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePatchOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePatchOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ISCSIVolumeSourcePatch) *string { return v.TargetPortal }).(pulumi.StringPtrOutput)
}

type ISCSIVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ISCSIVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ISCSIVolumeSourcePatch)(nil)).Elem()
}

func (o ISCSIVolumeSourcePatchPtrOutput) ToISCSIVolumeSourcePatchPtrOutput() ISCSIVolumeSourcePatchPtrOutput {
	return o
}

func (o ISCSIVolumeSourcePatchPtrOutput) ToISCSIVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ISCSIVolumeSourcePatchPtrOutput {
	return o
}

func (o ISCSIVolumeSourcePatchPtrOutput) Elem() ISCSIVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) ISCSIVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ISCSIVolumeSourcePatch
		return ret
	}).(ISCSIVolumeSourcePatchOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ISCSIVolumeSourcePatchPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ISCSIVolumeSourcePatchPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ISCSIVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o ISCSIVolumeSourcePatchPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ISCSIVolumeSourcePatchPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o ISCSIVolumeSourcePatchPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ISCSIVolumeSourcePatchPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePatchPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o ISCSIVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o ISCSIVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o ISCSIVolumeSourcePatchPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ISCSIVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type KeyToPath struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// KeyToPathInput is an input type that accepts KeyToPathArgs and KeyToPathOutput values.
// You can construct a concrete instance of `KeyToPathInput` via:
//
//	KeyToPathArgs{...}
type KeyToPathInput interface {
	pulumi.Input

	ToKeyToPathOutput() KeyToPathOutput
	ToKeyToPathOutputWithContext(context.Context) KeyToPathOutput
}

// Maps a string key to a path within a volume.
type KeyToPathArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (KeyToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (i KeyToPathArgs) ToKeyToPathOutput() KeyToPathOutput {
	return i.ToKeyToPathOutputWithContext(context.Background())
}

func (i KeyToPathArgs) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathOutput)
}

// KeyToPathArrayInput is an input type that accepts KeyToPathArray and KeyToPathArrayOutput values.
// You can construct a concrete instance of `KeyToPathArrayInput` via:
//
//	KeyToPathArray{ KeyToPathArgs{...} }
type KeyToPathArrayInput interface {
	pulumi.Input

	ToKeyToPathArrayOutput() KeyToPathArrayOutput
	ToKeyToPathArrayOutputWithContext(context.Context) KeyToPathArrayOutput
}

type KeyToPathArray []KeyToPathInput

func (KeyToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (i KeyToPathArray) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return i.ToKeyToPathArrayOutputWithContext(context.Background())
}

func (i KeyToPathArray) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathArrayOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathOutput struct{ *pulumi.OutputState }

func (KeyToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (o KeyToPathOutput) ToKeyToPathOutput() KeyToPathOutput {
	return o
}

func (o KeyToPathOutput) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return o
}

// key is the key to project.
func (o KeyToPathOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPath) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyToPath) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPath) string { return v.Path }).(pulumi.StringOutput)
}

type KeyToPathArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) Index(i pulumi.IntInput) KeyToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPath {
		return vs[0].([]KeyToPath)[vs[1].(int)]
	}).(KeyToPathOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// KeyToPathPatchInput is an input type that accepts KeyToPathPatchArgs and KeyToPathPatchOutput values.
// You can construct a concrete instance of `KeyToPathPatchInput` via:
//
//	KeyToPathPatchArgs{...}
type KeyToPathPatchInput interface {
	pulumi.Input

	ToKeyToPathPatchOutput() KeyToPathPatchOutput
	ToKeyToPathPatchOutputWithContext(context.Context) KeyToPathPatchOutput
}

// Maps a string key to a path within a volume.
type KeyToPathPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (KeyToPathPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPathPatch)(nil)).Elem()
}

func (i KeyToPathPatchArgs) ToKeyToPathPatchOutput() KeyToPathPatchOutput {
	return i.ToKeyToPathPatchOutputWithContext(context.Background())
}

func (i KeyToPathPatchArgs) ToKeyToPathPatchOutputWithContext(ctx context.Context) KeyToPathPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathPatchOutput)
}

// KeyToPathPatchArrayInput is an input type that accepts KeyToPathPatchArray and KeyToPathPatchArrayOutput values.
// You can construct a concrete instance of `KeyToPathPatchArrayInput` via:
//
//	KeyToPathPatchArray{ KeyToPathPatchArgs{...} }
type KeyToPathPatchArrayInput interface {
	pulumi.Input

	ToKeyToPathPatchArrayOutput() KeyToPathPatchArrayOutput
	ToKeyToPathPatchArrayOutputWithContext(context.Context) KeyToPathPatchArrayOutput
}

type KeyToPathPatchArray []KeyToPathPatchInput

func (KeyToPathPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPathPatch)(nil)).Elem()
}

func (i KeyToPathPatchArray) ToKeyToPathPatchArrayOutput() KeyToPathPatchArrayOutput {
	return i.ToKeyToPathPatchArrayOutputWithContext(context.Background())
}

func (i KeyToPathPatchArray) ToKeyToPathPatchArrayOutputWithContext(ctx context.Context) KeyToPathPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathPatchOutput struct{ *pulumi.OutputState }

func (KeyToPathPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPathPatch)(nil)).Elem()
}

func (o KeyToPathPatchOutput) ToKeyToPathPatchOutput() KeyToPathPatchOutput {
	return o
}

func (o KeyToPathPatchOutput) ToKeyToPathPatchOutputWithContext(ctx context.Context) KeyToPathPatchOutput {
	return o
}

// key is the key to project.
func (o KeyToPathPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPathPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyToPathPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPathPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type KeyToPathPatchArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPathPatch)(nil)).Elem()
}

func (o KeyToPathPatchArrayOutput) ToKeyToPathPatchArrayOutput() KeyToPathPatchArrayOutput {
	return o
}

func (o KeyToPathPatchArrayOutput) ToKeyToPathPatchArrayOutputWithContext(ctx context.Context) KeyToPathPatchArrayOutput {
	return o
}

func (o KeyToPathPatchArrayOutput) Index(i pulumi.IntInput) KeyToPathPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPathPatch {
		return vs[0].([]KeyToPathPatch)[vs[1].(int)]
	}).(KeyToPathPatchOutput)
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type Lifecycle struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart *LifecycleHandler `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop *LifecycleHandler `pulumi:"preStop"`
}

// LifecycleInput is an input type that accepts LifecycleArgs and LifecycleOutput values.
// You can construct a concrete instance of `LifecycleInput` via:
//
//	LifecycleArgs{...}
type LifecycleInput interface {
	pulumi.Input

	ToLifecycleOutput() LifecycleOutput
	ToLifecycleOutputWithContext(context.Context) LifecycleOutput
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type LifecycleArgs struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart LifecycleHandlerPtrInput `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop LifecycleHandlerPtrInput `pulumi:"preStop"`
}

func (LifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Lifecycle)(nil)).Elem()
}

func (i LifecycleArgs) ToLifecycleOutput() LifecycleOutput {
	return i.ToLifecycleOutputWithContext(context.Background())
}

func (i LifecycleArgs) ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleOutput)
}

func (i LifecycleArgs) ToLifecyclePtrOutput() LifecyclePtrOutput {
	return i.ToLifecyclePtrOutputWithContext(context.Background())
}

func (i LifecycleArgs) ToLifecyclePtrOutputWithContext(ctx context.Context) LifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleOutput).ToLifecyclePtrOutputWithContext(ctx)
}

// LifecyclePtrInput is an input type that accepts LifecycleArgs, LifecyclePtr and LifecyclePtrOutput values.
// You can construct a concrete instance of `LifecyclePtrInput` via:
//
//	        LifecycleArgs{...}
//
//	or:
//
//	        nil
type LifecyclePtrInput interface {
	pulumi.Input

	ToLifecyclePtrOutput() LifecyclePtrOutput
	ToLifecyclePtrOutputWithContext(context.Context) LifecyclePtrOutput
}

type lifecyclePtrType LifecycleArgs

func LifecyclePtr(v *LifecycleArgs) LifecyclePtrInput {
	return (*lifecyclePtrType)(v)
}

func (*lifecyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Lifecycle)(nil)).Elem()
}

func (i *lifecyclePtrType) ToLifecyclePtrOutput() LifecyclePtrOutput {
	return i.ToLifecyclePtrOutputWithContext(context.Background())
}

func (i *lifecyclePtrType) ToLifecyclePtrOutputWithContext(ctx context.Context) LifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePtrOutput)
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type LifecycleOutput struct{ *pulumi.OutputState }

func (LifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Lifecycle)(nil)).Elem()
}

func (o LifecycleOutput) ToLifecycleOutput() LifecycleOutput {
	return o
}

func (o LifecycleOutput) ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput {
	return o
}

func (o LifecycleOutput) ToLifecyclePtrOutput() LifecyclePtrOutput {
	return o.ToLifecyclePtrOutputWithContext(context.Background())
}

func (o LifecycleOutput) ToLifecyclePtrOutputWithContext(ctx context.Context) LifecyclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Lifecycle) *Lifecycle {
		return &v
	}).(LifecyclePtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecycleOutput) PostStart() LifecycleHandlerPtrOutput {
	return o.ApplyT(func(v Lifecycle) *LifecycleHandler { return v.PostStart }).(LifecycleHandlerPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecycleOutput) PreStop() LifecycleHandlerPtrOutput {
	return o.ApplyT(func(v Lifecycle) *LifecycleHandler { return v.PreStop }).(LifecycleHandlerPtrOutput)
}

type LifecyclePtrOutput struct{ *pulumi.OutputState }

func (LifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lifecycle)(nil)).Elem()
}

func (o LifecyclePtrOutput) ToLifecyclePtrOutput() LifecyclePtrOutput {
	return o
}

func (o LifecyclePtrOutput) ToLifecyclePtrOutputWithContext(ctx context.Context) LifecyclePtrOutput {
	return o
}

func (o LifecyclePtrOutput) Elem() LifecycleOutput {
	return o.ApplyT(func(v *Lifecycle) Lifecycle {
		if v != nil {
			return *v
		}
		var ret Lifecycle
		return ret
	}).(LifecycleOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePtrOutput) PostStart() LifecycleHandlerPtrOutput {
	return o.ApplyT(func(v *Lifecycle) *LifecycleHandler {
		if v == nil {
			return nil
		}
		return v.PostStart
	}).(LifecycleHandlerPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePtrOutput) PreStop() LifecycleHandlerPtrOutput {
	return o.ApplyT(func(v *Lifecycle) *LifecycleHandler {
		if v == nil {
			return nil
		}
		return v.PreStop
	}).(LifecycleHandlerPtrOutput)
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandler struct {
	// Exec specifies the action to take.
	Exec *ExecAction `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`
	// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`
}

// LifecycleHandlerInput is an input type that accepts LifecycleHandlerArgs and LifecycleHandlerOutput values.
// You can construct a concrete instance of `LifecycleHandlerInput` via:
//
//	LifecycleHandlerArgs{...}
type LifecycleHandlerInput interface {
	pulumi.Input

	ToLifecycleHandlerOutput() LifecycleHandlerOutput
	ToLifecycleHandlerOutputWithContext(context.Context) LifecycleHandlerOutput
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandlerArgs struct {
	// Exec specifies the action to take.
	Exec ExecActionPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPtrInput `pulumi:"httpGet"`
	// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
	TcpSocket TCPSocketActionPtrInput `pulumi:"tcpSocket"`
}

func (LifecycleHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHandler)(nil)).Elem()
}

func (i LifecycleHandlerArgs) ToLifecycleHandlerOutput() LifecycleHandlerOutput {
	return i.ToLifecycleHandlerOutputWithContext(context.Background())
}

func (i LifecycleHandlerArgs) ToLifecycleHandlerOutputWithContext(ctx context.Context) LifecycleHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerOutput)
}

func (i LifecycleHandlerArgs) ToLifecycleHandlerPtrOutput() LifecycleHandlerPtrOutput {
	return i.ToLifecycleHandlerPtrOutputWithContext(context.Background())
}

func (i LifecycleHandlerArgs) ToLifecycleHandlerPtrOutputWithContext(ctx context.Context) LifecycleHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerOutput).ToLifecycleHandlerPtrOutputWithContext(ctx)
}

// LifecycleHandlerPtrInput is an input type that accepts LifecycleHandlerArgs, LifecycleHandlerPtr and LifecycleHandlerPtrOutput values.
// You can construct a concrete instance of `LifecycleHandlerPtrInput` via:
//
//	        LifecycleHandlerArgs{...}
//
//	or:
//
//	        nil
type LifecycleHandlerPtrInput interface {
	pulumi.Input

	ToLifecycleHandlerPtrOutput() LifecycleHandlerPtrOutput
	ToLifecycleHandlerPtrOutputWithContext(context.Context) LifecycleHandlerPtrOutput
}

type lifecycleHandlerPtrType LifecycleHandlerArgs

func LifecycleHandlerPtr(v *LifecycleHandlerArgs) LifecycleHandlerPtrInput {
	return (*lifecycleHandlerPtrType)(v)
}

func (*lifecycleHandlerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHandler)(nil)).Elem()
}

func (i *lifecycleHandlerPtrType) ToLifecycleHandlerPtrOutput() LifecycleHandlerPtrOutput {
	return i.ToLifecycleHandlerPtrOutputWithContext(context.Background())
}

func (i *lifecycleHandlerPtrType) ToLifecycleHandlerPtrOutputWithContext(ctx context.Context) LifecycleHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerPtrOutput)
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandlerOutput struct{ *pulumi.OutputState }

func (LifecycleHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHandler)(nil)).Elem()
}

func (o LifecycleHandlerOutput) ToLifecycleHandlerOutput() LifecycleHandlerOutput {
	return o
}

func (o LifecycleHandlerOutput) ToLifecycleHandlerOutputWithContext(ctx context.Context) LifecycleHandlerOutput {
	return o
}

func (o LifecycleHandlerOutput) ToLifecycleHandlerPtrOutput() LifecycleHandlerPtrOutput {
	return o.ToLifecycleHandlerPtrOutputWithContext(context.Background())
}

func (o LifecycleHandlerOutput) ToLifecycleHandlerPtrOutputWithContext(ctx context.Context) LifecycleHandlerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecycleHandler) *LifecycleHandler {
		return &v
	}).(LifecycleHandlerPtrOutput)
}

// Exec specifies the action to take.
func (o LifecycleHandlerOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v LifecycleHandler) *ExecAction { return v.Exec }).(ExecActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o LifecycleHandlerOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v LifecycleHandler) *HTTPGetAction { return v.HttpGet }).(HTTPGetActionPtrOutput)
}

// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
func (o LifecycleHandlerOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v LifecycleHandler) *TCPSocketAction { return v.TcpSocket }).(TCPSocketActionPtrOutput)
}

type LifecycleHandlerPtrOutput struct{ *pulumi.OutputState }

func (LifecycleHandlerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHandler)(nil)).Elem()
}

func (o LifecycleHandlerPtrOutput) ToLifecycleHandlerPtrOutput() LifecycleHandlerPtrOutput {
	return o
}

func (o LifecycleHandlerPtrOutput) ToLifecycleHandlerPtrOutputWithContext(ctx context.Context) LifecycleHandlerPtrOutput {
	return o
}

func (o LifecycleHandlerPtrOutput) Elem() LifecycleHandlerOutput {
	return o.ApplyT(func(v *LifecycleHandler) LifecycleHandler {
		if v != nil {
			return *v
		}
		var ret LifecycleHandler
		return ret
	}).(LifecycleHandlerOutput)
}

// Exec specifies the action to take.
func (o LifecycleHandlerPtrOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v *LifecycleHandler) *ExecAction {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o LifecycleHandlerPtrOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v *LifecycleHandler) *HTTPGetAction {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPtrOutput)
}

// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
func (o LifecycleHandlerPtrOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v *LifecycleHandler) *TCPSocketAction {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPtrOutput)
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandlerPatch struct {
	// Exec specifies the action to take.
	Exec *ExecActionPatch `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetActionPatch `pulumi:"httpGet"`
	// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
	TcpSocket *TCPSocketActionPatch `pulumi:"tcpSocket"`
}

// LifecycleHandlerPatchInput is an input type that accepts LifecycleHandlerPatchArgs and LifecycleHandlerPatchOutput values.
// You can construct a concrete instance of `LifecycleHandlerPatchInput` via:
//
//	LifecycleHandlerPatchArgs{...}
type LifecycleHandlerPatchInput interface {
	pulumi.Input

	ToLifecycleHandlerPatchOutput() LifecycleHandlerPatchOutput
	ToLifecycleHandlerPatchOutputWithContext(context.Context) LifecycleHandlerPatchOutput
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandlerPatchArgs struct {
	// Exec specifies the action to take.
	Exec ExecActionPatchPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPatchPtrInput `pulumi:"httpGet"`
	// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
	TcpSocket TCPSocketActionPatchPtrInput `pulumi:"tcpSocket"`
}

func (LifecycleHandlerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHandlerPatch)(nil)).Elem()
}

func (i LifecycleHandlerPatchArgs) ToLifecycleHandlerPatchOutput() LifecycleHandlerPatchOutput {
	return i.ToLifecycleHandlerPatchOutputWithContext(context.Background())
}

func (i LifecycleHandlerPatchArgs) ToLifecycleHandlerPatchOutputWithContext(ctx context.Context) LifecycleHandlerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerPatchOutput)
}

func (i LifecycleHandlerPatchArgs) ToLifecycleHandlerPatchPtrOutput() LifecycleHandlerPatchPtrOutput {
	return i.ToLifecycleHandlerPatchPtrOutputWithContext(context.Background())
}

func (i LifecycleHandlerPatchArgs) ToLifecycleHandlerPatchPtrOutputWithContext(ctx context.Context) LifecycleHandlerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerPatchOutput).ToLifecycleHandlerPatchPtrOutputWithContext(ctx)
}

// LifecycleHandlerPatchPtrInput is an input type that accepts LifecycleHandlerPatchArgs, LifecycleHandlerPatchPtr and LifecycleHandlerPatchPtrOutput values.
// You can construct a concrete instance of `LifecycleHandlerPatchPtrInput` via:
//
//	        LifecycleHandlerPatchArgs{...}
//
//	or:
//
//	        nil
type LifecycleHandlerPatchPtrInput interface {
	pulumi.Input

	ToLifecycleHandlerPatchPtrOutput() LifecycleHandlerPatchPtrOutput
	ToLifecycleHandlerPatchPtrOutputWithContext(context.Context) LifecycleHandlerPatchPtrOutput
}

type lifecycleHandlerPatchPtrType LifecycleHandlerPatchArgs

func LifecycleHandlerPatchPtr(v *LifecycleHandlerPatchArgs) LifecycleHandlerPatchPtrInput {
	return (*lifecycleHandlerPatchPtrType)(v)
}

func (*lifecycleHandlerPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHandlerPatch)(nil)).Elem()
}

func (i *lifecycleHandlerPatchPtrType) ToLifecycleHandlerPatchPtrOutput() LifecycleHandlerPatchPtrOutput {
	return i.ToLifecycleHandlerPatchPtrOutputWithContext(context.Background())
}

func (i *lifecycleHandlerPatchPtrType) ToLifecycleHandlerPatchPtrOutputWithContext(ctx context.Context) LifecycleHandlerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHandlerPatchPtrOutput)
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type LifecycleHandlerPatchOutput struct{ *pulumi.OutputState }

func (LifecycleHandlerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHandlerPatch)(nil)).Elem()
}

func (o LifecycleHandlerPatchOutput) ToLifecycleHandlerPatchOutput() LifecycleHandlerPatchOutput {
	return o
}

func (o LifecycleHandlerPatchOutput) ToLifecycleHandlerPatchOutputWithContext(ctx context.Context) LifecycleHandlerPatchOutput {
	return o
}

func (o LifecycleHandlerPatchOutput) ToLifecycleHandlerPatchPtrOutput() LifecycleHandlerPatchPtrOutput {
	return o.ToLifecycleHandlerPatchPtrOutputWithContext(context.Background())
}

func (o LifecycleHandlerPatchOutput) ToLifecycleHandlerPatchPtrOutputWithContext(ctx context.Context) LifecycleHandlerPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecycleHandlerPatch) *LifecycleHandlerPatch {
		return &v
	}).(LifecycleHandlerPatchPtrOutput)
}

// Exec specifies the action to take.
func (o LifecycleHandlerPatchOutput) Exec() ExecActionPatchPtrOutput {
	return o.ApplyT(func(v LifecycleHandlerPatch) *ExecActionPatch { return v.Exec }).(ExecActionPatchPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o LifecycleHandlerPatchOutput) HttpGet() HTTPGetActionPatchPtrOutput {
	return o.ApplyT(func(v LifecycleHandlerPatch) *HTTPGetActionPatch { return v.HttpGet }).(HTTPGetActionPatchPtrOutput)
}

// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
func (o LifecycleHandlerPatchOutput) TcpSocket() TCPSocketActionPatchPtrOutput {
	return o.ApplyT(func(v LifecycleHandlerPatch) *TCPSocketActionPatch { return v.TcpSocket }).(TCPSocketActionPatchPtrOutput)
}

type LifecycleHandlerPatchPtrOutput struct{ *pulumi.OutputState }

func (LifecycleHandlerPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHandlerPatch)(nil)).Elem()
}

func (o LifecycleHandlerPatchPtrOutput) ToLifecycleHandlerPatchPtrOutput() LifecycleHandlerPatchPtrOutput {
	return o
}

func (o LifecycleHandlerPatchPtrOutput) ToLifecycleHandlerPatchPtrOutputWithContext(ctx context.Context) LifecycleHandlerPatchPtrOutput {
	return o
}

func (o LifecycleHandlerPatchPtrOutput) Elem() LifecycleHandlerPatchOutput {
	return o.ApplyT(func(v *LifecycleHandlerPatch) LifecycleHandlerPatch {
		if v != nil {
			return *v
		}
		var ret LifecycleHandlerPatch
		return ret
	}).(LifecycleHandlerPatchOutput)
}

// Exec specifies the action to take.
func (o LifecycleHandlerPatchPtrOutput) Exec() ExecActionPatchPtrOutput {
	return o.ApplyT(func(v *LifecycleHandlerPatch) *ExecActionPatch {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPatchPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o LifecycleHandlerPatchPtrOutput) HttpGet() HTTPGetActionPatchPtrOutput {
	return o.ApplyT(func(v *LifecycleHandlerPatch) *HTTPGetActionPatch {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPatchPtrOutput)
}

// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
func (o LifecycleHandlerPatchPtrOutput) TcpSocket() TCPSocketActionPatchPtrOutput {
	return o.ApplyT(func(v *LifecycleHandlerPatch) *TCPSocketActionPatch {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPatchPtrOutput)
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type LifecyclePatch struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart *LifecycleHandlerPatch `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop *LifecycleHandlerPatch `pulumi:"preStop"`
}

// LifecyclePatchInput is an input type that accepts LifecyclePatchArgs and LifecyclePatchOutput values.
// You can construct a concrete instance of `LifecyclePatchInput` via:
//
//	LifecyclePatchArgs{...}
type LifecyclePatchInput interface {
	pulumi.Input

	ToLifecyclePatchOutput() LifecyclePatchOutput
	ToLifecyclePatchOutputWithContext(context.Context) LifecyclePatchOutput
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type LifecyclePatchArgs struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart LifecycleHandlerPatchPtrInput `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop LifecycleHandlerPatchPtrInput `pulumi:"preStop"`
}

func (LifecyclePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePatch)(nil)).Elem()
}

func (i LifecyclePatchArgs) ToLifecyclePatchOutput() LifecyclePatchOutput {
	return i.ToLifecyclePatchOutputWithContext(context.Background())
}

func (i LifecyclePatchArgs) ToLifecyclePatchOutputWithContext(ctx context.Context) LifecyclePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePatchOutput)
}

func (i LifecyclePatchArgs) ToLifecyclePatchPtrOutput() LifecyclePatchPtrOutput {
	return i.ToLifecyclePatchPtrOutputWithContext(context.Background())
}

func (i LifecyclePatchArgs) ToLifecyclePatchPtrOutputWithContext(ctx context.Context) LifecyclePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePatchOutput).ToLifecyclePatchPtrOutputWithContext(ctx)
}

// LifecyclePatchPtrInput is an input type that accepts LifecyclePatchArgs, LifecyclePatchPtr and LifecyclePatchPtrOutput values.
// You can construct a concrete instance of `LifecyclePatchPtrInput` via:
//
//	        LifecyclePatchArgs{...}
//
//	or:
//
//	        nil
type LifecyclePatchPtrInput interface {
	pulumi.Input

	ToLifecyclePatchPtrOutput() LifecyclePatchPtrOutput
	ToLifecyclePatchPtrOutputWithContext(context.Context) LifecyclePatchPtrOutput
}

type lifecyclePatchPtrType LifecyclePatchArgs

func LifecyclePatchPtr(v *LifecyclePatchArgs) LifecyclePatchPtrInput {
	return (*lifecyclePatchPtrType)(v)
}

func (*lifecyclePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePatch)(nil)).Elem()
}

func (i *lifecyclePatchPtrType) ToLifecyclePatchPtrOutput() LifecyclePatchPtrOutput {
	return i.ToLifecyclePatchPtrOutputWithContext(context.Background())
}

func (i *lifecyclePatchPtrType) ToLifecyclePatchPtrOutputWithContext(ctx context.Context) LifecyclePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePatchPtrOutput)
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type LifecyclePatchOutput struct{ *pulumi.OutputState }

func (LifecyclePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePatch)(nil)).Elem()
}

func (o LifecyclePatchOutput) ToLifecyclePatchOutput() LifecyclePatchOutput {
	return o
}

func (o LifecyclePatchOutput) ToLifecyclePatchOutputWithContext(ctx context.Context) LifecyclePatchOutput {
	return o
}

func (o LifecyclePatchOutput) ToLifecyclePatchPtrOutput() LifecyclePatchPtrOutput {
	return o.ToLifecyclePatchPtrOutputWithContext(context.Background())
}

func (o LifecyclePatchOutput) ToLifecyclePatchPtrOutputWithContext(ctx context.Context) LifecyclePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePatch) *LifecyclePatch {
		return &v
	}).(LifecyclePatchPtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePatchOutput) PostStart() LifecycleHandlerPatchPtrOutput {
	return o.ApplyT(func(v LifecyclePatch) *LifecycleHandlerPatch { return v.PostStart }).(LifecycleHandlerPatchPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePatchOutput) PreStop() LifecycleHandlerPatchPtrOutput {
	return o.ApplyT(func(v LifecyclePatch) *LifecycleHandlerPatch { return v.PreStop }).(LifecycleHandlerPatchPtrOutput)
}

type LifecyclePatchPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePatch)(nil)).Elem()
}

func (o LifecyclePatchPtrOutput) ToLifecyclePatchPtrOutput() LifecyclePatchPtrOutput {
	return o
}

func (o LifecyclePatchPtrOutput) ToLifecyclePatchPtrOutputWithContext(ctx context.Context) LifecyclePatchPtrOutput {
	return o
}

func (o LifecyclePatchPtrOutput) Elem() LifecyclePatchOutput {
	return o.ApplyT(func(v *LifecyclePatch) LifecyclePatch {
		if v != nil {
			return *v
		}
		var ret LifecyclePatch
		return ret
	}).(LifecyclePatchOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePatchPtrOutput) PostStart() LifecycleHandlerPatchPtrOutput {
	return o.ApplyT(func(v *LifecyclePatch) *LifecycleHandlerPatch {
		if v == nil {
			return nil
		}
		return v.PostStart
	}).(LifecycleHandlerPatchPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o LifecyclePatchPtrOutput) PreStop() LifecycleHandlerPatchPtrOutput {
	return o.ApplyT(func(v *LifecyclePatch) *LifecycleHandlerPatch {
		if v == nil {
			return nil
		}
		return v.PreStop
	}).(LifecycleHandlerPatchPtrOutput)
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangeType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LimitRangeSpec `pulumi:"spec"`
}

// LimitRangeTypeInput is an input type that accepts LimitRangeTypeArgs and LimitRangeTypeOutput values.
// You can construct a concrete instance of `LimitRangeTypeInput` via:
//
//	LimitRangeTypeArgs{...}
type LimitRangeTypeInput interface {
	pulumi.Input

	ToLimitRangeTypeOutput() LimitRangeTypeOutput
	ToLimitRangeTypeOutputWithContext(context.Context) LimitRangeTypeOutput
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangeTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LimitRangeSpecPtrInput `pulumi:"spec"`
}

func (LimitRangeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeType)(nil)).Elem()
}

func (i LimitRangeTypeArgs) ToLimitRangeTypeOutput() LimitRangeTypeOutput {
	return i.ToLimitRangeTypeOutputWithContext(context.Background())
}

func (i LimitRangeTypeArgs) ToLimitRangeTypeOutputWithContext(ctx context.Context) LimitRangeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeTypeOutput)
}

// LimitRangeTypeArrayInput is an input type that accepts LimitRangeTypeArray and LimitRangeTypeArrayOutput values.
// You can construct a concrete instance of `LimitRangeTypeArrayInput` via:
//
//	LimitRangeTypeArray{ LimitRangeTypeArgs{...} }
type LimitRangeTypeArrayInput interface {
	pulumi.Input

	ToLimitRangeTypeArrayOutput() LimitRangeTypeArrayOutput
	ToLimitRangeTypeArrayOutputWithContext(context.Context) LimitRangeTypeArrayOutput
}

type LimitRangeTypeArray []LimitRangeTypeInput

func (LimitRangeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeType)(nil)).Elem()
}

func (i LimitRangeTypeArray) ToLimitRangeTypeArrayOutput() LimitRangeTypeArrayOutput {
	return i.ToLimitRangeTypeArrayOutputWithContext(context.Background())
}

func (i LimitRangeTypeArray) ToLimitRangeTypeArrayOutputWithContext(ctx context.Context) LimitRangeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeTypeArrayOutput)
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangeTypeOutput struct{ *pulumi.OutputState }

func (LimitRangeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeType)(nil)).Elem()
}

func (o LimitRangeTypeOutput) ToLimitRangeTypeOutput() LimitRangeTypeOutput {
	return o
}

func (o LimitRangeTypeOutput) ToLimitRangeTypeOutputWithContext(ctx context.Context) LimitRangeTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LimitRangeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LimitRangeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LimitRangeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LimitRangeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LimitRangeTypeOutput) Spec() LimitRangeSpecPtrOutput {
	return o.ApplyT(func(v LimitRangeType) *LimitRangeSpec { return v.Spec }).(LimitRangeSpecPtrOutput)
}

type LimitRangeTypeArrayOutput struct{ *pulumi.OutputState }

func (LimitRangeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeType)(nil)).Elem()
}

func (o LimitRangeTypeArrayOutput) ToLimitRangeTypeArrayOutput() LimitRangeTypeArrayOutput {
	return o
}

func (o LimitRangeTypeArrayOutput) ToLimitRangeTypeArrayOutputWithContext(ctx context.Context) LimitRangeTypeArrayOutput {
	return o
}

func (o LimitRangeTypeArrayOutput) Index(i pulumi.IntInput) LimitRangeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LimitRangeType {
		return vs[0].([]LimitRangeType)[vs[1].(int)]
	}).(LimitRangeTypeOutput)
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItem struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default map[string]string `pulumi:"default"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest map[string]string `pulumi:"defaultRequest"`
	// Max usage constraints on this kind by resource name.
	Max map[string]string `pulumi:"max"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio map[string]string `pulumi:"maxLimitRequestRatio"`
	// Min usage constraints on this kind by resource name.
	Min map[string]string `pulumi:"min"`
	// Type of resource that this limit applies to.
	Type string `pulumi:"type"`
}

// LimitRangeItemInput is an input type that accepts LimitRangeItemArgs and LimitRangeItemOutput values.
// You can construct a concrete instance of `LimitRangeItemInput` via:
//
//	LimitRangeItemArgs{...}
type LimitRangeItemInput interface {
	pulumi.Input

	ToLimitRangeItemOutput() LimitRangeItemOutput
	ToLimitRangeItemOutputWithContext(context.Context) LimitRangeItemOutput
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItemArgs struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default pulumi.StringMapInput `pulumi:"default"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest pulumi.StringMapInput `pulumi:"defaultRequest"`
	// Max usage constraints on this kind by resource name.
	Max pulumi.StringMapInput `pulumi:"max"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio pulumi.StringMapInput `pulumi:"maxLimitRequestRatio"`
	// Min usage constraints on this kind by resource name.
	Min pulumi.StringMapInput `pulumi:"min"`
	// Type of resource that this limit applies to.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LimitRangeItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeItem)(nil)).Elem()
}

func (i LimitRangeItemArgs) ToLimitRangeItemOutput() LimitRangeItemOutput {
	return i.ToLimitRangeItemOutputWithContext(context.Background())
}

func (i LimitRangeItemArgs) ToLimitRangeItemOutputWithContext(ctx context.Context) LimitRangeItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeItemOutput)
}

// LimitRangeItemArrayInput is an input type that accepts LimitRangeItemArray and LimitRangeItemArrayOutput values.
// You can construct a concrete instance of `LimitRangeItemArrayInput` via:
//
//	LimitRangeItemArray{ LimitRangeItemArgs{...} }
type LimitRangeItemArrayInput interface {
	pulumi.Input

	ToLimitRangeItemArrayOutput() LimitRangeItemArrayOutput
	ToLimitRangeItemArrayOutputWithContext(context.Context) LimitRangeItemArrayOutput
}

type LimitRangeItemArray []LimitRangeItemInput

func (LimitRangeItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeItem)(nil)).Elem()
}

func (i LimitRangeItemArray) ToLimitRangeItemArrayOutput() LimitRangeItemArrayOutput {
	return i.ToLimitRangeItemArrayOutputWithContext(context.Background())
}

func (i LimitRangeItemArray) ToLimitRangeItemArrayOutputWithContext(ctx context.Context) LimitRangeItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeItemArrayOutput)
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItemOutput struct{ *pulumi.OutputState }

func (LimitRangeItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeItem)(nil)).Elem()
}

func (o LimitRangeItemOutput) ToLimitRangeItemOutput() LimitRangeItemOutput {
	return o
}

func (o LimitRangeItemOutput) ToLimitRangeItemOutputWithContext(ctx context.Context) LimitRangeItemOutput {
	return o
}

// Default resource requirement limit value by resource name if resource limit is omitted.
func (o LimitRangeItemOutput) Default() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItem) map[string]string { return v.Default }).(pulumi.StringMapOutput)
}

// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
func (o LimitRangeItemOutput) DefaultRequest() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItem) map[string]string { return v.DefaultRequest }).(pulumi.StringMapOutput)
}

// Max usage constraints on this kind by resource name.
func (o LimitRangeItemOutput) Max() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItem) map[string]string { return v.Max }).(pulumi.StringMapOutput)
}

// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
func (o LimitRangeItemOutput) MaxLimitRequestRatio() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItem) map[string]string { return v.MaxLimitRequestRatio }).(pulumi.StringMapOutput)
}

// Min usage constraints on this kind by resource name.
func (o LimitRangeItemOutput) Min() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItem) map[string]string { return v.Min }).(pulumi.StringMapOutput)
}

// Type of resource that this limit applies to.
func (o LimitRangeItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LimitRangeItem) string { return v.Type }).(pulumi.StringOutput)
}

type LimitRangeItemArrayOutput struct{ *pulumi.OutputState }

func (LimitRangeItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeItem)(nil)).Elem()
}

func (o LimitRangeItemArrayOutput) ToLimitRangeItemArrayOutput() LimitRangeItemArrayOutput {
	return o
}

func (o LimitRangeItemArrayOutput) ToLimitRangeItemArrayOutputWithContext(ctx context.Context) LimitRangeItemArrayOutput {
	return o
}

func (o LimitRangeItemArrayOutput) Index(i pulumi.IntInput) LimitRangeItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LimitRangeItem {
		return vs[0].([]LimitRangeItem)[vs[1].(int)]
	}).(LimitRangeItemOutput)
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItemPatch struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default map[string]string `pulumi:"default"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest map[string]string `pulumi:"defaultRequest"`
	// Max usage constraints on this kind by resource name.
	Max map[string]string `pulumi:"max"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio map[string]string `pulumi:"maxLimitRequestRatio"`
	// Min usage constraints on this kind by resource name.
	Min map[string]string `pulumi:"min"`
	// Type of resource that this limit applies to.
	Type *string `pulumi:"type"`
}

// LimitRangeItemPatchInput is an input type that accepts LimitRangeItemPatchArgs and LimitRangeItemPatchOutput values.
// You can construct a concrete instance of `LimitRangeItemPatchInput` via:
//
//	LimitRangeItemPatchArgs{...}
type LimitRangeItemPatchInput interface {
	pulumi.Input

	ToLimitRangeItemPatchOutput() LimitRangeItemPatchOutput
	ToLimitRangeItemPatchOutputWithContext(context.Context) LimitRangeItemPatchOutput
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItemPatchArgs struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default pulumi.StringMapInput `pulumi:"default"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest pulumi.StringMapInput `pulumi:"defaultRequest"`
	// Max usage constraints on this kind by resource name.
	Max pulumi.StringMapInput `pulumi:"max"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio pulumi.StringMapInput `pulumi:"maxLimitRequestRatio"`
	// Min usage constraints on this kind by resource name.
	Min pulumi.StringMapInput `pulumi:"min"`
	// Type of resource that this limit applies to.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LimitRangeItemPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeItemPatch)(nil)).Elem()
}

func (i LimitRangeItemPatchArgs) ToLimitRangeItemPatchOutput() LimitRangeItemPatchOutput {
	return i.ToLimitRangeItemPatchOutputWithContext(context.Background())
}

func (i LimitRangeItemPatchArgs) ToLimitRangeItemPatchOutputWithContext(ctx context.Context) LimitRangeItemPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeItemPatchOutput)
}

// LimitRangeItemPatchArrayInput is an input type that accepts LimitRangeItemPatchArray and LimitRangeItemPatchArrayOutput values.
// You can construct a concrete instance of `LimitRangeItemPatchArrayInput` via:
//
//	LimitRangeItemPatchArray{ LimitRangeItemPatchArgs{...} }
type LimitRangeItemPatchArrayInput interface {
	pulumi.Input

	ToLimitRangeItemPatchArrayOutput() LimitRangeItemPatchArrayOutput
	ToLimitRangeItemPatchArrayOutputWithContext(context.Context) LimitRangeItemPatchArrayOutput
}

type LimitRangeItemPatchArray []LimitRangeItemPatchInput

func (LimitRangeItemPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeItemPatch)(nil)).Elem()
}

func (i LimitRangeItemPatchArray) ToLimitRangeItemPatchArrayOutput() LimitRangeItemPatchArrayOutput {
	return i.ToLimitRangeItemPatchArrayOutputWithContext(context.Background())
}

func (i LimitRangeItemPatchArray) ToLimitRangeItemPatchArrayOutputWithContext(ctx context.Context) LimitRangeItemPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeItemPatchArrayOutput)
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type LimitRangeItemPatchOutput struct{ *pulumi.OutputState }

func (LimitRangeItemPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeItemPatch)(nil)).Elem()
}

func (o LimitRangeItemPatchOutput) ToLimitRangeItemPatchOutput() LimitRangeItemPatchOutput {
	return o
}

func (o LimitRangeItemPatchOutput) ToLimitRangeItemPatchOutputWithContext(ctx context.Context) LimitRangeItemPatchOutput {
	return o
}

// Default resource requirement limit value by resource name if resource limit is omitted.
func (o LimitRangeItemPatchOutput) Default() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) map[string]string { return v.Default }).(pulumi.StringMapOutput)
}

// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
func (o LimitRangeItemPatchOutput) DefaultRequest() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) map[string]string { return v.DefaultRequest }).(pulumi.StringMapOutput)
}

// Max usage constraints on this kind by resource name.
func (o LimitRangeItemPatchOutput) Max() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) map[string]string { return v.Max }).(pulumi.StringMapOutput)
}

// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
func (o LimitRangeItemPatchOutput) MaxLimitRequestRatio() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) map[string]string { return v.MaxLimitRequestRatio }).(pulumi.StringMapOutput)
}

// Min usage constraints on this kind by resource name.
func (o LimitRangeItemPatchOutput) Min() pulumi.StringMapOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) map[string]string { return v.Min }).(pulumi.StringMapOutput)
}

// Type of resource that this limit applies to.
func (o LimitRangeItemPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangeItemPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LimitRangeItemPatchArrayOutput struct{ *pulumi.OutputState }

func (LimitRangeItemPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LimitRangeItemPatch)(nil)).Elem()
}

func (o LimitRangeItemPatchArrayOutput) ToLimitRangeItemPatchArrayOutput() LimitRangeItemPatchArrayOutput {
	return o
}

func (o LimitRangeItemPatchArrayOutput) ToLimitRangeItemPatchArrayOutputWithContext(ctx context.Context) LimitRangeItemPatchArrayOutput {
	return o
}

func (o LimitRangeItemPatchArrayOutput) Index(i pulumi.IntInput) LimitRangeItemPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LimitRangeItemPatch {
		return vs[0].([]LimitRangeItemPatch)[vs[1].(int)]
	}).(LimitRangeItemPatchOutput)
}

// LimitRangeList is a list of LimitRange items.
type LimitRangeListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Items []LimitRangeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// LimitRangeListTypeInput is an input type that accepts LimitRangeListTypeArgs and LimitRangeListTypeOutput values.
// You can construct a concrete instance of `LimitRangeListTypeInput` via:
//
//	LimitRangeListTypeArgs{...}
type LimitRangeListTypeInput interface {
	pulumi.Input

	ToLimitRangeListTypeOutput() LimitRangeListTypeOutput
	ToLimitRangeListTypeOutputWithContext(context.Context) LimitRangeListTypeOutput
}

// LimitRangeList is a list of LimitRange items.
type LimitRangeListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Items LimitRangeTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (LimitRangeListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeListType)(nil)).Elem()
}

func (i LimitRangeListTypeArgs) ToLimitRangeListTypeOutput() LimitRangeListTypeOutput {
	return i.ToLimitRangeListTypeOutputWithContext(context.Background())
}

func (i LimitRangeListTypeArgs) ToLimitRangeListTypeOutputWithContext(ctx context.Context) LimitRangeListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeListTypeOutput)
}

// LimitRangeList is a list of LimitRange items.
type LimitRangeListTypeOutput struct{ *pulumi.OutputState }

func (LimitRangeListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeListType)(nil)).Elem()
}

func (o LimitRangeListTypeOutput) ToLimitRangeListTypeOutput() LimitRangeListTypeOutput {
	return o
}

func (o LimitRangeListTypeOutput) ToLimitRangeListTypeOutputWithContext(ctx context.Context) LimitRangeListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LimitRangeListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangeListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o LimitRangeListTypeOutput) Items() LimitRangeTypeArrayOutput {
	return o.ApplyT(func(v LimitRangeListType) []LimitRangeType { return v.Items }).(LimitRangeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LimitRangeListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangeListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LimitRangeListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v LimitRangeListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *LimitRangeSpecPatch `pulumi:"spec"`
}

// LimitRangePatchTypeInput is an input type that accepts LimitRangePatchTypeArgs and LimitRangePatchTypeOutput values.
// You can construct a concrete instance of `LimitRangePatchTypeInput` via:
//
//	LimitRangePatchTypeArgs{...}
type LimitRangePatchTypeInput interface {
	pulumi.Input

	ToLimitRangePatchTypeOutput() LimitRangePatchTypeOutput
	ToLimitRangePatchTypeOutputWithContext(context.Context) LimitRangePatchTypeOutput
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec LimitRangeSpecPatchPtrInput `pulumi:"spec"`
}

func (LimitRangePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangePatchType)(nil)).Elem()
}

func (i LimitRangePatchTypeArgs) ToLimitRangePatchTypeOutput() LimitRangePatchTypeOutput {
	return i.ToLimitRangePatchTypeOutputWithContext(context.Background())
}

func (i LimitRangePatchTypeArgs) ToLimitRangePatchTypeOutputWithContext(ctx context.Context) LimitRangePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangePatchTypeOutput)
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type LimitRangePatchTypeOutput struct{ *pulumi.OutputState }

func (LimitRangePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangePatchType)(nil)).Elem()
}

func (o LimitRangePatchTypeOutput) ToLimitRangePatchTypeOutput() LimitRangePatchTypeOutput {
	return o
}

func (o LimitRangePatchTypeOutput) ToLimitRangePatchTypeOutputWithContext(ctx context.Context) LimitRangePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LimitRangePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LimitRangePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LimitRangePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LimitRangePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v LimitRangePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o LimitRangePatchTypeOutput) Spec() LimitRangeSpecPatchPtrOutput {
	return o.ApplyT(func(v LimitRangePatchType) *LimitRangeSpecPatch { return v.Spec }).(LimitRangeSpecPatchPtrOutput)
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpec struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits []LimitRangeItem `pulumi:"limits"`
}

// LimitRangeSpecInput is an input type that accepts LimitRangeSpecArgs and LimitRangeSpecOutput values.
// You can construct a concrete instance of `LimitRangeSpecInput` via:
//
//	LimitRangeSpecArgs{...}
type LimitRangeSpecInput interface {
	pulumi.Input

	ToLimitRangeSpecOutput() LimitRangeSpecOutput
	ToLimitRangeSpecOutputWithContext(context.Context) LimitRangeSpecOutput
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpecArgs struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits LimitRangeItemArrayInput `pulumi:"limits"`
}

func (LimitRangeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeSpec)(nil)).Elem()
}

func (i LimitRangeSpecArgs) ToLimitRangeSpecOutput() LimitRangeSpecOutput {
	return i.ToLimitRangeSpecOutputWithContext(context.Background())
}

func (i LimitRangeSpecArgs) ToLimitRangeSpecOutputWithContext(ctx context.Context) LimitRangeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecOutput)
}

func (i LimitRangeSpecArgs) ToLimitRangeSpecPtrOutput() LimitRangeSpecPtrOutput {
	return i.ToLimitRangeSpecPtrOutputWithContext(context.Background())
}

func (i LimitRangeSpecArgs) ToLimitRangeSpecPtrOutputWithContext(ctx context.Context) LimitRangeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecOutput).ToLimitRangeSpecPtrOutputWithContext(ctx)
}

// LimitRangeSpecPtrInput is an input type that accepts LimitRangeSpecArgs, LimitRangeSpecPtr and LimitRangeSpecPtrOutput values.
// You can construct a concrete instance of `LimitRangeSpecPtrInput` via:
//
//	        LimitRangeSpecArgs{...}
//
//	or:
//
//	        nil
type LimitRangeSpecPtrInput interface {
	pulumi.Input

	ToLimitRangeSpecPtrOutput() LimitRangeSpecPtrOutput
	ToLimitRangeSpecPtrOutputWithContext(context.Context) LimitRangeSpecPtrOutput
}

type limitRangeSpecPtrType LimitRangeSpecArgs

func LimitRangeSpecPtr(v *LimitRangeSpecArgs) LimitRangeSpecPtrInput {
	return (*limitRangeSpecPtrType)(v)
}

func (*limitRangeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitRangeSpec)(nil)).Elem()
}

func (i *limitRangeSpecPtrType) ToLimitRangeSpecPtrOutput() LimitRangeSpecPtrOutput {
	return i.ToLimitRangeSpecPtrOutputWithContext(context.Background())
}

func (i *limitRangeSpecPtrType) ToLimitRangeSpecPtrOutputWithContext(ctx context.Context) LimitRangeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecPtrOutput)
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpecOutput struct{ *pulumi.OutputState }

func (LimitRangeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeSpec)(nil)).Elem()
}

func (o LimitRangeSpecOutput) ToLimitRangeSpecOutput() LimitRangeSpecOutput {
	return o
}

func (o LimitRangeSpecOutput) ToLimitRangeSpecOutputWithContext(ctx context.Context) LimitRangeSpecOutput {
	return o
}

func (o LimitRangeSpecOutput) ToLimitRangeSpecPtrOutput() LimitRangeSpecPtrOutput {
	return o.ToLimitRangeSpecPtrOutputWithContext(context.Background())
}

func (o LimitRangeSpecOutput) ToLimitRangeSpecPtrOutputWithContext(ctx context.Context) LimitRangeSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LimitRangeSpec) *LimitRangeSpec {
		return &v
	}).(LimitRangeSpecPtrOutput)
}

// Limits is the list of LimitRangeItem objects that are enforced.
func (o LimitRangeSpecOutput) Limits() LimitRangeItemArrayOutput {
	return o.ApplyT(func(v LimitRangeSpec) []LimitRangeItem { return v.Limits }).(LimitRangeItemArrayOutput)
}

type LimitRangeSpecPtrOutput struct{ *pulumi.OutputState }

func (LimitRangeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitRangeSpec)(nil)).Elem()
}

func (o LimitRangeSpecPtrOutput) ToLimitRangeSpecPtrOutput() LimitRangeSpecPtrOutput {
	return o
}

func (o LimitRangeSpecPtrOutput) ToLimitRangeSpecPtrOutputWithContext(ctx context.Context) LimitRangeSpecPtrOutput {
	return o
}

func (o LimitRangeSpecPtrOutput) Elem() LimitRangeSpecOutput {
	return o.ApplyT(func(v *LimitRangeSpec) LimitRangeSpec {
		if v != nil {
			return *v
		}
		var ret LimitRangeSpec
		return ret
	}).(LimitRangeSpecOutput)
}

// Limits is the list of LimitRangeItem objects that are enforced.
func (o LimitRangeSpecPtrOutput) Limits() LimitRangeItemArrayOutput {
	return o.ApplyT(func(v *LimitRangeSpec) []LimitRangeItem {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(LimitRangeItemArrayOutput)
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpecPatch struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits []LimitRangeItemPatch `pulumi:"limits"`
}

// LimitRangeSpecPatchInput is an input type that accepts LimitRangeSpecPatchArgs and LimitRangeSpecPatchOutput values.
// You can construct a concrete instance of `LimitRangeSpecPatchInput` via:
//
//	LimitRangeSpecPatchArgs{...}
type LimitRangeSpecPatchInput interface {
	pulumi.Input

	ToLimitRangeSpecPatchOutput() LimitRangeSpecPatchOutput
	ToLimitRangeSpecPatchOutputWithContext(context.Context) LimitRangeSpecPatchOutput
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpecPatchArgs struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits LimitRangeItemPatchArrayInput `pulumi:"limits"`
}

func (LimitRangeSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeSpecPatch)(nil)).Elem()
}

func (i LimitRangeSpecPatchArgs) ToLimitRangeSpecPatchOutput() LimitRangeSpecPatchOutput {
	return i.ToLimitRangeSpecPatchOutputWithContext(context.Background())
}

func (i LimitRangeSpecPatchArgs) ToLimitRangeSpecPatchOutputWithContext(ctx context.Context) LimitRangeSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecPatchOutput)
}

func (i LimitRangeSpecPatchArgs) ToLimitRangeSpecPatchPtrOutput() LimitRangeSpecPatchPtrOutput {
	return i.ToLimitRangeSpecPatchPtrOutputWithContext(context.Background())
}

func (i LimitRangeSpecPatchArgs) ToLimitRangeSpecPatchPtrOutputWithContext(ctx context.Context) LimitRangeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecPatchOutput).ToLimitRangeSpecPatchPtrOutputWithContext(ctx)
}

// LimitRangeSpecPatchPtrInput is an input type that accepts LimitRangeSpecPatchArgs, LimitRangeSpecPatchPtr and LimitRangeSpecPatchPtrOutput values.
// You can construct a concrete instance of `LimitRangeSpecPatchPtrInput` via:
//
//	        LimitRangeSpecPatchArgs{...}
//
//	or:
//
//	        nil
type LimitRangeSpecPatchPtrInput interface {
	pulumi.Input

	ToLimitRangeSpecPatchPtrOutput() LimitRangeSpecPatchPtrOutput
	ToLimitRangeSpecPatchPtrOutputWithContext(context.Context) LimitRangeSpecPatchPtrOutput
}

type limitRangeSpecPatchPtrType LimitRangeSpecPatchArgs

func LimitRangeSpecPatchPtr(v *LimitRangeSpecPatchArgs) LimitRangeSpecPatchPtrInput {
	return (*limitRangeSpecPatchPtrType)(v)
}

func (*limitRangeSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitRangeSpecPatch)(nil)).Elem()
}

func (i *limitRangeSpecPatchPtrType) ToLimitRangeSpecPatchPtrOutput() LimitRangeSpecPatchPtrOutput {
	return i.ToLimitRangeSpecPatchPtrOutputWithContext(context.Background())
}

func (i *limitRangeSpecPatchPtrType) ToLimitRangeSpecPatchPtrOutputWithContext(ctx context.Context) LimitRangeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitRangeSpecPatchPtrOutput)
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type LimitRangeSpecPatchOutput struct{ *pulumi.OutputState }

func (LimitRangeSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitRangeSpecPatch)(nil)).Elem()
}

func (o LimitRangeSpecPatchOutput) ToLimitRangeSpecPatchOutput() LimitRangeSpecPatchOutput {
	return o
}

func (o LimitRangeSpecPatchOutput) ToLimitRangeSpecPatchOutputWithContext(ctx context.Context) LimitRangeSpecPatchOutput {
	return o
}

func (o LimitRangeSpecPatchOutput) ToLimitRangeSpecPatchPtrOutput() LimitRangeSpecPatchPtrOutput {
	return o.ToLimitRangeSpecPatchPtrOutputWithContext(context.Background())
}

func (o LimitRangeSpecPatchOutput) ToLimitRangeSpecPatchPtrOutputWithContext(ctx context.Context) LimitRangeSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LimitRangeSpecPatch) *LimitRangeSpecPatch {
		return &v
	}).(LimitRangeSpecPatchPtrOutput)
}

// Limits is the list of LimitRangeItem objects that are enforced.
func (o LimitRangeSpecPatchOutput) Limits() LimitRangeItemPatchArrayOutput {
	return o.ApplyT(func(v LimitRangeSpecPatch) []LimitRangeItemPatch { return v.Limits }).(LimitRangeItemPatchArrayOutput)
}

type LimitRangeSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (LimitRangeSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitRangeSpecPatch)(nil)).Elem()
}

func (o LimitRangeSpecPatchPtrOutput) ToLimitRangeSpecPatchPtrOutput() LimitRangeSpecPatchPtrOutput {
	return o
}

func (o LimitRangeSpecPatchPtrOutput) ToLimitRangeSpecPatchPtrOutputWithContext(ctx context.Context) LimitRangeSpecPatchPtrOutput {
	return o
}

func (o LimitRangeSpecPatchPtrOutput) Elem() LimitRangeSpecPatchOutput {
	return o.ApplyT(func(v *LimitRangeSpecPatch) LimitRangeSpecPatch {
		if v != nil {
			return *v
		}
		var ret LimitRangeSpecPatch
		return ret
	}).(LimitRangeSpecPatchOutput)
}

// Limits is the list of LimitRangeItem objects that are enforced.
func (o LimitRangeSpecPatchPtrOutput) Limits() LimitRangeItemPatchArrayOutput {
	return o.ApplyT(func(v *LimitRangeSpecPatch) []LimitRangeItemPatch {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(LimitRangeItemPatchArrayOutput)
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngress struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname *string `pulumi:"hostname"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	Ip *string `pulumi:"ip"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports []PortStatus `pulumi:"ports"`
}

// LoadBalancerIngressInput is an input type that accepts LoadBalancerIngressArgs and LoadBalancerIngressOutput values.
// You can construct a concrete instance of `LoadBalancerIngressInput` via:
//
//	LoadBalancerIngressArgs{...}
type LoadBalancerIngressInput interface {
	pulumi.Input

	ToLoadBalancerIngressOutput() LoadBalancerIngressOutput
	ToLoadBalancerIngressOutputWithContext(context.Context) LoadBalancerIngressOutput
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngressArgs struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports PortStatusArrayInput `pulumi:"ports"`
}

func (LoadBalancerIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIngress)(nil)).Elem()
}

func (i LoadBalancerIngressArgs) ToLoadBalancerIngressOutput() LoadBalancerIngressOutput {
	return i.ToLoadBalancerIngressOutputWithContext(context.Background())
}

func (i LoadBalancerIngressArgs) ToLoadBalancerIngressOutputWithContext(ctx context.Context) LoadBalancerIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIngressOutput)
}

// LoadBalancerIngressArrayInput is an input type that accepts LoadBalancerIngressArray and LoadBalancerIngressArrayOutput values.
// You can construct a concrete instance of `LoadBalancerIngressArrayInput` via:
//
//	LoadBalancerIngressArray{ LoadBalancerIngressArgs{...} }
type LoadBalancerIngressArrayInput interface {
	pulumi.Input

	ToLoadBalancerIngressArrayOutput() LoadBalancerIngressArrayOutput
	ToLoadBalancerIngressArrayOutputWithContext(context.Context) LoadBalancerIngressArrayOutput
}

type LoadBalancerIngressArray []LoadBalancerIngressInput

func (LoadBalancerIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIngress)(nil)).Elem()
}

func (i LoadBalancerIngressArray) ToLoadBalancerIngressArrayOutput() LoadBalancerIngressArrayOutput {
	return i.ToLoadBalancerIngressArrayOutputWithContext(context.Background())
}

func (i LoadBalancerIngressArray) ToLoadBalancerIngressArrayOutputWithContext(ctx context.Context) LoadBalancerIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIngressArrayOutput)
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngressOutput struct{ *pulumi.OutputState }

func (LoadBalancerIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIngress)(nil)).Elem()
}

func (o LoadBalancerIngressOutput) ToLoadBalancerIngressOutput() LoadBalancerIngressOutput {
	return o
}

func (o LoadBalancerIngressOutput) ToLoadBalancerIngressOutputWithContext(ctx context.Context) LoadBalancerIngressOutput {
	return o
}

// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
func (o LoadBalancerIngressOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIngress) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
func (o LoadBalancerIngressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIngress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
func (o LoadBalancerIngressOutput) Ports() PortStatusArrayOutput {
	return o.ApplyT(func(v LoadBalancerIngress) []PortStatus { return v.Ports }).(PortStatusArrayOutput)
}

type LoadBalancerIngressArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIngress)(nil)).Elem()
}

func (o LoadBalancerIngressArrayOutput) ToLoadBalancerIngressArrayOutput() LoadBalancerIngressArrayOutput {
	return o
}

func (o LoadBalancerIngressArrayOutput) ToLoadBalancerIngressArrayOutputWithContext(ctx context.Context) LoadBalancerIngressArrayOutput {
	return o
}

func (o LoadBalancerIngressArrayOutput) Index(i pulumi.IntInput) LoadBalancerIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerIngress {
		return vs[0].([]LoadBalancerIngress)[vs[1].(int)]
	}).(LoadBalancerIngressOutput)
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngressPatch struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname *string `pulumi:"hostname"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	Ip *string `pulumi:"ip"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports []PortStatusPatch `pulumi:"ports"`
}

// LoadBalancerIngressPatchInput is an input type that accepts LoadBalancerIngressPatchArgs and LoadBalancerIngressPatchOutput values.
// You can construct a concrete instance of `LoadBalancerIngressPatchInput` via:
//
//	LoadBalancerIngressPatchArgs{...}
type LoadBalancerIngressPatchInput interface {
	pulumi.Input

	ToLoadBalancerIngressPatchOutput() LoadBalancerIngressPatchOutput
	ToLoadBalancerIngressPatchOutputWithContext(context.Context) LoadBalancerIngressPatchOutput
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngressPatchArgs struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports PortStatusPatchArrayInput `pulumi:"ports"`
}

func (LoadBalancerIngressPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIngressPatch)(nil)).Elem()
}

func (i LoadBalancerIngressPatchArgs) ToLoadBalancerIngressPatchOutput() LoadBalancerIngressPatchOutput {
	return i.ToLoadBalancerIngressPatchOutputWithContext(context.Background())
}

func (i LoadBalancerIngressPatchArgs) ToLoadBalancerIngressPatchOutputWithContext(ctx context.Context) LoadBalancerIngressPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIngressPatchOutput)
}

// LoadBalancerIngressPatchArrayInput is an input type that accepts LoadBalancerIngressPatchArray and LoadBalancerIngressPatchArrayOutput values.
// You can construct a concrete instance of `LoadBalancerIngressPatchArrayInput` via:
//
//	LoadBalancerIngressPatchArray{ LoadBalancerIngressPatchArgs{...} }
type LoadBalancerIngressPatchArrayInput interface {
	pulumi.Input

	ToLoadBalancerIngressPatchArrayOutput() LoadBalancerIngressPatchArrayOutput
	ToLoadBalancerIngressPatchArrayOutputWithContext(context.Context) LoadBalancerIngressPatchArrayOutput
}

type LoadBalancerIngressPatchArray []LoadBalancerIngressPatchInput

func (LoadBalancerIngressPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIngressPatch)(nil)).Elem()
}

func (i LoadBalancerIngressPatchArray) ToLoadBalancerIngressPatchArrayOutput() LoadBalancerIngressPatchArrayOutput {
	return i.ToLoadBalancerIngressPatchArrayOutputWithContext(context.Background())
}

func (i LoadBalancerIngressPatchArray) ToLoadBalancerIngressPatchArrayOutputWithContext(ctx context.Context) LoadBalancerIngressPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIngressPatchArrayOutput)
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type LoadBalancerIngressPatchOutput struct{ *pulumi.OutputState }

func (LoadBalancerIngressPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIngressPatch)(nil)).Elem()
}

func (o LoadBalancerIngressPatchOutput) ToLoadBalancerIngressPatchOutput() LoadBalancerIngressPatchOutput {
	return o
}

func (o LoadBalancerIngressPatchOutput) ToLoadBalancerIngressPatchOutputWithContext(ctx context.Context) LoadBalancerIngressPatchOutput {
	return o
}

// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
func (o LoadBalancerIngressPatchOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIngressPatch) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
func (o LoadBalancerIngressPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIngressPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
func (o LoadBalancerIngressPatchOutput) Ports() PortStatusPatchArrayOutput {
	return o.ApplyT(func(v LoadBalancerIngressPatch) []PortStatusPatch { return v.Ports }).(PortStatusPatchArrayOutput)
}

type LoadBalancerIngressPatchArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerIngressPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIngressPatch)(nil)).Elem()
}

func (o LoadBalancerIngressPatchArrayOutput) ToLoadBalancerIngressPatchArrayOutput() LoadBalancerIngressPatchArrayOutput {
	return o
}

func (o LoadBalancerIngressPatchArrayOutput) ToLoadBalancerIngressPatchArrayOutputWithContext(ctx context.Context) LoadBalancerIngressPatchArrayOutput {
	return o
}

func (o LoadBalancerIngressPatchArrayOutput) Index(i pulumi.IntInput) LoadBalancerIngressPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerIngressPatch {
		return vs[0].([]LoadBalancerIngressPatch)[vs[1].(int)]
	}).(LoadBalancerIngressPatchOutput)
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatus struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress []LoadBalancerIngress `pulumi:"ingress"`
}

// LoadBalancerStatusInput is an input type that accepts LoadBalancerStatusArgs and LoadBalancerStatusOutput values.
// You can construct a concrete instance of `LoadBalancerStatusInput` via:
//
//	LoadBalancerStatusArgs{...}
type LoadBalancerStatusInput interface {
	pulumi.Input

	ToLoadBalancerStatusOutput() LoadBalancerStatusOutput
	ToLoadBalancerStatusOutputWithContext(context.Context) LoadBalancerStatusOutput
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatusArgs struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress LoadBalancerIngressArrayInput `pulumi:"ingress"`
}

func (LoadBalancerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStatus)(nil)).Elem()
}

func (i LoadBalancerStatusArgs) ToLoadBalancerStatusOutput() LoadBalancerStatusOutput {
	return i.ToLoadBalancerStatusOutputWithContext(context.Background())
}

func (i LoadBalancerStatusArgs) ToLoadBalancerStatusOutputWithContext(ctx context.Context) LoadBalancerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusOutput)
}

func (i LoadBalancerStatusArgs) ToLoadBalancerStatusPtrOutput() LoadBalancerStatusPtrOutput {
	return i.ToLoadBalancerStatusPtrOutputWithContext(context.Background())
}

func (i LoadBalancerStatusArgs) ToLoadBalancerStatusPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusOutput).ToLoadBalancerStatusPtrOutputWithContext(ctx)
}

// LoadBalancerStatusPtrInput is an input type that accepts LoadBalancerStatusArgs, LoadBalancerStatusPtr and LoadBalancerStatusPtrOutput values.
// You can construct a concrete instance of `LoadBalancerStatusPtrInput` via:
//
//	        LoadBalancerStatusArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerStatusPtrInput interface {
	pulumi.Input

	ToLoadBalancerStatusPtrOutput() LoadBalancerStatusPtrOutput
	ToLoadBalancerStatusPtrOutputWithContext(context.Context) LoadBalancerStatusPtrOutput
}

type loadBalancerStatusPtrType LoadBalancerStatusArgs

func LoadBalancerStatusPtr(v *LoadBalancerStatusArgs) LoadBalancerStatusPtrInput {
	return (*loadBalancerStatusPtrType)(v)
}

func (*loadBalancerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStatus)(nil)).Elem()
}

func (i *loadBalancerStatusPtrType) ToLoadBalancerStatusPtrOutput() LoadBalancerStatusPtrOutput {
	return i.ToLoadBalancerStatusPtrOutputWithContext(context.Background())
}

func (i *loadBalancerStatusPtrType) ToLoadBalancerStatusPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusPtrOutput)
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatusOutput struct{ *pulumi.OutputState }

func (LoadBalancerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStatus)(nil)).Elem()
}

func (o LoadBalancerStatusOutput) ToLoadBalancerStatusOutput() LoadBalancerStatusOutput {
	return o
}

func (o LoadBalancerStatusOutput) ToLoadBalancerStatusOutputWithContext(ctx context.Context) LoadBalancerStatusOutput {
	return o
}

func (o LoadBalancerStatusOutput) ToLoadBalancerStatusPtrOutput() LoadBalancerStatusPtrOutput {
	return o.ToLoadBalancerStatusPtrOutputWithContext(context.Background())
}

func (o LoadBalancerStatusOutput) ToLoadBalancerStatusPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerStatus) *LoadBalancerStatus {
		return &v
	}).(LoadBalancerStatusPtrOutput)
}

// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
func (o LoadBalancerStatusOutput) Ingress() LoadBalancerIngressArrayOutput {
	return o.ApplyT(func(v LoadBalancerStatus) []LoadBalancerIngress { return v.Ingress }).(LoadBalancerIngressArrayOutput)
}

type LoadBalancerStatusPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStatus)(nil)).Elem()
}

func (o LoadBalancerStatusPtrOutput) ToLoadBalancerStatusPtrOutput() LoadBalancerStatusPtrOutput {
	return o
}

func (o LoadBalancerStatusPtrOutput) ToLoadBalancerStatusPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPtrOutput {
	return o
}

func (o LoadBalancerStatusPtrOutput) Elem() LoadBalancerStatusOutput {
	return o.ApplyT(func(v *LoadBalancerStatus) LoadBalancerStatus {
		if v != nil {
			return *v
		}
		var ret LoadBalancerStatus
		return ret
	}).(LoadBalancerStatusOutput)
}

// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
func (o LoadBalancerStatusPtrOutput) Ingress() LoadBalancerIngressArrayOutput {
	return o.ApplyT(func(v *LoadBalancerStatus) []LoadBalancerIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(LoadBalancerIngressArrayOutput)
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatusPatch struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress []LoadBalancerIngressPatch `pulumi:"ingress"`
}

// LoadBalancerStatusPatchInput is an input type that accepts LoadBalancerStatusPatchArgs and LoadBalancerStatusPatchOutput values.
// You can construct a concrete instance of `LoadBalancerStatusPatchInput` via:
//
//	LoadBalancerStatusPatchArgs{...}
type LoadBalancerStatusPatchInput interface {
	pulumi.Input

	ToLoadBalancerStatusPatchOutput() LoadBalancerStatusPatchOutput
	ToLoadBalancerStatusPatchOutputWithContext(context.Context) LoadBalancerStatusPatchOutput
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatusPatchArgs struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress LoadBalancerIngressPatchArrayInput `pulumi:"ingress"`
}

func (LoadBalancerStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStatusPatch)(nil)).Elem()
}

func (i LoadBalancerStatusPatchArgs) ToLoadBalancerStatusPatchOutput() LoadBalancerStatusPatchOutput {
	return i.ToLoadBalancerStatusPatchOutputWithContext(context.Background())
}

func (i LoadBalancerStatusPatchArgs) ToLoadBalancerStatusPatchOutputWithContext(ctx context.Context) LoadBalancerStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusPatchOutput)
}

func (i LoadBalancerStatusPatchArgs) ToLoadBalancerStatusPatchPtrOutput() LoadBalancerStatusPatchPtrOutput {
	return i.ToLoadBalancerStatusPatchPtrOutputWithContext(context.Background())
}

func (i LoadBalancerStatusPatchArgs) ToLoadBalancerStatusPatchPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusPatchOutput).ToLoadBalancerStatusPatchPtrOutputWithContext(ctx)
}

// LoadBalancerStatusPatchPtrInput is an input type that accepts LoadBalancerStatusPatchArgs, LoadBalancerStatusPatchPtr and LoadBalancerStatusPatchPtrOutput values.
// You can construct a concrete instance of `LoadBalancerStatusPatchPtrInput` via:
//
//	        LoadBalancerStatusPatchArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerStatusPatchPtrInput interface {
	pulumi.Input

	ToLoadBalancerStatusPatchPtrOutput() LoadBalancerStatusPatchPtrOutput
	ToLoadBalancerStatusPatchPtrOutputWithContext(context.Context) LoadBalancerStatusPatchPtrOutput
}

type loadBalancerStatusPatchPtrType LoadBalancerStatusPatchArgs

func LoadBalancerStatusPatchPtr(v *LoadBalancerStatusPatchArgs) LoadBalancerStatusPatchPtrInput {
	return (*loadBalancerStatusPatchPtrType)(v)
}

func (*loadBalancerStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStatusPatch)(nil)).Elem()
}

func (i *loadBalancerStatusPatchPtrType) ToLoadBalancerStatusPatchPtrOutput() LoadBalancerStatusPatchPtrOutput {
	return i.ToLoadBalancerStatusPatchPtrOutputWithContext(context.Background())
}

func (i *loadBalancerStatusPatchPtrType) ToLoadBalancerStatusPatchPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStatusPatchPtrOutput)
}

// LoadBalancerStatus represents the status of a load-balancer.
type LoadBalancerStatusPatchOutput struct{ *pulumi.OutputState }

func (LoadBalancerStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStatusPatch)(nil)).Elem()
}

func (o LoadBalancerStatusPatchOutput) ToLoadBalancerStatusPatchOutput() LoadBalancerStatusPatchOutput {
	return o
}

func (o LoadBalancerStatusPatchOutput) ToLoadBalancerStatusPatchOutputWithContext(ctx context.Context) LoadBalancerStatusPatchOutput {
	return o
}

func (o LoadBalancerStatusPatchOutput) ToLoadBalancerStatusPatchPtrOutput() LoadBalancerStatusPatchPtrOutput {
	return o.ToLoadBalancerStatusPatchPtrOutputWithContext(context.Background())
}

func (o LoadBalancerStatusPatchOutput) ToLoadBalancerStatusPatchPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerStatusPatch) *LoadBalancerStatusPatch {
		return &v
	}).(LoadBalancerStatusPatchPtrOutput)
}

// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
func (o LoadBalancerStatusPatchOutput) Ingress() LoadBalancerIngressPatchArrayOutput {
	return o.ApplyT(func(v LoadBalancerStatusPatch) []LoadBalancerIngressPatch { return v.Ingress }).(LoadBalancerIngressPatchArrayOutput)
}

type LoadBalancerStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStatusPatch)(nil)).Elem()
}

func (o LoadBalancerStatusPatchPtrOutput) ToLoadBalancerStatusPatchPtrOutput() LoadBalancerStatusPatchPtrOutput {
	return o
}

func (o LoadBalancerStatusPatchPtrOutput) ToLoadBalancerStatusPatchPtrOutputWithContext(ctx context.Context) LoadBalancerStatusPatchPtrOutput {
	return o
}

func (o LoadBalancerStatusPatchPtrOutput) Elem() LoadBalancerStatusPatchOutput {
	return o.ApplyT(func(v *LoadBalancerStatusPatch) LoadBalancerStatusPatch {
		if v != nil {
			return *v
		}
		var ret LoadBalancerStatusPatch
		return ret
	}).(LoadBalancerStatusPatchOutput)
}

// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
func (o LoadBalancerStatusPatchPtrOutput) Ingress() LoadBalancerIngressPatchArrayOutput {
	return o.ApplyT(func(v *LoadBalancerStatusPatch) []LoadBalancerIngressPatch {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(LoadBalancerIngressPatchArrayOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReference struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// LocalObjectReferenceInput is an input type that accepts LocalObjectReferenceArgs and LocalObjectReferenceOutput values.
// You can construct a concrete instance of `LocalObjectReferenceInput` via:
//
//	LocalObjectReferenceArgs{...}
type LocalObjectReferenceInput interface {
	pulumi.Input

	ToLocalObjectReferenceOutput() LocalObjectReferenceOutput
	ToLocalObjectReferenceOutputWithContext(context.Context) LocalObjectReferenceOutput
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LocalObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return i.ToLocalObjectReferenceOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput)
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput).ToLocalObjectReferencePtrOutputWithContext(ctx)
}

// LocalObjectReferencePtrInput is an input type that accepts LocalObjectReferenceArgs, LocalObjectReferencePtr and LocalObjectReferencePtrOutput values.
// You can construct a concrete instance of `LocalObjectReferencePtrInput` via:
//
//	        LocalObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type LocalObjectReferencePtrInput interface {
	pulumi.Input

	ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput
	ToLocalObjectReferencePtrOutputWithContext(context.Context) LocalObjectReferencePtrOutput
}

type localObjectReferencePtrType LocalObjectReferenceArgs

func LocalObjectReferencePtr(v *LocalObjectReferenceArgs) LocalObjectReferencePtrInput {
	return (*localObjectReferencePtrType)(v)
}

func (*localObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePtrOutput)
}

// LocalObjectReferenceArrayInput is an input type that accepts LocalObjectReferenceArray and LocalObjectReferenceArrayOutput values.
// You can construct a concrete instance of `LocalObjectReferenceArrayInput` via:
//
//	LocalObjectReferenceArray{ LocalObjectReferenceArgs{...} }
type LocalObjectReferenceArrayInput interface {
	pulumi.Input

	ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput
	ToLocalObjectReferenceArrayOutputWithContext(context.Context) LocalObjectReferenceArrayOutput
}

type LocalObjectReferenceArray []LocalObjectReferenceInput

func (LocalObjectReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReference)(nil)).Elem()
}

func (i LocalObjectReferenceArray) ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput {
	return i.ToLocalObjectReferenceArrayOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArray) ToLocalObjectReferenceArrayOutputWithContext(ctx context.Context) LocalObjectReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceArrayOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalObjectReference) *LocalObjectReference {
		return &v
	}).(LocalObjectReferencePtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LocalObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) Elem() LocalObjectReferenceOutput {
	return o.ApplyT(func(v *LocalObjectReference) LocalObjectReference {
		if v != nil {
			return *v
		}
		var ret LocalObjectReference
		return ret
	}).(LocalObjectReferenceOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type LocalObjectReferenceArrayOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferenceArrayOutput) ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput {
	return o
}

func (o LocalObjectReferenceArrayOutput) ToLocalObjectReferenceArrayOutputWithContext(ctx context.Context) LocalObjectReferenceArrayOutput {
	return o
}

func (o LocalObjectReferenceArrayOutput) Index(i pulumi.IntInput) LocalObjectReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalObjectReference {
		return vs[0].([]LocalObjectReference)[vs[1].(int)]
	}).(LocalObjectReferenceOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferencePatch struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// LocalObjectReferencePatchInput is an input type that accepts LocalObjectReferencePatchArgs and LocalObjectReferencePatchOutput values.
// You can construct a concrete instance of `LocalObjectReferencePatchInput` via:
//
//	LocalObjectReferencePatchArgs{...}
type LocalObjectReferencePatchInput interface {
	pulumi.Input

	ToLocalObjectReferencePatchOutput() LocalObjectReferencePatchOutput
	ToLocalObjectReferencePatchOutputWithContext(context.Context) LocalObjectReferencePatchOutput
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferencePatchArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LocalObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReferencePatch)(nil)).Elem()
}

func (i LocalObjectReferencePatchArgs) ToLocalObjectReferencePatchOutput() LocalObjectReferencePatchOutput {
	return i.ToLocalObjectReferencePatchOutputWithContext(context.Background())
}

func (i LocalObjectReferencePatchArgs) ToLocalObjectReferencePatchOutputWithContext(ctx context.Context) LocalObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePatchOutput)
}

func (i LocalObjectReferencePatchArgs) ToLocalObjectReferencePatchPtrOutput() LocalObjectReferencePatchPtrOutput {
	return i.ToLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i LocalObjectReferencePatchArgs) ToLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) LocalObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePatchOutput).ToLocalObjectReferencePatchPtrOutputWithContext(ctx)
}

// LocalObjectReferencePatchPtrInput is an input type that accepts LocalObjectReferencePatchArgs, LocalObjectReferencePatchPtr and LocalObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `LocalObjectReferencePatchPtrInput` via:
//
//	        LocalObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type LocalObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToLocalObjectReferencePatchPtrOutput() LocalObjectReferencePatchPtrOutput
	ToLocalObjectReferencePatchPtrOutputWithContext(context.Context) LocalObjectReferencePatchPtrOutput
}

type localObjectReferencePatchPtrType LocalObjectReferencePatchArgs

func LocalObjectReferencePatchPtr(v *LocalObjectReferencePatchArgs) LocalObjectReferencePatchPtrInput {
	return (*localObjectReferencePatchPtrType)(v)
}

func (*localObjectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReferencePatch)(nil)).Elem()
}

func (i *localObjectReferencePatchPtrType) ToLocalObjectReferencePatchPtrOutput() LocalObjectReferencePatchPtrOutput {
	return i.ToLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *localObjectReferencePatchPtrType) ToLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) LocalObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePatchPtrOutput)
}

// LocalObjectReferencePatchArrayInput is an input type that accepts LocalObjectReferencePatchArray and LocalObjectReferencePatchArrayOutput values.
// You can construct a concrete instance of `LocalObjectReferencePatchArrayInput` via:
//
//	LocalObjectReferencePatchArray{ LocalObjectReferencePatchArgs{...} }
type LocalObjectReferencePatchArrayInput interface {
	pulumi.Input

	ToLocalObjectReferencePatchArrayOutput() LocalObjectReferencePatchArrayOutput
	ToLocalObjectReferencePatchArrayOutputWithContext(context.Context) LocalObjectReferencePatchArrayOutput
}

type LocalObjectReferencePatchArray []LocalObjectReferencePatchInput

func (LocalObjectReferencePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReferencePatch)(nil)).Elem()
}

func (i LocalObjectReferencePatchArray) ToLocalObjectReferencePatchArrayOutput() LocalObjectReferencePatchArrayOutput {
	return i.ToLocalObjectReferencePatchArrayOutputWithContext(context.Background())
}

func (i LocalObjectReferencePatchArray) ToLocalObjectReferencePatchArrayOutputWithContext(ctx context.Context) LocalObjectReferencePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePatchArrayOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReferencePatch)(nil)).Elem()
}

func (o LocalObjectReferencePatchOutput) ToLocalObjectReferencePatchOutput() LocalObjectReferencePatchOutput {
	return o
}

func (o LocalObjectReferencePatchOutput) ToLocalObjectReferencePatchOutputWithContext(ctx context.Context) LocalObjectReferencePatchOutput {
	return o
}

func (o LocalObjectReferencePatchOutput) ToLocalObjectReferencePatchPtrOutput() LocalObjectReferencePatchPtrOutput {
	return o.ToLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o LocalObjectReferencePatchOutput) ToLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) LocalObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalObjectReferencePatch) *LocalObjectReferencePatch {
		return &v
	}).(LocalObjectReferencePatchPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LocalObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReferencePatch)(nil)).Elem()
}

func (o LocalObjectReferencePatchPtrOutput) ToLocalObjectReferencePatchPtrOutput() LocalObjectReferencePatchPtrOutput {
	return o
}

func (o LocalObjectReferencePatchPtrOutput) ToLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) LocalObjectReferencePatchPtrOutput {
	return o
}

func (o LocalObjectReferencePatchPtrOutput) Elem() LocalObjectReferencePatchOutput {
	return o.ApplyT(func(v *LocalObjectReferencePatch) LocalObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret LocalObjectReferencePatch
		return ret
	}).(LocalObjectReferencePatchOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type LocalObjectReferencePatchArrayOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReferencePatch)(nil)).Elem()
}

func (o LocalObjectReferencePatchArrayOutput) ToLocalObjectReferencePatchArrayOutput() LocalObjectReferencePatchArrayOutput {
	return o
}

func (o LocalObjectReferencePatchArrayOutput) ToLocalObjectReferencePatchArrayOutputWithContext(ctx context.Context) LocalObjectReferencePatchArrayOutput {
	return o
}

func (o LocalObjectReferencePatchArrayOutput) Index(i pulumi.IntInput) LocalObjectReferencePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalObjectReferencePatch {
		return vs[0].([]LocalObjectReferencePatch)[vs[1].(int)]
	}).(LocalObjectReferencePatchOutput)
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSource struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType *string `pulumi:"fsType"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path string `pulumi:"path"`
}

// LocalVolumeSourceInput is an input type that accepts LocalVolumeSourceArgs and LocalVolumeSourceOutput values.
// You can construct a concrete instance of `LocalVolumeSourceInput` via:
//
//	LocalVolumeSourceArgs{...}
type LocalVolumeSourceInput interface {
	pulumi.Input

	ToLocalVolumeSourceOutput() LocalVolumeSourceOutput
	ToLocalVolumeSourceOutputWithContext(context.Context) LocalVolumeSourceOutput
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path pulumi.StringInput `pulumi:"path"`
}

func (LocalVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalVolumeSource)(nil)).Elem()
}

func (i LocalVolumeSourceArgs) ToLocalVolumeSourceOutput() LocalVolumeSourceOutput {
	return i.ToLocalVolumeSourceOutputWithContext(context.Background())
}

func (i LocalVolumeSourceArgs) ToLocalVolumeSourceOutputWithContext(ctx context.Context) LocalVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourceOutput)
}

func (i LocalVolumeSourceArgs) ToLocalVolumeSourcePtrOutput() LocalVolumeSourcePtrOutput {
	return i.ToLocalVolumeSourcePtrOutputWithContext(context.Background())
}

func (i LocalVolumeSourceArgs) ToLocalVolumeSourcePtrOutputWithContext(ctx context.Context) LocalVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourceOutput).ToLocalVolumeSourcePtrOutputWithContext(ctx)
}

// LocalVolumeSourcePtrInput is an input type that accepts LocalVolumeSourceArgs, LocalVolumeSourcePtr and LocalVolumeSourcePtrOutput values.
// You can construct a concrete instance of `LocalVolumeSourcePtrInput` via:
//
//	        LocalVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type LocalVolumeSourcePtrInput interface {
	pulumi.Input

	ToLocalVolumeSourcePtrOutput() LocalVolumeSourcePtrOutput
	ToLocalVolumeSourcePtrOutputWithContext(context.Context) LocalVolumeSourcePtrOutput
}

type localVolumeSourcePtrType LocalVolumeSourceArgs

func LocalVolumeSourcePtr(v *LocalVolumeSourceArgs) LocalVolumeSourcePtrInput {
	return (*localVolumeSourcePtrType)(v)
}

func (*localVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVolumeSource)(nil)).Elem()
}

func (i *localVolumeSourcePtrType) ToLocalVolumeSourcePtrOutput() LocalVolumeSourcePtrOutput {
	return i.ToLocalVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *localVolumeSourcePtrType) ToLocalVolumeSourcePtrOutputWithContext(ctx context.Context) LocalVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourcePtrOutput)
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSourceOutput struct{ *pulumi.OutputState }

func (LocalVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalVolumeSource)(nil)).Elem()
}

func (o LocalVolumeSourceOutput) ToLocalVolumeSourceOutput() LocalVolumeSourceOutput {
	return o
}

func (o LocalVolumeSourceOutput) ToLocalVolumeSourceOutputWithContext(ctx context.Context) LocalVolumeSourceOutput {
	return o
}

func (o LocalVolumeSourceOutput) ToLocalVolumeSourcePtrOutput() LocalVolumeSourcePtrOutput {
	return o.ToLocalVolumeSourcePtrOutputWithContext(context.Background())
}

func (o LocalVolumeSourceOutput) ToLocalVolumeSourcePtrOutputWithContext(ctx context.Context) LocalVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalVolumeSource) *LocalVolumeSource {
		return &v
	}).(LocalVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
func (o LocalVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
func (o LocalVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocalVolumeSource) string { return v.Path }).(pulumi.StringOutput)
}

type LocalVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (LocalVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVolumeSource)(nil)).Elem()
}

func (o LocalVolumeSourcePtrOutput) ToLocalVolumeSourcePtrOutput() LocalVolumeSourcePtrOutput {
	return o
}

func (o LocalVolumeSourcePtrOutput) ToLocalVolumeSourcePtrOutputWithContext(ctx context.Context) LocalVolumeSourcePtrOutput {
	return o
}

func (o LocalVolumeSourcePtrOutput) Elem() LocalVolumeSourceOutput {
	return o.ApplyT(func(v *LocalVolumeSource) LocalVolumeSource {
		if v != nil {
			return *v
		}
		var ret LocalVolumeSource
		return ret
	}).(LocalVolumeSourceOutput)
}

// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
func (o LocalVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
func (o LocalVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType *string `pulumi:"fsType"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path *string `pulumi:"path"`
}

// LocalVolumeSourcePatchInput is an input type that accepts LocalVolumeSourcePatchArgs and LocalVolumeSourcePatchOutput values.
// You can construct a concrete instance of `LocalVolumeSourcePatchInput` via:
//
//	LocalVolumeSourcePatchArgs{...}
type LocalVolumeSourcePatchInput interface {
	pulumi.Input

	ToLocalVolumeSourcePatchOutput() LocalVolumeSourcePatchOutput
	ToLocalVolumeSourcePatchOutputWithContext(context.Context) LocalVolumeSourcePatchOutput
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (LocalVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalVolumeSourcePatch)(nil)).Elem()
}

func (i LocalVolumeSourcePatchArgs) ToLocalVolumeSourcePatchOutput() LocalVolumeSourcePatchOutput {
	return i.ToLocalVolumeSourcePatchOutputWithContext(context.Background())
}

func (i LocalVolumeSourcePatchArgs) ToLocalVolumeSourcePatchOutputWithContext(ctx context.Context) LocalVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourcePatchOutput)
}

func (i LocalVolumeSourcePatchArgs) ToLocalVolumeSourcePatchPtrOutput() LocalVolumeSourcePatchPtrOutput {
	return i.ToLocalVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i LocalVolumeSourcePatchArgs) ToLocalVolumeSourcePatchPtrOutputWithContext(ctx context.Context) LocalVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourcePatchOutput).ToLocalVolumeSourcePatchPtrOutputWithContext(ctx)
}

// LocalVolumeSourcePatchPtrInput is an input type that accepts LocalVolumeSourcePatchArgs, LocalVolumeSourcePatchPtr and LocalVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `LocalVolumeSourcePatchPtrInput` via:
//
//	        LocalVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type LocalVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToLocalVolumeSourcePatchPtrOutput() LocalVolumeSourcePatchPtrOutput
	ToLocalVolumeSourcePatchPtrOutputWithContext(context.Context) LocalVolumeSourcePatchPtrOutput
}

type localVolumeSourcePatchPtrType LocalVolumeSourcePatchArgs

func LocalVolumeSourcePatchPtr(v *LocalVolumeSourcePatchArgs) LocalVolumeSourcePatchPtrInput {
	return (*localVolumeSourcePatchPtrType)(v)
}

func (*localVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVolumeSourcePatch)(nil)).Elem()
}

func (i *localVolumeSourcePatchPtrType) ToLocalVolumeSourcePatchPtrOutput() LocalVolumeSourcePatchPtrOutput {
	return i.ToLocalVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *localVolumeSourcePatchPtrType) ToLocalVolumeSourcePatchPtrOutputWithContext(ctx context.Context) LocalVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVolumeSourcePatchPtrOutput)
}

// Local represents directly-attached storage with node affinity (Beta feature)
type LocalVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (LocalVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalVolumeSourcePatch)(nil)).Elem()
}

func (o LocalVolumeSourcePatchOutput) ToLocalVolumeSourcePatchOutput() LocalVolumeSourcePatchOutput {
	return o
}

func (o LocalVolumeSourcePatchOutput) ToLocalVolumeSourcePatchOutputWithContext(ctx context.Context) LocalVolumeSourcePatchOutput {
	return o
}

func (o LocalVolumeSourcePatchOutput) ToLocalVolumeSourcePatchPtrOutput() LocalVolumeSourcePatchPtrOutput {
	return o.ToLocalVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o LocalVolumeSourcePatchOutput) ToLocalVolumeSourcePatchPtrOutputWithContext(ctx context.Context) LocalVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalVolumeSourcePatch) *LocalVolumeSourcePatch {
		return &v
	}).(LocalVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
func (o LocalVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
func (o LocalVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type LocalVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (LocalVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVolumeSourcePatch)(nil)).Elem()
}

func (o LocalVolumeSourcePatchPtrOutput) ToLocalVolumeSourcePatchPtrOutput() LocalVolumeSourcePatchPtrOutput {
	return o
}

func (o LocalVolumeSourcePatchPtrOutput) ToLocalVolumeSourcePatchPtrOutputWithContext(ctx context.Context) LocalVolumeSourcePatchPtrOutput {
	return o
}

func (o LocalVolumeSourcePatchPtrOutput) Elem() LocalVolumeSourcePatchOutput {
	return o.ApplyT(func(v *LocalVolumeSourcePatch) LocalVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret LocalVolumeSourcePatch
		return ret
	}).(LocalVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
func (o LocalVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
func (o LocalVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSource struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `pulumi:"server"`
}

// NFSVolumeSourceInput is an input type that accepts NFSVolumeSourceArgs and NFSVolumeSourceOutput values.
// You can construct a concrete instance of `NFSVolumeSourceInput` via:
//
//	NFSVolumeSourceArgs{...}
type NFSVolumeSourceInput interface {
	pulumi.Input

	ToNFSVolumeSourceOutput() NFSVolumeSourceOutput
	ToNFSVolumeSourceOutputWithContext(context.Context) NFSVolumeSourceOutput
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSourceArgs struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringInput `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringInput `pulumi:"server"`
}

func (NFSVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSVolumeSource)(nil)).Elem()
}

func (i NFSVolumeSourceArgs) ToNFSVolumeSourceOutput() NFSVolumeSourceOutput {
	return i.ToNFSVolumeSourceOutputWithContext(context.Background())
}

func (i NFSVolumeSourceArgs) ToNFSVolumeSourceOutputWithContext(ctx context.Context) NFSVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourceOutput)
}

func (i NFSVolumeSourceArgs) ToNFSVolumeSourcePtrOutput() NFSVolumeSourcePtrOutput {
	return i.ToNFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i NFSVolumeSourceArgs) ToNFSVolumeSourcePtrOutputWithContext(ctx context.Context) NFSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourceOutput).ToNFSVolumeSourcePtrOutputWithContext(ctx)
}

// NFSVolumeSourcePtrInput is an input type that accepts NFSVolumeSourceArgs, NFSVolumeSourcePtr and NFSVolumeSourcePtrOutput values.
// You can construct a concrete instance of `NFSVolumeSourcePtrInput` via:
//
//	        NFSVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type NFSVolumeSourcePtrInput interface {
	pulumi.Input

	ToNFSVolumeSourcePtrOutput() NFSVolumeSourcePtrOutput
	ToNFSVolumeSourcePtrOutputWithContext(context.Context) NFSVolumeSourcePtrOutput
}

type nfsvolumeSourcePtrType NFSVolumeSourceArgs

func NFSVolumeSourcePtr(v *NFSVolumeSourceArgs) NFSVolumeSourcePtrInput {
	return (*nfsvolumeSourcePtrType)(v)
}

func (*nfsvolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSVolumeSource)(nil)).Elem()
}

func (i *nfsvolumeSourcePtrType) ToNFSVolumeSourcePtrOutput() NFSVolumeSourcePtrOutput {
	return i.ToNFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *nfsvolumeSourcePtrType) ToNFSVolumeSourcePtrOutputWithContext(ctx context.Context) NFSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourcePtrOutput)
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSourceOutput struct{ *pulumi.OutputState }

func (NFSVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSVolumeSource)(nil)).Elem()
}

func (o NFSVolumeSourceOutput) ToNFSVolumeSourceOutput() NFSVolumeSourceOutput {
	return o
}

func (o NFSVolumeSourceOutput) ToNFSVolumeSourceOutputWithContext(ctx context.Context) NFSVolumeSourceOutput {
	return o
}

func (o NFSVolumeSourceOutput) ToNFSVolumeSourcePtrOutput() NFSVolumeSourcePtrOutput {
	return o.ToNFSVolumeSourcePtrOutputWithContext(context.Background())
}

func (o NFSVolumeSourceOutput) ToNFSVolumeSourcePtrOutputWithContext(ctx context.Context) NFSVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NFSVolumeSource) *NFSVolumeSource {
		return &v
	}).(NFSVolumeSourcePtrOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v NFSVolumeSource) string { return v.Path }).(pulumi.StringOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NFSVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourceOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v NFSVolumeSource) string { return v.Server }).(pulumi.StringOutput)
}

type NFSVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (NFSVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSVolumeSource)(nil)).Elem()
}

func (o NFSVolumeSourcePtrOutput) ToNFSVolumeSourcePtrOutput() NFSVolumeSourcePtrOutput {
	return o
}

func (o NFSVolumeSourcePtrOutput) ToNFSVolumeSourcePtrOutputWithContext(ctx context.Context) NFSVolumeSourcePtrOutput {
	return o
}

func (o NFSVolumeSourcePtrOutput) Elem() NFSVolumeSourceOutput {
	return o.ApplyT(func(v *NFSVolumeSource) NFSVolumeSource {
		if v != nil {
			return *v
		}
		var ret NFSVolumeSource
		return ret
	}).(NFSVolumeSourceOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSourcePatch struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path *string `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server *string `pulumi:"server"`
}

// NFSVolumeSourcePatchInput is an input type that accepts NFSVolumeSourcePatchArgs and NFSVolumeSourcePatchOutput values.
// You can construct a concrete instance of `NFSVolumeSourcePatchInput` via:
//
//	NFSVolumeSourcePatchArgs{...}
type NFSVolumeSourcePatchInput interface {
	pulumi.Input

	ToNFSVolumeSourcePatchOutput() NFSVolumeSourcePatchOutput
	ToNFSVolumeSourcePatchOutputWithContext(context.Context) NFSVolumeSourcePatchOutput
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSourcePatchArgs struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (NFSVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSVolumeSourcePatch)(nil)).Elem()
}

func (i NFSVolumeSourcePatchArgs) ToNFSVolumeSourcePatchOutput() NFSVolumeSourcePatchOutput {
	return i.ToNFSVolumeSourcePatchOutputWithContext(context.Background())
}

func (i NFSVolumeSourcePatchArgs) ToNFSVolumeSourcePatchOutputWithContext(ctx context.Context) NFSVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourcePatchOutput)
}

func (i NFSVolumeSourcePatchArgs) ToNFSVolumeSourcePatchPtrOutput() NFSVolumeSourcePatchPtrOutput {
	return i.ToNFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i NFSVolumeSourcePatchArgs) ToNFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) NFSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourcePatchOutput).ToNFSVolumeSourcePatchPtrOutputWithContext(ctx)
}

// NFSVolumeSourcePatchPtrInput is an input type that accepts NFSVolumeSourcePatchArgs, NFSVolumeSourcePatchPtr and NFSVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `NFSVolumeSourcePatchPtrInput` via:
//
//	        NFSVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type NFSVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToNFSVolumeSourcePatchPtrOutput() NFSVolumeSourcePatchPtrOutput
	ToNFSVolumeSourcePatchPtrOutputWithContext(context.Context) NFSVolumeSourcePatchPtrOutput
}

type nfsvolumeSourcePatchPtrType NFSVolumeSourcePatchArgs

func NFSVolumeSourcePatchPtr(v *NFSVolumeSourcePatchArgs) NFSVolumeSourcePatchPtrInput {
	return (*nfsvolumeSourcePatchPtrType)(v)
}

func (*nfsvolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSVolumeSourcePatch)(nil)).Elem()
}

func (i *nfsvolumeSourcePatchPtrType) ToNFSVolumeSourcePatchPtrOutput() NFSVolumeSourcePatchPtrOutput {
	return i.ToNFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *nfsvolumeSourcePatchPtrType) ToNFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) NFSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSVolumeSourcePatchPtrOutput)
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (NFSVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSVolumeSourcePatch)(nil)).Elem()
}

func (o NFSVolumeSourcePatchOutput) ToNFSVolumeSourcePatchOutput() NFSVolumeSourcePatchOutput {
	return o
}

func (o NFSVolumeSourcePatchOutput) ToNFSVolumeSourcePatchOutputWithContext(ctx context.Context) NFSVolumeSourcePatchOutput {
	return o
}

func (o NFSVolumeSourcePatchOutput) ToNFSVolumeSourcePatchPtrOutput() NFSVolumeSourcePatchPtrOutput {
	return o.ToNFSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o NFSVolumeSourcePatchOutput) ToNFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) NFSVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NFSVolumeSourcePatch) *NFSVolumeSourcePatch {
		return &v
	}).(NFSVolumeSourcePatchPtrOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NFSVolumeSourcePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NFSVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NFSVolumeSourcePatch) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type NFSVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (NFSVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSVolumeSourcePatch)(nil)).Elem()
}

func (o NFSVolumeSourcePatchPtrOutput) ToNFSVolumeSourcePatchPtrOutput() NFSVolumeSourcePatchPtrOutput {
	return o
}

func (o NFSVolumeSourcePatchPtrOutput) ToNFSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) NFSVolumeSourcePatchPtrOutput {
	return o
}

func (o NFSVolumeSourcePatchPtrOutput) Elem() NFSVolumeSourcePatchOutput {
	return o.ApplyT(func(v *NFSVolumeSourcePatch) NFSVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret NFSVolumeSourcePatch
		return ret
	}).(NFSVolumeSourcePatchOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o NFSVolumeSourcePatchPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespaceType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *NamespaceSpec `pulumi:"spec"`
	// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *NamespaceStatus `pulumi:"status"`
}

// NamespaceTypeInput is an input type that accepts NamespaceTypeArgs and NamespaceTypeOutput values.
// You can construct a concrete instance of `NamespaceTypeInput` via:
//
//	NamespaceTypeArgs{...}
type NamespaceTypeInput interface {
	pulumi.Input

	ToNamespaceTypeOutput() NamespaceTypeOutput
	ToNamespaceTypeOutputWithContext(context.Context) NamespaceTypeOutput
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespaceTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NamespaceSpecPtrInput `pulumi:"spec"`
	// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NamespaceStatusPtrInput `pulumi:"status"`
}

func (NamespaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return i.ToNamespaceTypeOutputWithContext(context.Background())
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeOutput)
}

// NamespaceTypeArrayInput is an input type that accepts NamespaceTypeArray and NamespaceTypeArrayOutput values.
// You can construct a concrete instance of `NamespaceTypeArrayInput` via:
//
//	NamespaceTypeArray{ NamespaceTypeArgs{...} }
type NamespaceTypeArrayInput interface {
	pulumi.Input

	ToNamespaceTypeArrayOutput() NamespaceTypeArrayOutput
	ToNamespaceTypeArrayOutputWithContext(context.Context) NamespaceTypeArrayOutput
}

type NamespaceTypeArray []NamespaceTypeInput

func (NamespaceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArray) ToNamespaceTypeArrayOutput() NamespaceTypeArrayOutput {
	return i.ToNamespaceTypeArrayOutputWithContext(context.Background())
}

func (i NamespaceTypeArray) ToNamespaceTypeArrayOutputWithContext(ctx context.Context) NamespaceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeArrayOutput)
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NamespaceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NamespaceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NamespaceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NamespaceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NamespaceTypeOutput) Spec() NamespaceSpecPtrOutput {
	return o.ApplyT(func(v NamespaceType) *NamespaceSpec { return v.Spec }).(NamespaceSpecPtrOutput)
}

// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NamespaceTypeOutput) Status() NamespaceStatusPtrOutput {
	return o.ApplyT(func(v NamespaceType) *NamespaceStatus { return v.Status }).(NamespaceStatusPtrOutput)
}

type NamespaceTypeArrayOutput struct{ *pulumi.OutputState }

func (NamespaceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeArrayOutput) ToNamespaceTypeArrayOutput() NamespaceTypeArrayOutput {
	return o
}

func (o NamespaceTypeArrayOutput) ToNamespaceTypeArrayOutputWithContext(ctx context.Context) NamespaceTypeArrayOutput {
	return o
}

func (o NamespaceTypeArrayOutput) Index(i pulumi.IntInput) NamespaceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceType {
		return vs[0].([]NamespaceType)[vs[1].(int)]
	}).(NamespaceTypeOutput)
}

// NamespaceCondition contains details about state of namespace.
type NamespaceCondition struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Reason             *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of namespace controller condition.
	Type string `pulumi:"type"`
}

// NamespaceConditionInput is an input type that accepts NamespaceConditionArgs and NamespaceConditionOutput values.
// You can construct a concrete instance of `NamespaceConditionInput` via:
//
//	NamespaceConditionArgs{...}
type NamespaceConditionInput interface {
	pulumi.Input

	ToNamespaceConditionOutput() NamespaceConditionOutput
	ToNamespaceConditionOutputWithContext(context.Context) NamespaceConditionOutput
}

// NamespaceCondition contains details about state of namespace.
type NamespaceConditionArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Reason             pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of namespace controller condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCondition)(nil)).Elem()
}

func (i NamespaceConditionArgs) ToNamespaceConditionOutput() NamespaceConditionOutput {
	return i.ToNamespaceConditionOutputWithContext(context.Background())
}

func (i NamespaceConditionArgs) ToNamespaceConditionOutputWithContext(ctx context.Context) NamespaceConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConditionOutput)
}

// NamespaceConditionArrayInput is an input type that accepts NamespaceConditionArray and NamespaceConditionArrayOutput values.
// You can construct a concrete instance of `NamespaceConditionArrayInput` via:
//
//	NamespaceConditionArray{ NamespaceConditionArgs{...} }
type NamespaceConditionArrayInput interface {
	pulumi.Input

	ToNamespaceConditionArrayOutput() NamespaceConditionArrayOutput
	ToNamespaceConditionArrayOutputWithContext(context.Context) NamespaceConditionArrayOutput
}

type NamespaceConditionArray []NamespaceConditionInput

func (NamespaceConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceCondition)(nil)).Elem()
}

func (i NamespaceConditionArray) ToNamespaceConditionArrayOutput() NamespaceConditionArrayOutput {
	return i.ToNamespaceConditionArrayOutputWithContext(context.Background())
}

func (i NamespaceConditionArray) ToNamespaceConditionArrayOutputWithContext(ctx context.Context) NamespaceConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConditionArrayOutput)
}

// NamespaceCondition contains details about state of namespace.
type NamespaceConditionOutput struct{ *pulumi.OutputState }

func (NamespaceConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCondition)(nil)).Elem()
}

func (o NamespaceConditionOutput) ToNamespaceConditionOutput() NamespaceConditionOutput {
	return o
}

func (o NamespaceConditionOutput) ToNamespaceConditionOutputWithContext(ctx context.Context) NamespaceConditionOutput {
	return o
}

func (o NamespaceConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o NamespaceConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o NamespaceConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o NamespaceConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of namespace controller condition.
func (o NamespaceConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceCondition) string { return v.Type }).(pulumi.StringOutput)
}

type NamespaceConditionArrayOutput struct{ *pulumi.OutputState }

func (NamespaceConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceCondition)(nil)).Elem()
}

func (o NamespaceConditionArrayOutput) ToNamespaceConditionArrayOutput() NamespaceConditionArrayOutput {
	return o
}

func (o NamespaceConditionArrayOutput) ToNamespaceConditionArrayOutputWithContext(ctx context.Context) NamespaceConditionArrayOutput {
	return o
}

func (o NamespaceConditionArrayOutput) Index(i pulumi.IntInput) NamespaceConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceCondition {
		return vs[0].([]NamespaceCondition)[vs[1].(int)]
	}).(NamespaceConditionOutput)
}

// NamespaceCondition contains details about state of namespace.
type NamespaceConditionPatch struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Reason             *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of namespace controller condition.
	Type *string `pulumi:"type"`
}

// NamespaceConditionPatchInput is an input type that accepts NamespaceConditionPatchArgs and NamespaceConditionPatchOutput values.
// You can construct a concrete instance of `NamespaceConditionPatchInput` via:
//
//	NamespaceConditionPatchArgs{...}
type NamespaceConditionPatchInput interface {
	pulumi.Input

	ToNamespaceConditionPatchOutput() NamespaceConditionPatchOutput
	ToNamespaceConditionPatchOutputWithContext(context.Context) NamespaceConditionPatchOutput
}

// NamespaceCondition contains details about state of namespace.
type NamespaceConditionPatchArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Reason             pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of namespace controller condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NamespaceConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceConditionPatch)(nil)).Elem()
}

func (i NamespaceConditionPatchArgs) ToNamespaceConditionPatchOutput() NamespaceConditionPatchOutput {
	return i.ToNamespaceConditionPatchOutputWithContext(context.Background())
}

func (i NamespaceConditionPatchArgs) ToNamespaceConditionPatchOutputWithContext(ctx context.Context) NamespaceConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConditionPatchOutput)
}

// NamespaceConditionPatchArrayInput is an input type that accepts NamespaceConditionPatchArray and NamespaceConditionPatchArrayOutput values.
// You can construct a concrete instance of `NamespaceConditionPatchArrayInput` via:
//
//	NamespaceConditionPatchArray{ NamespaceConditionPatchArgs{...} }
type NamespaceConditionPatchArrayInput interface {
	pulumi.Input

	ToNamespaceConditionPatchArrayOutput() NamespaceConditionPatchArrayOutput
	ToNamespaceConditionPatchArrayOutputWithContext(context.Context) NamespaceConditionPatchArrayOutput
}

type NamespaceConditionPatchArray []NamespaceConditionPatchInput

func (NamespaceConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceConditionPatch)(nil)).Elem()
}

func (i NamespaceConditionPatchArray) ToNamespaceConditionPatchArrayOutput() NamespaceConditionPatchArrayOutput {
	return i.ToNamespaceConditionPatchArrayOutputWithContext(context.Background())
}

func (i NamespaceConditionPatchArray) ToNamespaceConditionPatchArrayOutputWithContext(ctx context.Context) NamespaceConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConditionPatchArrayOutput)
}

// NamespaceCondition contains details about state of namespace.
type NamespaceConditionPatchOutput struct{ *pulumi.OutputState }

func (NamespaceConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceConditionPatch)(nil)).Elem()
}

func (o NamespaceConditionPatchOutput) ToNamespaceConditionPatchOutput() NamespaceConditionPatchOutput {
	return o
}

func (o NamespaceConditionPatchOutput) ToNamespaceConditionPatchOutputWithContext(ctx context.Context) NamespaceConditionPatchOutput {
	return o
}

func (o NamespaceConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o NamespaceConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o NamespaceConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o NamespaceConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of namespace controller condition.
func (o NamespaceConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NamespaceConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (NamespaceConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceConditionPatch)(nil)).Elem()
}

func (o NamespaceConditionPatchArrayOutput) ToNamespaceConditionPatchArrayOutput() NamespaceConditionPatchArrayOutput {
	return o
}

func (o NamespaceConditionPatchArrayOutput) ToNamespaceConditionPatchArrayOutputWithContext(ctx context.Context) NamespaceConditionPatchArrayOutput {
	return o
}

func (o NamespaceConditionPatchArrayOutput) Index(i pulumi.IntInput) NamespaceConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceConditionPatch {
		return vs[0].([]NamespaceConditionPatch)[vs[1].(int)]
	}).(NamespaceConditionPatchOutput)
}

// NamespaceList is a list of Namespaces.
type NamespaceListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Items []NamespaceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// NamespaceListTypeInput is an input type that accepts NamespaceListTypeArgs and NamespaceListTypeOutput values.
// You can construct a concrete instance of `NamespaceListTypeInput` via:
//
//	NamespaceListTypeArgs{...}
type NamespaceListTypeInput interface {
	pulumi.Input

	ToNamespaceListTypeOutput() NamespaceListTypeOutput
	ToNamespaceListTypeOutputWithContext(context.Context) NamespaceListTypeOutput
}

// NamespaceList is a list of Namespaces.
type NamespaceListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Items NamespaceTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (NamespaceListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceListType)(nil)).Elem()
}

func (i NamespaceListTypeArgs) ToNamespaceListTypeOutput() NamespaceListTypeOutput {
	return i.ToNamespaceListTypeOutputWithContext(context.Background())
}

func (i NamespaceListTypeArgs) ToNamespaceListTypeOutputWithContext(ctx context.Context) NamespaceListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceListTypeOutput)
}

// NamespaceList is a list of Namespaces.
type NamespaceListTypeOutput struct{ *pulumi.OutputState }

func (NamespaceListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceListType)(nil)).Elem()
}

func (o NamespaceListTypeOutput) ToNamespaceListTypeOutput() NamespaceListTypeOutput {
	return o
}

func (o NamespaceListTypeOutput) ToNamespaceListTypeOutputWithContext(ctx context.Context) NamespaceListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NamespaceListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o NamespaceListTypeOutput) Items() NamespaceTypeArrayOutput {
	return o.ApplyT(func(v NamespaceListType) []NamespaceType { return v.Items }).(NamespaceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NamespaceListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NamespaceListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v NamespaceListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespacePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *NamespaceSpecPatch `pulumi:"spec"`
	// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *NamespaceStatusPatch `pulumi:"status"`
}

// NamespacePatchTypeInput is an input type that accepts NamespacePatchTypeArgs and NamespacePatchTypeOutput values.
// You can construct a concrete instance of `NamespacePatchTypeInput` via:
//
//	NamespacePatchTypeArgs{...}
type NamespacePatchTypeInput interface {
	pulumi.Input

	ToNamespacePatchTypeOutput() NamespacePatchTypeOutput
	ToNamespacePatchTypeOutputWithContext(context.Context) NamespacePatchTypeOutput
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespacePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NamespaceSpecPatchPtrInput `pulumi:"spec"`
	// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NamespaceStatusPatchPtrInput `pulumi:"status"`
}

func (NamespacePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacePatchType)(nil)).Elem()
}

func (i NamespacePatchTypeArgs) ToNamespacePatchTypeOutput() NamespacePatchTypeOutput {
	return i.ToNamespacePatchTypeOutputWithContext(context.Background())
}

func (i NamespacePatchTypeArgs) ToNamespacePatchTypeOutputWithContext(ctx context.Context) NamespacePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePatchTypeOutput)
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type NamespacePatchTypeOutput struct{ *pulumi.OutputState }

func (NamespacePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacePatchType)(nil)).Elem()
}

func (o NamespacePatchTypeOutput) ToNamespacePatchTypeOutput() NamespacePatchTypeOutput {
	return o
}

func (o NamespacePatchTypeOutput) ToNamespacePatchTypeOutputWithContext(ctx context.Context) NamespacePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NamespacePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespacePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NamespacePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespacePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NamespacePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v NamespacePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NamespacePatchTypeOutput) Spec() NamespaceSpecPatchPtrOutput {
	return o.ApplyT(func(v NamespacePatchType) *NamespaceSpecPatch { return v.Spec }).(NamespaceSpecPatchPtrOutput)
}

// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NamespacePatchTypeOutput) Status() NamespaceStatusPatchPtrOutput {
	return o.ApplyT(func(v NamespacePatchType) *NamespaceStatusPatch { return v.Status }).(NamespaceStatusPatchPtrOutput)
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpec struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers []string `pulumi:"finalizers"`
}

// NamespaceSpecInput is an input type that accepts NamespaceSpecArgs and NamespaceSpecOutput values.
// You can construct a concrete instance of `NamespaceSpecInput` via:
//
//	NamespaceSpecArgs{...}
type NamespaceSpecInput interface {
	pulumi.Input

	ToNamespaceSpecOutput() NamespaceSpecOutput
	ToNamespaceSpecOutputWithContext(context.Context) NamespaceSpecOutput
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpecArgs struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
}

func (NamespaceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSpec)(nil)).Elem()
}

func (i NamespaceSpecArgs) ToNamespaceSpecOutput() NamespaceSpecOutput {
	return i.ToNamespaceSpecOutputWithContext(context.Background())
}

func (i NamespaceSpecArgs) ToNamespaceSpecOutputWithContext(ctx context.Context) NamespaceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecOutput)
}

func (i NamespaceSpecArgs) ToNamespaceSpecPtrOutput() NamespaceSpecPtrOutput {
	return i.ToNamespaceSpecPtrOutputWithContext(context.Background())
}

func (i NamespaceSpecArgs) ToNamespaceSpecPtrOutputWithContext(ctx context.Context) NamespaceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecOutput).ToNamespaceSpecPtrOutputWithContext(ctx)
}

// NamespaceSpecPtrInput is an input type that accepts NamespaceSpecArgs, NamespaceSpecPtr and NamespaceSpecPtrOutput values.
// You can construct a concrete instance of `NamespaceSpecPtrInput` via:
//
//	        NamespaceSpecArgs{...}
//
//	or:
//
//	        nil
type NamespaceSpecPtrInput interface {
	pulumi.Input

	ToNamespaceSpecPtrOutput() NamespaceSpecPtrOutput
	ToNamespaceSpecPtrOutputWithContext(context.Context) NamespaceSpecPtrOutput
}

type namespaceSpecPtrType NamespaceSpecArgs

func NamespaceSpecPtr(v *NamespaceSpecArgs) NamespaceSpecPtrInput {
	return (*namespaceSpecPtrType)(v)
}

func (*namespaceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSpec)(nil)).Elem()
}

func (i *namespaceSpecPtrType) ToNamespaceSpecPtrOutput() NamespaceSpecPtrOutput {
	return i.ToNamespaceSpecPtrOutputWithContext(context.Background())
}

func (i *namespaceSpecPtrType) ToNamespaceSpecPtrOutputWithContext(ctx context.Context) NamespaceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecPtrOutput)
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpecOutput struct{ *pulumi.OutputState }

func (NamespaceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSpec)(nil)).Elem()
}

func (o NamespaceSpecOutput) ToNamespaceSpecOutput() NamespaceSpecOutput {
	return o
}

func (o NamespaceSpecOutput) ToNamespaceSpecOutputWithContext(ctx context.Context) NamespaceSpecOutput {
	return o
}

func (o NamespaceSpecOutput) ToNamespaceSpecPtrOutput() NamespaceSpecPtrOutput {
	return o.ToNamespaceSpecPtrOutputWithContext(context.Background())
}

func (o NamespaceSpecOutput) ToNamespaceSpecPtrOutputWithContext(ctx context.Context) NamespaceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceSpec) *NamespaceSpec {
		return &v
	}).(NamespaceSpecPtrOutput)
}

// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceSpecOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceSpec) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

type NamespaceSpecPtrOutput struct{ *pulumi.OutputState }

func (NamespaceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSpec)(nil)).Elem()
}

func (o NamespaceSpecPtrOutput) ToNamespaceSpecPtrOutput() NamespaceSpecPtrOutput {
	return o
}

func (o NamespaceSpecPtrOutput) ToNamespaceSpecPtrOutputWithContext(ctx context.Context) NamespaceSpecPtrOutput {
	return o
}

func (o NamespaceSpecPtrOutput) Elem() NamespaceSpecOutput {
	return o.ApplyT(func(v *NamespaceSpec) NamespaceSpec {
		if v != nil {
			return *v
		}
		var ret NamespaceSpec
		return ret
	}).(NamespaceSpecOutput)
}

// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceSpecPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpecPatch struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers []string `pulumi:"finalizers"`
}

// NamespaceSpecPatchInput is an input type that accepts NamespaceSpecPatchArgs and NamespaceSpecPatchOutput values.
// You can construct a concrete instance of `NamespaceSpecPatchInput` via:
//
//	NamespaceSpecPatchArgs{...}
type NamespaceSpecPatchInput interface {
	pulumi.Input

	ToNamespaceSpecPatchOutput() NamespaceSpecPatchOutput
	ToNamespaceSpecPatchOutputWithContext(context.Context) NamespaceSpecPatchOutput
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpecPatchArgs struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
}

func (NamespaceSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSpecPatch)(nil)).Elem()
}

func (i NamespaceSpecPatchArgs) ToNamespaceSpecPatchOutput() NamespaceSpecPatchOutput {
	return i.ToNamespaceSpecPatchOutputWithContext(context.Background())
}

func (i NamespaceSpecPatchArgs) ToNamespaceSpecPatchOutputWithContext(ctx context.Context) NamespaceSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecPatchOutput)
}

func (i NamespaceSpecPatchArgs) ToNamespaceSpecPatchPtrOutput() NamespaceSpecPatchPtrOutput {
	return i.ToNamespaceSpecPatchPtrOutputWithContext(context.Background())
}

func (i NamespaceSpecPatchArgs) ToNamespaceSpecPatchPtrOutputWithContext(ctx context.Context) NamespaceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecPatchOutput).ToNamespaceSpecPatchPtrOutputWithContext(ctx)
}

// NamespaceSpecPatchPtrInput is an input type that accepts NamespaceSpecPatchArgs, NamespaceSpecPatchPtr and NamespaceSpecPatchPtrOutput values.
// You can construct a concrete instance of `NamespaceSpecPatchPtrInput` via:
//
//	        NamespaceSpecPatchArgs{...}
//
//	or:
//
//	        nil
type NamespaceSpecPatchPtrInput interface {
	pulumi.Input

	ToNamespaceSpecPatchPtrOutput() NamespaceSpecPatchPtrOutput
	ToNamespaceSpecPatchPtrOutputWithContext(context.Context) NamespaceSpecPatchPtrOutput
}

type namespaceSpecPatchPtrType NamespaceSpecPatchArgs

func NamespaceSpecPatchPtr(v *NamespaceSpecPatchArgs) NamespaceSpecPatchPtrInput {
	return (*namespaceSpecPatchPtrType)(v)
}

func (*namespaceSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSpecPatch)(nil)).Elem()
}

func (i *namespaceSpecPatchPtrType) ToNamespaceSpecPatchPtrOutput() NamespaceSpecPatchPtrOutput {
	return i.ToNamespaceSpecPatchPtrOutputWithContext(context.Background())
}

func (i *namespaceSpecPatchPtrType) ToNamespaceSpecPatchPtrOutputWithContext(ctx context.Context) NamespaceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSpecPatchPtrOutput)
}

// NamespaceSpec describes the attributes on a Namespace.
type NamespaceSpecPatchOutput struct{ *pulumi.OutputState }

func (NamespaceSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSpecPatch)(nil)).Elem()
}

func (o NamespaceSpecPatchOutput) ToNamespaceSpecPatchOutput() NamespaceSpecPatchOutput {
	return o
}

func (o NamespaceSpecPatchOutput) ToNamespaceSpecPatchOutputWithContext(ctx context.Context) NamespaceSpecPatchOutput {
	return o
}

func (o NamespaceSpecPatchOutput) ToNamespaceSpecPatchPtrOutput() NamespaceSpecPatchPtrOutput {
	return o.ToNamespaceSpecPatchPtrOutputWithContext(context.Background())
}

func (o NamespaceSpecPatchOutput) ToNamespaceSpecPatchPtrOutputWithContext(ctx context.Context) NamespaceSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceSpecPatch) *NamespaceSpecPatch {
		return &v
	}).(NamespaceSpecPatchPtrOutput)
}

// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceSpecPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceSpecPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

type NamespaceSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (NamespaceSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSpecPatch)(nil)).Elem()
}

func (o NamespaceSpecPatchPtrOutput) ToNamespaceSpecPatchPtrOutput() NamespaceSpecPatchPtrOutput {
	return o
}

func (o NamespaceSpecPatchPtrOutput) ToNamespaceSpecPatchPtrOutputWithContext(ctx context.Context) NamespaceSpecPatchPtrOutput {
	return o
}

func (o NamespaceSpecPatchPtrOutput) Elem() NamespaceSpecPatchOutput {
	return o.ApplyT(func(v *NamespaceSpecPatch) NamespaceSpecPatch {
		if v != nil {
			return *v
		}
		var ret NamespaceSpecPatch
		return ret
	}).(NamespaceSpecPatchOutput)
}

// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceSpecPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatus struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions []NamespaceCondition `pulumi:"conditions"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase *string `pulumi:"phase"`
}

// NamespaceStatusInput is an input type that accepts NamespaceStatusArgs and NamespaceStatusOutput values.
// You can construct a concrete instance of `NamespaceStatusInput` via:
//
//	NamespaceStatusArgs{...}
type NamespaceStatusInput interface {
	pulumi.Input

	ToNamespaceStatusOutput() NamespaceStatusOutput
	ToNamespaceStatusOutputWithContext(context.Context) NamespaceStatusOutput
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatusArgs struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions NamespaceConditionArrayInput `pulumi:"conditions"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (NamespaceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStatus)(nil)).Elem()
}

func (i NamespaceStatusArgs) ToNamespaceStatusOutput() NamespaceStatusOutput {
	return i.ToNamespaceStatusOutputWithContext(context.Background())
}

func (i NamespaceStatusArgs) ToNamespaceStatusOutputWithContext(ctx context.Context) NamespaceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusOutput)
}

func (i NamespaceStatusArgs) ToNamespaceStatusPtrOutput() NamespaceStatusPtrOutput {
	return i.ToNamespaceStatusPtrOutputWithContext(context.Background())
}

func (i NamespaceStatusArgs) ToNamespaceStatusPtrOutputWithContext(ctx context.Context) NamespaceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusOutput).ToNamespaceStatusPtrOutputWithContext(ctx)
}

// NamespaceStatusPtrInput is an input type that accepts NamespaceStatusArgs, NamespaceStatusPtr and NamespaceStatusPtrOutput values.
// You can construct a concrete instance of `NamespaceStatusPtrInput` via:
//
//	        NamespaceStatusArgs{...}
//
//	or:
//
//	        nil
type NamespaceStatusPtrInput interface {
	pulumi.Input

	ToNamespaceStatusPtrOutput() NamespaceStatusPtrOutput
	ToNamespaceStatusPtrOutputWithContext(context.Context) NamespaceStatusPtrOutput
}

type namespaceStatusPtrType NamespaceStatusArgs

func NamespaceStatusPtr(v *NamespaceStatusArgs) NamespaceStatusPtrInput {
	return (*namespaceStatusPtrType)(v)
}

func (*namespaceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceStatus)(nil)).Elem()
}

func (i *namespaceStatusPtrType) ToNamespaceStatusPtrOutput() NamespaceStatusPtrOutput {
	return i.ToNamespaceStatusPtrOutputWithContext(context.Background())
}

func (i *namespaceStatusPtrType) ToNamespaceStatusPtrOutputWithContext(ctx context.Context) NamespaceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusPtrOutput)
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatusOutput struct{ *pulumi.OutputState }

func (NamespaceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStatus)(nil)).Elem()
}

func (o NamespaceStatusOutput) ToNamespaceStatusOutput() NamespaceStatusOutput {
	return o
}

func (o NamespaceStatusOutput) ToNamespaceStatusOutputWithContext(ctx context.Context) NamespaceStatusOutput {
	return o
}

func (o NamespaceStatusOutput) ToNamespaceStatusPtrOutput() NamespaceStatusPtrOutput {
	return o.ToNamespaceStatusPtrOutputWithContext(context.Background())
}

func (o NamespaceStatusOutput) ToNamespaceStatusPtrOutputWithContext(ctx context.Context) NamespaceStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceStatus) *NamespaceStatus {
		return &v
	}).(NamespaceStatusPtrOutput)
}

// Represents the latest available observations of a namespace's current state.
func (o NamespaceStatusOutput) Conditions() NamespaceConditionArrayOutput {
	return o.ApplyT(func(v NamespaceStatus) []NamespaceCondition { return v.Conditions }).(NamespaceConditionArrayOutput)
}

// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type NamespaceStatusPtrOutput struct{ *pulumi.OutputState }

func (NamespaceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceStatus)(nil)).Elem()
}

func (o NamespaceStatusPtrOutput) ToNamespaceStatusPtrOutput() NamespaceStatusPtrOutput {
	return o
}

func (o NamespaceStatusPtrOutput) ToNamespaceStatusPtrOutputWithContext(ctx context.Context) NamespaceStatusPtrOutput {
	return o
}

func (o NamespaceStatusPtrOutput) Elem() NamespaceStatusOutput {
	return o.ApplyT(func(v *NamespaceStatus) NamespaceStatus {
		if v != nil {
			return *v
		}
		var ret NamespaceStatus
		return ret
	}).(NamespaceStatusOutput)
}

// Represents the latest available observations of a namespace's current state.
func (o NamespaceStatusPtrOutput) Conditions() NamespaceConditionArrayOutput {
	return o.ApplyT(func(v *NamespaceStatus) []NamespaceCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NamespaceConditionArrayOutput)
}

// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatusPatch struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions []NamespaceConditionPatch `pulumi:"conditions"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase *string `pulumi:"phase"`
}

// NamespaceStatusPatchInput is an input type that accepts NamespaceStatusPatchArgs and NamespaceStatusPatchOutput values.
// You can construct a concrete instance of `NamespaceStatusPatchInput` via:
//
//	NamespaceStatusPatchArgs{...}
type NamespaceStatusPatchInput interface {
	pulumi.Input

	ToNamespaceStatusPatchOutput() NamespaceStatusPatchOutput
	ToNamespaceStatusPatchOutputWithContext(context.Context) NamespaceStatusPatchOutput
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatusPatchArgs struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions NamespaceConditionPatchArrayInput `pulumi:"conditions"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (NamespaceStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStatusPatch)(nil)).Elem()
}

func (i NamespaceStatusPatchArgs) ToNamespaceStatusPatchOutput() NamespaceStatusPatchOutput {
	return i.ToNamespaceStatusPatchOutputWithContext(context.Background())
}

func (i NamespaceStatusPatchArgs) ToNamespaceStatusPatchOutputWithContext(ctx context.Context) NamespaceStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusPatchOutput)
}

func (i NamespaceStatusPatchArgs) ToNamespaceStatusPatchPtrOutput() NamespaceStatusPatchPtrOutput {
	return i.ToNamespaceStatusPatchPtrOutputWithContext(context.Background())
}

func (i NamespaceStatusPatchArgs) ToNamespaceStatusPatchPtrOutputWithContext(ctx context.Context) NamespaceStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusPatchOutput).ToNamespaceStatusPatchPtrOutputWithContext(ctx)
}

// NamespaceStatusPatchPtrInput is an input type that accepts NamespaceStatusPatchArgs, NamespaceStatusPatchPtr and NamespaceStatusPatchPtrOutput values.
// You can construct a concrete instance of `NamespaceStatusPatchPtrInput` via:
//
//	        NamespaceStatusPatchArgs{...}
//
//	or:
//
//	        nil
type NamespaceStatusPatchPtrInput interface {
	pulumi.Input

	ToNamespaceStatusPatchPtrOutput() NamespaceStatusPatchPtrOutput
	ToNamespaceStatusPatchPtrOutputWithContext(context.Context) NamespaceStatusPatchPtrOutput
}

type namespaceStatusPatchPtrType NamespaceStatusPatchArgs

func NamespaceStatusPatchPtr(v *NamespaceStatusPatchArgs) NamespaceStatusPatchPtrInput {
	return (*namespaceStatusPatchPtrType)(v)
}

func (*namespaceStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceStatusPatch)(nil)).Elem()
}

func (i *namespaceStatusPatchPtrType) ToNamespaceStatusPatchPtrOutput() NamespaceStatusPatchPtrOutput {
	return i.ToNamespaceStatusPatchPtrOutputWithContext(context.Background())
}

func (i *namespaceStatusPatchPtrType) ToNamespaceStatusPatchPtrOutputWithContext(ctx context.Context) NamespaceStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceStatusPatchPtrOutput)
}

// NamespaceStatus is information about the current status of a Namespace.
type NamespaceStatusPatchOutput struct{ *pulumi.OutputState }

func (NamespaceStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStatusPatch)(nil)).Elem()
}

func (o NamespaceStatusPatchOutput) ToNamespaceStatusPatchOutput() NamespaceStatusPatchOutput {
	return o
}

func (o NamespaceStatusPatchOutput) ToNamespaceStatusPatchOutputWithContext(ctx context.Context) NamespaceStatusPatchOutput {
	return o
}

func (o NamespaceStatusPatchOutput) ToNamespaceStatusPatchPtrOutput() NamespaceStatusPatchPtrOutput {
	return o.ToNamespaceStatusPatchPtrOutputWithContext(context.Background())
}

func (o NamespaceStatusPatchOutput) ToNamespaceStatusPatchPtrOutputWithContext(ctx context.Context) NamespaceStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceStatusPatch) *NamespaceStatusPatch {
		return &v
	}).(NamespaceStatusPatchPtrOutput)
}

// Represents the latest available observations of a namespace's current state.
func (o NamespaceStatusPatchOutput) Conditions() NamespaceConditionPatchArrayOutput {
	return o.ApplyT(func(v NamespaceStatusPatch) []NamespaceConditionPatch { return v.Conditions }).(NamespaceConditionPatchArrayOutput)
}

// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type NamespaceStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (NamespaceStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceStatusPatch)(nil)).Elem()
}

func (o NamespaceStatusPatchPtrOutput) ToNamespaceStatusPatchPtrOutput() NamespaceStatusPatchPtrOutput {
	return o
}

func (o NamespaceStatusPatchPtrOutput) ToNamespaceStatusPatchPtrOutputWithContext(ctx context.Context) NamespaceStatusPatchPtrOutput {
	return o
}

func (o NamespaceStatusPatchPtrOutput) Elem() NamespaceStatusPatchOutput {
	return o.ApplyT(func(v *NamespaceStatusPatch) NamespaceStatusPatch {
		if v != nil {
			return *v
		}
		var ret NamespaceStatusPatch
		return ret
	}).(NamespaceStatusPatchOutput)
}

// Represents the latest available observations of a namespace's current state.
func (o NamespaceStatusPatchPtrOutput) Conditions() NamespaceConditionPatchArrayOutput {
	return o.ApplyT(func(v *NamespaceStatusPatch) []NamespaceConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NamespaceConditionPatchArrayOutput)
}

// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (o NamespaceStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodeType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *NodeSpec `pulumi:"spec"`
	// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *NodeStatus `pulumi:"status"`
}

// NodeTypeInput is an input type that accepts NodeTypeArgs and NodeTypeOutput values.
// You can construct a concrete instance of `NodeTypeInput` via:
//
//	NodeTypeArgs{...}
type NodeTypeInput interface {
	pulumi.Input

	ToNodeTypeOutput() NodeTypeOutput
	ToNodeTypeOutputWithContext(context.Context) NodeTypeOutput
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodeTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NodeSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NodeStatusPtrInput `pulumi:"status"`
}

func (NodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeType)(nil)).Elem()
}

func (i NodeTypeArgs) ToNodeTypeOutput() NodeTypeOutput {
	return i.ToNodeTypeOutputWithContext(context.Background())
}

func (i NodeTypeArgs) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeOutput)
}

// NodeTypeArrayInput is an input type that accepts NodeTypeArray and NodeTypeArrayOutput values.
// You can construct a concrete instance of `NodeTypeArrayInput` via:
//
//	NodeTypeArray{ NodeTypeArgs{...} }
type NodeTypeArrayInput interface {
	pulumi.Input

	ToNodeTypeArrayOutput() NodeTypeArrayOutput
	ToNodeTypeArrayOutputWithContext(context.Context) NodeTypeArrayOutput
}

type NodeTypeArray []NodeTypeInput

func (NodeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeType)(nil)).Elem()
}

func (i NodeTypeArray) ToNodeTypeArrayOutput() NodeTypeArrayOutput {
	return i.ToNodeTypeArrayOutputWithContext(context.Background())
}

func (i NodeTypeArray) ToNodeTypeArrayOutputWithContext(ctx context.Context) NodeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeArrayOutput)
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodeTypeOutput struct{ *pulumi.OutputState }

func (NodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeType)(nil)).Elem()
}

func (o NodeTypeOutput) ToNodeTypeOutput() NodeTypeOutput {
	return o
}

func (o NodeTypeOutput) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NodeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NodeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NodeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NodeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NodeTypeOutput) Spec() NodeSpecPtrOutput {
	return o.ApplyT(func(v NodeType) *NodeSpec { return v.Spec }).(NodeSpecPtrOutput)
}

// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NodeTypeOutput) Status() NodeStatusPtrOutput {
	return o.ApplyT(func(v NodeType) *NodeStatus { return v.Status }).(NodeStatusPtrOutput)
}

type NodeTypeArrayOutput struct{ *pulumi.OutputState }

func (NodeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeType)(nil)).Elem()
}

func (o NodeTypeArrayOutput) ToNodeTypeArrayOutput() NodeTypeArrayOutput {
	return o
}

func (o NodeTypeArrayOutput) ToNodeTypeArrayOutputWithContext(ctx context.Context) NodeTypeArrayOutput {
	return o
}

func (o NodeTypeArrayOutput) Index(i pulumi.IntInput) NodeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeType {
		return vs[0].([]NodeType)[vs[1].(int)]
	}).(NodeTypeOutput)
}

// NodeAddress contains information for the node's address.
type NodeAddress struct {
	// The node address.
	Address string `pulumi:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type string `pulumi:"type"`
}

// NodeAddressInput is an input type that accepts NodeAddressArgs and NodeAddressOutput values.
// You can construct a concrete instance of `NodeAddressInput` via:
//
//	NodeAddressArgs{...}
type NodeAddressInput interface {
	pulumi.Input

	ToNodeAddressOutput() NodeAddressOutput
	ToNodeAddressOutputWithContext(context.Context) NodeAddressOutput
}

// NodeAddress contains information for the node's address.
type NodeAddressArgs struct {
	// The node address.
	Address pulumi.StringInput `pulumi:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAddress)(nil)).Elem()
}

func (i NodeAddressArgs) ToNodeAddressOutput() NodeAddressOutput {
	return i.ToNodeAddressOutputWithContext(context.Background())
}

func (i NodeAddressArgs) ToNodeAddressOutputWithContext(ctx context.Context) NodeAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAddressOutput)
}

// NodeAddressArrayInput is an input type that accepts NodeAddressArray and NodeAddressArrayOutput values.
// You can construct a concrete instance of `NodeAddressArrayInput` via:
//
//	NodeAddressArray{ NodeAddressArgs{...} }
type NodeAddressArrayInput interface {
	pulumi.Input

	ToNodeAddressArrayOutput() NodeAddressArrayOutput
	ToNodeAddressArrayOutputWithContext(context.Context) NodeAddressArrayOutput
}

type NodeAddressArray []NodeAddressInput

func (NodeAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAddress)(nil)).Elem()
}

func (i NodeAddressArray) ToNodeAddressArrayOutput() NodeAddressArrayOutput {
	return i.ToNodeAddressArrayOutputWithContext(context.Background())
}

func (i NodeAddressArray) ToNodeAddressArrayOutputWithContext(ctx context.Context) NodeAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAddressArrayOutput)
}

// NodeAddress contains information for the node's address.
type NodeAddressOutput struct{ *pulumi.OutputState }

func (NodeAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAddress)(nil)).Elem()
}

func (o NodeAddressOutput) ToNodeAddressOutput() NodeAddressOutput {
	return o
}

func (o NodeAddressOutput) ToNodeAddressOutputWithContext(ctx context.Context) NodeAddressOutput {
	return o
}

// The node address.
func (o NodeAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Node address type, one of Hostname, ExternalIP or InternalIP.
func (o NodeAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAddress) string { return v.Type }).(pulumi.StringOutput)
}

type NodeAddressArrayOutput struct{ *pulumi.OutputState }

func (NodeAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAddress)(nil)).Elem()
}

func (o NodeAddressArrayOutput) ToNodeAddressArrayOutput() NodeAddressArrayOutput {
	return o
}

func (o NodeAddressArrayOutput) ToNodeAddressArrayOutputWithContext(ctx context.Context) NodeAddressArrayOutput {
	return o
}

func (o NodeAddressArrayOutput) Index(i pulumi.IntInput) NodeAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAddress {
		return vs[0].([]NodeAddress)[vs[1].(int)]
	}).(NodeAddressOutput)
}

// NodeAddress contains information for the node's address.
type NodeAddressPatch struct {
	// The node address.
	Address *string `pulumi:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type *string `pulumi:"type"`
}

// NodeAddressPatchInput is an input type that accepts NodeAddressPatchArgs and NodeAddressPatchOutput values.
// You can construct a concrete instance of `NodeAddressPatchInput` via:
//
//	NodeAddressPatchArgs{...}
type NodeAddressPatchInput interface {
	pulumi.Input

	ToNodeAddressPatchOutput() NodeAddressPatchOutput
	ToNodeAddressPatchOutputWithContext(context.Context) NodeAddressPatchOutput
}

// NodeAddress contains information for the node's address.
type NodeAddressPatchArgs struct {
	// The node address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodeAddressPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAddressPatch)(nil)).Elem()
}

func (i NodeAddressPatchArgs) ToNodeAddressPatchOutput() NodeAddressPatchOutput {
	return i.ToNodeAddressPatchOutputWithContext(context.Background())
}

func (i NodeAddressPatchArgs) ToNodeAddressPatchOutputWithContext(ctx context.Context) NodeAddressPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAddressPatchOutput)
}

// NodeAddressPatchArrayInput is an input type that accepts NodeAddressPatchArray and NodeAddressPatchArrayOutput values.
// You can construct a concrete instance of `NodeAddressPatchArrayInput` via:
//
//	NodeAddressPatchArray{ NodeAddressPatchArgs{...} }
type NodeAddressPatchArrayInput interface {
	pulumi.Input

	ToNodeAddressPatchArrayOutput() NodeAddressPatchArrayOutput
	ToNodeAddressPatchArrayOutputWithContext(context.Context) NodeAddressPatchArrayOutput
}

type NodeAddressPatchArray []NodeAddressPatchInput

func (NodeAddressPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAddressPatch)(nil)).Elem()
}

func (i NodeAddressPatchArray) ToNodeAddressPatchArrayOutput() NodeAddressPatchArrayOutput {
	return i.ToNodeAddressPatchArrayOutputWithContext(context.Background())
}

func (i NodeAddressPatchArray) ToNodeAddressPatchArrayOutputWithContext(ctx context.Context) NodeAddressPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAddressPatchArrayOutput)
}

// NodeAddress contains information for the node's address.
type NodeAddressPatchOutput struct{ *pulumi.OutputState }

func (NodeAddressPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAddressPatch)(nil)).Elem()
}

func (o NodeAddressPatchOutput) ToNodeAddressPatchOutput() NodeAddressPatchOutput {
	return o
}

func (o NodeAddressPatchOutput) ToNodeAddressPatchOutputWithContext(ctx context.Context) NodeAddressPatchOutput {
	return o
}

// The node address.
func (o NodeAddressPatchOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAddressPatch) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Node address type, one of Hostname, ExternalIP or InternalIP.
func (o NodeAddressPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAddressPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodeAddressPatchArrayOutput struct{ *pulumi.OutputState }

func (NodeAddressPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAddressPatch)(nil)).Elem()
}

func (o NodeAddressPatchArrayOutput) ToNodeAddressPatchArrayOutput() NodeAddressPatchArrayOutput {
	return o
}

func (o NodeAddressPatchArrayOutput) ToNodeAddressPatchArrayOutputWithContext(ctx context.Context) NodeAddressPatchArrayOutput {
	return o
}

func (o NodeAddressPatchArrayOutput) Index(i pulumi.IntInput) NodeAddressPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAddressPatch {
		return vs[0].([]NodeAddressPatch)[vs[1].(int)]
	}).(NodeAddressPatchOutput)
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PreferredSchedulingTerm `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution *NodeSelector `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// NodeAffinityInput is an input type that accepts NodeAffinityArgs and NodeAffinityOutput values.
// You can construct a concrete instance of `NodeAffinityInput` via:
//
//	NodeAffinityArgs{...}
type NodeAffinityInput interface {
	pulumi.Input

	ToNodeAffinityOutput() NodeAffinityOutput
	ToNodeAffinityOutputWithContext(context.Context) NodeAffinityOutput
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PreferredSchedulingTermArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution NodeSelectorPtrInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (NodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinity)(nil)).Elem()
}

func (i NodeAffinityArgs) ToNodeAffinityOutput() NodeAffinityOutput {
	return i.ToNodeAffinityOutputWithContext(context.Background())
}

func (i NodeAffinityArgs) ToNodeAffinityOutputWithContext(ctx context.Context) NodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityOutput)
}

func (i NodeAffinityArgs) ToNodeAffinityPtrOutput() NodeAffinityPtrOutput {
	return i.ToNodeAffinityPtrOutputWithContext(context.Background())
}

func (i NodeAffinityArgs) ToNodeAffinityPtrOutputWithContext(ctx context.Context) NodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityOutput).ToNodeAffinityPtrOutputWithContext(ctx)
}

// NodeAffinityPtrInput is an input type that accepts NodeAffinityArgs, NodeAffinityPtr and NodeAffinityPtrOutput values.
// You can construct a concrete instance of `NodeAffinityPtrInput` via:
//
//	        NodeAffinityArgs{...}
//
//	or:
//
//	        nil
type NodeAffinityPtrInput interface {
	pulumi.Input

	ToNodeAffinityPtrOutput() NodeAffinityPtrOutput
	ToNodeAffinityPtrOutputWithContext(context.Context) NodeAffinityPtrOutput
}

type nodeAffinityPtrType NodeAffinityArgs

func NodeAffinityPtr(v *NodeAffinityArgs) NodeAffinityPtrInput {
	return (*nodeAffinityPtrType)(v)
}

func (*nodeAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAffinity)(nil)).Elem()
}

func (i *nodeAffinityPtrType) ToNodeAffinityPtrOutput() NodeAffinityPtrOutput {
	return i.ToNodeAffinityPtrOutputWithContext(context.Background())
}

func (i *nodeAffinityPtrType) ToNodeAffinityPtrOutputWithContext(ctx context.Context) NodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityPtrOutput)
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinityOutput struct{ *pulumi.OutputState }

func (NodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinity)(nil)).Elem()
}

func (o NodeAffinityOutput) ToNodeAffinityOutput() NodeAffinityOutput {
	return o
}

func (o NodeAffinityOutput) ToNodeAffinityOutputWithContext(ctx context.Context) NodeAffinityOutput {
	return o
}

func (o NodeAffinityOutput) ToNodeAffinityPtrOutput() NodeAffinityPtrOutput {
	return o.ToNodeAffinityPtrOutputWithContext(context.Background())
}

func (o NodeAffinityOutput) ToNodeAffinityPtrOutputWithContext(ctx context.Context) NodeAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeAffinity) *NodeAffinity {
		return &v
	}).(NodeAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o NodeAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() PreferredSchedulingTermArrayOutput {
	return o.ApplyT(func(v NodeAffinity) []PreferredSchedulingTerm {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PreferredSchedulingTermArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o NodeAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() NodeSelectorPtrOutput {
	return o.ApplyT(func(v NodeAffinity) *NodeSelector { return v.RequiredDuringSchedulingIgnoredDuringExecution }).(NodeSelectorPtrOutput)
}

type NodeAffinityPtrOutput struct{ *pulumi.OutputState }

func (NodeAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAffinity)(nil)).Elem()
}

func (o NodeAffinityPtrOutput) ToNodeAffinityPtrOutput() NodeAffinityPtrOutput {
	return o
}

func (o NodeAffinityPtrOutput) ToNodeAffinityPtrOutputWithContext(ctx context.Context) NodeAffinityPtrOutput {
	return o
}

func (o NodeAffinityPtrOutput) Elem() NodeAffinityOutput {
	return o.ApplyT(func(v *NodeAffinity) NodeAffinity {
		if v != nil {
			return *v
		}
		var ret NodeAffinity
		return ret
	}).(NodeAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o NodeAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PreferredSchedulingTermArrayOutput {
	return o.ApplyT(func(v *NodeAffinity) []PreferredSchedulingTerm {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PreferredSchedulingTermArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o NodeAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() NodeSelectorPtrOutput {
	return o.ApplyT(func(v *NodeAffinity) *NodeSelector {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(NodeSelectorPtrOutput)
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PreferredSchedulingTermPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution *NodeSelectorPatch `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// NodeAffinityPatchInput is an input type that accepts NodeAffinityPatchArgs and NodeAffinityPatchOutput values.
// You can construct a concrete instance of `NodeAffinityPatchInput` via:
//
//	NodeAffinityPatchArgs{...}
type NodeAffinityPatchInput interface {
	pulumi.Input

	ToNodeAffinityPatchOutput() NodeAffinityPatchOutput
	ToNodeAffinityPatchOutputWithContext(context.Context) NodeAffinityPatchOutput
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PreferredSchedulingTermPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution NodeSelectorPatchPtrInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (NodeAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinityPatch)(nil)).Elem()
}

func (i NodeAffinityPatchArgs) ToNodeAffinityPatchOutput() NodeAffinityPatchOutput {
	return i.ToNodeAffinityPatchOutputWithContext(context.Background())
}

func (i NodeAffinityPatchArgs) ToNodeAffinityPatchOutputWithContext(ctx context.Context) NodeAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityPatchOutput)
}

func (i NodeAffinityPatchArgs) ToNodeAffinityPatchPtrOutput() NodeAffinityPatchPtrOutput {
	return i.ToNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i NodeAffinityPatchArgs) ToNodeAffinityPatchPtrOutputWithContext(ctx context.Context) NodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityPatchOutput).ToNodeAffinityPatchPtrOutputWithContext(ctx)
}

// NodeAffinityPatchPtrInput is an input type that accepts NodeAffinityPatchArgs, NodeAffinityPatchPtr and NodeAffinityPatchPtrOutput values.
// You can construct a concrete instance of `NodeAffinityPatchPtrInput` via:
//
//	        NodeAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type NodeAffinityPatchPtrInput interface {
	pulumi.Input

	ToNodeAffinityPatchPtrOutput() NodeAffinityPatchPtrOutput
	ToNodeAffinityPatchPtrOutputWithContext(context.Context) NodeAffinityPatchPtrOutput
}

type nodeAffinityPatchPtrType NodeAffinityPatchArgs

func NodeAffinityPatchPtr(v *NodeAffinityPatchArgs) NodeAffinityPatchPtrInput {
	return (*nodeAffinityPatchPtrType)(v)
}

func (*nodeAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAffinityPatch)(nil)).Elem()
}

func (i *nodeAffinityPatchPtrType) ToNodeAffinityPatchPtrOutput() NodeAffinityPatchPtrOutput {
	return i.ToNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *nodeAffinityPatchPtrType) ToNodeAffinityPatchPtrOutputWithContext(ctx context.Context) NodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityPatchPtrOutput)
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinityPatchOutput struct{ *pulumi.OutputState }

func (NodeAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinityPatch)(nil)).Elem()
}

func (o NodeAffinityPatchOutput) ToNodeAffinityPatchOutput() NodeAffinityPatchOutput {
	return o
}

func (o NodeAffinityPatchOutput) ToNodeAffinityPatchOutputWithContext(ctx context.Context) NodeAffinityPatchOutput {
	return o
}

func (o NodeAffinityPatchOutput) ToNodeAffinityPatchPtrOutput() NodeAffinityPatchPtrOutput {
	return o.ToNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (o NodeAffinityPatchOutput) ToNodeAffinityPatchPtrOutputWithContext(ctx context.Context) NodeAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeAffinityPatch) *NodeAffinityPatch {
		return &v
	}).(NodeAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o NodeAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() PreferredSchedulingTermPatchArrayOutput {
	return o.ApplyT(func(v NodeAffinityPatch) []PreferredSchedulingTermPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PreferredSchedulingTermPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o NodeAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v NodeAffinityPatch) *NodeSelectorPatch { return v.RequiredDuringSchedulingIgnoredDuringExecution }).(NodeSelectorPatchPtrOutput)
}

type NodeAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAffinityPatch)(nil)).Elem()
}

func (o NodeAffinityPatchPtrOutput) ToNodeAffinityPatchPtrOutput() NodeAffinityPatchPtrOutput {
	return o
}

func (o NodeAffinityPatchPtrOutput) ToNodeAffinityPatchPtrOutputWithContext(ctx context.Context) NodeAffinityPatchPtrOutput {
	return o
}

func (o NodeAffinityPatchPtrOutput) Elem() NodeAffinityPatchOutput {
	return o.ApplyT(func(v *NodeAffinityPatch) NodeAffinityPatch {
		if v != nil {
			return *v
		}
		var ret NodeAffinityPatch
		return ret
	}).(NodeAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o NodeAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PreferredSchedulingTermPatchArrayOutput {
	return o.ApplyT(func(v *NodeAffinityPatch) []PreferredSchedulingTermPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PreferredSchedulingTermPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o NodeAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *NodeAffinityPatch) *NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(NodeSelectorPatchPtrOutput)
}

// NodeCondition contains condition information for a node.
type NodeCondition struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime *string `pulumi:"lastHeartbeatTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of node condition.
	Type string `pulumi:"type"`
}

// NodeConditionInput is an input type that accepts NodeConditionArgs and NodeConditionOutput values.
// You can construct a concrete instance of `NodeConditionInput` via:
//
//	NodeConditionArgs{...}
type NodeConditionInput interface {
	pulumi.Input

	ToNodeConditionOutput() NodeConditionOutput
	ToNodeConditionOutputWithContext(context.Context) NodeConditionOutput
}

// NodeCondition contains condition information for a node.
type NodeConditionArgs struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime pulumi.StringPtrInput `pulumi:"lastHeartbeatTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of node condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeCondition)(nil)).Elem()
}

func (i NodeConditionArgs) ToNodeConditionOutput() NodeConditionOutput {
	return i.ToNodeConditionOutputWithContext(context.Background())
}

func (i NodeConditionArgs) ToNodeConditionOutputWithContext(ctx context.Context) NodeConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConditionOutput)
}

// NodeConditionArrayInput is an input type that accepts NodeConditionArray and NodeConditionArrayOutput values.
// You can construct a concrete instance of `NodeConditionArrayInput` via:
//
//	NodeConditionArray{ NodeConditionArgs{...} }
type NodeConditionArrayInput interface {
	pulumi.Input

	ToNodeConditionArrayOutput() NodeConditionArrayOutput
	ToNodeConditionArrayOutputWithContext(context.Context) NodeConditionArrayOutput
}

type NodeConditionArray []NodeConditionInput

func (NodeConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeCondition)(nil)).Elem()
}

func (i NodeConditionArray) ToNodeConditionArrayOutput() NodeConditionArrayOutput {
	return i.ToNodeConditionArrayOutputWithContext(context.Background())
}

func (i NodeConditionArray) ToNodeConditionArrayOutputWithContext(ctx context.Context) NodeConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConditionArrayOutput)
}

// NodeCondition contains condition information for a node.
type NodeConditionOutput struct{ *pulumi.OutputState }

func (NodeConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeCondition)(nil)).Elem()
}

func (o NodeConditionOutput) ToNodeConditionOutput() NodeConditionOutput {
	return o
}

func (o NodeConditionOutput) ToNodeConditionOutputWithContext(ctx context.Context) NodeConditionOutput {
	return o
}

// Last time we got an update on a given condition.
func (o NodeConditionOutput) LastHeartbeatTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeCondition) *string { return v.LastHeartbeatTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transit from one status to another.
func (o NodeConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o NodeConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o NodeConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o NodeConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NodeCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of node condition.
func (o NodeConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeCondition) string { return v.Type }).(pulumi.StringOutput)
}

type NodeConditionArrayOutput struct{ *pulumi.OutputState }

func (NodeConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeCondition)(nil)).Elem()
}

func (o NodeConditionArrayOutput) ToNodeConditionArrayOutput() NodeConditionArrayOutput {
	return o
}

func (o NodeConditionArrayOutput) ToNodeConditionArrayOutputWithContext(ctx context.Context) NodeConditionArrayOutput {
	return o
}

func (o NodeConditionArrayOutput) Index(i pulumi.IntInput) NodeConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeCondition {
		return vs[0].([]NodeCondition)[vs[1].(int)]
	}).(NodeConditionOutput)
}

// NodeCondition contains condition information for a node.
type NodeConditionPatch struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime *string `pulumi:"lastHeartbeatTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of node condition.
	Type *string `pulumi:"type"`
}

// NodeConditionPatchInput is an input type that accepts NodeConditionPatchArgs and NodeConditionPatchOutput values.
// You can construct a concrete instance of `NodeConditionPatchInput` via:
//
//	NodeConditionPatchArgs{...}
type NodeConditionPatchInput interface {
	pulumi.Input

	ToNodeConditionPatchOutput() NodeConditionPatchOutput
	ToNodeConditionPatchOutputWithContext(context.Context) NodeConditionPatchOutput
}

// NodeCondition contains condition information for a node.
type NodeConditionPatchArgs struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime pulumi.StringPtrInput `pulumi:"lastHeartbeatTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of node condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodeConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConditionPatch)(nil)).Elem()
}

func (i NodeConditionPatchArgs) ToNodeConditionPatchOutput() NodeConditionPatchOutput {
	return i.ToNodeConditionPatchOutputWithContext(context.Background())
}

func (i NodeConditionPatchArgs) ToNodeConditionPatchOutputWithContext(ctx context.Context) NodeConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConditionPatchOutput)
}

// NodeConditionPatchArrayInput is an input type that accepts NodeConditionPatchArray and NodeConditionPatchArrayOutput values.
// You can construct a concrete instance of `NodeConditionPatchArrayInput` via:
//
//	NodeConditionPatchArray{ NodeConditionPatchArgs{...} }
type NodeConditionPatchArrayInput interface {
	pulumi.Input

	ToNodeConditionPatchArrayOutput() NodeConditionPatchArrayOutput
	ToNodeConditionPatchArrayOutputWithContext(context.Context) NodeConditionPatchArrayOutput
}

type NodeConditionPatchArray []NodeConditionPatchInput

func (NodeConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeConditionPatch)(nil)).Elem()
}

func (i NodeConditionPatchArray) ToNodeConditionPatchArrayOutput() NodeConditionPatchArrayOutput {
	return i.ToNodeConditionPatchArrayOutputWithContext(context.Background())
}

func (i NodeConditionPatchArray) ToNodeConditionPatchArrayOutputWithContext(ctx context.Context) NodeConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConditionPatchArrayOutput)
}

// NodeCondition contains condition information for a node.
type NodeConditionPatchOutput struct{ *pulumi.OutputState }

func (NodeConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConditionPatch)(nil)).Elem()
}

func (o NodeConditionPatchOutput) ToNodeConditionPatchOutput() NodeConditionPatchOutput {
	return o
}

func (o NodeConditionPatchOutput) ToNodeConditionPatchOutputWithContext(ctx context.Context) NodeConditionPatchOutput {
	return o
}

// Last time we got an update on a given condition.
func (o NodeConditionPatchOutput) LastHeartbeatTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.LastHeartbeatTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transit from one status to another.
func (o NodeConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o NodeConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o NodeConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o NodeConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of node condition.
func (o NodeConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodeConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (NodeConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeConditionPatch)(nil)).Elem()
}

func (o NodeConditionPatchArrayOutput) ToNodeConditionPatchArrayOutput() NodeConditionPatchArrayOutput {
	return o
}

func (o NodeConditionPatchArrayOutput) ToNodeConditionPatchArrayOutputWithContext(ctx context.Context) NodeConditionPatchArrayOutput {
	return o
}

func (o NodeConditionPatchArrayOutput) Index(i pulumi.IntInput) NodeConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeConditionPatch {
		return vs[0].([]NodeConditionPatch)[vs[1].(int)]
	}).(NodeConditionPatchOutput)
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSource struct {
	// ConfigMap is a reference to a Node's ConfigMap
	ConfigMap *ConfigMapNodeConfigSource `pulumi:"configMap"`
}

// NodeConfigSourceInput is an input type that accepts NodeConfigSourceArgs and NodeConfigSourceOutput values.
// You can construct a concrete instance of `NodeConfigSourceInput` via:
//
//	NodeConfigSourceArgs{...}
type NodeConfigSourceInput interface {
	pulumi.Input

	ToNodeConfigSourceOutput() NodeConfigSourceOutput
	ToNodeConfigSourceOutputWithContext(context.Context) NodeConfigSourceOutput
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSourceArgs struct {
	// ConfigMap is a reference to a Node's ConfigMap
	ConfigMap ConfigMapNodeConfigSourcePtrInput `pulumi:"configMap"`
}

func (NodeConfigSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigSource)(nil)).Elem()
}

func (i NodeConfigSourceArgs) ToNodeConfigSourceOutput() NodeConfigSourceOutput {
	return i.ToNodeConfigSourceOutputWithContext(context.Background())
}

func (i NodeConfigSourceArgs) ToNodeConfigSourceOutputWithContext(ctx context.Context) NodeConfigSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourceOutput)
}

func (i NodeConfigSourceArgs) ToNodeConfigSourcePtrOutput() NodeConfigSourcePtrOutput {
	return i.ToNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (i NodeConfigSourceArgs) ToNodeConfigSourcePtrOutputWithContext(ctx context.Context) NodeConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourceOutput).ToNodeConfigSourcePtrOutputWithContext(ctx)
}

// NodeConfigSourcePtrInput is an input type that accepts NodeConfigSourceArgs, NodeConfigSourcePtr and NodeConfigSourcePtrOutput values.
// You can construct a concrete instance of `NodeConfigSourcePtrInput` via:
//
//	        NodeConfigSourceArgs{...}
//
//	or:
//
//	        nil
type NodeConfigSourcePtrInput interface {
	pulumi.Input

	ToNodeConfigSourcePtrOutput() NodeConfigSourcePtrOutput
	ToNodeConfigSourcePtrOutputWithContext(context.Context) NodeConfigSourcePtrOutput
}

type nodeConfigSourcePtrType NodeConfigSourceArgs

func NodeConfigSourcePtr(v *NodeConfigSourceArgs) NodeConfigSourcePtrInput {
	return (*nodeConfigSourcePtrType)(v)
}

func (*nodeConfigSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigSource)(nil)).Elem()
}

func (i *nodeConfigSourcePtrType) ToNodeConfigSourcePtrOutput() NodeConfigSourcePtrOutput {
	return i.ToNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (i *nodeConfigSourcePtrType) ToNodeConfigSourcePtrOutputWithContext(ctx context.Context) NodeConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourcePtrOutput)
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSourceOutput struct{ *pulumi.OutputState }

func (NodeConfigSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigSource)(nil)).Elem()
}

func (o NodeConfigSourceOutput) ToNodeConfigSourceOutput() NodeConfigSourceOutput {
	return o
}

func (o NodeConfigSourceOutput) ToNodeConfigSourceOutputWithContext(ctx context.Context) NodeConfigSourceOutput {
	return o
}

func (o NodeConfigSourceOutput) ToNodeConfigSourcePtrOutput() NodeConfigSourcePtrOutput {
	return o.ToNodeConfigSourcePtrOutputWithContext(context.Background())
}

func (o NodeConfigSourceOutput) ToNodeConfigSourcePtrOutputWithContext(ctx context.Context) NodeConfigSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfigSource) *NodeConfigSource {
		return &v
	}).(NodeConfigSourcePtrOutput)
}

// ConfigMap is a reference to a Node's ConfigMap
func (o NodeConfigSourceOutput) ConfigMap() ConfigMapNodeConfigSourcePtrOutput {
	return o.ApplyT(func(v NodeConfigSource) *ConfigMapNodeConfigSource { return v.ConfigMap }).(ConfigMapNodeConfigSourcePtrOutput)
}

type NodeConfigSourcePtrOutput struct{ *pulumi.OutputState }

func (NodeConfigSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigSource)(nil)).Elem()
}

func (o NodeConfigSourcePtrOutput) ToNodeConfigSourcePtrOutput() NodeConfigSourcePtrOutput {
	return o
}

func (o NodeConfigSourcePtrOutput) ToNodeConfigSourcePtrOutputWithContext(ctx context.Context) NodeConfigSourcePtrOutput {
	return o
}

func (o NodeConfigSourcePtrOutput) Elem() NodeConfigSourceOutput {
	return o.ApplyT(func(v *NodeConfigSource) NodeConfigSource {
		if v != nil {
			return *v
		}
		var ret NodeConfigSource
		return ret
	}).(NodeConfigSourceOutput)
}

// ConfigMap is a reference to a Node's ConfigMap
func (o NodeConfigSourcePtrOutput) ConfigMap() ConfigMapNodeConfigSourcePtrOutput {
	return o.ApplyT(func(v *NodeConfigSource) *ConfigMapNodeConfigSource {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ConfigMapNodeConfigSourcePtrOutput)
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSourcePatch struct {
	// ConfigMap is a reference to a Node's ConfigMap
	ConfigMap *ConfigMapNodeConfigSourcePatch `pulumi:"configMap"`
}

// NodeConfigSourcePatchInput is an input type that accepts NodeConfigSourcePatchArgs and NodeConfigSourcePatchOutput values.
// You can construct a concrete instance of `NodeConfigSourcePatchInput` via:
//
//	NodeConfigSourcePatchArgs{...}
type NodeConfigSourcePatchInput interface {
	pulumi.Input

	ToNodeConfigSourcePatchOutput() NodeConfigSourcePatchOutput
	ToNodeConfigSourcePatchOutputWithContext(context.Context) NodeConfigSourcePatchOutput
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSourcePatchArgs struct {
	// ConfigMap is a reference to a Node's ConfigMap
	ConfigMap ConfigMapNodeConfigSourcePatchPtrInput `pulumi:"configMap"`
}

func (NodeConfigSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigSourcePatch)(nil)).Elem()
}

func (i NodeConfigSourcePatchArgs) ToNodeConfigSourcePatchOutput() NodeConfigSourcePatchOutput {
	return i.ToNodeConfigSourcePatchOutputWithContext(context.Background())
}

func (i NodeConfigSourcePatchArgs) ToNodeConfigSourcePatchOutputWithContext(ctx context.Context) NodeConfigSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourcePatchOutput)
}

func (i NodeConfigSourcePatchArgs) ToNodeConfigSourcePatchPtrOutput() NodeConfigSourcePatchPtrOutput {
	return i.ToNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (i NodeConfigSourcePatchArgs) ToNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) NodeConfigSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourcePatchOutput).ToNodeConfigSourcePatchPtrOutputWithContext(ctx)
}

// NodeConfigSourcePatchPtrInput is an input type that accepts NodeConfigSourcePatchArgs, NodeConfigSourcePatchPtr and NodeConfigSourcePatchPtrOutput values.
// You can construct a concrete instance of `NodeConfigSourcePatchPtrInput` via:
//
//	        NodeConfigSourcePatchArgs{...}
//
//	or:
//
//	        nil
type NodeConfigSourcePatchPtrInput interface {
	pulumi.Input

	ToNodeConfigSourcePatchPtrOutput() NodeConfigSourcePatchPtrOutput
	ToNodeConfigSourcePatchPtrOutputWithContext(context.Context) NodeConfigSourcePatchPtrOutput
}

type nodeConfigSourcePatchPtrType NodeConfigSourcePatchArgs

func NodeConfigSourcePatchPtr(v *NodeConfigSourcePatchArgs) NodeConfigSourcePatchPtrInput {
	return (*nodeConfigSourcePatchPtrType)(v)
}

func (*nodeConfigSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigSourcePatch)(nil)).Elem()
}

func (i *nodeConfigSourcePatchPtrType) ToNodeConfigSourcePatchPtrOutput() NodeConfigSourcePatchPtrOutput {
	return i.ToNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (i *nodeConfigSourcePatchPtrType) ToNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) NodeConfigSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigSourcePatchPtrOutput)
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type NodeConfigSourcePatchOutput struct{ *pulumi.OutputState }

func (NodeConfigSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigSourcePatch)(nil)).Elem()
}

func (o NodeConfigSourcePatchOutput) ToNodeConfigSourcePatchOutput() NodeConfigSourcePatchOutput {
	return o
}

func (o NodeConfigSourcePatchOutput) ToNodeConfigSourcePatchOutputWithContext(ctx context.Context) NodeConfigSourcePatchOutput {
	return o
}

func (o NodeConfigSourcePatchOutput) ToNodeConfigSourcePatchPtrOutput() NodeConfigSourcePatchPtrOutput {
	return o.ToNodeConfigSourcePatchPtrOutputWithContext(context.Background())
}

func (o NodeConfigSourcePatchOutput) ToNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) NodeConfigSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfigSourcePatch) *NodeConfigSourcePatch {
		return &v
	}).(NodeConfigSourcePatchPtrOutput)
}

// ConfigMap is a reference to a Node's ConfigMap
func (o NodeConfigSourcePatchOutput) ConfigMap() ConfigMapNodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v NodeConfigSourcePatch) *ConfigMapNodeConfigSourcePatch { return v.ConfigMap }).(ConfigMapNodeConfigSourcePatchPtrOutput)
}

type NodeConfigSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigSourcePatch)(nil)).Elem()
}

func (o NodeConfigSourcePatchPtrOutput) ToNodeConfigSourcePatchPtrOutput() NodeConfigSourcePatchPtrOutput {
	return o
}

func (o NodeConfigSourcePatchPtrOutput) ToNodeConfigSourcePatchPtrOutputWithContext(ctx context.Context) NodeConfigSourcePatchPtrOutput {
	return o
}

func (o NodeConfigSourcePatchPtrOutput) Elem() NodeConfigSourcePatchOutput {
	return o.ApplyT(func(v *NodeConfigSourcePatch) NodeConfigSourcePatch {
		if v != nil {
			return *v
		}
		var ret NodeConfigSourcePatch
		return ret
	}).(NodeConfigSourcePatchOutput)
}

// ConfigMap is a reference to a Node's ConfigMap
func (o NodeConfigSourcePatchPtrOutput) ConfigMap() ConfigMapNodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v *NodeConfigSourcePatch) *ConfigMapNodeConfigSourcePatch {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ConfigMapNodeConfigSourcePatchPtrOutput)
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatus struct {
	// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
	Active *NodeConfigSource `pulumi:"active"`
	// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
	Assigned *NodeConfigSource `pulumi:"assigned"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error *string `pulumi:"error"`
	// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
	LastKnownGood *NodeConfigSource `pulumi:"lastKnownGood"`
}

// NodeConfigStatusInput is an input type that accepts NodeConfigStatusArgs and NodeConfigStatusOutput values.
// You can construct a concrete instance of `NodeConfigStatusInput` via:
//
//	NodeConfigStatusArgs{...}
type NodeConfigStatusInput interface {
	pulumi.Input

	ToNodeConfigStatusOutput() NodeConfigStatusOutput
	ToNodeConfigStatusOutputWithContext(context.Context) NodeConfigStatusOutput
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatusArgs struct {
	// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
	Active NodeConfigSourcePtrInput `pulumi:"active"`
	// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
	Assigned NodeConfigSourcePtrInput `pulumi:"assigned"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
	LastKnownGood NodeConfigSourcePtrInput `pulumi:"lastKnownGood"`
}

func (NodeConfigStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigStatus)(nil)).Elem()
}

func (i NodeConfigStatusArgs) ToNodeConfigStatusOutput() NodeConfigStatusOutput {
	return i.ToNodeConfigStatusOutputWithContext(context.Background())
}

func (i NodeConfigStatusArgs) ToNodeConfigStatusOutputWithContext(ctx context.Context) NodeConfigStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusOutput)
}

func (i NodeConfigStatusArgs) ToNodeConfigStatusPtrOutput() NodeConfigStatusPtrOutput {
	return i.ToNodeConfigStatusPtrOutputWithContext(context.Background())
}

func (i NodeConfigStatusArgs) ToNodeConfigStatusPtrOutputWithContext(ctx context.Context) NodeConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusOutput).ToNodeConfigStatusPtrOutputWithContext(ctx)
}

// NodeConfigStatusPtrInput is an input type that accepts NodeConfigStatusArgs, NodeConfigStatusPtr and NodeConfigStatusPtrOutput values.
// You can construct a concrete instance of `NodeConfigStatusPtrInput` via:
//
//	        NodeConfigStatusArgs{...}
//
//	or:
//
//	        nil
type NodeConfigStatusPtrInput interface {
	pulumi.Input

	ToNodeConfigStatusPtrOutput() NodeConfigStatusPtrOutput
	ToNodeConfigStatusPtrOutputWithContext(context.Context) NodeConfigStatusPtrOutput
}

type nodeConfigStatusPtrType NodeConfigStatusArgs

func NodeConfigStatusPtr(v *NodeConfigStatusArgs) NodeConfigStatusPtrInput {
	return (*nodeConfigStatusPtrType)(v)
}

func (*nodeConfigStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigStatus)(nil)).Elem()
}

func (i *nodeConfigStatusPtrType) ToNodeConfigStatusPtrOutput() NodeConfigStatusPtrOutput {
	return i.ToNodeConfigStatusPtrOutputWithContext(context.Background())
}

func (i *nodeConfigStatusPtrType) ToNodeConfigStatusPtrOutputWithContext(ctx context.Context) NodeConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusPtrOutput)
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatusOutput struct{ *pulumi.OutputState }

func (NodeConfigStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigStatus)(nil)).Elem()
}

func (o NodeConfigStatusOutput) ToNodeConfigStatusOutput() NodeConfigStatusOutput {
	return o
}

func (o NodeConfigStatusOutput) ToNodeConfigStatusOutputWithContext(ctx context.Context) NodeConfigStatusOutput {
	return o
}

func (o NodeConfigStatusOutput) ToNodeConfigStatusPtrOutput() NodeConfigStatusPtrOutput {
	return o.ToNodeConfigStatusPtrOutputWithContext(context.Background())
}

func (o NodeConfigStatusOutput) ToNodeConfigStatusPtrOutputWithContext(ctx context.Context) NodeConfigStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfigStatus) *NodeConfigStatus {
		return &v
	}).(NodeConfigStatusPtrOutput)
}

// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
func (o NodeConfigStatusOutput) Active() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v NodeConfigStatus) *NodeConfigSource { return v.Active }).(NodeConfigSourcePtrOutput)
}

// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
func (o NodeConfigStatusOutput) Assigned() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v NodeConfigStatus) *NodeConfigSource { return v.Assigned }).(NodeConfigSourcePtrOutput)
}

// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
func (o NodeConfigStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfigStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
func (o NodeConfigStatusOutput) LastKnownGood() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v NodeConfigStatus) *NodeConfigSource { return v.LastKnownGood }).(NodeConfigSourcePtrOutput)
}

type NodeConfigStatusPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigStatus)(nil)).Elem()
}

func (o NodeConfigStatusPtrOutput) ToNodeConfigStatusPtrOutput() NodeConfigStatusPtrOutput {
	return o
}

func (o NodeConfigStatusPtrOutput) ToNodeConfigStatusPtrOutputWithContext(ctx context.Context) NodeConfigStatusPtrOutput {
	return o
}

func (o NodeConfigStatusPtrOutput) Elem() NodeConfigStatusOutput {
	return o.ApplyT(func(v *NodeConfigStatus) NodeConfigStatus {
		if v != nil {
			return *v
		}
		var ret NodeConfigStatus
		return ret
	}).(NodeConfigStatusOutput)
}

// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
func (o NodeConfigStatusPtrOutput) Active() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v *NodeConfigStatus) *NodeConfigSource {
		if v == nil {
			return nil
		}
		return v.Active
	}).(NodeConfigSourcePtrOutput)
}

// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
func (o NodeConfigStatusPtrOutput) Assigned() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v *NodeConfigStatus) *NodeConfigSource {
		if v == nil {
			return nil
		}
		return v.Assigned
	}).(NodeConfigSourcePtrOutput)
}

// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
func (o NodeConfigStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
func (o NodeConfigStatusPtrOutput) LastKnownGood() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v *NodeConfigStatus) *NodeConfigSource {
		if v == nil {
			return nil
		}
		return v.LastKnownGood
	}).(NodeConfigSourcePtrOutput)
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatusPatch struct {
	// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
	Active *NodeConfigSourcePatch `pulumi:"active"`
	// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
	Assigned *NodeConfigSourcePatch `pulumi:"assigned"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error *string `pulumi:"error"`
	// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
	LastKnownGood *NodeConfigSourcePatch `pulumi:"lastKnownGood"`
}

// NodeConfigStatusPatchInput is an input type that accepts NodeConfigStatusPatchArgs and NodeConfigStatusPatchOutput values.
// You can construct a concrete instance of `NodeConfigStatusPatchInput` via:
//
//	NodeConfigStatusPatchArgs{...}
type NodeConfigStatusPatchInput interface {
	pulumi.Input

	ToNodeConfigStatusPatchOutput() NodeConfigStatusPatchOutput
	ToNodeConfigStatusPatchOutputWithContext(context.Context) NodeConfigStatusPatchOutput
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatusPatchArgs struct {
	// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
	Active NodeConfigSourcePatchPtrInput `pulumi:"active"`
	// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
	Assigned NodeConfigSourcePatchPtrInput `pulumi:"assigned"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
	LastKnownGood NodeConfigSourcePatchPtrInput `pulumi:"lastKnownGood"`
}

func (NodeConfigStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigStatusPatch)(nil)).Elem()
}

func (i NodeConfigStatusPatchArgs) ToNodeConfigStatusPatchOutput() NodeConfigStatusPatchOutput {
	return i.ToNodeConfigStatusPatchOutputWithContext(context.Background())
}

func (i NodeConfigStatusPatchArgs) ToNodeConfigStatusPatchOutputWithContext(ctx context.Context) NodeConfigStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusPatchOutput)
}

func (i NodeConfigStatusPatchArgs) ToNodeConfigStatusPatchPtrOutput() NodeConfigStatusPatchPtrOutput {
	return i.ToNodeConfigStatusPatchPtrOutputWithContext(context.Background())
}

func (i NodeConfigStatusPatchArgs) ToNodeConfigStatusPatchPtrOutputWithContext(ctx context.Context) NodeConfigStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusPatchOutput).ToNodeConfigStatusPatchPtrOutputWithContext(ctx)
}

// NodeConfigStatusPatchPtrInput is an input type that accepts NodeConfigStatusPatchArgs, NodeConfigStatusPatchPtr and NodeConfigStatusPatchPtrOutput values.
// You can construct a concrete instance of `NodeConfigStatusPatchPtrInput` via:
//
//	        NodeConfigStatusPatchArgs{...}
//
//	or:
//
//	        nil
type NodeConfigStatusPatchPtrInput interface {
	pulumi.Input

	ToNodeConfigStatusPatchPtrOutput() NodeConfigStatusPatchPtrOutput
	ToNodeConfigStatusPatchPtrOutputWithContext(context.Context) NodeConfigStatusPatchPtrOutput
}

type nodeConfigStatusPatchPtrType NodeConfigStatusPatchArgs

func NodeConfigStatusPatchPtr(v *NodeConfigStatusPatchArgs) NodeConfigStatusPatchPtrInput {
	return (*nodeConfigStatusPatchPtrType)(v)
}

func (*nodeConfigStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigStatusPatch)(nil)).Elem()
}

func (i *nodeConfigStatusPatchPtrType) ToNodeConfigStatusPatchPtrOutput() NodeConfigStatusPatchPtrOutput {
	return i.ToNodeConfigStatusPatchPtrOutputWithContext(context.Background())
}

func (i *nodeConfigStatusPatchPtrType) ToNodeConfigStatusPatchPtrOutputWithContext(ctx context.Context) NodeConfigStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigStatusPatchPtrOutput)
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type NodeConfigStatusPatchOutput struct{ *pulumi.OutputState }

func (NodeConfigStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigStatusPatch)(nil)).Elem()
}

func (o NodeConfigStatusPatchOutput) ToNodeConfigStatusPatchOutput() NodeConfigStatusPatchOutput {
	return o
}

func (o NodeConfigStatusPatchOutput) ToNodeConfigStatusPatchOutputWithContext(ctx context.Context) NodeConfigStatusPatchOutput {
	return o
}

func (o NodeConfigStatusPatchOutput) ToNodeConfigStatusPatchPtrOutput() NodeConfigStatusPatchPtrOutput {
	return o.ToNodeConfigStatusPatchPtrOutputWithContext(context.Background())
}

func (o NodeConfigStatusPatchOutput) ToNodeConfigStatusPatchPtrOutputWithContext(ctx context.Context) NodeConfigStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfigStatusPatch) *NodeConfigStatusPatch {
		return &v
	}).(NodeConfigStatusPatchPtrOutput)
}

// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
func (o NodeConfigStatusPatchOutput) Active() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v NodeConfigStatusPatch) *NodeConfigSourcePatch { return v.Active }).(NodeConfigSourcePatchPtrOutput)
}

// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
func (o NodeConfigStatusPatchOutput) Assigned() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v NodeConfigStatusPatch) *NodeConfigSourcePatch { return v.Assigned }).(NodeConfigSourcePatchPtrOutput)
}

// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
func (o NodeConfigStatusPatchOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfigStatusPatch) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
func (o NodeConfigStatusPatchOutput) LastKnownGood() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v NodeConfigStatusPatch) *NodeConfigSourcePatch { return v.LastKnownGood }).(NodeConfigSourcePatchPtrOutput)
}

type NodeConfigStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigStatusPatch)(nil)).Elem()
}

func (o NodeConfigStatusPatchPtrOutput) ToNodeConfigStatusPatchPtrOutput() NodeConfigStatusPatchPtrOutput {
	return o
}

func (o NodeConfigStatusPatchPtrOutput) ToNodeConfigStatusPatchPtrOutputWithContext(ctx context.Context) NodeConfigStatusPatchPtrOutput {
	return o
}

func (o NodeConfigStatusPatchPtrOutput) Elem() NodeConfigStatusPatchOutput {
	return o.ApplyT(func(v *NodeConfigStatusPatch) NodeConfigStatusPatch {
		if v != nil {
			return *v
		}
		var ret NodeConfigStatusPatch
		return ret
	}).(NodeConfigStatusPatchOutput)
}

// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
func (o NodeConfigStatusPatchPtrOutput) Active() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v *NodeConfigStatusPatch) *NodeConfigSourcePatch {
		if v == nil {
			return nil
		}
		return v.Active
	}).(NodeConfigSourcePatchPtrOutput)
}

// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
func (o NodeConfigStatusPatchPtrOutput) Assigned() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v *NodeConfigStatusPatch) *NodeConfigSourcePatch {
		if v == nil {
			return nil
		}
		return v.Assigned
	}).(NodeConfigSourcePatchPtrOutput)
}

// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
func (o NodeConfigStatusPatchPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
func (o NodeConfigStatusPatchPtrOutput) LastKnownGood() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v *NodeConfigStatusPatch) *NodeConfigSourcePatch {
		if v == nil {
			return nil
		}
		return v.LastKnownGood
	}).(NodeConfigSourcePatchPtrOutput)
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpoints struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint *DaemonEndpoint `pulumi:"kubeletEndpoint"`
}

// NodeDaemonEndpointsInput is an input type that accepts NodeDaemonEndpointsArgs and NodeDaemonEndpointsOutput values.
// You can construct a concrete instance of `NodeDaemonEndpointsInput` via:
//
//	NodeDaemonEndpointsArgs{...}
type NodeDaemonEndpointsInput interface {
	pulumi.Input

	ToNodeDaemonEndpointsOutput() NodeDaemonEndpointsOutput
	ToNodeDaemonEndpointsOutputWithContext(context.Context) NodeDaemonEndpointsOutput
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpointsArgs struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint DaemonEndpointPtrInput `pulumi:"kubeletEndpoint"`
}

func (NodeDaemonEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDaemonEndpoints)(nil)).Elem()
}

func (i NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsOutput() NodeDaemonEndpointsOutput {
	return i.ToNodeDaemonEndpointsOutputWithContext(context.Background())
}

func (i NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsOutputWithContext(ctx context.Context) NodeDaemonEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsOutput)
}

func (i NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsPtrOutput() NodeDaemonEndpointsPtrOutput {
	return i.ToNodeDaemonEndpointsPtrOutputWithContext(context.Background())
}

func (i NodeDaemonEndpointsArgs) ToNodeDaemonEndpointsPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsOutput).ToNodeDaemonEndpointsPtrOutputWithContext(ctx)
}

// NodeDaemonEndpointsPtrInput is an input type that accepts NodeDaemonEndpointsArgs, NodeDaemonEndpointsPtr and NodeDaemonEndpointsPtrOutput values.
// You can construct a concrete instance of `NodeDaemonEndpointsPtrInput` via:
//
//	        NodeDaemonEndpointsArgs{...}
//
//	or:
//
//	        nil
type NodeDaemonEndpointsPtrInput interface {
	pulumi.Input

	ToNodeDaemonEndpointsPtrOutput() NodeDaemonEndpointsPtrOutput
	ToNodeDaemonEndpointsPtrOutputWithContext(context.Context) NodeDaemonEndpointsPtrOutput
}

type nodeDaemonEndpointsPtrType NodeDaemonEndpointsArgs

func NodeDaemonEndpointsPtr(v *NodeDaemonEndpointsArgs) NodeDaemonEndpointsPtrInput {
	return (*nodeDaemonEndpointsPtrType)(v)
}

func (*nodeDaemonEndpointsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeDaemonEndpoints)(nil)).Elem()
}

func (i *nodeDaemonEndpointsPtrType) ToNodeDaemonEndpointsPtrOutput() NodeDaemonEndpointsPtrOutput {
	return i.ToNodeDaemonEndpointsPtrOutputWithContext(context.Background())
}

func (i *nodeDaemonEndpointsPtrType) ToNodeDaemonEndpointsPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsPtrOutput)
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpointsOutput struct{ *pulumi.OutputState }

func (NodeDaemonEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDaemonEndpoints)(nil)).Elem()
}

func (o NodeDaemonEndpointsOutput) ToNodeDaemonEndpointsOutput() NodeDaemonEndpointsOutput {
	return o
}

func (o NodeDaemonEndpointsOutput) ToNodeDaemonEndpointsOutputWithContext(ctx context.Context) NodeDaemonEndpointsOutput {
	return o
}

func (o NodeDaemonEndpointsOutput) ToNodeDaemonEndpointsPtrOutput() NodeDaemonEndpointsPtrOutput {
	return o.ToNodeDaemonEndpointsPtrOutputWithContext(context.Background())
}

func (o NodeDaemonEndpointsOutput) ToNodeDaemonEndpointsPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeDaemonEndpoints) *NodeDaemonEndpoints {
		return &v
	}).(NodeDaemonEndpointsPtrOutput)
}

// Endpoint on which Kubelet is listening.
func (o NodeDaemonEndpointsOutput) KubeletEndpoint() DaemonEndpointPtrOutput {
	return o.ApplyT(func(v NodeDaemonEndpoints) *DaemonEndpoint { return v.KubeletEndpoint }).(DaemonEndpointPtrOutput)
}

type NodeDaemonEndpointsPtrOutput struct{ *pulumi.OutputState }

func (NodeDaemonEndpointsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeDaemonEndpoints)(nil)).Elem()
}

func (o NodeDaemonEndpointsPtrOutput) ToNodeDaemonEndpointsPtrOutput() NodeDaemonEndpointsPtrOutput {
	return o
}

func (o NodeDaemonEndpointsPtrOutput) ToNodeDaemonEndpointsPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPtrOutput {
	return o
}

func (o NodeDaemonEndpointsPtrOutput) Elem() NodeDaemonEndpointsOutput {
	return o.ApplyT(func(v *NodeDaemonEndpoints) NodeDaemonEndpoints {
		if v != nil {
			return *v
		}
		var ret NodeDaemonEndpoints
		return ret
	}).(NodeDaemonEndpointsOutput)
}

// Endpoint on which Kubelet is listening.
func (o NodeDaemonEndpointsPtrOutput) KubeletEndpoint() DaemonEndpointPtrOutput {
	return o.ApplyT(func(v *NodeDaemonEndpoints) *DaemonEndpoint {
		if v == nil {
			return nil
		}
		return v.KubeletEndpoint
	}).(DaemonEndpointPtrOutput)
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpointsPatch struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint *DaemonEndpointPatch `pulumi:"kubeletEndpoint"`
}

// NodeDaemonEndpointsPatchInput is an input type that accepts NodeDaemonEndpointsPatchArgs and NodeDaemonEndpointsPatchOutput values.
// You can construct a concrete instance of `NodeDaemonEndpointsPatchInput` via:
//
//	NodeDaemonEndpointsPatchArgs{...}
type NodeDaemonEndpointsPatchInput interface {
	pulumi.Input

	ToNodeDaemonEndpointsPatchOutput() NodeDaemonEndpointsPatchOutput
	ToNodeDaemonEndpointsPatchOutputWithContext(context.Context) NodeDaemonEndpointsPatchOutput
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpointsPatchArgs struct {
	// Endpoint on which Kubelet is listening.
	KubeletEndpoint DaemonEndpointPatchPtrInput `pulumi:"kubeletEndpoint"`
}

func (NodeDaemonEndpointsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDaemonEndpointsPatch)(nil)).Elem()
}

func (i NodeDaemonEndpointsPatchArgs) ToNodeDaemonEndpointsPatchOutput() NodeDaemonEndpointsPatchOutput {
	return i.ToNodeDaemonEndpointsPatchOutputWithContext(context.Background())
}

func (i NodeDaemonEndpointsPatchArgs) ToNodeDaemonEndpointsPatchOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsPatchOutput)
}

func (i NodeDaemonEndpointsPatchArgs) ToNodeDaemonEndpointsPatchPtrOutput() NodeDaemonEndpointsPatchPtrOutput {
	return i.ToNodeDaemonEndpointsPatchPtrOutputWithContext(context.Background())
}

func (i NodeDaemonEndpointsPatchArgs) ToNodeDaemonEndpointsPatchPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsPatchOutput).ToNodeDaemonEndpointsPatchPtrOutputWithContext(ctx)
}

// NodeDaemonEndpointsPatchPtrInput is an input type that accepts NodeDaemonEndpointsPatchArgs, NodeDaemonEndpointsPatchPtr and NodeDaemonEndpointsPatchPtrOutput values.
// You can construct a concrete instance of `NodeDaemonEndpointsPatchPtrInput` via:
//
//	        NodeDaemonEndpointsPatchArgs{...}
//
//	or:
//
//	        nil
type NodeDaemonEndpointsPatchPtrInput interface {
	pulumi.Input

	ToNodeDaemonEndpointsPatchPtrOutput() NodeDaemonEndpointsPatchPtrOutput
	ToNodeDaemonEndpointsPatchPtrOutputWithContext(context.Context) NodeDaemonEndpointsPatchPtrOutput
}

type nodeDaemonEndpointsPatchPtrType NodeDaemonEndpointsPatchArgs

func NodeDaemonEndpointsPatchPtr(v *NodeDaemonEndpointsPatchArgs) NodeDaemonEndpointsPatchPtrInput {
	return (*nodeDaemonEndpointsPatchPtrType)(v)
}

func (*nodeDaemonEndpointsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeDaemonEndpointsPatch)(nil)).Elem()
}

func (i *nodeDaemonEndpointsPatchPtrType) ToNodeDaemonEndpointsPatchPtrOutput() NodeDaemonEndpointsPatchPtrOutput {
	return i.ToNodeDaemonEndpointsPatchPtrOutputWithContext(context.Background())
}

func (i *nodeDaemonEndpointsPatchPtrType) ToNodeDaemonEndpointsPatchPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDaemonEndpointsPatchPtrOutput)
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type NodeDaemonEndpointsPatchOutput struct{ *pulumi.OutputState }

func (NodeDaemonEndpointsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDaemonEndpointsPatch)(nil)).Elem()
}

func (o NodeDaemonEndpointsPatchOutput) ToNodeDaemonEndpointsPatchOutput() NodeDaemonEndpointsPatchOutput {
	return o
}

func (o NodeDaemonEndpointsPatchOutput) ToNodeDaemonEndpointsPatchOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchOutput {
	return o
}

func (o NodeDaemonEndpointsPatchOutput) ToNodeDaemonEndpointsPatchPtrOutput() NodeDaemonEndpointsPatchPtrOutput {
	return o.ToNodeDaemonEndpointsPatchPtrOutputWithContext(context.Background())
}

func (o NodeDaemonEndpointsPatchOutput) ToNodeDaemonEndpointsPatchPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeDaemonEndpointsPatch) *NodeDaemonEndpointsPatch {
		return &v
	}).(NodeDaemonEndpointsPatchPtrOutput)
}

// Endpoint on which Kubelet is listening.
func (o NodeDaemonEndpointsPatchOutput) KubeletEndpoint() DaemonEndpointPatchPtrOutput {
	return o.ApplyT(func(v NodeDaemonEndpointsPatch) *DaemonEndpointPatch { return v.KubeletEndpoint }).(DaemonEndpointPatchPtrOutput)
}

type NodeDaemonEndpointsPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeDaemonEndpointsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeDaemonEndpointsPatch)(nil)).Elem()
}

func (o NodeDaemonEndpointsPatchPtrOutput) ToNodeDaemonEndpointsPatchPtrOutput() NodeDaemonEndpointsPatchPtrOutput {
	return o
}

func (o NodeDaemonEndpointsPatchPtrOutput) ToNodeDaemonEndpointsPatchPtrOutputWithContext(ctx context.Context) NodeDaemonEndpointsPatchPtrOutput {
	return o
}

func (o NodeDaemonEndpointsPatchPtrOutput) Elem() NodeDaemonEndpointsPatchOutput {
	return o.ApplyT(func(v *NodeDaemonEndpointsPatch) NodeDaemonEndpointsPatch {
		if v != nil {
			return *v
		}
		var ret NodeDaemonEndpointsPatch
		return ret
	}).(NodeDaemonEndpointsPatchOutput)
}

// Endpoint on which Kubelet is listening.
func (o NodeDaemonEndpointsPatchPtrOutput) KubeletEndpoint() DaemonEndpointPatchPtrOutput {
	return o.ApplyT(func(v *NodeDaemonEndpointsPatch) *DaemonEndpointPatch {
		if v == nil {
			return nil
		}
		return v.KubeletEndpoint
	}).(DaemonEndpointPatchPtrOutput)
}

// NodeList is the whole list of all Nodes which have been registered with master.
type NodeListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of nodes
	Items []NodeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// NodeListTypeInput is an input type that accepts NodeListTypeArgs and NodeListTypeOutput values.
// You can construct a concrete instance of `NodeListTypeInput` via:
//
//	NodeListTypeArgs{...}
type NodeListTypeInput interface {
	pulumi.Input

	ToNodeListTypeOutput() NodeListTypeOutput
	ToNodeListTypeOutputWithContext(context.Context) NodeListTypeOutput
}

// NodeList is the whole list of all Nodes which have been registered with master.
type NodeListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of nodes
	Items NodeTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (NodeListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeListType)(nil)).Elem()
}

func (i NodeListTypeArgs) ToNodeListTypeOutput() NodeListTypeOutput {
	return i.ToNodeListTypeOutputWithContext(context.Background())
}

func (i NodeListTypeArgs) ToNodeListTypeOutputWithContext(ctx context.Context) NodeListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeListTypeOutput)
}

// NodeList is the whole list of all Nodes which have been registered with master.
type NodeListTypeOutput struct{ *pulumi.OutputState }

func (NodeListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeListType)(nil)).Elem()
}

func (o NodeListTypeOutput) ToNodeListTypeOutput() NodeListTypeOutput {
	return o
}

func (o NodeListTypeOutput) ToNodeListTypeOutputWithContext(ctx context.Context) NodeListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NodeListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of nodes
func (o NodeListTypeOutput) Items() NodeTypeArrayOutput {
	return o.ApplyT(func(v NodeListType) []NodeType { return v.Items }).(NodeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NodeListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NodeListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v NodeListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *NodeSpecPatch `pulumi:"spec"`
	// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *NodeStatusPatch `pulumi:"status"`
}

// NodePatchTypeInput is an input type that accepts NodePatchTypeArgs and NodePatchTypeOutput values.
// You can construct a concrete instance of `NodePatchTypeInput` via:
//
//	NodePatchTypeArgs{...}
type NodePatchTypeInput interface {
	pulumi.Input

	ToNodePatchTypeOutput() NodePatchTypeOutput
	ToNodePatchTypeOutputWithContext(context.Context) NodePatchTypeOutput
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec NodeSpecPatchPtrInput `pulumi:"spec"`
	// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status NodeStatusPatchPtrInput `pulumi:"status"`
}

func (NodePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePatchType)(nil)).Elem()
}

func (i NodePatchTypeArgs) ToNodePatchTypeOutput() NodePatchTypeOutput {
	return i.ToNodePatchTypeOutputWithContext(context.Background())
}

func (i NodePatchTypeArgs) ToNodePatchTypeOutputWithContext(ctx context.Context) NodePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePatchTypeOutput)
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type NodePatchTypeOutput struct{ *pulumi.OutputState }

func (NodePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePatchType)(nil)).Elem()
}

func (o NodePatchTypeOutput) ToNodePatchTypeOutput() NodePatchTypeOutput {
	return o
}

func (o NodePatchTypeOutput) ToNodePatchTypeOutputWithContext(ctx context.Context) NodePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NodePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NodePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NodePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v NodePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NodePatchTypeOutput) Spec() NodeSpecPatchPtrOutput {
	return o.ApplyT(func(v NodePatchType) *NodeSpecPatch { return v.Spec }).(NodeSpecPatchPtrOutput)
}

// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o NodePatchTypeOutput) Status() NodeStatusPatchPtrOutput {
	return o.ApplyT(func(v NodePatchType) *NodeStatusPatch { return v.Status }).(NodeStatusPatchPtrOutput)
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []NodeSelectorTerm `pulumi:"nodeSelectorTerms"`
}

// NodeSelectorInput is an input type that accepts NodeSelectorArgs and NodeSelectorOutput values.
// You can construct a concrete instance of `NodeSelectorInput` via:
//
//	NodeSelectorArgs{...}
type NodeSelectorInput interface {
	pulumi.Input

	ToNodeSelectorOutput() NodeSelectorOutput
	ToNodeSelectorOutputWithContext(context.Context) NodeSelectorOutput
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelectorArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms NodeSelectorTermArrayInput `pulumi:"nodeSelectorTerms"`
}

func (NodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelector)(nil)).Elem()
}

func (i NodeSelectorArgs) ToNodeSelectorOutput() NodeSelectorOutput {
	return i.ToNodeSelectorOutputWithContext(context.Background())
}

func (i NodeSelectorArgs) ToNodeSelectorOutputWithContext(ctx context.Context) NodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorOutput)
}

func (i NodeSelectorArgs) ToNodeSelectorPtrOutput() NodeSelectorPtrOutput {
	return i.ToNodeSelectorPtrOutputWithContext(context.Background())
}

func (i NodeSelectorArgs) ToNodeSelectorPtrOutputWithContext(ctx context.Context) NodeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorOutput).ToNodeSelectorPtrOutputWithContext(ctx)
}

// NodeSelectorPtrInput is an input type that accepts NodeSelectorArgs, NodeSelectorPtr and NodeSelectorPtrOutput values.
// You can construct a concrete instance of `NodeSelectorPtrInput` via:
//
//	        NodeSelectorArgs{...}
//
//	or:
//
//	        nil
type NodeSelectorPtrInput interface {
	pulumi.Input

	ToNodeSelectorPtrOutput() NodeSelectorPtrOutput
	ToNodeSelectorPtrOutputWithContext(context.Context) NodeSelectorPtrOutput
}

type nodeSelectorPtrType NodeSelectorArgs

func NodeSelectorPtr(v *NodeSelectorArgs) NodeSelectorPtrInput {
	return (*nodeSelectorPtrType)(v)
}

func (*nodeSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelector)(nil)).Elem()
}

func (i *nodeSelectorPtrType) ToNodeSelectorPtrOutput() NodeSelectorPtrOutput {
	return i.ToNodeSelectorPtrOutputWithContext(context.Background())
}

func (i *nodeSelectorPtrType) ToNodeSelectorPtrOutputWithContext(ctx context.Context) NodeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorPtrOutput)
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelectorOutput struct{ *pulumi.OutputState }

func (NodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelector)(nil)).Elem()
}

func (o NodeSelectorOutput) ToNodeSelectorOutput() NodeSelectorOutput {
	return o
}

func (o NodeSelectorOutput) ToNodeSelectorOutputWithContext(ctx context.Context) NodeSelectorOutput {
	return o
}

func (o NodeSelectorOutput) ToNodeSelectorPtrOutput() NodeSelectorPtrOutput {
	return o.ToNodeSelectorPtrOutputWithContext(context.Background())
}

func (o NodeSelectorOutput) ToNodeSelectorPtrOutputWithContext(ctx context.Context) NodeSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSelector) *NodeSelector {
		return &v
	}).(NodeSelectorPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o NodeSelectorOutput) NodeSelectorTerms() NodeSelectorTermArrayOutput {
	return o.ApplyT(func(v NodeSelector) []NodeSelectorTerm { return v.NodeSelectorTerms }).(NodeSelectorTermArrayOutput)
}

type NodeSelectorPtrOutput struct{ *pulumi.OutputState }

func (NodeSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelector)(nil)).Elem()
}

func (o NodeSelectorPtrOutput) ToNodeSelectorPtrOutput() NodeSelectorPtrOutput {
	return o
}

func (o NodeSelectorPtrOutput) ToNodeSelectorPtrOutputWithContext(ctx context.Context) NodeSelectorPtrOutput {
	return o
}

func (o NodeSelectorPtrOutput) Elem() NodeSelectorOutput {
	return o.ApplyT(func(v *NodeSelector) NodeSelector {
		if v != nil {
			return *v
		}
		var ret NodeSelector
		return ret
	}).(NodeSelectorOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o NodeSelectorPtrOutput) NodeSelectorTerms() NodeSelectorTermArrayOutput {
	return o.ApplyT(func(v *NodeSelector) []NodeSelectorTerm {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(NodeSelectorTermArrayOutput)
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelectorPatch struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []NodeSelectorTermPatch `pulumi:"nodeSelectorTerms"`
}

// NodeSelectorPatchInput is an input type that accepts NodeSelectorPatchArgs and NodeSelectorPatchOutput values.
// You can construct a concrete instance of `NodeSelectorPatchInput` via:
//
//	NodeSelectorPatchArgs{...}
type NodeSelectorPatchInput interface {
	pulumi.Input

	ToNodeSelectorPatchOutput() NodeSelectorPatchOutput
	ToNodeSelectorPatchOutputWithContext(context.Context) NodeSelectorPatchOutput
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelectorPatchArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms NodeSelectorTermPatchArrayInput `pulumi:"nodeSelectorTerms"`
}

func (NodeSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorPatch)(nil)).Elem()
}

func (i NodeSelectorPatchArgs) ToNodeSelectorPatchOutput() NodeSelectorPatchOutput {
	return i.ToNodeSelectorPatchOutputWithContext(context.Background())
}

func (i NodeSelectorPatchArgs) ToNodeSelectorPatchOutputWithContext(ctx context.Context) NodeSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorPatchOutput)
}

func (i NodeSelectorPatchArgs) ToNodeSelectorPatchPtrOutput() NodeSelectorPatchPtrOutput {
	return i.ToNodeSelectorPatchPtrOutputWithContext(context.Background())
}

func (i NodeSelectorPatchArgs) ToNodeSelectorPatchPtrOutputWithContext(ctx context.Context) NodeSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorPatchOutput).ToNodeSelectorPatchPtrOutputWithContext(ctx)
}

// NodeSelectorPatchPtrInput is an input type that accepts NodeSelectorPatchArgs, NodeSelectorPatchPtr and NodeSelectorPatchPtrOutput values.
// You can construct a concrete instance of `NodeSelectorPatchPtrInput` via:
//
//	        NodeSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type NodeSelectorPatchPtrInput interface {
	pulumi.Input

	ToNodeSelectorPatchPtrOutput() NodeSelectorPatchPtrOutput
	ToNodeSelectorPatchPtrOutputWithContext(context.Context) NodeSelectorPatchPtrOutput
}

type nodeSelectorPatchPtrType NodeSelectorPatchArgs

func NodeSelectorPatchPtr(v *NodeSelectorPatchArgs) NodeSelectorPatchPtrInput {
	return (*nodeSelectorPatchPtrType)(v)
}

func (*nodeSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelectorPatch)(nil)).Elem()
}

func (i *nodeSelectorPatchPtrType) ToNodeSelectorPatchPtrOutput() NodeSelectorPatchPtrOutput {
	return i.ToNodeSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *nodeSelectorPatchPtrType) ToNodeSelectorPatchPtrOutputWithContext(ctx context.Context) NodeSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorPatchPtrOutput)
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelectorPatchOutput struct{ *pulumi.OutputState }

func (NodeSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorPatch)(nil)).Elem()
}

func (o NodeSelectorPatchOutput) ToNodeSelectorPatchOutput() NodeSelectorPatchOutput {
	return o
}

func (o NodeSelectorPatchOutput) ToNodeSelectorPatchOutputWithContext(ctx context.Context) NodeSelectorPatchOutput {
	return o
}

func (o NodeSelectorPatchOutput) ToNodeSelectorPatchPtrOutput() NodeSelectorPatchPtrOutput {
	return o.ToNodeSelectorPatchPtrOutputWithContext(context.Background())
}

func (o NodeSelectorPatchOutput) ToNodeSelectorPatchPtrOutputWithContext(ctx context.Context) NodeSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSelectorPatch) *NodeSelectorPatch {
		return &v
	}).(NodeSelectorPatchPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o NodeSelectorPatchOutput) NodeSelectorTerms() NodeSelectorTermPatchArrayOutput {
	return o.ApplyT(func(v NodeSelectorPatch) []NodeSelectorTermPatch { return v.NodeSelectorTerms }).(NodeSelectorTermPatchArrayOutput)
}

type NodeSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelectorPatch)(nil)).Elem()
}

func (o NodeSelectorPatchPtrOutput) ToNodeSelectorPatchPtrOutput() NodeSelectorPatchPtrOutput {
	return o
}

func (o NodeSelectorPatchPtrOutput) ToNodeSelectorPatchPtrOutputWithContext(ctx context.Context) NodeSelectorPatchPtrOutput {
	return o
}

func (o NodeSelectorPatchPtrOutput) Elem() NodeSelectorPatchOutput {
	return o.ApplyT(func(v *NodeSelectorPatch) NodeSelectorPatch {
		if v != nil {
			return *v
		}
		var ret NodeSelectorPatch
		return ret
	}).(NodeSelectorPatchOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o NodeSelectorPatchPtrOutput) NodeSelectorTerms() NodeSelectorTermPatchArrayOutput {
	return o.ApplyT(func(v *NodeSelectorPatch) []NodeSelectorTermPatch {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(NodeSelectorTermPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirement struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// NodeSelectorRequirementInput is an input type that accepts NodeSelectorRequirementArgs and NodeSelectorRequirementOutput values.
// You can construct a concrete instance of `NodeSelectorRequirementInput` via:
//
//	NodeSelectorRequirementArgs{...}
type NodeSelectorRequirementInput interface {
	pulumi.Input

	ToNodeSelectorRequirementOutput() NodeSelectorRequirementOutput
	ToNodeSelectorRequirementOutputWithContext(context.Context) NodeSelectorRequirementOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirementArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (NodeSelectorRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorRequirement)(nil)).Elem()
}

func (i NodeSelectorRequirementArgs) ToNodeSelectorRequirementOutput() NodeSelectorRequirementOutput {
	return i.ToNodeSelectorRequirementOutputWithContext(context.Background())
}

func (i NodeSelectorRequirementArgs) ToNodeSelectorRequirementOutputWithContext(ctx context.Context) NodeSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorRequirementOutput)
}

// NodeSelectorRequirementArrayInput is an input type that accepts NodeSelectorRequirementArray and NodeSelectorRequirementArrayOutput values.
// You can construct a concrete instance of `NodeSelectorRequirementArrayInput` via:
//
//	NodeSelectorRequirementArray{ NodeSelectorRequirementArgs{...} }
type NodeSelectorRequirementArrayInput interface {
	pulumi.Input

	ToNodeSelectorRequirementArrayOutput() NodeSelectorRequirementArrayOutput
	ToNodeSelectorRequirementArrayOutputWithContext(context.Context) NodeSelectorRequirementArrayOutput
}

type NodeSelectorRequirementArray []NodeSelectorRequirementInput

func (NodeSelectorRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorRequirement)(nil)).Elem()
}

func (i NodeSelectorRequirementArray) ToNodeSelectorRequirementArrayOutput() NodeSelectorRequirementArrayOutput {
	return i.ToNodeSelectorRequirementArrayOutputWithContext(context.Background())
}

func (i NodeSelectorRequirementArray) ToNodeSelectorRequirementArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorRequirementArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirementOutput struct{ *pulumi.OutputState }

func (NodeSelectorRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorRequirement)(nil)).Elem()
}

func (o NodeSelectorRequirementOutput) ToNodeSelectorRequirementOutput() NodeSelectorRequirementOutput {
	return o
}

func (o NodeSelectorRequirementOutput) ToNodeSelectorRequirementOutputWithContext(ctx context.Context) NodeSelectorRequirementOutput {
	return o
}

// The label key that the selector applies to.
func (o NodeSelectorRequirementOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSelectorRequirement) string { return v.Key }).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o NodeSelectorRequirementOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSelectorRequirement) string { return v.Operator }).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o NodeSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeSelectorRequirement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type NodeSelectorRequirementArrayOutput struct{ *pulumi.OutputState }

func (NodeSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorRequirement)(nil)).Elem()
}

func (o NodeSelectorRequirementArrayOutput) ToNodeSelectorRequirementArrayOutput() NodeSelectorRequirementArrayOutput {
	return o
}

func (o NodeSelectorRequirementArrayOutput) ToNodeSelectorRequirementArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementArrayOutput {
	return o
}

func (o NodeSelectorRequirementArrayOutput) Index(i pulumi.IntInput) NodeSelectorRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSelectorRequirement {
		return vs[0].([]NodeSelectorRequirement)[vs[1].(int)]
	}).(NodeSelectorRequirementOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirementPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// NodeSelectorRequirementPatchInput is an input type that accepts NodeSelectorRequirementPatchArgs and NodeSelectorRequirementPatchOutput values.
// You can construct a concrete instance of `NodeSelectorRequirementPatchInput` via:
//
//	NodeSelectorRequirementPatchArgs{...}
type NodeSelectorRequirementPatchInput interface {
	pulumi.Input

	ToNodeSelectorRequirementPatchOutput() NodeSelectorRequirementPatchOutput
	ToNodeSelectorRequirementPatchOutputWithContext(context.Context) NodeSelectorRequirementPatchOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirementPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (NodeSelectorRequirementPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorRequirementPatch)(nil)).Elem()
}

func (i NodeSelectorRequirementPatchArgs) ToNodeSelectorRequirementPatchOutput() NodeSelectorRequirementPatchOutput {
	return i.ToNodeSelectorRequirementPatchOutputWithContext(context.Background())
}

func (i NodeSelectorRequirementPatchArgs) ToNodeSelectorRequirementPatchOutputWithContext(ctx context.Context) NodeSelectorRequirementPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorRequirementPatchOutput)
}

// NodeSelectorRequirementPatchArrayInput is an input type that accepts NodeSelectorRequirementPatchArray and NodeSelectorRequirementPatchArrayOutput values.
// You can construct a concrete instance of `NodeSelectorRequirementPatchArrayInput` via:
//
//	NodeSelectorRequirementPatchArray{ NodeSelectorRequirementPatchArgs{...} }
type NodeSelectorRequirementPatchArrayInput interface {
	pulumi.Input

	ToNodeSelectorRequirementPatchArrayOutput() NodeSelectorRequirementPatchArrayOutput
	ToNodeSelectorRequirementPatchArrayOutputWithContext(context.Context) NodeSelectorRequirementPatchArrayOutput
}

type NodeSelectorRequirementPatchArray []NodeSelectorRequirementPatchInput

func (NodeSelectorRequirementPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorRequirementPatch)(nil)).Elem()
}

func (i NodeSelectorRequirementPatchArray) ToNodeSelectorRequirementPatchArrayOutput() NodeSelectorRequirementPatchArrayOutput {
	return i.ToNodeSelectorRequirementPatchArrayOutputWithContext(context.Background())
}

func (i NodeSelectorRequirementPatchArray) ToNodeSelectorRequirementPatchArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorRequirementPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NodeSelectorRequirementPatchOutput struct{ *pulumi.OutputState }

func (NodeSelectorRequirementPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorRequirementPatch)(nil)).Elem()
}

func (o NodeSelectorRequirementPatchOutput) ToNodeSelectorRequirementPatchOutput() NodeSelectorRequirementPatchOutput {
	return o
}

func (o NodeSelectorRequirementPatchOutput) ToNodeSelectorRequirementPatchOutputWithContext(ctx context.Context) NodeSelectorRequirementPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o NodeSelectorRequirementPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSelectorRequirementPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o NodeSelectorRequirementPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSelectorRequirementPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o NodeSelectorRequirementPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeSelectorRequirementPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type NodeSelectorRequirementPatchArrayOutput struct{ *pulumi.OutputState }

func (NodeSelectorRequirementPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorRequirementPatch)(nil)).Elem()
}

func (o NodeSelectorRequirementPatchArrayOutput) ToNodeSelectorRequirementPatchArrayOutput() NodeSelectorRequirementPatchArrayOutput {
	return o
}

func (o NodeSelectorRequirementPatchArrayOutput) ToNodeSelectorRequirementPatchArrayOutputWithContext(ctx context.Context) NodeSelectorRequirementPatchArrayOutput {
	return o
}

func (o NodeSelectorRequirementPatchArrayOutput) Index(i pulumi.IntInput) NodeSelectorRequirementPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSelectorRequirementPatch {
		return vs[0].([]NodeSelectorRequirementPatch)[vs[1].(int)]
	}).(NodeSelectorRequirementPatchOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []NodeSelectorRequirement `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []NodeSelectorRequirement `pulumi:"matchFields"`
}

// NodeSelectorTermInput is an input type that accepts NodeSelectorTermArgs and NodeSelectorTermOutput values.
// You can construct a concrete instance of `NodeSelectorTermInput` via:
//
//	NodeSelectorTermArgs{...}
type NodeSelectorTermInput interface {
	pulumi.Input

	ToNodeSelectorTermOutput() NodeSelectorTermOutput
	ToNodeSelectorTermOutputWithContext(context.Context) NodeSelectorTermOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTermArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions NodeSelectorRequirementArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields NodeSelectorRequirementArrayInput `pulumi:"matchFields"`
}

func (NodeSelectorTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorTerm)(nil)).Elem()
}

func (i NodeSelectorTermArgs) ToNodeSelectorTermOutput() NodeSelectorTermOutput {
	return i.ToNodeSelectorTermOutputWithContext(context.Background())
}

func (i NodeSelectorTermArgs) ToNodeSelectorTermOutputWithContext(ctx context.Context) NodeSelectorTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermOutput)
}

// NodeSelectorTermArrayInput is an input type that accepts NodeSelectorTermArray and NodeSelectorTermArrayOutput values.
// You can construct a concrete instance of `NodeSelectorTermArrayInput` via:
//
//	NodeSelectorTermArray{ NodeSelectorTermArgs{...} }
type NodeSelectorTermArrayInput interface {
	pulumi.Input

	ToNodeSelectorTermArrayOutput() NodeSelectorTermArrayOutput
	ToNodeSelectorTermArrayOutputWithContext(context.Context) NodeSelectorTermArrayOutput
}

type NodeSelectorTermArray []NodeSelectorTermInput

func (NodeSelectorTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorTerm)(nil)).Elem()
}

func (i NodeSelectorTermArray) ToNodeSelectorTermArrayOutput() NodeSelectorTermArrayOutput {
	return i.ToNodeSelectorTermArrayOutputWithContext(context.Background())
}

func (i NodeSelectorTermArray) ToNodeSelectorTermArrayOutputWithContext(ctx context.Context) NodeSelectorTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTermOutput struct{ *pulumi.OutputState }

func (NodeSelectorTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorTerm)(nil)).Elem()
}

func (o NodeSelectorTermOutput) ToNodeSelectorTermOutput() NodeSelectorTermOutput {
	return o
}

func (o NodeSelectorTermOutput) ToNodeSelectorTermOutputWithContext(ctx context.Context) NodeSelectorTermOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o NodeSelectorTermOutput) MatchExpressions() NodeSelectorRequirementArrayOutput {
	return o.ApplyT(func(v NodeSelectorTerm) []NodeSelectorRequirement { return v.MatchExpressions }).(NodeSelectorRequirementArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o NodeSelectorTermOutput) MatchFields() NodeSelectorRequirementArrayOutput {
	return o.ApplyT(func(v NodeSelectorTerm) []NodeSelectorRequirement { return v.MatchFields }).(NodeSelectorRequirementArrayOutput)
}

type NodeSelectorTermArrayOutput struct{ *pulumi.OutputState }

func (NodeSelectorTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorTerm)(nil)).Elem()
}

func (o NodeSelectorTermArrayOutput) ToNodeSelectorTermArrayOutput() NodeSelectorTermArrayOutput {
	return o
}

func (o NodeSelectorTermArrayOutput) ToNodeSelectorTermArrayOutputWithContext(ctx context.Context) NodeSelectorTermArrayOutput {
	return o
}

func (o NodeSelectorTermArrayOutput) Index(i pulumi.IntInput) NodeSelectorTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSelectorTerm {
		return vs[0].([]NodeSelectorTerm)[vs[1].(int)]
	}).(NodeSelectorTermOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTermPatch struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []NodeSelectorRequirementPatch `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []NodeSelectorRequirementPatch `pulumi:"matchFields"`
}

// NodeSelectorTermPatchInput is an input type that accepts NodeSelectorTermPatchArgs and NodeSelectorTermPatchOutput values.
// You can construct a concrete instance of `NodeSelectorTermPatchInput` via:
//
//	NodeSelectorTermPatchArgs{...}
type NodeSelectorTermPatchInput interface {
	pulumi.Input

	ToNodeSelectorTermPatchOutput() NodeSelectorTermPatchOutput
	ToNodeSelectorTermPatchOutputWithContext(context.Context) NodeSelectorTermPatchOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTermPatchArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions NodeSelectorRequirementPatchArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields NodeSelectorRequirementPatchArrayInput `pulumi:"matchFields"`
}

func (NodeSelectorTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorTermPatch)(nil)).Elem()
}

func (i NodeSelectorTermPatchArgs) ToNodeSelectorTermPatchOutput() NodeSelectorTermPatchOutput {
	return i.ToNodeSelectorTermPatchOutputWithContext(context.Background())
}

func (i NodeSelectorTermPatchArgs) ToNodeSelectorTermPatchOutputWithContext(ctx context.Context) NodeSelectorTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermPatchOutput)
}

func (i NodeSelectorTermPatchArgs) ToNodeSelectorTermPatchPtrOutput() NodeSelectorTermPatchPtrOutput {
	return i.ToNodeSelectorTermPatchPtrOutputWithContext(context.Background())
}

func (i NodeSelectorTermPatchArgs) ToNodeSelectorTermPatchPtrOutputWithContext(ctx context.Context) NodeSelectorTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermPatchOutput).ToNodeSelectorTermPatchPtrOutputWithContext(ctx)
}

// NodeSelectorTermPatchPtrInput is an input type that accepts NodeSelectorTermPatchArgs, NodeSelectorTermPatchPtr and NodeSelectorTermPatchPtrOutput values.
// You can construct a concrete instance of `NodeSelectorTermPatchPtrInput` via:
//
//	        NodeSelectorTermPatchArgs{...}
//
//	or:
//
//	        nil
type NodeSelectorTermPatchPtrInput interface {
	pulumi.Input

	ToNodeSelectorTermPatchPtrOutput() NodeSelectorTermPatchPtrOutput
	ToNodeSelectorTermPatchPtrOutputWithContext(context.Context) NodeSelectorTermPatchPtrOutput
}

type nodeSelectorTermPatchPtrType NodeSelectorTermPatchArgs

func NodeSelectorTermPatchPtr(v *NodeSelectorTermPatchArgs) NodeSelectorTermPatchPtrInput {
	return (*nodeSelectorTermPatchPtrType)(v)
}

func (*nodeSelectorTermPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelectorTermPatch)(nil)).Elem()
}

func (i *nodeSelectorTermPatchPtrType) ToNodeSelectorTermPatchPtrOutput() NodeSelectorTermPatchPtrOutput {
	return i.ToNodeSelectorTermPatchPtrOutputWithContext(context.Background())
}

func (i *nodeSelectorTermPatchPtrType) ToNodeSelectorTermPatchPtrOutputWithContext(ctx context.Context) NodeSelectorTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermPatchPtrOutput)
}

// NodeSelectorTermPatchArrayInput is an input type that accepts NodeSelectorTermPatchArray and NodeSelectorTermPatchArrayOutput values.
// You can construct a concrete instance of `NodeSelectorTermPatchArrayInput` via:
//
//	NodeSelectorTermPatchArray{ NodeSelectorTermPatchArgs{...} }
type NodeSelectorTermPatchArrayInput interface {
	pulumi.Input

	ToNodeSelectorTermPatchArrayOutput() NodeSelectorTermPatchArrayOutput
	ToNodeSelectorTermPatchArrayOutputWithContext(context.Context) NodeSelectorTermPatchArrayOutput
}

type NodeSelectorTermPatchArray []NodeSelectorTermPatchInput

func (NodeSelectorTermPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorTermPatch)(nil)).Elem()
}

func (i NodeSelectorTermPatchArray) ToNodeSelectorTermPatchArrayOutput() NodeSelectorTermPatchArrayOutput {
	return i.ToNodeSelectorTermPatchArrayOutputWithContext(context.Background())
}

func (i NodeSelectorTermPatchArray) ToNodeSelectorTermPatchArrayOutputWithContext(ctx context.Context) NodeSelectorTermPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSelectorTermPatchArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTermPatchOutput struct{ *pulumi.OutputState }

func (NodeSelectorTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSelectorTermPatch)(nil)).Elem()
}

func (o NodeSelectorTermPatchOutput) ToNodeSelectorTermPatchOutput() NodeSelectorTermPatchOutput {
	return o
}

func (o NodeSelectorTermPatchOutput) ToNodeSelectorTermPatchOutputWithContext(ctx context.Context) NodeSelectorTermPatchOutput {
	return o
}

func (o NodeSelectorTermPatchOutput) ToNodeSelectorTermPatchPtrOutput() NodeSelectorTermPatchPtrOutput {
	return o.ToNodeSelectorTermPatchPtrOutputWithContext(context.Background())
}

func (o NodeSelectorTermPatchOutput) ToNodeSelectorTermPatchPtrOutputWithContext(ctx context.Context) NodeSelectorTermPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSelectorTermPatch) *NodeSelectorTermPatch {
		return &v
	}).(NodeSelectorTermPatchPtrOutput)
}

// A list of node selector requirements by node's labels.
func (o NodeSelectorTermPatchOutput) MatchExpressions() NodeSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v NodeSelectorTermPatch) []NodeSelectorRequirementPatch { return v.MatchExpressions }).(NodeSelectorRequirementPatchArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o NodeSelectorTermPatchOutput) MatchFields() NodeSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v NodeSelectorTermPatch) []NodeSelectorRequirementPatch { return v.MatchFields }).(NodeSelectorRequirementPatchArrayOutput)
}

type NodeSelectorTermPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeSelectorTermPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSelectorTermPatch)(nil)).Elem()
}

func (o NodeSelectorTermPatchPtrOutput) ToNodeSelectorTermPatchPtrOutput() NodeSelectorTermPatchPtrOutput {
	return o
}

func (o NodeSelectorTermPatchPtrOutput) ToNodeSelectorTermPatchPtrOutputWithContext(ctx context.Context) NodeSelectorTermPatchPtrOutput {
	return o
}

func (o NodeSelectorTermPatchPtrOutput) Elem() NodeSelectorTermPatchOutput {
	return o.ApplyT(func(v *NodeSelectorTermPatch) NodeSelectorTermPatch {
		if v != nil {
			return *v
		}
		var ret NodeSelectorTermPatch
		return ret
	}).(NodeSelectorTermPatchOutput)
}

// A list of node selector requirements by node's labels.
func (o NodeSelectorTermPatchPtrOutput) MatchExpressions() NodeSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v *NodeSelectorTermPatch) []NodeSelectorRequirementPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(NodeSelectorRequirementPatchArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o NodeSelectorTermPatchPtrOutput) MatchFields() NodeSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v *NodeSelectorTermPatch) []NodeSelectorRequirementPatch {
		if v == nil {
			return nil
		}
		return v.MatchFields
	}).(NodeSelectorRequirementPatchArrayOutput)
}

type NodeSelectorTermPatchArrayOutput struct{ *pulumi.OutputState }

func (NodeSelectorTermPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSelectorTermPatch)(nil)).Elem()
}

func (o NodeSelectorTermPatchArrayOutput) ToNodeSelectorTermPatchArrayOutput() NodeSelectorTermPatchArrayOutput {
	return o
}

func (o NodeSelectorTermPatchArrayOutput) ToNodeSelectorTermPatchArrayOutputWithContext(ctx context.Context) NodeSelectorTermPatchArrayOutput {
	return o
}

func (o NodeSelectorTermPatchArrayOutput) Index(i pulumi.IntInput) NodeSelectorTermPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSelectorTermPatch {
		return vs[0].([]NodeSelectorTermPatch)[vs[1].(int)]
	}).(NodeSelectorTermPatchOutput)
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpec struct {
	// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
	ConfigSource *NodeConfigSource `pulumi:"configSource"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID *string `pulumi:"externalID"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR *string `pulumi:"podCIDR"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs []string `pulumi:"podCIDRs"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID *string `pulumi:"providerID"`
	// If specified, the node's taints.
	Taints []Taint `pulumi:"taints"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable *bool `pulumi:"unschedulable"`
}

// NodeSpecInput is an input type that accepts NodeSpecArgs and NodeSpecOutput values.
// You can construct a concrete instance of `NodeSpecInput` via:
//
//	NodeSpecArgs{...}
type NodeSpecInput interface {
	pulumi.Input

	ToNodeSpecOutput() NodeSpecOutput
	ToNodeSpecOutputWithContext(context.Context) NodeSpecOutput
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpecArgs struct {
	// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
	ConfigSource NodeConfigSourcePtrInput `pulumi:"configSource"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID pulumi.StringPtrInput `pulumi:"externalID"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR pulumi.StringPtrInput `pulumi:"podCIDR"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs pulumi.StringArrayInput `pulumi:"podCIDRs"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// If specified, the node's taints.
	Taints TaintArrayInput `pulumi:"taints"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable pulumi.BoolPtrInput `pulumi:"unschedulable"`
}

func (NodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpec)(nil)).Elem()
}

func (i NodeSpecArgs) ToNodeSpecOutput() NodeSpecOutput {
	return i.ToNodeSpecOutputWithContext(context.Background())
}

func (i NodeSpecArgs) ToNodeSpecOutputWithContext(ctx context.Context) NodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecOutput)
}

func (i NodeSpecArgs) ToNodeSpecPtrOutput() NodeSpecPtrOutput {
	return i.ToNodeSpecPtrOutputWithContext(context.Background())
}

func (i NodeSpecArgs) ToNodeSpecPtrOutputWithContext(ctx context.Context) NodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecOutput).ToNodeSpecPtrOutputWithContext(ctx)
}

// NodeSpecPtrInput is an input type that accepts NodeSpecArgs, NodeSpecPtr and NodeSpecPtrOutput values.
// You can construct a concrete instance of `NodeSpecPtrInput` via:
//
//	        NodeSpecArgs{...}
//
//	or:
//
//	        nil
type NodeSpecPtrInput interface {
	pulumi.Input

	ToNodeSpecPtrOutput() NodeSpecPtrOutput
	ToNodeSpecPtrOutputWithContext(context.Context) NodeSpecPtrOutput
}

type nodeSpecPtrType NodeSpecArgs

func NodeSpecPtr(v *NodeSpecArgs) NodeSpecPtrInput {
	return (*nodeSpecPtrType)(v)
}

func (*nodeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSpec)(nil)).Elem()
}

func (i *nodeSpecPtrType) ToNodeSpecPtrOutput() NodeSpecPtrOutput {
	return i.ToNodeSpecPtrOutputWithContext(context.Background())
}

func (i *nodeSpecPtrType) ToNodeSpecPtrOutputWithContext(ctx context.Context) NodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecPtrOutput)
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpecOutput struct{ *pulumi.OutputState }

func (NodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpec)(nil)).Elem()
}

func (o NodeSpecOutput) ToNodeSpecOutput() NodeSpecOutput {
	return o
}

func (o NodeSpecOutput) ToNodeSpecOutputWithContext(ctx context.Context) NodeSpecOutput {
	return o
}

func (o NodeSpecOutput) ToNodeSpecPtrOutput() NodeSpecPtrOutput {
	return o.ToNodeSpecPtrOutputWithContext(context.Background())
}

func (o NodeSpecOutput) ToNodeSpecPtrOutputWithContext(ctx context.Context) NodeSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSpec) *NodeSpec {
		return &v
	}).(NodeSpecPtrOutput)
}

// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
func (o NodeSpecOutput) ConfigSource() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v NodeSpec) *NodeConfigSource { return v.ConfigSource }).(NodeConfigSourcePtrOutput)
}

// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
func (o NodeSpecOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpec) *string { return v.ExternalID }).(pulumi.StringPtrOutput)
}

// PodCIDR represents the pod IP range assigned to the node.
func (o NodeSpecOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpec) *string { return v.PodCIDR }).(pulumi.StringPtrOutput)
}

// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
func (o NodeSpecOutput) PodCIDRs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeSpec) []string { return v.PodCIDRs }).(pulumi.StringArrayOutput)
}

// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
func (o NodeSpecOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpec) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// If specified, the node's taints.
func (o NodeSpecOutput) Taints() TaintArrayOutput {
	return o.ApplyT(func(v NodeSpec) []Taint { return v.Taints }).(TaintArrayOutput)
}

// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
func (o NodeSpecOutput) Unschedulable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeSpec) *bool { return v.Unschedulable }).(pulumi.BoolPtrOutput)
}

type NodeSpecPtrOutput struct{ *pulumi.OutputState }

func (NodeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSpec)(nil)).Elem()
}

func (o NodeSpecPtrOutput) ToNodeSpecPtrOutput() NodeSpecPtrOutput {
	return o
}

func (o NodeSpecPtrOutput) ToNodeSpecPtrOutputWithContext(ctx context.Context) NodeSpecPtrOutput {
	return o
}

func (o NodeSpecPtrOutput) Elem() NodeSpecOutput {
	return o.ApplyT(func(v *NodeSpec) NodeSpec {
		if v != nil {
			return *v
		}
		var ret NodeSpec
		return ret
	}).(NodeSpecOutput)
}

// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
func (o NodeSpecPtrOutput) ConfigSource() NodeConfigSourcePtrOutput {
	return o.ApplyT(func(v *NodeSpec) *NodeConfigSource {
		if v == nil {
			return nil
		}
		return v.ConfigSource
	}).(NodeConfigSourcePtrOutput)
}

// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
func (o NodeSpecPtrOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalID
	}).(pulumi.StringPtrOutput)
}

// PodCIDR represents the pod IP range assigned to the node.
func (o NodeSpecPtrOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpec) *string {
		if v == nil {
			return nil
		}
		return v.PodCIDR
	}).(pulumi.StringPtrOutput)
}

// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
func (o NodeSpecPtrOutput) PodCIDRs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeSpec) []string {
		if v == nil {
			return nil
		}
		return v.PodCIDRs
	}).(pulumi.StringArrayOutput)
}

// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
func (o NodeSpecPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// If specified, the node's taints.
func (o NodeSpecPtrOutput) Taints() TaintArrayOutput {
	return o.ApplyT(func(v *NodeSpec) []Taint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(TaintArrayOutput)
}

// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
func (o NodeSpecPtrOutput) Unschedulable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Unschedulable
	}).(pulumi.BoolPtrOutput)
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpecPatch struct {
	// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
	ConfigSource *NodeConfigSourcePatch `pulumi:"configSource"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID *string `pulumi:"externalID"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR *string `pulumi:"podCIDR"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs []string `pulumi:"podCIDRs"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID *string `pulumi:"providerID"`
	// If specified, the node's taints.
	Taints []TaintPatch `pulumi:"taints"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable *bool `pulumi:"unschedulable"`
}

// NodeSpecPatchInput is an input type that accepts NodeSpecPatchArgs and NodeSpecPatchOutput values.
// You can construct a concrete instance of `NodeSpecPatchInput` via:
//
//	NodeSpecPatchArgs{...}
type NodeSpecPatchInput interface {
	pulumi.Input

	ToNodeSpecPatchOutput() NodeSpecPatchOutput
	ToNodeSpecPatchOutputWithContext(context.Context) NodeSpecPatchOutput
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpecPatchArgs struct {
	// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
	ConfigSource NodeConfigSourcePatchPtrInput `pulumi:"configSource"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID pulumi.StringPtrInput `pulumi:"externalID"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR pulumi.StringPtrInput `pulumi:"podCIDR"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs pulumi.StringArrayInput `pulumi:"podCIDRs"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID pulumi.StringPtrInput `pulumi:"providerID"`
	// If specified, the node's taints.
	Taints TaintPatchArrayInput `pulumi:"taints"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable pulumi.BoolPtrInput `pulumi:"unschedulable"`
}

func (NodeSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpecPatch)(nil)).Elem()
}

func (i NodeSpecPatchArgs) ToNodeSpecPatchOutput() NodeSpecPatchOutput {
	return i.ToNodeSpecPatchOutputWithContext(context.Background())
}

func (i NodeSpecPatchArgs) ToNodeSpecPatchOutputWithContext(ctx context.Context) NodeSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecPatchOutput)
}

func (i NodeSpecPatchArgs) ToNodeSpecPatchPtrOutput() NodeSpecPatchPtrOutput {
	return i.ToNodeSpecPatchPtrOutputWithContext(context.Background())
}

func (i NodeSpecPatchArgs) ToNodeSpecPatchPtrOutputWithContext(ctx context.Context) NodeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecPatchOutput).ToNodeSpecPatchPtrOutputWithContext(ctx)
}

// NodeSpecPatchPtrInput is an input type that accepts NodeSpecPatchArgs, NodeSpecPatchPtr and NodeSpecPatchPtrOutput values.
// You can construct a concrete instance of `NodeSpecPatchPtrInput` via:
//
//	        NodeSpecPatchArgs{...}
//
//	or:
//
//	        nil
type NodeSpecPatchPtrInput interface {
	pulumi.Input

	ToNodeSpecPatchPtrOutput() NodeSpecPatchPtrOutput
	ToNodeSpecPatchPtrOutputWithContext(context.Context) NodeSpecPatchPtrOutput
}

type nodeSpecPatchPtrType NodeSpecPatchArgs

func NodeSpecPatchPtr(v *NodeSpecPatchArgs) NodeSpecPatchPtrInput {
	return (*nodeSpecPatchPtrType)(v)
}

func (*nodeSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSpecPatch)(nil)).Elem()
}

func (i *nodeSpecPatchPtrType) ToNodeSpecPatchPtrOutput() NodeSpecPatchPtrOutput {
	return i.ToNodeSpecPatchPtrOutputWithContext(context.Background())
}

func (i *nodeSpecPatchPtrType) ToNodeSpecPatchPtrOutputWithContext(ctx context.Context) NodeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecPatchPtrOutput)
}

// NodeSpec describes the attributes that a node is created with.
type NodeSpecPatchOutput struct{ *pulumi.OutputState }

func (NodeSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpecPatch)(nil)).Elem()
}

func (o NodeSpecPatchOutput) ToNodeSpecPatchOutput() NodeSpecPatchOutput {
	return o
}

func (o NodeSpecPatchOutput) ToNodeSpecPatchOutputWithContext(ctx context.Context) NodeSpecPatchOutput {
	return o
}

func (o NodeSpecPatchOutput) ToNodeSpecPatchPtrOutput() NodeSpecPatchPtrOutput {
	return o.ToNodeSpecPatchPtrOutputWithContext(context.Background())
}

func (o NodeSpecPatchOutput) ToNodeSpecPatchPtrOutputWithContext(ctx context.Context) NodeSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSpecPatch) *NodeSpecPatch {
		return &v
	}).(NodeSpecPatchPtrOutput)
}

// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
func (o NodeSpecPatchOutput) ConfigSource() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v NodeSpecPatch) *NodeConfigSourcePatch { return v.ConfigSource }).(NodeConfigSourcePatchPtrOutput)
}

// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
func (o NodeSpecPatchOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpecPatch) *string { return v.ExternalID }).(pulumi.StringPtrOutput)
}

// PodCIDR represents the pod IP range assigned to the node.
func (o NodeSpecPatchOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpecPatch) *string { return v.PodCIDR }).(pulumi.StringPtrOutput)
}

// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
func (o NodeSpecPatchOutput) PodCIDRs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeSpecPatch) []string { return v.PodCIDRs }).(pulumi.StringArrayOutput)
}

// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
func (o NodeSpecPatchOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpecPatch) *string { return v.ProviderID }).(pulumi.StringPtrOutput)
}

// If specified, the node's taints.
func (o NodeSpecPatchOutput) Taints() TaintPatchArrayOutput {
	return o.ApplyT(func(v NodeSpecPatch) []TaintPatch { return v.Taints }).(TaintPatchArrayOutput)
}

// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
func (o NodeSpecPatchOutput) Unschedulable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeSpecPatch) *bool { return v.Unschedulable }).(pulumi.BoolPtrOutput)
}

type NodeSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSpecPatch)(nil)).Elem()
}

func (o NodeSpecPatchPtrOutput) ToNodeSpecPatchPtrOutput() NodeSpecPatchPtrOutput {
	return o
}

func (o NodeSpecPatchPtrOutput) ToNodeSpecPatchPtrOutputWithContext(ctx context.Context) NodeSpecPatchPtrOutput {
	return o
}

func (o NodeSpecPatchPtrOutput) Elem() NodeSpecPatchOutput {
	return o.ApplyT(func(v *NodeSpecPatch) NodeSpecPatch {
		if v != nil {
			return *v
		}
		var ret NodeSpecPatch
		return ret
	}).(NodeSpecPatchOutput)
}

// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
func (o NodeSpecPatchPtrOutput) ConfigSource() NodeConfigSourcePatchPtrOutput {
	return o.ApplyT(func(v *NodeSpecPatch) *NodeConfigSourcePatch {
		if v == nil {
			return nil
		}
		return v.ConfigSource
	}).(NodeConfigSourcePatchPtrOutput)
}

// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
func (o NodeSpecPatchPtrOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalID
	}).(pulumi.StringPtrOutput)
}

// PodCIDR represents the pod IP range assigned to the node.
func (o NodeSpecPatchPtrOutput) PodCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodCIDR
	}).(pulumi.StringPtrOutput)
}

// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
func (o NodeSpecPatchPtrOutput) PodCIDRs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.PodCIDRs
	}).(pulumi.StringArrayOutput)
}

// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
func (o NodeSpecPatchPtrOutput) ProviderID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ProviderID
	}).(pulumi.StringPtrOutput)
}

// If specified, the node's taints.
func (o NodeSpecPatchPtrOutput) Taints() TaintPatchArrayOutput {
	return o.ApplyT(func(v *NodeSpecPatch) []TaintPatch {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(TaintPatchArrayOutput)
}

// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
func (o NodeSpecPatchPtrOutput) Unschedulable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Unschedulable
	}).(pulumi.BoolPtrOutput)
}

// NodeStatus is information about the current status of a node.
type NodeStatus struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
	Addresses []NodeAddress `pulumi:"addresses"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable map[string]string `pulumi:"allocatable"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]string `pulumi:"capacity"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []NodeCondition `pulumi:"conditions"`
	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config *NodeConfigStatus `pulumi:"config"`
	// Endpoints of daemons running on the Node.
	DaemonEndpoints *NodeDaemonEndpoints `pulumi:"daemonEndpoints"`
	// List of container images on this node
	Images []ContainerImage `pulumi:"images"`
	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	NodeInfo *NodeSystemInfo `pulumi:"nodeInfo"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `pulumi:"phase"`
	// List of volumes that are attached to the node.
	VolumesAttached []AttachedVolume `pulumi:"volumesAttached"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []string `pulumi:"volumesInUse"`
}

// NodeStatusInput is an input type that accepts NodeStatusArgs and NodeStatusOutput values.
// You can construct a concrete instance of `NodeStatusInput` via:
//
//	NodeStatusArgs{...}
type NodeStatusInput interface {
	pulumi.Input

	ToNodeStatusOutput() NodeStatusOutput
	ToNodeStatusOutputWithContext(context.Context) NodeStatusOutput
}

// NodeStatus is information about the current status of a node.
type NodeStatusArgs struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
	Addresses NodeAddressArrayInput `pulumi:"addresses"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable pulumi.StringMapInput `pulumi:"allocatable"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions NodeConditionArrayInput `pulumi:"conditions"`
	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config NodeConfigStatusPtrInput `pulumi:"config"`
	// Endpoints of daemons running on the Node.
	DaemonEndpoints NodeDaemonEndpointsPtrInput `pulumi:"daemonEndpoints"`
	// List of container images on this node
	Images ContainerImageArrayInput `pulumi:"images"`
	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	NodeInfo NodeSystemInfoPtrInput `pulumi:"nodeInfo"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// List of volumes that are attached to the node.
	VolumesAttached AttachedVolumeArrayInput `pulumi:"volumesAttached"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse pulumi.StringArrayInput `pulumi:"volumesInUse"`
}

func (NodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStatus)(nil)).Elem()
}

func (i NodeStatusArgs) ToNodeStatusOutput() NodeStatusOutput {
	return i.ToNodeStatusOutputWithContext(context.Background())
}

func (i NodeStatusArgs) ToNodeStatusOutputWithContext(ctx context.Context) NodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusOutput)
}

func (i NodeStatusArgs) ToNodeStatusPtrOutput() NodeStatusPtrOutput {
	return i.ToNodeStatusPtrOutputWithContext(context.Background())
}

func (i NodeStatusArgs) ToNodeStatusPtrOutputWithContext(ctx context.Context) NodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusOutput).ToNodeStatusPtrOutputWithContext(ctx)
}

// NodeStatusPtrInput is an input type that accepts NodeStatusArgs, NodeStatusPtr and NodeStatusPtrOutput values.
// You can construct a concrete instance of `NodeStatusPtrInput` via:
//
//	        NodeStatusArgs{...}
//
//	or:
//
//	        nil
type NodeStatusPtrInput interface {
	pulumi.Input

	ToNodeStatusPtrOutput() NodeStatusPtrOutput
	ToNodeStatusPtrOutputWithContext(context.Context) NodeStatusPtrOutput
}

type nodeStatusPtrType NodeStatusArgs

func NodeStatusPtr(v *NodeStatusArgs) NodeStatusPtrInput {
	return (*nodeStatusPtrType)(v)
}

func (*nodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStatus)(nil)).Elem()
}

func (i *nodeStatusPtrType) ToNodeStatusPtrOutput() NodeStatusPtrOutput {
	return i.ToNodeStatusPtrOutputWithContext(context.Background())
}

func (i *nodeStatusPtrType) ToNodeStatusPtrOutputWithContext(ctx context.Context) NodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusPtrOutput)
}

// NodeStatus is information about the current status of a node.
type NodeStatusOutput struct{ *pulumi.OutputState }

func (NodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStatus)(nil)).Elem()
}

func (o NodeStatusOutput) ToNodeStatusOutput() NodeStatusOutput {
	return o
}

func (o NodeStatusOutput) ToNodeStatusOutputWithContext(ctx context.Context) NodeStatusOutput {
	return o
}

func (o NodeStatusOutput) ToNodeStatusPtrOutput() NodeStatusPtrOutput {
	return o.ToNodeStatusPtrOutputWithContext(context.Background())
}

func (o NodeStatusOutput) ToNodeStatusPtrOutputWithContext(ctx context.Context) NodeStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeStatus) *NodeStatus {
		return &v
	}).(NodeStatusPtrOutput)
}

// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
func (o NodeStatusOutput) Addresses() NodeAddressArrayOutput {
	return o.ApplyT(func(v NodeStatus) []NodeAddress { return v.Addresses }).(NodeAddressArrayOutput)
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
func (o NodeStatusOutput) Allocatable() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeStatus) map[string]string { return v.Allocatable }).(pulumi.StringMapOutput)
}

// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o NodeStatusOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeStatus) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
func (o NodeStatusOutput) Conditions() NodeConditionArrayOutput {
	return o.ApplyT(func(v NodeStatus) []NodeCondition { return v.Conditions }).(NodeConditionArrayOutput)
}

// Status of the config assigned to the node via the dynamic Kubelet config feature.
func (o NodeStatusOutput) Config() NodeConfigStatusPtrOutput {
	return o.ApplyT(func(v NodeStatus) *NodeConfigStatus { return v.Config }).(NodeConfigStatusPtrOutput)
}

// Endpoints of daemons running on the Node.
func (o NodeStatusOutput) DaemonEndpoints() NodeDaemonEndpointsPtrOutput {
	return o.ApplyT(func(v NodeStatus) *NodeDaemonEndpoints { return v.DaemonEndpoints }).(NodeDaemonEndpointsPtrOutput)
}

// List of container images on this node
func (o NodeStatusOutput) Images() ContainerImageArrayOutput {
	return o.ApplyT(func(v NodeStatus) []ContainerImage { return v.Images }).(ContainerImageArrayOutput)
}

// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
func (o NodeStatusOutput) NodeInfo() NodeSystemInfoPtrOutput {
	return o.ApplyT(func(v NodeStatus) *NodeSystemInfo { return v.NodeInfo }).(NodeSystemInfoPtrOutput)
}

// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
func (o NodeStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// List of volumes that are attached to the node.
func (o NodeStatusOutput) VolumesAttached() AttachedVolumeArrayOutput {
	return o.ApplyT(func(v NodeStatus) []AttachedVolume { return v.VolumesAttached }).(AttachedVolumeArrayOutput)
}

// List of attachable volumes in use (mounted) by the node.
func (o NodeStatusOutput) VolumesInUse() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeStatus) []string { return v.VolumesInUse }).(pulumi.StringArrayOutput)
}

type NodeStatusPtrOutput struct{ *pulumi.OutputState }

func (NodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStatus)(nil)).Elem()
}

func (o NodeStatusPtrOutput) ToNodeStatusPtrOutput() NodeStatusPtrOutput {
	return o
}

func (o NodeStatusPtrOutput) ToNodeStatusPtrOutputWithContext(ctx context.Context) NodeStatusPtrOutput {
	return o
}

func (o NodeStatusPtrOutput) Elem() NodeStatusOutput {
	return o.ApplyT(func(v *NodeStatus) NodeStatus {
		if v != nil {
			return *v
		}
		var ret NodeStatus
		return ret
	}).(NodeStatusOutput)
}

// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
func (o NodeStatusPtrOutput) Addresses() NodeAddressArrayOutput {
	return o.ApplyT(func(v *NodeStatus) []NodeAddress {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(NodeAddressArrayOutput)
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
func (o NodeStatusPtrOutput) Allocatable() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Allocatable
	}).(pulumi.StringMapOutput)
}

// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o NodeStatusPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
func (o NodeStatusPtrOutput) Conditions() NodeConditionArrayOutput {
	return o.ApplyT(func(v *NodeStatus) []NodeCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NodeConditionArrayOutput)
}

// Status of the config assigned to the node via the dynamic Kubelet config feature.
func (o NodeStatusPtrOutput) Config() NodeConfigStatusPtrOutput {
	return o.ApplyT(func(v *NodeStatus) *NodeConfigStatus {
		if v == nil {
			return nil
		}
		return v.Config
	}).(NodeConfigStatusPtrOutput)
}

// Endpoints of daemons running on the Node.
func (o NodeStatusPtrOutput) DaemonEndpoints() NodeDaemonEndpointsPtrOutput {
	return o.ApplyT(func(v *NodeStatus) *NodeDaemonEndpoints {
		if v == nil {
			return nil
		}
		return v.DaemonEndpoints
	}).(NodeDaemonEndpointsPtrOutput)
}

// List of container images on this node
func (o NodeStatusPtrOutput) Images() ContainerImageArrayOutput {
	return o.ApplyT(func(v *NodeStatus) []ContainerImage {
		if v == nil {
			return nil
		}
		return v.Images
	}).(ContainerImageArrayOutput)
}

// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
func (o NodeStatusPtrOutput) NodeInfo() NodeSystemInfoPtrOutput {
	return o.ApplyT(func(v *NodeStatus) *NodeSystemInfo {
		if v == nil {
			return nil
		}
		return v.NodeInfo
	}).(NodeSystemInfoPtrOutput)
}

// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
func (o NodeStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// List of volumes that are attached to the node.
func (o NodeStatusPtrOutput) VolumesAttached() AttachedVolumeArrayOutput {
	return o.ApplyT(func(v *NodeStatus) []AttachedVolume {
		if v == nil {
			return nil
		}
		return v.VolumesAttached
	}).(AttachedVolumeArrayOutput)
}

// List of attachable volumes in use (mounted) by the node.
func (o NodeStatusPtrOutput) VolumesInUse() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.VolumesInUse
	}).(pulumi.StringArrayOutput)
}

// NodeStatus is information about the current status of a node.
type NodeStatusPatch struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
	Addresses []NodeAddressPatch `pulumi:"addresses"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable map[string]string `pulumi:"allocatable"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]string `pulumi:"capacity"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []NodeConditionPatch `pulumi:"conditions"`
	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config *NodeConfigStatusPatch `pulumi:"config"`
	// Endpoints of daemons running on the Node.
	DaemonEndpoints *NodeDaemonEndpointsPatch `pulumi:"daemonEndpoints"`
	// List of container images on this node
	Images []ContainerImagePatch `pulumi:"images"`
	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	NodeInfo *NodeSystemInfoPatch `pulumi:"nodeInfo"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `pulumi:"phase"`
	// List of volumes that are attached to the node.
	VolumesAttached []AttachedVolumePatch `pulumi:"volumesAttached"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []string `pulumi:"volumesInUse"`
}

// NodeStatusPatchInput is an input type that accepts NodeStatusPatchArgs and NodeStatusPatchOutput values.
// You can construct a concrete instance of `NodeStatusPatchInput` via:
//
//	NodeStatusPatchArgs{...}
type NodeStatusPatchInput interface {
	pulumi.Input

	ToNodeStatusPatchOutput() NodeStatusPatchOutput
	ToNodeStatusPatchOutputWithContext(context.Context) NodeStatusPatchOutput
}

// NodeStatus is information about the current status of a node.
type NodeStatusPatchArgs struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
	Addresses NodeAddressPatchArrayInput `pulumi:"addresses"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable pulumi.StringMapInput `pulumi:"allocatable"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions NodeConditionPatchArrayInput `pulumi:"conditions"`
	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config NodeConfigStatusPatchPtrInput `pulumi:"config"`
	// Endpoints of daemons running on the Node.
	DaemonEndpoints NodeDaemonEndpointsPatchPtrInput `pulumi:"daemonEndpoints"`
	// List of container images on this node
	Images ContainerImagePatchArrayInput `pulumi:"images"`
	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	NodeInfo NodeSystemInfoPatchPtrInput `pulumi:"nodeInfo"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// List of volumes that are attached to the node.
	VolumesAttached AttachedVolumePatchArrayInput `pulumi:"volumesAttached"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse pulumi.StringArrayInput `pulumi:"volumesInUse"`
}

func (NodeStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStatusPatch)(nil)).Elem()
}

func (i NodeStatusPatchArgs) ToNodeStatusPatchOutput() NodeStatusPatchOutput {
	return i.ToNodeStatusPatchOutputWithContext(context.Background())
}

func (i NodeStatusPatchArgs) ToNodeStatusPatchOutputWithContext(ctx context.Context) NodeStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusPatchOutput)
}

func (i NodeStatusPatchArgs) ToNodeStatusPatchPtrOutput() NodeStatusPatchPtrOutput {
	return i.ToNodeStatusPatchPtrOutputWithContext(context.Background())
}

func (i NodeStatusPatchArgs) ToNodeStatusPatchPtrOutputWithContext(ctx context.Context) NodeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusPatchOutput).ToNodeStatusPatchPtrOutputWithContext(ctx)
}

// NodeStatusPatchPtrInput is an input type that accepts NodeStatusPatchArgs, NodeStatusPatchPtr and NodeStatusPatchPtrOutput values.
// You can construct a concrete instance of `NodeStatusPatchPtrInput` via:
//
//	        NodeStatusPatchArgs{...}
//
//	or:
//
//	        nil
type NodeStatusPatchPtrInput interface {
	pulumi.Input

	ToNodeStatusPatchPtrOutput() NodeStatusPatchPtrOutput
	ToNodeStatusPatchPtrOutputWithContext(context.Context) NodeStatusPatchPtrOutput
}

type nodeStatusPatchPtrType NodeStatusPatchArgs

func NodeStatusPatchPtr(v *NodeStatusPatchArgs) NodeStatusPatchPtrInput {
	return (*nodeStatusPatchPtrType)(v)
}

func (*nodeStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStatusPatch)(nil)).Elem()
}

func (i *nodeStatusPatchPtrType) ToNodeStatusPatchPtrOutput() NodeStatusPatchPtrOutput {
	return i.ToNodeStatusPatchPtrOutputWithContext(context.Background())
}

func (i *nodeStatusPatchPtrType) ToNodeStatusPatchPtrOutputWithContext(ctx context.Context) NodeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStatusPatchPtrOutput)
}

// NodeStatus is information about the current status of a node.
type NodeStatusPatchOutput struct{ *pulumi.OutputState }

func (NodeStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStatusPatch)(nil)).Elem()
}

func (o NodeStatusPatchOutput) ToNodeStatusPatchOutput() NodeStatusPatchOutput {
	return o
}

func (o NodeStatusPatchOutput) ToNodeStatusPatchOutputWithContext(ctx context.Context) NodeStatusPatchOutput {
	return o
}

func (o NodeStatusPatchOutput) ToNodeStatusPatchPtrOutput() NodeStatusPatchPtrOutput {
	return o.ToNodeStatusPatchPtrOutputWithContext(context.Background())
}

func (o NodeStatusPatchOutput) ToNodeStatusPatchPtrOutputWithContext(ctx context.Context) NodeStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeStatusPatch) *NodeStatusPatch {
		return &v
	}).(NodeStatusPatchPtrOutput)
}

// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
func (o NodeStatusPatchOutput) Addresses() NodeAddressPatchArrayOutput {
	return o.ApplyT(func(v NodeStatusPatch) []NodeAddressPatch { return v.Addresses }).(NodeAddressPatchArrayOutput)
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
func (o NodeStatusPatchOutput) Allocatable() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeStatusPatch) map[string]string { return v.Allocatable }).(pulumi.StringMapOutput)
}

// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o NodeStatusPatchOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeStatusPatch) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
func (o NodeStatusPatchOutput) Conditions() NodeConditionPatchArrayOutput {
	return o.ApplyT(func(v NodeStatusPatch) []NodeConditionPatch { return v.Conditions }).(NodeConditionPatchArrayOutput)
}

// Status of the config assigned to the node via the dynamic Kubelet config feature.
func (o NodeStatusPatchOutput) Config() NodeConfigStatusPatchPtrOutput {
	return o.ApplyT(func(v NodeStatusPatch) *NodeConfigStatusPatch { return v.Config }).(NodeConfigStatusPatchPtrOutput)
}

// Endpoints of daemons running on the Node.
func (o NodeStatusPatchOutput) DaemonEndpoints() NodeDaemonEndpointsPatchPtrOutput {
	return o.ApplyT(func(v NodeStatusPatch) *NodeDaemonEndpointsPatch { return v.DaemonEndpoints }).(NodeDaemonEndpointsPatchPtrOutput)
}

// List of container images on this node
func (o NodeStatusPatchOutput) Images() ContainerImagePatchArrayOutput {
	return o.ApplyT(func(v NodeStatusPatch) []ContainerImagePatch { return v.Images }).(ContainerImagePatchArrayOutput)
}

// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
func (o NodeStatusPatchOutput) NodeInfo() NodeSystemInfoPatchPtrOutput {
	return o.ApplyT(func(v NodeStatusPatch) *NodeSystemInfoPatch { return v.NodeInfo }).(NodeSystemInfoPatchPtrOutput)
}

// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
func (o NodeStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// List of volumes that are attached to the node.
func (o NodeStatusPatchOutput) VolumesAttached() AttachedVolumePatchArrayOutput {
	return o.ApplyT(func(v NodeStatusPatch) []AttachedVolumePatch { return v.VolumesAttached }).(AttachedVolumePatchArrayOutput)
}

// List of attachable volumes in use (mounted) by the node.
func (o NodeStatusPatchOutput) VolumesInUse() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeStatusPatch) []string { return v.VolumesInUse }).(pulumi.StringArrayOutput)
}

type NodeStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStatusPatch)(nil)).Elem()
}

func (o NodeStatusPatchPtrOutput) ToNodeStatusPatchPtrOutput() NodeStatusPatchPtrOutput {
	return o
}

func (o NodeStatusPatchPtrOutput) ToNodeStatusPatchPtrOutputWithContext(ctx context.Context) NodeStatusPatchPtrOutput {
	return o
}

func (o NodeStatusPatchPtrOutput) Elem() NodeStatusPatchOutput {
	return o.ApplyT(func(v *NodeStatusPatch) NodeStatusPatch {
		if v != nil {
			return *v
		}
		var ret NodeStatusPatch
		return ret
	}).(NodeStatusPatchOutput)
}

// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example.
func (o NodeStatusPatchPtrOutput) Addresses() NodeAddressPatchArrayOutput {
	return o.ApplyT(func(v *NodeStatusPatch) []NodeAddressPatch {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(NodeAddressPatchArrayOutput)
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
func (o NodeStatusPatchPtrOutput) Allocatable() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Allocatable
	}).(pulumi.StringMapOutput)
}

// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o NodeStatusPatchPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
func (o NodeStatusPatchPtrOutput) Conditions() NodeConditionPatchArrayOutput {
	return o.ApplyT(func(v *NodeStatusPatch) []NodeConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NodeConditionPatchArrayOutput)
}

// Status of the config assigned to the node via the dynamic Kubelet config feature.
func (o NodeStatusPatchPtrOutput) Config() NodeConfigStatusPatchPtrOutput {
	return o.ApplyT(func(v *NodeStatusPatch) *NodeConfigStatusPatch {
		if v == nil {
			return nil
		}
		return v.Config
	}).(NodeConfigStatusPatchPtrOutput)
}

// Endpoints of daemons running on the Node.
func (o NodeStatusPatchPtrOutput) DaemonEndpoints() NodeDaemonEndpointsPatchPtrOutput {
	return o.ApplyT(func(v *NodeStatusPatch) *NodeDaemonEndpointsPatch {
		if v == nil {
			return nil
		}
		return v.DaemonEndpoints
	}).(NodeDaemonEndpointsPatchPtrOutput)
}

// List of container images on this node
func (o NodeStatusPatchPtrOutput) Images() ContainerImagePatchArrayOutput {
	return o.ApplyT(func(v *NodeStatusPatch) []ContainerImagePatch {
		if v == nil {
			return nil
		}
		return v.Images
	}).(ContainerImagePatchArrayOutput)
}

// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
func (o NodeStatusPatchPtrOutput) NodeInfo() NodeSystemInfoPatchPtrOutput {
	return o.ApplyT(func(v *NodeStatusPatch) *NodeSystemInfoPatch {
		if v == nil {
			return nil
		}
		return v.NodeInfo
	}).(NodeSystemInfoPatchPtrOutput)
}

// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
func (o NodeStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// List of volumes that are attached to the node.
func (o NodeStatusPatchPtrOutput) VolumesAttached() AttachedVolumePatchArrayOutput {
	return o.ApplyT(func(v *NodeStatusPatch) []AttachedVolumePatch {
		if v == nil {
			return nil
		}
		return v.VolumesAttached
	}).(AttachedVolumePatchArrayOutput)
}

// List of attachable volumes in use (mounted) by the node.
func (o NodeStatusPatchPtrOutput) VolumesInUse() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.VolumesInUse
	}).(pulumi.StringArrayOutput)
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfo struct {
	// The Architecture reported by the node
	Architecture string `pulumi:"architecture"`
	// Boot ID reported by the node.
	BootID string `pulumi:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion string `pulumi:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `pulumi:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `pulumi:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion string `pulumi:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID string `pulumi:"machineID"`
	// The Operating System reported by the node
	OperatingSystem string `pulumi:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `pulumi:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID string `pulumi:"systemUUID"`
}

// NodeSystemInfoInput is an input type that accepts NodeSystemInfoArgs and NodeSystemInfoOutput values.
// You can construct a concrete instance of `NodeSystemInfoInput` via:
//
//	NodeSystemInfoArgs{...}
type NodeSystemInfoInput interface {
	pulumi.Input

	ToNodeSystemInfoOutput() NodeSystemInfoOutput
	ToNodeSystemInfoOutputWithContext(context.Context) NodeSystemInfoOutput
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfoArgs struct {
	// The Architecture reported by the node
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// Boot ID reported by the node.
	BootID pulumi.StringInput `pulumi:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion pulumi.StringInput `pulumi:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion pulumi.StringInput `pulumi:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion pulumi.StringInput `pulumi:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion pulumi.StringInput `pulumi:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID pulumi.StringInput `pulumi:"machineID"`
	// The Operating System reported by the node
	OperatingSystem pulumi.StringInput `pulumi:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage pulumi.StringInput `pulumi:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID pulumi.StringInput `pulumi:"systemUUID"`
}

func (NodeSystemInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSystemInfo)(nil)).Elem()
}

func (i NodeSystemInfoArgs) ToNodeSystemInfoOutput() NodeSystemInfoOutput {
	return i.ToNodeSystemInfoOutputWithContext(context.Background())
}

func (i NodeSystemInfoArgs) ToNodeSystemInfoOutputWithContext(ctx context.Context) NodeSystemInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoOutput)
}

func (i NodeSystemInfoArgs) ToNodeSystemInfoPtrOutput() NodeSystemInfoPtrOutput {
	return i.ToNodeSystemInfoPtrOutputWithContext(context.Background())
}

func (i NodeSystemInfoArgs) ToNodeSystemInfoPtrOutputWithContext(ctx context.Context) NodeSystemInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoOutput).ToNodeSystemInfoPtrOutputWithContext(ctx)
}

// NodeSystemInfoPtrInput is an input type that accepts NodeSystemInfoArgs, NodeSystemInfoPtr and NodeSystemInfoPtrOutput values.
// You can construct a concrete instance of `NodeSystemInfoPtrInput` via:
//
//	        NodeSystemInfoArgs{...}
//
//	or:
//
//	        nil
type NodeSystemInfoPtrInput interface {
	pulumi.Input

	ToNodeSystemInfoPtrOutput() NodeSystemInfoPtrOutput
	ToNodeSystemInfoPtrOutputWithContext(context.Context) NodeSystemInfoPtrOutput
}

type nodeSystemInfoPtrType NodeSystemInfoArgs

func NodeSystemInfoPtr(v *NodeSystemInfoArgs) NodeSystemInfoPtrInput {
	return (*nodeSystemInfoPtrType)(v)
}

func (*nodeSystemInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSystemInfo)(nil)).Elem()
}

func (i *nodeSystemInfoPtrType) ToNodeSystemInfoPtrOutput() NodeSystemInfoPtrOutput {
	return i.ToNodeSystemInfoPtrOutputWithContext(context.Background())
}

func (i *nodeSystemInfoPtrType) ToNodeSystemInfoPtrOutputWithContext(ctx context.Context) NodeSystemInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoPtrOutput)
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfoOutput struct{ *pulumi.OutputState }

func (NodeSystemInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSystemInfo)(nil)).Elem()
}

func (o NodeSystemInfoOutput) ToNodeSystemInfoOutput() NodeSystemInfoOutput {
	return o
}

func (o NodeSystemInfoOutput) ToNodeSystemInfoOutputWithContext(ctx context.Context) NodeSystemInfoOutput {
	return o
}

func (o NodeSystemInfoOutput) ToNodeSystemInfoPtrOutput() NodeSystemInfoPtrOutput {
	return o.ToNodeSystemInfoPtrOutputWithContext(context.Background())
}

func (o NodeSystemInfoOutput) ToNodeSystemInfoPtrOutputWithContext(ctx context.Context) NodeSystemInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSystemInfo) *NodeSystemInfo {
		return &v
	}).(NodeSystemInfoPtrOutput)
}

// The Architecture reported by the node
func (o NodeSystemInfoOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.Architecture }).(pulumi.StringOutput)
}

// Boot ID reported by the node.
func (o NodeSystemInfoOutput) BootID() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.BootID }).(pulumi.StringOutput)
}

// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
func (o NodeSystemInfoOutput) ContainerRuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.ContainerRuntimeVersion }).(pulumi.StringOutput)
}

// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
func (o NodeSystemInfoOutput) KernelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.KernelVersion }).(pulumi.StringOutput)
}

// KubeProxy Version reported by the node.
func (o NodeSystemInfoOutput) KubeProxyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.KubeProxyVersion }).(pulumi.StringOutput)
}

// Kubelet Version reported by the node.
func (o NodeSystemInfoOutput) KubeletVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.KubeletVersion }).(pulumi.StringOutput)
}

// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
func (o NodeSystemInfoOutput) MachineID() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.MachineID }).(pulumi.StringOutput)
}

// The Operating System reported by the node
func (o NodeSystemInfoOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
func (o NodeSystemInfoOutput) OsImage() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.OsImage }).(pulumi.StringOutput)
}

// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
func (o NodeSystemInfoOutput) SystemUUID() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSystemInfo) string { return v.SystemUUID }).(pulumi.StringOutput)
}

type NodeSystemInfoPtrOutput struct{ *pulumi.OutputState }

func (NodeSystemInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSystemInfo)(nil)).Elem()
}

func (o NodeSystemInfoPtrOutput) ToNodeSystemInfoPtrOutput() NodeSystemInfoPtrOutput {
	return o
}

func (o NodeSystemInfoPtrOutput) ToNodeSystemInfoPtrOutputWithContext(ctx context.Context) NodeSystemInfoPtrOutput {
	return o
}

func (o NodeSystemInfoPtrOutput) Elem() NodeSystemInfoOutput {
	return o.ApplyT(func(v *NodeSystemInfo) NodeSystemInfo {
		if v != nil {
			return *v
		}
		var ret NodeSystemInfo
		return ret
	}).(NodeSystemInfoOutput)
}

// The Architecture reported by the node
func (o NodeSystemInfoPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Architecture
	}).(pulumi.StringPtrOutput)
}

// Boot ID reported by the node.
func (o NodeSystemInfoPtrOutput) BootID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.BootID
	}).(pulumi.StringPtrOutput)
}

// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
func (o NodeSystemInfoPtrOutput) ContainerRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerRuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
func (o NodeSystemInfoPtrOutput) KernelVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.KernelVersion
	}).(pulumi.StringPtrOutput)
}

// KubeProxy Version reported by the node.
func (o NodeSystemInfoPtrOutput) KubeProxyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.KubeProxyVersion
	}).(pulumi.StringPtrOutput)
}

// Kubelet Version reported by the node.
func (o NodeSystemInfoPtrOutput) KubeletVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.KubeletVersion
	}).(pulumi.StringPtrOutput)
}

// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
func (o NodeSystemInfoPtrOutput) MachineID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.MachineID
	}).(pulumi.StringPtrOutput)
}

// The Operating System reported by the node
func (o NodeSystemInfoPtrOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OperatingSystem
	}).(pulumi.StringPtrOutput)
}

// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
func (o NodeSystemInfoPtrOutput) OsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OsImage
	}).(pulumi.StringPtrOutput)
}

// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
func (o NodeSystemInfoPtrOutput) SystemUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SystemUUID
	}).(pulumi.StringPtrOutput)
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfoPatch struct {
	// The Architecture reported by the node
	Architecture *string `pulumi:"architecture"`
	// Boot ID reported by the node.
	BootID *string `pulumi:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion *string `pulumi:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion *string `pulumi:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion *string `pulumi:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion *string `pulumi:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID *string `pulumi:"machineID"`
	// The Operating System reported by the node
	OperatingSystem *string `pulumi:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage *string `pulumi:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID *string `pulumi:"systemUUID"`
}

// NodeSystemInfoPatchInput is an input type that accepts NodeSystemInfoPatchArgs and NodeSystemInfoPatchOutput values.
// You can construct a concrete instance of `NodeSystemInfoPatchInput` via:
//
//	NodeSystemInfoPatchArgs{...}
type NodeSystemInfoPatchInput interface {
	pulumi.Input

	ToNodeSystemInfoPatchOutput() NodeSystemInfoPatchOutput
	ToNodeSystemInfoPatchOutputWithContext(context.Context) NodeSystemInfoPatchOutput
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfoPatchArgs struct {
	// The Architecture reported by the node
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// Boot ID reported by the node.
	BootID pulumi.StringPtrInput `pulumi:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion pulumi.StringPtrInput `pulumi:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion pulumi.StringPtrInput `pulumi:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion pulumi.StringPtrInput `pulumi:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion pulumi.StringPtrInput `pulumi:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID pulumi.StringPtrInput `pulumi:"machineID"`
	// The Operating System reported by the node
	OperatingSystem pulumi.StringPtrInput `pulumi:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage pulumi.StringPtrInput `pulumi:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID pulumi.StringPtrInput `pulumi:"systemUUID"`
}

func (NodeSystemInfoPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSystemInfoPatch)(nil)).Elem()
}

func (i NodeSystemInfoPatchArgs) ToNodeSystemInfoPatchOutput() NodeSystemInfoPatchOutput {
	return i.ToNodeSystemInfoPatchOutputWithContext(context.Background())
}

func (i NodeSystemInfoPatchArgs) ToNodeSystemInfoPatchOutputWithContext(ctx context.Context) NodeSystemInfoPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoPatchOutput)
}

func (i NodeSystemInfoPatchArgs) ToNodeSystemInfoPatchPtrOutput() NodeSystemInfoPatchPtrOutput {
	return i.ToNodeSystemInfoPatchPtrOutputWithContext(context.Background())
}

func (i NodeSystemInfoPatchArgs) ToNodeSystemInfoPatchPtrOutputWithContext(ctx context.Context) NodeSystemInfoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoPatchOutput).ToNodeSystemInfoPatchPtrOutputWithContext(ctx)
}

// NodeSystemInfoPatchPtrInput is an input type that accepts NodeSystemInfoPatchArgs, NodeSystemInfoPatchPtr and NodeSystemInfoPatchPtrOutput values.
// You can construct a concrete instance of `NodeSystemInfoPatchPtrInput` via:
//
//	        NodeSystemInfoPatchArgs{...}
//
//	or:
//
//	        nil
type NodeSystemInfoPatchPtrInput interface {
	pulumi.Input

	ToNodeSystemInfoPatchPtrOutput() NodeSystemInfoPatchPtrOutput
	ToNodeSystemInfoPatchPtrOutputWithContext(context.Context) NodeSystemInfoPatchPtrOutput
}

type nodeSystemInfoPatchPtrType NodeSystemInfoPatchArgs

func NodeSystemInfoPatchPtr(v *NodeSystemInfoPatchArgs) NodeSystemInfoPatchPtrInput {
	return (*nodeSystemInfoPatchPtrType)(v)
}

func (*nodeSystemInfoPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSystemInfoPatch)(nil)).Elem()
}

func (i *nodeSystemInfoPatchPtrType) ToNodeSystemInfoPatchPtrOutput() NodeSystemInfoPatchPtrOutput {
	return i.ToNodeSystemInfoPatchPtrOutputWithContext(context.Background())
}

func (i *nodeSystemInfoPatchPtrType) ToNodeSystemInfoPatchPtrOutputWithContext(ctx context.Context) NodeSystemInfoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSystemInfoPatchPtrOutput)
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type NodeSystemInfoPatchOutput struct{ *pulumi.OutputState }

func (NodeSystemInfoPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSystemInfoPatch)(nil)).Elem()
}

func (o NodeSystemInfoPatchOutput) ToNodeSystemInfoPatchOutput() NodeSystemInfoPatchOutput {
	return o
}

func (o NodeSystemInfoPatchOutput) ToNodeSystemInfoPatchOutputWithContext(ctx context.Context) NodeSystemInfoPatchOutput {
	return o
}

func (o NodeSystemInfoPatchOutput) ToNodeSystemInfoPatchPtrOutput() NodeSystemInfoPatchPtrOutput {
	return o.ToNodeSystemInfoPatchPtrOutputWithContext(context.Background())
}

func (o NodeSystemInfoPatchOutput) ToNodeSystemInfoPatchPtrOutputWithContext(ctx context.Context) NodeSystemInfoPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeSystemInfoPatch) *NodeSystemInfoPatch {
		return &v
	}).(NodeSystemInfoPatchPtrOutput)
}

// The Architecture reported by the node
func (o NodeSystemInfoPatchOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// Boot ID reported by the node.
func (o NodeSystemInfoPatchOutput) BootID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.BootID }).(pulumi.StringPtrOutput)
}

// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
func (o NodeSystemInfoPatchOutput) ContainerRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.ContainerRuntimeVersion }).(pulumi.StringPtrOutput)
}

// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
func (o NodeSystemInfoPatchOutput) KernelVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.KernelVersion }).(pulumi.StringPtrOutput)
}

// KubeProxy Version reported by the node.
func (o NodeSystemInfoPatchOutput) KubeProxyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.KubeProxyVersion }).(pulumi.StringPtrOutput)
}

// Kubelet Version reported by the node.
func (o NodeSystemInfoPatchOutput) KubeletVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.KubeletVersion }).(pulumi.StringPtrOutput)
}

// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
func (o NodeSystemInfoPatchOutput) MachineID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.MachineID }).(pulumi.StringPtrOutput)
}

// The Operating System reported by the node
func (o NodeSystemInfoPatchOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.OperatingSystem }).(pulumi.StringPtrOutput)
}

// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
func (o NodeSystemInfoPatchOutput) OsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.OsImage }).(pulumi.StringPtrOutput)
}

// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
func (o NodeSystemInfoPatchOutput) SystemUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSystemInfoPatch) *string { return v.SystemUUID }).(pulumi.StringPtrOutput)
}

type NodeSystemInfoPatchPtrOutput struct{ *pulumi.OutputState }

func (NodeSystemInfoPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSystemInfoPatch)(nil)).Elem()
}

func (o NodeSystemInfoPatchPtrOutput) ToNodeSystemInfoPatchPtrOutput() NodeSystemInfoPatchPtrOutput {
	return o
}

func (o NodeSystemInfoPatchPtrOutput) ToNodeSystemInfoPatchPtrOutputWithContext(ctx context.Context) NodeSystemInfoPatchPtrOutput {
	return o
}

func (o NodeSystemInfoPatchPtrOutput) Elem() NodeSystemInfoPatchOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) NodeSystemInfoPatch {
		if v != nil {
			return *v
		}
		var ret NodeSystemInfoPatch
		return ret
	}).(NodeSystemInfoPatchOutput)
}

// The Architecture reported by the node
func (o NodeSystemInfoPatchPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// Boot ID reported by the node.
func (o NodeSystemInfoPatchPtrOutput) BootID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.BootID
	}).(pulumi.StringPtrOutput)
}

// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
func (o NodeSystemInfoPatchPtrOutput) ContainerRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerRuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
func (o NodeSystemInfoPatchPtrOutput) KernelVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.KernelVersion
	}).(pulumi.StringPtrOutput)
}

// KubeProxy Version reported by the node.
func (o NodeSystemInfoPatchPtrOutput) KubeProxyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.KubeProxyVersion
	}).(pulumi.StringPtrOutput)
}

// Kubelet Version reported by the node.
func (o NodeSystemInfoPatchPtrOutput) KubeletVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.KubeletVersion
	}).(pulumi.StringPtrOutput)
}

// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
func (o NodeSystemInfoPatchPtrOutput) MachineID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.MachineID
	}).(pulumi.StringPtrOutput)
}

// The Operating System reported by the node
func (o NodeSystemInfoPatchPtrOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystem
	}).(pulumi.StringPtrOutput)
}

// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
func (o NodeSystemInfoPatchPtrOutput) OsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.OsImage
	}).(pulumi.StringPtrOutput)
}

// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
func (o NodeSystemInfoPatchPtrOutput) SystemUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeSystemInfoPatch) *string {
		if v == nil {
			return nil
		}
		return v.SystemUUID
	}).(pulumi.StringPtrOutput)
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelector struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// ObjectFieldSelectorInput is an input type that accepts ObjectFieldSelectorArgs and ObjectFieldSelectorOutput values.
// You can construct a concrete instance of `ObjectFieldSelectorInput` via:
//
//	ObjectFieldSelectorArgs{...}
type ObjectFieldSelectorInput interface {
	pulumi.Input

	ToObjectFieldSelectorOutput() ObjectFieldSelectorOutput
	ToObjectFieldSelectorOutputWithContext(context.Context) ObjectFieldSelectorOutput
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelectorArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (ObjectFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectFieldSelector)(nil)).Elem()
}

func (i ObjectFieldSelectorArgs) ToObjectFieldSelectorOutput() ObjectFieldSelectorOutput {
	return i.ToObjectFieldSelectorOutputWithContext(context.Background())
}

func (i ObjectFieldSelectorArgs) ToObjectFieldSelectorOutputWithContext(ctx context.Context) ObjectFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorOutput)
}

func (i ObjectFieldSelectorArgs) ToObjectFieldSelectorPtrOutput() ObjectFieldSelectorPtrOutput {
	return i.ToObjectFieldSelectorPtrOutputWithContext(context.Background())
}

func (i ObjectFieldSelectorArgs) ToObjectFieldSelectorPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorOutput).ToObjectFieldSelectorPtrOutputWithContext(ctx)
}

// ObjectFieldSelectorPtrInput is an input type that accepts ObjectFieldSelectorArgs, ObjectFieldSelectorPtr and ObjectFieldSelectorPtrOutput values.
// You can construct a concrete instance of `ObjectFieldSelectorPtrInput` via:
//
//	        ObjectFieldSelectorArgs{...}
//
//	or:
//
//	        nil
type ObjectFieldSelectorPtrInput interface {
	pulumi.Input

	ToObjectFieldSelectorPtrOutput() ObjectFieldSelectorPtrOutput
	ToObjectFieldSelectorPtrOutputWithContext(context.Context) ObjectFieldSelectorPtrOutput
}

type objectFieldSelectorPtrType ObjectFieldSelectorArgs

func ObjectFieldSelectorPtr(v *ObjectFieldSelectorArgs) ObjectFieldSelectorPtrInput {
	return (*objectFieldSelectorPtrType)(v)
}

func (*objectFieldSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectFieldSelector)(nil)).Elem()
}

func (i *objectFieldSelectorPtrType) ToObjectFieldSelectorPtrOutput() ObjectFieldSelectorPtrOutput {
	return i.ToObjectFieldSelectorPtrOutputWithContext(context.Background())
}

func (i *objectFieldSelectorPtrType) ToObjectFieldSelectorPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorPtrOutput)
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelectorOutput struct{ *pulumi.OutputState }

func (ObjectFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectFieldSelector)(nil)).Elem()
}

func (o ObjectFieldSelectorOutput) ToObjectFieldSelectorOutput() ObjectFieldSelectorOutput {
	return o
}

func (o ObjectFieldSelectorOutput) ToObjectFieldSelectorOutputWithContext(ctx context.Context) ObjectFieldSelectorOutput {
	return o
}

func (o ObjectFieldSelectorOutput) ToObjectFieldSelectorPtrOutput() ObjectFieldSelectorPtrOutput {
	return o.ToObjectFieldSelectorPtrOutputWithContext(context.Background())
}

func (o ObjectFieldSelectorOutput) ToObjectFieldSelectorPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectFieldSelector) *ObjectFieldSelector {
		return &v
	}).(ObjectFieldSelectorPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ObjectFieldSelectorOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectFieldSelector) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ObjectFieldSelectorOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectFieldSelector) string { return v.FieldPath }).(pulumi.StringOutput)
}

type ObjectFieldSelectorPtrOutput struct{ *pulumi.OutputState }

func (ObjectFieldSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectFieldSelector)(nil)).Elem()
}

func (o ObjectFieldSelectorPtrOutput) ToObjectFieldSelectorPtrOutput() ObjectFieldSelectorPtrOutput {
	return o
}

func (o ObjectFieldSelectorPtrOutput) ToObjectFieldSelectorPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPtrOutput {
	return o
}

func (o ObjectFieldSelectorPtrOutput) Elem() ObjectFieldSelectorOutput {
	return o.ApplyT(func(v *ObjectFieldSelector) ObjectFieldSelector {
		if v != nil {
			return *v
		}
		var ret ObjectFieldSelector
		return ret
	}).(ObjectFieldSelectorOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ObjectFieldSelectorPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectFieldSelector) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ObjectFieldSelectorPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectFieldSelector) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelectorPatch struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// ObjectFieldSelectorPatchInput is an input type that accepts ObjectFieldSelectorPatchArgs and ObjectFieldSelectorPatchOutput values.
// You can construct a concrete instance of `ObjectFieldSelectorPatchInput` via:
//
//	ObjectFieldSelectorPatchArgs{...}
type ObjectFieldSelectorPatchInput interface {
	pulumi.Input

	ToObjectFieldSelectorPatchOutput() ObjectFieldSelectorPatchOutput
	ToObjectFieldSelectorPatchOutputWithContext(context.Context) ObjectFieldSelectorPatchOutput
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelectorPatchArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ObjectFieldSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectFieldSelectorPatch)(nil)).Elem()
}

func (i ObjectFieldSelectorPatchArgs) ToObjectFieldSelectorPatchOutput() ObjectFieldSelectorPatchOutput {
	return i.ToObjectFieldSelectorPatchOutputWithContext(context.Background())
}

func (i ObjectFieldSelectorPatchArgs) ToObjectFieldSelectorPatchOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorPatchOutput)
}

func (i ObjectFieldSelectorPatchArgs) ToObjectFieldSelectorPatchPtrOutput() ObjectFieldSelectorPatchPtrOutput {
	return i.ToObjectFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ObjectFieldSelectorPatchArgs) ToObjectFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorPatchOutput).ToObjectFieldSelectorPatchPtrOutputWithContext(ctx)
}

// ObjectFieldSelectorPatchPtrInput is an input type that accepts ObjectFieldSelectorPatchArgs, ObjectFieldSelectorPatchPtr and ObjectFieldSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ObjectFieldSelectorPatchPtrInput` via:
//
//	        ObjectFieldSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ObjectFieldSelectorPatchPtrInput interface {
	pulumi.Input

	ToObjectFieldSelectorPatchPtrOutput() ObjectFieldSelectorPatchPtrOutput
	ToObjectFieldSelectorPatchPtrOutputWithContext(context.Context) ObjectFieldSelectorPatchPtrOutput
}

type objectFieldSelectorPatchPtrType ObjectFieldSelectorPatchArgs

func ObjectFieldSelectorPatchPtr(v *ObjectFieldSelectorPatchArgs) ObjectFieldSelectorPatchPtrInput {
	return (*objectFieldSelectorPatchPtrType)(v)
}

func (*objectFieldSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectFieldSelectorPatch)(nil)).Elem()
}

func (i *objectFieldSelectorPatchPtrType) ToObjectFieldSelectorPatchPtrOutput() ObjectFieldSelectorPatchPtrOutput {
	return i.ToObjectFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *objectFieldSelectorPatchPtrType) ToObjectFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectFieldSelectorPatchPtrOutput)
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelectorPatchOutput struct{ *pulumi.OutputState }

func (ObjectFieldSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectFieldSelectorPatch)(nil)).Elem()
}

func (o ObjectFieldSelectorPatchOutput) ToObjectFieldSelectorPatchOutput() ObjectFieldSelectorPatchOutput {
	return o
}

func (o ObjectFieldSelectorPatchOutput) ToObjectFieldSelectorPatchOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchOutput {
	return o
}

func (o ObjectFieldSelectorPatchOutput) ToObjectFieldSelectorPatchPtrOutput() ObjectFieldSelectorPatchPtrOutput {
	return o.ToObjectFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ObjectFieldSelectorPatchOutput) ToObjectFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectFieldSelectorPatch) *ObjectFieldSelectorPatch {
		return &v
	}).(ObjectFieldSelectorPatchPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ObjectFieldSelectorPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectFieldSelectorPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ObjectFieldSelectorPatchOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectFieldSelectorPatch) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ObjectFieldSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ObjectFieldSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectFieldSelectorPatch)(nil)).Elem()
}

func (o ObjectFieldSelectorPatchPtrOutput) ToObjectFieldSelectorPatchPtrOutput() ObjectFieldSelectorPatchPtrOutput {
	return o
}

func (o ObjectFieldSelectorPatchPtrOutput) ToObjectFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ObjectFieldSelectorPatchPtrOutput {
	return o
}

func (o ObjectFieldSelectorPatchPtrOutput) Elem() ObjectFieldSelectorPatchOutput {
	return o.ApplyT(func(v *ObjectFieldSelectorPatch) ObjectFieldSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ObjectFieldSelectorPatch
		return ret
	}).(ObjectFieldSelectorPatchOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ObjectFieldSelectorPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectFieldSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ObjectFieldSelectorPatchPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectFieldSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ObjectReferenceInput is an input type that accepts ObjectReferenceArgs and ObjectReferenceOutput values.
// You can construct a concrete instance of `ObjectReferenceInput` via:
//
//	ObjectReferenceArgs{...}
type ObjectReferenceInput interface {
	pulumi.Input

	ToObjectReferenceOutput() ObjectReferenceOutput
	ToObjectReferenceOutputWithContext(context.Context) ObjectReferenceOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReference)(nil)).Elem()
}

func (i ObjectReferenceArgs) ToObjectReferenceOutput() ObjectReferenceOutput {
	return i.ToObjectReferenceOutputWithContext(context.Background())
}

func (i ObjectReferenceArgs) ToObjectReferenceOutputWithContext(ctx context.Context) ObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferenceOutput)
}

func (i ObjectReferenceArgs) ToObjectReferencePtrOutput() ObjectReferencePtrOutput {
	return i.ToObjectReferencePtrOutputWithContext(context.Background())
}

func (i ObjectReferenceArgs) ToObjectReferencePtrOutputWithContext(ctx context.Context) ObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferenceOutput).ToObjectReferencePtrOutputWithContext(ctx)
}

// ObjectReferencePtrInput is an input type that accepts ObjectReferenceArgs, ObjectReferencePtr and ObjectReferencePtrOutput values.
// You can construct a concrete instance of `ObjectReferencePtrInput` via:
//
//	        ObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type ObjectReferencePtrInput interface {
	pulumi.Input

	ToObjectReferencePtrOutput() ObjectReferencePtrOutput
	ToObjectReferencePtrOutputWithContext(context.Context) ObjectReferencePtrOutput
}

type objectReferencePtrType ObjectReferenceArgs

func ObjectReferencePtr(v *ObjectReferenceArgs) ObjectReferencePtrInput {
	return (*objectReferencePtrType)(v)
}

func (*objectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReference)(nil)).Elem()
}

func (i *objectReferencePtrType) ToObjectReferencePtrOutput() ObjectReferencePtrOutput {
	return i.ToObjectReferencePtrOutputWithContext(context.Background())
}

func (i *objectReferencePtrType) ToObjectReferencePtrOutputWithContext(ctx context.Context) ObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferencePtrOutput)
}

// ObjectReferenceArrayInput is an input type that accepts ObjectReferenceArray and ObjectReferenceArrayOutput values.
// You can construct a concrete instance of `ObjectReferenceArrayInput` via:
//
//	ObjectReferenceArray{ ObjectReferenceArgs{...} }
type ObjectReferenceArrayInput interface {
	pulumi.Input

	ToObjectReferenceArrayOutput() ObjectReferenceArrayOutput
	ToObjectReferenceArrayOutputWithContext(context.Context) ObjectReferenceArrayOutput
}

type ObjectReferenceArray []ObjectReferenceInput

func (ObjectReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectReference)(nil)).Elem()
}

func (i ObjectReferenceArray) ToObjectReferenceArrayOutput() ObjectReferenceArrayOutput {
	return i.ToObjectReferenceArrayOutputWithContext(context.Background())
}

func (i ObjectReferenceArray) ToObjectReferenceArrayOutputWithContext(ctx context.Context) ObjectReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferenceArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReferenceOutput struct{ *pulumi.OutputState }

func (ObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReference)(nil)).Elem()
}

func (o ObjectReferenceOutput) ToObjectReferenceOutput() ObjectReferenceOutput {
	return o
}

func (o ObjectReferenceOutput) ToObjectReferenceOutputWithContext(ctx context.Context) ObjectReferenceOutput {
	return o
}

func (o ObjectReferenceOutput) ToObjectReferencePtrOutput() ObjectReferencePtrOutput {
	return o.ToObjectReferencePtrOutputWithContext(context.Background())
}

func (o ObjectReferenceOutput) ToObjectReferencePtrOutputWithContext(ctx context.Context) ObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectReference) *ObjectReference {
		return &v
	}).(ObjectReferencePtrOutput)
}

// API version of the referent.
func (o ObjectReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
func (o ObjectReferenceOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ObjectReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectReferenceOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ObjectReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (ObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReference)(nil)).Elem()
}

func (o ObjectReferencePtrOutput) ToObjectReferencePtrOutput() ObjectReferencePtrOutput {
	return o
}

func (o ObjectReferencePtrOutput) ToObjectReferencePtrOutputWithContext(ctx context.Context) ObjectReferencePtrOutput {
	return o
}

func (o ObjectReferencePtrOutput) Elem() ObjectReferenceOutput {
	return o.ApplyT(func(v *ObjectReference) ObjectReference {
		if v != nil {
			return *v
		}
		var ret ObjectReference
		return ret
	}).(ObjectReferenceOutput)
}

// API version of the referent.
func (o ObjectReferencePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
func (o ObjectReferencePtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ObjectReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectReferencePtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ObjectReferencePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type ObjectReferenceArrayOutput struct{ *pulumi.OutputState }

func (ObjectReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectReference)(nil)).Elem()
}

func (o ObjectReferenceArrayOutput) ToObjectReferenceArrayOutput() ObjectReferenceArrayOutput {
	return o
}

func (o ObjectReferenceArrayOutput) ToObjectReferenceArrayOutputWithContext(ctx context.Context) ObjectReferenceArrayOutput {
	return o
}

func (o ObjectReferenceArrayOutput) Index(i pulumi.IntInput) ObjectReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectReference {
		return vs[0].([]ObjectReference)[vs[1].(int)]
	}).(ObjectReferenceOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReferencePatch struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ObjectReferencePatchInput is an input type that accepts ObjectReferencePatchArgs and ObjectReferencePatchOutput values.
// You can construct a concrete instance of `ObjectReferencePatchInput` via:
//
//	ObjectReferencePatchArgs{...}
type ObjectReferencePatchInput interface {
	pulumi.Input

	ToObjectReferencePatchOutput() ObjectReferencePatchOutput
	ToObjectReferencePatchOutputWithContext(context.Context) ObjectReferencePatchOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReferencePatchArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReferencePatch)(nil)).Elem()
}

func (i ObjectReferencePatchArgs) ToObjectReferencePatchOutput() ObjectReferencePatchOutput {
	return i.ToObjectReferencePatchOutputWithContext(context.Background())
}

func (i ObjectReferencePatchArgs) ToObjectReferencePatchOutputWithContext(ctx context.Context) ObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferencePatchOutput)
}

func (i ObjectReferencePatchArgs) ToObjectReferencePatchPtrOutput() ObjectReferencePatchPtrOutput {
	return i.ToObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i ObjectReferencePatchArgs) ToObjectReferencePatchPtrOutputWithContext(ctx context.Context) ObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferencePatchOutput).ToObjectReferencePatchPtrOutputWithContext(ctx)
}

// ObjectReferencePatchPtrInput is an input type that accepts ObjectReferencePatchArgs, ObjectReferencePatchPtr and ObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `ObjectReferencePatchPtrInput` via:
//
//	        ObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToObjectReferencePatchPtrOutput() ObjectReferencePatchPtrOutput
	ToObjectReferencePatchPtrOutputWithContext(context.Context) ObjectReferencePatchPtrOutput
}

type objectReferencePatchPtrType ObjectReferencePatchArgs

func ObjectReferencePatchPtr(v *ObjectReferencePatchArgs) ObjectReferencePatchPtrInput {
	return (*objectReferencePatchPtrType)(v)
}

func (*objectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReferencePatch)(nil)).Elem()
}

func (i *objectReferencePatchPtrType) ToObjectReferencePatchPtrOutput() ObjectReferencePatchPtrOutput {
	return i.ToObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *objectReferencePatchPtrType) ToObjectReferencePatchPtrOutputWithContext(ctx context.Context) ObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferencePatchPtrOutput)
}

// ObjectReferencePatchArrayInput is an input type that accepts ObjectReferencePatchArray and ObjectReferencePatchArrayOutput values.
// You can construct a concrete instance of `ObjectReferencePatchArrayInput` via:
//
//	ObjectReferencePatchArray{ ObjectReferencePatchArgs{...} }
type ObjectReferencePatchArrayInput interface {
	pulumi.Input

	ToObjectReferencePatchArrayOutput() ObjectReferencePatchArrayOutput
	ToObjectReferencePatchArrayOutputWithContext(context.Context) ObjectReferencePatchArrayOutput
}

type ObjectReferencePatchArray []ObjectReferencePatchInput

func (ObjectReferencePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectReferencePatch)(nil)).Elem()
}

func (i ObjectReferencePatchArray) ToObjectReferencePatchArrayOutput() ObjectReferencePatchArrayOutput {
	return i.ToObjectReferencePatchArrayOutputWithContext(context.Background())
}

func (i ObjectReferencePatchArray) ToObjectReferencePatchArrayOutputWithContext(ctx context.Context) ObjectReferencePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectReferencePatchArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type ObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (ObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReferencePatch)(nil)).Elem()
}

func (o ObjectReferencePatchOutput) ToObjectReferencePatchOutput() ObjectReferencePatchOutput {
	return o
}

func (o ObjectReferencePatchOutput) ToObjectReferencePatchOutputWithContext(ctx context.Context) ObjectReferencePatchOutput {
	return o
}

func (o ObjectReferencePatchOutput) ToObjectReferencePatchPtrOutput() ObjectReferencePatchPtrOutput {
	return o.ToObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o ObjectReferencePatchOutput) ToObjectReferencePatchPtrOutputWithContext(ctx context.Context) ObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectReferencePatch) *ObjectReferencePatch {
		return &v
	}).(ObjectReferencePatchPtrOutput)
}

// API version of the referent.
func (o ObjectReferencePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
func (o ObjectReferencePatchOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ObjectReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectReferencePatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ObjectReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReferencePatch)(nil)).Elem()
}

func (o ObjectReferencePatchPtrOutput) ToObjectReferencePatchPtrOutput() ObjectReferencePatchPtrOutput {
	return o
}

func (o ObjectReferencePatchPtrOutput) ToObjectReferencePatchPtrOutputWithContext(ctx context.Context) ObjectReferencePatchPtrOutput {
	return o
}

func (o ObjectReferencePatchPtrOutput) Elem() ObjectReferencePatchOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) ObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret ObjectReferencePatch
		return ret
	}).(ObjectReferencePatchOutput)
}

// API version of the referent.
func (o ObjectReferencePatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
func (o ObjectReferencePatchPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ObjectReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectReferencePatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ObjectReferencePatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type ObjectReferencePatchArrayOutput struct{ *pulumi.OutputState }

func (ObjectReferencePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectReferencePatch)(nil)).Elem()
}

func (o ObjectReferencePatchArrayOutput) ToObjectReferencePatchArrayOutput() ObjectReferencePatchArrayOutput {
	return o
}

func (o ObjectReferencePatchArrayOutput) ToObjectReferencePatchArrayOutputWithContext(ctx context.Context) ObjectReferencePatchArrayOutput {
	return o
}

func (o ObjectReferencePatchArrayOutput) Index(i pulumi.IntInput) ObjectReferencePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectReferencePatch {
		return vs[0].([]ObjectReferencePatch)[vs[1].(int)]
	}).(ObjectReferencePatchOutput)
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumeType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec *PersistentVolumeSpec `pulumi:"spec"`
	// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status *PersistentVolumeStatus `pulumi:"status"`
}

// PersistentVolumeTypeInput is an input type that accepts PersistentVolumeTypeArgs and PersistentVolumeTypeOutput values.
// You can construct a concrete instance of `PersistentVolumeTypeInput` via:
//
//	PersistentVolumeTypeArgs{...}
type PersistentVolumeTypeInput interface {
	pulumi.Input

	ToPersistentVolumeTypeOutput() PersistentVolumeTypeOutput
	ToPersistentVolumeTypeOutputWithContext(context.Context) PersistentVolumeTypeOutput
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumeTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec PersistentVolumeSpecPtrInput `pulumi:"spec"`
	// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status PersistentVolumeStatusPtrInput `pulumi:"status"`
}

func (PersistentVolumeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeType)(nil)).Elem()
}

func (i PersistentVolumeTypeArgs) ToPersistentVolumeTypeOutput() PersistentVolumeTypeOutput {
	return i.ToPersistentVolumeTypeOutputWithContext(context.Background())
}

func (i PersistentVolumeTypeArgs) ToPersistentVolumeTypeOutputWithContext(ctx context.Context) PersistentVolumeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeTypeOutput)
}

// PersistentVolumeTypeArrayInput is an input type that accepts PersistentVolumeTypeArray and PersistentVolumeTypeArrayOutput values.
// You can construct a concrete instance of `PersistentVolumeTypeArrayInput` via:
//
//	PersistentVolumeTypeArray{ PersistentVolumeTypeArgs{...} }
type PersistentVolumeTypeArrayInput interface {
	pulumi.Input

	ToPersistentVolumeTypeArrayOutput() PersistentVolumeTypeArrayOutput
	ToPersistentVolumeTypeArrayOutputWithContext(context.Context) PersistentVolumeTypeArrayOutput
}

type PersistentVolumeTypeArray []PersistentVolumeTypeInput

func (PersistentVolumeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeType)(nil)).Elem()
}

func (i PersistentVolumeTypeArray) ToPersistentVolumeTypeArrayOutput() PersistentVolumeTypeArrayOutput {
	return i.ToPersistentVolumeTypeArrayOutputWithContext(context.Background())
}

func (i PersistentVolumeTypeArray) ToPersistentVolumeTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeTypeArrayOutput)
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumeTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeType)(nil)).Elem()
}

func (o PersistentVolumeTypeOutput) ToPersistentVolumeTypeOutput() PersistentVolumeTypeOutput {
	return o
}

func (o PersistentVolumeTypeOutput) ToPersistentVolumeTypeOutputWithContext(ctx context.Context) PersistentVolumeTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PersistentVolumeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PersistentVolumeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (o PersistentVolumeTypeOutput) Spec() PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func(v PersistentVolumeType) *PersistentVolumeSpec { return v.Spec }).(PersistentVolumeSpecPtrOutput)
}

// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (o PersistentVolumeTypeOutput) Status() PersistentVolumeStatusPtrOutput {
	return o.ApplyT(func(v PersistentVolumeType) *PersistentVolumeStatus { return v.Status }).(PersistentVolumeStatusPtrOutput)
}

type PersistentVolumeTypeArrayOutput struct{ *pulumi.OutputState }

func (PersistentVolumeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeType)(nil)).Elem()
}

func (o PersistentVolumeTypeArrayOutput) ToPersistentVolumeTypeArrayOutput() PersistentVolumeTypeArrayOutput {
	return o
}

func (o PersistentVolumeTypeArrayOutput) ToPersistentVolumeTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeTypeArrayOutput {
	return o
}

func (o PersistentVolumeTypeArrayOutput) Index(i pulumi.IntInput) PersistentVolumeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentVolumeType {
		return vs[0].([]PersistentVolumeType)[vs[1].(int)]
	}).(PersistentVolumeTypeOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec *PersistentVolumeClaimSpec `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status *PersistentVolumeClaimStatus `pulumi:"status"`
}

// PersistentVolumeClaimTypeInput is an input type that accepts PersistentVolumeClaimTypeArgs and PersistentVolumeClaimTypeOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTypeInput` via:
//
//	PersistentVolumeClaimTypeArgs{...}
type PersistentVolumeClaimTypeInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTypeOutput() PersistentVolumeClaimTypeOutput
	ToPersistentVolumeClaimTypeOutputWithContext(context.Context) PersistentVolumeClaimTypeOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec PersistentVolumeClaimSpecPtrInput `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status PersistentVolumeClaimStatusPtrInput `pulumi:"status"`
}

func (PersistentVolumeClaimTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimType)(nil)).Elem()
}

func (i PersistentVolumeClaimTypeArgs) ToPersistentVolumeClaimTypeOutput() PersistentVolumeClaimTypeOutput {
	return i.ToPersistentVolumeClaimTypeOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTypeArgs) ToPersistentVolumeClaimTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTypeOutput)
}

// PersistentVolumeClaimTypeArrayInput is an input type that accepts PersistentVolumeClaimTypeArray and PersistentVolumeClaimTypeArrayOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTypeArrayInput` via:
//
//	PersistentVolumeClaimTypeArray{ PersistentVolumeClaimTypeArgs{...} }
type PersistentVolumeClaimTypeArrayInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTypeArrayOutput() PersistentVolumeClaimTypeArrayOutput
	ToPersistentVolumeClaimTypeArrayOutputWithContext(context.Context) PersistentVolumeClaimTypeArrayOutput
}

type PersistentVolumeClaimTypeArray []PersistentVolumeClaimTypeInput

func (PersistentVolumeClaimTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimType)(nil)).Elem()
}

func (i PersistentVolumeClaimTypeArray) ToPersistentVolumeClaimTypeArrayOutput() PersistentVolumeClaimTypeArrayOutput {
	return i.ToPersistentVolumeClaimTypeArrayOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTypeArray) ToPersistentVolumeClaimTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTypeArrayOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimType)(nil)).Elem()
}

func (o PersistentVolumeClaimTypeOutput) ToPersistentVolumeClaimTypeOutput() PersistentVolumeClaimTypeOutput {
	return o
}

func (o PersistentVolumeClaimTypeOutput) ToPersistentVolumeClaimTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumeClaimTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeClaimTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PersistentVolumeClaimTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimTypeOutput) Spec() PersistentVolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimType) *PersistentVolumeClaimSpec { return v.Spec }).(PersistentVolumeClaimSpecPtrOutput)
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimTypeOutput) Status() PersistentVolumeClaimStatusPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimType) *PersistentVolumeClaimStatus { return v.Status }).(PersistentVolumeClaimStatusPtrOutput)
}

type PersistentVolumeClaimTypeArrayOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimType)(nil)).Elem()
}

func (o PersistentVolumeClaimTypeArrayOutput) ToPersistentVolumeClaimTypeArrayOutput() PersistentVolumeClaimTypeArrayOutput {
	return o
}

func (o PersistentVolumeClaimTypeArrayOutput) ToPersistentVolumeClaimTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimTypeArrayOutput {
	return o
}

func (o PersistentVolumeClaimTypeArrayOutput) Index(i pulumi.IntInput) PersistentVolumeClaimTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentVolumeClaimType {
		return vs[0].([]PersistentVolumeClaimType)[vs[1].(int)]
	}).(PersistentVolumeClaimTypeOutput)
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimCondition struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	Type   string  `pulumi:"type"`
}

// PersistentVolumeClaimConditionInput is an input type that accepts PersistentVolumeClaimConditionArgs and PersistentVolumeClaimConditionOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimConditionInput` via:
//
//	PersistentVolumeClaimConditionArgs{...}
type PersistentVolumeClaimConditionInput interface {
	pulumi.Input

	ToPersistentVolumeClaimConditionOutput() PersistentVolumeClaimConditionOutput
	ToPersistentVolumeClaimConditionOutputWithContext(context.Context) PersistentVolumeClaimConditionOutput
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimConditionArgs struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (PersistentVolumeClaimConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimCondition)(nil)).Elem()
}

func (i PersistentVolumeClaimConditionArgs) ToPersistentVolumeClaimConditionOutput() PersistentVolumeClaimConditionOutput {
	return i.ToPersistentVolumeClaimConditionOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimConditionArgs) ToPersistentVolumeClaimConditionOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimConditionOutput)
}

// PersistentVolumeClaimConditionArrayInput is an input type that accepts PersistentVolumeClaimConditionArray and PersistentVolumeClaimConditionArrayOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimConditionArrayInput` via:
//
//	PersistentVolumeClaimConditionArray{ PersistentVolumeClaimConditionArgs{...} }
type PersistentVolumeClaimConditionArrayInput interface {
	pulumi.Input

	ToPersistentVolumeClaimConditionArrayOutput() PersistentVolumeClaimConditionArrayOutput
	ToPersistentVolumeClaimConditionArrayOutputWithContext(context.Context) PersistentVolumeClaimConditionArrayOutput
}

type PersistentVolumeClaimConditionArray []PersistentVolumeClaimConditionInput

func (PersistentVolumeClaimConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimCondition)(nil)).Elem()
}

func (i PersistentVolumeClaimConditionArray) ToPersistentVolumeClaimConditionArrayOutput() PersistentVolumeClaimConditionArrayOutput {
	return i.ToPersistentVolumeClaimConditionArrayOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimConditionArray) ToPersistentVolumeClaimConditionArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimConditionArrayOutput)
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimConditionOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimCondition)(nil)).Elem()
}

func (o PersistentVolumeClaimConditionOutput) ToPersistentVolumeClaimConditionOutput() PersistentVolumeClaimConditionOutput {
	return o
}

func (o PersistentVolumeClaimConditionOutput) ToPersistentVolumeClaimConditionOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionOutput {
	return o
}

// lastProbeTime is the time we probed the condition.
func (o PersistentVolumeClaimConditionOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// lastTransitionTime is the time the condition transitioned from one status to another.
func (o PersistentVolumeClaimConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is the human-readable message indicating details about last transition.
func (o PersistentVolumeClaimConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
func (o PersistentVolumeClaimConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o PersistentVolumeClaimConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) string { return v.Status }).(pulumi.StringOutput)
}

func (o PersistentVolumeClaimConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentVolumeClaimCondition) string { return v.Type }).(pulumi.StringOutput)
}

type PersistentVolumeClaimConditionArrayOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimCondition)(nil)).Elem()
}

func (o PersistentVolumeClaimConditionArrayOutput) ToPersistentVolumeClaimConditionArrayOutput() PersistentVolumeClaimConditionArrayOutput {
	return o
}

func (o PersistentVolumeClaimConditionArrayOutput) ToPersistentVolumeClaimConditionArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionArrayOutput {
	return o
}

func (o PersistentVolumeClaimConditionArrayOutput) Index(i pulumi.IntInput) PersistentVolumeClaimConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentVolumeClaimCondition {
		return vs[0].([]PersistentVolumeClaimCondition)[vs[1].(int)]
	}).(PersistentVolumeClaimConditionOutput)
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimConditionPatch struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	Status *string `pulumi:"status"`
	Type   *string `pulumi:"type"`
}

// PersistentVolumeClaimConditionPatchInput is an input type that accepts PersistentVolumeClaimConditionPatchArgs and PersistentVolumeClaimConditionPatchOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimConditionPatchInput` via:
//
//	PersistentVolumeClaimConditionPatchArgs{...}
type PersistentVolumeClaimConditionPatchInput interface {
	pulumi.Input

	ToPersistentVolumeClaimConditionPatchOutput() PersistentVolumeClaimConditionPatchOutput
	ToPersistentVolumeClaimConditionPatchOutputWithContext(context.Context) PersistentVolumeClaimConditionPatchOutput
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimConditionPatchArgs struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringPtrInput `pulumi:"status"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (PersistentVolumeClaimConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimConditionPatch)(nil)).Elem()
}

func (i PersistentVolumeClaimConditionPatchArgs) ToPersistentVolumeClaimConditionPatchOutput() PersistentVolumeClaimConditionPatchOutput {
	return i.ToPersistentVolumeClaimConditionPatchOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimConditionPatchArgs) ToPersistentVolumeClaimConditionPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimConditionPatchOutput)
}

// PersistentVolumeClaimConditionPatchArrayInput is an input type that accepts PersistentVolumeClaimConditionPatchArray and PersistentVolumeClaimConditionPatchArrayOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimConditionPatchArrayInput` via:
//
//	PersistentVolumeClaimConditionPatchArray{ PersistentVolumeClaimConditionPatchArgs{...} }
type PersistentVolumeClaimConditionPatchArrayInput interface {
	pulumi.Input

	ToPersistentVolumeClaimConditionPatchArrayOutput() PersistentVolumeClaimConditionPatchArrayOutput
	ToPersistentVolumeClaimConditionPatchArrayOutputWithContext(context.Context) PersistentVolumeClaimConditionPatchArrayOutput
}

type PersistentVolumeClaimConditionPatchArray []PersistentVolumeClaimConditionPatchInput

func (PersistentVolumeClaimConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimConditionPatch)(nil)).Elem()
}

func (i PersistentVolumeClaimConditionPatchArray) ToPersistentVolumeClaimConditionPatchArrayOutput() PersistentVolumeClaimConditionPatchArrayOutput {
	return i.ToPersistentVolumeClaimConditionPatchArrayOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimConditionPatchArray) ToPersistentVolumeClaimConditionPatchArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimConditionPatchArrayOutput)
}

// PersistentVolumeClaimCondition contails details about state of pvc
type PersistentVolumeClaimConditionPatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimConditionPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimConditionPatchOutput) ToPersistentVolumeClaimConditionPatchOutput() PersistentVolumeClaimConditionPatchOutput {
	return o
}

func (o PersistentVolumeClaimConditionPatchOutput) ToPersistentVolumeClaimConditionPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionPatchOutput {
	return o
}

// lastProbeTime is the time we probed the condition.
func (o PersistentVolumeClaimConditionPatchOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// lastTransitionTime is the time the condition transitioned from one status to another.
func (o PersistentVolumeClaimConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is the human-readable message indicating details about last transition.
func (o PersistentVolumeClaimConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
func (o PersistentVolumeClaimConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o PersistentVolumeClaimConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o PersistentVolumeClaimConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PersistentVolumeClaimConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimConditionPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimConditionPatchArrayOutput) ToPersistentVolumeClaimConditionPatchArrayOutput() PersistentVolumeClaimConditionPatchArrayOutput {
	return o
}

func (o PersistentVolumeClaimConditionPatchArrayOutput) ToPersistentVolumeClaimConditionPatchArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimConditionPatchArrayOutput {
	return o
}

func (o PersistentVolumeClaimConditionPatchArrayOutput) Index(i pulumi.IntInput) PersistentVolumeClaimConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentVolumeClaimConditionPatch {
		return vs[0].([]PersistentVolumeClaimConditionPatch)[vs[1].(int)]
	}).(PersistentVolumeClaimConditionPatchOutput)
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
type PersistentVolumeClaimListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Items []PersistentVolumeClaimType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PersistentVolumeClaimListTypeInput is an input type that accepts PersistentVolumeClaimListTypeArgs and PersistentVolumeClaimListTypeOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimListTypeInput` via:
//
//	PersistentVolumeClaimListTypeArgs{...}
type PersistentVolumeClaimListTypeInput interface {
	pulumi.Input

	ToPersistentVolumeClaimListTypeOutput() PersistentVolumeClaimListTypeOutput
	ToPersistentVolumeClaimListTypeOutputWithContext(context.Context) PersistentVolumeClaimListTypeOutput
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
type PersistentVolumeClaimListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Items PersistentVolumeClaimTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PersistentVolumeClaimListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimListType)(nil)).Elem()
}

func (i PersistentVolumeClaimListTypeArgs) ToPersistentVolumeClaimListTypeOutput() PersistentVolumeClaimListTypeOutput {
	return i.ToPersistentVolumeClaimListTypeOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimListTypeArgs) ToPersistentVolumeClaimListTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimListTypeOutput)
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
type PersistentVolumeClaimListTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimListType)(nil)).Elem()
}

func (o PersistentVolumeClaimListTypeOutput) ToPersistentVolumeClaimListTypeOutput() PersistentVolumeClaimListTypeOutput {
	return o
}

func (o PersistentVolumeClaimListTypeOutput) ToPersistentVolumeClaimListTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumeClaimListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimListTypeOutput) Items() PersistentVolumeClaimTypeArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimListType) []PersistentVolumeClaimType { return v.Items }).(PersistentVolumeClaimTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeClaimListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeClaimListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec *PersistentVolumeClaimSpecPatch `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status *PersistentVolumeClaimStatusPatch `pulumi:"status"`
}

// PersistentVolumeClaimPatchTypeInput is an input type that accepts PersistentVolumeClaimPatchTypeArgs and PersistentVolumeClaimPatchTypeOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimPatchTypeInput` via:
//
//	PersistentVolumeClaimPatchTypeArgs{...}
type PersistentVolumeClaimPatchTypeInput interface {
	pulumi.Input

	ToPersistentVolumeClaimPatchTypeOutput() PersistentVolumeClaimPatchTypeOutput
	ToPersistentVolumeClaimPatchTypeOutputWithContext(context.Context) PersistentVolumeClaimPatchTypeOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec PersistentVolumeClaimSpecPatchPtrInput `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status PersistentVolumeClaimStatusPatchPtrInput `pulumi:"status"`
}

func (PersistentVolumeClaimPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimPatchType)(nil)).Elem()
}

func (i PersistentVolumeClaimPatchTypeArgs) ToPersistentVolumeClaimPatchTypeOutput() PersistentVolumeClaimPatchTypeOutput {
	return i.ToPersistentVolumeClaimPatchTypeOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimPatchTypeArgs) ToPersistentVolumeClaimPatchTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimPatchTypeOutput)
}

// PersistentVolumeClaimPatchTypeArrayInput is an input type that accepts PersistentVolumeClaimPatchTypeArray and PersistentVolumeClaimPatchTypeArrayOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimPatchTypeArrayInput` via:
//
//	PersistentVolumeClaimPatchTypeArray{ PersistentVolumeClaimPatchTypeArgs{...} }
type PersistentVolumeClaimPatchTypeArrayInput interface {
	pulumi.Input

	ToPersistentVolumeClaimPatchTypeArrayOutput() PersistentVolumeClaimPatchTypeArrayOutput
	ToPersistentVolumeClaimPatchTypeArrayOutputWithContext(context.Context) PersistentVolumeClaimPatchTypeArrayOutput
}

type PersistentVolumeClaimPatchTypeArray []PersistentVolumeClaimPatchTypeInput

func (PersistentVolumeClaimPatchTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimPatchType)(nil)).Elem()
}

func (i PersistentVolumeClaimPatchTypeArray) ToPersistentVolumeClaimPatchTypeArrayOutput() PersistentVolumeClaimPatchTypeArrayOutput {
	return i.ToPersistentVolumeClaimPatchTypeArrayOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimPatchTypeArray) ToPersistentVolumeClaimPatchTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimPatchTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimPatchTypeArrayOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type PersistentVolumeClaimPatchTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimPatchType)(nil)).Elem()
}

func (o PersistentVolumeClaimPatchTypeOutput) ToPersistentVolumeClaimPatchTypeOutput() PersistentVolumeClaimPatchTypeOutput {
	return o
}

func (o PersistentVolumeClaimPatchTypeOutput) ToPersistentVolumeClaimPatchTypeOutputWithContext(ctx context.Context) PersistentVolumeClaimPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumeClaimPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeClaimPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PersistentVolumeClaimPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimPatchTypeOutput) Spec() PersistentVolumeClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimPatchType) *PersistentVolumeClaimSpecPatch { return v.Spec }).(PersistentVolumeClaimSpecPatchPtrOutput)
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimPatchTypeOutput) Status() PersistentVolumeClaimStatusPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimPatchType) *PersistentVolumeClaimStatusPatch { return v.Status }).(PersistentVolumeClaimStatusPatchPtrOutput)
}

type PersistentVolumeClaimPatchTypeArrayOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimPatchTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentVolumeClaimPatchType)(nil)).Elem()
}

func (o PersistentVolumeClaimPatchTypeArrayOutput) ToPersistentVolumeClaimPatchTypeArrayOutput() PersistentVolumeClaimPatchTypeArrayOutput {
	return o
}

func (o PersistentVolumeClaimPatchTypeArrayOutput) ToPersistentVolumeClaimPatchTypeArrayOutputWithContext(ctx context.Context) PersistentVolumeClaimPatchTypeArrayOutput {
	return o
}

func (o PersistentVolumeClaimPatchTypeArrayOutput) Index(i pulumi.IntInput) PersistentVolumeClaimPatchTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentVolumeClaimPatchType {
		return vs[0].([]PersistentVolumeClaimPatchType)[vs[1].(int)]
	}).(PersistentVolumeClaimPatchTypeOutput)
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource *TypedLocalObjectReference `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef *TypedObjectReference `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ResourceRequirements `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector *metav1.LabelSelector `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// PersistentVolumeClaimSpecInput is an input type that accepts PersistentVolumeClaimSpecArgs and PersistentVolumeClaimSpecOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimSpecInput` via:
//
//	PersistentVolumeClaimSpecArgs{...}
type PersistentVolumeClaimSpecInput interface {
	pulumi.Input

	ToPersistentVolumeClaimSpecOutput() PersistentVolumeClaimSpecOutput
	ToPersistentVolumeClaimSpecOutputWithContext(context.Context) PersistentVolumeClaimSpecOutput
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpecArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource TypedLocalObjectReferencePtrInput `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef TypedObjectReferencePtrInput `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsPtrInput `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector metav1.LabelSelectorPtrInput `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (PersistentVolumeClaimSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimSpec)(nil)).Elem()
}

func (i PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecOutput() PersistentVolumeClaimSpecOutput {
	return i.ToPersistentVolumeClaimSpecOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecOutput)
}

func (i PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecPtrOutput() PersistentVolumeClaimSpecPtrOutput {
	return i.ToPersistentVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimSpecArgs) ToPersistentVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecOutput).ToPersistentVolumeClaimSpecPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimSpecPtrInput is an input type that accepts PersistentVolumeClaimSpecArgs, PersistentVolumeClaimSpecPtr and PersistentVolumeClaimSpecPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimSpecPtrInput` via:
//
//	        PersistentVolumeClaimSpecArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimSpecPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimSpecPtrOutput() PersistentVolumeClaimSpecPtrOutput
	ToPersistentVolumeClaimSpecPtrOutputWithContext(context.Context) PersistentVolumeClaimSpecPtrOutput
}

type persistentVolumeClaimSpecPtrType PersistentVolumeClaimSpecArgs

func PersistentVolumeClaimSpecPtr(v *PersistentVolumeClaimSpecArgs) PersistentVolumeClaimSpecPtrInput {
	return (*persistentVolumeClaimSpecPtrType)(v)
}

func (*persistentVolumeClaimSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimSpec)(nil)).Elem()
}

func (i *persistentVolumeClaimSpecPtrType) ToPersistentVolumeClaimSpecPtrOutput() PersistentVolumeClaimSpecPtrOutput {
	return i.ToPersistentVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimSpecPtrType) ToPersistentVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecPtrOutput)
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpecOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimSpec)(nil)).Elem()
}

func (o PersistentVolumeClaimSpecOutput) ToPersistentVolumeClaimSpecOutput() PersistentVolumeClaimSpecOutput {
	return o
}

func (o PersistentVolumeClaimSpecOutput) ToPersistentVolumeClaimSpecOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecOutput {
	return o
}

func (o PersistentVolumeClaimSpecOutput) ToPersistentVolumeClaimSpecPtrOutput() PersistentVolumeClaimSpecPtrOutput {
	return o.ToPersistentVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimSpecOutput) ToPersistentVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimSpec) *PersistentVolumeClaimSpec {
		return &v
	}).(PersistentVolumeClaimSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o PersistentVolumeClaimSpecOutput) DataSource() TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *TypedLocalObjectReference { return v.DataSource }).(TypedLocalObjectReferencePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
//
//	allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o PersistentVolumeClaimSpecOutput) DataSourceRef() TypedObjectReferencePtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *TypedObjectReference { return v.DataSourceRef }).(TypedObjectReferencePtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o PersistentVolumeClaimSpecOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *ResourceRequirements { return v.Resources }).(ResourceRequirementsPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o PersistentVolumeClaimSpecOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *metav1.LabelSelector { return v.Selector }).(metav1.LabelSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PersistentVolumeClaimSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PersistentVolumeClaimSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PersistentVolumeClaimSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type PersistentVolumeClaimSpecPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimSpec)(nil)).Elem()
}

func (o PersistentVolumeClaimSpecPtrOutput) ToPersistentVolumeClaimSpecPtrOutput() PersistentVolumeClaimSpecPtrOutput {
	return o
}

func (o PersistentVolumeClaimSpecPtrOutput) ToPersistentVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPtrOutput {
	return o
}

func (o PersistentVolumeClaimSpecPtrOutput) Elem() PersistentVolumeClaimSpecOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) PersistentVolumeClaimSpec {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimSpec
		return ret
	}).(PersistentVolumeClaimSpecOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o PersistentVolumeClaimSpecPtrOutput) DataSource() TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *TypedLocalObjectReference {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(TypedLocalObjectReferencePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
//
//	allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o PersistentVolumeClaimSpecPtrOutput) DataSourceRef() TypedObjectReferencePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *TypedObjectReference {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(TypedObjectReferencePtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o PersistentVolumeClaimSpecPtrOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ResourceRequirementsPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o PersistentVolumeClaimSpecPtrOutput) Selector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PersistentVolumeClaimSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PersistentVolumeClaimSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PersistentVolumeClaimSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpecPatch struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource *TypedLocalObjectReferencePatch `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef *TypedObjectReferencePatch `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ResourceRequirementsPatch `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector *metav1.LabelSelectorPatch `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// PersistentVolumeClaimSpecPatchInput is an input type that accepts PersistentVolumeClaimSpecPatchArgs and PersistentVolumeClaimSpecPatchOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimSpecPatchInput` via:
//
//	PersistentVolumeClaimSpecPatchArgs{...}
type PersistentVolumeClaimSpecPatchInput interface {
	pulumi.Input

	ToPersistentVolumeClaimSpecPatchOutput() PersistentVolumeClaimSpecPatchOutput
	ToPersistentVolumeClaimSpecPatchOutputWithContext(context.Context) PersistentVolumeClaimSpecPatchOutput
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource TypedLocalObjectReferencePatchPtrInput `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef TypedObjectReferencePatchPtrInput `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsPatchPtrInput `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector metav1.LabelSelectorPatchPtrInput `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (PersistentVolumeClaimSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimSpecPatch)(nil)).Elem()
}

func (i PersistentVolumeClaimSpecPatchArgs) ToPersistentVolumeClaimSpecPatchOutput() PersistentVolumeClaimSpecPatchOutput {
	return i.ToPersistentVolumeClaimSpecPatchOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimSpecPatchArgs) ToPersistentVolumeClaimSpecPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecPatchOutput)
}

func (i PersistentVolumeClaimSpecPatchArgs) ToPersistentVolumeClaimSpecPatchPtrOutput() PersistentVolumeClaimSpecPatchPtrOutput {
	return i.ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimSpecPatchArgs) ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecPatchOutput).ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimSpecPatchPtrInput is an input type that accepts PersistentVolumeClaimSpecPatchArgs, PersistentVolumeClaimSpecPatchPtr and PersistentVolumeClaimSpecPatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimSpecPatchPtrInput` via:
//
//	        PersistentVolumeClaimSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimSpecPatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimSpecPatchPtrOutput() PersistentVolumeClaimSpecPatchPtrOutput
	ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(context.Context) PersistentVolumeClaimSpecPatchPtrOutput
}

type persistentVolumeClaimSpecPatchPtrType PersistentVolumeClaimSpecPatchArgs

func PersistentVolumeClaimSpecPatchPtr(v *PersistentVolumeClaimSpecPatchArgs) PersistentVolumeClaimSpecPatchPtrInput {
	return (*persistentVolumeClaimSpecPatchPtrType)(v)
}

func (*persistentVolumeClaimSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimSpecPatch)(nil)).Elem()
}

func (i *persistentVolumeClaimSpecPatchPtrType) ToPersistentVolumeClaimSpecPatchPtrOutput() PersistentVolumeClaimSpecPatchPtrOutput {
	return i.ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimSpecPatchPtrType) ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimSpecPatchPtrOutput)
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpecPatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimSpecPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimSpecPatchOutput) ToPersistentVolumeClaimSpecPatchOutput() PersistentVolumeClaimSpecPatchOutput {
	return o
}

func (o PersistentVolumeClaimSpecPatchOutput) ToPersistentVolumeClaimSpecPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchOutput {
	return o
}

func (o PersistentVolumeClaimSpecPatchOutput) ToPersistentVolumeClaimSpecPatchPtrOutput() PersistentVolumeClaimSpecPatchPtrOutput {
	return o.ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimSpecPatchOutput) ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimSpecPatch) *PersistentVolumeClaimSpecPatch {
		return &v
	}).(PersistentVolumeClaimSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o PersistentVolumeClaimSpecPatchOutput) DataSource() TypedLocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *TypedLocalObjectReferencePatch { return v.DataSource }).(TypedLocalObjectReferencePatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
//
//	allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o PersistentVolumeClaimSpecPatchOutput) DataSourceRef() TypedObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *TypedObjectReferencePatch { return v.DataSourceRef }).(TypedObjectReferencePatchPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o PersistentVolumeClaimSpecPatchOutput) Resources() ResourceRequirementsPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *ResourceRequirementsPatch { return v.Resources }).(ResourceRequirementsPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o PersistentVolumeClaimSpecPatchOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *metav1.LabelSelectorPatch { return v.Selector }).(metav1.LabelSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PersistentVolumeClaimSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PersistentVolumeClaimSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PersistentVolumeClaimSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type PersistentVolumeClaimSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimSpecPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimSpecPatchPtrOutput) ToPersistentVolumeClaimSpecPatchPtrOutput() PersistentVolumeClaimSpecPatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimSpecPatchPtrOutput) ToPersistentVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimSpecPatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimSpecPatchPtrOutput) Elem() PersistentVolumeClaimSpecPatchOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) PersistentVolumeClaimSpecPatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimSpecPatch
		return ret
	}).(PersistentVolumeClaimSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o PersistentVolumeClaimSpecPatchPtrOutput) DataSource() TypedLocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *TypedLocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(TypedLocalObjectReferencePatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
//
//	allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o PersistentVolumeClaimSpecPatchPtrOutput) DataSourceRef() TypedObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *TypedObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(TypedObjectReferencePatchPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o PersistentVolumeClaimSpecPatchPtrOutput) Resources() ResourceRequirementsPatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *ResourceRequirementsPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ResourceRequirementsPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o PersistentVolumeClaimSpecPatchPtrOutput) Selector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PersistentVolumeClaimSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PersistentVolumeClaimSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PersistentVolumeClaimSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatus struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources map[string]string `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity map[string]string `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []PersistentVolumeClaimCondition `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus *string `pulumi:"resizeStatus"`
}

// PersistentVolumeClaimStatusInput is an input type that accepts PersistentVolumeClaimStatusArgs and PersistentVolumeClaimStatusOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimStatusInput` via:
//
//	PersistentVolumeClaimStatusArgs{...}
type PersistentVolumeClaimStatusInput interface {
	pulumi.Input

	ToPersistentVolumeClaimStatusOutput() PersistentVolumeClaimStatusOutput
	ToPersistentVolumeClaimStatusOutputWithContext(context.Context) PersistentVolumeClaimStatusOutput
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatusArgs struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources pulumi.StringMapInput `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions PersistentVolumeClaimConditionArrayInput `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus pulumi.StringPtrInput `pulumi:"resizeStatus"`
}

func (PersistentVolumeClaimStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimStatus)(nil)).Elem()
}

func (i PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusOutput() PersistentVolumeClaimStatusOutput {
	return i.ToPersistentVolumeClaimStatusOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusOutput)
}

func (i PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusPtrOutput() PersistentVolumeClaimStatusPtrOutput {
	return i.ToPersistentVolumeClaimStatusPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimStatusArgs) ToPersistentVolumeClaimStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusOutput).ToPersistentVolumeClaimStatusPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimStatusPtrInput is an input type that accepts PersistentVolumeClaimStatusArgs, PersistentVolumeClaimStatusPtr and PersistentVolumeClaimStatusPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimStatusPtrInput` via:
//
//	        PersistentVolumeClaimStatusArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimStatusPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimStatusPtrOutput() PersistentVolumeClaimStatusPtrOutput
	ToPersistentVolumeClaimStatusPtrOutputWithContext(context.Context) PersistentVolumeClaimStatusPtrOutput
}

type persistentVolumeClaimStatusPtrType PersistentVolumeClaimStatusArgs

func PersistentVolumeClaimStatusPtr(v *PersistentVolumeClaimStatusArgs) PersistentVolumeClaimStatusPtrInput {
	return (*persistentVolumeClaimStatusPtrType)(v)
}

func (*persistentVolumeClaimStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimStatus)(nil)).Elem()
}

func (i *persistentVolumeClaimStatusPtrType) ToPersistentVolumeClaimStatusPtrOutput() PersistentVolumeClaimStatusPtrOutput {
	return i.ToPersistentVolumeClaimStatusPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimStatusPtrType) ToPersistentVolumeClaimStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusPtrOutput)
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatusOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimStatus)(nil)).Elem()
}

func (o PersistentVolumeClaimStatusOutput) ToPersistentVolumeClaimStatusOutput() PersistentVolumeClaimStatusOutput {
	return o
}

func (o PersistentVolumeClaimStatusOutput) ToPersistentVolumeClaimStatusOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusOutput {
	return o
}

func (o PersistentVolumeClaimStatusOutput) ToPersistentVolumeClaimStatusPtrOutput() PersistentVolumeClaimStatusPtrOutput {
	return o.ToPersistentVolumeClaimStatusPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimStatusOutput) ToPersistentVolumeClaimStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimStatus) *PersistentVolumeClaimStatus {
		return &v
	}).(PersistentVolumeClaimStatusPtrOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimStatusOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusOutput) AllocatedResources() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) map[string]string { return v.AllocatedResources }).(pulumi.StringMapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o PersistentVolumeClaimStatusOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o PersistentVolumeClaimStatusOutput) Conditions() PersistentVolumeClaimConditionArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) []PersistentVolumeClaimCondition { return v.Conditions }).(PersistentVolumeClaimConditionArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o PersistentVolumeClaimStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusOutput) ResizeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatus) *string { return v.ResizeStatus }).(pulumi.StringPtrOutput)
}

type PersistentVolumeClaimStatusPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimStatus)(nil)).Elem()
}

func (o PersistentVolumeClaimStatusPtrOutput) ToPersistentVolumeClaimStatusPtrOutput() PersistentVolumeClaimStatusPtrOutput {
	return o
}

func (o PersistentVolumeClaimStatusPtrOutput) ToPersistentVolumeClaimStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPtrOutput {
	return o
}

func (o PersistentVolumeClaimStatusPtrOutput) Elem() PersistentVolumeClaimStatusOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) PersistentVolumeClaimStatus {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimStatus
		return ret
	}).(PersistentVolumeClaimStatusOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimStatusPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPtrOutput) AllocatedResources() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllocatedResources
	}).(pulumi.StringMapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o PersistentVolumeClaimStatusPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o PersistentVolumeClaimStatusPtrOutput) Conditions() PersistentVolumeClaimConditionArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) []PersistentVolumeClaimCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PersistentVolumeClaimConditionArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o PersistentVolumeClaimStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPtrOutput) ResizeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatus) *string {
		if v == nil {
			return nil
		}
		return v.ResizeStatus
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatusPatch struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources map[string]string `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity map[string]string `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []PersistentVolumeClaimConditionPatch `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus *string `pulumi:"resizeStatus"`
}

// PersistentVolumeClaimStatusPatchInput is an input type that accepts PersistentVolumeClaimStatusPatchArgs and PersistentVolumeClaimStatusPatchOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimStatusPatchInput` via:
//
//	PersistentVolumeClaimStatusPatchArgs{...}
type PersistentVolumeClaimStatusPatchInput interface {
	pulumi.Input

	ToPersistentVolumeClaimStatusPatchOutput() PersistentVolumeClaimStatusPatchOutput
	ToPersistentVolumeClaimStatusPatchOutputWithContext(context.Context) PersistentVolumeClaimStatusPatchOutput
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatusPatchArgs struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources pulumi.StringMapInput `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions PersistentVolumeClaimConditionPatchArrayInput `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus pulumi.StringPtrInput `pulumi:"resizeStatus"`
}

func (PersistentVolumeClaimStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimStatusPatch)(nil)).Elem()
}

func (i PersistentVolumeClaimStatusPatchArgs) ToPersistentVolumeClaimStatusPatchOutput() PersistentVolumeClaimStatusPatchOutput {
	return i.ToPersistentVolumeClaimStatusPatchOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimStatusPatchArgs) ToPersistentVolumeClaimStatusPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusPatchOutput)
}

func (i PersistentVolumeClaimStatusPatchArgs) ToPersistentVolumeClaimStatusPatchPtrOutput() PersistentVolumeClaimStatusPatchPtrOutput {
	return i.ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimStatusPatchArgs) ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusPatchOutput).ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimStatusPatchPtrInput is an input type that accepts PersistentVolumeClaimStatusPatchArgs, PersistentVolumeClaimStatusPatchPtr and PersistentVolumeClaimStatusPatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimStatusPatchPtrInput` via:
//
//	        PersistentVolumeClaimStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimStatusPatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimStatusPatchPtrOutput() PersistentVolumeClaimStatusPatchPtrOutput
	ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(context.Context) PersistentVolumeClaimStatusPatchPtrOutput
}

type persistentVolumeClaimStatusPatchPtrType PersistentVolumeClaimStatusPatchArgs

func PersistentVolumeClaimStatusPatchPtr(v *PersistentVolumeClaimStatusPatchArgs) PersistentVolumeClaimStatusPatchPtrInput {
	return (*persistentVolumeClaimStatusPatchPtrType)(v)
}

func (*persistentVolumeClaimStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimStatusPatch)(nil)).Elem()
}

func (i *persistentVolumeClaimStatusPatchPtrType) ToPersistentVolumeClaimStatusPatchPtrOutput() PersistentVolumeClaimStatusPatchPtrOutput {
	return i.ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimStatusPatchPtrType) ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimStatusPatchPtrOutput)
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type PersistentVolumeClaimStatusPatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimStatusPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimStatusPatchOutput) ToPersistentVolumeClaimStatusPatchOutput() PersistentVolumeClaimStatusPatchOutput {
	return o
}

func (o PersistentVolumeClaimStatusPatchOutput) ToPersistentVolumeClaimStatusPatchOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchOutput {
	return o
}

func (o PersistentVolumeClaimStatusPatchOutput) ToPersistentVolumeClaimStatusPatchPtrOutput() PersistentVolumeClaimStatusPatchPtrOutput {
	return o.ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimStatusPatchOutput) ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimStatusPatch) *PersistentVolumeClaimStatusPatch {
		return &v
	}).(PersistentVolumeClaimStatusPatchPtrOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimStatusPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPatchOutput) AllocatedResources() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) map[string]string { return v.AllocatedResources }).(pulumi.StringMapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o PersistentVolumeClaimStatusPatchOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o PersistentVolumeClaimStatusPatchOutput) Conditions() PersistentVolumeClaimConditionPatchArrayOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) []PersistentVolumeClaimConditionPatch { return v.Conditions }).(PersistentVolumeClaimConditionPatchArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o PersistentVolumeClaimStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPatchOutput) ResizeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimStatusPatch) *string { return v.ResizeStatus }).(pulumi.StringPtrOutput)
}

type PersistentVolumeClaimStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimStatusPatch)(nil)).Elem()
}

func (o PersistentVolumeClaimStatusPatchPtrOutput) ToPersistentVolumeClaimStatusPatchPtrOutput() PersistentVolumeClaimStatusPatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimStatusPatchPtrOutput) ToPersistentVolumeClaimStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimStatusPatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimStatusPatchPtrOutput) Elem() PersistentVolumeClaimStatusPatchOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) PersistentVolumeClaimStatusPatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimStatusPatch
		return ret
	}).(PersistentVolumeClaimStatusPatchOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PersistentVolumeClaimStatusPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPatchPtrOutput) AllocatedResources() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllocatedResources
	}).(pulumi.StringMapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o PersistentVolumeClaimStatusPatchPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o PersistentVolumeClaimStatusPatchPtrOutput) Conditions() PersistentVolumeClaimConditionPatchArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) []PersistentVolumeClaimConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PersistentVolumeClaimConditionPatchArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o PersistentVolumeClaimStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o PersistentVolumeClaimStatusPatchPtrOutput) ResizeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResizeStatus
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplate struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec PersistentVolumeClaimSpec `pulumi:"spec"`
}

// PersistentVolumeClaimTemplateInput is an input type that accepts PersistentVolumeClaimTemplateArgs and PersistentVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTemplateInput` via:
//
//	PersistentVolumeClaimTemplateArgs{...}
type PersistentVolumeClaimTemplateInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTemplateOutput() PersistentVolumeClaimTemplateOutput
	ToPersistentVolumeClaimTemplateOutputWithContext(context.Context) PersistentVolumeClaimTemplateOutput
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplateArgs struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec PersistentVolumeClaimSpecInput `pulumi:"spec"`
}

func (PersistentVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimTemplate)(nil)).Elem()
}

func (i PersistentVolumeClaimTemplateArgs) ToPersistentVolumeClaimTemplateOutput() PersistentVolumeClaimTemplateOutput {
	return i.ToPersistentVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTemplateArgs) ToPersistentVolumeClaimTemplateOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplateOutput)
}

func (i PersistentVolumeClaimTemplateArgs) ToPersistentVolumeClaimTemplatePtrOutput() PersistentVolumeClaimTemplatePtrOutput {
	return i.ToPersistentVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTemplateArgs) ToPersistentVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplateOutput).ToPersistentVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// PersistentVolumeClaimTemplatePtrInput is an input type that accepts PersistentVolumeClaimTemplateArgs, PersistentVolumeClaimTemplatePtr and PersistentVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTemplatePtrInput` via:
//
//	        PersistentVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTemplatePtrOutput() PersistentVolumeClaimTemplatePtrOutput
	ToPersistentVolumeClaimTemplatePtrOutputWithContext(context.Context) PersistentVolumeClaimTemplatePtrOutput
}

type persistentVolumeClaimTemplatePtrType PersistentVolumeClaimTemplateArgs

func PersistentVolumeClaimTemplatePtr(v *PersistentVolumeClaimTemplateArgs) PersistentVolumeClaimTemplatePtrInput {
	return (*persistentVolumeClaimTemplatePtrType)(v)
}

func (*persistentVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimTemplate)(nil)).Elem()
}

func (i *persistentVolumeClaimTemplatePtrType) ToPersistentVolumeClaimTemplatePtrOutput() PersistentVolumeClaimTemplatePtrOutput {
	return i.ToPersistentVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimTemplatePtrType) ToPersistentVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplatePtrOutput)
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimTemplate)(nil)).Elem()
}

func (o PersistentVolumeClaimTemplateOutput) ToPersistentVolumeClaimTemplateOutput() PersistentVolumeClaimTemplateOutput {
	return o
}

func (o PersistentVolumeClaimTemplateOutput) ToPersistentVolumeClaimTemplateOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplateOutput {
	return o
}

func (o PersistentVolumeClaimTemplateOutput) ToPersistentVolumeClaimTemplatePtrOutput() PersistentVolumeClaimTemplatePtrOutput {
	return o.ToPersistentVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimTemplateOutput) ToPersistentVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimTemplate) *PersistentVolumeClaimTemplate {
		return &v
	}).(PersistentVolumeClaimTemplatePtrOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o PersistentVolumeClaimTemplateOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimTemplate) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o PersistentVolumeClaimTemplateOutput) Spec() PersistentVolumeClaimSpecOutput {
	return o.ApplyT(func(v PersistentVolumeClaimTemplate) PersistentVolumeClaimSpec { return v.Spec }).(PersistentVolumeClaimSpecOutput)
}

type PersistentVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimTemplate)(nil)).Elem()
}

func (o PersistentVolumeClaimTemplatePtrOutput) ToPersistentVolumeClaimTemplatePtrOutput() PersistentVolumeClaimTemplatePtrOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePtrOutput) ToPersistentVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePtrOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePtrOutput) Elem() PersistentVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplate) PersistentVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimTemplate
		return ret
	}).(PersistentVolumeClaimTemplateOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o PersistentVolumeClaimTemplatePtrOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplate) *metav1.ObjectMeta {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o PersistentVolumeClaimTemplatePtrOutput) Spec() PersistentVolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplate) *PersistentVolumeClaimSpec {
		if v == nil {
			return nil
		}
		return &v.Spec
	}).(PersistentVolumeClaimSpecPtrOutput)
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplatePatch struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec *PersistentVolumeClaimSpecPatch `pulumi:"spec"`
}

// PersistentVolumeClaimTemplatePatchInput is an input type that accepts PersistentVolumeClaimTemplatePatchArgs and PersistentVolumeClaimTemplatePatchOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTemplatePatchInput` via:
//
//	PersistentVolumeClaimTemplatePatchArgs{...}
type PersistentVolumeClaimTemplatePatchInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTemplatePatchOutput() PersistentVolumeClaimTemplatePatchOutput
	ToPersistentVolumeClaimTemplatePatchOutputWithContext(context.Context) PersistentVolumeClaimTemplatePatchOutput
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplatePatchArgs struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec PersistentVolumeClaimSpecPatchPtrInput `pulumi:"spec"`
}

func (PersistentVolumeClaimTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i PersistentVolumeClaimTemplatePatchArgs) ToPersistentVolumeClaimTemplatePatchOutput() PersistentVolumeClaimTemplatePatchOutput {
	return i.ToPersistentVolumeClaimTemplatePatchOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTemplatePatchArgs) ToPersistentVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplatePatchOutput)
}

func (i PersistentVolumeClaimTemplatePatchArgs) ToPersistentVolumeClaimTemplatePatchPtrOutput() PersistentVolumeClaimTemplatePatchPtrOutput {
	return i.ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimTemplatePatchArgs) ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplatePatchOutput).ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimTemplatePatchPtrInput is an input type that accepts PersistentVolumeClaimTemplatePatchArgs, PersistentVolumeClaimTemplatePatchPtr and PersistentVolumeClaimTemplatePatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimTemplatePatchPtrInput` via:
//
//	        PersistentVolumeClaimTemplatePatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimTemplatePatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimTemplatePatchPtrOutput() PersistentVolumeClaimTemplatePatchPtrOutput
	ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(context.Context) PersistentVolumeClaimTemplatePatchPtrOutput
}

type persistentVolumeClaimTemplatePatchPtrType PersistentVolumeClaimTemplatePatchArgs

func PersistentVolumeClaimTemplatePatchPtr(v *PersistentVolumeClaimTemplatePatchArgs) PersistentVolumeClaimTemplatePatchPtrInput {
	return (*persistentVolumeClaimTemplatePatchPtrType)(v)
}

func (*persistentVolumeClaimTemplatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i *persistentVolumeClaimTemplatePatchPtrType) ToPersistentVolumeClaimTemplatePatchPtrOutput() PersistentVolumeClaimTemplatePatchPtrOutput {
	return i.ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimTemplatePatchPtrType) ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimTemplatePatchPtrOutput)
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type PersistentVolumeClaimTemplatePatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o PersistentVolumeClaimTemplatePatchOutput) ToPersistentVolumeClaimTemplatePatchOutput() PersistentVolumeClaimTemplatePatchOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePatchOutput) ToPersistentVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePatchOutput) ToPersistentVolumeClaimTemplatePatchPtrOutput() PersistentVolumeClaimTemplatePatchPtrOutput {
	return o.ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimTemplatePatchOutput) ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimTemplatePatch) *PersistentVolumeClaimTemplatePatch {
		return &v
	}).(PersistentVolumeClaimTemplatePatchPtrOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o PersistentVolumeClaimTemplatePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimTemplatePatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o PersistentVolumeClaimTemplatePatchOutput) Spec() PersistentVolumeClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimTemplatePatch) *PersistentVolumeClaimSpecPatch { return v.Spec }).(PersistentVolumeClaimSpecPatchPtrOutput)
}

type PersistentVolumeClaimTemplatePatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimTemplatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o PersistentVolumeClaimTemplatePatchPtrOutput) ToPersistentVolumeClaimTemplatePatchPtrOutput() PersistentVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePatchPtrOutput) ToPersistentVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimTemplatePatchPtrOutput) Elem() PersistentVolumeClaimTemplatePatchOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplatePatch) PersistentVolumeClaimTemplatePatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimTemplatePatch
		return ret
	}).(PersistentVolumeClaimTemplatePatchOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o PersistentVolumeClaimTemplatePatchPtrOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplatePatch) *metav1.ObjectMetaPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o PersistentVolumeClaimTemplatePatchPtrOutput) Spec() PersistentVolumeClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimTemplatePatch) *PersistentVolumeClaimSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(PersistentVolumeClaimSpecPatchPtrOutput)
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSource struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// PersistentVolumeClaimVolumeSourceInput is an input type that accepts PersistentVolumeClaimVolumeSourceArgs and PersistentVolumeClaimVolumeSourceOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimVolumeSourceInput` via:
//
//	PersistentVolumeClaimVolumeSourceArgs{...}
type PersistentVolumeClaimVolumeSourceInput interface {
	pulumi.Input

	ToPersistentVolumeClaimVolumeSourceOutput() PersistentVolumeClaimVolumeSourceOutput
	ToPersistentVolumeClaimVolumeSourceOutputWithContext(context.Context) PersistentVolumeClaimVolumeSourceOutput
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSourceArgs struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringInput `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (PersistentVolumeClaimVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimVolumeSource)(nil)).Elem()
}

func (i PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourceOutput() PersistentVolumeClaimVolumeSourceOutput {
	return i.ToPersistentVolumeClaimVolumeSourceOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourceOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourceOutput)
}

func (i PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourcePtrOutput() PersistentVolumeClaimVolumeSourcePtrOutput {
	return i.ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimVolumeSourceArgs) ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourceOutput).ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(ctx)
}

// PersistentVolumeClaimVolumeSourcePtrInput is an input type that accepts PersistentVolumeClaimVolumeSourceArgs, PersistentVolumeClaimVolumeSourcePtr and PersistentVolumeClaimVolumeSourcePtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimVolumeSourcePtrInput` via:
//
//	        PersistentVolumeClaimVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimVolumeSourcePtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimVolumeSourcePtrOutput() PersistentVolumeClaimVolumeSourcePtrOutput
	ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(context.Context) PersistentVolumeClaimVolumeSourcePtrOutput
}

type persistentVolumeClaimVolumeSourcePtrType PersistentVolumeClaimVolumeSourceArgs

func PersistentVolumeClaimVolumeSourcePtr(v *PersistentVolumeClaimVolumeSourceArgs) PersistentVolumeClaimVolumeSourcePtrInput {
	return (*persistentVolumeClaimVolumeSourcePtrType)(v)
}

func (*persistentVolumeClaimVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimVolumeSource)(nil)).Elem()
}

func (i *persistentVolumeClaimVolumeSourcePtrType) ToPersistentVolumeClaimVolumeSourcePtrOutput() PersistentVolumeClaimVolumeSourcePtrOutput {
	return i.ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimVolumeSourcePtrType) ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourcePtrOutput)
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSourceOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimVolumeSource)(nil)).Elem()
}

func (o PersistentVolumeClaimVolumeSourceOutput) ToPersistentVolumeClaimVolumeSourceOutput() PersistentVolumeClaimVolumeSourceOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourceOutput) ToPersistentVolumeClaimVolumeSourceOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourceOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourceOutput) ToPersistentVolumeClaimVolumeSourcePtrOutput() PersistentVolumeClaimVolumeSourcePtrOutput {
	return o.ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimVolumeSourceOutput) ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimVolumeSource) *PersistentVolumeClaimVolumeSource {
		return &v
	}).(PersistentVolumeClaimVolumeSourcePtrOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimVolumeSourceOutput) ClaimName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentVolumeClaimVolumeSource) string { return v.ClaimName }).(pulumi.StringOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o PersistentVolumeClaimVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type PersistentVolumeClaimVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimVolumeSource)(nil)).Elem()
}

func (o PersistentVolumeClaimVolumeSourcePtrOutput) ToPersistentVolumeClaimVolumeSourcePtrOutput() PersistentVolumeClaimVolumeSourcePtrOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePtrOutput) ToPersistentVolumeClaimVolumeSourcePtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePtrOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePtrOutput) Elem() PersistentVolumeClaimVolumeSourceOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSource) PersistentVolumeClaimVolumeSource {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimVolumeSource
		return ret
	}).(PersistentVolumeClaimVolumeSourceOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimVolumeSourcePtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o PersistentVolumeClaimVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSourcePatch struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName *string `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// PersistentVolumeClaimVolumeSourcePatchInput is an input type that accepts PersistentVolumeClaimVolumeSourcePatchArgs and PersistentVolumeClaimVolumeSourcePatchOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimVolumeSourcePatchInput` via:
//
//	PersistentVolumeClaimVolumeSourcePatchArgs{...}
type PersistentVolumeClaimVolumeSourcePatchInput interface {
	pulumi.Input

	ToPersistentVolumeClaimVolumeSourcePatchOutput() PersistentVolumeClaimVolumeSourcePatchOutput
	ToPersistentVolumeClaimVolumeSourcePatchOutputWithContext(context.Context) PersistentVolumeClaimVolumeSourcePatchOutput
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSourcePatchArgs struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringPtrInput `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (PersistentVolumeClaimVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimVolumeSourcePatch)(nil)).Elem()
}

func (i PersistentVolumeClaimVolumeSourcePatchArgs) ToPersistentVolumeClaimVolumeSourcePatchOutput() PersistentVolumeClaimVolumeSourcePatchOutput {
	return i.ToPersistentVolumeClaimVolumeSourcePatchOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimVolumeSourcePatchArgs) ToPersistentVolumeClaimVolumeSourcePatchOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourcePatchOutput)
}

func (i PersistentVolumeClaimVolumeSourcePatchArgs) ToPersistentVolumeClaimVolumeSourcePatchPtrOutput() PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return i.ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeClaimVolumeSourcePatchArgs) ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourcePatchOutput).ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(ctx)
}

// PersistentVolumeClaimVolumeSourcePatchPtrInput is an input type that accepts PersistentVolumeClaimVolumeSourcePatchArgs, PersistentVolumeClaimVolumeSourcePatchPtr and PersistentVolumeClaimVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeClaimVolumeSourcePatchPtrInput` via:
//
//	        PersistentVolumeClaimVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeClaimVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeClaimVolumeSourcePatchPtrOutput() PersistentVolumeClaimVolumeSourcePatchPtrOutput
	ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(context.Context) PersistentVolumeClaimVolumeSourcePatchPtrOutput
}

type persistentVolumeClaimVolumeSourcePatchPtrType PersistentVolumeClaimVolumeSourcePatchArgs

func PersistentVolumeClaimVolumeSourcePatchPtr(v *PersistentVolumeClaimVolumeSourcePatchArgs) PersistentVolumeClaimVolumeSourcePatchPtrInput {
	return (*persistentVolumeClaimVolumeSourcePatchPtrType)(v)
}

func (*persistentVolumeClaimVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimVolumeSourcePatch)(nil)).Elem()
}

func (i *persistentVolumeClaimVolumeSourcePatchPtrType) ToPersistentVolumeClaimVolumeSourcePatchPtrOutput() PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return i.ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeClaimVolumeSourcePatchPtrType) ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeClaimVolumeSourcePatchPtrOutput)
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeClaimVolumeSourcePatch)(nil)).Elem()
}

func (o PersistentVolumeClaimVolumeSourcePatchOutput) ToPersistentVolumeClaimVolumeSourcePatchOutput() PersistentVolumeClaimVolumeSourcePatchOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePatchOutput) ToPersistentVolumeClaimVolumeSourcePatchOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePatchOutput) ToPersistentVolumeClaimVolumeSourcePatchPtrOutput() PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return o.ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeClaimVolumeSourcePatchOutput) ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeClaimVolumeSourcePatch) *PersistentVolumeClaimVolumeSourcePatch {
		return &v
	}).(PersistentVolumeClaimVolumeSourcePatchPtrOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimVolumeSourcePatchOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimVolumeSourcePatch) *string { return v.ClaimName }).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o PersistentVolumeClaimVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PersistentVolumeClaimVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type PersistentVolumeClaimVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeClaimVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeClaimVolumeSourcePatch)(nil)).Elem()
}

func (o PersistentVolumeClaimVolumeSourcePatchPtrOutput) ToPersistentVolumeClaimVolumeSourcePatchPtrOutput() PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePatchPtrOutput) ToPersistentVolumeClaimVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return o
}

func (o PersistentVolumeClaimVolumeSourcePatchPtrOutput) Elem() PersistentVolumeClaimVolumeSourcePatchOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSourcePatch) PersistentVolumeClaimVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeClaimVolumeSourcePatch
		return ret
	}).(PersistentVolumeClaimVolumeSourcePatchOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o PersistentVolumeClaimVolumeSourcePatchPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o PersistentVolumeClaimVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeClaimVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// PersistentVolumeList is a list of PersistentVolume items.
type PersistentVolumeListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
	Items []PersistentVolumeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PersistentVolumeListTypeInput is an input type that accepts PersistentVolumeListTypeArgs and PersistentVolumeListTypeOutput values.
// You can construct a concrete instance of `PersistentVolumeListTypeInput` via:
//
//	PersistentVolumeListTypeArgs{...}
type PersistentVolumeListTypeInput interface {
	pulumi.Input

	ToPersistentVolumeListTypeOutput() PersistentVolumeListTypeOutput
	ToPersistentVolumeListTypeOutputWithContext(context.Context) PersistentVolumeListTypeOutput
}

// PersistentVolumeList is a list of PersistentVolume items.
type PersistentVolumeListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
	Items PersistentVolumeTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PersistentVolumeListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeListType)(nil)).Elem()
}

func (i PersistentVolumeListTypeArgs) ToPersistentVolumeListTypeOutput() PersistentVolumeListTypeOutput {
	return i.ToPersistentVolumeListTypeOutputWithContext(context.Background())
}

func (i PersistentVolumeListTypeArgs) ToPersistentVolumeListTypeOutputWithContext(ctx context.Context) PersistentVolumeListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeListTypeOutput)
}

// PersistentVolumeList is a list of PersistentVolume items.
type PersistentVolumeListTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumeListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeListType)(nil)).Elem()
}

func (o PersistentVolumeListTypeOutput) ToPersistentVolumeListTypeOutput() PersistentVolumeListTypeOutput {
	return o
}

func (o PersistentVolumeListTypeOutput) ToPersistentVolumeListTypeOutputWithContext(ctx context.Context) PersistentVolumeListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumeListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
func (o PersistentVolumeListTypeOutput) Items() PersistentVolumeTypeArrayOutput {
	return o.ApplyT(func(v PersistentVolumeListType) []PersistentVolumeType { return v.Items }).(PersistentVolumeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumeListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PersistentVolumeListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec *PersistentVolumeSpecPatch `pulumi:"spec"`
	// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status *PersistentVolumeStatusPatch `pulumi:"status"`
}

// PersistentVolumePatchTypeInput is an input type that accepts PersistentVolumePatchTypeArgs and PersistentVolumePatchTypeOutput values.
// You can construct a concrete instance of `PersistentVolumePatchTypeInput` via:
//
//	PersistentVolumePatchTypeArgs{...}
type PersistentVolumePatchTypeInput interface {
	pulumi.Input

	ToPersistentVolumePatchTypeOutput() PersistentVolumePatchTypeOutput
	ToPersistentVolumePatchTypeOutputWithContext(context.Context) PersistentVolumePatchTypeOutput
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Spec PersistentVolumeSpecPatchPtrInput `pulumi:"spec"`
	// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
	Status PersistentVolumeStatusPatchPtrInput `pulumi:"status"`
}

func (PersistentVolumePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumePatchType)(nil)).Elem()
}

func (i PersistentVolumePatchTypeArgs) ToPersistentVolumePatchTypeOutput() PersistentVolumePatchTypeOutput {
	return i.ToPersistentVolumePatchTypeOutputWithContext(context.Background())
}

func (i PersistentVolumePatchTypeArgs) ToPersistentVolumePatchTypeOutputWithContext(ctx context.Context) PersistentVolumePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumePatchTypeOutput)
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolumePatchTypeOutput struct{ *pulumi.OutputState }

func (PersistentVolumePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumePatchType)(nil)).Elem()
}

func (o PersistentVolumePatchTypeOutput) ToPersistentVolumePatchTypeOutput() PersistentVolumePatchTypeOutput {
	return o
}

func (o PersistentVolumePatchTypeOutput) ToPersistentVolumePatchTypeOutputWithContext(ctx context.Context) PersistentVolumePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PersistentVolumePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PersistentVolumePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PersistentVolumePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (o PersistentVolumePatchTypeOutput) Spec() PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumePatchType) *PersistentVolumeSpecPatch { return v.Spec }).(PersistentVolumeSpecPatchPtrOutput)
}

// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (o PersistentVolumePatchTypeOutput) Status() PersistentVolumeStatusPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumePatchType) *PersistentVolumeStatusPatch { return v.Status }).(PersistentVolumeStatusPatchPtrOutput)
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpec struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes []string `pulumi:"accessModes"`
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSource `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSource `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFilePersistentVolumeSource `pulumi:"azureFile"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]string `pulumi:"capacity"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSPersistentVolumeSource `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *CinderPersistentVolumeSource `pulumi:"cinder"`
	// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
	ClaimRef *ObjectReference `pulumi:"claimRef"`
	// csi represents storage that is handled by an external CSI driver (Beta feature).
	Csi *CSIPersistentVolumeSource `pulumi:"csi"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *FCVolumeSource `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *FlexPersistentVolumeSource `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
	Flocker *FlockerVolumeSource `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSource `pulumi:"gcePersistentDisk"`
	// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *GlusterfsPersistentVolumeSource `pulumi:"glusterfs"`
	// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath *HostPathVolumeSource `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	Iscsi *ISCSIPersistentVolumeSource `pulumi:"iscsi"`
	// local represents directly-attached storage with node affinity
	Local *LocalVolumeSource `pulumi:"local"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions []string `pulumi:"mountOptions"`
	// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *NFSVolumeSource `pulumi:"nfs"`
	// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
	NodeAffinity *VolumeNodeAffinity `pulumi:"nodeAffinity"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy *string `pulumi:"persistentVolumeReclaimPolicy"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSource `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *PortworxVolumeSource `pulumi:"portworxVolume"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSource `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RBDPersistentVolumeSource `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *ScaleIOPersistentVolumeSource `pulumi:"scaleIO"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName *string `pulumi:"storageClassName"`
	// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
	Storageos *StorageOSPersistentVolumeSource `pulumi:"storageos"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSource `pulumi:"vsphereVolume"`
}

// PersistentVolumeSpecInput is an input type that accepts PersistentVolumeSpecArgs and PersistentVolumeSpecOutput values.
// You can construct a concrete instance of `PersistentVolumeSpecInput` via:
//
//	PersistentVolumeSpecArgs{...}
type PersistentVolumeSpecInput interface {
	pulumi.Input

	ToPersistentVolumeSpecOutput() PersistentVolumeSpecOutput
	ToPersistentVolumeSpecOutputWithContext(context.Context) PersistentVolumeSpecOutput
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpecArgs struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AWSElasticBlockStoreVolumeSourcePtrInput `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AzureDiskVolumeSourcePtrInput `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AzureFilePersistentVolumeSourcePtrInput `pulumi:"azureFile"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs CephFSPersistentVolumeSourcePtrInput `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder CinderPersistentVolumeSourcePtrInput `pulumi:"cinder"`
	// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
	ClaimRef ObjectReferencePtrInput `pulumi:"claimRef"`
	// csi represents storage that is handled by an external CSI driver (Beta feature).
	Csi CSIPersistentVolumeSourcePtrInput `pulumi:"csi"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc FCVolumeSourcePtrInput `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume FlexPersistentVolumeSourcePtrInput `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
	Flocker FlockerVolumeSourcePtrInput `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk GCEPersistentDiskVolumeSourcePtrInput `pulumi:"gcePersistentDisk"`
	// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs GlusterfsPersistentVolumeSourcePtrInput `pulumi:"glusterfs"`
	// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath HostPathVolumeSourcePtrInput `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	Iscsi ISCSIPersistentVolumeSourcePtrInput `pulumi:"iscsi"`
	// local represents directly-attached storage with node affinity
	Local LocalVolumeSourcePtrInput `pulumi:"local"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs NFSVolumeSourcePtrInput `pulumi:"nfs"`
	// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
	NodeAffinity VolumeNodeAffinityPtrInput `pulumi:"nodeAffinity"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy pulumi.StringPtrInput `pulumi:"persistentVolumeReclaimPolicy"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk PhotonPersistentDiskVolumeSourcePtrInput `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume PortworxVolumeSourcePtrInput `pulumi:"portworxVolume"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte QuobyteVolumeSourcePtrInput `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd RBDPersistentVolumeSourcePtrInput `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO ScaleIOPersistentVolumeSourcePtrInput `pulumi:"scaleIO"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
	Storageos StorageOSPersistentVolumeSourcePtrInput `pulumi:"storageos"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume VsphereVirtualDiskVolumeSourcePtrInput `pulumi:"vsphereVolume"`
}

func (PersistentVolumeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeSpec)(nil)).Elem()
}

func (i PersistentVolumeSpecArgs) ToPersistentVolumeSpecOutput() PersistentVolumeSpecOutput {
	return i.ToPersistentVolumeSpecOutputWithContext(context.Background())
}

func (i PersistentVolumeSpecArgs) ToPersistentVolumeSpecOutputWithContext(ctx context.Context) PersistentVolumeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecOutput)
}

func (i PersistentVolumeSpecArgs) ToPersistentVolumeSpecPtrOutput() PersistentVolumeSpecPtrOutput {
	return i.ToPersistentVolumeSpecPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeSpecArgs) ToPersistentVolumeSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecOutput).ToPersistentVolumeSpecPtrOutputWithContext(ctx)
}

// PersistentVolumeSpecPtrInput is an input type that accepts PersistentVolumeSpecArgs, PersistentVolumeSpecPtr and PersistentVolumeSpecPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeSpecPtrInput` via:
//
//	        PersistentVolumeSpecArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeSpecPtrInput interface {
	pulumi.Input

	ToPersistentVolumeSpecPtrOutput() PersistentVolumeSpecPtrOutput
	ToPersistentVolumeSpecPtrOutputWithContext(context.Context) PersistentVolumeSpecPtrOutput
}

type persistentVolumeSpecPtrType PersistentVolumeSpecArgs

func PersistentVolumeSpecPtr(v *PersistentVolumeSpecArgs) PersistentVolumeSpecPtrInput {
	return (*persistentVolumeSpecPtrType)(v)
}

func (*persistentVolumeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeSpec)(nil)).Elem()
}

func (i *persistentVolumeSpecPtrType) ToPersistentVolumeSpecPtrOutput() PersistentVolumeSpecPtrOutput {
	return i.ToPersistentVolumeSpecPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeSpecPtrType) ToPersistentVolumeSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecPtrOutput)
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpecOutput struct{ *pulumi.OutputState }

func (PersistentVolumeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeSpec)(nil)).Elem()
}

func (o PersistentVolumeSpecOutput) ToPersistentVolumeSpecOutput() PersistentVolumeSpecOutput {
	return o
}

func (o PersistentVolumeSpecOutput) ToPersistentVolumeSpecOutputWithContext(ctx context.Context) PersistentVolumeSpecOutput {
	return o
}

func (o PersistentVolumeSpecOutput) ToPersistentVolumeSpecPtrOutput() PersistentVolumeSpecPtrOutput {
	return o.ToPersistentVolumeSpecPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeSpecOutput) ToPersistentVolumeSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeSpec) *PersistentVolumeSpec {
		return &v
	}).(PersistentVolumeSpecPtrOutput)
}

// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
func (o PersistentVolumeSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o PersistentVolumeSpecOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *AWSElasticBlockStoreVolumeSource { return v.AwsElasticBlockStore }).(AWSElasticBlockStoreVolumeSourcePtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecOutput) AzureDisk() AzureDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *AzureDiskVolumeSource { return v.AzureDisk }).(AzureDiskVolumeSourcePtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecOutput) AzureFile() AzureFilePersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *AzureFilePersistentVolumeSource { return v.AzureFile }).(AzureFilePersistentVolumeSourcePtrOutput)
}

// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o PersistentVolumeSpecOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecOutput) Cephfs() CephFSPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *CephFSPersistentVolumeSource { return v.Cephfs }).(CephFSPersistentVolumeSourcePtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o PersistentVolumeSpecOutput) Cinder() CinderPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *CinderPersistentVolumeSource { return v.Cinder }).(CinderPersistentVolumeSourcePtrOutput)
}

// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
func (o PersistentVolumeSpecOutput) ClaimRef() ObjectReferencePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *ObjectReference { return v.ClaimRef }).(ObjectReferencePtrOutput)
}

// csi represents storage that is handled by an external CSI driver (Beta feature).
func (o PersistentVolumeSpecOutput) Csi() CSIPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *CSIPersistentVolumeSource { return v.Csi }).(CSIPersistentVolumeSourcePtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o PersistentVolumeSpecOutput) Fc() FCVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *FCVolumeSource { return v.Fc }).(FCVolumeSourcePtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o PersistentVolumeSpecOutput) FlexVolume() FlexPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *FlexPersistentVolumeSource { return v.FlexVolume }).(FlexPersistentVolumeSourcePtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
func (o PersistentVolumeSpecOutput) Flocker() FlockerVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *FlockerVolumeSource { return v.Flocker }).(FlockerVolumeSourcePtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o PersistentVolumeSpecOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *GCEPersistentDiskVolumeSource { return v.GcePersistentDisk }).(GCEPersistentDiskVolumeSourcePtrOutput)
}

// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o PersistentVolumeSpecOutput) Glusterfs() GlusterfsPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *GlusterfsPersistentVolumeSource { return v.Glusterfs }).(GlusterfsPersistentVolumeSourcePtrOutput)
}

// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o PersistentVolumeSpecOutput) HostPath() HostPathVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *HostPathVolumeSource { return v.HostPath }).(HostPathVolumeSourcePtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
func (o PersistentVolumeSpecOutput) Iscsi() ISCSIPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *ISCSIPersistentVolumeSource { return v.Iscsi }).(ISCSIPersistentVolumeSourcePtrOutput)
}

// local represents directly-attached storage with node affinity
func (o PersistentVolumeSpecOutput) Local() LocalVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *LocalVolumeSource { return v.Local }).(LocalVolumeSourcePtrOutput)
}

// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
func (o PersistentVolumeSpecOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o PersistentVolumeSpecOutput) Nfs() NFSVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *NFSVolumeSource { return v.Nfs }).(NFSVolumeSourcePtrOutput)
}

// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
func (o PersistentVolumeSpecOutput) NodeAffinity() VolumeNodeAffinityPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *VolumeNodeAffinity { return v.NodeAffinity }).(VolumeNodeAffinityPtrOutput)
}

// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
func (o PersistentVolumeSpecOutput) PersistentVolumeReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *string { return v.PersistentVolumeReclaimPolicy }).(pulumi.StringPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o PersistentVolumeSpecOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *PhotonPersistentDiskVolumeSource { return v.PhotonPersistentDisk }).(PhotonPersistentDiskVolumeSourcePtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecOutput) PortworxVolume() PortworxVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *PortworxVolumeSource { return v.PortworxVolume }).(PortworxVolumeSourcePtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecOutput) Quobyte() QuobyteVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *QuobyteVolumeSource { return v.Quobyte }).(QuobyteVolumeSourcePtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o PersistentVolumeSpecOutput) Rbd() RBDPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *RBDPersistentVolumeSource { return v.Rbd }).(RBDPersistentVolumeSourcePtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o PersistentVolumeSpecOutput) ScaleIO() ScaleIOPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *ScaleIOPersistentVolumeSource { return v.ScaleIO }).(ScaleIOPersistentVolumeSourcePtrOutput)
}

// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
func (o PersistentVolumeSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
func (o PersistentVolumeSpecOutput) Storageos() StorageOSPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *StorageOSPersistentVolumeSource { return v.Storageos }).(StorageOSPersistentVolumeSourcePtrOutput)
}

// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
func (o PersistentVolumeSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpec) *VsphereVirtualDiskVolumeSource { return v.VsphereVolume }).(VsphereVirtualDiskVolumeSourcePtrOutput)
}

type PersistentVolumeSpecPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeSpec)(nil)).Elem()
}

func (o PersistentVolumeSpecPtrOutput) ToPersistentVolumeSpecPtrOutput() PersistentVolumeSpecPtrOutput {
	return o
}

func (o PersistentVolumeSpecPtrOutput) ToPersistentVolumeSpecPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPtrOutput {
	return o
}

func (o PersistentVolumeSpecPtrOutput) Elem() PersistentVolumeSpecOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) PersistentVolumeSpec {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeSpec
		return ret
	}).(PersistentVolumeSpecOutput)
}

// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
func (o PersistentVolumeSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o PersistentVolumeSpecPtrOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *AWSElasticBlockStoreVolumeSource {
		if v == nil {
			return nil
		}
		return v.AwsElasticBlockStore
	}).(AWSElasticBlockStoreVolumeSourcePtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPtrOutput) AzureDisk() AzureDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *AzureDiskVolumeSource {
		if v == nil {
			return nil
		}
		return v.AzureDisk
	}).(AzureDiskVolumeSourcePtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPtrOutput) AzureFile() AzureFilePersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *AzureFilePersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.AzureFile
	}).(AzureFilePersistentVolumeSourcePtrOutput)
}

// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o PersistentVolumeSpecPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPtrOutput) Cephfs() CephFSPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *CephFSPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Cephfs
	}).(CephFSPersistentVolumeSourcePtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o PersistentVolumeSpecPtrOutput) Cinder() CinderPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *CinderPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Cinder
	}).(CinderPersistentVolumeSourcePtrOutput)
}

// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
func (o PersistentVolumeSpecPtrOutput) ClaimRef() ObjectReferencePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *ObjectReference {
		if v == nil {
			return nil
		}
		return v.ClaimRef
	}).(ObjectReferencePtrOutput)
}

// csi represents storage that is handled by an external CSI driver (Beta feature).
func (o PersistentVolumeSpecPtrOutput) Csi() CSIPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *CSIPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Csi
	}).(CSIPersistentVolumeSourcePtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o PersistentVolumeSpecPtrOutput) Fc() FCVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *FCVolumeSource {
		if v == nil {
			return nil
		}
		return v.Fc
	}).(FCVolumeSourcePtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o PersistentVolumeSpecPtrOutput) FlexVolume() FlexPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *FlexPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.FlexVolume
	}).(FlexPersistentVolumeSourcePtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
func (o PersistentVolumeSpecPtrOutput) Flocker() FlockerVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *FlockerVolumeSource {
		if v == nil {
			return nil
		}
		return v.Flocker
	}).(FlockerVolumeSourcePtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o PersistentVolumeSpecPtrOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *GCEPersistentDiskVolumeSource {
		if v == nil {
			return nil
		}
		return v.GcePersistentDisk
	}).(GCEPersistentDiskVolumeSourcePtrOutput)
}

// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o PersistentVolumeSpecPtrOutput) Glusterfs() GlusterfsPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *GlusterfsPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Glusterfs
	}).(GlusterfsPersistentVolumeSourcePtrOutput)
}

// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o PersistentVolumeSpecPtrOutput) HostPath() HostPathVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *HostPathVolumeSource {
		if v == nil {
			return nil
		}
		return v.HostPath
	}).(HostPathVolumeSourcePtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
func (o PersistentVolumeSpecPtrOutput) Iscsi() ISCSIPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *ISCSIPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Iscsi
	}).(ISCSIPersistentVolumeSourcePtrOutput)
}

// local represents directly-attached storage with node affinity
func (o PersistentVolumeSpecPtrOutput) Local() LocalVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *LocalVolumeSource {
		if v == nil {
			return nil
		}
		return v.Local
	}).(LocalVolumeSourcePtrOutput)
}

// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
func (o PersistentVolumeSpecPtrOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) []string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringArrayOutput)
}

// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o PersistentVolumeSpecPtrOutput) Nfs() NFSVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *NFSVolumeSource {
		if v == nil {
			return nil
		}
		return v.Nfs
	}).(NFSVolumeSourcePtrOutput)
}

// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
func (o PersistentVolumeSpecPtrOutput) NodeAffinity() VolumeNodeAffinityPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *VolumeNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(VolumeNodeAffinityPtrOutput)
}

// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
func (o PersistentVolumeSpecPtrOutput) PersistentVolumeReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPtrOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *PhotonPersistentDiskVolumeSource {
		if v == nil {
			return nil
		}
		return v.PhotonPersistentDisk
	}).(PhotonPersistentDiskVolumeSourcePtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPtrOutput) PortworxVolume() PortworxVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *PortworxVolumeSource {
		if v == nil {
			return nil
		}
		return v.PortworxVolume
	}).(PortworxVolumeSourcePtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPtrOutput) Quobyte() QuobyteVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *QuobyteVolumeSource {
		if v == nil {
			return nil
		}
		return v.Quobyte
	}).(QuobyteVolumeSourcePtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o PersistentVolumeSpecPtrOutput) Rbd() RBDPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *RBDPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Rbd
	}).(RBDPersistentVolumeSourcePtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o PersistentVolumeSpecPtrOutput) ScaleIO() ScaleIOPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *ScaleIOPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.ScaleIO
	}).(ScaleIOPersistentVolumeSourcePtrOutput)
}

// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
func (o PersistentVolumeSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
func (o PersistentVolumeSpecPtrOutput) Storageos() StorageOSPersistentVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *StorageOSPersistentVolumeSource {
		if v == nil {
			return nil
		}
		return v.Storageos
	}).(StorageOSPersistentVolumeSourcePtrOutput)
}

// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
func (o PersistentVolumeSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPtrOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpec) *VsphereVirtualDiskVolumeSource {
		if v == nil {
			return nil
		}
		return v.VsphereVolume
	}).(VsphereVirtualDiskVolumeSourcePtrOutput)
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpecPatch struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes []string `pulumi:"accessModes"`
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSourcePatch `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSourcePatch `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFilePersistentVolumeSourcePatch `pulumi:"azureFile"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]string `pulumi:"capacity"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSPersistentVolumeSourcePatch `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *CinderPersistentVolumeSourcePatch `pulumi:"cinder"`
	// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
	ClaimRef *ObjectReferencePatch `pulumi:"claimRef"`
	// csi represents storage that is handled by an external CSI driver (Beta feature).
	Csi *CSIPersistentVolumeSourcePatch `pulumi:"csi"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *FCVolumeSourcePatch `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *FlexPersistentVolumeSourcePatch `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
	Flocker *FlockerVolumeSourcePatch `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSourcePatch `pulumi:"gcePersistentDisk"`
	// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *GlusterfsPersistentVolumeSourcePatch `pulumi:"glusterfs"`
	// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath *HostPathVolumeSourcePatch `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	Iscsi *ISCSIPersistentVolumeSourcePatch `pulumi:"iscsi"`
	// local represents directly-attached storage with node affinity
	Local *LocalVolumeSourcePatch `pulumi:"local"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions []string `pulumi:"mountOptions"`
	// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *NFSVolumeSourcePatch `pulumi:"nfs"`
	// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
	NodeAffinity *VolumeNodeAffinityPatch `pulumi:"nodeAffinity"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy *string `pulumi:"persistentVolumeReclaimPolicy"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSourcePatch `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *PortworxVolumeSourcePatch `pulumi:"portworxVolume"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSourcePatch `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RBDPersistentVolumeSourcePatch `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *ScaleIOPersistentVolumeSourcePatch `pulumi:"scaleIO"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName *string `pulumi:"storageClassName"`
	// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
	Storageos *StorageOSPersistentVolumeSourcePatch `pulumi:"storageos"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSourcePatch `pulumi:"vsphereVolume"`
}

// PersistentVolumeSpecPatchInput is an input type that accepts PersistentVolumeSpecPatchArgs and PersistentVolumeSpecPatchOutput values.
// You can construct a concrete instance of `PersistentVolumeSpecPatchInput` via:
//
//	PersistentVolumeSpecPatchArgs{...}
type PersistentVolumeSpecPatchInput interface {
	pulumi.Input

	ToPersistentVolumeSpecPatchOutput() PersistentVolumeSpecPatchOutput
	ToPersistentVolumeSpecPatchOutputWithContext(context.Context) PersistentVolumeSpecPatchOutput
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpecPatchArgs struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AWSElasticBlockStoreVolumeSourcePatchPtrInput `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AzureDiskVolumeSourcePatchPtrInput `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AzureFilePersistentVolumeSourcePatchPtrInput `pulumi:"azureFile"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs CephFSPersistentVolumeSourcePatchPtrInput `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder CinderPersistentVolumeSourcePatchPtrInput `pulumi:"cinder"`
	// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
	ClaimRef ObjectReferencePatchPtrInput `pulumi:"claimRef"`
	// csi represents storage that is handled by an external CSI driver (Beta feature).
	Csi CSIPersistentVolumeSourcePatchPtrInput `pulumi:"csi"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc FCVolumeSourcePatchPtrInput `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume FlexPersistentVolumeSourcePatchPtrInput `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
	Flocker FlockerVolumeSourcePatchPtrInput `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk GCEPersistentDiskVolumeSourcePatchPtrInput `pulumi:"gcePersistentDisk"`
	// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs GlusterfsPersistentVolumeSourcePatchPtrInput `pulumi:"glusterfs"`
	// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath HostPathVolumeSourcePatchPtrInput `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	Iscsi ISCSIPersistentVolumeSourcePatchPtrInput `pulumi:"iscsi"`
	// local represents directly-attached storage with node affinity
	Local LocalVolumeSourcePatchPtrInput `pulumi:"local"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs NFSVolumeSourcePatchPtrInput `pulumi:"nfs"`
	// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
	NodeAffinity VolumeNodeAffinityPatchPtrInput `pulumi:"nodeAffinity"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy pulumi.StringPtrInput `pulumi:"persistentVolumeReclaimPolicy"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk PhotonPersistentDiskVolumeSourcePatchPtrInput `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume PortworxVolumeSourcePatchPtrInput `pulumi:"portworxVolume"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte QuobyteVolumeSourcePatchPtrInput `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd RBDPersistentVolumeSourcePatchPtrInput `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO ScaleIOPersistentVolumeSourcePatchPtrInput `pulumi:"scaleIO"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
	Storageos StorageOSPersistentVolumeSourcePatchPtrInput `pulumi:"storageos"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume VsphereVirtualDiskVolumeSourcePatchPtrInput `pulumi:"vsphereVolume"`
}

func (PersistentVolumeSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeSpecPatch)(nil)).Elem()
}

func (i PersistentVolumeSpecPatchArgs) ToPersistentVolumeSpecPatchOutput() PersistentVolumeSpecPatchOutput {
	return i.ToPersistentVolumeSpecPatchOutputWithContext(context.Background())
}

func (i PersistentVolumeSpecPatchArgs) ToPersistentVolumeSpecPatchOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecPatchOutput)
}

func (i PersistentVolumeSpecPatchArgs) ToPersistentVolumeSpecPatchPtrOutput() PersistentVolumeSpecPatchPtrOutput {
	return i.ToPersistentVolumeSpecPatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeSpecPatchArgs) ToPersistentVolumeSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecPatchOutput).ToPersistentVolumeSpecPatchPtrOutputWithContext(ctx)
}

// PersistentVolumeSpecPatchPtrInput is an input type that accepts PersistentVolumeSpecPatchArgs, PersistentVolumeSpecPatchPtr and PersistentVolumeSpecPatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeSpecPatchPtrInput` via:
//
//	        PersistentVolumeSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeSpecPatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeSpecPatchPtrOutput() PersistentVolumeSpecPatchPtrOutput
	ToPersistentVolumeSpecPatchPtrOutputWithContext(context.Context) PersistentVolumeSpecPatchPtrOutput
}

type persistentVolumeSpecPatchPtrType PersistentVolumeSpecPatchArgs

func PersistentVolumeSpecPatchPtr(v *PersistentVolumeSpecPatchArgs) PersistentVolumeSpecPatchPtrInput {
	return (*persistentVolumeSpecPatchPtrType)(v)
}

func (*persistentVolumeSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeSpecPatch)(nil)).Elem()
}

func (i *persistentVolumeSpecPatchPtrType) ToPersistentVolumeSpecPatchPtrOutput() PersistentVolumeSpecPatchPtrOutput {
	return i.ToPersistentVolumeSpecPatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeSpecPatchPtrType) ToPersistentVolumeSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeSpecPatchPtrOutput)
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpecPatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeSpecPatch)(nil)).Elem()
}

func (o PersistentVolumeSpecPatchOutput) ToPersistentVolumeSpecPatchOutput() PersistentVolumeSpecPatchOutput {
	return o
}

func (o PersistentVolumeSpecPatchOutput) ToPersistentVolumeSpecPatchOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchOutput {
	return o
}

func (o PersistentVolumeSpecPatchOutput) ToPersistentVolumeSpecPatchPtrOutput() PersistentVolumeSpecPatchPtrOutput {
	return o.ToPersistentVolumeSpecPatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeSpecPatchOutput) ToPersistentVolumeSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeSpecPatch) *PersistentVolumeSpecPatch {
		return &v
	}).(PersistentVolumeSpecPatchPtrOutput)
}

// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
func (o PersistentVolumeSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o PersistentVolumeSpecPatchOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *AWSElasticBlockStoreVolumeSourcePatch {
		return v.AwsElasticBlockStore
	}).(AWSElasticBlockStoreVolumeSourcePatchPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPatchOutput) AzureDisk() AzureDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *AzureDiskVolumeSourcePatch { return v.AzureDisk }).(AzureDiskVolumeSourcePatchPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPatchOutput) AzureFile() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *AzureFilePersistentVolumeSourcePatch { return v.AzureFile }).(AzureFilePersistentVolumeSourcePatchPtrOutput)
}

// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o PersistentVolumeSpecPatchOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPatchOutput) Cephfs() CephFSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *CephFSPersistentVolumeSourcePatch { return v.Cephfs }).(CephFSPersistentVolumeSourcePatchPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o PersistentVolumeSpecPatchOutput) Cinder() CinderPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *CinderPersistentVolumeSourcePatch { return v.Cinder }).(CinderPersistentVolumeSourcePatchPtrOutput)
}

// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
func (o PersistentVolumeSpecPatchOutput) ClaimRef() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *ObjectReferencePatch { return v.ClaimRef }).(ObjectReferencePatchPtrOutput)
}

// csi represents storage that is handled by an external CSI driver (Beta feature).
func (o PersistentVolumeSpecPatchOutput) Csi() CSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *CSIPersistentVolumeSourcePatch { return v.Csi }).(CSIPersistentVolumeSourcePatchPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o PersistentVolumeSpecPatchOutput) Fc() FCVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *FCVolumeSourcePatch { return v.Fc }).(FCVolumeSourcePatchPtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o PersistentVolumeSpecPatchOutput) FlexVolume() FlexPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *FlexPersistentVolumeSourcePatch { return v.FlexVolume }).(FlexPersistentVolumeSourcePatchPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
func (o PersistentVolumeSpecPatchOutput) Flocker() FlockerVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *FlockerVolumeSourcePatch { return v.Flocker }).(FlockerVolumeSourcePatchPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o PersistentVolumeSpecPatchOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *GCEPersistentDiskVolumeSourcePatch { return v.GcePersistentDisk }).(GCEPersistentDiskVolumeSourcePatchPtrOutput)
}

// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o PersistentVolumeSpecPatchOutput) Glusterfs() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *GlusterfsPersistentVolumeSourcePatch { return v.Glusterfs }).(GlusterfsPersistentVolumeSourcePatchPtrOutput)
}

// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o PersistentVolumeSpecPatchOutput) HostPath() HostPathVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *HostPathVolumeSourcePatch { return v.HostPath }).(HostPathVolumeSourcePatchPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
func (o PersistentVolumeSpecPatchOutput) Iscsi() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *ISCSIPersistentVolumeSourcePatch { return v.Iscsi }).(ISCSIPersistentVolumeSourcePatchPtrOutput)
}

// local represents directly-attached storage with node affinity
func (o PersistentVolumeSpecPatchOutput) Local() LocalVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *LocalVolumeSourcePatch { return v.Local }).(LocalVolumeSourcePatchPtrOutput)
}

// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
func (o PersistentVolumeSpecPatchOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o PersistentVolumeSpecPatchOutput) Nfs() NFSVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *NFSVolumeSourcePatch { return v.Nfs }).(NFSVolumeSourcePatchPtrOutput)
}

// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
func (o PersistentVolumeSpecPatchOutput) NodeAffinity() VolumeNodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *VolumeNodeAffinityPatch { return v.NodeAffinity }).(VolumeNodeAffinityPatchPtrOutput)
}

// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
func (o PersistentVolumeSpecPatchOutput) PersistentVolumeReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *string { return v.PersistentVolumeReclaimPolicy }).(pulumi.StringPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *PhotonPersistentDiskVolumeSourcePatch {
		return v.PhotonPersistentDisk
	}).(PhotonPersistentDiskVolumeSourcePatchPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchOutput) PortworxVolume() PortworxVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *PortworxVolumeSourcePatch { return v.PortworxVolume }).(PortworxVolumeSourcePatchPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPatchOutput) Quobyte() QuobyteVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *QuobyteVolumeSourcePatch { return v.Quobyte }).(QuobyteVolumeSourcePatchPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o PersistentVolumeSpecPatchOutput) Rbd() RBDPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *RBDPersistentVolumeSourcePatch { return v.Rbd }).(RBDPersistentVolumeSourcePatchPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o PersistentVolumeSpecPatchOutput) ScaleIO() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *ScaleIOPersistentVolumeSourcePatch { return v.ScaleIO }).(ScaleIOPersistentVolumeSourcePatchPtrOutput)
}

// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
func (o PersistentVolumeSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
func (o PersistentVolumeSpecPatchOutput) Storageos() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *StorageOSPersistentVolumeSourcePatch { return v.Storageos }).(StorageOSPersistentVolumeSourcePatchPtrOutput)
}

// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
func (o PersistentVolumeSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v PersistentVolumeSpecPatch) *VsphereVirtualDiskVolumeSourcePatch { return v.VsphereVolume }).(VsphereVirtualDiskVolumeSourcePatchPtrOutput)
}

type PersistentVolumeSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeSpecPatch)(nil)).Elem()
}

func (o PersistentVolumeSpecPatchPtrOutput) ToPersistentVolumeSpecPatchPtrOutput() PersistentVolumeSpecPatchPtrOutput {
	return o
}

func (o PersistentVolumeSpecPatchPtrOutput) ToPersistentVolumeSpecPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeSpecPatchPtrOutput {
	return o
}

func (o PersistentVolumeSpecPatchPtrOutput) Elem() PersistentVolumeSpecPatchOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) PersistentVolumeSpecPatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeSpecPatch
		return ret
	}).(PersistentVolumeSpecPatchOutput)
}

// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
func (o PersistentVolumeSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o PersistentVolumeSpecPatchPtrOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *AWSElasticBlockStoreVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.AwsElasticBlockStore
	}).(AWSElasticBlockStoreVolumeSourcePatchPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPatchPtrOutput) AzureDisk() AzureDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *AzureDiskVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.AzureDisk
	}).(AzureDiskVolumeSourcePatchPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o PersistentVolumeSpecPatchPtrOutput) AzureFile() AzureFilePersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *AzureFilePersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.AzureFile
	}).(AzureFilePersistentVolumeSourcePatchPtrOutput)
}

// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (o PersistentVolumeSpecPatchPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPatchPtrOutput) Cephfs() CephFSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *CephFSPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Cephfs
	}).(CephFSPersistentVolumeSourcePatchPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o PersistentVolumeSpecPatchPtrOutput) Cinder() CinderPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *CinderPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Cinder
	}).(CinderPersistentVolumeSourcePatchPtrOutput)
}

// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
func (o PersistentVolumeSpecPatchPtrOutput) ClaimRef() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *ObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.ClaimRef
	}).(ObjectReferencePatchPtrOutput)
}

// csi represents storage that is handled by an external CSI driver (Beta feature).
func (o PersistentVolumeSpecPatchPtrOutput) Csi() CSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *CSIPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Csi
	}).(CSIPersistentVolumeSourcePatchPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o PersistentVolumeSpecPatchPtrOutput) Fc() FCVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *FCVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Fc
	}).(FCVolumeSourcePatchPtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o PersistentVolumeSpecPatchPtrOutput) FlexVolume() FlexPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *FlexPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.FlexVolume
	}).(FlexPersistentVolumeSourcePatchPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
func (o PersistentVolumeSpecPatchPtrOutput) Flocker() FlockerVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *FlockerVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Flocker
	}).(FlockerVolumeSourcePatchPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o PersistentVolumeSpecPatchPtrOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *GCEPersistentDiskVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.GcePersistentDisk
	}).(GCEPersistentDiskVolumeSourcePatchPtrOutput)
}

// glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o PersistentVolumeSpecPatchPtrOutput) Glusterfs() GlusterfsPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *GlusterfsPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Glusterfs
	}).(GlusterfsPersistentVolumeSourcePatchPtrOutput)
}

// hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o PersistentVolumeSpecPatchPtrOutput) HostPath() HostPathVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *HostPathVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.HostPath
	}).(HostPathVolumeSourcePatchPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
func (o PersistentVolumeSpecPatchPtrOutput) Iscsi() ISCSIPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *ISCSIPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Iscsi
	}).(ISCSIPersistentVolumeSourcePatchPtrOutput)
}

// local represents directly-attached storage with node affinity
func (o PersistentVolumeSpecPatchPtrOutput) Local() LocalVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *LocalVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Local
	}).(LocalVolumeSourcePatchPtrOutput)
}

// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
func (o PersistentVolumeSpecPatchPtrOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringArrayOutput)
}

// nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o PersistentVolumeSpecPatchPtrOutput) Nfs() NFSVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *NFSVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Nfs
	}).(NFSVolumeSourcePatchPtrOutput)
}

// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
func (o PersistentVolumeSpecPatchPtrOutput) NodeAffinity() VolumeNodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *VolumeNodeAffinityPatch {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(VolumeNodeAffinityPatchPtrOutput)
}

// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
func (o PersistentVolumeSpecPatchPtrOutput) PersistentVolumeReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchPtrOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *PhotonPersistentDiskVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.PhotonPersistentDisk
	}).(PhotonPersistentDiskVolumeSourcePatchPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchPtrOutput) PortworxVolume() PortworxVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *PortworxVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.PortworxVolume
	}).(PortworxVolumeSourcePatchPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o PersistentVolumeSpecPatchPtrOutput) Quobyte() QuobyteVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *QuobyteVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Quobyte
	}).(QuobyteVolumeSourcePatchPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o PersistentVolumeSpecPatchPtrOutput) Rbd() RBDPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *RBDPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Rbd
	}).(RBDPersistentVolumeSourcePatchPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o PersistentVolumeSpecPatchPtrOutput) ScaleIO() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *ScaleIOPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.ScaleIO
	}).(ScaleIOPersistentVolumeSourcePatchPtrOutput)
}

// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
func (o PersistentVolumeSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
func (o PersistentVolumeSpecPatchPtrOutput) Storageos() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *StorageOSPersistentVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.Storageos
	}).(StorageOSPersistentVolumeSourcePatchPtrOutput)
}

// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
func (o PersistentVolumeSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o PersistentVolumeSpecPatchPtrOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeSpecPatch) *VsphereVirtualDiskVolumeSourcePatch {
		if v == nil {
			return nil
		}
		return v.VsphereVolume
	}).(VsphereVirtualDiskVolumeSourcePatchPtrOutput)
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatus struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message *string `pulumi:"message"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase *string `pulumi:"phase"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason *string `pulumi:"reason"`
}

// PersistentVolumeStatusInput is an input type that accepts PersistentVolumeStatusArgs and PersistentVolumeStatusOutput values.
// You can construct a concrete instance of `PersistentVolumeStatusInput` via:
//
//	PersistentVolumeStatusArgs{...}
type PersistentVolumeStatusInput interface {
	pulumi.Input

	ToPersistentVolumeStatusOutput() PersistentVolumeStatusOutput
	ToPersistentVolumeStatusOutputWithContext(context.Context) PersistentVolumeStatusOutput
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatusArgs struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (PersistentVolumeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeStatus)(nil)).Elem()
}

func (i PersistentVolumeStatusArgs) ToPersistentVolumeStatusOutput() PersistentVolumeStatusOutput {
	return i.ToPersistentVolumeStatusOutputWithContext(context.Background())
}

func (i PersistentVolumeStatusArgs) ToPersistentVolumeStatusOutputWithContext(ctx context.Context) PersistentVolumeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusOutput)
}

func (i PersistentVolumeStatusArgs) ToPersistentVolumeStatusPtrOutput() PersistentVolumeStatusPtrOutput {
	return i.ToPersistentVolumeStatusPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeStatusArgs) ToPersistentVolumeStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusOutput).ToPersistentVolumeStatusPtrOutputWithContext(ctx)
}

// PersistentVolumeStatusPtrInput is an input type that accepts PersistentVolumeStatusArgs, PersistentVolumeStatusPtr and PersistentVolumeStatusPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeStatusPtrInput` via:
//
//	        PersistentVolumeStatusArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeStatusPtrInput interface {
	pulumi.Input

	ToPersistentVolumeStatusPtrOutput() PersistentVolumeStatusPtrOutput
	ToPersistentVolumeStatusPtrOutputWithContext(context.Context) PersistentVolumeStatusPtrOutput
}

type persistentVolumeStatusPtrType PersistentVolumeStatusArgs

func PersistentVolumeStatusPtr(v *PersistentVolumeStatusArgs) PersistentVolumeStatusPtrInput {
	return (*persistentVolumeStatusPtrType)(v)
}

func (*persistentVolumeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeStatus)(nil)).Elem()
}

func (i *persistentVolumeStatusPtrType) ToPersistentVolumeStatusPtrOutput() PersistentVolumeStatusPtrOutput {
	return i.ToPersistentVolumeStatusPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeStatusPtrType) ToPersistentVolumeStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusPtrOutput)
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatusOutput struct{ *pulumi.OutputState }

func (PersistentVolumeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeStatus)(nil)).Elem()
}

func (o PersistentVolumeStatusOutput) ToPersistentVolumeStatusOutput() PersistentVolumeStatusOutput {
	return o
}

func (o PersistentVolumeStatusOutput) ToPersistentVolumeStatusOutputWithContext(ctx context.Context) PersistentVolumeStatusOutput {
	return o
}

func (o PersistentVolumeStatusOutput) ToPersistentVolumeStatusPtrOutput() PersistentVolumeStatusPtrOutput {
	return o.ToPersistentVolumeStatusPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeStatusOutput) ToPersistentVolumeStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeStatus) *PersistentVolumeStatus {
		return &v
	}).(PersistentVolumeStatusPtrOutput)
}

// message is a human-readable message indicating details about why the volume is in this state.
func (o PersistentVolumeStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
func (o PersistentVolumeStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
func (o PersistentVolumeStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type PersistentVolumeStatusPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeStatus)(nil)).Elem()
}

func (o PersistentVolumeStatusPtrOutput) ToPersistentVolumeStatusPtrOutput() PersistentVolumeStatusPtrOutput {
	return o
}

func (o PersistentVolumeStatusPtrOutput) ToPersistentVolumeStatusPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPtrOutput {
	return o
}

func (o PersistentVolumeStatusPtrOutput) Elem() PersistentVolumeStatusOutput {
	return o.ApplyT(func(v *PersistentVolumeStatus) PersistentVolumeStatus {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeStatus
		return ret
	}).(PersistentVolumeStatusOutput)
}

// message is a human-readable message indicating details about why the volume is in this state.
func (o PersistentVolumeStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
func (o PersistentVolumeStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
func (o PersistentVolumeStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatusPatch struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message *string `pulumi:"message"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase *string `pulumi:"phase"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason *string `pulumi:"reason"`
}

// PersistentVolumeStatusPatchInput is an input type that accepts PersistentVolumeStatusPatchArgs and PersistentVolumeStatusPatchOutput values.
// You can construct a concrete instance of `PersistentVolumeStatusPatchInput` via:
//
//	PersistentVolumeStatusPatchArgs{...}
type PersistentVolumeStatusPatchInput interface {
	pulumi.Input

	ToPersistentVolumeStatusPatchOutput() PersistentVolumeStatusPatchOutput
	ToPersistentVolumeStatusPatchOutputWithContext(context.Context) PersistentVolumeStatusPatchOutput
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatusPatchArgs struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (PersistentVolumeStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeStatusPatch)(nil)).Elem()
}

func (i PersistentVolumeStatusPatchArgs) ToPersistentVolumeStatusPatchOutput() PersistentVolumeStatusPatchOutput {
	return i.ToPersistentVolumeStatusPatchOutputWithContext(context.Background())
}

func (i PersistentVolumeStatusPatchArgs) ToPersistentVolumeStatusPatchOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusPatchOutput)
}

func (i PersistentVolumeStatusPatchArgs) ToPersistentVolumeStatusPatchPtrOutput() PersistentVolumeStatusPatchPtrOutput {
	return i.ToPersistentVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (i PersistentVolumeStatusPatchArgs) ToPersistentVolumeStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusPatchOutput).ToPersistentVolumeStatusPatchPtrOutputWithContext(ctx)
}

// PersistentVolumeStatusPatchPtrInput is an input type that accepts PersistentVolumeStatusPatchArgs, PersistentVolumeStatusPatchPtr and PersistentVolumeStatusPatchPtrOutput values.
// You can construct a concrete instance of `PersistentVolumeStatusPatchPtrInput` via:
//
//	        PersistentVolumeStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PersistentVolumeStatusPatchPtrInput interface {
	pulumi.Input

	ToPersistentVolumeStatusPatchPtrOutput() PersistentVolumeStatusPatchPtrOutput
	ToPersistentVolumeStatusPatchPtrOutputWithContext(context.Context) PersistentVolumeStatusPatchPtrOutput
}

type persistentVolumeStatusPatchPtrType PersistentVolumeStatusPatchArgs

func PersistentVolumeStatusPatchPtr(v *PersistentVolumeStatusPatchArgs) PersistentVolumeStatusPatchPtrInput {
	return (*persistentVolumeStatusPatchPtrType)(v)
}

func (*persistentVolumeStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeStatusPatch)(nil)).Elem()
}

func (i *persistentVolumeStatusPatchPtrType) ToPersistentVolumeStatusPatchPtrOutput() PersistentVolumeStatusPatchPtrOutput {
	return i.ToPersistentVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (i *persistentVolumeStatusPatchPtrType) ToPersistentVolumeStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentVolumeStatusPatchPtrOutput)
}

// PersistentVolumeStatus is the current status of a persistent volume.
type PersistentVolumeStatusPatchOutput struct{ *pulumi.OutputState }

func (PersistentVolumeStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentVolumeStatusPatch)(nil)).Elem()
}

func (o PersistentVolumeStatusPatchOutput) ToPersistentVolumeStatusPatchOutput() PersistentVolumeStatusPatchOutput {
	return o
}

func (o PersistentVolumeStatusPatchOutput) ToPersistentVolumeStatusPatchOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchOutput {
	return o
}

func (o PersistentVolumeStatusPatchOutput) ToPersistentVolumeStatusPatchPtrOutput() PersistentVolumeStatusPatchPtrOutput {
	return o.ToPersistentVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (o PersistentVolumeStatusPatchOutput) ToPersistentVolumeStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistentVolumeStatusPatch) *PersistentVolumeStatusPatch {
		return &v
	}).(PersistentVolumeStatusPatchPtrOutput)
}

// message is a human-readable message indicating details about why the volume is in this state.
func (o PersistentVolumeStatusPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatusPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
func (o PersistentVolumeStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
func (o PersistentVolumeStatusPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentVolumeStatusPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type PersistentVolumeStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PersistentVolumeStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentVolumeStatusPatch)(nil)).Elem()
}

func (o PersistentVolumeStatusPatchPtrOutput) ToPersistentVolumeStatusPatchPtrOutput() PersistentVolumeStatusPatchPtrOutput {
	return o
}

func (o PersistentVolumeStatusPatchPtrOutput) ToPersistentVolumeStatusPatchPtrOutputWithContext(ctx context.Context) PersistentVolumeStatusPatchPtrOutput {
	return o
}

func (o PersistentVolumeStatusPatchPtrOutput) Elem() PersistentVolumeStatusPatchOutput {
	return o.ApplyT(func(v *PersistentVolumeStatusPatch) PersistentVolumeStatusPatch {
		if v != nil {
			return *v
		}
		var ret PersistentVolumeStatusPatch
		return ret
	}).(PersistentVolumeStatusPatchOutput)
}

// message is a human-readable message indicating details about why the volume is in this state.
func (o PersistentVolumeStatusPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
func (o PersistentVolumeStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
func (o PersistentVolumeStatusPatchPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistentVolumeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID string `pulumi:"pdID"`
}

// PhotonPersistentDiskVolumeSourceInput is an input type that accepts PhotonPersistentDiskVolumeSourceArgs and PhotonPersistentDiskVolumeSourceOutput values.
// You can construct a concrete instance of `PhotonPersistentDiskVolumeSourceInput` via:
//
//	PhotonPersistentDiskVolumeSourceArgs{...}
type PhotonPersistentDiskVolumeSourceInput interface {
	pulumi.Input

	ToPhotonPersistentDiskVolumeSourceOutput() PhotonPersistentDiskVolumeSourceOutput
	ToPhotonPersistentDiskVolumeSourceOutputWithContext(context.Context) PhotonPersistentDiskVolumeSourceOutput
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID pulumi.StringInput `pulumi:"pdID"`
}

func (PhotonPersistentDiskVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhotonPersistentDiskVolumeSource)(nil)).Elem()
}

func (i PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourceOutput() PhotonPersistentDiskVolumeSourceOutput {
	return i.ToPhotonPersistentDiskVolumeSourceOutputWithContext(context.Background())
}

func (i PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourceOutput)
}

func (i PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourcePtrOutput() PhotonPersistentDiskVolumeSourcePtrOutput {
	return i.ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i PhotonPersistentDiskVolumeSourceArgs) ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourceOutput).ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(ctx)
}

// PhotonPersistentDiskVolumeSourcePtrInput is an input type that accepts PhotonPersistentDiskVolumeSourceArgs, PhotonPersistentDiskVolumeSourcePtr and PhotonPersistentDiskVolumeSourcePtrOutput values.
// You can construct a concrete instance of `PhotonPersistentDiskVolumeSourcePtrInput` via:
//
//	        PhotonPersistentDiskVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type PhotonPersistentDiskVolumeSourcePtrInput interface {
	pulumi.Input

	ToPhotonPersistentDiskVolumeSourcePtrOutput() PhotonPersistentDiskVolumeSourcePtrOutput
	ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(context.Context) PhotonPersistentDiskVolumeSourcePtrOutput
}

type photonPersistentDiskVolumeSourcePtrType PhotonPersistentDiskVolumeSourceArgs

func PhotonPersistentDiskVolumeSourcePtr(v *PhotonPersistentDiskVolumeSourceArgs) PhotonPersistentDiskVolumeSourcePtrInput {
	return (*photonPersistentDiskVolumeSourcePtrType)(v)
}

func (*photonPersistentDiskVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PhotonPersistentDiskVolumeSource)(nil)).Elem()
}

func (i *photonPersistentDiskVolumeSourcePtrType) ToPhotonPersistentDiskVolumeSourcePtrOutput() PhotonPersistentDiskVolumeSourcePtrOutput {
	return i.ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *photonPersistentDiskVolumeSourcePtrType) ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourcePtrOutput)
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSourceOutput struct{ *pulumi.OutputState }

func (PhotonPersistentDiskVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhotonPersistentDiskVolumeSource)(nil)).Elem()
}

func (o PhotonPersistentDiskVolumeSourceOutput) ToPhotonPersistentDiskVolumeSourceOutput() PhotonPersistentDiskVolumeSourceOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourceOutput) ToPhotonPersistentDiskVolumeSourceOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourceOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourceOutput) ToPhotonPersistentDiskVolumeSourcePtrOutput() PhotonPersistentDiskVolumeSourcePtrOutput {
	return o.ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (o PhotonPersistentDiskVolumeSourceOutput) ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PhotonPersistentDiskVolumeSource) *PhotonPersistentDiskVolumeSource {
		return &v
	}).(PhotonPersistentDiskVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o PhotonPersistentDiskVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhotonPersistentDiskVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o PhotonPersistentDiskVolumeSourceOutput) PdID() pulumi.StringOutput {
	return o.ApplyT(func(v PhotonPersistentDiskVolumeSource) string { return v.PdID }).(pulumi.StringOutput)
}

type PhotonPersistentDiskVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (PhotonPersistentDiskVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhotonPersistentDiskVolumeSource)(nil)).Elem()
}

func (o PhotonPersistentDiskVolumeSourcePtrOutput) ToPhotonPersistentDiskVolumeSourcePtrOutput() PhotonPersistentDiskVolumeSourcePtrOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePtrOutput) ToPhotonPersistentDiskVolumeSourcePtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePtrOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePtrOutput) Elem() PhotonPersistentDiskVolumeSourceOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSource) PhotonPersistentDiskVolumeSource {
		if v != nil {
			return *v
		}
		var ret PhotonPersistentDiskVolumeSource
		return ret
	}).(PhotonPersistentDiskVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o PhotonPersistentDiskVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o PhotonPersistentDiskVolumeSourcePtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.PdID
	}).(pulumi.StringPtrOutput)
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID *string `pulumi:"pdID"`
}

// PhotonPersistentDiskVolumeSourcePatchInput is an input type that accepts PhotonPersistentDiskVolumeSourcePatchArgs and PhotonPersistentDiskVolumeSourcePatchOutput values.
// You can construct a concrete instance of `PhotonPersistentDiskVolumeSourcePatchInput` via:
//
//	PhotonPersistentDiskVolumeSourcePatchArgs{...}
type PhotonPersistentDiskVolumeSourcePatchInput interface {
	pulumi.Input

	ToPhotonPersistentDiskVolumeSourcePatchOutput() PhotonPersistentDiskVolumeSourcePatchOutput
	ToPhotonPersistentDiskVolumeSourcePatchOutputWithContext(context.Context) PhotonPersistentDiskVolumeSourcePatchOutput
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID pulumi.StringPtrInput `pulumi:"pdID"`
}

func (PhotonPersistentDiskVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhotonPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (i PhotonPersistentDiskVolumeSourcePatchArgs) ToPhotonPersistentDiskVolumeSourcePatchOutput() PhotonPersistentDiskVolumeSourcePatchOutput {
	return i.ToPhotonPersistentDiskVolumeSourcePatchOutputWithContext(context.Background())
}

func (i PhotonPersistentDiskVolumeSourcePatchArgs) ToPhotonPersistentDiskVolumeSourcePatchOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourcePatchOutput)
}

func (i PhotonPersistentDiskVolumeSourcePatchArgs) ToPhotonPersistentDiskVolumeSourcePatchPtrOutput() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return i.ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i PhotonPersistentDiskVolumeSourcePatchArgs) ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourcePatchOutput).ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx)
}

// PhotonPersistentDiskVolumeSourcePatchPtrInput is an input type that accepts PhotonPersistentDiskVolumeSourcePatchArgs, PhotonPersistentDiskVolumeSourcePatchPtr and PhotonPersistentDiskVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `PhotonPersistentDiskVolumeSourcePatchPtrInput` via:
//
//	        PhotonPersistentDiskVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type PhotonPersistentDiskVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToPhotonPersistentDiskVolumeSourcePatchPtrOutput() PhotonPersistentDiskVolumeSourcePatchPtrOutput
	ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Context) PhotonPersistentDiskVolumeSourcePatchPtrOutput
}

type photonPersistentDiskVolumeSourcePatchPtrType PhotonPersistentDiskVolumeSourcePatchArgs

func PhotonPersistentDiskVolumeSourcePatchPtr(v *PhotonPersistentDiskVolumeSourcePatchArgs) PhotonPersistentDiskVolumeSourcePatchPtrInput {
	return (*photonPersistentDiskVolumeSourcePatchPtrType)(v)
}

func (*photonPersistentDiskVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PhotonPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (i *photonPersistentDiskVolumeSourcePatchPtrType) ToPhotonPersistentDiskVolumeSourcePatchPtrOutput() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return i.ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *photonPersistentDiskVolumeSourcePatchPtrType) ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhotonPersistentDiskVolumeSourcePatchPtrOutput)
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (PhotonPersistentDiskVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhotonPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (o PhotonPersistentDiskVolumeSourcePatchOutput) ToPhotonPersistentDiskVolumeSourcePatchOutput() PhotonPersistentDiskVolumeSourcePatchOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePatchOutput) ToPhotonPersistentDiskVolumeSourcePatchOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePatchOutput) ToPhotonPersistentDiskVolumeSourcePatchPtrOutput() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o PhotonPersistentDiskVolumeSourcePatchOutput) ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PhotonPersistentDiskVolumeSourcePatch) *PhotonPersistentDiskVolumeSourcePatch {
		return &v
	}).(PhotonPersistentDiskVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o PhotonPersistentDiskVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhotonPersistentDiskVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o PhotonPersistentDiskVolumeSourcePatchOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhotonPersistentDiskVolumeSourcePatch) *string { return v.PdID }).(pulumi.StringPtrOutput)
}

type PhotonPersistentDiskVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (PhotonPersistentDiskVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhotonPersistentDiskVolumeSourcePatch)(nil)).Elem()
}

func (o PhotonPersistentDiskVolumeSourcePatchPtrOutput) ToPhotonPersistentDiskVolumeSourcePatchPtrOutput() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePatchPtrOutput) ToPhotonPersistentDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o PhotonPersistentDiskVolumeSourcePatchPtrOutput) Elem() PhotonPersistentDiskVolumeSourcePatchOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSourcePatch) PhotonPersistentDiskVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret PhotonPersistentDiskVolumeSourcePatch
		return ret
	}).(PhotonPersistentDiskVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o PhotonPersistentDiskVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o PhotonPersistentDiskVolumeSourcePatchPtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhotonPersistentDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.PdID
	}).(pulumi.StringPtrOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PodSpec `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *PodStatus `pulumi:"status"`
}

// PodTypeInput is an input type that accepts PodTypeArgs and PodTypeOutput values.
// You can construct a concrete instance of `PodTypeInput` via:
//
//	PodTypeArgs{...}
type PodTypeInput interface {
	pulumi.Input

	ToPodTypeOutput() PodTypeOutput
	ToPodTypeOutputWithContext(context.Context) PodTypeOutput
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PodStatusPtrInput `pulumi:"status"`
}

func (PodTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodType)(nil)).Elem()
}

func (i PodTypeArgs) ToPodTypeOutput() PodTypeOutput {
	return i.ToPodTypeOutputWithContext(context.Background())
}

func (i PodTypeArgs) ToPodTypeOutputWithContext(ctx context.Context) PodTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTypeOutput)
}

// PodTypeArrayInput is an input type that accepts PodTypeArray and PodTypeArrayOutput values.
// You can construct a concrete instance of `PodTypeArrayInput` via:
//
//	PodTypeArray{ PodTypeArgs{...} }
type PodTypeArrayInput interface {
	pulumi.Input

	ToPodTypeArrayOutput() PodTypeArrayOutput
	ToPodTypeArrayOutputWithContext(context.Context) PodTypeArrayOutput
}

type PodTypeArray []PodTypeInput

func (PodTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodType)(nil)).Elem()
}

func (i PodTypeArray) ToPodTypeArrayOutput() PodTypeArrayOutput {
	return i.ToPodTypeArrayOutputWithContext(context.Background())
}

func (i PodTypeArray) ToPodTypeArrayOutputWithContext(ctx context.Context) PodTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTypeArrayOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodTypeOutput struct{ *pulumi.OutputState }

func (PodTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodType)(nil)).Elem()
}

func (o PodTypeOutput) ToPodTypeOutput() PodTypeOutput {
	return o
}

func (o PodTypeOutput) ToPodTypeOutputWithContext(ctx context.Context) PodTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTypeOutput) Spec() PodSpecPtrOutput {
	return o.ApplyT(func(v PodType) *PodSpec { return v.Spec }).(PodSpecPtrOutput)
}

// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTypeOutput) Status() PodStatusPtrOutput {
	return o.ApplyT(func(v PodType) *PodStatus { return v.Status }).(PodStatusPtrOutput)
}

type PodTypeArrayOutput struct{ *pulumi.OutputState }

func (PodTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodType)(nil)).Elem()
}

func (o PodTypeArrayOutput) ToPodTypeArrayOutput() PodTypeArrayOutput {
	return o
}

func (o PodTypeArrayOutput) ToPodTypeArrayOutputWithContext(ctx context.Context) PodTypeArrayOutput {
	return o
}

func (o PodTypeArrayOutput) Index(i pulumi.IntInput) PodTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodType {
		return vs[0].([]PodType)[vs[1].(int)]
	}).(PodTypeOutput)
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []WeightedPodAffinityTerm `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PodAffinityTerm `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PodAffinityInput is an input type that accepts PodAffinityArgs and PodAffinityOutput values.
// You can construct a concrete instance of `PodAffinityInput` via:
//
//	PodAffinityArgs{...}
type PodAffinityInput interface {
	pulumi.Input

	ToPodAffinityOutput() PodAffinityOutput
	ToPodAffinityOutputWithContext(context.Context) PodAffinityOutput
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTermArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PodAffinityTermArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PodAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinity)(nil)).Elem()
}

func (i PodAffinityArgs) ToPodAffinityOutput() PodAffinityOutput {
	return i.ToPodAffinityOutputWithContext(context.Background())
}

func (i PodAffinityArgs) ToPodAffinityOutputWithContext(ctx context.Context) PodAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityOutput)
}

func (i PodAffinityArgs) ToPodAffinityPtrOutput() PodAffinityPtrOutput {
	return i.ToPodAffinityPtrOutputWithContext(context.Background())
}

func (i PodAffinityArgs) ToPodAffinityPtrOutputWithContext(ctx context.Context) PodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityOutput).ToPodAffinityPtrOutputWithContext(ctx)
}

// PodAffinityPtrInput is an input type that accepts PodAffinityArgs, PodAffinityPtr and PodAffinityPtrOutput values.
// You can construct a concrete instance of `PodAffinityPtrInput` via:
//
//	        PodAffinityArgs{...}
//
//	or:
//
//	        nil
type PodAffinityPtrInput interface {
	pulumi.Input

	ToPodAffinityPtrOutput() PodAffinityPtrOutput
	ToPodAffinityPtrOutputWithContext(context.Context) PodAffinityPtrOutput
}

type podAffinityPtrType PodAffinityArgs

func PodAffinityPtr(v *PodAffinityArgs) PodAffinityPtrInput {
	return (*podAffinityPtrType)(v)
}

func (*podAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinity)(nil)).Elem()
}

func (i *podAffinityPtrType) ToPodAffinityPtrOutput() PodAffinityPtrOutput {
	return i.ToPodAffinityPtrOutputWithContext(context.Background())
}

func (i *podAffinityPtrType) ToPodAffinityPtrOutputWithContext(ctx context.Context) PodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityPtrOutput)
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinityOutput struct{ *pulumi.OutputState }

func (PodAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinity)(nil)).Elem()
}

func (o PodAffinityOutput) ToPodAffinityOutput() PodAffinityOutput {
	return o
}

func (o PodAffinityOutput) ToPodAffinityOutputWithContext(ctx context.Context) PodAffinityOutput {
	return o
}

func (o PodAffinityOutput) ToPodAffinityPtrOutput() PodAffinityPtrOutput {
	return o.ToPodAffinityPtrOutputWithContext(context.Background())
}

func (o PodAffinityOutput) ToPodAffinityPtrOutputWithContext(ctx context.Context) PodAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodAffinity) *PodAffinity {
		return &v
	}).(PodAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermArrayOutput {
	return o.ApplyT(func(v PodAffinity) []WeightedPodAffinityTerm {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermArrayOutput {
	return o.ApplyT(func(v PodAffinity) []PodAffinityTerm { return v.RequiredDuringSchedulingIgnoredDuringExecution }).(PodAffinityTermArrayOutput)
}

type PodAffinityPtrOutput struct{ *pulumi.OutputState }

func (PodAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinity)(nil)).Elem()
}

func (o PodAffinityPtrOutput) ToPodAffinityPtrOutput() PodAffinityPtrOutput {
	return o
}

func (o PodAffinityPtrOutput) ToPodAffinityPtrOutputWithContext(ctx context.Context) PodAffinityPtrOutput {
	return o
}

func (o PodAffinityPtrOutput) Elem() PodAffinityOutput {
	return o.ApplyT(func(v *PodAffinity) PodAffinity {
		if v != nil {
			return *v
		}
		var ret PodAffinity
		return ret
	}).(PodAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermArrayOutput {
	return o.ApplyT(func(v *PodAffinity) []WeightedPodAffinityTerm {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermArrayOutput {
	return o.ApplyT(func(v *PodAffinity) []PodAffinityTerm {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermArrayOutput)
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []WeightedPodAffinityTermPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PodAffinityTermPatch `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PodAffinityPatchInput is an input type that accepts PodAffinityPatchArgs and PodAffinityPatchOutput values.
// You can construct a concrete instance of `PodAffinityPatchInput` via:
//
//	PodAffinityPatchArgs{...}
type PodAffinityPatchInput interface {
	pulumi.Input

	ToPodAffinityPatchOutput() PodAffinityPatchOutput
	ToPodAffinityPatchOutputWithContext(context.Context) PodAffinityPatchOutput
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTermPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PodAffinityTermPatchArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PodAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityPatch)(nil)).Elem()
}

func (i PodAffinityPatchArgs) ToPodAffinityPatchOutput() PodAffinityPatchOutput {
	return i.ToPodAffinityPatchOutputWithContext(context.Background())
}

func (i PodAffinityPatchArgs) ToPodAffinityPatchOutputWithContext(ctx context.Context) PodAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityPatchOutput)
}

func (i PodAffinityPatchArgs) ToPodAffinityPatchPtrOutput() PodAffinityPatchPtrOutput {
	return i.ToPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PodAffinityPatchArgs) ToPodAffinityPatchPtrOutputWithContext(ctx context.Context) PodAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityPatchOutput).ToPodAffinityPatchPtrOutputWithContext(ctx)
}

// PodAffinityPatchPtrInput is an input type that accepts PodAffinityPatchArgs, PodAffinityPatchPtr and PodAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PodAffinityPatchPtrInput` via:
//
//	        PodAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PodAffinityPatchPtrInput interface {
	pulumi.Input

	ToPodAffinityPatchPtrOutput() PodAffinityPatchPtrOutput
	ToPodAffinityPatchPtrOutputWithContext(context.Context) PodAffinityPatchPtrOutput
}

type podAffinityPatchPtrType PodAffinityPatchArgs

func PodAffinityPatchPtr(v *PodAffinityPatchArgs) PodAffinityPatchPtrInput {
	return (*podAffinityPatchPtrType)(v)
}

func (*podAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinityPatch)(nil)).Elem()
}

func (i *podAffinityPatchPtrType) ToPodAffinityPatchPtrOutput() PodAffinityPatchPtrOutput {
	return i.ToPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *podAffinityPatchPtrType) ToPodAffinityPatchPtrOutputWithContext(ctx context.Context) PodAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityPatchPtrOutput)
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type PodAffinityPatchOutput struct{ *pulumi.OutputState }

func (PodAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityPatch)(nil)).Elem()
}

func (o PodAffinityPatchOutput) ToPodAffinityPatchOutput() PodAffinityPatchOutput {
	return o
}

func (o PodAffinityPatchOutput) ToPodAffinityPatchOutputWithContext(ctx context.Context) PodAffinityPatchOutput {
	return o
}

func (o PodAffinityPatchOutput) ToPodAffinityPatchPtrOutput() PodAffinityPatchPtrOutput {
	return o.ToPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PodAffinityPatchOutput) ToPodAffinityPatchPtrOutputWithContext(ctx context.Context) PodAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodAffinityPatch) *PodAffinityPatch {
		return &v
	}).(PodAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v PodAffinityPatch) []WeightedPodAffinityTermPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v PodAffinityPatch) []PodAffinityTermPatch {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermPatchArrayOutput)
}

type PodAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PodAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinityPatch)(nil)).Elem()
}

func (o PodAffinityPatchPtrOutput) ToPodAffinityPatchPtrOutput() PodAffinityPatchPtrOutput {
	return o
}

func (o PodAffinityPatchPtrOutput) ToPodAffinityPatchPtrOutputWithContext(ctx context.Context) PodAffinityPatchPtrOutput {
	return o
}

func (o PodAffinityPatchPtrOutput) Elem() PodAffinityPatchOutput {
	return o.ApplyT(func(v *PodAffinityPatch) PodAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PodAffinityPatch
		return ret
	}).(PodAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v *PodAffinityPatch) []WeightedPodAffinityTermPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v *PodAffinityPatch) []PodAffinityTermPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermPatchArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *metav1.LabelSelector `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *metav1.LabelSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// PodAffinityTermInput is an input type that accepts PodAffinityTermArgs and PodAffinityTermOutput values.
// You can construct a concrete instance of `PodAffinityTermInput` via:
//
//	PodAffinityTermArgs{...}
type PodAffinityTermInput interface {
	pulumi.Input

	ToPodAffinityTermOutput() PodAffinityTermOutput
	ToPodAffinityTermOutputWithContext(context.Context) PodAffinityTermOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTermArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector metav1.LabelSelectorPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector metav1.LabelSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (PodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityTerm)(nil)).Elem()
}

func (i PodAffinityTermArgs) ToPodAffinityTermOutput() PodAffinityTermOutput {
	return i.ToPodAffinityTermOutputWithContext(context.Background())
}

func (i PodAffinityTermArgs) ToPodAffinityTermOutputWithContext(ctx context.Context) PodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermOutput)
}

// PodAffinityTermArrayInput is an input type that accepts PodAffinityTermArray and PodAffinityTermArrayOutput values.
// You can construct a concrete instance of `PodAffinityTermArrayInput` via:
//
//	PodAffinityTermArray{ PodAffinityTermArgs{...} }
type PodAffinityTermArrayInput interface {
	pulumi.Input

	ToPodAffinityTermArrayOutput() PodAffinityTermArrayOutput
	ToPodAffinityTermArrayOutputWithContext(context.Context) PodAffinityTermArrayOutput
}

type PodAffinityTermArray []PodAffinityTermInput

func (PodAffinityTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodAffinityTerm)(nil)).Elem()
}

func (i PodAffinityTermArray) ToPodAffinityTermArrayOutput() PodAffinityTermArrayOutput {
	return i.ToPodAffinityTermArrayOutputWithContext(context.Background())
}

func (i PodAffinityTermArray) ToPodAffinityTermArrayOutputWithContext(ctx context.Context) PodAffinityTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTermOutput struct{ *pulumi.OutputState }

func (PodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityTerm)(nil)).Elem()
}

func (o PodAffinityTermOutput) ToPodAffinityTermOutput() PodAffinityTermOutput {
	return o
}

func (o PodAffinityTermOutput) ToPodAffinityTermOutputWithContext(ctx context.Context) PodAffinityTermOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o PodAffinityTermOutput) LabelSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PodAffinityTerm) *metav1.LabelSelector { return v.LabelSelector }).(metav1.LabelSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o PodAffinityTermOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v PodAffinityTerm) *metav1.LabelSelector { return v.NamespaceSelector }).(metav1.LabelSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodAffinityTerm) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v PodAffinityTerm) string { return v.TopologyKey }).(pulumi.StringOutput)
}

type PodAffinityTermArrayOutput struct{ *pulumi.OutputState }

func (PodAffinityTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodAffinityTerm)(nil)).Elem()
}

func (o PodAffinityTermArrayOutput) ToPodAffinityTermArrayOutput() PodAffinityTermArrayOutput {
	return o
}

func (o PodAffinityTermArrayOutput) ToPodAffinityTermArrayOutputWithContext(ctx context.Context) PodAffinityTermArrayOutput {
	return o
}

func (o PodAffinityTermArrayOutput) Index(i pulumi.IntInput) PodAffinityTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodAffinityTerm {
		return vs[0].([]PodAffinityTerm)[vs[1].(int)]
	}).(PodAffinityTermOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTermPatch struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *metav1.LabelSelectorPatch `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *metav1.LabelSelectorPatch `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PodAffinityTermPatchInput is an input type that accepts PodAffinityTermPatchArgs and PodAffinityTermPatchOutput values.
// You can construct a concrete instance of `PodAffinityTermPatchInput` via:
//
//	PodAffinityTermPatchArgs{...}
type PodAffinityTermPatchInput interface {
	pulumi.Input

	ToPodAffinityTermPatchOutput() PodAffinityTermPatchOutput
	ToPodAffinityTermPatchOutputWithContext(context.Context) PodAffinityTermPatchOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTermPatchArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector metav1.LabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector metav1.LabelSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PodAffinityTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityTermPatch)(nil)).Elem()
}

func (i PodAffinityTermPatchArgs) ToPodAffinityTermPatchOutput() PodAffinityTermPatchOutput {
	return i.ToPodAffinityTermPatchOutputWithContext(context.Background())
}

func (i PodAffinityTermPatchArgs) ToPodAffinityTermPatchOutputWithContext(ctx context.Context) PodAffinityTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermPatchOutput)
}

func (i PodAffinityTermPatchArgs) ToPodAffinityTermPatchPtrOutput() PodAffinityTermPatchPtrOutput {
	return i.ToPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i PodAffinityTermPatchArgs) ToPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermPatchOutput).ToPodAffinityTermPatchPtrOutputWithContext(ctx)
}

// PodAffinityTermPatchPtrInput is an input type that accepts PodAffinityTermPatchArgs, PodAffinityTermPatchPtr and PodAffinityTermPatchPtrOutput values.
// You can construct a concrete instance of `PodAffinityTermPatchPtrInput` via:
//
//	        PodAffinityTermPatchArgs{...}
//
//	or:
//
//	        nil
type PodAffinityTermPatchPtrInput interface {
	pulumi.Input

	ToPodAffinityTermPatchPtrOutput() PodAffinityTermPatchPtrOutput
	ToPodAffinityTermPatchPtrOutputWithContext(context.Context) PodAffinityTermPatchPtrOutput
}

type podAffinityTermPatchPtrType PodAffinityTermPatchArgs

func PodAffinityTermPatchPtr(v *PodAffinityTermPatchArgs) PodAffinityTermPatchPtrInput {
	return (*podAffinityTermPatchPtrType)(v)
}

func (*podAffinityTermPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinityTermPatch)(nil)).Elem()
}

func (i *podAffinityTermPatchPtrType) ToPodAffinityTermPatchPtrOutput() PodAffinityTermPatchPtrOutput {
	return i.ToPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i *podAffinityTermPatchPtrType) ToPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermPatchPtrOutput)
}

// PodAffinityTermPatchArrayInput is an input type that accepts PodAffinityTermPatchArray and PodAffinityTermPatchArrayOutput values.
// You can construct a concrete instance of `PodAffinityTermPatchArrayInput` via:
//
//	PodAffinityTermPatchArray{ PodAffinityTermPatchArgs{...} }
type PodAffinityTermPatchArrayInput interface {
	pulumi.Input

	ToPodAffinityTermPatchArrayOutput() PodAffinityTermPatchArrayOutput
	ToPodAffinityTermPatchArrayOutputWithContext(context.Context) PodAffinityTermPatchArrayOutput
}

type PodAffinityTermPatchArray []PodAffinityTermPatchInput

func (PodAffinityTermPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodAffinityTermPatch)(nil)).Elem()
}

func (i PodAffinityTermPatchArray) ToPodAffinityTermPatchArrayOutput() PodAffinityTermPatchArrayOutput {
	return i.ToPodAffinityTermPatchArrayOutputWithContext(context.Background())
}

func (i PodAffinityTermPatchArray) ToPodAffinityTermPatchArrayOutputWithContext(ctx context.Context) PodAffinityTermPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAffinityTermPatchArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PodAffinityTermPatchOutput struct{ *pulumi.OutputState }

func (PodAffinityTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAffinityTermPatch)(nil)).Elem()
}

func (o PodAffinityTermPatchOutput) ToPodAffinityTermPatchOutput() PodAffinityTermPatchOutput {
	return o
}

func (o PodAffinityTermPatchOutput) ToPodAffinityTermPatchOutputWithContext(ctx context.Context) PodAffinityTermPatchOutput {
	return o
}

func (o PodAffinityTermPatchOutput) ToPodAffinityTermPatchPtrOutput() PodAffinityTermPatchPtrOutput {
	return o.ToPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (o PodAffinityTermPatchOutput) ToPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PodAffinityTermPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodAffinityTermPatch) *PodAffinityTermPatch {
		return &v
	}).(PodAffinityTermPatchPtrOutput)
}

// A label query over a set of resources, in this case pods.
func (o PodAffinityTermPatchOutput) LabelSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PodAffinityTermPatch) *metav1.LabelSelectorPatch { return v.LabelSelector }).(metav1.LabelSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o PodAffinityTermPatchOutput) NamespaceSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PodAffinityTermPatch) *metav1.LabelSelectorPatch { return v.NamespaceSelector }).(metav1.LabelSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PodAffinityTermPatchOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodAffinityTermPatch) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PodAffinityTermPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodAffinityTermPatch) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

type PodAffinityTermPatchPtrOutput struct{ *pulumi.OutputState }

func (PodAffinityTermPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAffinityTermPatch)(nil)).Elem()
}

func (o PodAffinityTermPatchPtrOutput) ToPodAffinityTermPatchPtrOutput() PodAffinityTermPatchPtrOutput {
	return o
}

func (o PodAffinityTermPatchPtrOutput) ToPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PodAffinityTermPatchPtrOutput {
	return o
}

func (o PodAffinityTermPatchPtrOutput) Elem() PodAffinityTermPatchOutput {
	return o.ApplyT(func(v *PodAffinityTermPatch) PodAffinityTermPatch {
		if v != nil {
			return *v
		}
		var ret PodAffinityTermPatch
		return ret
	}).(PodAffinityTermPatchOutput)
}

// A label query over a set of resources, in this case pods.
func (o PodAffinityTermPatchPtrOutput) LabelSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PodAffinityTermPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o PodAffinityTermPatchPtrOutput) NamespaceSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PodAffinityTermPatch) *metav1.LabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(metav1.LabelSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PodAffinityTermPatchPtrOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodAffinityTermPatch) []string {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PodAffinityTermPatchPtrOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodAffinityTermPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PodAffinityTermPatchArrayOutput struct{ *pulumi.OutputState }

func (PodAffinityTermPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodAffinityTermPatch)(nil)).Elem()
}

func (o PodAffinityTermPatchArrayOutput) ToPodAffinityTermPatchArrayOutput() PodAffinityTermPatchArrayOutput {
	return o
}

func (o PodAffinityTermPatchArrayOutput) ToPodAffinityTermPatchArrayOutputWithContext(ctx context.Context) PodAffinityTermPatchArrayOutput {
	return o
}

func (o PodAffinityTermPatchArrayOutput) Index(i pulumi.IntInput) PodAffinityTermPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodAffinityTermPatch {
		return vs[0].([]PodAffinityTermPatch)[vs[1].(int)]
	}).(PodAffinityTermPatchOutput)
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []WeightedPodAffinityTerm `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PodAffinityTerm `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PodAntiAffinityInput is an input type that accepts PodAntiAffinityArgs and PodAntiAffinityOutput values.
// You can construct a concrete instance of `PodAntiAffinityInput` via:
//
//	PodAntiAffinityArgs{...}
type PodAntiAffinityInput interface {
	pulumi.Input

	ToPodAntiAffinityOutput() PodAntiAffinityOutput
	ToPodAntiAffinityOutputWithContext(context.Context) PodAntiAffinityOutput
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTermArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PodAffinityTermArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PodAntiAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAntiAffinity)(nil)).Elem()
}

func (i PodAntiAffinityArgs) ToPodAntiAffinityOutput() PodAntiAffinityOutput {
	return i.ToPodAntiAffinityOutputWithContext(context.Background())
}

func (i PodAntiAffinityArgs) ToPodAntiAffinityOutputWithContext(ctx context.Context) PodAntiAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityOutput)
}

func (i PodAntiAffinityArgs) ToPodAntiAffinityPtrOutput() PodAntiAffinityPtrOutput {
	return i.ToPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i PodAntiAffinityArgs) ToPodAntiAffinityPtrOutputWithContext(ctx context.Context) PodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityOutput).ToPodAntiAffinityPtrOutputWithContext(ctx)
}

// PodAntiAffinityPtrInput is an input type that accepts PodAntiAffinityArgs, PodAntiAffinityPtr and PodAntiAffinityPtrOutput values.
// You can construct a concrete instance of `PodAntiAffinityPtrInput` via:
//
//	        PodAntiAffinityArgs{...}
//
//	or:
//
//	        nil
type PodAntiAffinityPtrInput interface {
	pulumi.Input

	ToPodAntiAffinityPtrOutput() PodAntiAffinityPtrOutput
	ToPodAntiAffinityPtrOutputWithContext(context.Context) PodAntiAffinityPtrOutput
}

type podAntiAffinityPtrType PodAntiAffinityArgs

func PodAntiAffinityPtr(v *PodAntiAffinityArgs) PodAntiAffinityPtrInput {
	return (*podAntiAffinityPtrType)(v)
}

func (*podAntiAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAntiAffinity)(nil)).Elem()
}

func (i *podAntiAffinityPtrType) ToPodAntiAffinityPtrOutput() PodAntiAffinityPtrOutput {
	return i.ToPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i *podAntiAffinityPtrType) ToPodAntiAffinityPtrOutputWithContext(ctx context.Context) PodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityPtrOutput)
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinityOutput struct{ *pulumi.OutputState }

func (PodAntiAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAntiAffinity)(nil)).Elem()
}

func (o PodAntiAffinityOutput) ToPodAntiAffinityOutput() PodAntiAffinityOutput {
	return o
}

func (o PodAntiAffinityOutput) ToPodAntiAffinityOutputWithContext(ctx context.Context) PodAntiAffinityOutput {
	return o
}

func (o PodAntiAffinityOutput) ToPodAntiAffinityPtrOutput() PodAntiAffinityPtrOutput {
	return o.ToPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (o PodAntiAffinityOutput) ToPodAntiAffinityPtrOutputWithContext(ctx context.Context) PodAntiAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodAntiAffinity) *PodAntiAffinity {
		return &v
	}).(PodAntiAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAntiAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermArrayOutput {
	return o.ApplyT(func(v PodAntiAffinity) []WeightedPodAffinityTerm {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAntiAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermArrayOutput {
	return o.ApplyT(func(v PodAntiAffinity) []PodAffinityTerm { return v.RequiredDuringSchedulingIgnoredDuringExecution }).(PodAffinityTermArrayOutput)
}

type PodAntiAffinityPtrOutput struct{ *pulumi.OutputState }

func (PodAntiAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAntiAffinity)(nil)).Elem()
}

func (o PodAntiAffinityPtrOutput) ToPodAntiAffinityPtrOutput() PodAntiAffinityPtrOutput {
	return o
}

func (o PodAntiAffinityPtrOutput) ToPodAntiAffinityPtrOutputWithContext(ctx context.Context) PodAntiAffinityPtrOutput {
	return o
}

func (o PodAntiAffinityPtrOutput) Elem() PodAntiAffinityOutput {
	return o.ApplyT(func(v *PodAntiAffinity) PodAntiAffinity {
		if v != nil {
			return *v
		}
		var ret PodAntiAffinity
		return ret
	}).(PodAntiAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAntiAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermArrayOutput {
	return o.ApplyT(func(v *PodAntiAffinity) []WeightedPodAffinityTerm {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAntiAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermArrayOutput {
	return o.ApplyT(func(v *PodAntiAffinity) []PodAffinityTerm {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermArrayOutput)
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []WeightedPodAffinityTermPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PodAffinityTermPatch `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PodAntiAffinityPatchInput is an input type that accepts PodAntiAffinityPatchArgs and PodAntiAffinityPatchOutput values.
// You can construct a concrete instance of `PodAntiAffinityPatchInput` via:
//
//	PodAntiAffinityPatchArgs{...}
type PodAntiAffinityPatchInput interface {
	pulumi.Input

	ToPodAntiAffinityPatchOutput() PodAntiAffinityPatchOutput
	ToPodAntiAffinityPatchOutputWithContext(context.Context) PodAntiAffinityPatchOutput
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTermPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PodAffinityTermPatchArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PodAntiAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAntiAffinityPatch)(nil)).Elem()
}

func (i PodAntiAffinityPatchArgs) ToPodAntiAffinityPatchOutput() PodAntiAffinityPatchOutput {
	return i.ToPodAntiAffinityPatchOutputWithContext(context.Background())
}

func (i PodAntiAffinityPatchArgs) ToPodAntiAffinityPatchOutputWithContext(ctx context.Context) PodAntiAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityPatchOutput)
}

func (i PodAntiAffinityPatchArgs) ToPodAntiAffinityPatchPtrOutput() PodAntiAffinityPatchPtrOutput {
	return i.ToPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PodAntiAffinityPatchArgs) ToPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PodAntiAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityPatchOutput).ToPodAntiAffinityPatchPtrOutputWithContext(ctx)
}

// PodAntiAffinityPatchPtrInput is an input type that accepts PodAntiAffinityPatchArgs, PodAntiAffinityPatchPtr and PodAntiAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PodAntiAffinityPatchPtrInput` via:
//
//	        PodAntiAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PodAntiAffinityPatchPtrInput interface {
	pulumi.Input

	ToPodAntiAffinityPatchPtrOutput() PodAntiAffinityPatchPtrOutput
	ToPodAntiAffinityPatchPtrOutputWithContext(context.Context) PodAntiAffinityPatchPtrOutput
}

type podAntiAffinityPatchPtrType PodAntiAffinityPatchArgs

func PodAntiAffinityPatchPtr(v *PodAntiAffinityPatchArgs) PodAntiAffinityPatchPtrInput {
	return (*podAntiAffinityPatchPtrType)(v)
}

func (*podAntiAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAntiAffinityPatch)(nil)).Elem()
}

func (i *podAntiAffinityPatchPtrType) ToPodAntiAffinityPatchPtrOutput() PodAntiAffinityPatchPtrOutput {
	return i.ToPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *podAntiAffinityPatchPtrType) ToPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PodAntiAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodAntiAffinityPatchPtrOutput)
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type PodAntiAffinityPatchOutput struct{ *pulumi.OutputState }

func (PodAntiAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodAntiAffinityPatch)(nil)).Elem()
}

func (o PodAntiAffinityPatchOutput) ToPodAntiAffinityPatchOutput() PodAntiAffinityPatchOutput {
	return o
}

func (o PodAntiAffinityPatchOutput) ToPodAntiAffinityPatchOutputWithContext(ctx context.Context) PodAntiAffinityPatchOutput {
	return o
}

func (o PodAntiAffinityPatchOutput) ToPodAntiAffinityPatchPtrOutput() PodAntiAffinityPatchPtrOutput {
	return o.ToPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PodAntiAffinityPatchOutput) ToPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PodAntiAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodAntiAffinityPatch) *PodAntiAffinityPatch {
		return &v
	}).(PodAntiAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAntiAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v PodAntiAffinityPatch) []WeightedPodAffinityTermPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermPatchArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAntiAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v PodAntiAffinityPatch) []PodAffinityTermPatch {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermPatchArrayOutput)
}

type PodAntiAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PodAntiAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodAntiAffinityPatch)(nil)).Elem()
}

func (o PodAntiAffinityPatchPtrOutput) ToPodAntiAffinityPatchPtrOutput() PodAntiAffinityPatchPtrOutput {
	return o
}

func (o PodAntiAffinityPatchPtrOutput) ToPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PodAntiAffinityPatchPtrOutput {
	return o
}

func (o PodAntiAffinityPatchPtrOutput) Elem() PodAntiAffinityPatchOutput {
	return o.ApplyT(func(v *PodAntiAffinityPatch) PodAntiAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PodAntiAffinityPatch
		return ret
	}).(PodAntiAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PodAntiAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() WeightedPodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v *PodAntiAffinityPatch) []WeightedPodAffinityTermPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(WeightedPodAffinityTermPatchArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PodAntiAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PodAffinityTermPatchArrayOutput {
	return o.ApplyT(func(v *PodAntiAffinityPatch) []PodAffinityTermPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PodAffinityTermPatchArrayOutput)
}

// PodCondition contains details for the current condition of this pod.
type PodCondition struct {
	// Last time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `pulumi:"type"`
}

// PodConditionInput is an input type that accepts PodConditionArgs and PodConditionOutput values.
// You can construct a concrete instance of `PodConditionInput` via:
//
//	PodConditionArgs{...}
type PodConditionInput interface {
	pulumi.Input

	ToPodConditionOutput() PodConditionOutput
	ToPodConditionOutputWithContext(context.Context) PodConditionOutput
}

// PodCondition contains details for the current condition of this pod.
type PodConditionArgs struct {
	// Last time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status pulumi.StringInput `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type pulumi.StringInput `pulumi:"type"`
}

func (PodConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodCondition)(nil)).Elem()
}

func (i PodConditionArgs) ToPodConditionOutput() PodConditionOutput {
	return i.ToPodConditionOutputWithContext(context.Background())
}

func (i PodConditionArgs) ToPodConditionOutputWithContext(ctx context.Context) PodConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodConditionOutput)
}

// PodConditionArrayInput is an input type that accepts PodConditionArray and PodConditionArrayOutput values.
// You can construct a concrete instance of `PodConditionArrayInput` via:
//
//	PodConditionArray{ PodConditionArgs{...} }
type PodConditionArrayInput interface {
	pulumi.Input

	ToPodConditionArrayOutput() PodConditionArrayOutput
	ToPodConditionArrayOutputWithContext(context.Context) PodConditionArrayOutput
}

type PodConditionArray []PodConditionInput

func (PodConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodCondition)(nil)).Elem()
}

func (i PodConditionArray) ToPodConditionArrayOutput() PodConditionArrayOutput {
	return i.ToPodConditionArrayOutputWithContext(context.Background())
}

func (i PodConditionArray) ToPodConditionArrayOutputWithContext(ctx context.Context) PodConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodConditionArrayOutput)
}

// PodCondition contains details for the current condition of this pod.
type PodConditionOutput struct{ *pulumi.OutputState }

func (PodConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodCondition)(nil)).Elem()
}

func (o PodConditionOutput) ToPodConditionOutput() PodConditionOutput {
	return o
}

func (o PodConditionOutput) ToPodConditionOutputWithContext(ctx context.Context) PodConditionOutput {
	return o
}

// Last time we probed the condition.
func (o PodConditionOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodCondition) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transitioned from one status to another.
func (o PodConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about last transition.
func (o PodConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Unique, one-word, CamelCase reason for the condition's last transition.
func (o PodConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PodCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PodCondition) string { return v.Type }).(pulumi.StringOutput)
}

type PodConditionArrayOutput struct{ *pulumi.OutputState }

func (PodConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodCondition)(nil)).Elem()
}

func (o PodConditionArrayOutput) ToPodConditionArrayOutput() PodConditionArrayOutput {
	return o
}

func (o PodConditionArrayOutput) ToPodConditionArrayOutputWithContext(ctx context.Context) PodConditionArrayOutput {
	return o
}

func (o PodConditionArrayOutput) Index(i pulumi.IntInput) PodConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodCondition {
		return vs[0].([]PodCondition)[vs[1].(int)]
	}).(PodConditionOutput)
}

// PodCondition contains details for the current condition of this pod.
type PodConditionPatch struct {
	// Last time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status *string `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type *string `pulumi:"type"`
}

// PodConditionPatchInput is an input type that accepts PodConditionPatchArgs and PodConditionPatchOutput values.
// You can construct a concrete instance of `PodConditionPatchInput` via:
//
//	PodConditionPatchArgs{...}
type PodConditionPatchInput interface {
	pulumi.Input

	ToPodConditionPatchOutput() PodConditionPatchOutput
	ToPodConditionPatchOutputWithContext(context.Context) PodConditionPatchOutput
}

// PodCondition contains details for the current condition of this pod.
type PodConditionPatchArgs struct {
	// Last time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PodConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodConditionPatch)(nil)).Elem()
}

func (i PodConditionPatchArgs) ToPodConditionPatchOutput() PodConditionPatchOutput {
	return i.ToPodConditionPatchOutputWithContext(context.Background())
}

func (i PodConditionPatchArgs) ToPodConditionPatchOutputWithContext(ctx context.Context) PodConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodConditionPatchOutput)
}

// PodConditionPatchArrayInput is an input type that accepts PodConditionPatchArray and PodConditionPatchArrayOutput values.
// You can construct a concrete instance of `PodConditionPatchArrayInput` via:
//
//	PodConditionPatchArray{ PodConditionPatchArgs{...} }
type PodConditionPatchArrayInput interface {
	pulumi.Input

	ToPodConditionPatchArrayOutput() PodConditionPatchArrayOutput
	ToPodConditionPatchArrayOutputWithContext(context.Context) PodConditionPatchArrayOutput
}

type PodConditionPatchArray []PodConditionPatchInput

func (PodConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodConditionPatch)(nil)).Elem()
}

func (i PodConditionPatchArray) ToPodConditionPatchArrayOutput() PodConditionPatchArrayOutput {
	return i.ToPodConditionPatchArrayOutputWithContext(context.Background())
}

func (i PodConditionPatchArray) ToPodConditionPatchArrayOutputWithContext(ctx context.Context) PodConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodConditionPatchArrayOutput)
}

// PodCondition contains details for the current condition of this pod.
type PodConditionPatchOutput struct{ *pulumi.OutputState }

func (PodConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodConditionPatch)(nil)).Elem()
}

func (o PodConditionPatchOutput) ToPodConditionPatchOutput() PodConditionPatchOutput {
	return o
}

func (o PodConditionPatchOutput) ToPodConditionPatchOutputWithContext(ctx context.Context) PodConditionPatchOutput {
	return o
}

// Last time we probed the condition.
func (o PodConditionPatchOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transitioned from one status to another.
func (o PodConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about last transition.
func (o PodConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Unique, one-word, CamelCase reason for the condition's last transition.
func (o PodConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PodConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (PodConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodConditionPatch)(nil)).Elem()
}

func (o PodConditionPatchArrayOutput) ToPodConditionPatchArrayOutput() PodConditionPatchArrayOutput {
	return o
}

func (o PodConditionPatchArrayOutput) ToPodConditionPatchArrayOutputWithContext(ctx context.Context) PodConditionPatchArrayOutput {
	return o
}

func (o PodConditionPatchArrayOutput) Index(i pulumi.IntInput) PodConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodConditionPatch {
		return vs[0].([]PodConditionPatch)[vs[1].(int)]
	}).(PodConditionPatchOutput)
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfig struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers []string `pulumi:"nameservers"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options []PodDNSConfigOption `pulumi:"options"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches []string `pulumi:"searches"`
}

// PodDNSConfigInput is an input type that accepts PodDNSConfigArgs and PodDNSConfigOutput values.
// You can construct a concrete instance of `PodDNSConfigInput` via:
//
//	PodDNSConfigArgs{...}
type PodDNSConfigInput interface {
	pulumi.Input

	ToPodDNSConfigOutput() PodDNSConfigOutput
	ToPodDNSConfigOutputWithContext(context.Context) PodDNSConfigOutput
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfigArgs struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers pulumi.StringArrayInput `pulumi:"nameservers"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options PodDNSConfigOptionArrayInput `pulumi:"options"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches pulumi.StringArrayInput `pulumi:"searches"`
}

func (PodDNSConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfig)(nil)).Elem()
}

func (i PodDNSConfigArgs) ToPodDNSConfigOutput() PodDNSConfigOutput {
	return i.ToPodDNSConfigOutputWithContext(context.Background())
}

func (i PodDNSConfigArgs) ToPodDNSConfigOutputWithContext(ctx context.Context) PodDNSConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOutput)
}

func (i PodDNSConfigArgs) ToPodDNSConfigPtrOutput() PodDNSConfigPtrOutput {
	return i.ToPodDNSConfigPtrOutputWithContext(context.Background())
}

func (i PodDNSConfigArgs) ToPodDNSConfigPtrOutputWithContext(ctx context.Context) PodDNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOutput).ToPodDNSConfigPtrOutputWithContext(ctx)
}

// PodDNSConfigPtrInput is an input type that accepts PodDNSConfigArgs, PodDNSConfigPtr and PodDNSConfigPtrOutput values.
// You can construct a concrete instance of `PodDNSConfigPtrInput` via:
//
//	        PodDNSConfigArgs{...}
//
//	or:
//
//	        nil
type PodDNSConfigPtrInput interface {
	pulumi.Input

	ToPodDNSConfigPtrOutput() PodDNSConfigPtrOutput
	ToPodDNSConfigPtrOutputWithContext(context.Context) PodDNSConfigPtrOutput
}

type podDNSConfigPtrType PodDNSConfigArgs

func PodDNSConfigPtr(v *PodDNSConfigArgs) PodDNSConfigPtrInput {
	return (*podDNSConfigPtrType)(v)
}

func (*podDNSConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDNSConfig)(nil)).Elem()
}

func (i *podDNSConfigPtrType) ToPodDNSConfigPtrOutput() PodDNSConfigPtrOutput {
	return i.ToPodDNSConfigPtrOutputWithContext(context.Background())
}

func (i *podDNSConfigPtrType) ToPodDNSConfigPtrOutputWithContext(ctx context.Context) PodDNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigPtrOutput)
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfigOutput struct{ *pulumi.OutputState }

func (PodDNSConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfig)(nil)).Elem()
}

func (o PodDNSConfigOutput) ToPodDNSConfigOutput() PodDNSConfigOutput {
	return o
}

func (o PodDNSConfigOutput) ToPodDNSConfigOutputWithContext(ctx context.Context) PodDNSConfigOutput {
	return o
}

func (o PodDNSConfigOutput) ToPodDNSConfigPtrOutput() PodDNSConfigPtrOutput {
	return o.ToPodDNSConfigPtrOutputWithContext(context.Background())
}

func (o PodDNSConfigOutput) ToPodDNSConfigPtrOutputWithContext(ctx context.Context) PodDNSConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodDNSConfig) *PodDNSConfig {
		return &v
	}).(PodDNSConfigPtrOutput)
}

// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
func (o PodDNSConfigOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodDNSConfig) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
func (o PodDNSConfigOutput) Options() PodDNSConfigOptionArrayOutput {
	return o.ApplyT(func(v PodDNSConfig) []PodDNSConfigOption { return v.Options }).(PodDNSConfigOptionArrayOutput)
}

// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
func (o PodDNSConfigOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodDNSConfig) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

type PodDNSConfigPtrOutput struct{ *pulumi.OutputState }

func (PodDNSConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDNSConfig)(nil)).Elem()
}

func (o PodDNSConfigPtrOutput) ToPodDNSConfigPtrOutput() PodDNSConfigPtrOutput {
	return o
}

func (o PodDNSConfigPtrOutput) ToPodDNSConfigPtrOutputWithContext(ctx context.Context) PodDNSConfigPtrOutput {
	return o
}

func (o PodDNSConfigPtrOutput) Elem() PodDNSConfigOutput {
	return o.ApplyT(func(v *PodDNSConfig) PodDNSConfig {
		if v != nil {
			return *v
		}
		var ret PodDNSConfig
		return ret
	}).(PodDNSConfigOutput)
}

// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
func (o PodDNSConfigPtrOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodDNSConfig) []string {
		if v == nil {
			return nil
		}
		return v.Nameservers
	}).(pulumi.StringArrayOutput)
}

// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
func (o PodDNSConfigPtrOutput) Options() PodDNSConfigOptionArrayOutput {
	return o.ApplyT(func(v *PodDNSConfig) []PodDNSConfigOption {
		if v == nil {
			return nil
		}
		return v.Options
	}).(PodDNSConfigOptionArrayOutput)
}

// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
func (o PodDNSConfigPtrOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodDNSConfig) []string {
		if v == nil {
			return nil
		}
		return v.Searches
	}).(pulumi.StringArrayOutput)
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOption struct {
	// Required.
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// PodDNSConfigOptionInput is an input type that accepts PodDNSConfigOptionArgs and PodDNSConfigOptionOutput values.
// You can construct a concrete instance of `PodDNSConfigOptionInput` via:
//
//	PodDNSConfigOptionArgs{...}
type PodDNSConfigOptionInput interface {
	pulumi.Input

	ToPodDNSConfigOptionOutput() PodDNSConfigOptionOutput
	ToPodDNSConfigOptionOutputWithContext(context.Context) PodDNSConfigOptionOutput
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOptionArgs struct {
	// Required.
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PodDNSConfigOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigOption)(nil)).Elem()
}

func (i PodDNSConfigOptionArgs) ToPodDNSConfigOptionOutput() PodDNSConfigOptionOutput {
	return i.ToPodDNSConfigOptionOutputWithContext(context.Background())
}

func (i PodDNSConfigOptionArgs) ToPodDNSConfigOptionOutputWithContext(ctx context.Context) PodDNSConfigOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOptionOutput)
}

// PodDNSConfigOptionArrayInput is an input type that accepts PodDNSConfigOptionArray and PodDNSConfigOptionArrayOutput values.
// You can construct a concrete instance of `PodDNSConfigOptionArrayInput` via:
//
//	PodDNSConfigOptionArray{ PodDNSConfigOptionArgs{...} }
type PodDNSConfigOptionArrayInput interface {
	pulumi.Input

	ToPodDNSConfigOptionArrayOutput() PodDNSConfigOptionArrayOutput
	ToPodDNSConfigOptionArrayOutputWithContext(context.Context) PodDNSConfigOptionArrayOutput
}

type PodDNSConfigOptionArray []PodDNSConfigOptionInput

func (PodDNSConfigOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDNSConfigOption)(nil)).Elem()
}

func (i PodDNSConfigOptionArray) ToPodDNSConfigOptionArrayOutput() PodDNSConfigOptionArrayOutput {
	return i.ToPodDNSConfigOptionArrayOutputWithContext(context.Background())
}

func (i PodDNSConfigOptionArray) ToPodDNSConfigOptionArrayOutputWithContext(ctx context.Context) PodDNSConfigOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOptionArrayOutput)
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOptionOutput struct{ *pulumi.OutputState }

func (PodDNSConfigOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigOption)(nil)).Elem()
}

func (o PodDNSConfigOptionOutput) ToPodDNSConfigOptionOutput() PodDNSConfigOptionOutput {
	return o
}

func (o PodDNSConfigOptionOutput) ToPodDNSConfigOptionOutputWithContext(ctx context.Context) PodDNSConfigOptionOutput {
	return o
}

// Required.
func (o PodDNSConfigOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDNSConfigOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PodDNSConfigOptionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDNSConfigOption) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PodDNSConfigOptionArrayOutput struct{ *pulumi.OutputState }

func (PodDNSConfigOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDNSConfigOption)(nil)).Elem()
}

func (o PodDNSConfigOptionArrayOutput) ToPodDNSConfigOptionArrayOutput() PodDNSConfigOptionArrayOutput {
	return o
}

func (o PodDNSConfigOptionArrayOutput) ToPodDNSConfigOptionArrayOutputWithContext(ctx context.Context) PodDNSConfigOptionArrayOutput {
	return o
}

func (o PodDNSConfigOptionArrayOutput) Index(i pulumi.IntInput) PodDNSConfigOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodDNSConfigOption {
		return vs[0].([]PodDNSConfigOption)[vs[1].(int)]
	}).(PodDNSConfigOptionOutput)
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOptionPatch struct {
	// Required.
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// PodDNSConfigOptionPatchInput is an input type that accepts PodDNSConfigOptionPatchArgs and PodDNSConfigOptionPatchOutput values.
// You can construct a concrete instance of `PodDNSConfigOptionPatchInput` via:
//
//	PodDNSConfigOptionPatchArgs{...}
type PodDNSConfigOptionPatchInput interface {
	pulumi.Input

	ToPodDNSConfigOptionPatchOutput() PodDNSConfigOptionPatchOutput
	ToPodDNSConfigOptionPatchOutputWithContext(context.Context) PodDNSConfigOptionPatchOutput
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOptionPatchArgs struct {
	// Required.
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PodDNSConfigOptionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigOptionPatch)(nil)).Elem()
}

func (i PodDNSConfigOptionPatchArgs) ToPodDNSConfigOptionPatchOutput() PodDNSConfigOptionPatchOutput {
	return i.ToPodDNSConfigOptionPatchOutputWithContext(context.Background())
}

func (i PodDNSConfigOptionPatchArgs) ToPodDNSConfigOptionPatchOutputWithContext(ctx context.Context) PodDNSConfigOptionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOptionPatchOutput)
}

// PodDNSConfigOptionPatchArrayInput is an input type that accepts PodDNSConfigOptionPatchArray and PodDNSConfigOptionPatchArrayOutput values.
// You can construct a concrete instance of `PodDNSConfigOptionPatchArrayInput` via:
//
//	PodDNSConfigOptionPatchArray{ PodDNSConfigOptionPatchArgs{...} }
type PodDNSConfigOptionPatchArrayInput interface {
	pulumi.Input

	ToPodDNSConfigOptionPatchArrayOutput() PodDNSConfigOptionPatchArrayOutput
	ToPodDNSConfigOptionPatchArrayOutputWithContext(context.Context) PodDNSConfigOptionPatchArrayOutput
}

type PodDNSConfigOptionPatchArray []PodDNSConfigOptionPatchInput

func (PodDNSConfigOptionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDNSConfigOptionPatch)(nil)).Elem()
}

func (i PodDNSConfigOptionPatchArray) ToPodDNSConfigOptionPatchArrayOutput() PodDNSConfigOptionPatchArrayOutput {
	return i.ToPodDNSConfigOptionPatchArrayOutputWithContext(context.Background())
}

func (i PodDNSConfigOptionPatchArray) ToPodDNSConfigOptionPatchArrayOutputWithContext(ctx context.Context) PodDNSConfigOptionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigOptionPatchArrayOutput)
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOptionPatchOutput struct{ *pulumi.OutputState }

func (PodDNSConfigOptionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigOptionPatch)(nil)).Elem()
}

func (o PodDNSConfigOptionPatchOutput) ToPodDNSConfigOptionPatchOutput() PodDNSConfigOptionPatchOutput {
	return o
}

func (o PodDNSConfigOptionPatchOutput) ToPodDNSConfigOptionPatchOutputWithContext(ctx context.Context) PodDNSConfigOptionPatchOutput {
	return o
}

// Required.
func (o PodDNSConfigOptionPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDNSConfigOptionPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PodDNSConfigOptionPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodDNSConfigOptionPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PodDNSConfigOptionPatchArrayOutput struct{ *pulumi.OutputState }

func (PodDNSConfigOptionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodDNSConfigOptionPatch)(nil)).Elem()
}

func (o PodDNSConfigOptionPatchArrayOutput) ToPodDNSConfigOptionPatchArrayOutput() PodDNSConfigOptionPatchArrayOutput {
	return o
}

func (o PodDNSConfigOptionPatchArrayOutput) ToPodDNSConfigOptionPatchArrayOutputWithContext(ctx context.Context) PodDNSConfigOptionPatchArrayOutput {
	return o
}

func (o PodDNSConfigOptionPatchArrayOutput) Index(i pulumi.IntInput) PodDNSConfigOptionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodDNSConfigOptionPatch {
		return vs[0].([]PodDNSConfigOptionPatch)[vs[1].(int)]
	}).(PodDNSConfigOptionPatchOutput)
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfigPatch struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers []string `pulumi:"nameservers"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options []PodDNSConfigOptionPatch `pulumi:"options"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches []string `pulumi:"searches"`
}

// PodDNSConfigPatchInput is an input type that accepts PodDNSConfigPatchArgs and PodDNSConfigPatchOutput values.
// You can construct a concrete instance of `PodDNSConfigPatchInput` via:
//
//	PodDNSConfigPatchArgs{...}
type PodDNSConfigPatchInput interface {
	pulumi.Input

	ToPodDNSConfigPatchOutput() PodDNSConfigPatchOutput
	ToPodDNSConfigPatchOutputWithContext(context.Context) PodDNSConfigPatchOutput
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfigPatchArgs struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers pulumi.StringArrayInput `pulumi:"nameservers"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options PodDNSConfigOptionPatchArrayInput `pulumi:"options"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches pulumi.StringArrayInput `pulumi:"searches"`
}

func (PodDNSConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigPatch)(nil)).Elem()
}

func (i PodDNSConfigPatchArgs) ToPodDNSConfigPatchOutput() PodDNSConfigPatchOutput {
	return i.ToPodDNSConfigPatchOutputWithContext(context.Background())
}

func (i PodDNSConfigPatchArgs) ToPodDNSConfigPatchOutputWithContext(ctx context.Context) PodDNSConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigPatchOutput)
}

func (i PodDNSConfigPatchArgs) ToPodDNSConfigPatchPtrOutput() PodDNSConfigPatchPtrOutput {
	return i.ToPodDNSConfigPatchPtrOutputWithContext(context.Background())
}

func (i PodDNSConfigPatchArgs) ToPodDNSConfigPatchPtrOutputWithContext(ctx context.Context) PodDNSConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigPatchOutput).ToPodDNSConfigPatchPtrOutputWithContext(ctx)
}

// PodDNSConfigPatchPtrInput is an input type that accepts PodDNSConfigPatchArgs, PodDNSConfigPatchPtr and PodDNSConfigPatchPtrOutput values.
// You can construct a concrete instance of `PodDNSConfigPatchPtrInput` via:
//
//	        PodDNSConfigPatchArgs{...}
//
//	or:
//
//	        nil
type PodDNSConfigPatchPtrInput interface {
	pulumi.Input

	ToPodDNSConfigPatchPtrOutput() PodDNSConfigPatchPtrOutput
	ToPodDNSConfigPatchPtrOutputWithContext(context.Context) PodDNSConfigPatchPtrOutput
}

type podDNSConfigPatchPtrType PodDNSConfigPatchArgs

func PodDNSConfigPatchPtr(v *PodDNSConfigPatchArgs) PodDNSConfigPatchPtrInput {
	return (*podDNSConfigPatchPtrType)(v)
}

func (*podDNSConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDNSConfigPatch)(nil)).Elem()
}

func (i *podDNSConfigPatchPtrType) ToPodDNSConfigPatchPtrOutput() PodDNSConfigPatchPtrOutput {
	return i.ToPodDNSConfigPatchPtrOutputWithContext(context.Background())
}

func (i *podDNSConfigPatchPtrType) ToPodDNSConfigPatchPtrOutputWithContext(ctx context.Context) PodDNSConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodDNSConfigPatchPtrOutput)
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfigPatchOutput struct{ *pulumi.OutputState }

func (PodDNSConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodDNSConfigPatch)(nil)).Elem()
}

func (o PodDNSConfigPatchOutput) ToPodDNSConfigPatchOutput() PodDNSConfigPatchOutput {
	return o
}

func (o PodDNSConfigPatchOutput) ToPodDNSConfigPatchOutputWithContext(ctx context.Context) PodDNSConfigPatchOutput {
	return o
}

func (o PodDNSConfigPatchOutput) ToPodDNSConfigPatchPtrOutput() PodDNSConfigPatchPtrOutput {
	return o.ToPodDNSConfigPatchPtrOutputWithContext(context.Background())
}

func (o PodDNSConfigPatchOutput) ToPodDNSConfigPatchPtrOutputWithContext(ctx context.Context) PodDNSConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodDNSConfigPatch) *PodDNSConfigPatch {
		return &v
	}).(PodDNSConfigPatchPtrOutput)
}

// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
func (o PodDNSConfigPatchOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodDNSConfigPatch) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
func (o PodDNSConfigPatchOutput) Options() PodDNSConfigOptionPatchArrayOutput {
	return o.ApplyT(func(v PodDNSConfigPatch) []PodDNSConfigOptionPatch { return v.Options }).(PodDNSConfigOptionPatchArrayOutput)
}

// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
func (o PodDNSConfigPatchOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodDNSConfigPatch) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

type PodDNSConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (PodDNSConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodDNSConfigPatch)(nil)).Elem()
}

func (o PodDNSConfigPatchPtrOutput) ToPodDNSConfigPatchPtrOutput() PodDNSConfigPatchPtrOutput {
	return o
}

func (o PodDNSConfigPatchPtrOutput) ToPodDNSConfigPatchPtrOutputWithContext(ctx context.Context) PodDNSConfigPatchPtrOutput {
	return o
}

func (o PodDNSConfigPatchPtrOutput) Elem() PodDNSConfigPatchOutput {
	return o.ApplyT(func(v *PodDNSConfigPatch) PodDNSConfigPatch {
		if v != nil {
			return *v
		}
		var ret PodDNSConfigPatch
		return ret
	}).(PodDNSConfigPatchOutput)
}

// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
func (o PodDNSConfigPatchPtrOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodDNSConfigPatch) []string {
		if v == nil {
			return nil
		}
		return v.Nameservers
	}).(pulumi.StringArrayOutput)
}

// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
func (o PodDNSConfigPatchPtrOutput) Options() PodDNSConfigOptionPatchArrayOutput {
	return o.ApplyT(func(v *PodDNSConfigPatch) []PodDNSConfigOptionPatch {
		if v == nil {
			return nil
		}
		return v.Options
	}).(PodDNSConfigOptionPatchArrayOutput)
}

// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
func (o PodDNSConfigPatchPtrOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodDNSConfigPatch) []string {
		if v == nil {
			return nil
		}
		return v.Searches
	}).(pulumi.StringArrayOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIP struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip *string `pulumi:"ip"`
}

// PodIPInput is an input type that accepts PodIPArgs and PodIPOutput values.
// You can construct a concrete instance of `PodIPInput` via:
//
//	PodIPArgs{...}
type PodIPInput interface {
	pulumi.Input

	ToPodIPOutput() PodIPOutput
	ToPodIPOutputWithContext(context.Context) PodIPOutput
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIPArgs struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (PodIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodIP)(nil)).Elem()
}

func (i PodIPArgs) ToPodIPOutput() PodIPOutput {
	return i.ToPodIPOutputWithContext(context.Background())
}

func (i PodIPArgs) ToPodIPOutputWithContext(ctx context.Context) PodIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodIPOutput)
}

// PodIPArrayInput is an input type that accepts PodIPArray and PodIPArrayOutput values.
// You can construct a concrete instance of `PodIPArrayInput` via:
//
//	PodIPArray{ PodIPArgs{...} }
type PodIPArrayInput interface {
	pulumi.Input

	ToPodIPArrayOutput() PodIPArrayOutput
	ToPodIPArrayOutputWithContext(context.Context) PodIPArrayOutput
}

type PodIPArray []PodIPInput

func (PodIPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodIP)(nil)).Elem()
}

func (i PodIPArray) ToPodIPArrayOutput() PodIPArrayOutput {
	return i.ToPodIPArrayOutputWithContext(context.Background())
}

func (i PodIPArray) ToPodIPArrayOutputWithContext(ctx context.Context) PodIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodIPArrayOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIPOutput struct{ *pulumi.OutputState }

func (PodIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodIP)(nil)).Elem()
}

func (o PodIPOutput) ToPodIPOutput() PodIPOutput {
	return o
}

func (o PodIPOutput) ToPodIPOutputWithContext(ctx context.Context) PodIPOutput {
	return o
}

// ip is an IP address (IPv4 or IPv6) assigned to the pod
func (o PodIPOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodIP) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type PodIPArrayOutput struct{ *pulumi.OutputState }

func (PodIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodIP)(nil)).Elem()
}

func (o PodIPArrayOutput) ToPodIPArrayOutput() PodIPArrayOutput {
	return o
}

func (o PodIPArrayOutput) ToPodIPArrayOutputWithContext(ctx context.Context) PodIPArrayOutput {
	return o
}

func (o PodIPArrayOutput) Index(i pulumi.IntInput) PodIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodIP {
		return vs[0].([]PodIP)[vs[1].(int)]
	}).(PodIPOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIPPatch struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip *string `pulumi:"ip"`
}

// PodIPPatchInput is an input type that accepts PodIPPatchArgs and PodIPPatchOutput values.
// You can construct a concrete instance of `PodIPPatchInput` via:
//
//	PodIPPatchArgs{...}
type PodIPPatchInput interface {
	pulumi.Input

	ToPodIPPatchOutput() PodIPPatchOutput
	ToPodIPPatchOutputWithContext(context.Context) PodIPPatchOutput
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIPPatchArgs struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (PodIPPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodIPPatch)(nil)).Elem()
}

func (i PodIPPatchArgs) ToPodIPPatchOutput() PodIPPatchOutput {
	return i.ToPodIPPatchOutputWithContext(context.Background())
}

func (i PodIPPatchArgs) ToPodIPPatchOutputWithContext(ctx context.Context) PodIPPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodIPPatchOutput)
}

// PodIPPatchArrayInput is an input type that accepts PodIPPatchArray and PodIPPatchArrayOutput values.
// You can construct a concrete instance of `PodIPPatchArrayInput` via:
//
//	PodIPPatchArray{ PodIPPatchArgs{...} }
type PodIPPatchArrayInput interface {
	pulumi.Input

	ToPodIPPatchArrayOutput() PodIPPatchArrayOutput
	ToPodIPPatchArrayOutputWithContext(context.Context) PodIPPatchArrayOutput
}

type PodIPPatchArray []PodIPPatchInput

func (PodIPPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodIPPatch)(nil)).Elem()
}

func (i PodIPPatchArray) ToPodIPPatchArrayOutput() PodIPPatchArrayOutput {
	return i.ToPodIPPatchArrayOutputWithContext(context.Background())
}

func (i PodIPPatchArray) ToPodIPPatchArrayOutputWithContext(ctx context.Context) PodIPPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodIPPatchArrayOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIPPatchOutput struct{ *pulumi.OutputState }

func (PodIPPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodIPPatch)(nil)).Elem()
}

func (o PodIPPatchOutput) ToPodIPPatchOutput() PodIPPatchOutput {
	return o
}

func (o PodIPPatchOutput) ToPodIPPatchOutputWithContext(ctx context.Context) PodIPPatchOutput {
	return o
}

// ip is an IP address (IPv4 or IPv6) assigned to the pod
func (o PodIPPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodIPPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type PodIPPatchArrayOutput struct{ *pulumi.OutputState }

func (PodIPPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodIPPatch)(nil)).Elem()
}

func (o PodIPPatchArrayOutput) ToPodIPPatchArrayOutput() PodIPPatchArrayOutput {
	return o
}

func (o PodIPPatchArrayOutput) ToPodIPPatchArrayOutputWithContext(ctx context.Context) PodIPPatchArrayOutput {
	return o
}

func (o PodIPPatchArrayOutput) Index(i pulumi.IntInput) PodIPPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodIPPatch {
		return vs[0].([]PodIPPatch)[vs[1].(int)]
	}).(PodIPPatchOutput)
}

// PodList is a list of Pods.
type PodListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PodType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodListTypeInput is an input type that accepts PodListTypeArgs and PodListTypeOutput values.
// You can construct a concrete instance of `PodListTypeInput` via:
//
//	PodListTypeArgs{...}
type PodListTypeInput interface {
	pulumi.Input

	ToPodListTypeOutput() PodListTypeOutput
	ToPodListTypeOutputWithContext(context.Context) PodListTypeOutput
}

// PodList is a list of Pods.
type PodListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PodTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodListType)(nil)).Elem()
}

func (i PodListTypeArgs) ToPodListTypeOutput() PodListTypeOutput {
	return i.ToPodListTypeOutputWithContext(context.Background())
}

func (i PodListTypeArgs) ToPodListTypeOutputWithContext(ctx context.Context) PodListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodListTypeOutput)
}

// PodList is a list of Pods.
type PodListTypeOutput struct{ *pulumi.OutputState }

func (PodListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodListType)(nil)).Elem()
}

func (o PodListTypeOutput) ToPodListTypeOutput() PodListTypeOutput {
	return o
}

func (o PodListTypeOutput) ToPodListTypeOutputWithContext(ctx context.Context) PodListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PodListTypeOutput) Items() PodTypeArrayOutput {
	return o.ApplyT(func(v PodListType) []PodType { return v.Items }).(PodTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodOS defines the OS parameters of a pod.
type PodOS struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name string `pulumi:"name"`
}

// PodOSInput is an input type that accepts PodOSArgs and PodOSOutput values.
// You can construct a concrete instance of `PodOSInput` via:
//
//	PodOSArgs{...}
type PodOSInput interface {
	pulumi.Input

	ToPodOSOutput() PodOSOutput
	ToPodOSOutputWithContext(context.Context) PodOSOutput
}

// PodOS defines the OS parameters of a pod.
type PodOSArgs struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name pulumi.StringInput `pulumi:"name"`
}

func (PodOSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodOS)(nil)).Elem()
}

func (i PodOSArgs) ToPodOSOutput() PodOSOutput {
	return i.ToPodOSOutputWithContext(context.Background())
}

func (i PodOSArgs) ToPodOSOutputWithContext(ctx context.Context) PodOSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSOutput)
}

func (i PodOSArgs) ToPodOSPtrOutput() PodOSPtrOutput {
	return i.ToPodOSPtrOutputWithContext(context.Background())
}

func (i PodOSArgs) ToPodOSPtrOutputWithContext(ctx context.Context) PodOSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSOutput).ToPodOSPtrOutputWithContext(ctx)
}

// PodOSPtrInput is an input type that accepts PodOSArgs, PodOSPtr and PodOSPtrOutput values.
// You can construct a concrete instance of `PodOSPtrInput` via:
//
//	        PodOSArgs{...}
//
//	or:
//
//	        nil
type PodOSPtrInput interface {
	pulumi.Input

	ToPodOSPtrOutput() PodOSPtrOutput
	ToPodOSPtrOutputWithContext(context.Context) PodOSPtrOutput
}

type podOSPtrType PodOSArgs

func PodOSPtr(v *PodOSArgs) PodOSPtrInput {
	return (*podOSPtrType)(v)
}

func (*podOSPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodOS)(nil)).Elem()
}

func (i *podOSPtrType) ToPodOSPtrOutput() PodOSPtrOutput {
	return i.ToPodOSPtrOutputWithContext(context.Background())
}

func (i *podOSPtrType) ToPodOSPtrOutputWithContext(ctx context.Context) PodOSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSPtrOutput)
}

// PodOS defines the OS parameters of a pod.
type PodOSOutput struct{ *pulumi.OutputState }

func (PodOSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodOS)(nil)).Elem()
}

func (o PodOSOutput) ToPodOSOutput() PodOSOutput {
	return o
}

func (o PodOSOutput) ToPodOSOutputWithContext(ctx context.Context) PodOSOutput {
	return o
}

func (o PodOSOutput) ToPodOSPtrOutput() PodOSPtrOutput {
	return o.ToPodOSPtrOutputWithContext(context.Background())
}

func (o PodOSOutput) ToPodOSPtrOutputWithContext(ctx context.Context) PodOSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodOS) *PodOS {
		return &v
	}).(PodOSPtrOutput)
}

// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
func (o PodOSOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PodOS) string { return v.Name }).(pulumi.StringOutput)
}

type PodOSPtrOutput struct{ *pulumi.OutputState }

func (PodOSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodOS)(nil)).Elem()
}

func (o PodOSPtrOutput) ToPodOSPtrOutput() PodOSPtrOutput {
	return o
}

func (o PodOSPtrOutput) ToPodOSPtrOutputWithContext(ctx context.Context) PodOSPtrOutput {
	return o
}

func (o PodOSPtrOutput) Elem() PodOSOutput {
	return o.ApplyT(func(v *PodOS) PodOS {
		if v != nil {
			return *v
		}
		var ret PodOS
		return ret
	}).(PodOSOutput)
}

// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
func (o PodOSPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodOS) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// PodOS defines the OS parameters of a pod.
type PodOSPatch struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name *string `pulumi:"name"`
}

// PodOSPatchInput is an input type that accepts PodOSPatchArgs and PodOSPatchOutput values.
// You can construct a concrete instance of `PodOSPatchInput` via:
//
//	PodOSPatchArgs{...}
type PodOSPatchInput interface {
	pulumi.Input

	ToPodOSPatchOutput() PodOSPatchOutput
	ToPodOSPatchOutputWithContext(context.Context) PodOSPatchOutput
}

// PodOS defines the OS parameters of a pod.
type PodOSPatchArgs struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PodOSPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodOSPatch)(nil)).Elem()
}

func (i PodOSPatchArgs) ToPodOSPatchOutput() PodOSPatchOutput {
	return i.ToPodOSPatchOutputWithContext(context.Background())
}

func (i PodOSPatchArgs) ToPodOSPatchOutputWithContext(ctx context.Context) PodOSPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSPatchOutput)
}

func (i PodOSPatchArgs) ToPodOSPatchPtrOutput() PodOSPatchPtrOutput {
	return i.ToPodOSPatchPtrOutputWithContext(context.Background())
}

func (i PodOSPatchArgs) ToPodOSPatchPtrOutputWithContext(ctx context.Context) PodOSPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSPatchOutput).ToPodOSPatchPtrOutputWithContext(ctx)
}

// PodOSPatchPtrInput is an input type that accepts PodOSPatchArgs, PodOSPatchPtr and PodOSPatchPtrOutput values.
// You can construct a concrete instance of `PodOSPatchPtrInput` via:
//
//	        PodOSPatchArgs{...}
//
//	or:
//
//	        nil
type PodOSPatchPtrInput interface {
	pulumi.Input

	ToPodOSPatchPtrOutput() PodOSPatchPtrOutput
	ToPodOSPatchPtrOutputWithContext(context.Context) PodOSPatchPtrOutput
}

type podOSPatchPtrType PodOSPatchArgs

func PodOSPatchPtr(v *PodOSPatchArgs) PodOSPatchPtrInput {
	return (*podOSPatchPtrType)(v)
}

func (*podOSPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodOSPatch)(nil)).Elem()
}

func (i *podOSPatchPtrType) ToPodOSPatchPtrOutput() PodOSPatchPtrOutput {
	return i.ToPodOSPatchPtrOutputWithContext(context.Background())
}

func (i *podOSPatchPtrType) ToPodOSPatchPtrOutputWithContext(ctx context.Context) PodOSPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodOSPatchPtrOutput)
}

// PodOS defines the OS parameters of a pod.
type PodOSPatchOutput struct{ *pulumi.OutputState }

func (PodOSPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodOSPatch)(nil)).Elem()
}

func (o PodOSPatchOutput) ToPodOSPatchOutput() PodOSPatchOutput {
	return o
}

func (o PodOSPatchOutput) ToPodOSPatchOutputWithContext(ctx context.Context) PodOSPatchOutput {
	return o
}

func (o PodOSPatchOutput) ToPodOSPatchPtrOutput() PodOSPatchPtrOutput {
	return o.ToPodOSPatchPtrOutputWithContext(context.Background())
}

func (o PodOSPatchOutput) ToPodOSPatchPtrOutputWithContext(ctx context.Context) PodOSPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodOSPatch) *PodOSPatch {
		return &v
	}).(PodOSPatchPtrOutput)
}

// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
func (o PodOSPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodOSPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PodOSPatchPtrOutput struct{ *pulumi.OutputState }

func (PodOSPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodOSPatch)(nil)).Elem()
}

func (o PodOSPatchPtrOutput) ToPodOSPatchPtrOutput() PodOSPatchPtrOutput {
	return o
}

func (o PodOSPatchPtrOutput) ToPodOSPatchPtrOutputWithContext(ctx context.Context) PodOSPatchPtrOutput {
	return o
}

func (o PodOSPatchPtrOutput) Elem() PodOSPatchOutput {
	return o.ApplyT(func(v *PodOSPatch) PodOSPatch {
		if v != nil {
			return *v
		}
		var ret PodOSPatch
		return ret
	}).(PodOSPatchOutput)
}

// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
func (o PodOSPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodOSPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PodSpecPatch `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *PodStatusPatch `pulumi:"status"`
}

// PodPatchTypeInput is an input type that accepts PodPatchTypeArgs and PodPatchTypeOutput values.
// You can construct a concrete instance of `PodPatchTypeInput` via:
//
//	PodPatchTypeArgs{...}
type PodPatchTypeInput interface {
	pulumi.Input

	ToPodPatchTypeOutput() PodPatchTypeOutput
	ToPodPatchTypeOutputWithContext(context.Context) PodPatchTypeOutput
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPatchPtrInput `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PodStatusPatchPtrInput `pulumi:"status"`
}

func (PodPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodPatchType)(nil)).Elem()
}

func (i PodPatchTypeArgs) ToPodPatchTypeOutput() PodPatchTypeOutput {
	return i.ToPodPatchTypeOutputWithContext(context.Background())
}

func (i PodPatchTypeArgs) ToPodPatchTypeOutputWithContext(ctx context.Context) PodPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodPatchTypeOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type PodPatchTypeOutput struct{ *pulumi.OutputState }

func (PodPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodPatchType)(nil)).Elem()
}

func (o PodPatchTypeOutput) ToPodPatchTypeOutput() PodPatchTypeOutput {
	return o
}

func (o PodPatchTypeOutput) ToPodPatchTypeOutputWithContext(ctx context.Context) PodPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PodPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodPatchTypeOutput) Spec() PodSpecPatchPtrOutput {
	return o.ApplyT(func(v PodPatchType) *PodSpecPatch { return v.Spec }).(PodSpecPatchPtrOutput)
}

// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodPatchTypeOutput) Status() PodStatusPatchPtrOutput {
	return o.ApplyT(func(v PodPatchType) *PodStatusPatch { return v.Status }).(PodStatusPatchPtrOutput)
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGate struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType string `pulumi:"conditionType"`
}

// PodReadinessGateInput is an input type that accepts PodReadinessGateArgs and PodReadinessGateOutput values.
// You can construct a concrete instance of `PodReadinessGateInput` via:
//
//	PodReadinessGateArgs{...}
type PodReadinessGateInput interface {
	pulumi.Input

	ToPodReadinessGateOutput() PodReadinessGateOutput
	ToPodReadinessGateOutputWithContext(context.Context) PodReadinessGateOutput
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGateArgs struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
}

func (PodReadinessGateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodReadinessGate)(nil)).Elem()
}

func (i PodReadinessGateArgs) ToPodReadinessGateOutput() PodReadinessGateOutput {
	return i.ToPodReadinessGateOutputWithContext(context.Background())
}

func (i PodReadinessGateArgs) ToPodReadinessGateOutputWithContext(ctx context.Context) PodReadinessGateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodReadinessGateOutput)
}

// PodReadinessGateArrayInput is an input type that accepts PodReadinessGateArray and PodReadinessGateArrayOutput values.
// You can construct a concrete instance of `PodReadinessGateArrayInput` via:
//
//	PodReadinessGateArray{ PodReadinessGateArgs{...} }
type PodReadinessGateArrayInput interface {
	pulumi.Input

	ToPodReadinessGateArrayOutput() PodReadinessGateArrayOutput
	ToPodReadinessGateArrayOutputWithContext(context.Context) PodReadinessGateArrayOutput
}

type PodReadinessGateArray []PodReadinessGateInput

func (PodReadinessGateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodReadinessGate)(nil)).Elem()
}

func (i PodReadinessGateArray) ToPodReadinessGateArrayOutput() PodReadinessGateArrayOutput {
	return i.ToPodReadinessGateArrayOutputWithContext(context.Background())
}

func (i PodReadinessGateArray) ToPodReadinessGateArrayOutputWithContext(ctx context.Context) PodReadinessGateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodReadinessGateArrayOutput)
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGateOutput struct{ *pulumi.OutputState }

func (PodReadinessGateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodReadinessGate)(nil)).Elem()
}

func (o PodReadinessGateOutput) ToPodReadinessGateOutput() PodReadinessGateOutput {
	return o
}

func (o PodReadinessGateOutput) ToPodReadinessGateOutputWithContext(ctx context.Context) PodReadinessGateOutput {
	return o
}

// ConditionType refers to a condition in the pod's condition list with matching type.
func (o PodReadinessGateOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v PodReadinessGate) string { return v.ConditionType }).(pulumi.StringOutput)
}

type PodReadinessGateArrayOutput struct{ *pulumi.OutputState }

func (PodReadinessGateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodReadinessGate)(nil)).Elem()
}

func (o PodReadinessGateArrayOutput) ToPodReadinessGateArrayOutput() PodReadinessGateArrayOutput {
	return o
}

func (o PodReadinessGateArrayOutput) ToPodReadinessGateArrayOutputWithContext(ctx context.Context) PodReadinessGateArrayOutput {
	return o
}

func (o PodReadinessGateArrayOutput) Index(i pulumi.IntInput) PodReadinessGateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodReadinessGate {
		return vs[0].([]PodReadinessGate)[vs[1].(int)]
	}).(PodReadinessGateOutput)
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGatePatch struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType *string `pulumi:"conditionType"`
}

// PodReadinessGatePatchInput is an input type that accepts PodReadinessGatePatchArgs and PodReadinessGatePatchOutput values.
// You can construct a concrete instance of `PodReadinessGatePatchInput` via:
//
//	PodReadinessGatePatchArgs{...}
type PodReadinessGatePatchInput interface {
	pulumi.Input

	ToPodReadinessGatePatchOutput() PodReadinessGatePatchOutput
	ToPodReadinessGatePatchOutputWithContext(context.Context) PodReadinessGatePatchOutput
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGatePatchArgs struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType pulumi.StringPtrInput `pulumi:"conditionType"`
}

func (PodReadinessGatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodReadinessGatePatch)(nil)).Elem()
}

func (i PodReadinessGatePatchArgs) ToPodReadinessGatePatchOutput() PodReadinessGatePatchOutput {
	return i.ToPodReadinessGatePatchOutputWithContext(context.Background())
}

func (i PodReadinessGatePatchArgs) ToPodReadinessGatePatchOutputWithContext(ctx context.Context) PodReadinessGatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodReadinessGatePatchOutput)
}

// PodReadinessGatePatchArrayInput is an input type that accepts PodReadinessGatePatchArray and PodReadinessGatePatchArrayOutput values.
// You can construct a concrete instance of `PodReadinessGatePatchArrayInput` via:
//
//	PodReadinessGatePatchArray{ PodReadinessGatePatchArgs{...} }
type PodReadinessGatePatchArrayInput interface {
	pulumi.Input

	ToPodReadinessGatePatchArrayOutput() PodReadinessGatePatchArrayOutput
	ToPodReadinessGatePatchArrayOutputWithContext(context.Context) PodReadinessGatePatchArrayOutput
}

type PodReadinessGatePatchArray []PodReadinessGatePatchInput

func (PodReadinessGatePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodReadinessGatePatch)(nil)).Elem()
}

func (i PodReadinessGatePatchArray) ToPodReadinessGatePatchArrayOutput() PodReadinessGatePatchArrayOutput {
	return i.ToPodReadinessGatePatchArrayOutputWithContext(context.Background())
}

func (i PodReadinessGatePatchArray) ToPodReadinessGatePatchArrayOutputWithContext(ctx context.Context) PodReadinessGatePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodReadinessGatePatchArrayOutput)
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGatePatchOutput struct{ *pulumi.OutputState }

func (PodReadinessGatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodReadinessGatePatch)(nil)).Elem()
}

func (o PodReadinessGatePatchOutput) ToPodReadinessGatePatchOutput() PodReadinessGatePatchOutput {
	return o
}

func (o PodReadinessGatePatchOutput) ToPodReadinessGatePatchOutputWithContext(ctx context.Context) PodReadinessGatePatchOutput {
	return o
}

// ConditionType refers to a condition in the pod's condition list with matching type.
func (o PodReadinessGatePatchOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodReadinessGatePatch) *string { return v.ConditionType }).(pulumi.StringPtrOutput)
}

type PodReadinessGatePatchArrayOutput struct{ *pulumi.OutputState }

func (PodReadinessGatePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodReadinessGatePatch)(nil)).Elem()
}

func (o PodReadinessGatePatchArrayOutput) ToPodReadinessGatePatchArrayOutput() PodReadinessGatePatchArrayOutput {
	return o
}

func (o PodReadinessGatePatchArrayOutput) ToPodReadinessGatePatchArrayOutputWithContext(ctx context.Context) PodReadinessGatePatchArrayOutput {
	return o
}

func (o PodReadinessGatePatchArrayOutput) Index(i pulumi.IntInput) PodReadinessGatePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodReadinessGatePatch {
		return vs[0].([]PodReadinessGatePatch)[vs[1].(int)]
	}).(PodReadinessGatePatchOutput)
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaim struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name string `pulumi:"name"`
	// Source describes where to find the ResourceClaim.
	Source *ClaimSource `pulumi:"source"`
}

// PodResourceClaimInput is an input type that accepts PodResourceClaimArgs and PodResourceClaimOutput values.
// You can construct a concrete instance of `PodResourceClaimInput` via:
//
//	PodResourceClaimArgs{...}
type PodResourceClaimInput interface {
	pulumi.Input

	ToPodResourceClaimOutput() PodResourceClaimOutput
	ToPodResourceClaimOutputWithContext(context.Context) PodResourceClaimOutput
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaimArgs struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name pulumi.StringInput `pulumi:"name"`
	// Source describes where to find the ResourceClaim.
	Source ClaimSourcePtrInput `pulumi:"source"`
}

func (PodResourceClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodResourceClaim)(nil)).Elem()
}

func (i PodResourceClaimArgs) ToPodResourceClaimOutput() PodResourceClaimOutput {
	return i.ToPodResourceClaimOutputWithContext(context.Background())
}

func (i PodResourceClaimArgs) ToPodResourceClaimOutputWithContext(ctx context.Context) PodResourceClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodResourceClaimOutput)
}

// PodResourceClaimArrayInput is an input type that accepts PodResourceClaimArray and PodResourceClaimArrayOutput values.
// You can construct a concrete instance of `PodResourceClaimArrayInput` via:
//
//	PodResourceClaimArray{ PodResourceClaimArgs{...} }
type PodResourceClaimArrayInput interface {
	pulumi.Input

	ToPodResourceClaimArrayOutput() PodResourceClaimArrayOutput
	ToPodResourceClaimArrayOutputWithContext(context.Context) PodResourceClaimArrayOutput
}

type PodResourceClaimArray []PodResourceClaimInput

func (PodResourceClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodResourceClaim)(nil)).Elem()
}

func (i PodResourceClaimArray) ToPodResourceClaimArrayOutput() PodResourceClaimArrayOutput {
	return i.ToPodResourceClaimArrayOutputWithContext(context.Background())
}

func (i PodResourceClaimArray) ToPodResourceClaimArrayOutputWithContext(ctx context.Context) PodResourceClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodResourceClaimArrayOutput)
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaimOutput struct{ *pulumi.OutputState }

func (PodResourceClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodResourceClaim)(nil)).Elem()
}

func (o PodResourceClaimOutput) ToPodResourceClaimOutput() PodResourceClaimOutput {
	return o
}

func (o PodResourceClaimOutput) ToPodResourceClaimOutputWithContext(ctx context.Context) PodResourceClaimOutput {
	return o
}

// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
func (o PodResourceClaimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PodResourceClaim) string { return v.Name }).(pulumi.StringOutput)
}

// Source describes where to find the ResourceClaim.
func (o PodResourceClaimOutput) Source() ClaimSourcePtrOutput {
	return o.ApplyT(func(v PodResourceClaim) *ClaimSource { return v.Source }).(ClaimSourcePtrOutput)
}

type PodResourceClaimArrayOutput struct{ *pulumi.OutputState }

func (PodResourceClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodResourceClaim)(nil)).Elem()
}

func (o PodResourceClaimArrayOutput) ToPodResourceClaimArrayOutput() PodResourceClaimArrayOutput {
	return o
}

func (o PodResourceClaimArrayOutput) ToPodResourceClaimArrayOutputWithContext(ctx context.Context) PodResourceClaimArrayOutput {
	return o
}

func (o PodResourceClaimArrayOutput) Index(i pulumi.IntInput) PodResourceClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodResourceClaim {
		return vs[0].([]PodResourceClaim)[vs[1].(int)]
	}).(PodResourceClaimOutput)
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaimPatch struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name *string `pulumi:"name"`
	// Source describes where to find the ResourceClaim.
	Source *ClaimSourcePatch `pulumi:"source"`
}

// PodResourceClaimPatchInput is an input type that accepts PodResourceClaimPatchArgs and PodResourceClaimPatchOutput values.
// You can construct a concrete instance of `PodResourceClaimPatchInput` via:
//
//	PodResourceClaimPatchArgs{...}
type PodResourceClaimPatchInput interface {
	pulumi.Input

	ToPodResourceClaimPatchOutput() PodResourceClaimPatchOutput
	ToPodResourceClaimPatchOutputWithContext(context.Context) PodResourceClaimPatchOutput
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaimPatchArgs struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source describes where to find the ResourceClaim.
	Source ClaimSourcePatchPtrInput `pulumi:"source"`
}

func (PodResourceClaimPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodResourceClaimPatch)(nil)).Elem()
}

func (i PodResourceClaimPatchArgs) ToPodResourceClaimPatchOutput() PodResourceClaimPatchOutput {
	return i.ToPodResourceClaimPatchOutputWithContext(context.Background())
}

func (i PodResourceClaimPatchArgs) ToPodResourceClaimPatchOutputWithContext(ctx context.Context) PodResourceClaimPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodResourceClaimPatchOutput)
}

// PodResourceClaimPatchArrayInput is an input type that accepts PodResourceClaimPatchArray and PodResourceClaimPatchArrayOutput values.
// You can construct a concrete instance of `PodResourceClaimPatchArrayInput` via:
//
//	PodResourceClaimPatchArray{ PodResourceClaimPatchArgs{...} }
type PodResourceClaimPatchArrayInput interface {
	pulumi.Input

	ToPodResourceClaimPatchArrayOutput() PodResourceClaimPatchArrayOutput
	ToPodResourceClaimPatchArrayOutputWithContext(context.Context) PodResourceClaimPatchArrayOutput
}

type PodResourceClaimPatchArray []PodResourceClaimPatchInput

func (PodResourceClaimPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodResourceClaimPatch)(nil)).Elem()
}

func (i PodResourceClaimPatchArray) ToPodResourceClaimPatchArrayOutput() PodResourceClaimPatchArrayOutput {
	return i.ToPodResourceClaimPatchArrayOutputWithContext(context.Background())
}

func (i PodResourceClaimPatchArray) ToPodResourceClaimPatchArrayOutputWithContext(ctx context.Context) PodResourceClaimPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodResourceClaimPatchArrayOutput)
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type PodResourceClaimPatchOutput struct{ *pulumi.OutputState }

func (PodResourceClaimPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodResourceClaimPatch)(nil)).Elem()
}

func (o PodResourceClaimPatchOutput) ToPodResourceClaimPatchOutput() PodResourceClaimPatchOutput {
	return o
}

func (o PodResourceClaimPatchOutput) ToPodResourceClaimPatchOutputWithContext(ctx context.Context) PodResourceClaimPatchOutput {
	return o
}

// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
func (o PodResourceClaimPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodResourceClaimPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source describes where to find the ResourceClaim.
func (o PodResourceClaimPatchOutput) Source() ClaimSourcePatchPtrOutput {
	return o.ApplyT(func(v PodResourceClaimPatch) *ClaimSourcePatch { return v.Source }).(ClaimSourcePatchPtrOutput)
}

type PodResourceClaimPatchArrayOutput struct{ *pulumi.OutputState }

func (PodResourceClaimPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodResourceClaimPatch)(nil)).Elem()
}

func (o PodResourceClaimPatchArrayOutput) ToPodResourceClaimPatchArrayOutput() PodResourceClaimPatchArrayOutput {
	return o
}

func (o PodResourceClaimPatchArrayOutput) ToPodResourceClaimPatchArrayOutputWithContext(ctx context.Context) PodResourceClaimPatchArrayOutput {
	return o
}

func (o PodResourceClaimPatchArrayOutput) Index(i pulumi.IntInput) PodResourceClaimPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodResourceClaimPatch {
		return vs[0].([]PodResourceClaimPatch)[vs[1].(int)]
	}).(PodResourceClaimPatchOutput)
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGate struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name string `pulumi:"name"`
}

// PodSchedulingGateInput is an input type that accepts PodSchedulingGateArgs and PodSchedulingGateOutput values.
// You can construct a concrete instance of `PodSchedulingGateInput` via:
//
//	PodSchedulingGateArgs{...}
type PodSchedulingGateInput interface {
	pulumi.Input

	ToPodSchedulingGateOutput() PodSchedulingGateOutput
	ToPodSchedulingGateOutputWithContext(context.Context) PodSchedulingGateOutput
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGateArgs struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PodSchedulingGateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingGate)(nil)).Elem()
}

func (i PodSchedulingGateArgs) ToPodSchedulingGateOutput() PodSchedulingGateOutput {
	return i.ToPodSchedulingGateOutputWithContext(context.Background())
}

func (i PodSchedulingGateArgs) ToPodSchedulingGateOutputWithContext(ctx context.Context) PodSchedulingGateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingGateOutput)
}

// PodSchedulingGateArrayInput is an input type that accepts PodSchedulingGateArray and PodSchedulingGateArrayOutput values.
// You can construct a concrete instance of `PodSchedulingGateArrayInput` via:
//
//	PodSchedulingGateArray{ PodSchedulingGateArgs{...} }
type PodSchedulingGateArrayInput interface {
	pulumi.Input

	ToPodSchedulingGateArrayOutput() PodSchedulingGateArrayOutput
	ToPodSchedulingGateArrayOutputWithContext(context.Context) PodSchedulingGateArrayOutput
}

type PodSchedulingGateArray []PodSchedulingGateInput

func (PodSchedulingGateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingGate)(nil)).Elem()
}

func (i PodSchedulingGateArray) ToPodSchedulingGateArrayOutput() PodSchedulingGateArrayOutput {
	return i.ToPodSchedulingGateArrayOutputWithContext(context.Background())
}

func (i PodSchedulingGateArray) ToPodSchedulingGateArrayOutputWithContext(ctx context.Context) PodSchedulingGateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingGateArrayOutput)
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGateOutput struct{ *pulumi.OutputState }

func (PodSchedulingGateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingGate)(nil)).Elem()
}

func (o PodSchedulingGateOutput) ToPodSchedulingGateOutput() PodSchedulingGateOutput {
	return o
}

func (o PodSchedulingGateOutput) ToPodSchedulingGateOutputWithContext(ctx context.Context) PodSchedulingGateOutput {
	return o
}

// Name of the scheduling gate. Each scheduling gate must have a unique name field.
func (o PodSchedulingGateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PodSchedulingGate) string { return v.Name }).(pulumi.StringOutput)
}

type PodSchedulingGateArrayOutput struct{ *pulumi.OutputState }

func (PodSchedulingGateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingGate)(nil)).Elem()
}

func (o PodSchedulingGateArrayOutput) ToPodSchedulingGateArrayOutput() PodSchedulingGateArrayOutput {
	return o
}

func (o PodSchedulingGateArrayOutput) ToPodSchedulingGateArrayOutputWithContext(ctx context.Context) PodSchedulingGateArrayOutput {
	return o
}

func (o PodSchedulingGateArrayOutput) Index(i pulumi.IntInput) PodSchedulingGateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSchedulingGate {
		return vs[0].([]PodSchedulingGate)[vs[1].(int)]
	}).(PodSchedulingGateOutput)
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGatePatch struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name *string `pulumi:"name"`
}

// PodSchedulingGatePatchInput is an input type that accepts PodSchedulingGatePatchArgs and PodSchedulingGatePatchOutput values.
// You can construct a concrete instance of `PodSchedulingGatePatchInput` via:
//
//	PodSchedulingGatePatchArgs{...}
type PodSchedulingGatePatchInput interface {
	pulumi.Input

	ToPodSchedulingGatePatchOutput() PodSchedulingGatePatchOutput
	ToPodSchedulingGatePatchOutputWithContext(context.Context) PodSchedulingGatePatchOutput
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGatePatchArgs struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PodSchedulingGatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingGatePatch)(nil)).Elem()
}

func (i PodSchedulingGatePatchArgs) ToPodSchedulingGatePatchOutput() PodSchedulingGatePatchOutput {
	return i.ToPodSchedulingGatePatchOutputWithContext(context.Background())
}

func (i PodSchedulingGatePatchArgs) ToPodSchedulingGatePatchOutputWithContext(ctx context.Context) PodSchedulingGatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingGatePatchOutput)
}

// PodSchedulingGatePatchArrayInput is an input type that accepts PodSchedulingGatePatchArray and PodSchedulingGatePatchArrayOutput values.
// You can construct a concrete instance of `PodSchedulingGatePatchArrayInput` via:
//
//	PodSchedulingGatePatchArray{ PodSchedulingGatePatchArgs{...} }
type PodSchedulingGatePatchArrayInput interface {
	pulumi.Input

	ToPodSchedulingGatePatchArrayOutput() PodSchedulingGatePatchArrayOutput
	ToPodSchedulingGatePatchArrayOutputWithContext(context.Context) PodSchedulingGatePatchArrayOutput
}

type PodSchedulingGatePatchArray []PodSchedulingGatePatchInput

func (PodSchedulingGatePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingGatePatch)(nil)).Elem()
}

func (i PodSchedulingGatePatchArray) ToPodSchedulingGatePatchArrayOutput() PodSchedulingGatePatchArrayOutput {
	return i.ToPodSchedulingGatePatchArrayOutputWithContext(context.Background())
}

func (i PodSchedulingGatePatchArray) ToPodSchedulingGatePatchArrayOutputWithContext(ctx context.Context) PodSchedulingGatePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingGatePatchArrayOutput)
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type PodSchedulingGatePatchOutput struct{ *pulumi.OutputState }

func (PodSchedulingGatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingGatePatch)(nil)).Elem()
}

func (o PodSchedulingGatePatchOutput) ToPodSchedulingGatePatchOutput() PodSchedulingGatePatchOutput {
	return o
}

func (o PodSchedulingGatePatchOutput) ToPodSchedulingGatePatchOutputWithContext(ctx context.Context) PodSchedulingGatePatchOutput {
	return o
}

// Name of the scheduling gate. Each scheduling gate must have a unique name field.
func (o PodSchedulingGatePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingGatePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PodSchedulingGatePatchArrayOutput struct{ *pulumi.OutputState }

func (PodSchedulingGatePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingGatePatch)(nil)).Elem()
}

func (o PodSchedulingGatePatchArrayOutput) ToPodSchedulingGatePatchArrayOutput() PodSchedulingGatePatchArrayOutput {
	return o
}

func (o PodSchedulingGatePatchArrayOutput) ToPodSchedulingGatePatchArrayOutputWithContext(ctx context.Context) PodSchedulingGatePatchArrayOutput {
	return o
}

func (o PodSchedulingGatePatchArrayOutput) Index(i pulumi.IntInput) PodSchedulingGatePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSchedulingGatePatch {
		return vs[0].([]PodSchedulingGatePatch)[vs[1].(int)]
	}).(PodSchedulingGatePatchOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup *int `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *SELinuxOptions `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *SeccompProfile `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls []Sysctl `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *WindowsSecurityContextOptions `pulumi:"windowsOptions"`
}

// PodSecurityContextInput is an input type that accepts PodSecurityContextArgs and PodSecurityContextOutput values.
// You can construct a concrete instance of `PodSecurityContextInput` via:
//
//	PodSecurityContextArgs{...}
type PodSecurityContextInput interface {
	pulumi.Input

	ToPodSecurityContextOutput() PodSecurityContextOutput
	ToPodSecurityContextOutputWithContext(context.Context) PodSecurityContextOutput
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContextArgs struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy pulumi.StringPtrInput `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions SELinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile SeccompProfilePtrInput `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls SysctlArrayInput `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions WindowsSecurityContextOptionsPtrInput `pulumi:"windowsOptions"`
}

func (PodSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityContext)(nil)).Elem()
}

func (i PodSecurityContextArgs) ToPodSecurityContextOutput() PodSecurityContextOutput {
	return i.ToPodSecurityContextOutputWithContext(context.Background())
}

func (i PodSecurityContextArgs) ToPodSecurityContextOutputWithContext(ctx context.Context) PodSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextOutput)
}

func (i PodSecurityContextArgs) ToPodSecurityContextPtrOutput() PodSecurityContextPtrOutput {
	return i.ToPodSecurityContextPtrOutputWithContext(context.Background())
}

func (i PodSecurityContextArgs) ToPodSecurityContextPtrOutputWithContext(ctx context.Context) PodSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextOutput).ToPodSecurityContextPtrOutputWithContext(ctx)
}

// PodSecurityContextPtrInput is an input type that accepts PodSecurityContextArgs, PodSecurityContextPtr and PodSecurityContextPtrOutput values.
// You can construct a concrete instance of `PodSecurityContextPtrInput` via:
//
//	        PodSecurityContextArgs{...}
//
//	or:
//
//	        nil
type PodSecurityContextPtrInput interface {
	pulumi.Input

	ToPodSecurityContextPtrOutput() PodSecurityContextPtrOutput
	ToPodSecurityContextPtrOutputWithContext(context.Context) PodSecurityContextPtrOutput
}

type podSecurityContextPtrType PodSecurityContextArgs

func PodSecurityContextPtr(v *PodSecurityContextArgs) PodSecurityContextPtrInput {
	return (*podSecurityContextPtrType)(v)
}

func (*podSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityContext)(nil)).Elem()
}

func (i *podSecurityContextPtrType) ToPodSecurityContextPtrOutput() PodSecurityContextPtrOutput {
	return i.ToPodSecurityContextPtrOutputWithContext(context.Background())
}

func (i *podSecurityContextPtrType) ToPodSecurityContextPtrOutputWithContext(ctx context.Context) PodSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextPtrOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContextOutput struct{ *pulumi.OutputState }

func (PodSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityContext)(nil)).Elem()
}

func (o PodSecurityContextOutput) ToPodSecurityContextOutput() PodSecurityContextOutput {
	return o
}

func (o PodSecurityContextOutput) ToPodSecurityContextOutputWithContext(ctx context.Context) PodSecurityContextOutput {
	return o
}

func (o PodSecurityContextOutput) ToPodSecurityContextPtrOutput() PodSecurityContextPtrOutput {
	return o.ToPodSecurityContextPtrOutputWithContext(context.Background())
}

func (o PodSecurityContextOutput) ToPodSecurityContextPtrOutputWithContext(ctx context.Context) PodSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSecurityContext) *PodSecurityContext {
		return &v
	}).(PodSecurityContextPtrOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//
// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *string { return v.FsGroupChangePolicy }).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o PodSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) SeLinuxOptions() SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *SELinuxOptions { return v.SeLinuxOptions }).(SELinuxOptionsPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) SeccompProfile() SeccompProfilePtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *SeccompProfile { return v.SeccompProfile }).(SeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PodSecurityContext) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextOutput) Sysctls() SysctlArrayOutput {
	return o.ApplyT(func(v PodSecurityContext) []Sysctl { return v.Sysctls }).(SysctlArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o PodSecurityContextOutput) WindowsOptions() WindowsSecurityContextOptionsPtrOutput {
	return o.ApplyT(func(v PodSecurityContext) *WindowsSecurityContextOptions { return v.WindowsOptions }).(WindowsSecurityContextOptionsPtrOutput)
}

type PodSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (PodSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityContext)(nil)).Elem()
}

func (o PodSecurityContextPtrOutput) ToPodSecurityContextPtrOutput() PodSecurityContextPtrOutput {
	return o
}

func (o PodSecurityContextPtrOutput) ToPodSecurityContextPtrOutputWithContext(ctx context.Context) PodSecurityContextPtrOutput {
	return o
}

func (o PodSecurityContextPtrOutput) Elem() PodSecurityContextOutput {
	return o.ApplyT(func(v *PodSecurityContext) PodSecurityContext {
		if v != nil {
			return *v
		}
		var ret PodSecurityContext
		return ret
	}).(PodSecurityContextOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//
// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupChangePolicy
	}).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o PodSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) SeLinuxOptions() SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *SELinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(SELinuxOptionsPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) SeccompProfile() SeccompProfilePtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *SeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(SeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PodSecurityContext) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPtrOutput) Sysctls() SysctlArrayOutput {
	return o.ApplyT(func(v *PodSecurityContext) []Sysctl {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o PodSecurityContextPtrOutput) WindowsOptions() WindowsSecurityContextOptionsPtrOutput {
	return o.ApplyT(func(v *PodSecurityContext) *WindowsSecurityContextOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsPtrOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContextPatch struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup *int `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *SELinuxOptionsPatch `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *SeccompProfilePatch `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls []SysctlPatch `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *WindowsSecurityContextOptionsPatch `pulumi:"windowsOptions"`
}

// PodSecurityContextPatchInput is an input type that accepts PodSecurityContextPatchArgs and PodSecurityContextPatchOutput values.
// You can construct a concrete instance of `PodSecurityContextPatchInput` via:
//
//	PodSecurityContextPatchArgs{...}
type PodSecurityContextPatchInput interface {
	pulumi.Input

	ToPodSecurityContextPatchOutput() PodSecurityContextPatchOutput
	ToPodSecurityContextPatchOutputWithContext(context.Context) PodSecurityContextPatchOutput
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContextPatchArgs struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy pulumi.StringPtrInput `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions SELinuxOptionsPatchPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile SeccompProfilePatchPtrInput `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls SysctlPatchArrayInput `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions WindowsSecurityContextOptionsPatchPtrInput `pulumi:"windowsOptions"`
}

func (PodSecurityContextPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityContextPatch)(nil)).Elem()
}

func (i PodSecurityContextPatchArgs) ToPodSecurityContextPatchOutput() PodSecurityContextPatchOutput {
	return i.ToPodSecurityContextPatchOutputWithContext(context.Background())
}

func (i PodSecurityContextPatchArgs) ToPodSecurityContextPatchOutputWithContext(ctx context.Context) PodSecurityContextPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextPatchOutput)
}

func (i PodSecurityContextPatchArgs) ToPodSecurityContextPatchPtrOutput() PodSecurityContextPatchPtrOutput {
	return i.ToPodSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i PodSecurityContextPatchArgs) ToPodSecurityContextPatchPtrOutputWithContext(ctx context.Context) PodSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextPatchOutput).ToPodSecurityContextPatchPtrOutputWithContext(ctx)
}

// PodSecurityContextPatchPtrInput is an input type that accepts PodSecurityContextPatchArgs, PodSecurityContextPatchPtr and PodSecurityContextPatchPtrOutput values.
// You can construct a concrete instance of `PodSecurityContextPatchPtrInput` via:
//
//	        PodSecurityContextPatchArgs{...}
//
//	or:
//
//	        nil
type PodSecurityContextPatchPtrInput interface {
	pulumi.Input

	ToPodSecurityContextPatchPtrOutput() PodSecurityContextPatchPtrOutput
	ToPodSecurityContextPatchPtrOutputWithContext(context.Context) PodSecurityContextPatchPtrOutput
}

type podSecurityContextPatchPtrType PodSecurityContextPatchArgs

func PodSecurityContextPatchPtr(v *PodSecurityContextPatchArgs) PodSecurityContextPatchPtrInput {
	return (*podSecurityContextPatchPtrType)(v)
}

func (*podSecurityContextPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityContextPatch)(nil)).Elem()
}

func (i *podSecurityContextPatchPtrType) ToPodSecurityContextPatchPtrOutput() PodSecurityContextPatchPtrOutput {
	return i.ToPodSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i *podSecurityContextPatchPtrType) ToPodSecurityContextPatchPtrOutputWithContext(ctx context.Context) PodSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSecurityContextPatchPtrOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type PodSecurityContextPatchOutput struct{ *pulumi.OutputState }

func (PodSecurityContextPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSecurityContextPatch)(nil)).Elem()
}

func (o PodSecurityContextPatchOutput) ToPodSecurityContextPatchOutput() PodSecurityContextPatchOutput {
	return o
}

func (o PodSecurityContextPatchOutput) ToPodSecurityContextPatchOutputWithContext(ctx context.Context) PodSecurityContextPatchOutput {
	return o
}

func (o PodSecurityContextPatchOutput) ToPodSecurityContextPatchPtrOutput() PodSecurityContextPatchPtrOutput {
	return o.ToPodSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (o PodSecurityContextPatchOutput) ToPodSecurityContextPatchPtrOutputWithContext(ctx context.Context) PodSecurityContextPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSecurityContextPatch) *PodSecurityContextPatch {
		return &v
	}).(PodSecurityContextPatchPtrOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//
// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *string { return v.FsGroupChangePolicy }).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o PodSecurityContextPatchOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) SeLinuxOptions() SELinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *SELinuxOptionsPatch { return v.SeLinuxOptions }).(SELinuxOptionsPatchPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) SeccompProfile() SeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *SeccompProfilePatch { return v.SeccompProfile }).(SeccompProfilePatchPtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchOutput) Sysctls() SysctlPatchArrayOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) []SysctlPatch { return v.Sysctls }).(SysctlPatchArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o PodSecurityContextPatchOutput) WindowsOptions() WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ApplyT(func(v PodSecurityContextPatch) *WindowsSecurityContextOptionsPatch { return v.WindowsOptions }).(WindowsSecurityContextOptionsPatchPtrOutput)
}

type PodSecurityContextPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSecurityContextPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSecurityContextPatch)(nil)).Elem()
}

func (o PodSecurityContextPatchPtrOutput) ToPodSecurityContextPatchPtrOutput() PodSecurityContextPatchPtrOutput {
	return o
}

func (o PodSecurityContextPatchPtrOutput) ToPodSecurityContextPatchPtrOutputWithContext(ctx context.Context) PodSecurityContextPatchPtrOutput {
	return o
}

func (o PodSecurityContextPatchPtrOutput) Elem() PodSecurityContextPatchOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) PodSecurityContextPatch {
		if v != nil {
			return *v
		}
		var ret PodSecurityContextPatch
		return ret
	}).(PodSecurityContextPatchOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//
// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupChangePolicy
	}).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o PodSecurityContextPatchPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) SeLinuxOptions() SELinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *SELinuxOptionsPatch {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(SELinuxOptionsPatchPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) SeccompProfile() SeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *SeccompProfilePatch {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(SeccompProfilePatchPtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o PodSecurityContextPatchPtrOutput) Sysctls() SysctlPatchArrayOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) []SysctlPatch {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlPatchArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o PodSecurityContextPatchPtrOutput) WindowsOptions() WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ApplyT(func(v *PodSecurityContextPatch) *WindowsSecurityContextOptionsPatch {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsPatchPtrOutput)
}

// PodSpec is a description of a pod.
type PodSpec struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds *int `pulumi:"activeDeadlineSeconds"`
	// If specified, the pod's scheduling constraints
	Affinity *Affinity `pulumi:"affinity"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken *bool `pulumi:"automountServiceAccountToken"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers []Container `pulumi:"containers"`
	// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
	DnsConfig *PodDNSConfig `pulumi:"dnsConfig"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy *string `pulumi:"dnsPolicy"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks *bool `pulumi:"enableServiceLinks"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers []EphemeralContainer `pulumi:"ephemeralContainers"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases []HostAlias `pulumi:"hostAliases"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC *bool `pulumi:"hostIPC"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID *bool `pulumi:"hostPID"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers *bool `pulumi:"hostUsers"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname *string `pulumi:"hostname"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []LocalObjectReference `pulumi:"imagePullSecrets"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers []Container `pulumi:"initContainers"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName *string `pulumi:"nodeName"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
	//
	// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
	//
	// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
	Os *PodOS `pulumi:"os"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead map[string]string `pulumi:"overhead"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `pulumi:"preemptionPolicy"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority *int `pulumi:"priority"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName *string `pulumi:"priorityClassName"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates []PodReadinessGate `pulumi:"readinessGates"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims []PodResourceClaim `pulumi:"resourceClaims"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy *string `pulumi:"restartPolicy"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName *string `pulumi:"runtimeClassName"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName *string `pulumi:"schedulerName"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
	//
	// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
	SchedulingGates []PodSchedulingGate `pulumi:"schedulingGates"`
	// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
	SecurityContext *PodSecurityContext `pulumi:"securityContext"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFQDN *bool `pulumi:"setHostnameAsFQDN"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace *bool `pulumi:"shareProcessNamespace"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain *string `pulumi:"subdomain"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// If specified, the pod's tolerations.
	Tolerations []Toleration `pulumi:"tolerations"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []TopologySpreadConstraint `pulumi:"topologySpreadConstraints"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes []Volume `pulumi:"volumes"`
}

// PodSpecInput is an input type that accepts PodSpecArgs and PodSpecOutput values.
// You can construct a concrete instance of `PodSpecInput` via:
//
//	PodSpecArgs{...}
type PodSpecInput interface {
	pulumi.Input

	ToPodSpecOutput() PodSpecOutput
	ToPodSpecOutputWithContext(context.Context) PodSpecOutput
}

// PodSpec is a description of a pod.
type PodSpecArgs struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds pulumi.IntPtrInput `pulumi:"activeDeadlineSeconds"`
	// If specified, the pod's scheduling constraints
	Affinity AffinityPtrInput `pulumi:"affinity"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken pulumi.BoolPtrInput `pulumi:"automountServiceAccountToken"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers ContainerArrayInput `pulumi:"containers"`
	// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
	DnsConfig PodDNSConfigPtrInput `pulumi:"dnsConfig"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy pulumi.StringPtrInput `pulumi:"dnsPolicy"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks pulumi.BoolPtrInput `pulumi:"enableServiceLinks"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers EphemeralContainerArrayInput `pulumi:"ephemeralContainers"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases HostAliasArrayInput `pulumi:"hostAliases"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC pulumi.BoolPtrInput `pulumi:"hostIPC"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID pulumi.BoolPtrInput `pulumi:"hostPID"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers pulumi.BoolPtrInput `pulumi:"hostUsers"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets LocalObjectReferenceArrayInput `pulumi:"imagePullSecrets"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers ContainerArrayInput `pulumi:"initContainers"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
	//
	// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
	//
	// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
	Os PodOSPtrInput `pulumi:"os"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead pulumi.StringMapInput `pulumi:"overhead"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy pulumi.StringPtrInput `pulumi:"preemptionPolicy"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates PodReadinessGateArrayInput `pulumi:"readinessGates"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims PodResourceClaimArrayInput `pulumi:"resourceClaims"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy pulumi.StringPtrInput `pulumi:"restartPolicy"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName pulumi.StringPtrInput `pulumi:"runtimeClassName"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName pulumi.StringPtrInput `pulumi:"schedulerName"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
	//
	// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
	SchedulingGates PodSchedulingGateArrayInput `pulumi:"schedulingGates"`
	// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
	SecurityContext PodSecurityContextPtrInput `pulumi:"securityContext"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFQDN pulumi.BoolPtrInput `pulumi:"setHostnameAsFQDN"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace pulumi.BoolPtrInput `pulumi:"shareProcessNamespace"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// If specified, the pod's tolerations.
	Tolerations TolerationArrayInput `pulumi:"tolerations"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints TopologySpreadConstraintArrayInput `pulumi:"topologySpreadConstraints"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes VolumeArrayInput `pulumi:"volumes"`
}

func (PodSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSpec)(nil)).Elem()
}

func (i PodSpecArgs) ToPodSpecOutput() PodSpecOutput {
	return i.ToPodSpecOutputWithContext(context.Background())
}

func (i PodSpecArgs) ToPodSpecOutputWithContext(ctx context.Context) PodSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecOutput)
}

func (i PodSpecArgs) ToPodSpecPtrOutput() PodSpecPtrOutput {
	return i.ToPodSpecPtrOutputWithContext(context.Background())
}

func (i PodSpecArgs) ToPodSpecPtrOutputWithContext(ctx context.Context) PodSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecOutput).ToPodSpecPtrOutputWithContext(ctx)
}

// PodSpecPtrInput is an input type that accepts PodSpecArgs, PodSpecPtr and PodSpecPtrOutput values.
// You can construct a concrete instance of `PodSpecPtrInput` via:
//
//	        PodSpecArgs{...}
//
//	or:
//
//	        nil
type PodSpecPtrInput interface {
	pulumi.Input

	ToPodSpecPtrOutput() PodSpecPtrOutput
	ToPodSpecPtrOutputWithContext(context.Context) PodSpecPtrOutput
}

type podSpecPtrType PodSpecArgs

func PodSpecPtr(v *PodSpecArgs) PodSpecPtrInput {
	return (*podSpecPtrType)(v)
}

func (*podSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSpec)(nil)).Elem()
}

func (i *podSpecPtrType) ToPodSpecPtrOutput() PodSpecPtrOutput {
	return i.ToPodSpecPtrOutputWithContext(context.Background())
}

func (i *podSpecPtrType) ToPodSpecPtrOutputWithContext(ctx context.Context) PodSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecPtrOutput)
}

// PodSpec is a description of a pod.
type PodSpecOutput struct{ *pulumi.OutputState }

func (PodSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSpec)(nil)).Elem()
}

func (o PodSpecOutput) ToPodSpecOutput() PodSpecOutput {
	return o
}

func (o PodSpecOutput) ToPodSpecOutputWithContext(ctx context.Context) PodSpecOutput {
	return o
}

func (o PodSpecOutput) ToPodSpecPtrOutput() PodSpecPtrOutput {
	return o.ToPodSpecPtrOutputWithContext(context.Background())
}

func (o PodSpecOutput) ToPodSpecPtrOutputWithContext(ctx context.Context) PodSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSpec) *PodSpec {
		return &v
	}).(PodSpecPtrOutput)
}

// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
func (o PodSpecOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpec) *int { return v.ActiveDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// If specified, the pod's scheduling constraints
func (o PodSpecOutput) Affinity() AffinityPtrOutput {
	return o.ApplyT(func(v PodSpec) *Affinity { return v.Affinity }).(AffinityPtrOutput)
}

// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
func (o PodSpecOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
func (o PodSpecOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v PodSpec) []Container { return v.Containers }).(ContainerArrayOutput)
}

// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
func (o PodSpecOutput) DnsConfig() PodDNSConfigPtrOutput {
	return o.ApplyT(func(v PodSpec) *PodDNSConfig { return v.DnsConfig }).(PodDNSConfigPtrOutput)
}

// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
func (o PodSpecOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.DnsPolicy }).(pulumi.StringPtrOutput)
}

// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
func (o PodSpecOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.EnableServiceLinks }).(pulumi.BoolPtrOutput)
}

// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
func (o PodSpecOutput) EphemeralContainers() EphemeralContainerArrayOutput {
	return o.ApplyT(func(v PodSpec) []EphemeralContainer { return v.EphemeralContainers }).(EphemeralContainerArrayOutput)
}

// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
func (o PodSpecOutput) HostAliases() HostAliasArrayOutput {
	return o.ApplyT(func(v PodSpec) []HostAlias { return v.HostAliases }).(HostAliasArrayOutput)
}

// Use the host's ipc namespace. Optional: Default to false.
func (o PodSpecOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.HostIPC }).(pulumi.BoolPtrOutput)
}

// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
func (o PodSpecOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// Use the host's pid namespace. Optional: Default to false.
func (o PodSpecOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.HostPID }).(pulumi.BoolPtrOutput)
}

// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
func (o PodSpecOutput) HostUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.HostUsers }).(pulumi.BoolPtrOutput)
}

// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
func (o PodSpecOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
func (o PodSpecOutput) ImagePullSecrets() LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v PodSpec) []LocalObjectReference { return v.ImagePullSecrets }).(LocalObjectReferenceArrayOutput)
}

// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
func (o PodSpecOutput) InitContainers() ContainerArrayOutput {
	return o.ApplyT(func(v PodSpec) []Container { return v.InitContainers }).(ContainerArrayOutput)
}

// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
func (o PodSpecOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o PodSpecOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodSpec) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
//
// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
//
// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
func (o PodSpecOutput) Os() PodOSPtrOutput {
	return o.ApplyT(func(v PodSpec) *PodOS { return v.Os }).(PodOSPtrOutput)
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
func (o PodSpecOutput) Overhead() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodSpec) map[string]string { return v.Overhead }).(pulumi.StringMapOutput)
}

// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
func (o PodSpecOutput) PreemptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.PreemptionPolicy }).(pulumi.StringPtrOutput)
}

// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
func (o PodSpecOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
func (o PodSpecOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
func (o PodSpecOutput) ReadinessGates() PodReadinessGateArrayOutput {
	return o.ApplyT(func(v PodSpec) []PodReadinessGate { return v.ReadinessGates }).(PodReadinessGateArrayOutput)
}

// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o PodSpecOutput) ResourceClaims() PodResourceClaimArrayOutput {
	return o.ApplyT(func(v PodSpec) []PodResourceClaim { return v.ResourceClaims }).(PodResourceClaimArrayOutput)
}

// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (o PodSpecOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
func (o PodSpecOutput) RuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.RuntimeClassName }).(pulumi.StringPtrOutput)
}

// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
func (o PodSpecOutput) SchedulerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.SchedulerName }).(pulumi.StringPtrOutput)
}

// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
//
// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
func (o PodSpecOutput) SchedulingGates() PodSchedulingGateArrayOutput {
	return o.ApplyT(func(v PodSpec) []PodSchedulingGate { return v.SchedulingGates }).(PodSchedulingGateArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
func (o PodSpecOutput) SecurityContext() PodSecurityContextPtrOutput {
	return o.ApplyT(func(v PodSpec) *PodSecurityContext { return v.SecurityContext }).(PodSecurityContextPtrOutput)
}

// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
func (o PodSpecOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (o PodSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
func (o PodSpecOutput) SetHostnameAsFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.SetHostnameAsFQDN }).(pulumi.BoolPtrOutput)
}

// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
func (o PodSpecOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpec) *bool { return v.ShareProcessNamespace }).(pulumi.BoolPtrOutput)
}

// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
func (o PodSpecOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpec) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o PodSpecOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpec) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// If specified, the pod's tolerations.
func (o PodSpecOutput) Tolerations() TolerationArrayOutput {
	return o.ApplyT(func(v PodSpec) []Toleration { return v.Tolerations }).(TolerationArrayOutput)
}

// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
func (o PodSpecOutput) TopologySpreadConstraints() TopologySpreadConstraintArrayOutput {
	return o.ApplyT(func(v PodSpec) []TopologySpreadConstraint { return v.TopologySpreadConstraints }).(TopologySpreadConstraintArrayOutput)
}

// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
func (o PodSpecOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v PodSpec) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type PodSpecPtrOutput struct{ *pulumi.OutputState }

func (PodSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSpec)(nil)).Elem()
}

func (o PodSpecPtrOutput) ToPodSpecPtrOutput() PodSpecPtrOutput {
	return o
}

func (o PodSpecPtrOutput) ToPodSpecPtrOutputWithContext(ctx context.Context) PodSpecPtrOutput {
	return o
}

func (o PodSpecPtrOutput) Elem() PodSpecOutput {
	return o.ApplyT(func(v *PodSpec) PodSpec {
		if v != nil {
			return *v
		}
		var ret PodSpec
		return ret
	}).(PodSpecOutput)
}

// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
func (o PodSpecPtrOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpec) *int {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// If specified, the pod's scheduling constraints
func (o PodSpecPtrOutput) Affinity() AffinityPtrOutput {
	return o.ApplyT(func(v *PodSpec) *Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(AffinityPtrOutput)
}

// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
func (o PodSpecPtrOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AutomountServiceAccountToken
	}).(pulumi.BoolPtrOutput)
}

// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
func (o PodSpecPtrOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v *PodSpec) []Container {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerArrayOutput)
}

// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
func (o PodSpecPtrOutput) DnsConfig() PodDNSConfigPtrOutput {
	return o.ApplyT(func(v *PodSpec) *PodDNSConfig {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(PodDNSConfigPtrOutput)
}

// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
func (o PodSpecPtrOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.DnsPolicy
	}).(pulumi.StringPtrOutput)
}

// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
func (o PodSpecPtrOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableServiceLinks
	}).(pulumi.BoolPtrOutput)
}

// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
func (o PodSpecPtrOutput) EphemeralContainers() EphemeralContainerArrayOutput {
	return o.ApplyT(func(v *PodSpec) []EphemeralContainer {
		if v == nil {
			return nil
		}
		return v.EphemeralContainers
	}).(EphemeralContainerArrayOutput)
}

// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
func (o PodSpecPtrOutput) HostAliases() HostAliasArrayOutput {
	return o.ApplyT(func(v *PodSpec) []HostAlias {
		if v == nil {
			return nil
		}
		return v.HostAliases
	}).(HostAliasArrayOutput)
}

// Use the host's ipc namespace. Optional: Default to false.
func (o PodSpecPtrOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostIPC
	}).(pulumi.BoolPtrOutput)
}

// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
func (o PodSpecPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

// Use the host's pid namespace. Optional: Default to false.
func (o PodSpecPtrOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostPID
	}).(pulumi.BoolPtrOutput)
}

// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
func (o PodSpecPtrOutput) HostUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.HostUsers
	}).(pulumi.BoolPtrOutput)
}

// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
func (o PodSpecPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
func (o PodSpecPtrOutput) ImagePullSecrets() LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v *PodSpec) []LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(LocalObjectReferenceArrayOutput)
}

// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
func (o PodSpecPtrOutput) InitContainers() ContainerArrayOutput {
	return o.ApplyT(func(v *PodSpec) []Container {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(ContainerArrayOutput)
}

// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
func (o PodSpecPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o PodSpecPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
//
// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
//
// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
func (o PodSpecPtrOutput) Os() PodOSPtrOutput {
	return o.ApplyT(func(v *PodSpec) *PodOS {
		if v == nil {
			return nil
		}
		return v.Os
	}).(PodOSPtrOutput)
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
func (o PodSpecPtrOutput) Overhead() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Overhead
	}).(pulumi.StringMapOutput)
}

// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
func (o PodSpecPtrOutput) PreemptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.PreemptionPolicy
	}).(pulumi.StringPtrOutput)
}

// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
func (o PodSpecPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpec) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
func (o PodSpecPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
func (o PodSpecPtrOutput) ReadinessGates() PodReadinessGateArrayOutput {
	return o.ApplyT(func(v *PodSpec) []PodReadinessGate {
		if v == nil {
			return nil
		}
		return v.ReadinessGates
	}).(PodReadinessGateArrayOutput)
}

// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o PodSpecPtrOutput) ResourceClaims() PodResourceClaimArrayOutput {
	return o.ApplyT(func(v *PodSpec) []PodResourceClaim {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(PodResourceClaimArrayOutput)
}

// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (o PodSpecPtrOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.RestartPolicy
	}).(pulumi.StringPtrOutput)
}

// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
func (o PodSpecPtrOutput) RuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeClassName
	}).(pulumi.StringPtrOutput)
}

// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
func (o PodSpecPtrOutput) SchedulerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.SchedulerName
	}).(pulumi.StringPtrOutput)
}

// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
//
// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
func (o PodSpecPtrOutput) SchedulingGates() PodSchedulingGateArrayOutput {
	return o.ApplyT(func(v *PodSpec) []PodSchedulingGate {
		if v == nil {
			return nil
		}
		return v.SchedulingGates
	}).(PodSchedulingGateArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
func (o PodSpecPtrOutput) SecurityContext() PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *PodSpec) *PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(PodSecurityContextPtrOutput)
}

// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
func (o PodSpecPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (o PodSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
func (o PodSpecPtrOutput) SetHostnameAsFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.SetHostnameAsFQDN
	}).(pulumi.BoolPtrOutput)
}

// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
func (o PodSpecPtrOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ShareProcessNamespace
	}).(pulumi.BoolPtrOutput)
}

// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
func (o PodSpecPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpec) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o PodSpecPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpec) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// If specified, the pod's tolerations.
func (o PodSpecPtrOutput) Tolerations() TolerationArrayOutput {
	return o.ApplyT(func(v *PodSpec) []Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(TolerationArrayOutput)
}

// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
func (o PodSpecPtrOutput) TopologySpreadConstraints() TopologySpreadConstraintArrayOutput {
	return o.ApplyT(func(v *PodSpec) []TopologySpreadConstraint {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(TopologySpreadConstraintArrayOutput)
}

// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
func (o PodSpecPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *PodSpec) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// PodSpec is a description of a pod.
type PodSpecPatch struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds *int `pulumi:"activeDeadlineSeconds"`
	// If specified, the pod's scheduling constraints
	Affinity *AffinityPatch `pulumi:"affinity"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken *bool `pulumi:"automountServiceAccountToken"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers []ContainerPatch `pulumi:"containers"`
	// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
	DnsConfig *PodDNSConfigPatch `pulumi:"dnsConfig"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy *string `pulumi:"dnsPolicy"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks *bool `pulumi:"enableServiceLinks"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers []EphemeralContainerPatch `pulumi:"ephemeralContainers"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases []HostAliasPatch `pulumi:"hostAliases"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC *bool `pulumi:"hostIPC"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID *bool `pulumi:"hostPID"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers *bool `pulumi:"hostUsers"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname *string `pulumi:"hostname"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []LocalObjectReferencePatch `pulumi:"imagePullSecrets"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers []ContainerPatch `pulumi:"initContainers"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName *string `pulumi:"nodeName"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
	//
	// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
	//
	// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
	Os *PodOSPatch `pulumi:"os"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead map[string]string `pulumi:"overhead"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `pulumi:"preemptionPolicy"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority *int `pulumi:"priority"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName *string `pulumi:"priorityClassName"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates []PodReadinessGatePatch `pulumi:"readinessGates"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims []PodResourceClaimPatch `pulumi:"resourceClaims"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy *string `pulumi:"restartPolicy"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName *string `pulumi:"runtimeClassName"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName *string `pulumi:"schedulerName"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
	//
	// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
	SchedulingGates []PodSchedulingGatePatch `pulumi:"schedulingGates"`
	// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
	SecurityContext *PodSecurityContextPatch `pulumi:"securityContext"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFQDN *bool `pulumi:"setHostnameAsFQDN"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace *bool `pulumi:"shareProcessNamespace"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain *string `pulumi:"subdomain"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// If specified, the pod's tolerations.
	Tolerations []TolerationPatch `pulumi:"tolerations"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []TopologySpreadConstraintPatch `pulumi:"topologySpreadConstraints"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes []VolumePatch `pulumi:"volumes"`
}

// PodSpecPatchInput is an input type that accepts PodSpecPatchArgs and PodSpecPatchOutput values.
// You can construct a concrete instance of `PodSpecPatchInput` via:
//
//	PodSpecPatchArgs{...}
type PodSpecPatchInput interface {
	pulumi.Input

	ToPodSpecPatchOutput() PodSpecPatchOutput
	ToPodSpecPatchOutputWithContext(context.Context) PodSpecPatchOutput
}

// PodSpec is a description of a pod.
type PodSpecPatchArgs struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds pulumi.IntPtrInput `pulumi:"activeDeadlineSeconds"`
	// If specified, the pod's scheduling constraints
	Affinity AffinityPatchPtrInput `pulumi:"affinity"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken pulumi.BoolPtrInput `pulumi:"automountServiceAccountToken"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers ContainerPatchArrayInput `pulumi:"containers"`
	// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
	DnsConfig PodDNSConfigPatchPtrInput `pulumi:"dnsConfig"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy pulumi.StringPtrInput `pulumi:"dnsPolicy"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks pulumi.BoolPtrInput `pulumi:"enableServiceLinks"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers EphemeralContainerPatchArrayInput `pulumi:"ephemeralContainers"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases HostAliasPatchArrayInput `pulumi:"hostAliases"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC pulumi.BoolPtrInput `pulumi:"hostIPC"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID pulumi.BoolPtrInput `pulumi:"hostPID"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers pulumi.BoolPtrInput `pulumi:"hostUsers"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets LocalObjectReferencePatchArrayInput `pulumi:"imagePullSecrets"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers ContainerPatchArrayInput `pulumi:"initContainers"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
	//
	// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
	//
	// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
	Os PodOSPatchPtrInput `pulumi:"os"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead pulumi.StringMapInput `pulumi:"overhead"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy pulumi.StringPtrInput `pulumi:"preemptionPolicy"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates PodReadinessGatePatchArrayInput `pulumi:"readinessGates"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims PodResourceClaimPatchArrayInput `pulumi:"resourceClaims"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy pulumi.StringPtrInput `pulumi:"restartPolicy"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName pulumi.StringPtrInput `pulumi:"runtimeClassName"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName pulumi.StringPtrInput `pulumi:"schedulerName"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
	//
	// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
	SchedulingGates PodSchedulingGatePatchArrayInput `pulumi:"schedulingGates"`
	// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
	SecurityContext PodSecurityContextPatchPtrInput `pulumi:"securityContext"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFQDN pulumi.BoolPtrInput `pulumi:"setHostnameAsFQDN"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace pulumi.BoolPtrInput `pulumi:"shareProcessNamespace"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// If specified, the pod's tolerations.
	Tolerations TolerationPatchArrayInput `pulumi:"tolerations"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints TopologySpreadConstraintPatchArrayInput `pulumi:"topologySpreadConstraints"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes VolumePatchArrayInput `pulumi:"volumes"`
}

func (PodSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSpecPatch)(nil)).Elem()
}

func (i PodSpecPatchArgs) ToPodSpecPatchOutput() PodSpecPatchOutput {
	return i.ToPodSpecPatchOutputWithContext(context.Background())
}

func (i PodSpecPatchArgs) ToPodSpecPatchOutputWithContext(ctx context.Context) PodSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecPatchOutput)
}

func (i PodSpecPatchArgs) ToPodSpecPatchPtrOutput() PodSpecPatchPtrOutput {
	return i.ToPodSpecPatchPtrOutputWithContext(context.Background())
}

func (i PodSpecPatchArgs) ToPodSpecPatchPtrOutputWithContext(ctx context.Context) PodSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecPatchOutput).ToPodSpecPatchPtrOutputWithContext(ctx)
}

// PodSpecPatchPtrInput is an input type that accepts PodSpecPatchArgs, PodSpecPatchPtr and PodSpecPatchPtrOutput values.
// You can construct a concrete instance of `PodSpecPatchPtrInput` via:
//
//	        PodSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PodSpecPatchPtrInput interface {
	pulumi.Input

	ToPodSpecPatchPtrOutput() PodSpecPatchPtrOutput
	ToPodSpecPatchPtrOutputWithContext(context.Context) PodSpecPatchPtrOutput
}

type podSpecPatchPtrType PodSpecPatchArgs

func PodSpecPatchPtr(v *PodSpecPatchArgs) PodSpecPatchPtrInput {
	return (*podSpecPatchPtrType)(v)
}

func (*podSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSpecPatch)(nil)).Elem()
}

func (i *podSpecPatchPtrType) ToPodSpecPatchPtrOutput() PodSpecPatchPtrOutput {
	return i.ToPodSpecPatchPtrOutputWithContext(context.Background())
}

func (i *podSpecPatchPtrType) ToPodSpecPatchPtrOutputWithContext(ctx context.Context) PodSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSpecPatchPtrOutput)
}

// PodSpec is a description of a pod.
type PodSpecPatchOutput struct{ *pulumi.OutputState }

func (PodSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSpecPatch)(nil)).Elem()
}

func (o PodSpecPatchOutput) ToPodSpecPatchOutput() PodSpecPatchOutput {
	return o
}

func (o PodSpecPatchOutput) ToPodSpecPatchOutputWithContext(ctx context.Context) PodSpecPatchOutput {
	return o
}

func (o PodSpecPatchOutput) ToPodSpecPatchPtrOutput() PodSpecPatchPtrOutput {
	return o.ToPodSpecPatchPtrOutputWithContext(context.Background())
}

func (o PodSpecPatchOutput) ToPodSpecPatchPtrOutputWithContext(ctx context.Context) PodSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSpecPatch) *PodSpecPatch {
		return &v
	}).(PodSpecPatchPtrOutput)
}

// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
func (o PodSpecPatchOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *int { return v.ActiveDeadlineSeconds }).(pulumi.IntPtrOutput)
}

// If specified, the pod's scheduling constraints
func (o PodSpecPatchOutput) Affinity() AffinityPatchPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *AffinityPatch { return v.Affinity }).(AffinityPatchPtrOutput)
}

// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
func (o PodSpecPatchOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
func (o PodSpecPatchOutput) Containers() ContainerPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []ContainerPatch { return v.Containers }).(ContainerPatchArrayOutput)
}

// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
func (o PodSpecPatchOutput) DnsConfig() PodDNSConfigPatchPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *PodDNSConfigPatch { return v.DnsConfig }).(PodDNSConfigPatchPtrOutput)
}

// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
func (o PodSpecPatchOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.DnsPolicy }).(pulumi.StringPtrOutput)
}

// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
func (o PodSpecPatchOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.EnableServiceLinks }).(pulumi.BoolPtrOutput)
}

// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
func (o PodSpecPatchOutput) EphemeralContainers() EphemeralContainerPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []EphemeralContainerPatch { return v.EphemeralContainers }).(EphemeralContainerPatchArrayOutput)
}

// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
func (o PodSpecPatchOutput) HostAliases() HostAliasPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []HostAliasPatch { return v.HostAliases }).(HostAliasPatchArrayOutput)
}

// Use the host's ipc namespace. Optional: Default to false.
func (o PodSpecPatchOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.HostIPC }).(pulumi.BoolPtrOutput)
}

// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
func (o PodSpecPatchOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// Use the host's pid namespace. Optional: Default to false.
func (o PodSpecPatchOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.HostPID }).(pulumi.BoolPtrOutput)
}

// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
func (o PodSpecPatchOutput) HostUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.HostUsers }).(pulumi.BoolPtrOutput)
}

// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
func (o PodSpecPatchOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
func (o PodSpecPatchOutput) ImagePullSecrets() LocalObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []LocalObjectReferencePatch { return v.ImagePullSecrets }).(LocalObjectReferencePatchArrayOutput)
}

// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
func (o PodSpecPatchOutput) InitContainers() ContainerPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []ContainerPatch { return v.InitContainers }).(ContainerPatchArrayOutput)
}

// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
func (o PodSpecPatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o PodSpecPatchOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodSpecPatch) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
//
// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
//
// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
func (o PodSpecPatchOutput) Os() PodOSPatchPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *PodOSPatch { return v.Os }).(PodOSPatchPtrOutput)
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
func (o PodSpecPatchOutput) Overhead() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodSpecPatch) map[string]string { return v.Overhead }).(pulumi.StringMapOutput)
}

// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
func (o PodSpecPatchOutput) PreemptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.PreemptionPolicy }).(pulumi.StringPtrOutput)
}

// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
func (o PodSpecPatchOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
func (o PodSpecPatchOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
func (o PodSpecPatchOutput) ReadinessGates() PodReadinessGatePatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []PodReadinessGatePatch { return v.ReadinessGates }).(PodReadinessGatePatchArrayOutput)
}

// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o PodSpecPatchOutput) ResourceClaims() PodResourceClaimPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []PodResourceClaimPatch { return v.ResourceClaims }).(PodResourceClaimPatchArrayOutput)
}

// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (o PodSpecPatchOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
func (o PodSpecPatchOutput) RuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.RuntimeClassName }).(pulumi.StringPtrOutput)
}

// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
func (o PodSpecPatchOutput) SchedulerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.SchedulerName }).(pulumi.StringPtrOutput)
}

// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
//
// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
func (o PodSpecPatchOutput) SchedulingGates() PodSchedulingGatePatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []PodSchedulingGatePatch { return v.SchedulingGates }).(PodSchedulingGatePatchArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
func (o PodSpecPatchOutput) SecurityContext() PodSecurityContextPatchPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *PodSecurityContextPatch { return v.SecurityContext }).(PodSecurityContextPatchPtrOutput)
}

// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
func (o PodSpecPatchOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (o PodSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
func (o PodSpecPatchOutput) SetHostnameAsFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.SetHostnameAsFQDN }).(pulumi.BoolPtrOutput)
}

// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
func (o PodSpecPatchOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *bool { return v.ShareProcessNamespace }).(pulumi.BoolPtrOutput)
}

// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
func (o PodSpecPatchOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o PodSpecPatchOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodSpecPatch) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// If specified, the pod's tolerations.
func (o PodSpecPatchOutput) Tolerations() TolerationPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []TolerationPatch { return v.Tolerations }).(TolerationPatchArrayOutput)
}

// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
func (o PodSpecPatchOutput) TopologySpreadConstraints() TopologySpreadConstraintPatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []TopologySpreadConstraintPatch { return v.TopologySpreadConstraints }).(TopologySpreadConstraintPatchArrayOutput)
}

// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
func (o PodSpecPatchOutput) Volumes() VolumePatchArrayOutput {
	return o.ApplyT(func(v PodSpecPatch) []VolumePatch { return v.Volumes }).(VolumePatchArrayOutput)
}

type PodSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSpecPatch)(nil)).Elem()
}

func (o PodSpecPatchPtrOutput) ToPodSpecPatchPtrOutput() PodSpecPatchPtrOutput {
	return o
}

func (o PodSpecPatchPtrOutput) ToPodSpecPatchPtrOutputWithContext(ctx context.Context) PodSpecPatchPtrOutput {
	return o
}

func (o PodSpecPatchPtrOutput) Elem() PodSpecPatchOutput {
	return o.ApplyT(func(v *PodSpecPatch) PodSpecPatch {
		if v != nil {
			return *v
		}
		var ret PodSpecPatch
		return ret
	}).(PodSpecPatchOutput)
}

// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
func (o PodSpecPatchPtrOutput) ActiveDeadlineSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.IntPtrOutput)
}

// If specified, the pod's scheduling constraints
func (o PodSpecPatchPtrOutput) Affinity() AffinityPatchPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *AffinityPatch {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(AffinityPatchPtrOutput)
}

// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
func (o PodSpecPatchPtrOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AutomountServiceAccountToken
	}).(pulumi.BoolPtrOutput)
}

// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
func (o PodSpecPatchPtrOutput) Containers() ContainerPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []ContainerPatch {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerPatchArrayOutput)
}

// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
func (o PodSpecPatchPtrOutput) DnsConfig() PodDNSConfigPatchPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *PodDNSConfigPatch {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(PodDNSConfigPatchPtrOutput)
}

// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
func (o PodSpecPatchPtrOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.DnsPolicy
	}).(pulumi.StringPtrOutput)
}

// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
func (o PodSpecPatchPtrOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.EnableServiceLinks
	}).(pulumi.BoolPtrOutput)
}

// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
func (o PodSpecPatchPtrOutput) EphemeralContainers() EphemeralContainerPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []EphemeralContainerPatch {
		if v == nil {
			return nil
		}
		return v.EphemeralContainers
	}).(EphemeralContainerPatchArrayOutput)
}

// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
func (o PodSpecPatchPtrOutput) HostAliases() HostAliasPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []HostAliasPatch {
		if v == nil {
			return nil
		}
		return v.HostAliases
	}).(HostAliasPatchArrayOutput)
}

// Use the host's ipc namespace. Optional: Default to false.
func (o PodSpecPatchPtrOutput) HostIPC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostIPC
	}).(pulumi.BoolPtrOutput)
}

// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
func (o PodSpecPatchPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

// Use the host's pid namespace. Optional: Default to false.
func (o PodSpecPatchPtrOutput) HostPID() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostPID
	}).(pulumi.BoolPtrOutput)
}

// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
func (o PodSpecPatchPtrOutput) HostUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostUsers
	}).(pulumi.BoolPtrOutput)
}

// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
func (o PodSpecPatchPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
func (o PodSpecPatchPtrOutput) ImagePullSecrets() LocalObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(LocalObjectReferencePatchArrayOutput)
}

// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
func (o PodSpecPatchPtrOutput) InitContainers() ContainerPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []ContainerPatch {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(ContainerPatchArrayOutput)
}

// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
func (o PodSpecPatchPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o PodSpecPatchPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
//
// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
//
// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
func (o PodSpecPatchPtrOutput) Os() PodOSPatchPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *PodOSPatch {
		if v == nil {
			return nil
		}
		return v.Os
	}).(PodOSPatchPtrOutput)
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
func (o PodSpecPatchPtrOutput) Overhead() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Overhead
	}).(pulumi.StringMapOutput)
}

// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
func (o PodSpecPatchPtrOutput) PreemptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PreemptionPolicy
	}).(pulumi.StringPtrOutput)
}

// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
func (o PodSpecPatchPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
func (o PodSpecPatchPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
func (o PodSpecPatchPtrOutput) ReadinessGates() PodReadinessGatePatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []PodReadinessGatePatch {
		if v == nil {
			return nil
		}
		return v.ReadinessGates
	}).(PodReadinessGatePatchArrayOutput)
}

// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o PodSpecPatchPtrOutput) ResourceClaims() PodResourceClaimPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []PodResourceClaimPatch {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(PodResourceClaimPatchArrayOutput)
}

// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (o PodSpecPatchPtrOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RestartPolicy
	}).(pulumi.StringPtrOutput)
}

// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
func (o PodSpecPatchPtrOutput) RuntimeClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeClassName
	}).(pulumi.StringPtrOutput)
}

// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
func (o PodSpecPatchPtrOutput) SchedulerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SchedulerName
	}).(pulumi.StringPtrOutput)
}

// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
//
// This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
func (o PodSpecPatchPtrOutput) SchedulingGates() PodSchedulingGatePatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []PodSchedulingGatePatch {
		if v == nil {
			return nil
		}
		return v.SchedulingGates
	}).(PodSchedulingGatePatchArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
func (o PodSpecPatchPtrOutput) SecurityContext() PodSecurityContextPatchPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *PodSecurityContextPatch {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(PodSecurityContextPatchPtrOutput)
}

// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
func (o PodSpecPatchPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (o PodSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
func (o PodSpecPatchPtrOutput) SetHostnameAsFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.SetHostnameAsFQDN
	}).(pulumi.BoolPtrOutput)
}

// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
func (o PodSpecPatchPtrOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ShareProcessNamespace
	}).(pulumi.BoolPtrOutput)
}

// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
func (o PodSpecPatchPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o PodSpecPatchPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// If specified, the pod's tolerations.
func (o PodSpecPatchPtrOutput) Tolerations() TolerationPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []TolerationPatch {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(TolerationPatchArrayOutput)
}

// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
func (o PodSpecPatchPtrOutput) TopologySpreadConstraints() TopologySpreadConstraintPatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []TopologySpreadConstraintPatch {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(TopologySpreadConstraintPatchArrayOutput)
}

// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
func (o PodSpecPatchPtrOutput) Volumes() VolumePatchArrayOutput {
	return o.ApplyT(func(v *PodSpecPatch) []VolumePatch {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumePatchArrayOutput)
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatus struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []PodCondition `pulumi:"conditions"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []ContainerStatus `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses []ContainerStatus `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []ContainerStatus `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs []PodIP `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass *string `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime *string `pulumi:"startTime"`
}

// PodStatusInput is an input type that accepts PodStatusArgs and PodStatusOutput values.
// You can construct a concrete instance of `PodStatusInput` via:
//
//	PodStatusArgs{...}
type PodStatusInput interface {
	pulumi.Input

	ToPodStatusOutput() PodStatusOutput
	ToPodStatusOutputWithContext(context.Context) PodStatusOutput
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatusArgs struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions PodConditionArrayInput `pulumi:"conditions"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses ContainerStatusArrayInput `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses ContainerStatusArrayInput `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses ContainerStatusArrayInput `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName pulumi.StringPtrInput `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP pulumi.StringPtrInput `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs PodIPArrayInput `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass pulumi.StringPtrInput `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (PodStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodStatus)(nil)).Elem()
}

func (i PodStatusArgs) ToPodStatusOutput() PodStatusOutput {
	return i.ToPodStatusOutputWithContext(context.Background())
}

func (i PodStatusArgs) ToPodStatusOutputWithContext(ctx context.Context) PodStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusOutput)
}

func (i PodStatusArgs) ToPodStatusPtrOutput() PodStatusPtrOutput {
	return i.ToPodStatusPtrOutputWithContext(context.Background())
}

func (i PodStatusArgs) ToPodStatusPtrOutputWithContext(ctx context.Context) PodStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusOutput).ToPodStatusPtrOutputWithContext(ctx)
}

// PodStatusPtrInput is an input type that accepts PodStatusArgs, PodStatusPtr and PodStatusPtrOutput values.
// You can construct a concrete instance of `PodStatusPtrInput` via:
//
//	        PodStatusArgs{...}
//
//	or:
//
//	        nil
type PodStatusPtrInput interface {
	pulumi.Input

	ToPodStatusPtrOutput() PodStatusPtrOutput
	ToPodStatusPtrOutputWithContext(context.Context) PodStatusPtrOutput
}

type podStatusPtrType PodStatusArgs

func PodStatusPtr(v *PodStatusArgs) PodStatusPtrInput {
	return (*podStatusPtrType)(v)
}

func (*podStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodStatus)(nil)).Elem()
}

func (i *podStatusPtrType) ToPodStatusPtrOutput() PodStatusPtrOutput {
	return i.ToPodStatusPtrOutputWithContext(context.Background())
}

func (i *podStatusPtrType) ToPodStatusPtrOutputWithContext(ctx context.Context) PodStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusPtrOutput)
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatusOutput struct{ *pulumi.OutputState }

func (PodStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodStatus)(nil)).Elem()
}

func (o PodStatusOutput) ToPodStatusOutput() PodStatusOutput {
	return o
}

func (o PodStatusOutput) ToPodStatusOutputWithContext(ctx context.Context) PodStatusOutput {
	return o
}

func (o PodStatusOutput) ToPodStatusPtrOutput() PodStatusPtrOutput {
	return o.ToPodStatusPtrOutputWithContext(context.Background())
}

func (o PodStatusOutput) ToPodStatusPtrOutputWithContext(ctx context.Context) PodStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodStatus) *PodStatus {
		return &v
	}).(PodStatusPtrOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodStatusOutput) Conditions() PodConditionArrayOutput {
	return o.ApplyT(func(v PodStatus) []PodCondition { return v.Conditions }).(PodConditionArrayOutput)
}

// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusOutput) ContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v PodStatus) []ContainerStatus { return v.ContainerStatuses }).(ContainerStatusArrayOutput)
}

// Status for any ephemeral containers that have run in this pod.
func (o PodStatusOutput) EphemeralContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v PodStatus) []ContainerStatus { return v.EphemeralContainerStatuses }).(ContainerStatusArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o PodStatusOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusOutput) InitContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v PodStatus) []ContainerStatus { return v.InitContainerStatuses }).(ContainerStatusArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o PodStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o PodStatusOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.NominatedNodeName }).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//
// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o PodStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o PodStatusOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.PodIP }).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o PodStatusOutput) PodIPs() PodIPArrayOutput {
	return o.ApplyT(func(v PodStatus) []PodIP { return v.PodIPs }).(PodIPArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o PodStatusOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.QosClass }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o PodStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o PodStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type PodStatusPtrOutput struct{ *pulumi.OutputState }

func (PodStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodStatus)(nil)).Elem()
}

func (o PodStatusPtrOutput) ToPodStatusPtrOutput() PodStatusPtrOutput {
	return o
}

func (o PodStatusPtrOutput) ToPodStatusPtrOutputWithContext(ctx context.Context) PodStatusPtrOutput {
	return o
}

func (o PodStatusPtrOutput) Elem() PodStatusOutput {
	return o.ApplyT(func(v *PodStatus) PodStatus {
		if v != nil {
			return *v
		}
		var ret PodStatus
		return ret
	}).(PodStatusOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodStatusPtrOutput) Conditions() PodConditionArrayOutput {
	return o.ApplyT(func(v *PodStatus) []PodCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PodConditionArrayOutput)
}

// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPtrOutput) ContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v *PodStatus) []ContainerStatus {
		if v == nil {
			return nil
		}
		return v.ContainerStatuses
	}).(ContainerStatusArrayOutput)
}

// Status for any ephemeral containers that have run in this pod.
func (o PodStatusPtrOutput) EphemeralContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v *PodStatus) []ContainerStatus {
		if v == nil {
			return nil
		}
		return v.EphemeralContainerStatuses
	}).(ContainerStatusArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o PodStatusPtrOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.HostIP
	}).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPtrOutput) InitContainerStatuses() ContainerStatusArrayOutput {
	return o.ApplyT(func(v *PodStatus) []ContainerStatus {
		if v == nil {
			return nil
		}
		return v.InitContainerStatuses
	}).(ContainerStatusArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o PodStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o PodStatusPtrOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.NominatedNodeName
	}).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//
// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o PodStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o PodStatusPtrOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.PodIP
	}).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o PodStatusPtrOutput) PodIPs() PodIPArrayOutput {
	return o.ApplyT(func(v *PodStatus) []PodIP {
		if v == nil {
			return nil
		}
		return v.PodIPs
	}).(PodIPArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o PodStatusPtrOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.QosClass
	}).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o PodStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o PodStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatusPatch struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []PodConditionPatch `pulumi:"conditions"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []ContainerStatusPatch `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses []ContainerStatusPatch `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []ContainerStatusPatch `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs []PodIPPatch `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass *string `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime *string `pulumi:"startTime"`
}

// PodStatusPatchInput is an input type that accepts PodStatusPatchArgs and PodStatusPatchOutput values.
// You can construct a concrete instance of `PodStatusPatchInput` via:
//
//	PodStatusPatchArgs{...}
type PodStatusPatchInput interface {
	pulumi.Input

	ToPodStatusPatchOutput() PodStatusPatchOutput
	ToPodStatusPatchOutputWithContext(context.Context) PodStatusPatchOutput
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatusPatchArgs struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions PodConditionPatchArrayInput `pulumi:"conditions"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses ContainerStatusPatchArrayInput `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses ContainerStatusPatchArrayInput `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses ContainerStatusPatchArrayInput `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName pulumi.StringPtrInput `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP pulumi.StringPtrInput `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs PodIPPatchArrayInput `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass pulumi.StringPtrInput `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (PodStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodStatusPatch)(nil)).Elem()
}

func (i PodStatusPatchArgs) ToPodStatusPatchOutput() PodStatusPatchOutput {
	return i.ToPodStatusPatchOutputWithContext(context.Background())
}

func (i PodStatusPatchArgs) ToPodStatusPatchOutputWithContext(ctx context.Context) PodStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusPatchOutput)
}

func (i PodStatusPatchArgs) ToPodStatusPatchPtrOutput() PodStatusPatchPtrOutput {
	return i.ToPodStatusPatchPtrOutputWithContext(context.Background())
}

func (i PodStatusPatchArgs) ToPodStatusPatchPtrOutputWithContext(ctx context.Context) PodStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusPatchOutput).ToPodStatusPatchPtrOutputWithContext(ctx)
}

// PodStatusPatchPtrInput is an input type that accepts PodStatusPatchArgs, PodStatusPatchPtr and PodStatusPatchPtrOutput values.
// You can construct a concrete instance of `PodStatusPatchPtrInput` via:
//
//	        PodStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PodStatusPatchPtrInput interface {
	pulumi.Input

	ToPodStatusPatchPtrOutput() PodStatusPatchPtrOutput
	ToPodStatusPatchPtrOutputWithContext(context.Context) PodStatusPatchPtrOutput
}

type podStatusPatchPtrType PodStatusPatchArgs

func PodStatusPatchPtr(v *PodStatusPatchArgs) PodStatusPatchPtrInput {
	return (*podStatusPatchPtrType)(v)
}

func (*podStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodStatusPatch)(nil)).Elem()
}

func (i *podStatusPatchPtrType) ToPodStatusPatchPtrOutput() PodStatusPatchPtrOutput {
	return i.ToPodStatusPatchPtrOutputWithContext(context.Background())
}

func (i *podStatusPatchPtrType) ToPodStatusPatchPtrOutputWithContext(ctx context.Context) PodStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodStatusPatchPtrOutput)
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type PodStatusPatchOutput struct{ *pulumi.OutputState }

func (PodStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodStatusPatch)(nil)).Elem()
}

func (o PodStatusPatchOutput) ToPodStatusPatchOutput() PodStatusPatchOutput {
	return o
}

func (o PodStatusPatchOutput) ToPodStatusPatchOutputWithContext(ctx context.Context) PodStatusPatchOutput {
	return o
}

func (o PodStatusPatchOutput) ToPodStatusPatchPtrOutput() PodStatusPatchPtrOutput {
	return o.ToPodStatusPatchPtrOutputWithContext(context.Background())
}

func (o PodStatusPatchOutput) ToPodStatusPatchPtrOutputWithContext(ctx context.Context) PodStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodStatusPatch) *PodStatusPatch {
		return &v
	}).(PodStatusPatchPtrOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodStatusPatchOutput) Conditions() PodConditionPatchArrayOutput {
	return o.ApplyT(func(v PodStatusPatch) []PodConditionPatch { return v.Conditions }).(PodConditionPatchArrayOutput)
}

// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPatchOutput) ContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v PodStatusPatch) []ContainerStatusPatch { return v.ContainerStatuses }).(ContainerStatusPatchArrayOutput)
}

// Status for any ephemeral containers that have run in this pod.
func (o PodStatusPatchOutput) EphemeralContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v PodStatusPatch) []ContainerStatusPatch { return v.EphemeralContainerStatuses }).(ContainerStatusPatchArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o PodStatusPatchOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPatchOutput) InitContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v PodStatusPatch) []ContainerStatusPatch { return v.InitContainerStatuses }).(ContainerStatusPatchArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o PodStatusPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o PodStatusPatchOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.NominatedNodeName }).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//
// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o PodStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o PodStatusPatchOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.PodIP }).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o PodStatusPatchOutput) PodIPs() PodIPPatchArrayOutput {
	return o.ApplyT(func(v PodStatusPatch) []PodIPPatch { return v.PodIPs }).(PodIPPatchArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o PodStatusPatchOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.QosClass }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o PodStatusPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o PodStatusPatchOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodStatusPatch) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type PodStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PodStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodStatusPatch)(nil)).Elem()
}

func (o PodStatusPatchPtrOutput) ToPodStatusPatchPtrOutput() PodStatusPatchPtrOutput {
	return o
}

func (o PodStatusPatchPtrOutput) ToPodStatusPatchPtrOutputWithContext(ctx context.Context) PodStatusPatchPtrOutput {
	return o
}

func (o PodStatusPatchPtrOutput) Elem() PodStatusPatchOutput {
	return o.ApplyT(func(v *PodStatusPatch) PodStatusPatch {
		if v != nil {
			return *v
		}
		var ret PodStatusPatch
		return ret
	}).(PodStatusPatchOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o PodStatusPatchPtrOutput) Conditions() PodConditionPatchArrayOutput {
	return o.ApplyT(func(v *PodStatusPatch) []PodConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PodConditionPatchArrayOutput)
}

// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPatchPtrOutput) ContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v *PodStatusPatch) []ContainerStatusPatch {
		if v == nil {
			return nil
		}
		return v.ContainerStatuses
	}).(ContainerStatusPatchArrayOutput)
}

// Status for any ephemeral containers that have run in this pod.
func (o PodStatusPatchPtrOutput) EphemeralContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v *PodStatusPatch) []ContainerStatusPatch {
		if v == nil {
			return nil
		}
		return v.EphemeralContainerStatuses
	}).(ContainerStatusPatchArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o PodStatusPatchPtrOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostIP
	}).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o PodStatusPatchPtrOutput) InitContainerStatuses() ContainerStatusPatchArrayOutput {
	return o.ApplyT(func(v *PodStatusPatch) []ContainerStatusPatch {
		if v == nil {
			return nil
		}
		return v.InitContainerStatuses
	}).(ContainerStatusPatchArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o PodStatusPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o PodStatusPatchPtrOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.NominatedNodeName
	}).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//
// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o PodStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o PodStatusPatchPtrOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodIP
	}).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o PodStatusPatchPtrOutput) PodIPs() PodIPPatchArrayOutput {
	return o.ApplyT(func(v *PodStatusPatch) []PodIPPatch {
		if v == nil {
			return nil
		}
		return v.PodIPs
	}).(PodIPPatchArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o PodStatusPatchPtrOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.QosClass
	}).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o PodStatusPatchPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o PodStatusPatchPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplateType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template *PodTemplateSpec `pulumi:"template"`
}

// PodTemplateTypeInput is an input type that accepts PodTemplateTypeArgs and PodTemplateTypeOutput values.
// You can construct a concrete instance of `PodTemplateTypeInput` via:
//
//	PodTemplateTypeArgs{...}
type PodTemplateTypeInput interface {
	pulumi.Input

	ToPodTemplateTypeOutput() PodTemplateTypeOutput
	ToPodTemplateTypeOutputWithContext(context.Context) PodTemplateTypeOutput
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplateTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template PodTemplateSpecPtrInput `pulumi:"template"`
}

func (PodTemplateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateType)(nil)).Elem()
}

func (i PodTemplateTypeArgs) ToPodTemplateTypeOutput() PodTemplateTypeOutput {
	return i.ToPodTemplateTypeOutputWithContext(context.Background())
}

func (i PodTemplateTypeArgs) ToPodTemplateTypeOutputWithContext(ctx context.Context) PodTemplateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateTypeOutput)
}

// PodTemplateTypeArrayInput is an input type that accepts PodTemplateTypeArray and PodTemplateTypeArrayOutput values.
// You can construct a concrete instance of `PodTemplateTypeArrayInput` via:
//
//	PodTemplateTypeArray{ PodTemplateTypeArgs{...} }
type PodTemplateTypeArrayInput interface {
	pulumi.Input

	ToPodTemplateTypeArrayOutput() PodTemplateTypeArrayOutput
	ToPodTemplateTypeArrayOutputWithContext(context.Context) PodTemplateTypeArrayOutput
}

type PodTemplateTypeArray []PodTemplateTypeInput

func (PodTemplateTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodTemplateType)(nil)).Elem()
}

func (i PodTemplateTypeArray) ToPodTemplateTypeArrayOutput() PodTemplateTypeArrayOutput {
	return i.ToPodTemplateTypeArrayOutputWithContext(context.Background())
}

func (i PodTemplateTypeArray) ToPodTemplateTypeArrayOutputWithContext(ctx context.Context) PodTemplateTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateTypeArrayOutput)
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplateTypeOutput struct{ *pulumi.OutputState }

func (PodTemplateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateType)(nil)).Elem()
}

func (o PodTemplateTypeOutput) ToPodTemplateTypeOutput() PodTemplateTypeOutput {
	return o
}

func (o PodTemplateTypeOutput) ToPodTemplateTypeOutputWithContext(ctx context.Context) PodTemplateTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodTemplateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodTemplateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodTemplateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplateTypeOutput) Template() PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v PodTemplateType) *PodTemplateSpec { return v.Template }).(PodTemplateSpecPtrOutput)
}

type PodTemplateTypeArrayOutput struct{ *pulumi.OutputState }

func (PodTemplateTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodTemplateType)(nil)).Elem()
}

func (o PodTemplateTypeArrayOutput) ToPodTemplateTypeArrayOutput() PodTemplateTypeArrayOutput {
	return o
}

func (o PodTemplateTypeArrayOutput) ToPodTemplateTypeArrayOutputWithContext(ctx context.Context) PodTemplateTypeArrayOutput {
	return o
}

func (o PodTemplateTypeArrayOutput) Index(i pulumi.IntInput) PodTemplateTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodTemplateType {
		return vs[0].([]PodTemplateType)[vs[1].(int)]
	}).(PodTemplateTypeOutput)
}

// PodTemplateList is a list of PodTemplates.
type PodTemplateListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of pod templates
	Items []PodTemplateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodTemplateListTypeInput is an input type that accepts PodTemplateListTypeArgs and PodTemplateListTypeOutput values.
// You can construct a concrete instance of `PodTemplateListTypeInput` via:
//
//	PodTemplateListTypeArgs{...}
type PodTemplateListTypeInput interface {
	pulumi.Input

	ToPodTemplateListTypeOutput() PodTemplateListTypeOutput
	ToPodTemplateListTypeOutputWithContext(context.Context) PodTemplateListTypeOutput
}

// PodTemplateList is a list of PodTemplates.
type PodTemplateListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of pod templates
	Items PodTemplateTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodTemplateListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateListType)(nil)).Elem()
}

func (i PodTemplateListTypeArgs) ToPodTemplateListTypeOutput() PodTemplateListTypeOutput {
	return i.ToPodTemplateListTypeOutputWithContext(context.Background())
}

func (i PodTemplateListTypeArgs) ToPodTemplateListTypeOutputWithContext(ctx context.Context) PodTemplateListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateListTypeOutput)
}

// PodTemplateList is a list of PodTemplates.
type PodTemplateListTypeOutput struct{ *pulumi.OutputState }

func (PodTemplateListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateListType)(nil)).Elem()
}

func (o PodTemplateListTypeOutput) ToPodTemplateListTypeOutput() PodTemplateListTypeOutput {
	return o
}

func (o PodTemplateListTypeOutput) ToPodTemplateListTypeOutputWithContext(ctx context.Context) PodTemplateListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodTemplateListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplateListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of pod templates
func (o PodTemplateListTypeOutput) Items() PodTemplateTypeArrayOutput {
	return o.ApplyT(func(v PodTemplateListType) []PodTemplateType { return v.Items }).(PodTemplateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodTemplateListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplateListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodTemplateListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodTemplateListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplatePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template *PodTemplateSpecPatch `pulumi:"template"`
}

// PodTemplatePatchTypeInput is an input type that accepts PodTemplatePatchTypeArgs and PodTemplatePatchTypeOutput values.
// You can construct a concrete instance of `PodTemplatePatchTypeInput` via:
//
//	PodTemplatePatchTypeArgs{...}
type PodTemplatePatchTypeInput interface {
	pulumi.Input

	ToPodTemplatePatchTypeOutput() PodTemplatePatchTypeOutput
	ToPodTemplatePatchTypeOutputWithContext(context.Context) PodTemplatePatchTypeOutput
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplatePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Template PodTemplateSpecPatchPtrInput `pulumi:"template"`
}

func (PodTemplatePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplatePatchType)(nil)).Elem()
}

func (i PodTemplatePatchTypeArgs) ToPodTemplatePatchTypeOutput() PodTemplatePatchTypeOutput {
	return i.ToPodTemplatePatchTypeOutputWithContext(context.Background())
}

func (i PodTemplatePatchTypeArgs) ToPodTemplatePatchTypeOutputWithContext(ctx context.Context) PodTemplatePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplatePatchTypeOutput)
}

// PodTemplate describes a template for creating copies of a predefined pod.
type PodTemplatePatchTypeOutput struct{ *pulumi.OutputState }

func (PodTemplatePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplatePatchType)(nil)).Elem()
}

func (o PodTemplatePatchTypeOutput) ToPodTemplatePatchTypeOutput() PodTemplatePatchTypeOutput {
	return o
}

func (o PodTemplatePatchTypeOutput) ToPodTemplatePatchTypeOutputWithContext(ctx context.Context) PodTemplatePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodTemplatePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplatePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodTemplatePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodTemplatePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplatePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PodTemplatePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplatePatchTypeOutput) Template() PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v PodTemplatePatchType) *PodTemplateSpecPatch { return v.Template }).(PodTemplateSpecPatchPtrOutput)
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpec struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PodSpec `pulumi:"spec"`
}

// PodTemplateSpecInput is an input type that accepts PodTemplateSpecArgs and PodTemplateSpecOutput values.
// You can construct a concrete instance of `PodTemplateSpecInput` via:
//
//	PodTemplateSpecArgs{...}
type PodTemplateSpecInput interface {
	pulumi.Input

	ToPodTemplateSpecOutput() PodTemplateSpecOutput
	ToPodTemplateSpecOutputWithContext(context.Context) PodTemplateSpecOutput
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpecArgs struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPtrInput `pulumi:"spec"`
}

func (PodTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateSpec)(nil)).Elem()
}

func (i PodTemplateSpecArgs) ToPodTemplateSpecOutput() PodTemplateSpecOutput {
	return i.ToPodTemplateSpecOutputWithContext(context.Background())
}

func (i PodTemplateSpecArgs) ToPodTemplateSpecOutputWithContext(ctx context.Context) PodTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecOutput)
}

func (i PodTemplateSpecArgs) ToPodTemplateSpecPtrOutput() PodTemplateSpecPtrOutput {
	return i.ToPodTemplateSpecPtrOutputWithContext(context.Background())
}

func (i PodTemplateSpecArgs) ToPodTemplateSpecPtrOutputWithContext(ctx context.Context) PodTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecOutput).ToPodTemplateSpecPtrOutputWithContext(ctx)
}

// PodTemplateSpecPtrInput is an input type that accepts PodTemplateSpecArgs, PodTemplateSpecPtr and PodTemplateSpecPtrOutput values.
// You can construct a concrete instance of `PodTemplateSpecPtrInput` via:
//
//	        PodTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type PodTemplateSpecPtrInput interface {
	pulumi.Input

	ToPodTemplateSpecPtrOutput() PodTemplateSpecPtrOutput
	ToPodTemplateSpecPtrOutputWithContext(context.Context) PodTemplateSpecPtrOutput
}

type podTemplateSpecPtrType PodTemplateSpecArgs

func PodTemplateSpecPtr(v *PodTemplateSpecArgs) PodTemplateSpecPtrInput {
	return (*podTemplateSpecPtrType)(v)
}

func (*podTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodTemplateSpec)(nil)).Elem()
}

func (i *podTemplateSpecPtrType) ToPodTemplateSpecPtrOutput() PodTemplateSpecPtrOutput {
	return i.ToPodTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *podTemplateSpecPtrType) ToPodTemplateSpecPtrOutputWithContext(ctx context.Context) PodTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecPtrOutput)
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpecOutput struct{ *pulumi.OutputState }

func (PodTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateSpec)(nil)).Elem()
}

func (o PodTemplateSpecOutput) ToPodTemplateSpecOutput() PodTemplateSpecOutput {
	return o
}

func (o PodTemplateSpecOutput) ToPodTemplateSpecOutputWithContext(ctx context.Context) PodTemplateSpecOutput {
	return o
}

func (o PodTemplateSpecOutput) ToPodTemplateSpecPtrOutput() PodTemplateSpecPtrOutput {
	return o.ToPodTemplateSpecPtrOutputWithContext(context.Background())
}

func (o PodTemplateSpecOutput) ToPodTemplateSpecPtrOutputWithContext(ctx context.Context) PodTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodTemplateSpec) *PodTemplateSpec {
		return &v
	}).(PodTemplateSpecPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplateSpecOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodTemplateSpec) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplateSpecOutput) Spec() PodSpecPtrOutput {
	return o.ApplyT(func(v PodTemplateSpec) *PodSpec { return v.Spec }).(PodSpecPtrOutput)
}

type PodTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (PodTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodTemplateSpec)(nil)).Elem()
}

func (o PodTemplateSpecPtrOutput) ToPodTemplateSpecPtrOutput() PodTemplateSpecPtrOutput {
	return o
}

func (o PodTemplateSpecPtrOutput) ToPodTemplateSpecPtrOutputWithContext(ctx context.Context) PodTemplateSpecPtrOutput {
	return o
}

func (o PodTemplateSpecPtrOutput) Elem() PodTemplateSpecOutput {
	return o.ApplyT(func(v *PodTemplateSpec) PodTemplateSpec {
		if v != nil {
			return *v
		}
		var ret PodTemplateSpec
		return ret
	}).(PodTemplateSpecOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplateSpecPtrOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *PodTemplateSpec) *metav1.ObjectMeta {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplateSpecPtrOutput) Spec() PodSpecPtrOutput {
	return o.ApplyT(func(v *PodTemplateSpec) *PodSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(PodSpecPtrOutput)
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpecPatch struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PodSpecPatch `pulumi:"spec"`
}

// PodTemplateSpecPatchInput is an input type that accepts PodTemplateSpecPatchArgs and PodTemplateSpecPatchOutput values.
// You can construct a concrete instance of `PodTemplateSpecPatchInput` via:
//
//	PodTemplateSpecPatchArgs{...}
type PodTemplateSpecPatchInput interface {
	pulumi.Input

	ToPodTemplateSpecPatchOutput() PodTemplateSpecPatchOutput
	ToPodTemplateSpecPatchOutputWithContext(context.Context) PodTemplateSpecPatchOutput
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpecPatchArgs struct {
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PodSpecPatchPtrInput `pulumi:"spec"`
}

func (PodTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateSpecPatch)(nil)).Elem()
}

func (i PodTemplateSpecPatchArgs) ToPodTemplateSpecPatchOutput() PodTemplateSpecPatchOutput {
	return i.ToPodTemplateSpecPatchOutputWithContext(context.Background())
}

func (i PodTemplateSpecPatchArgs) ToPodTemplateSpecPatchOutputWithContext(ctx context.Context) PodTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecPatchOutput)
}

func (i PodTemplateSpecPatchArgs) ToPodTemplateSpecPatchPtrOutput() PodTemplateSpecPatchPtrOutput {
	return i.ToPodTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i PodTemplateSpecPatchArgs) ToPodTemplateSpecPatchPtrOutputWithContext(ctx context.Context) PodTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecPatchOutput).ToPodTemplateSpecPatchPtrOutputWithContext(ctx)
}

// PodTemplateSpecPatchPtrInput is an input type that accepts PodTemplateSpecPatchArgs, PodTemplateSpecPatchPtr and PodTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `PodTemplateSpecPatchPtrInput` via:
//
//	        PodTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PodTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToPodTemplateSpecPatchPtrOutput() PodTemplateSpecPatchPtrOutput
	ToPodTemplateSpecPatchPtrOutputWithContext(context.Context) PodTemplateSpecPatchPtrOutput
}

type podTemplateSpecPatchPtrType PodTemplateSpecPatchArgs

func PodTemplateSpecPatchPtr(v *PodTemplateSpecPatchArgs) PodTemplateSpecPatchPtrInput {
	return (*podTemplateSpecPatchPtrType)(v)
}

func (*podTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodTemplateSpecPatch)(nil)).Elem()
}

func (i *podTemplateSpecPatchPtrType) ToPodTemplateSpecPatchPtrOutput() PodTemplateSpecPatchPtrOutput {
	return i.ToPodTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *podTemplateSpecPatchPtrType) ToPodTemplateSpecPatchPtrOutputWithContext(ctx context.Context) PodTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodTemplateSpecPatchPtrOutput)
}

// PodTemplateSpec describes the data a pod should have when created from a template
type PodTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (PodTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodTemplateSpecPatch)(nil)).Elem()
}

func (o PodTemplateSpecPatchOutput) ToPodTemplateSpecPatchOutput() PodTemplateSpecPatchOutput {
	return o
}

func (o PodTemplateSpecPatchOutput) ToPodTemplateSpecPatchOutputWithContext(ctx context.Context) PodTemplateSpecPatchOutput {
	return o
}

func (o PodTemplateSpecPatchOutput) ToPodTemplateSpecPatchPtrOutput() PodTemplateSpecPatchPtrOutput {
	return o.ToPodTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o PodTemplateSpecPatchOutput) ToPodTemplateSpecPatchPtrOutputWithContext(ctx context.Context) PodTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodTemplateSpecPatch) *PodTemplateSpecPatch {
		return &v
	}).(PodTemplateSpecPatchPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplateSpecPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PodTemplateSpecPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplateSpecPatchOutput) Spec() PodSpecPatchPtrOutput {
	return o.ApplyT(func(v PodTemplateSpecPatch) *PodSpecPatch { return v.Spec }).(PodSpecPatchPtrOutput)
}

type PodTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PodTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodTemplateSpecPatch)(nil)).Elem()
}

func (o PodTemplateSpecPatchPtrOutput) ToPodTemplateSpecPatchPtrOutput() PodTemplateSpecPatchPtrOutput {
	return o
}

func (o PodTemplateSpecPatchPtrOutput) ToPodTemplateSpecPatchPtrOutputWithContext(ctx context.Context) PodTemplateSpecPatchPtrOutput {
	return o
}

func (o PodTemplateSpecPatchPtrOutput) Elem() PodTemplateSpecPatchOutput {
	return o.ApplyT(func(v *PodTemplateSpecPatch) PodTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret PodTemplateSpecPatch
		return ret
	}).(PodTemplateSpecPatchOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodTemplateSpecPatchPtrOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PodTemplateSpecPatch) *metav1.ObjectMetaPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodTemplateSpecPatchPtrOutput) Spec() PodSpecPatchPtrOutput {
	return o.ApplyT(func(v *PodTemplateSpecPatch) *PodSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(PodSpecPatchPtrOutput)
}

type PortStatus struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `pulumi:"error"`
	// Port is the port number of the service port of which status is recorded here
	Port int `pulumi:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `pulumi:"protocol"`
}

// PortStatusInput is an input type that accepts PortStatusArgs and PortStatusOutput values.
// You can construct a concrete instance of `PortStatusInput` via:
//
//	PortStatusArgs{...}
type PortStatusInput interface {
	pulumi.Input

	ToPortStatusOutput() PortStatusOutput
	ToPortStatusOutputWithContext(context.Context) PortStatusOutput
}

type PortStatusArgs struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Port is the port number of the service port of which status is recorded here
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (PortStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortStatus)(nil)).Elem()
}

func (i PortStatusArgs) ToPortStatusOutput() PortStatusOutput {
	return i.ToPortStatusOutputWithContext(context.Background())
}

func (i PortStatusArgs) ToPortStatusOutputWithContext(ctx context.Context) PortStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortStatusOutput)
}

// PortStatusArrayInput is an input type that accepts PortStatusArray and PortStatusArrayOutput values.
// You can construct a concrete instance of `PortStatusArrayInput` via:
//
//	PortStatusArray{ PortStatusArgs{...} }
type PortStatusArrayInput interface {
	pulumi.Input

	ToPortStatusArrayOutput() PortStatusArrayOutput
	ToPortStatusArrayOutputWithContext(context.Context) PortStatusArrayOutput
}

type PortStatusArray []PortStatusInput

func (PortStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortStatus)(nil)).Elem()
}

func (i PortStatusArray) ToPortStatusArrayOutput() PortStatusArrayOutput {
	return i.ToPortStatusArrayOutputWithContext(context.Background())
}

func (i PortStatusArray) ToPortStatusArrayOutputWithContext(ctx context.Context) PortStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortStatusArrayOutput)
}

type PortStatusOutput struct{ *pulumi.OutputState }

func (PortStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortStatus)(nil)).Elem()
}

func (o PortStatusOutput) ToPortStatusOutput() PortStatusOutput {
	return o
}

func (o PortStatusOutput) ToPortStatusOutputWithContext(ctx context.Context) PortStatusOutput {
	return o
}

// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
//
//	CamelCase names
//   - cloud provider specific error values must have names that comply with the
//     format foo.example.com/CamelCase.
func (o PortStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Port is the port number of the service port of which status is recorded here
func (o PortStatusOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PortStatus) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
func (o PortStatusOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v PortStatus) string { return v.Protocol }).(pulumi.StringOutput)
}

type PortStatusArrayOutput struct{ *pulumi.OutputState }

func (PortStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortStatus)(nil)).Elem()
}

func (o PortStatusArrayOutput) ToPortStatusArrayOutput() PortStatusArrayOutput {
	return o
}

func (o PortStatusArrayOutput) ToPortStatusArrayOutputWithContext(ctx context.Context) PortStatusArrayOutput {
	return o
}

func (o PortStatusArrayOutput) Index(i pulumi.IntInput) PortStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortStatus {
		return vs[0].([]PortStatus)[vs[1].(int)]
	}).(PortStatusOutput)
}

type PortStatusPatch struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `pulumi:"error"`
	// Port is the port number of the service port of which status is recorded here
	Port *int `pulumi:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol *string `pulumi:"protocol"`
}

// PortStatusPatchInput is an input type that accepts PortStatusPatchArgs and PortStatusPatchOutput values.
// You can construct a concrete instance of `PortStatusPatchInput` via:
//
//	PortStatusPatchArgs{...}
type PortStatusPatchInput interface {
	pulumi.Input

	ToPortStatusPatchOutput() PortStatusPatchOutput
	ToPortStatusPatchOutputWithContext(context.Context) PortStatusPatchOutput
}

type PortStatusPatchArgs struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Port is the port number of the service port of which status is recorded here
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortStatusPatch)(nil)).Elem()
}

func (i PortStatusPatchArgs) ToPortStatusPatchOutput() PortStatusPatchOutput {
	return i.ToPortStatusPatchOutputWithContext(context.Background())
}

func (i PortStatusPatchArgs) ToPortStatusPatchOutputWithContext(ctx context.Context) PortStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortStatusPatchOutput)
}

// PortStatusPatchArrayInput is an input type that accepts PortStatusPatchArray and PortStatusPatchArrayOutput values.
// You can construct a concrete instance of `PortStatusPatchArrayInput` via:
//
//	PortStatusPatchArray{ PortStatusPatchArgs{...} }
type PortStatusPatchArrayInput interface {
	pulumi.Input

	ToPortStatusPatchArrayOutput() PortStatusPatchArrayOutput
	ToPortStatusPatchArrayOutputWithContext(context.Context) PortStatusPatchArrayOutput
}

type PortStatusPatchArray []PortStatusPatchInput

func (PortStatusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortStatusPatch)(nil)).Elem()
}

func (i PortStatusPatchArray) ToPortStatusPatchArrayOutput() PortStatusPatchArrayOutput {
	return i.ToPortStatusPatchArrayOutputWithContext(context.Background())
}

func (i PortStatusPatchArray) ToPortStatusPatchArrayOutputWithContext(ctx context.Context) PortStatusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortStatusPatchArrayOutput)
}

type PortStatusPatchOutput struct{ *pulumi.OutputState }

func (PortStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortStatusPatch)(nil)).Elem()
}

func (o PortStatusPatchOutput) ToPortStatusPatchOutput() PortStatusPatchOutput {
	return o
}

func (o PortStatusPatchOutput) ToPortStatusPatchOutputWithContext(ctx context.Context) PortStatusPatchOutput {
	return o
}

// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
//
//	CamelCase names
//   - cloud provider specific error values must have names that comply with the
//     format foo.example.com/CamelCase.
func (o PortStatusPatchOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortStatusPatch) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Port is the port number of the service port of which status is recorded here
func (o PortStatusPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortStatusPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
func (o PortStatusPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortStatusPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortStatusPatchArrayOutput struct{ *pulumi.OutputState }

func (PortStatusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortStatusPatch)(nil)).Elem()
}

func (o PortStatusPatchArrayOutput) ToPortStatusPatchArrayOutput() PortStatusPatchArrayOutput {
	return o
}

func (o PortStatusPatchArrayOutput) ToPortStatusPatchArrayOutputWithContext(ctx context.Context) PortStatusPatchArrayOutput {
	return o
}

func (o PortStatusPatchArrayOutput) Index(i pulumi.IntInput) PortStatusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortStatusPatch {
		return vs[0].([]PortStatusPatch)[vs[1].(int)]
	}).(PortStatusPatchOutput)
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSource struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID string `pulumi:"volumeID"`
}

// PortworxVolumeSourceInput is an input type that accepts PortworxVolumeSourceArgs and PortworxVolumeSourceOutput values.
// You can construct a concrete instance of `PortworxVolumeSourceInput` via:
//
//	PortworxVolumeSourceArgs{...}
type PortworxVolumeSourceInput interface {
	pulumi.Input

	ToPortworxVolumeSourceOutput() PortworxVolumeSourceOutput
	ToPortworxVolumeSourceOutputWithContext(context.Context) PortworxVolumeSourceOutput
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSourceArgs struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (PortworxVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortworxVolumeSource)(nil)).Elem()
}

func (i PortworxVolumeSourceArgs) ToPortworxVolumeSourceOutput() PortworxVolumeSourceOutput {
	return i.ToPortworxVolumeSourceOutputWithContext(context.Background())
}

func (i PortworxVolumeSourceArgs) ToPortworxVolumeSourceOutputWithContext(ctx context.Context) PortworxVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourceOutput)
}

func (i PortworxVolumeSourceArgs) ToPortworxVolumeSourcePtrOutput() PortworxVolumeSourcePtrOutput {
	return i.ToPortworxVolumeSourcePtrOutputWithContext(context.Background())
}

func (i PortworxVolumeSourceArgs) ToPortworxVolumeSourcePtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourceOutput).ToPortworxVolumeSourcePtrOutputWithContext(ctx)
}

// PortworxVolumeSourcePtrInput is an input type that accepts PortworxVolumeSourceArgs, PortworxVolumeSourcePtr and PortworxVolumeSourcePtrOutput values.
// You can construct a concrete instance of `PortworxVolumeSourcePtrInput` via:
//
//	        PortworxVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type PortworxVolumeSourcePtrInput interface {
	pulumi.Input

	ToPortworxVolumeSourcePtrOutput() PortworxVolumeSourcePtrOutput
	ToPortworxVolumeSourcePtrOutputWithContext(context.Context) PortworxVolumeSourcePtrOutput
}

type portworxVolumeSourcePtrType PortworxVolumeSourceArgs

func PortworxVolumeSourcePtr(v *PortworxVolumeSourceArgs) PortworxVolumeSourcePtrInput {
	return (*portworxVolumeSourcePtrType)(v)
}

func (*portworxVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PortworxVolumeSource)(nil)).Elem()
}

func (i *portworxVolumeSourcePtrType) ToPortworxVolumeSourcePtrOutput() PortworxVolumeSourcePtrOutput {
	return i.ToPortworxVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *portworxVolumeSourcePtrType) ToPortworxVolumeSourcePtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourcePtrOutput)
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSourceOutput struct{ *pulumi.OutputState }

func (PortworxVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortworxVolumeSource)(nil)).Elem()
}

func (o PortworxVolumeSourceOutput) ToPortworxVolumeSourceOutput() PortworxVolumeSourceOutput {
	return o
}

func (o PortworxVolumeSourceOutput) ToPortworxVolumeSourceOutputWithContext(ctx context.Context) PortworxVolumeSourceOutput {
	return o
}

func (o PortworxVolumeSourceOutput) ToPortworxVolumeSourcePtrOutput() PortworxVolumeSourcePtrOutput {
	return o.ToPortworxVolumeSourcePtrOutputWithContext(context.Background())
}

func (o PortworxVolumeSourceOutput) ToPortworxVolumeSourcePtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PortworxVolumeSource) *PortworxVolumeSource {
		return &v
	}).(PortworxVolumeSourcePtrOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o PortworxVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortworxVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o PortworxVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PortworxVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o PortworxVolumeSourceOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v PortworxVolumeSource) string { return v.VolumeID }).(pulumi.StringOutput)
}

type PortworxVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (PortworxVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortworxVolumeSource)(nil)).Elem()
}

func (o PortworxVolumeSourcePtrOutput) ToPortworxVolumeSourcePtrOutput() PortworxVolumeSourcePtrOutput {
	return o
}

func (o PortworxVolumeSourcePtrOutput) ToPortworxVolumeSourcePtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePtrOutput {
	return o
}

func (o PortworxVolumeSourcePtrOutput) Elem() PortworxVolumeSourceOutput {
	return o.ApplyT(func(v *PortworxVolumeSource) PortworxVolumeSource {
		if v != nil {
			return *v
		}
		var ret PortworxVolumeSource
		return ret
	}).(PortworxVolumeSourceOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o PortworxVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o PortworxVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o PortworxVolumeSourcePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSourcePatch struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID *string `pulumi:"volumeID"`
}

// PortworxVolumeSourcePatchInput is an input type that accepts PortworxVolumeSourcePatchArgs and PortworxVolumeSourcePatchOutput values.
// You can construct a concrete instance of `PortworxVolumeSourcePatchInput` via:
//
//	PortworxVolumeSourcePatchArgs{...}
type PortworxVolumeSourcePatchInput interface {
	pulumi.Input

	ToPortworxVolumeSourcePatchOutput() PortworxVolumeSourcePatchOutput
	ToPortworxVolumeSourcePatchOutputWithContext(context.Context) PortworxVolumeSourcePatchOutput
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSourcePatchArgs struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (PortworxVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortworxVolumeSourcePatch)(nil)).Elem()
}

func (i PortworxVolumeSourcePatchArgs) ToPortworxVolumeSourcePatchOutput() PortworxVolumeSourcePatchOutput {
	return i.ToPortworxVolumeSourcePatchOutputWithContext(context.Background())
}

func (i PortworxVolumeSourcePatchArgs) ToPortworxVolumeSourcePatchOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourcePatchOutput)
}

func (i PortworxVolumeSourcePatchArgs) ToPortworxVolumeSourcePatchPtrOutput() PortworxVolumeSourcePatchPtrOutput {
	return i.ToPortworxVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i PortworxVolumeSourcePatchArgs) ToPortworxVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourcePatchOutput).ToPortworxVolumeSourcePatchPtrOutputWithContext(ctx)
}

// PortworxVolumeSourcePatchPtrInput is an input type that accepts PortworxVolumeSourcePatchArgs, PortworxVolumeSourcePatchPtr and PortworxVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `PortworxVolumeSourcePatchPtrInput` via:
//
//	        PortworxVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type PortworxVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToPortworxVolumeSourcePatchPtrOutput() PortworxVolumeSourcePatchPtrOutput
	ToPortworxVolumeSourcePatchPtrOutputWithContext(context.Context) PortworxVolumeSourcePatchPtrOutput
}

type portworxVolumeSourcePatchPtrType PortworxVolumeSourcePatchArgs

func PortworxVolumeSourcePatchPtr(v *PortworxVolumeSourcePatchArgs) PortworxVolumeSourcePatchPtrInput {
	return (*portworxVolumeSourcePatchPtrType)(v)
}

func (*portworxVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PortworxVolumeSourcePatch)(nil)).Elem()
}

func (i *portworxVolumeSourcePatchPtrType) ToPortworxVolumeSourcePatchPtrOutput() PortworxVolumeSourcePatchPtrOutput {
	return i.ToPortworxVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *portworxVolumeSourcePatchPtrType) ToPortworxVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortworxVolumeSourcePatchPtrOutput)
}

// PortworxVolumeSource represents a Portworx volume resource.
type PortworxVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (PortworxVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortworxVolumeSourcePatch)(nil)).Elem()
}

func (o PortworxVolumeSourcePatchOutput) ToPortworxVolumeSourcePatchOutput() PortworxVolumeSourcePatchOutput {
	return o
}

func (o PortworxVolumeSourcePatchOutput) ToPortworxVolumeSourcePatchOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchOutput {
	return o
}

func (o PortworxVolumeSourcePatchOutput) ToPortworxVolumeSourcePatchPtrOutput() PortworxVolumeSourcePatchPtrOutput {
	return o.ToPortworxVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o PortworxVolumeSourcePatchOutput) ToPortworxVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PortworxVolumeSourcePatch) *PortworxVolumeSourcePatch {
		return &v
	}).(PortworxVolumeSourcePatchPtrOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o PortworxVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortworxVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o PortworxVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PortworxVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o PortworxVolumeSourcePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortworxVolumeSourcePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type PortworxVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (PortworxVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortworxVolumeSourcePatch)(nil)).Elem()
}

func (o PortworxVolumeSourcePatchPtrOutput) ToPortworxVolumeSourcePatchPtrOutput() PortworxVolumeSourcePatchPtrOutput {
	return o
}

func (o PortworxVolumeSourcePatchPtrOutput) ToPortworxVolumeSourcePatchPtrOutputWithContext(ctx context.Context) PortworxVolumeSourcePatchPtrOutput {
	return o
}

func (o PortworxVolumeSourcePatchPtrOutput) Elem() PortworxVolumeSourcePatchOutput {
	return o.ApplyT(func(v *PortworxVolumeSourcePatch) PortworxVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret PortworxVolumeSourcePatch
		return ret
	}).(PortworxVolumeSourcePatchOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o PortworxVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o PortworxVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o PortworxVolumeSourcePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortworxVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTerm struct {
	// A node selector term, associated with the corresponding weight.
	Preference NodeSelectorTerm `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// PreferredSchedulingTermInput is an input type that accepts PreferredSchedulingTermArgs and PreferredSchedulingTermOutput values.
// You can construct a concrete instance of `PreferredSchedulingTermInput` via:
//
//	PreferredSchedulingTermArgs{...}
type PreferredSchedulingTermInput interface {
	pulumi.Input

	ToPreferredSchedulingTermOutput() PreferredSchedulingTermOutput
	ToPreferredSchedulingTermOutputWithContext(context.Context) PreferredSchedulingTermOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTermArgs struct {
	// A node selector term, associated with the corresponding weight.
	Preference NodeSelectorTermInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (PreferredSchedulingTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferredSchedulingTerm)(nil)).Elem()
}

func (i PreferredSchedulingTermArgs) ToPreferredSchedulingTermOutput() PreferredSchedulingTermOutput {
	return i.ToPreferredSchedulingTermOutputWithContext(context.Background())
}

func (i PreferredSchedulingTermArgs) ToPreferredSchedulingTermOutputWithContext(ctx context.Context) PreferredSchedulingTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferredSchedulingTermOutput)
}

// PreferredSchedulingTermArrayInput is an input type that accepts PreferredSchedulingTermArray and PreferredSchedulingTermArrayOutput values.
// You can construct a concrete instance of `PreferredSchedulingTermArrayInput` via:
//
//	PreferredSchedulingTermArray{ PreferredSchedulingTermArgs{...} }
type PreferredSchedulingTermArrayInput interface {
	pulumi.Input

	ToPreferredSchedulingTermArrayOutput() PreferredSchedulingTermArrayOutput
	ToPreferredSchedulingTermArrayOutputWithContext(context.Context) PreferredSchedulingTermArrayOutput
}

type PreferredSchedulingTermArray []PreferredSchedulingTermInput

func (PreferredSchedulingTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferredSchedulingTerm)(nil)).Elem()
}

func (i PreferredSchedulingTermArray) ToPreferredSchedulingTermArrayOutput() PreferredSchedulingTermArrayOutput {
	return i.ToPreferredSchedulingTermArrayOutputWithContext(context.Background())
}

func (i PreferredSchedulingTermArray) ToPreferredSchedulingTermArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferredSchedulingTermArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTermOutput struct{ *pulumi.OutputState }

func (PreferredSchedulingTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferredSchedulingTerm)(nil)).Elem()
}

func (o PreferredSchedulingTermOutput) ToPreferredSchedulingTermOutput() PreferredSchedulingTermOutput {
	return o
}

func (o PreferredSchedulingTermOutput) ToPreferredSchedulingTermOutputWithContext(ctx context.Context) PreferredSchedulingTermOutput {
	return o
}

// A node selector term, associated with the corresponding weight.
func (o PreferredSchedulingTermOutput) Preference() NodeSelectorTermOutput {
	return o.ApplyT(func(v PreferredSchedulingTerm) NodeSelectorTerm { return v.Preference }).(NodeSelectorTermOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o PreferredSchedulingTermOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v PreferredSchedulingTerm) int { return v.Weight }).(pulumi.IntOutput)
}

type PreferredSchedulingTermArrayOutput struct{ *pulumi.OutputState }

func (PreferredSchedulingTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferredSchedulingTerm)(nil)).Elem()
}

func (o PreferredSchedulingTermArrayOutput) ToPreferredSchedulingTermArrayOutput() PreferredSchedulingTermArrayOutput {
	return o
}

func (o PreferredSchedulingTermArrayOutput) ToPreferredSchedulingTermArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermArrayOutput {
	return o
}

func (o PreferredSchedulingTermArrayOutput) Index(i pulumi.IntInput) PreferredSchedulingTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PreferredSchedulingTerm {
		return vs[0].([]PreferredSchedulingTerm)[vs[1].(int)]
	}).(PreferredSchedulingTermOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTermPatch struct {
	// A node selector term, associated with the corresponding weight.
	Preference *NodeSelectorTermPatch `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PreferredSchedulingTermPatchInput is an input type that accepts PreferredSchedulingTermPatchArgs and PreferredSchedulingTermPatchOutput values.
// You can construct a concrete instance of `PreferredSchedulingTermPatchInput` via:
//
//	PreferredSchedulingTermPatchArgs{...}
type PreferredSchedulingTermPatchInput interface {
	pulumi.Input

	ToPreferredSchedulingTermPatchOutput() PreferredSchedulingTermPatchOutput
	ToPreferredSchedulingTermPatchOutputWithContext(context.Context) PreferredSchedulingTermPatchOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTermPatchArgs struct {
	// A node selector term, associated with the corresponding weight.
	Preference NodeSelectorTermPatchPtrInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PreferredSchedulingTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferredSchedulingTermPatch)(nil)).Elem()
}

func (i PreferredSchedulingTermPatchArgs) ToPreferredSchedulingTermPatchOutput() PreferredSchedulingTermPatchOutput {
	return i.ToPreferredSchedulingTermPatchOutputWithContext(context.Background())
}

func (i PreferredSchedulingTermPatchArgs) ToPreferredSchedulingTermPatchOutputWithContext(ctx context.Context) PreferredSchedulingTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferredSchedulingTermPatchOutput)
}

// PreferredSchedulingTermPatchArrayInput is an input type that accepts PreferredSchedulingTermPatchArray and PreferredSchedulingTermPatchArrayOutput values.
// You can construct a concrete instance of `PreferredSchedulingTermPatchArrayInput` via:
//
//	PreferredSchedulingTermPatchArray{ PreferredSchedulingTermPatchArgs{...} }
type PreferredSchedulingTermPatchArrayInput interface {
	pulumi.Input

	ToPreferredSchedulingTermPatchArrayOutput() PreferredSchedulingTermPatchArrayOutput
	ToPreferredSchedulingTermPatchArrayOutputWithContext(context.Context) PreferredSchedulingTermPatchArrayOutput
}

type PreferredSchedulingTermPatchArray []PreferredSchedulingTermPatchInput

func (PreferredSchedulingTermPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferredSchedulingTermPatch)(nil)).Elem()
}

func (i PreferredSchedulingTermPatchArray) ToPreferredSchedulingTermPatchArrayOutput() PreferredSchedulingTermPatchArrayOutput {
	return i.ToPreferredSchedulingTermPatchArrayOutputWithContext(context.Background())
}

func (i PreferredSchedulingTermPatchArray) ToPreferredSchedulingTermPatchArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferredSchedulingTermPatchArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTermPatchOutput struct{ *pulumi.OutputState }

func (PreferredSchedulingTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferredSchedulingTermPatch)(nil)).Elem()
}

func (o PreferredSchedulingTermPatchOutput) ToPreferredSchedulingTermPatchOutput() PreferredSchedulingTermPatchOutput {
	return o
}

func (o PreferredSchedulingTermPatchOutput) ToPreferredSchedulingTermPatchOutputWithContext(ctx context.Context) PreferredSchedulingTermPatchOutput {
	return o
}

// A node selector term, associated with the corresponding weight.
func (o PreferredSchedulingTermPatchOutput) Preference() NodeSelectorTermPatchPtrOutput {
	return o.ApplyT(func(v PreferredSchedulingTermPatch) *NodeSelectorTermPatch { return v.Preference }).(NodeSelectorTermPatchPtrOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o PreferredSchedulingTermPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PreferredSchedulingTermPatch) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type PreferredSchedulingTermPatchArrayOutput struct{ *pulumi.OutputState }

func (PreferredSchedulingTermPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferredSchedulingTermPatch)(nil)).Elem()
}

func (o PreferredSchedulingTermPatchArrayOutput) ToPreferredSchedulingTermPatchArrayOutput() PreferredSchedulingTermPatchArrayOutput {
	return o
}

func (o PreferredSchedulingTermPatchArrayOutput) ToPreferredSchedulingTermPatchArrayOutputWithContext(ctx context.Context) PreferredSchedulingTermPatchArrayOutput {
	return o
}

func (o PreferredSchedulingTermPatchArrayOutput) Index(i pulumi.IntInput) PreferredSchedulingTermPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PreferredSchedulingTermPatch {
		return vs[0].([]PreferredSchedulingTermPatch)[vs[1].(int)]
	}).(PreferredSchedulingTermPatchOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type Probe struct {
	// Exec specifies the action to take.
	Exec *ExecAction `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
	Grpc *GRPCAction `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ProbeInput is an input type that accepts ProbeArgs and ProbeOutput values.
// You can construct a concrete instance of `ProbeInput` via:
//
//	ProbeArgs{...}
type ProbeInput interface {
	pulumi.Input

	ToProbeOutput() ProbeOutput
	ToProbeOutputWithContext(context.Context) ProbeOutput
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeArgs struct {
	// Exec specifies the action to take.
	Exec ExecActionPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
	Grpc GRPCActionPtrInput `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket TCPSocketActionPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (i ProbeArgs) ToProbeOutput() ProbeOutput {
	return i.ToProbeOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput)
}

func (i ProbeArgs) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput).ToProbePtrOutputWithContext(ctx)
}

// ProbePtrInput is an input type that accepts ProbeArgs, ProbePtr and ProbePtrOutput values.
// You can construct a concrete instance of `ProbePtrInput` via:
//
//	        ProbeArgs{...}
//
//	or:
//
//	        nil
type ProbePtrInput interface {
	pulumi.Input

	ToProbePtrOutput() ProbePtrOutput
	ToProbePtrOutputWithContext(context.Context) ProbePtrOutput
}

type probePtrType ProbeArgs

func ProbePtr(v *ProbeArgs) ProbePtrInput {
	return (*probePtrType)(v)
}

func (*probePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (i *probePtrType) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i *probePtrType) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeOutput struct{ *pulumi.OutputState }

func (ProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (o ProbeOutput) ToProbeOutput() ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbePtrOutput() ProbePtrOutput {
	return o.ToProbePtrOutputWithContext(context.Background())
}

func (o ProbeOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Probe) *Probe {
		return &v
	}).(ProbePtrOutput)
}

// Exec specifies the action to take.
func (o ProbeOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v Probe) *ExecAction { return v.Exec }).(ExecActionPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
func (o ProbeOutput) Grpc() GRPCActionPtrOutput {
	return o.ApplyT(func(v Probe) *GRPCAction { return v.Grpc }).(GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbeOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v Probe) *HTTPGetAction { return v.HttpGet }).(HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbeOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v Probe) *TCPSocketAction { return v.TcpSocket }).(TCPSocketActionPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ProbeOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ProbePtrOutput struct{ *pulumi.OutputState }

func (ProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (o ProbePtrOutput) ToProbePtrOutput() ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) Elem() ProbeOutput {
	return o.ApplyT(func(v *Probe) Probe {
		if v != nil {
			return *v
		}
		var ret Probe
		return ret
	}).(ProbeOutput)
}

// Exec specifies the action to take.
func (o ProbePtrOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v *Probe) *ExecAction {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
func (o ProbePtrOutput) Grpc() GRPCActionPtrOutput {
	return o.ApplyT(func(v *Probe) *GRPCAction {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbePtrOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v *Probe) *HTTPGetAction {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbePtrOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v *Probe) *TCPSocketAction {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ProbePtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbePatch struct {
	// Exec specifies the action to take.
	Exec *ExecActionPatch `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
	Grpc *GRPCActionPatch `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetActionPatch `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket *TCPSocketActionPatch `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ProbePatchInput is an input type that accepts ProbePatchArgs and ProbePatchOutput values.
// You can construct a concrete instance of `ProbePatchInput` via:
//
//	ProbePatchArgs{...}
type ProbePatchInput interface {
	pulumi.Input

	ToProbePatchOutput() ProbePatchOutput
	ToProbePatchOutputWithContext(context.Context) ProbePatchOutput
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbePatchArgs struct {
	// Exec specifies the action to take.
	Exec ExecActionPatchPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
	Grpc GRPCActionPatchPtrInput `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPatchPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket TCPSocketActionPatchPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ProbePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbePatch)(nil)).Elem()
}

func (i ProbePatchArgs) ToProbePatchOutput() ProbePatchOutput {
	return i.ToProbePatchOutputWithContext(context.Background())
}

func (i ProbePatchArgs) ToProbePatchOutputWithContext(ctx context.Context) ProbePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchOutput)
}

func (i ProbePatchArgs) ToProbePatchPtrOutput() ProbePatchPtrOutput {
	return i.ToProbePatchPtrOutputWithContext(context.Background())
}

func (i ProbePatchArgs) ToProbePatchPtrOutputWithContext(ctx context.Context) ProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchOutput).ToProbePatchPtrOutputWithContext(ctx)
}

// ProbePatchPtrInput is an input type that accepts ProbePatchArgs, ProbePatchPtr and ProbePatchPtrOutput values.
// You can construct a concrete instance of `ProbePatchPtrInput` via:
//
//	        ProbePatchArgs{...}
//
//	or:
//
//	        nil
type ProbePatchPtrInput interface {
	pulumi.Input

	ToProbePatchPtrOutput() ProbePatchPtrOutput
	ToProbePatchPtrOutputWithContext(context.Context) ProbePatchPtrOutput
}

type probePatchPtrType ProbePatchArgs

func ProbePatchPtr(v *ProbePatchArgs) ProbePatchPtrInput {
	return (*probePatchPtrType)(v)
}

func (*probePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbePatch)(nil)).Elem()
}

func (i *probePatchPtrType) ToProbePatchPtrOutput() ProbePatchPtrOutput {
	return i.ToProbePatchPtrOutputWithContext(context.Background())
}

func (i *probePatchPtrType) ToProbePatchPtrOutputWithContext(ctx context.Context) ProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchPtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbePatchOutput struct{ *pulumi.OutputState }

func (ProbePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbePatch)(nil)).Elem()
}

func (o ProbePatchOutput) ToProbePatchOutput() ProbePatchOutput {
	return o
}

func (o ProbePatchOutput) ToProbePatchOutputWithContext(ctx context.Context) ProbePatchOutput {
	return o
}

func (o ProbePatchOutput) ToProbePatchPtrOutput() ProbePatchPtrOutput {
	return o.ToProbePatchPtrOutputWithContext(context.Background())
}

func (o ProbePatchOutput) ToProbePatchPtrOutputWithContext(ctx context.Context) ProbePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbePatch) *ProbePatch {
		return &v
	}).(ProbePatchPtrOutput)
}

// Exec specifies the action to take.
func (o ProbePatchOutput) Exec() ExecActionPatchPtrOutput {
	return o.ApplyT(func(v ProbePatch) *ExecActionPatch { return v.Exec }).(ExecActionPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbePatchOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
func (o ProbePatchOutput) Grpc() GRPCActionPatchPtrOutput {
	return o.ApplyT(func(v ProbePatch) *GRPCActionPatch { return v.Grpc }).(GRPCActionPatchPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbePatchOutput) HttpGet() HTTPGetActionPatchPtrOutput {
	return o.ApplyT(func(v ProbePatch) *HTTPGetActionPatch { return v.HttpGet }).(HTTPGetActionPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePatchOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbePatchOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ProbePatchOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbePatchOutput) TcpSocket() TCPSocketActionPatchPtrOutput {
	return o.ApplyT(func(v ProbePatch) *TCPSocketActionPatch { return v.TcpSocket }).(TCPSocketActionPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ProbePatchOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbePatch) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ProbePatchPtrOutput struct{ *pulumi.OutputState }

func (ProbePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbePatch)(nil)).Elem()
}

func (o ProbePatchPtrOutput) ToProbePatchPtrOutput() ProbePatchPtrOutput {
	return o
}

func (o ProbePatchPtrOutput) ToProbePatchPtrOutputWithContext(ctx context.Context) ProbePatchPtrOutput {
	return o
}

func (o ProbePatchPtrOutput) Elem() ProbePatchOutput {
	return o.ApplyT(func(v *ProbePatch) ProbePatch {
		if v != nil {
			return *v
		}
		var ret ProbePatch
		return ret
	}).(ProbePatchOutput)
}

// Exec specifies the action to take.
func (o ProbePatchPtrOutput) Exec() ExecActionPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *ExecActionPatch {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbePatchPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
func (o ProbePatchPtrOutput) Grpc() GRPCActionPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *GRPCActionPatch {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(GRPCActionPatchPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbePatchPtrOutput) HttpGet() HTTPGetActionPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *HTTPGetActionPatch {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePatchPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbePatchPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ProbePatchPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbePatchPtrOutput) TcpSocket() TCPSocketActionPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *TCPSocketActionPatch {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ProbePatchPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Represents a projected volume source
type ProjectedVolumeSource struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources []VolumeProjection `pulumi:"sources"`
}

// ProjectedVolumeSourceInput is an input type that accepts ProjectedVolumeSourceArgs and ProjectedVolumeSourceOutput values.
// You can construct a concrete instance of `ProjectedVolumeSourceInput` via:
//
//	ProjectedVolumeSourceArgs{...}
type ProjectedVolumeSourceInput interface {
	pulumi.Input

	ToProjectedVolumeSourceOutput() ProjectedVolumeSourceOutput
	ToProjectedVolumeSourceOutputWithContext(context.Context) ProjectedVolumeSourceOutput
}

// Represents a projected volume source
type ProjectedVolumeSourceArgs struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources VolumeProjectionArrayInput `pulumi:"sources"`
}

func (ProjectedVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectedVolumeSource)(nil)).Elem()
}

func (i ProjectedVolumeSourceArgs) ToProjectedVolumeSourceOutput() ProjectedVolumeSourceOutput {
	return i.ToProjectedVolumeSourceOutputWithContext(context.Background())
}

func (i ProjectedVolumeSourceArgs) ToProjectedVolumeSourceOutputWithContext(ctx context.Context) ProjectedVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourceOutput)
}

func (i ProjectedVolumeSourceArgs) ToProjectedVolumeSourcePtrOutput() ProjectedVolumeSourcePtrOutput {
	return i.ToProjectedVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ProjectedVolumeSourceArgs) ToProjectedVolumeSourcePtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourceOutput).ToProjectedVolumeSourcePtrOutputWithContext(ctx)
}

// ProjectedVolumeSourcePtrInput is an input type that accepts ProjectedVolumeSourceArgs, ProjectedVolumeSourcePtr and ProjectedVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ProjectedVolumeSourcePtrInput` via:
//
//	        ProjectedVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ProjectedVolumeSourcePtrInput interface {
	pulumi.Input

	ToProjectedVolumeSourcePtrOutput() ProjectedVolumeSourcePtrOutput
	ToProjectedVolumeSourcePtrOutputWithContext(context.Context) ProjectedVolumeSourcePtrOutput
}

type projectedVolumeSourcePtrType ProjectedVolumeSourceArgs

func ProjectedVolumeSourcePtr(v *ProjectedVolumeSourceArgs) ProjectedVolumeSourcePtrInput {
	return (*projectedVolumeSourcePtrType)(v)
}

func (*projectedVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectedVolumeSource)(nil)).Elem()
}

func (i *projectedVolumeSourcePtrType) ToProjectedVolumeSourcePtrOutput() ProjectedVolumeSourcePtrOutput {
	return i.ToProjectedVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *projectedVolumeSourcePtrType) ToProjectedVolumeSourcePtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourcePtrOutput)
}

// Represents a projected volume source
type ProjectedVolumeSourceOutput struct{ *pulumi.OutputState }

func (ProjectedVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectedVolumeSource)(nil)).Elem()
}

func (o ProjectedVolumeSourceOutput) ToProjectedVolumeSourceOutput() ProjectedVolumeSourceOutput {
	return o
}

func (o ProjectedVolumeSourceOutput) ToProjectedVolumeSourceOutputWithContext(ctx context.Context) ProjectedVolumeSourceOutput {
	return o
}

func (o ProjectedVolumeSourceOutput) ToProjectedVolumeSourcePtrOutput() ProjectedVolumeSourcePtrOutput {
	return o.ToProjectedVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ProjectedVolumeSourceOutput) ToProjectedVolumeSourcePtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectedVolumeSource) *ProjectedVolumeSource {
		return &v
	}).(ProjectedVolumeSourcePtrOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ProjectedVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectedVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o ProjectedVolumeSourceOutput) Sources() VolumeProjectionArrayOutput {
	return o.ApplyT(func(v ProjectedVolumeSource) []VolumeProjection { return v.Sources }).(VolumeProjectionArrayOutput)
}

type ProjectedVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ProjectedVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectedVolumeSource)(nil)).Elem()
}

func (o ProjectedVolumeSourcePtrOutput) ToProjectedVolumeSourcePtrOutput() ProjectedVolumeSourcePtrOutput {
	return o
}

func (o ProjectedVolumeSourcePtrOutput) ToProjectedVolumeSourcePtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePtrOutput {
	return o
}

func (o ProjectedVolumeSourcePtrOutput) Elem() ProjectedVolumeSourceOutput {
	return o.ApplyT(func(v *ProjectedVolumeSource) ProjectedVolumeSource {
		if v != nil {
			return *v
		}
		var ret ProjectedVolumeSource
		return ret
	}).(ProjectedVolumeSourceOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ProjectedVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectedVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o ProjectedVolumeSourcePtrOutput) Sources() VolumeProjectionArrayOutput {
	return o.ApplyT(func(v *ProjectedVolumeSource) []VolumeProjection {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(VolumeProjectionArrayOutput)
}

// Represents a projected volume source
type ProjectedVolumeSourcePatch struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources []VolumeProjectionPatch `pulumi:"sources"`
}

// ProjectedVolumeSourcePatchInput is an input type that accepts ProjectedVolumeSourcePatchArgs and ProjectedVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ProjectedVolumeSourcePatchInput` via:
//
//	ProjectedVolumeSourcePatchArgs{...}
type ProjectedVolumeSourcePatchInput interface {
	pulumi.Input

	ToProjectedVolumeSourcePatchOutput() ProjectedVolumeSourcePatchOutput
	ToProjectedVolumeSourcePatchOutputWithContext(context.Context) ProjectedVolumeSourcePatchOutput
}

// Represents a projected volume source
type ProjectedVolumeSourcePatchArgs struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources VolumeProjectionPatchArrayInput `pulumi:"sources"`
}

func (ProjectedVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectedVolumeSourcePatch)(nil)).Elem()
}

func (i ProjectedVolumeSourcePatchArgs) ToProjectedVolumeSourcePatchOutput() ProjectedVolumeSourcePatchOutput {
	return i.ToProjectedVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ProjectedVolumeSourcePatchArgs) ToProjectedVolumeSourcePatchOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourcePatchOutput)
}

func (i ProjectedVolumeSourcePatchArgs) ToProjectedVolumeSourcePatchPtrOutput() ProjectedVolumeSourcePatchPtrOutput {
	return i.ToProjectedVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ProjectedVolumeSourcePatchArgs) ToProjectedVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourcePatchOutput).ToProjectedVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ProjectedVolumeSourcePatchPtrInput is an input type that accepts ProjectedVolumeSourcePatchArgs, ProjectedVolumeSourcePatchPtr and ProjectedVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ProjectedVolumeSourcePatchPtrInput` via:
//
//	        ProjectedVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ProjectedVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToProjectedVolumeSourcePatchPtrOutput() ProjectedVolumeSourcePatchPtrOutput
	ToProjectedVolumeSourcePatchPtrOutputWithContext(context.Context) ProjectedVolumeSourcePatchPtrOutput
}

type projectedVolumeSourcePatchPtrType ProjectedVolumeSourcePatchArgs

func ProjectedVolumeSourcePatchPtr(v *ProjectedVolumeSourcePatchArgs) ProjectedVolumeSourcePatchPtrInput {
	return (*projectedVolumeSourcePatchPtrType)(v)
}

func (*projectedVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectedVolumeSourcePatch)(nil)).Elem()
}

func (i *projectedVolumeSourcePatchPtrType) ToProjectedVolumeSourcePatchPtrOutput() ProjectedVolumeSourcePatchPtrOutput {
	return i.ToProjectedVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *projectedVolumeSourcePatchPtrType) ToProjectedVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectedVolumeSourcePatchPtrOutput)
}

// Represents a projected volume source
type ProjectedVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ProjectedVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectedVolumeSourcePatch)(nil)).Elem()
}

func (o ProjectedVolumeSourcePatchOutput) ToProjectedVolumeSourcePatchOutput() ProjectedVolumeSourcePatchOutput {
	return o
}

func (o ProjectedVolumeSourcePatchOutput) ToProjectedVolumeSourcePatchOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchOutput {
	return o
}

func (o ProjectedVolumeSourcePatchOutput) ToProjectedVolumeSourcePatchPtrOutput() ProjectedVolumeSourcePatchPtrOutput {
	return o.ToProjectedVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ProjectedVolumeSourcePatchOutput) ToProjectedVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectedVolumeSourcePatch) *ProjectedVolumeSourcePatch {
		return &v
	}).(ProjectedVolumeSourcePatchPtrOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ProjectedVolumeSourcePatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectedVolumeSourcePatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o ProjectedVolumeSourcePatchOutput) Sources() VolumeProjectionPatchArrayOutput {
	return o.ApplyT(func(v ProjectedVolumeSourcePatch) []VolumeProjectionPatch { return v.Sources }).(VolumeProjectionPatchArrayOutput)
}

type ProjectedVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ProjectedVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectedVolumeSourcePatch)(nil)).Elem()
}

func (o ProjectedVolumeSourcePatchPtrOutput) ToProjectedVolumeSourcePatchPtrOutput() ProjectedVolumeSourcePatchPtrOutput {
	return o
}

func (o ProjectedVolumeSourcePatchPtrOutput) ToProjectedVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ProjectedVolumeSourcePatchPtrOutput {
	return o
}

func (o ProjectedVolumeSourcePatchPtrOutput) Elem() ProjectedVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ProjectedVolumeSourcePatch) ProjectedVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ProjectedVolumeSourcePatch
		return ret
	}).(ProjectedVolumeSourcePatchOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ProjectedVolumeSourcePatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectedVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o ProjectedVolumeSourcePatchPtrOutput) Sources() VolumeProjectionPatchArrayOutput {
	return o.ApplyT(func(v *ProjectedVolumeSourcePatch) []VolumeProjectionPatch {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(VolumeProjectionPatchArrayOutput)
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSource struct {
	// group to map volume access to Default is no group
	Group *string `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume string `pulumi:"volume"`
}

// QuobyteVolumeSourceInput is an input type that accepts QuobyteVolumeSourceArgs and QuobyteVolumeSourceOutput values.
// You can construct a concrete instance of `QuobyteVolumeSourceInput` via:
//
//	QuobyteVolumeSourceArgs{...}
type QuobyteVolumeSourceInput interface {
	pulumi.Input

	ToQuobyteVolumeSourceOutput() QuobyteVolumeSourceOutput
	ToQuobyteVolumeSourceOutputWithContext(context.Context) QuobyteVolumeSourceOutput
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSourceArgs struct {
	// group to map volume access to Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry pulumi.StringInput `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringInput `pulumi:"volume"`
}

func (QuobyteVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuobyteVolumeSource)(nil)).Elem()
}

func (i QuobyteVolumeSourceArgs) ToQuobyteVolumeSourceOutput() QuobyteVolumeSourceOutput {
	return i.ToQuobyteVolumeSourceOutputWithContext(context.Background())
}

func (i QuobyteVolumeSourceArgs) ToQuobyteVolumeSourceOutputWithContext(ctx context.Context) QuobyteVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourceOutput)
}

func (i QuobyteVolumeSourceArgs) ToQuobyteVolumeSourcePtrOutput() QuobyteVolumeSourcePtrOutput {
	return i.ToQuobyteVolumeSourcePtrOutputWithContext(context.Background())
}

func (i QuobyteVolumeSourceArgs) ToQuobyteVolumeSourcePtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourceOutput).ToQuobyteVolumeSourcePtrOutputWithContext(ctx)
}

// QuobyteVolumeSourcePtrInput is an input type that accepts QuobyteVolumeSourceArgs, QuobyteVolumeSourcePtr and QuobyteVolumeSourcePtrOutput values.
// You can construct a concrete instance of `QuobyteVolumeSourcePtrInput` via:
//
//	        QuobyteVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type QuobyteVolumeSourcePtrInput interface {
	pulumi.Input

	ToQuobyteVolumeSourcePtrOutput() QuobyteVolumeSourcePtrOutput
	ToQuobyteVolumeSourcePtrOutputWithContext(context.Context) QuobyteVolumeSourcePtrOutput
}

type quobyteVolumeSourcePtrType QuobyteVolumeSourceArgs

func QuobyteVolumeSourcePtr(v *QuobyteVolumeSourceArgs) QuobyteVolumeSourcePtrInput {
	return (*quobyteVolumeSourcePtrType)(v)
}

func (*quobyteVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuobyteVolumeSource)(nil)).Elem()
}

func (i *quobyteVolumeSourcePtrType) ToQuobyteVolumeSourcePtrOutput() QuobyteVolumeSourcePtrOutput {
	return i.ToQuobyteVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *quobyteVolumeSourcePtrType) ToQuobyteVolumeSourcePtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourcePtrOutput)
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSourceOutput struct{ *pulumi.OutputState }

func (QuobyteVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuobyteVolumeSource)(nil)).Elem()
}

func (o QuobyteVolumeSourceOutput) ToQuobyteVolumeSourceOutput() QuobyteVolumeSourceOutput {
	return o
}

func (o QuobyteVolumeSourceOutput) ToQuobyteVolumeSourceOutputWithContext(ctx context.Context) QuobyteVolumeSourceOutput {
	return o
}

func (o QuobyteVolumeSourceOutput) ToQuobyteVolumeSourcePtrOutput() QuobyteVolumeSourcePtrOutput {
	return o.ToQuobyteVolumeSourcePtrOutputWithContext(context.Background())
}

func (o QuobyteVolumeSourceOutput) ToQuobyteVolumeSourcePtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuobyteVolumeSource) *QuobyteVolumeSource {
		return &v
	}).(QuobyteVolumeSourcePtrOutput)
}

// group to map volume access to Default is no group
func (o QuobyteVolumeSourceOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o QuobyteVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o QuobyteVolumeSourceOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) string { return v.Registry }).(pulumi.StringOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o QuobyteVolumeSourceOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o QuobyteVolumeSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o QuobyteVolumeSourceOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v QuobyteVolumeSource) string { return v.Volume }).(pulumi.StringOutput)
}

type QuobyteVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (QuobyteVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuobyteVolumeSource)(nil)).Elem()
}

func (o QuobyteVolumeSourcePtrOutput) ToQuobyteVolumeSourcePtrOutput() QuobyteVolumeSourcePtrOutput {
	return o
}

func (o QuobyteVolumeSourcePtrOutput) ToQuobyteVolumeSourcePtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePtrOutput {
	return o
}

func (o QuobyteVolumeSourcePtrOutput) Elem() QuobyteVolumeSourceOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) QuobyteVolumeSource {
		if v != nil {
			return *v
		}
		var ret QuobyteVolumeSource
		return ret
	}).(QuobyteVolumeSourceOutput)
}

// group to map volume access to Default is no group
func (o QuobyteVolumeSourcePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o QuobyteVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o QuobyteVolumeSourcePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Registry
	}).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o QuobyteVolumeSourcePtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o QuobyteVolumeSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o QuobyteVolumeSourcePtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(pulumi.StringPtrOutput)
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSourcePatch struct {
	// group to map volume access to Default is no group
	Group *string `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry *string `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume *string `pulumi:"volume"`
}

// QuobyteVolumeSourcePatchInput is an input type that accepts QuobyteVolumeSourcePatchArgs and QuobyteVolumeSourcePatchOutput values.
// You can construct a concrete instance of `QuobyteVolumeSourcePatchInput` via:
//
//	QuobyteVolumeSourcePatchArgs{...}
type QuobyteVolumeSourcePatchInput interface {
	pulumi.Input

	ToQuobyteVolumeSourcePatchOutput() QuobyteVolumeSourcePatchOutput
	ToQuobyteVolumeSourcePatchOutputWithContext(context.Context) QuobyteVolumeSourcePatchOutput
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSourcePatchArgs struct {
	// group to map volume access to Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringPtrInput `pulumi:"volume"`
}

func (QuobyteVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuobyteVolumeSourcePatch)(nil)).Elem()
}

func (i QuobyteVolumeSourcePatchArgs) ToQuobyteVolumeSourcePatchOutput() QuobyteVolumeSourcePatchOutput {
	return i.ToQuobyteVolumeSourcePatchOutputWithContext(context.Background())
}

func (i QuobyteVolumeSourcePatchArgs) ToQuobyteVolumeSourcePatchOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourcePatchOutput)
}

func (i QuobyteVolumeSourcePatchArgs) ToQuobyteVolumeSourcePatchPtrOutput() QuobyteVolumeSourcePatchPtrOutput {
	return i.ToQuobyteVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i QuobyteVolumeSourcePatchArgs) ToQuobyteVolumeSourcePatchPtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourcePatchOutput).ToQuobyteVolumeSourcePatchPtrOutputWithContext(ctx)
}

// QuobyteVolumeSourcePatchPtrInput is an input type that accepts QuobyteVolumeSourcePatchArgs, QuobyteVolumeSourcePatchPtr and QuobyteVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `QuobyteVolumeSourcePatchPtrInput` via:
//
//	        QuobyteVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type QuobyteVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToQuobyteVolumeSourcePatchPtrOutput() QuobyteVolumeSourcePatchPtrOutput
	ToQuobyteVolumeSourcePatchPtrOutputWithContext(context.Context) QuobyteVolumeSourcePatchPtrOutput
}

type quobyteVolumeSourcePatchPtrType QuobyteVolumeSourcePatchArgs

func QuobyteVolumeSourcePatchPtr(v *QuobyteVolumeSourcePatchArgs) QuobyteVolumeSourcePatchPtrInput {
	return (*quobyteVolumeSourcePatchPtrType)(v)
}

func (*quobyteVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuobyteVolumeSourcePatch)(nil)).Elem()
}

func (i *quobyteVolumeSourcePatchPtrType) ToQuobyteVolumeSourcePatchPtrOutput() QuobyteVolumeSourcePatchPtrOutput {
	return i.ToQuobyteVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *quobyteVolumeSourcePatchPtrType) ToQuobyteVolumeSourcePatchPtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuobyteVolumeSourcePatchPtrOutput)
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (QuobyteVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuobyteVolumeSourcePatch)(nil)).Elem()
}

func (o QuobyteVolumeSourcePatchOutput) ToQuobyteVolumeSourcePatchOutput() QuobyteVolumeSourcePatchOutput {
	return o
}

func (o QuobyteVolumeSourcePatchOutput) ToQuobyteVolumeSourcePatchOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchOutput {
	return o
}

func (o QuobyteVolumeSourcePatchOutput) ToQuobyteVolumeSourcePatchPtrOutput() QuobyteVolumeSourcePatchPtrOutput {
	return o.ToQuobyteVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o QuobyteVolumeSourcePatchOutput) ToQuobyteVolumeSourcePatchPtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuobyteVolumeSourcePatch) *QuobyteVolumeSourcePatch {
		return &v
	}).(QuobyteVolumeSourcePatchPtrOutput)
}

// group to map volume access to Default is no group
func (o QuobyteVolumeSourcePatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o QuobyteVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o QuobyteVolumeSourcePatchOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o QuobyteVolumeSourcePatchOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o QuobyteVolumeSourcePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o QuobyteVolumeSourcePatchOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuobyteVolumeSourcePatch) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type QuobyteVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (QuobyteVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuobyteVolumeSourcePatch)(nil)).Elem()
}

func (o QuobyteVolumeSourcePatchPtrOutput) ToQuobyteVolumeSourcePatchPtrOutput() QuobyteVolumeSourcePatchPtrOutput {
	return o
}

func (o QuobyteVolumeSourcePatchPtrOutput) ToQuobyteVolumeSourcePatchPtrOutputWithContext(ctx context.Context) QuobyteVolumeSourcePatchPtrOutput {
	return o
}

func (o QuobyteVolumeSourcePatchPtrOutput) Elem() QuobyteVolumeSourcePatchOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) QuobyteVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret QuobyteVolumeSourcePatch
		return ret
	}).(QuobyteVolumeSourcePatchOutput)
}

// group to map volume access to Default is no group
func (o QuobyteVolumeSourcePatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o QuobyteVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o QuobyteVolumeSourcePatchPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o QuobyteVolumeSourcePatchPtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o QuobyteVolumeSourcePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o QuobyteVolumeSourcePatchPtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuobyteVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(pulumi.StringPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *SecretReference `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RBDPersistentVolumeSourceInput is an input type that accepts RBDPersistentVolumeSourceArgs and RBDPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `RBDPersistentVolumeSourceInput` via:
//
//	RBDPersistentVolumeSourceArgs{...}
type RBDPersistentVolumeSourceInput interface {
	pulumi.Input

	ToRBDPersistentVolumeSourceOutput() RBDPersistentVolumeSourceOutput
	ToRBDPersistentVolumeSourceOutputWithContext(context.Context) RBDPersistentVolumeSourceOutput
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSourceArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef SecretReferencePtrInput `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RBDPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDPersistentVolumeSource)(nil)).Elem()
}

func (i RBDPersistentVolumeSourceArgs) ToRBDPersistentVolumeSourceOutput() RBDPersistentVolumeSourceOutput {
	return i.ToRBDPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i RBDPersistentVolumeSourceArgs) ToRBDPersistentVolumeSourceOutputWithContext(ctx context.Context) RBDPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourceOutput)
}

func (i RBDPersistentVolumeSourceArgs) ToRBDPersistentVolumeSourcePtrOutput() RBDPersistentVolumeSourcePtrOutput {
	return i.ToRBDPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i RBDPersistentVolumeSourceArgs) ToRBDPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourceOutput).ToRBDPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// RBDPersistentVolumeSourcePtrInput is an input type that accepts RBDPersistentVolumeSourceArgs, RBDPersistentVolumeSourcePtr and RBDPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `RBDPersistentVolumeSourcePtrInput` via:
//
//	        RBDPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type RBDPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToRBDPersistentVolumeSourcePtrOutput() RBDPersistentVolumeSourcePtrOutput
	ToRBDPersistentVolumeSourcePtrOutputWithContext(context.Context) RBDPersistentVolumeSourcePtrOutput
}

type rbdpersistentVolumeSourcePtrType RBDPersistentVolumeSourceArgs

func RBDPersistentVolumeSourcePtr(v *RBDPersistentVolumeSourceArgs) RBDPersistentVolumeSourcePtrInput {
	return (*rbdpersistentVolumeSourcePtrType)(v)
}

func (*rbdpersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDPersistentVolumeSource)(nil)).Elem()
}

func (i *rbdpersistentVolumeSourcePtrType) ToRBDPersistentVolumeSourcePtrOutput() RBDPersistentVolumeSourcePtrOutput {
	return i.ToRBDPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *rbdpersistentVolumeSourcePtrType) ToRBDPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourcePtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (RBDPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDPersistentVolumeSource)(nil)).Elem()
}

func (o RBDPersistentVolumeSourceOutput) ToRBDPersistentVolumeSourceOutput() RBDPersistentVolumeSourceOutput {
	return o
}

func (o RBDPersistentVolumeSourceOutput) ToRBDPersistentVolumeSourceOutputWithContext(ctx context.Context) RBDPersistentVolumeSourceOutput {
	return o
}

func (o RBDPersistentVolumeSourceOutput) ToRBDPersistentVolumeSourcePtrOutput() RBDPersistentVolumeSourcePtrOutput {
	return o.ToRBDPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o RBDPersistentVolumeSourceOutput) ToRBDPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RBDPersistentVolumeSource) *RBDPersistentVolumeSource {
		return &v
	}).(RBDPersistentVolumeSourcePtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) string { return v.Image }).(pulumi.StringOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *SecretReference { return v.SecretRef }).(SecretReferencePtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RBDPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (RBDPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDPersistentVolumeSource)(nil)).Elem()
}

func (o RBDPersistentVolumeSourcePtrOutput) ToRBDPersistentVolumeSourcePtrOutput() RBDPersistentVolumeSourcePtrOutput {
	return o
}

func (o RBDPersistentVolumeSourcePtrOutput) ToRBDPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePtrOutput {
	return o
}

func (o RBDPersistentVolumeSourcePtrOutput) Elem() RBDPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) RBDPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret RBDPersistentVolumeSource
		return ret
	}).(RBDPersistentVolumeSourceOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSourcePatch struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image *string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RBDPersistentVolumeSourcePatchInput is an input type that accepts RBDPersistentVolumeSourcePatchArgs and RBDPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `RBDPersistentVolumeSourcePatchInput` via:
//
//	RBDPersistentVolumeSourcePatchArgs{...}
type RBDPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToRBDPersistentVolumeSourcePatchOutput() RBDPersistentVolumeSourcePatchOutput
	ToRBDPersistentVolumeSourcePatchOutputWithContext(context.Context) RBDPersistentVolumeSourcePatchOutput
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSourcePatchArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringPtrInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RBDPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i RBDPersistentVolumeSourcePatchArgs) ToRBDPersistentVolumeSourcePatchOutput() RBDPersistentVolumeSourcePatchOutput {
	return i.ToRBDPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i RBDPersistentVolumeSourcePatchArgs) ToRBDPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourcePatchOutput)
}

func (i RBDPersistentVolumeSourcePatchArgs) ToRBDPersistentVolumeSourcePatchPtrOutput() RBDPersistentVolumeSourcePatchPtrOutput {
	return i.ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i RBDPersistentVolumeSourcePatchArgs) ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourcePatchOutput).ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// RBDPersistentVolumeSourcePatchPtrInput is an input type that accepts RBDPersistentVolumeSourcePatchArgs, RBDPersistentVolumeSourcePatchPtr and RBDPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `RBDPersistentVolumeSourcePatchPtrInput` via:
//
//	        RBDPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type RBDPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToRBDPersistentVolumeSourcePatchPtrOutput() RBDPersistentVolumeSourcePatchPtrOutput
	ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) RBDPersistentVolumeSourcePatchPtrOutput
}

type rbdpersistentVolumeSourcePatchPtrType RBDPersistentVolumeSourcePatchArgs

func RBDPersistentVolumeSourcePatchPtr(v *RBDPersistentVolumeSourcePatchArgs) RBDPersistentVolumeSourcePatchPtrInput {
	return (*rbdpersistentVolumeSourcePatchPtrType)(v)
}

func (*rbdpersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *rbdpersistentVolumeSourcePatchPtrType) ToRBDPersistentVolumeSourcePatchPtrOutput() RBDPersistentVolumeSourcePatchPtrOutput {
	return i.ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *rbdpersistentVolumeSourcePatchPtrType) ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDPersistentVolumeSourcePatchPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (RBDPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o RBDPersistentVolumeSourcePatchOutput) ToRBDPersistentVolumeSourcePatchOutput() RBDPersistentVolumeSourcePatchOutput {
	return o
}

func (o RBDPersistentVolumeSourcePatchOutput) ToRBDPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchOutput {
	return o
}

func (o RBDPersistentVolumeSourcePatchOutput) ToRBDPersistentVolumeSourcePatchPtrOutput() RBDPersistentVolumeSourcePatchPtrOutput {
	return o.ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o RBDPersistentVolumeSourcePatchOutput) ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RBDPersistentVolumeSourcePatch) *RBDPersistentVolumeSourcePatch {
		return &v
	}).(RBDPersistentVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDPersistentVolumeSourcePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RBDPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (RBDPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o RBDPersistentVolumeSourcePatchPtrOutput) ToRBDPersistentVolumeSourcePatchPtrOutput() RBDPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o RBDPersistentVolumeSourcePatchPtrOutput) ToRBDPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o RBDPersistentVolumeSourcePatchPtrOutput) Elem() RBDPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) RBDPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret RBDPersistentVolumeSourcePatch
		return ret
	}).(RBDPersistentVolumeSourcePatchOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDPersistentVolumeSourcePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RBDVolumeSourceInput is an input type that accepts RBDVolumeSourceArgs and RBDVolumeSourceOutput values.
// You can construct a concrete instance of `RBDVolumeSourceInput` via:
//
//	RBDVolumeSourceArgs{...}
type RBDVolumeSourceInput interface {
	pulumi.Input

	ToRBDVolumeSourceOutput() RBDVolumeSourceOutput
	ToRBDVolumeSourceOutputWithContext(context.Context) RBDVolumeSourceOutput
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSourceArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RBDVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDVolumeSource)(nil)).Elem()
}

func (i RBDVolumeSourceArgs) ToRBDVolumeSourceOutput() RBDVolumeSourceOutput {
	return i.ToRBDVolumeSourceOutputWithContext(context.Background())
}

func (i RBDVolumeSourceArgs) ToRBDVolumeSourceOutputWithContext(ctx context.Context) RBDVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourceOutput)
}

func (i RBDVolumeSourceArgs) ToRBDVolumeSourcePtrOutput() RBDVolumeSourcePtrOutput {
	return i.ToRBDVolumeSourcePtrOutputWithContext(context.Background())
}

func (i RBDVolumeSourceArgs) ToRBDVolumeSourcePtrOutputWithContext(ctx context.Context) RBDVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourceOutput).ToRBDVolumeSourcePtrOutputWithContext(ctx)
}

// RBDVolumeSourcePtrInput is an input type that accepts RBDVolumeSourceArgs, RBDVolumeSourcePtr and RBDVolumeSourcePtrOutput values.
// You can construct a concrete instance of `RBDVolumeSourcePtrInput` via:
//
//	        RBDVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type RBDVolumeSourcePtrInput interface {
	pulumi.Input

	ToRBDVolumeSourcePtrOutput() RBDVolumeSourcePtrOutput
	ToRBDVolumeSourcePtrOutputWithContext(context.Context) RBDVolumeSourcePtrOutput
}

type rbdvolumeSourcePtrType RBDVolumeSourceArgs

func RBDVolumeSourcePtr(v *RBDVolumeSourceArgs) RBDVolumeSourcePtrInput {
	return (*rbdvolumeSourcePtrType)(v)
}

func (*rbdvolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDVolumeSource)(nil)).Elem()
}

func (i *rbdvolumeSourcePtrType) ToRBDVolumeSourcePtrOutput() RBDVolumeSourcePtrOutput {
	return i.ToRBDVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *rbdvolumeSourcePtrType) ToRBDVolumeSourcePtrOutputWithContext(ctx context.Context) RBDVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourcePtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSourceOutput struct{ *pulumi.OutputState }

func (RBDVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDVolumeSource)(nil)).Elem()
}

func (o RBDVolumeSourceOutput) ToRBDVolumeSourceOutput() RBDVolumeSourceOutput {
	return o
}

func (o RBDVolumeSourceOutput) ToRBDVolumeSourceOutputWithContext(ctx context.Context) RBDVolumeSourceOutput {
	return o
}

func (o RBDVolumeSourceOutput) ToRBDVolumeSourcePtrOutput() RBDVolumeSourcePtrOutput {
	return o.ToRBDVolumeSourcePtrOutputWithContext(context.Background())
}

func (o RBDVolumeSourceOutput) ToRBDVolumeSourcePtrOutputWithContext(ctx context.Context) RBDVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RBDVolumeSource) *RBDVolumeSource {
		return &v
	}).(RBDVolumeSourcePtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RBDVolumeSource) string { return v.Image }).(pulumi.StringOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RBDVolumeSource) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RBDVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (RBDVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDVolumeSource)(nil)).Elem()
}

func (o RBDVolumeSourcePtrOutput) ToRBDVolumeSourcePtrOutput() RBDVolumeSourcePtrOutput {
	return o
}

func (o RBDVolumeSourcePtrOutput) ToRBDVolumeSourcePtrOutputWithContext(ctx context.Context) RBDVolumeSourcePtrOutput {
	return o
}

func (o RBDVolumeSourcePtrOutput) Elem() RBDVolumeSourceOutput {
	return o.ApplyT(func(v *RBDVolumeSource) RBDVolumeSource {
		if v != nil {
			return *v
		}
		var ret RBDVolumeSource
		return ret
	}).(RBDVolumeSourceOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RBDVolumeSource) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSourcePatch struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image *string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RBDVolumeSourcePatchInput is an input type that accepts RBDVolumeSourcePatchArgs and RBDVolumeSourcePatchOutput values.
// You can construct a concrete instance of `RBDVolumeSourcePatchInput` via:
//
//	RBDVolumeSourcePatchArgs{...}
type RBDVolumeSourcePatchInput interface {
	pulumi.Input

	ToRBDVolumeSourcePatchOutput() RBDVolumeSourcePatchOutput
	ToRBDVolumeSourcePatchOutputWithContext(context.Context) RBDVolumeSourcePatchOutput
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSourcePatchArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringPtrInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RBDVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDVolumeSourcePatch)(nil)).Elem()
}

func (i RBDVolumeSourcePatchArgs) ToRBDVolumeSourcePatchOutput() RBDVolumeSourcePatchOutput {
	return i.ToRBDVolumeSourcePatchOutputWithContext(context.Background())
}

func (i RBDVolumeSourcePatchArgs) ToRBDVolumeSourcePatchOutputWithContext(ctx context.Context) RBDVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourcePatchOutput)
}

func (i RBDVolumeSourcePatchArgs) ToRBDVolumeSourcePatchPtrOutput() RBDVolumeSourcePatchPtrOutput {
	return i.ToRBDVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i RBDVolumeSourcePatchArgs) ToRBDVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourcePatchOutput).ToRBDVolumeSourcePatchPtrOutputWithContext(ctx)
}

// RBDVolumeSourcePatchPtrInput is an input type that accepts RBDVolumeSourcePatchArgs, RBDVolumeSourcePatchPtr and RBDVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `RBDVolumeSourcePatchPtrInput` via:
//
//	        RBDVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type RBDVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToRBDVolumeSourcePatchPtrOutput() RBDVolumeSourcePatchPtrOutput
	ToRBDVolumeSourcePatchPtrOutputWithContext(context.Context) RBDVolumeSourcePatchPtrOutput
}

type rbdvolumeSourcePatchPtrType RBDVolumeSourcePatchArgs

func RBDVolumeSourcePatchPtr(v *RBDVolumeSourcePatchArgs) RBDVolumeSourcePatchPtrInput {
	return (*rbdvolumeSourcePatchPtrType)(v)
}

func (*rbdvolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDVolumeSourcePatch)(nil)).Elem()
}

func (i *rbdvolumeSourcePatchPtrType) ToRBDVolumeSourcePatchPtrOutput() RBDVolumeSourcePatchPtrOutput {
	return i.ToRBDVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *rbdvolumeSourcePatchPtrType) ToRBDVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RBDVolumeSourcePatchPtrOutput)
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (RBDVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RBDVolumeSourcePatch)(nil)).Elem()
}

func (o RBDVolumeSourcePatchOutput) ToRBDVolumeSourcePatchOutput() RBDVolumeSourcePatchOutput {
	return o
}

func (o RBDVolumeSourcePatchOutput) ToRBDVolumeSourcePatchOutputWithContext(ctx context.Context) RBDVolumeSourcePatchOutput {
	return o
}

func (o RBDVolumeSourcePatchOutput) ToRBDVolumeSourcePatchPtrOutput() RBDVolumeSourcePatchPtrOutput {
	return o.ToRBDVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o RBDVolumeSourcePatchOutput) ToRBDVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RBDVolumeSourcePatch) *RBDVolumeSourcePatch {
		return &v
	}).(RBDVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RBDVolumeSourcePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RBDVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (RBDVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RBDVolumeSourcePatch)(nil)).Elem()
}

func (o RBDVolumeSourcePatchPtrOutput) ToRBDVolumeSourcePatchPtrOutput() RBDVolumeSourcePatchPtrOutput {
	return o
}

func (o RBDVolumeSourcePatchPtrOutput) ToRBDVolumeSourcePatchPtrOutputWithContext(ctx context.Context) RBDVolumeSourcePatchPtrOutput {
	return o
}

func (o RBDVolumeSourcePatchPtrOutput) Elem() RBDVolumeSourcePatchOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) RBDVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret RBDVolumeSourcePatch
		return ret
	}).(RBDVolumeSourcePatchOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o RBDVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RBDVolumeSourcePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RBDVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ReplicationControllerSpec `pulumi:"spec"`
	// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ReplicationControllerStatus `pulumi:"status"`
}

// ReplicationControllerTypeInput is an input type that accepts ReplicationControllerTypeArgs and ReplicationControllerTypeOutput values.
// You can construct a concrete instance of `ReplicationControllerTypeInput` via:
//
//	ReplicationControllerTypeArgs{...}
type ReplicationControllerTypeInput interface {
	pulumi.Input

	ToReplicationControllerTypeOutput() ReplicationControllerTypeOutput
	ToReplicationControllerTypeOutputWithContext(context.Context) ReplicationControllerTypeOutput
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicationControllerSpecPtrInput `pulumi:"spec"`
	// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicationControllerStatusPtrInput `pulumi:"status"`
}

func (ReplicationControllerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerType)(nil)).Elem()
}

func (i ReplicationControllerTypeArgs) ToReplicationControllerTypeOutput() ReplicationControllerTypeOutput {
	return i.ToReplicationControllerTypeOutputWithContext(context.Background())
}

func (i ReplicationControllerTypeArgs) ToReplicationControllerTypeOutputWithContext(ctx context.Context) ReplicationControllerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerTypeOutput)
}

// ReplicationControllerTypeArrayInput is an input type that accepts ReplicationControllerTypeArray and ReplicationControllerTypeArrayOutput values.
// You can construct a concrete instance of `ReplicationControllerTypeArrayInput` via:
//
//	ReplicationControllerTypeArray{ ReplicationControllerTypeArgs{...} }
type ReplicationControllerTypeArrayInput interface {
	pulumi.Input

	ToReplicationControllerTypeArrayOutput() ReplicationControllerTypeArrayOutput
	ToReplicationControllerTypeArrayOutputWithContext(context.Context) ReplicationControllerTypeArrayOutput
}

type ReplicationControllerTypeArray []ReplicationControllerTypeInput

func (ReplicationControllerTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerType)(nil)).Elem()
}

func (i ReplicationControllerTypeArray) ToReplicationControllerTypeArrayOutput() ReplicationControllerTypeArrayOutput {
	return i.ToReplicationControllerTypeArrayOutputWithContext(context.Background())
}

func (i ReplicationControllerTypeArray) ToReplicationControllerTypeArrayOutputWithContext(ctx context.Context) ReplicationControllerTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerTypeArrayOutput)
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerTypeOutput struct{ *pulumi.OutputState }

func (ReplicationControllerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerType)(nil)).Elem()
}

func (o ReplicationControllerTypeOutput) ToReplicationControllerTypeOutput() ReplicationControllerTypeOutput {
	return o
}

func (o ReplicationControllerTypeOutput) ToReplicationControllerTypeOutputWithContext(ctx context.Context) ReplicationControllerTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReplicationControllerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicationControllerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReplicationControllerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ReplicationControllerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicationControllerTypeOutput) Spec() ReplicationControllerSpecPtrOutput {
	return o.ApplyT(func(v ReplicationControllerType) *ReplicationControllerSpec { return v.Spec }).(ReplicationControllerSpecPtrOutput)
}

// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicationControllerTypeOutput) Status() ReplicationControllerStatusPtrOutput {
	return o.ApplyT(func(v ReplicationControllerType) *ReplicationControllerStatus { return v.Status }).(ReplicationControllerStatusPtrOutput)
}

type ReplicationControllerTypeArrayOutput struct{ *pulumi.OutputState }

func (ReplicationControllerTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerType)(nil)).Elem()
}

func (o ReplicationControllerTypeArrayOutput) ToReplicationControllerTypeArrayOutput() ReplicationControllerTypeArrayOutput {
	return o
}

func (o ReplicationControllerTypeArrayOutput) ToReplicationControllerTypeArrayOutputWithContext(ctx context.Context) ReplicationControllerTypeArrayOutput {
	return o
}

func (o ReplicationControllerTypeArrayOutput) Index(i pulumi.IntInput) ReplicationControllerTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationControllerType {
		return vs[0].([]ReplicationControllerType)[vs[1].(int)]
	}).(ReplicationControllerTypeOutput)
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerCondition struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of replication controller condition.
	Type string `pulumi:"type"`
}

// ReplicationControllerConditionInput is an input type that accepts ReplicationControllerConditionArgs and ReplicationControllerConditionOutput values.
// You can construct a concrete instance of `ReplicationControllerConditionInput` via:
//
//	ReplicationControllerConditionArgs{...}
type ReplicationControllerConditionInput interface {
	pulumi.Input

	ToReplicationControllerConditionOutput() ReplicationControllerConditionOutput
	ToReplicationControllerConditionOutputWithContext(context.Context) ReplicationControllerConditionOutput
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerConditionArgs struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of replication controller condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReplicationControllerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerCondition)(nil)).Elem()
}

func (i ReplicationControllerConditionArgs) ToReplicationControllerConditionOutput() ReplicationControllerConditionOutput {
	return i.ToReplicationControllerConditionOutputWithContext(context.Background())
}

func (i ReplicationControllerConditionArgs) ToReplicationControllerConditionOutputWithContext(ctx context.Context) ReplicationControllerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerConditionOutput)
}

// ReplicationControllerConditionArrayInput is an input type that accepts ReplicationControllerConditionArray and ReplicationControllerConditionArrayOutput values.
// You can construct a concrete instance of `ReplicationControllerConditionArrayInput` via:
//
//	ReplicationControllerConditionArray{ ReplicationControllerConditionArgs{...} }
type ReplicationControllerConditionArrayInput interface {
	pulumi.Input

	ToReplicationControllerConditionArrayOutput() ReplicationControllerConditionArrayOutput
	ToReplicationControllerConditionArrayOutputWithContext(context.Context) ReplicationControllerConditionArrayOutput
}

type ReplicationControllerConditionArray []ReplicationControllerConditionInput

func (ReplicationControllerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerCondition)(nil)).Elem()
}

func (i ReplicationControllerConditionArray) ToReplicationControllerConditionArrayOutput() ReplicationControllerConditionArrayOutput {
	return i.ToReplicationControllerConditionArrayOutputWithContext(context.Background())
}

func (i ReplicationControllerConditionArray) ToReplicationControllerConditionArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerConditionArrayOutput)
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerConditionOutput struct{ *pulumi.OutputState }

func (ReplicationControllerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerCondition)(nil)).Elem()
}

func (o ReplicationControllerConditionOutput) ToReplicationControllerConditionOutput() ReplicationControllerConditionOutput {
	return o
}

func (o ReplicationControllerConditionOutput) ToReplicationControllerConditionOutputWithContext(ctx context.Context) ReplicationControllerConditionOutput {
	return o
}

// The last time the condition transitioned from one status to another.
func (o ReplicationControllerConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o ReplicationControllerConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o ReplicationControllerConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ReplicationControllerConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationControllerCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type of replication controller condition.
func (o ReplicationControllerConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationControllerCondition) string { return v.Type }).(pulumi.StringOutput)
}

type ReplicationControllerConditionArrayOutput struct{ *pulumi.OutputState }

func (ReplicationControllerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerCondition)(nil)).Elem()
}

func (o ReplicationControllerConditionArrayOutput) ToReplicationControllerConditionArrayOutput() ReplicationControllerConditionArrayOutput {
	return o
}

func (o ReplicationControllerConditionArrayOutput) ToReplicationControllerConditionArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionArrayOutput {
	return o
}

func (o ReplicationControllerConditionArrayOutput) Index(i pulumi.IntInput) ReplicationControllerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationControllerCondition {
		return vs[0].([]ReplicationControllerCondition)[vs[1].(int)]
	}).(ReplicationControllerConditionOutput)
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerConditionPatch struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// Type of replication controller condition.
	Type *string `pulumi:"type"`
}

// ReplicationControllerConditionPatchInput is an input type that accepts ReplicationControllerConditionPatchArgs and ReplicationControllerConditionPatchOutput values.
// You can construct a concrete instance of `ReplicationControllerConditionPatchInput` via:
//
//	ReplicationControllerConditionPatchArgs{...}
type ReplicationControllerConditionPatchInput interface {
	pulumi.Input

	ToReplicationControllerConditionPatchOutput() ReplicationControllerConditionPatchOutput
	ToReplicationControllerConditionPatchOutputWithContext(context.Context) ReplicationControllerConditionPatchOutput
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerConditionPatchArgs struct {
	// The last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of replication controller condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReplicationControllerConditionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerConditionPatch)(nil)).Elem()
}

func (i ReplicationControllerConditionPatchArgs) ToReplicationControllerConditionPatchOutput() ReplicationControllerConditionPatchOutput {
	return i.ToReplicationControllerConditionPatchOutputWithContext(context.Background())
}

func (i ReplicationControllerConditionPatchArgs) ToReplicationControllerConditionPatchOutputWithContext(ctx context.Context) ReplicationControllerConditionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerConditionPatchOutput)
}

// ReplicationControllerConditionPatchArrayInput is an input type that accepts ReplicationControllerConditionPatchArray and ReplicationControllerConditionPatchArrayOutput values.
// You can construct a concrete instance of `ReplicationControllerConditionPatchArrayInput` via:
//
//	ReplicationControllerConditionPatchArray{ ReplicationControllerConditionPatchArgs{...} }
type ReplicationControllerConditionPatchArrayInput interface {
	pulumi.Input

	ToReplicationControllerConditionPatchArrayOutput() ReplicationControllerConditionPatchArrayOutput
	ToReplicationControllerConditionPatchArrayOutputWithContext(context.Context) ReplicationControllerConditionPatchArrayOutput
}

type ReplicationControllerConditionPatchArray []ReplicationControllerConditionPatchInput

func (ReplicationControllerConditionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerConditionPatch)(nil)).Elem()
}

func (i ReplicationControllerConditionPatchArray) ToReplicationControllerConditionPatchArrayOutput() ReplicationControllerConditionPatchArrayOutput {
	return i.ToReplicationControllerConditionPatchArrayOutputWithContext(context.Background())
}

func (i ReplicationControllerConditionPatchArray) ToReplicationControllerConditionPatchArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerConditionPatchArrayOutput)
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type ReplicationControllerConditionPatchOutput struct{ *pulumi.OutputState }

func (ReplicationControllerConditionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerConditionPatch)(nil)).Elem()
}

func (o ReplicationControllerConditionPatchOutput) ToReplicationControllerConditionPatchOutput() ReplicationControllerConditionPatchOutput {
	return o
}

func (o ReplicationControllerConditionPatchOutput) ToReplicationControllerConditionPatchOutputWithContext(ctx context.Context) ReplicationControllerConditionPatchOutput {
	return o
}

// The last time the condition transitioned from one status to another.
func (o ReplicationControllerConditionPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerConditionPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o ReplicationControllerConditionPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerConditionPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o ReplicationControllerConditionPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerConditionPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ReplicationControllerConditionPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerConditionPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of replication controller condition.
func (o ReplicationControllerConditionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerConditionPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReplicationControllerConditionPatchArrayOutput struct{ *pulumi.OutputState }

func (ReplicationControllerConditionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationControllerConditionPatch)(nil)).Elem()
}

func (o ReplicationControllerConditionPatchArrayOutput) ToReplicationControllerConditionPatchArrayOutput() ReplicationControllerConditionPatchArrayOutput {
	return o
}

func (o ReplicationControllerConditionPatchArrayOutput) ToReplicationControllerConditionPatchArrayOutputWithContext(ctx context.Context) ReplicationControllerConditionPatchArrayOutput {
	return o
}

func (o ReplicationControllerConditionPatchArrayOutput) Index(i pulumi.IntInput) ReplicationControllerConditionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationControllerConditionPatch {
		return vs[0].([]ReplicationControllerConditionPatch)[vs[1].(int)]
	}).(ReplicationControllerConditionPatchOutput)
}

// ReplicationControllerList is a collection of replication controllers.
type ReplicationControllerListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items []ReplicationControllerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ReplicationControllerListTypeInput is an input type that accepts ReplicationControllerListTypeArgs and ReplicationControllerListTypeOutput values.
// You can construct a concrete instance of `ReplicationControllerListTypeInput` via:
//
//	ReplicationControllerListTypeArgs{...}
type ReplicationControllerListTypeInput interface {
	pulumi.Input

	ToReplicationControllerListTypeOutput() ReplicationControllerListTypeOutput
	ToReplicationControllerListTypeOutputWithContext(context.Context) ReplicationControllerListTypeOutput
}

// ReplicationControllerList is a collection of replication controllers.
type ReplicationControllerListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items ReplicationControllerTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ReplicationControllerListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerListType)(nil)).Elem()
}

func (i ReplicationControllerListTypeArgs) ToReplicationControllerListTypeOutput() ReplicationControllerListTypeOutput {
	return i.ToReplicationControllerListTypeOutputWithContext(context.Background())
}

func (i ReplicationControllerListTypeArgs) ToReplicationControllerListTypeOutputWithContext(ctx context.Context) ReplicationControllerListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerListTypeOutput)
}

// ReplicationControllerList is a collection of replication controllers.
type ReplicationControllerListTypeOutput struct{ *pulumi.OutputState }

func (ReplicationControllerListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerListType)(nil)).Elem()
}

func (o ReplicationControllerListTypeOutput) ToReplicationControllerListTypeOutput() ReplicationControllerListTypeOutput {
	return o
}

func (o ReplicationControllerListTypeOutput) ToReplicationControllerListTypeOutputWithContext(ctx context.Context) ReplicationControllerListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReplicationControllerListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
func (o ReplicationControllerListTypeOutput) Items() ReplicationControllerTypeArrayOutput {
	return o.ApplyT(func(v ReplicationControllerListType) []ReplicationControllerType { return v.Items }).(ReplicationControllerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicationControllerListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicationControllerListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ReplicationControllerListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ReplicationControllerSpecPatch `pulumi:"spec"`
	// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ReplicationControllerStatusPatch `pulumi:"status"`
}

// ReplicationControllerPatchTypeInput is an input type that accepts ReplicationControllerPatchTypeArgs and ReplicationControllerPatchTypeOutput values.
// You can construct a concrete instance of `ReplicationControllerPatchTypeInput` via:
//
//	ReplicationControllerPatchTypeArgs{...}
type ReplicationControllerPatchTypeInput interface {
	pulumi.Input

	ToReplicationControllerPatchTypeOutput() ReplicationControllerPatchTypeOutput
	ToReplicationControllerPatchTypeOutputWithContext(context.Context) ReplicationControllerPatchTypeOutput
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ReplicationControllerSpecPatchPtrInput `pulumi:"spec"`
	// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ReplicationControllerStatusPatchPtrInput `pulumi:"status"`
}

func (ReplicationControllerPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerPatchType)(nil)).Elem()
}

func (i ReplicationControllerPatchTypeArgs) ToReplicationControllerPatchTypeOutput() ReplicationControllerPatchTypeOutput {
	return i.ToReplicationControllerPatchTypeOutputWithContext(context.Background())
}

func (i ReplicationControllerPatchTypeArgs) ToReplicationControllerPatchTypeOutputWithContext(ctx context.Context) ReplicationControllerPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerPatchTypeOutput)
}

// ReplicationController represents the configuration of a replication controller.
type ReplicationControllerPatchTypeOutput struct{ *pulumi.OutputState }

func (ReplicationControllerPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerPatchType)(nil)).Elem()
}

func (o ReplicationControllerPatchTypeOutput) ToReplicationControllerPatchTypeOutput() ReplicationControllerPatchTypeOutput {
	return o
}

func (o ReplicationControllerPatchTypeOutput) ToReplicationControllerPatchTypeOutputWithContext(ctx context.Context) ReplicationControllerPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReplicationControllerPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReplicationControllerPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationControllerPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReplicationControllerPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ReplicationControllerPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicationControllerPatchTypeOutput) Spec() ReplicationControllerSpecPatchPtrOutput {
	return o.ApplyT(func(v ReplicationControllerPatchType) *ReplicationControllerSpecPatch { return v.Spec }).(ReplicationControllerSpecPatchPtrOutput)
}

// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ReplicationControllerPatchTypeOutput) Status() ReplicationControllerStatusPatchPtrOutput {
	return o.ApplyT(func(v ReplicationControllerPatchType) *ReplicationControllerStatusPatch { return v.Status }).(ReplicationControllerStatusPatchPtrOutput)
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas *int `pulumi:"replicas"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector map[string]string `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template *PodTemplateSpec `pulumi:"template"`
}

// ReplicationControllerSpecInput is an input type that accepts ReplicationControllerSpecArgs and ReplicationControllerSpecOutput values.
// You can construct a concrete instance of `ReplicationControllerSpecInput` via:
//
//	ReplicationControllerSpecArgs{...}
type ReplicationControllerSpecInput interface {
	pulumi.Input

	ToReplicationControllerSpecOutput() ReplicationControllerSpecOutput
	ToReplicationControllerSpecOutputWithContext(context.Context) ReplicationControllerSpecOutput
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpecArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template PodTemplateSpecPtrInput `pulumi:"template"`
}

func (ReplicationControllerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerSpec)(nil)).Elem()
}

func (i ReplicationControllerSpecArgs) ToReplicationControllerSpecOutput() ReplicationControllerSpecOutput {
	return i.ToReplicationControllerSpecOutputWithContext(context.Background())
}

func (i ReplicationControllerSpecArgs) ToReplicationControllerSpecOutputWithContext(ctx context.Context) ReplicationControllerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecOutput)
}

func (i ReplicationControllerSpecArgs) ToReplicationControllerSpecPtrOutput() ReplicationControllerSpecPtrOutput {
	return i.ToReplicationControllerSpecPtrOutputWithContext(context.Background())
}

func (i ReplicationControllerSpecArgs) ToReplicationControllerSpecPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecOutput).ToReplicationControllerSpecPtrOutputWithContext(ctx)
}

// ReplicationControllerSpecPtrInput is an input type that accepts ReplicationControllerSpecArgs, ReplicationControllerSpecPtr and ReplicationControllerSpecPtrOutput values.
// You can construct a concrete instance of `ReplicationControllerSpecPtrInput` via:
//
//	        ReplicationControllerSpecArgs{...}
//
//	or:
//
//	        nil
type ReplicationControllerSpecPtrInput interface {
	pulumi.Input

	ToReplicationControllerSpecPtrOutput() ReplicationControllerSpecPtrOutput
	ToReplicationControllerSpecPtrOutputWithContext(context.Context) ReplicationControllerSpecPtrOutput
}

type replicationControllerSpecPtrType ReplicationControllerSpecArgs

func ReplicationControllerSpecPtr(v *ReplicationControllerSpecArgs) ReplicationControllerSpecPtrInput {
	return (*replicationControllerSpecPtrType)(v)
}

func (*replicationControllerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerSpec)(nil)).Elem()
}

func (i *replicationControllerSpecPtrType) ToReplicationControllerSpecPtrOutput() ReplicationControllerSpecPtrOutput {
	return i.ToReplicationControllerSpecPtrOutputWithContext(context.Background())
}

func (i *replicationControllerSpecPtrType) ToReplicationControllerSpecPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecPtrOutput)
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpecOutput struct{ *pulumi.OutputState }

func (ReplicationControllerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerSpec)(nil)).Elem()
}

func (o ReplicationControllerSpecOutput) ToReplicationControllerSpecOutput() ReplicationControllerSpecOutput {
	return o
}

func (o ReplicationControllerSpecOutput) ToReplicationControllerSpecOutputWithContext(ctx context.Context) ReplicationControllerSpecOutput {
	return o
}

func (o ReplicationControllerSpecOutput) ToReplicationControllerSpecPtrOutput() ReplicationControllerSpecPtrOutput {
	return o.ToReplicationControllerSpecPtrOutputWithContext(context.Background())
}

func (o ReplicationControllerSpecOutput) ToReplicationControllerSpecPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationControllerSpec) *ReplicationControllerSpec {
		return &v
	}).(ReplicationControllerSpecPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicationControllerSpecOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpec) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicationControllerSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReplicationControllerSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicationControllerSpecOutput) Template() PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpec) *PodTemplateSpec { return v.Template }).(PodTemplateSpecPtrOutput)
}

type ReplicationControllerSpecPtrOutput struct{ *pulumi.OutputState }

func (ReplicationControllerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerSpec)(nil)).Elem()
}

func (o ReplicationControllerSpecPtrOutput) ToReplicationControllerSpecPtrOutput() ReplicationControllerSpecPtrOutput {
	return o
}

func (o ReplicationControllerSpecPtrOutput) ToReplicationControllerSpecPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPtrOutput {
	return o
}

func (o ReplicationControllerSpecPtrOutput) Elem() ReplicationControllerSpecOutput {
	return o.ApplyT(func(v *ReplicationControllerSpec) ReplicationControllerSpec {
		if v != nil {
			return *v
		}
		var ret ReplicationControllerSpec
		return ret
	}).(ReplicationControllerSpecOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicationControllerSpecPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpec) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicationControllerSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicationControllerSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicationControllerSpecPtrOutput) Template() PodTemplateSpecPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpec) *PodTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Template
	}).(PodTemplateSpecPtrOutput)
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpecPatch struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas *int `pulumi:"replicas"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector map[string]string `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template *PodTemplateSpecPatch `pulumi:"template"`
}

// ReplicationControllerSpecPatchInput is an input type that accepts ReplicationControllerSpecPatchArgs and ReplicationControllerSpecPatchOutput values.
// You can construct a concrete instance of `ReplicationControllerSpecPatchInput` via:
//
//	ReplicationControllerSpecPatchArgs{...}
type ReplicationControllerSpecPatchInput interface {
	pulumi.Input

	ToReplicationControllerSpecPatchOutput() ReplicationControllerSpecPatchOutput
	ToReplicationControllerSpecPatchOutputWithContext(context.Context) ReplicationControllerSpecPatchOutput
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpecPatchArgs struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
	Template PodTemplateSpecPatchPtrInput `pulumi:"template"`
}

func (ReplicationControllerSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerSpecPatch)(nil)).Elem()
}

func (i ReplicationControllerSpecPatchArgs) ToReplicationControllerSpecPatchOutput() ReplicationControllerSpecPatchOutput {
	return i.ToReplicationControllerSpecPatchOutputWithContext(context.Background())
}

func (i ReplicationControllerSpecPatchArgs) ToReplicationControllerSpecPatchOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecPatchOutput)
}

func (i ReplicationControllerSpecPatchArgs) ToReplicationControllerSpecPatchPtrOutput() ReplicationControllerSpecPatchPtrOutput {
	return i.ToReplicationControllerSpecPatchPtrOutputWithContext(context.Background())
}

func (i ReplicationControllerSpecPatchArgs) ToReplicationControllerSpecPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecPatchOutput).ToReplicationControllerSpecPatchPtrOutputWithContext(ctx)
}

// ReplicationControllerSpecPatchPtrInput is an input type that accepts ReplicationControllerSpecPatchArgs, ReplicationControllerSpecPatchPtr and ReplicationControllerSpecPatchPtrOutput values.
// You can construct a concrete instance of `ReplicationControllerSpecPatchPtrInput` via:
//
//	        ReplicationControllerSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ReplicationControllerSpecPatchPtrInput interface {
	pulumi.Input

	ToReplicationControllerSpecPatchPtrOutput() ReplicationControllerSpecPatchPtrOutput
	ToReplicationControllerSpecPatchPtrOutputWithContext(context.Context) ReplicationControllerSpecPatchPtrOutput
}

type replicationControllerSpecPatchPtrType ReplicationControllerSpecPatchArgs

func ReplicationControllerSpecPatchPtr(v *ReplicationControllerSpecPatchArgs) ReplicationControllerSpecPatchPtrInput {
	return (*replicationControllerSpecPatchPtrType)(v)
}

func (*replicationControllerSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerSpecPatch)(nil)).Elem()
}

func (i *replicationControllerSpecPatchPtrType) ToReplicationControllerSpecPatchPtrOutput() ReplicationControllerSpecPatchPtrOutput {
	return i.ToReplicationControllerSpecPatchPtrOutputWithContext(context.Background())
}

func (i *replicationControllerSpecPatchPtrType) ToReplicationControllerSpecPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerSpecPatchPtrOutput)
}

// ReplicationControllerSpec is the specification of a replication controller.
type ReplicationControllerSpecPatchOutput struct{ *pulumi.OutputState }

func (ReplicationControllerSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerSpecPatch)(nil)).Elem()
}

func (o ReplicationControllerSpecPatchOutput) ToReplicationControllerSpecPatchOutput() ReplicationControllerSpecPatchOutput {
	return o
}

func (o ReplicationControllerSpecPatchOutput) ToReplicationControllerSpecPatchOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchOutput {
	return o
}

func (o ReplicationControllerSpecPatchOutput) ToReplicationControllerSpecPatchPtrOutput() ReplicationControllerSpecPatchPtrOutput {
	return o.ToReplicationControllerSpecPatchPtrOutputWithContext(context.Background())
}

func (o ReplicationControllerSpecPatchOutput) ToReplicationControllerSpecPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationControllerSpecPatch) *ReplicationControllerSpecPatch {
		return &v
	}).(ReplicationControllerSpecPatchPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicationControllerSpecPatchOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpecPatch) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicationControllerSpecPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReplicationControllerSpecPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicationControllerSpecPatchOutput) Template() PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ReplicationControllerSpecPatch) *PodTemplateSpecPatch { return v.Template }).(PodTemplateSpecPatchPtrOutput)
}

type ReplicationControllerSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ReplicationControllerSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerSpecPatch)(nil)).Elem()
}

func (o ReplicationControllerSpecPatchPtrOutput) ToReplicationControllerSpecPatchPtrOutput() ReplicationControllerSpecPatchPtrOutput {
	return o
}

func (o ReplicationControllerSpecPatchPtrOutput) ToReplicationControllerSpecPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerSpecPatchPtrOutput {
	return o
}

func (o ReplicationControllerSpecPatchPtrOutput) Elem() ReplicationControllerSpecPatchOutput {
	return o.ApplyT(func(v *ReplicationControllerSpecPatch) ReplicationControllerSpecPatch {
		if v != nil {
			return *v
		}
		var ret ReplicationControllerSpecPatch
		return ret
	}).(ReplicationControllerSpecPatchOutput)
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (o ReplicationControllerSpecPatchPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ReplicationControllerSpecPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicationControllerSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (o ReplicationControllerSpecPatchPtrOutput) Template() PodTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerSpecPatch) *PodTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Template
	}).(PodTemplateSpecPatchPtrOutput)
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions []ReplicationControllerCondition `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas *int `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas int `pulumi:"replicas"`
}

// ReplicationControllerStatusInput is an input type that accepts ReplicationControllerStatusArgs and ReplicationControllerStatusOutput values.
// You can construct a concrete instance of `ReplicationControllerStatusInput` via:
//
//	ReplicationControllerStatusArgs{...}
type ReplicationControllerStatusInput interface {
	pulumi.Input

	ToReplicationControllerStatusOutput() ReplicationControllerStatusOutput
	ToReplicationControllerStatusOutputWithContext(context.Context) ReplicationControllerStatusOutput
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatusArgs struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions ReplicationControllerConditionArrayInput `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas pulumi.IntPtrInput `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas pulumi.IntInput `pulumi:"replicas"`
}

func (ReplicationControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerStatus)(nil)).Elem()
}

func (i ReplicationControllerStatusArgs) ToReplicationControllerStatusOutput() ReplicationControllerStatusOutput {
	return i.ToReplicationControllerStatusOutputWithContext(context.Background())
}

func (i ReplicationControllerStatusArgs) ToReplicationControllerStatusOutputWithContext(ctx context.Context) ReplicationControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusOutput)
}

func (i ReplicationControllerStatusArgs) ToReplicationControllerStatusPtrOutput() ReplicationControllerStatusPtrOutput {
	return i.ToReplicationControllerStatusPtrOutputWithContext(context.Background())
}

func (i ReplicationControllerStatusArgs) ToReplicationControllerStatusPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusOutput).ToReplicationControllerStatusPtrOutputWithContext(ctx)
}

// ReplicationControllerStatusPtrInput is an input type that accepts ReplicationControllerStatusArgs, ReplicationControllerStatusPtr and ReplicationControllerStatusPtrOutput values.
// You can construct a concrete instance of `ReplicationControllerStatusPtrInput` via:
//
//	        ReplicationControllerStatusArgs{...}
//
//	or:
//
//	        nil
type ReplicationControllerStatusPtrInput interface {
	pulumi.Input

	ToReplicationControllerStatusPtrOutput() ReplicationControllerStatusPtrOutput
	ToReplicationControllerStatusPtrOutputWithContext(context.Context) ReplicationControllerStatusPtrOutput
}

type replicationControllerStatusPtrType ReplicationControllerStatusArgs

func ReplicationControllerStatusPtr(v *ReplicationControllerStatusArgs) ReplicationControllerStatusPtrInput {
	return (*replicationControllerStatusPtrType)(v)
}

func (*replicationControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerStatus)(nil)).Elem()
}

func (i *replicationControllerStatusPtrType) ToReplicationControllerStatusPtrOutput() ReplicationControllerStatusPtrOutput {
	return i.ToReplicationControllerStatusPtrOutputWithContext(context.Background())
}

func (i *replicationControllerStatusPtrType) ToReplicationControllerStatusPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusPtrOutput)
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatusOutput struct{ *pulumi.OutputState }

func (ReplicationControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerStatus)(nil)).Elem()
}

func (o ReplicationControllerStatusOutput) ToReplicationControllerStatusOutput() ReplicationControllerStatusOutput {
	return o
}

func (o ReplicationControllerStatusOutput) ToReplicationControllerStatusOutputWithContext(ctx context.Context) ReplicationControllerStatusOutput {
	return o
}

func (o ReplicationControllerStatusOutput) ToReplicationControllerStatusPtrOutput() ReplicationControllerStatusPtrOutput {
	return o.ToReplicationControllerStatusPtrOutputWithContext(context.Background())
}

func (o ReplicationControllerStatusOutput) ToReplicationControllerStatusPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationControllerStatus) *ReplicationControllerStatus {
		return &v
	}).(ReplicationControllerStatusPtrOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
func (o ReplicationControllerStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replication controller's current state.
func (o ReplicationControllerStatusOutput) Conditions() ReplicationControllerConditionArrayOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) []ReplicationControllerCondition { return v.Conditions }).(ReplicationControllerConditionArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replication controller.
func (o ReplicationControllerStatusOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) *int { return v.FullyLabeledReplicas }).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed replication controller.
func (o ReplicationControllerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replication controller.
func (o ReplicationControllerStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicationControllerStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

type ReplicationControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (ReplicationControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerStatus)(nil)).Elem()
}

func (o ReplicationControllerStatusPtrOutput) ToReplicationControllerStatusPtrOutput() ReplicationControllerStatusPtrOutput {
	return o
}

func (o ReplicationControllerStatusPtrOutput) ToReplicationControllerStatusPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPtrOutput {
	return o
}

func (o ReplicationControllerStatusPtrOutput) Elem() ReplicationControllerStatusOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) ReplicationControllerStatus {
		if v != nil {
			return *v
		}
		var ret ReplicationControllerStatus
		return ret
	}).(ReplicationControllerStatusOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
func (o ReplicationControllerStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replication controller's current state.
func (o ReplicationControllerStatusPtrOutput) Conditions() ReplicationControllerConditionArrayOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) []ReplicationControllerCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ReplicationControllerConditionArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replication controller.
func (o ReplicationControllerStatusPtrOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) *int {
		if v == nil {
			return nil
		}
		return v.FullyLabeledReplicas
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed replication controller.
func (o ReplicationControllerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replication controller.
func (o ReplicationControllerStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatusPatch struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions []ReplicationControllerConditionPatch `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas *int `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas *int `pulumi:"replicas"`
}

// ReplicationControllerStatusPatchInput is an input type that accepts ReplicationControllerStatusPatchArgs and ReplicationControllerStatusPatchOutput values.
// You can construct a concrete instance of `ReplicationControllerStatusPatchInput` via:
//
//	ReplicationControllerStatusPatchArgs{...}
type ReplicationControllerStatusPatchInput interface {
	pulumi.Input

	ToReplicationControllerStatusPatchOutput() ReplicationControllerStatusPatchOutput
	ToReplicationControllerStatusPatchOutputWithContext(context.Context) ReplicationControllerStatusPatchOutput
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatusPatchArgs struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions ReplicationControllerConditionPatchArrayInput `pulumi:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas pulumi.IntPtrInput `pulumi:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ReplicationControllerStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerStatusPatch)(nil)).Elem()
}

func (i ReplicationControllerStatusPatchArgs) ToReplicationControllerStatusPatchOutput() ReplicationControllerStatusPatchOutput {
	return i.ToReplicationControllerStatusPatchOutputWithContext(context.Background())
}

func (i ReplicationControllerStatusPatchArgs) ToReplicationControllerStatusPatchOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusPatchOutput)
}

func (i ReplicationControllerStatusPatchArgs) ToReplicationControllerStatusPatchPtrOutput() ReplicationControllerStatusPatchPtrOutput {
	return i.ToReplicationControllerStatusPatchPtrOutputWithContext(context.Background())
}

func (i ReplicationControllerStatusPatchArgs) ToReplicationControllerStatusPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusPatchOutput).ToReplicationControllerStatusPatchPtrOutputWithContext(ctx)
}

// ReplicationControllerStatusPatchPtrInput is an input type that accepts ReplicationControllerStatusPatchArgs, ReplicationControllerStatusPatchPtr and ReplicationControllerStatusPatchPtrOutput values.
// You can construct a concrete instance of `ReplicationControllerStatusPatchPtrInput` via:
//
//	        ReplicationControllerStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ReplicationControllerStatusPatchPtrInput interface {
	pulumi.Input

	ToReplicationControllerStatusPatchPtrOutput() ReplicationControllerStatusPatchPtrOutput
	ToReplicationControllerStatusPatchPtrOutputWithContext(context.Context) ReplicationControllerStatusPatchPtrOutput
}

type replicationControllerStatusPatchPtrType ReplicationControllerStatusPatchArgs

func ReplicationControllerStatusPatchPtr(v *ReplicationControllerStatusPatchArgs) ReplicationControllerStatusPatchPtrInput {
	return (*replicationControllerStatusPatchPtrType)(v)
}

func (*replicationControllerStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerStatusPatch)(nil)).Elem()
}

func (i *replicationControllerStatusPatchPtrType) ToReplicationControllerStatusPatchPtrOutput() ReplicationControllerStatusPatchPtrOutput {
	return i.ToReplicationControllerStatusPatchPtrOutputWithContext(context.Background())
}

func (i *replicationControllerStatusPatchPtrType) ToReplicationControllerStatusPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationControllerStatusPatchPtrOutput)
}

// ReplicationControllerStatus represents the current status of a replication controller.
type ReplicationControllerStatusPatchOutput struct{ *pulumi.OutputState }

func (ReplicationControllerStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationControllerStatusPatch)(nil)).Elem()
}

func (o ReplicationControllerStatusPatchOutput) ToReplicationControllerStatusPatchOutput() ReplicationControllerStatusPatchOutput {
	return o
}

func (o ReplicationControllerStatusPatchOutput) ToReplicationControllerStatusPatchOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchOutput {
	return o
}

func (o ReplicationControllerStatusPatchOutput) ToReplicationControllerStatusPatchPtrOutput() ReplicationControllerStatusPatchPtrOutput {
	return o.ToReplicationControllerStatusPatchPtrOutputWithContext(context.Background())
}

func (o ReplicationControllerStatusPatchOutput) ToReplicationControllerStatusPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationControllerStatusPatch) *ReplicationControllerStatusPatch {
		return &v
	}).(ReplicationControllerStatusPatchPtrOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
func (o ReplicationControllerStatusPatchOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replication controller's current state.
func (o ReplicationControllerStatusPatchOutput) Conditions() ReplicationControllerConditionPatchArrayOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) []ReplicationControllerConditionPatch { return v.Conditions }).(ReplicationControllerConditionPatchArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replication controller.
func (o ReplicationControllerStatusPatchOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) *int { return v.FullyLabeledReplicas }).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed replication controller.
func (o ReplicationControllerStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replication controller.
func (o ReplicationControllerStatusPatchOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationControllerStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ReplicationControllerStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ReplicationControllerStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationControllerStatusPatch)(nil)).Elem()
}

func (o ReplicationControllerStatusPatchPtrOutput) ToReplicationControllerStatusPatchPtrOutput() ReplicationControllerStatusPatchPtrOutput {
	return o
}

func (o ReplicationControllerStatusPatchPtrOutput) ToReplicationControllerStatusPatchPtrOutputWithContext(ctx context.Context) ReplicationControllerStatusPatchPtrOutput {
	return o
}

func (o ReplicationControllerStatusPatchPtrOutput) Elem() ReplicationControllerStatusPatchOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) ReplicationControllerStatusPatch {
		if v != nil {
			return *v
		}
		var ret ReplicationControllerStatusPatch
		return ret
	}).(ReplicationControllerStatusPatchOutput)
}

// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
func (o ReplicationControllerStatusPatchPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a replication controller's current state.
func (o ReplicationControllerStatusPatchPtrOutput) Conditions() ReplicationControllerConditionPatchArrayOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) []ReplicationControllerConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ReplicationControllerConditionPatchArrayOutput)
}

// The number of pods that have labels matching the labels of the pod template of the replication controller.
func (o ReplicationControllerStatusPatchPtrOutput) FullyLabeledReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.FullyLabeledReplicas
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration reflects the generation of the most recently observed replication controller.
func (o ReplicationControllerStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The number of ready replicas for this replication controller.
func (o ReplicationControllerStatusPatchPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (o ReplicationControllerStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicationControllerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaim struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// ResourceClaimInput is an input type that accepts ResourceClaimArgs and ResourceClaimOutput values.
// You can construct a concrete instance of `ResourceClaimInput` via:
//
//	ResourceClaimArgs{...}
type ResourceClaimInput interface {
	pulumi.Input

	ToResourceClaimOutput() ResourceClaimOutput
	ToResourceClaimOutputWithContext(context.Context) ResourceClaimOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaimArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ResourceClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaim)(nil)).Elem()
}

func (i ResourceClaimArgs) ToResourceClaimOutput() ResourceClaimOutput {
	return i.ToResourceClaimOutputWithContext(context.Background())
}

func (i ResourceClaimArgs) ToResourceClaimOutputWithContext(ctx context.Context) ResourceClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimOutput)
}

// ResourceClaimArrayInput is an input type that accepts ResourceClaimArray and ResourceClaimArrayOutput values.
// You can construct a concrete instance of `ResourceClaimArrayInput` via:
//
//	ResourceClaimArray{ ResourceClaimArgs{...} }
type ResourceClaimArrayInput interface {
	pulumi.Input

	ToResourceClaimArrayOutput() ResourceClaimArrayOutput
	ToResourceClaimArrayOutputWithContext(context.Context) ResourceClaimArrayOutput
}

type ResourceClaimArray []ResourceClaimInput

func (ResourceClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaim)(nil)).Elem()
}

func (i ResourceClaimArray) ToResourceClaimArrayOutput() ResourceClaimArrayOutput {
	return i.ToResourceClaimArrayOutputWithContext(context.Background())
}

func (i ResourceClaimArray) ToResourceClaimArrayOutputWithContext(ctx context.Context) ResourceClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaimOutput struct{ *pulumi.OutputState }

func (ResourceClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaim)(nil)).Elem()
}

func (o ResourceClaimOutput) ToResourceClaimOutput() ResourceClaimOutput {
	return o
}

func (o ResourceClaimOutput) ToResourceClaimOutputWithContext(ctx context.Context) ResourceClaimOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o ResourceClaimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaim) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceClaimArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaim)(nil)).Elem()
}

func (o ResourceClaimArrayOutput) ToResourceClaimArrayOutput() ResourceClaimArrayOutput {
	return o
}

func (o ResourceClaimArrayOutput) ToResourceClaimArrayOutputWithContext(ctx context.Context) ResourceClaimArrayOutput {
	return o
}

func (o ResourceClaimArrayOutput) Index(i pulumi.IntInput) ResourceClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaim {
		return vs[0].([]ResourceClaim)[vs[1].(int)]
	}).(ResourceClaimOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaimPatch struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name *string `pulumi:"name"`
}

// ResourceClaimPatchInput is an input type that accepts ResourceClaimPatchArgs and ResourceClaimPatchOutput values.
// You can construct a concrete instance of `ResourceClaimPatchInput` via:
//
//	ResourceClaimPatchArgs{...}
type ResourceClaimPatchInput interface {
	pulumi.Input

	ToResourceClaimPatchOutput() ResourceClaimPatchOutput
	ToResourceClaimPatchOutputWithContext(context.Context) ResourceClaimPatchOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaimPatchArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceClaimPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatch)(nil)).Elem()
}

func (i ResourceClaimPatchArgs) ToResourceClaimPatchOutput() ResourceClaimPatchOutput {
	return i.ToResourceClaimPatchOutputWithContext(context.Background())
}

func (i ResourceClaimPatchArgs) ToResourceClaimPatchOutputWithContext(ctx context.Context) ResourceClaimPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimPatchOutput)
}

// ResourceClaimPatchArrayInput is an input type that accepts ResourceClaimPatchArray and ResourceClaimPatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimPatchArrayInput` via:
//
//	ResourceClaimPatchArray{ ResourceClaimPatchArgs{...} }
type ResourceClaimPatchArrayInput interface {
	pulumi.Input

	ToResourceClaimPatchArrayOutput() ResourceClaimPatchArrayOutput
	ToResourceClaimPatchArrayOutputWithContext(context.Context) ResourceClaimPatchArrayOutput
}

type ResourceClaimPatchArray []ResourceClaimPatchInput

func (ResourceClaimPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimPatch)(nil)).Elem()
}

func (i ResourceClaimPatchArray) ToResourceClaimPatchArrayOutput() ResourceClaimPatchArrayOutput {
	return i.ToResourceClaimPatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimPatchArray) ToResourceClaimPatchArrayOutputWithContext(ctx context.Context) ResourceClaimPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimPatchArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ResourceClaimPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatch)(nil)).Elem()
}

func (o ResourceClaimPatchOutput) ToResourceClaimPatchOutput() ResourceClaimPatchOutput {
	return o
}

func (o ResourceClaimPatchOutput) ToResourceClaimPatchOutputWithContext(ctx context.Context) ResourceClaimPatchOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o ResourceClaimPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceClaimPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimPatch)(nil)).Elem()
}

func (o ResourceClaimPatchArrayOutput) ToResourceClaimPatchArrayOutput() ResourceClaimPatchArrayOutput {
	return o
}

func (o ResourceClaimPatchArrayOutput) ToResourceClaimPatchArrayOutputWithContext(ctx context.Context) ResourceClaimPatchArrayOutput {
	return o
}

func (o ResourceClaimPatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimPatch {
		return vs[0].([]ResourceClaimPatch)[vs[1].(int)]
	}).(ResourceClaimPatchOutput)
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelector struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// ResourceFieldSelectorInput is an input type that accepts ResourceFieldSelectorArgs and ResourceFieldSelectorOutput values.
// You can construct a concrete instance of `ResourceFieldSelectorInput` via:
//
//	ResourceFieldSelectorArgs{...}
type ResourceFieldSelectorInput interface {
	pulumi.Input

	ToResourceFieldSelectorOutput() ResourceFieldSelectorOutput
	ToResourceFieldSelectorOutputWithContext(context.Context) ResourceFieldSelectorOutput
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelectorArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (ResourceFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFieldSelector)(nil)).Elem()
}

func (i ResourceFieldSelectorArgs) ToResourceFieldSelectorOutput() ResourceFieldSelectorOutput {
	return i.ToResourceFieldSelectorOutputWithContext(context.Background())
}

func (i ResourceFieldSelectorArgs) ToResourceFieldSelectorOutputWithContext(ctx context.Context) ResourceFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorOutput)
}

func (i ResourceFieldSelectorArgs) ToResourceFieldSelectorPtrOutput() ResourceFieldSelectorPtrOutput {
	return i.ToResourceFieldSelectorPtrOutputWithContext(context.Background())
}

func (i ResourceFieldSelectorArgs) ToResourceFieldSelectorPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorOutput).ToResourceFieldSelectorPtrOutputWithContext(ctx)
}

// ResourceFieldSelectorPtrInput is an input type that accepts ResourceFieldSelectorArgs, ResourceFieldSelectorPtr and ResourceFieldSelectorPtrOutput values.
// You can construct a concrete instance of `ResourceFieldSelectorPtrInput` via:
//
//	        ResourceFieldSelectorArgs{...}
//
//	or:
//
//	        nil
type ResourceFieldSelectorPtrInput interface {
	pulumi.Input

	ToResourceFieldSelectorPtrOutput() ResourceFieldSelectorPtrOutput
	ToResourceFieldSelectorPtrOutputWithContext(context.Context) ResourceFieldSelectorPtrOutput
}

type resourceFieldSelectorPtrType ResourceFieldSelectorArgs

func ResourceFieldSelectorPtr(v *ResourceFieldSelectorArgs) ResourceFieldSelectorPtrInput {
	return (*resourceFieldSelectorPtrType)(v)
}

func (*resourceFieldSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceFieldSelector)(nil)).Elem()
}

func (i *resourceFieldSelectorPtrType) ToResourceFieldSelectorPtrOutput() ResourceFieldSelectorPtrOutput {
	return i.ToResourceFieldSelectorPtrOutputWithContext(context.Background())
}

func (i *resourceFieldSelectorPtrType) ToResourceFieldSelectorPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorPtrOutput)
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelectorOutput struct{ *pulumi.OutputState }

func (ResourceFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFieldSelector)(nil)).Elem()
}

func (o ResourceFieldSelectorOutput) ToResourceFieldSelectorOutput() ResourceFieldSelectorOutput {
	return o
}

func (o ResourceFieldSelectorOutput) ToResourceFieldSelectorOutputWithContext(ctx context.Context) ResourceFieldSelectorOutput {
	return o
}

func (o ResourceFieldSelectorOutput) ToResourceFieldSelectorPtrOutput() ResourceFieldSelectorPtrOutput {
	return o.ToResourceFieldSelectorPtrOutputWithContext(context.Background())
}

func (o ResourceFieldSelectorOutput) ToResourceFieldSelectorPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceFieldSelector) *ResourceFieldSelector {
		return &v
	}).(ResourceFieldSelectorPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ResourceFieldSelectorOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFieldSelector) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ResourceFieldSelectorOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFieldSelector) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o ResourceFieldSelectorOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceFieldSelector) string { return v.Resource }).(pulumi.StringOutput)
}

type ResourceFieldSelectorPtrOutput struct{ *pulumi.OutputState }

func (ResourceFieldSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceFieldSelector)(nil)).Elem()
}

func (o ResourceFieldSelectorPtrOutput) ToResourceFieldSelectorPtrOutput() ResourceFieldSelectorPtrOutput {
	return o
}

func (o ResourceFieldSelectorPtrOutput) ToResourceFieldSelectorPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPtrOutput {
	return o
}

func (o ResourceFieldSelectorPtrOutput) Elem() ResourceFieldSelectorOutput {
	return o.ApplyT(func(v *ResourceFieldSelector) ResourceFieldSelector {
		if v != nil {
			return *v
		}
		var ret ResourceFieldSelector
		return ret
	}).(ResourceFieldSelectorOutput)
}

// Container name: required for volumes, optional for env vars
func (o ResourceFieldSelectorPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelector) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ResourceFieldSelectorPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelector) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o ResourceFieldSelectorPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelector) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelectorPatch struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// ResourceFieldSelectorPatchInput is an input type that accepts ResourceFieldSelectorPatchArgs and ResourceFieldSelectorPatchOutput values.
// You can construct a concrete instance of `ResourceFieldSelectorPatchInput` via:
//
//	ResourceFieldSelectorPatchArgs{...}
type ResourceFieldSelectorPatchInput interface {
	pulumi.Input

	ToResourceFieldSelectorPatchOutput() ResourceFieldSelectorPatchOutput
	ToResourceFieldSelectorPatchOutputWithContext(context.Context) ResourceFieldSelectorPatchOutput
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelectorPatchArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ResourceFieldSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFieldSelectorPatch)(nil)).Elem()
}

func (i ResourceFieldSelectorPatchArgs) ToResourceFieldSelectorPatchOutput() ResourceFieldSelectorPatchOutput {
	return i.ToResourceFieldSelectorPatchOutputWithContext(context.Background())
}

func (i ResourceFieldSelectorPatchArgs) ToResourceFieldSelectorPatchOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorPatchOutput)
}

func (i ResourceFieldSelectorPatchArgs) ToResourceFieldSelectorPatchPtrOutput() ResourceFieldSelectorPatchPtrOutput {
	return i.ToResourceFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ResourceFieldSelectorPatchArgs) ToResourceFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorPatchOutput).ToResourceFieldSelectorPatchPtrOutputWithContext(ctx)
}

// ResourceFieldSelectorPatchPtrInput is an input type that accepts ResourceFieldSelectorPatchArgs, ResourceFieldSelectorPatchPtr and ResourceFieldSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ResourceFieldSelectorPatchPtrInput` via:
//
//	        ResourceFieldSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceFieldSelectorPatchPtrInput interface {
	pulumi.Input

	ToResourceFieldSelectorPatchPtrOutput() ResourceFieldSelectorPatchPtrOutput
	ToResourceFieldSelectorPatchPtrOutputWithContext(context.Context) ResourceFieldSelectorPatchPtrOutput
}

type resourceFieldSelectorPatchPtrType ResourceFieldSelectorPatchArgs

func ResourceFieldSelectorPatchPtr(v *ResourceFieldSelectorPatchArgs) ResourceFieldSelectorPatchPtrInput {
	return (*resourceFieldSelectorPatchPtrType)(v)
}

func (*resourceFieldSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceFieldSelectorPatch)(nil)).Elem()
}

func (i *resourceFieldSelectorPatchPtrType) ToResourceFieldSelectorPatchPtrOutput() ResourceFieldSelectorPatchPtrOutput {
	return i.ToResourceFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *resourceFieldSelectorPatchPtrType) ToResourceFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFieldSelectorPatchPtrOutput)
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelectorPatchOutput struct{ *pulumi.OutputState }

func (ResourceFieldSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFieldSelectorPatch)(nil)).Elem()
}

func (o ResourceFieldSelectorPatchOutput) ToResourceFieldSelectorPatchOutput() ResourceFieldSelectorPatchOutput {
	return o
}

func (o ResourceFieldSelectorPatchOutput) ToResourceFieldSelectorPatchOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchOutput {
	return o
}

func (o ResourceFieldSelectorPatchOutput) ToResourceFieldSelectorPatchPtrOutput() ResourceFieldSelectorPatchPtrOutput {
	return o.ToResourceFieldSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ResourceFieldSelectorPatchOutput) ToResourceFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceFieldSelectorPatch) *ResourceFieldSelectorPatch {
		return &v
	}).(ResourceFieldSelectorPatchPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ResourceFieldSelectorPatchOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFieldSelectorPatch) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ResourceFieldSelectorPatchOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFieldSelectorPatch) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o ResourceFieldSelectorPatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFieldSelectorPatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ResourceFieldSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceFieldSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceFieldSelectorPatch)(nil)).Elem()
}

func (o ResourceFieldSelectorPatchPtrOutput) ToResourceFieldSelectorPatchPtrOutput() ResourceFieldSelectorPatchPtrOutput {
	return o
}

func (o ResourceFieldSelectorPatchPtrOutput) ToResourceFieldSelectorPatchPtrOutputWithContext(ctx context.Context) ResourceFieldSelectorPatchPtrOutput {
	return o
}

func (o ResourceFieldSelectorPatchPtrOutput) Elem() ResourceFieldSelectorPatchOutput {
	return o.ApplyT(func(v *ResourceFieldSelectorPatch) ResourceFieldSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ResourceFieldSelectorPatch
		return ret
	}).(ResourceFieldSelectorPatchOutput)
}

// Container name: required for volumes, optional for env vars
func (o ResourceFieldSelectorPatchPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ResourceFieldSelectorPatchPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o ResourceFieldSelectorPatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceFieldSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ResourceQuotaSpec `pulumi:"spec"`
	// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ResourceQuotaStatus `pulumi:"status"`
}

// ResourceQuotaTypeInput is an input type that accepts ResourceQuotaTypeArgs and ResourceQuotaTypeOutput values.
// You can construct a concrete instance of `ResourceQuotaTypeInput` via:
//
//	ResourceQuotaTypeArgs{...}
type ResourceQuotaTypeInput interface {
	pulumi.Input

	ToResourceQuotaTypeOutput() ResourceQuotaTypeOutput
	ToResourceQuotaTypeOutputWithContext(context.Context) ResourceQuotaTypeOutput
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ResourceQuotaSpecPtrInput `pulumi:"spec"`
	// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ResourceQuotaStatusPtrInput `pulumi:"status"`
}

func (ResourceQuotaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaType)(nil)).Elem()
}

func (i ResourceQuotaTypeArgs) ToResourceQuotaTypeOutput() ResourceQuotaTypeOutput {
	return i.ToResourceQuotaTypeOutputWithContext(context.Background())
}

func (i ResourceQuotaTypeArgs) ToResourceQuotaTypeOutputWithContext(ctx context.Context) ResourceQuotaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaTypeOutput)
}

// ResourceQuotaTypeArrayInput is an input type that accepts ResourceQuotaTypeArray and ResourceQuotaTypeArrayOutput values.
// You can construct a concrete instance of `ResourceQuotaTypeArrayInput` via:
//
//	ResourceQuotaTypeArray{ ResourceQuotaTypeArgs{...} }
type ResourceQuotaTypeArrayInput interface {
	pulumi.Input

	ToResourceQuotaTypeArrayOutput() ResourceQuotaTypeArrayOutput
	ToResourceQuotaTypeArrayOutputWithContext(context.Context) ResourceQuotaTypeArrayOutput
}

type ResourceQuotaTypeArray []ResourceQuotaTypeInput

func (ResourceQuotaTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceQuotaType)(nil)).Elem()
}

func (i ResourceQuotaTypeArray) ToResourceQuotaTypeArrayOutput() ResourceQuotaTypeArrayOutput {
	return i.ToResourceQuotaTypeArrayOutputWithContext(context.Background())
}

func (i ResourceQuotaTypeArray) ToResourceQuotaTypeArrayOutputWithContext(ctx context.Context) ResourceQuotaTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaTypeArrayOutput)
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaTypeOutput struct{ *pulumi.OutputState }

func (ResourceQuotaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaType)(nil)).Elem()
}

func (o ResourceQuotaTypeOutput) ToResourceQuotaTypeOutput() ResourceQuotaTypeOutput {
	return o
}

func (o ResourceQuotaTypeOutput) ToResourceQuotaTypeOutputWithContext(ctx context.Context) ResourceQuotaTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceQuotaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceQuotaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ResourceQuotaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceQuotaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ResourceQuotaTypeOutput) Spec() ResourceQuotaSpecPtrOutput {
	return o.ApplyT(func(v ResourceQuotaType) *ResourceQuotaSpec { return v.Spec }).(ResourceQuotaSpecPtrOutput)
}

// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ResourceQuotaTypeOutput) Status() ResourceQuotaStatusPtrOutput {
	return o.ApplyT(func(v ResourceQuotaType) *ResourceQuotaStatus { return v.Status }).(ResourceQuotaStatusPtrOutput)
}

type ResourceQuotaTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceQuotaTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceQuotaType)(nil)).Elem()
}

func (o ResourceQuotaTypeArrayOutput) ToResourceQuotaTypeArrayOutput() ResourceQuotaTypeArrayOutput {
	return o
}

func (o ResourceQuotaTypeArrayOutput) ToResourceQuotaTypeArrayOutputWithContext(ctx context.Context) ResourceQuotaTypeArrayOutput {
	return o
}

func (o ResourceQuotaTypeArrayOutput) Index(i pulumi.IntInput) ResourceQuotaTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceQuotaType {
		return vs[0].([]ResourceQuotaType)[vs[1].(int)]
	}).(ResourceQuotaTypeOutput)
}

// ResourceQuotaList is a list of ResourceQuota items.
type ResourceQuotaListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Items []ResourceQuotaType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceQuotaListTypeInput is an input type that accepts ResourceQuotaListTypeArgs and ResourceQuotaListTypeOutput values.
// You can construct a concrete instance of `ResourceQuotaListTypeInput` via:
//
//	ResourceQuotaListTypeArgs{...}
type ResourceQuotaListTypeInput interface {
	pulumi.Input

	ToResourceQuotaListTypeOutput() ResourceQuotaListTypeOutput
	ToResourceQuotaListTypeOutputWithContext(context.Context) ResourceQuotaListTypeOutput
}

// ResourceQuotaList is a list of ResourceQuota items.
type ResourceQuotaListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Items ResourceQuotaTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceQuotaListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaListType)(nil)).Elem()
}

func (i ResourceQuotaListTypeArgs) ToResourceQuotaListTypeOutput() ResourceQuotaListTypeOutput {
	return i.ToResourceQuotaListTypeOutputWithContext(context.Background())
}

func (i ResourceQuotaListTypeArgs) ToResourceQuotaListTypeOutputWithContext(ctx context.Context) ResourceQuotaListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaListTypeOutput)
}

// ResourceQuotaList is a list of ResourceQuota items.
type ResourceQuotaListTypeOutput struct{ *pulumi.OutputState }

func (ResourceQuotaListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaListType)(nil)).Elem()
}

func (o ResourceQuotaListTypeOutput) ToResourceQuotaListTypeOutput() ResourceQuotaListTypeOutput {
	return o
}

func (o ResourceQuotaListTypeOutput) ToResourceQuotaListTypeOutputWithContext(ctx context.Context) ResourceQuotaListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceQuotaListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaListTypeOutput) Items() ResourceQuotaTypeArrayOutput {
	return o.ApplyT(func(v ResourceQuotaListType) []ResourceQuotaType { return v.Items }).(ResourceQuotaTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceQuotaListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceQuotaListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceQuotaListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ResourceQuotaSpecPatch `pulumi:"spec"`
	// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ResourceQuotaStatusPatch `pulumi:"status"`
}

// ResourceQuotaPatchTypeInput is an input type that accepts ResourceQuotaPatchTypeArgs and ResourceQuotaPatchTypeOutput values.
// You can construct a concrete instance of `ResourceQuotaPatchTypeInput` via:
//
//	ResourceQuotaPatchTypeArgs{...}
type ResourceQuotaPatchTypeInput interface {
	pulumi.Input

	ToResourceQuotaPatchTypeOutput() ResourceQuotaPatchTypeOutput
	ToResourceQuotaPatchTypeOutputWithContext(context.Context) ResourceQuotaPatchTypeOutput
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ResourceQuotaSpecPatchPtrInput `pulumi:"spec"`
	// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ResourceQuotaStatusPatchPtrInput `pulumi:"status"`
}

func (ResourceQuotaPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaPatchType)(nil)).Elem()
}

func (i ResourceQuotaPatchTypeArgs) ToResourceQuotaPatchTypeOutput() ResourceQuotaPatchTypeOutput {
	return i.ToResourceQuotaPatchTypeOutputWithContext(context.Background())
}

func (i ResourceQuotaPatchTypeArgs) ToResourceQuotaPatchTypeOutputWithContext(ctx context.Context) ResourceQuotaPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaPatchTypeOutput)
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type ResourceQuotaPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceQuotaPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaPatchType)(nil)).Elem()
}

func (o ResourceQuotaPatchTypeOutput) ToResourceQuotaPatchTypeOutput() ResourceQuotaPatchTypeOutput {
	return o
}

func (o ResourceQuotaPatchTypeOutput) ToResourceQuotaPatchTypeOutputWithContext(ctx context.Context) ResourceQuotaPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceQuotaPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceQuotaPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ResourceQuotaPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceQuotaPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ResourceQuotaPatchTypeOutput) Spec() ResourceQuotaSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceQuotaPatchType) *ResourceQuotaSpecPatch { return v.Spec }).(ResourceQuotaSpecPatchPtrOutput)
}

// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ResourceQuotaPatchTypeOutput) Status() ResourceQuotaStatusPatchPtrOutput {
	return o.ApplyT(func(v ResourceQuotaPatchType) *ResourceQuotaStatusPatch { return v.Status }).(ResourceQuotaStatusPatchPtrOutput)
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpec struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]string `pulumi:"hard"`
	// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector *ScopeSelector `pulumi:"scopeSelector"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes []string `pulumi:"scopes"`
}

// ResourceQuotaSpecInput is an input type that accepts ResourceQuotaSpecArgs and ResourceQuotaSpecOutput values.
// You can construct a concrete instance of `ResourceQuotaSpecInput` via:
//
//	ResourceQuotaSpecArgs{...}
type ResourceQuotaSpecInput interface {
	pulumi.Input

	ToResourceQuotaSpecOutput() ResourceQuotaSpecOutput
	ToResourceQuotaSpecOutputWithContext(context.Context) ResourceQuotaSpecOutput
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpecArgs struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard pulumi.StringMapInput `pulumi:"hard"`
	// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector ScopeSelectorPtrInput `pulumi:"scopeSelector"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (ResourceQuotaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaSpec)(nil)).Elem()
}

func (i ResourceQuotaSpecArgs) ToResourceQuotaSpecOutput() ResourceQuotaSpecOutput {
	return i.ToResourceQuotaSpecOutputWithContext(context.Background())
}

func (i ResourceQuotaSpecArgs) ToResourceQuotaSpecOutputWithContext(ctx context.Context) ResourceQuotaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecOutput)
}

func (i ResourceQuotaSpecArgs) ToResourceQuotaSpecPtrOutput() ResourceQuotaSpecPtrOutput {
	return i.ToResourceQuotaSpecPtrOutputWithContext(context.Background())
}

func (i ResourceQuotaSpecArgs) ToResourceQuotaSpecPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecOutput).ToResourceQuotaSpecPtrOutputWithContext(ctx)
}

// ResourceQuotaSpecPtrInput is an input type that accepts ResourceQuotaSpecArgs, ResourceQuotaSpecPtr and ResourceQuotaSpecPtrOutput values.
// You can construct a concrete instance of `ResourceQuotaSpecPtrInput` via:
//
//	        ResourceQuotaSpecArgs{...}
//
//	or:
//
//	        nil
type ResourceQuotaSpecPtrInput interface {
	pulumi.Input

	ToResourceQuotaSpecPtrOutput() ResourceQuotaSpecPtrOutput
	ToResourceQuotaSpecPtrOutputWithContext(context.Context) ResourceQuotaSpecPtrOutput
}

type resourceQuotaSpecPtrType ResourceQuotaSpecArgs

func ResourceQuotaSpecPtr(v *ResourceQuotaSpecArgs) ResourceQuotaSpecPtrInput {
	return (*resourceQuotaSpecPtrType)(v)
}

func (*resourceQuotaSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaSpec)(nil)).Elem()
}

func (i *resourceQuotaSpecPtrType) ToResourceQuotaSpecPtrOutput() ResourceQuotaSpecPtrOutput {
	return i.ToResourceQuotaSpecPtrOutputWithContext(context.Background())
}

func (i *resourceQuotaSpecPtrType) ToResourceQuotaSpecPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecPtrOutput)
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpecOutput struct{ *pulumi.OutputState }

func (ResourceQuotaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaSpec)(nil)).Elem()
}

func (o ResourceQuotaSpecOutput) ToResourceQuotaSpecOutput() ResourceQuotaSpecOutput {
	return o
}

func (o ResourceQuotaSpecOutput) ToResourceQuotaSpecOutputWithContext(ctx context.Context) ResourceQuotaSpecOutput {
	return o
}

func (o ResourceQuotaSpecOutput) ToResourceQuotaSpecPtrOutput() ResourceQuotaSpecPtrOutput {
	return o.ToResourceQuotaSpecPtrOutputWithContext(context.Background())
}

func (o ResourceQuotaSpecOutput) ToResourceQuotaSpecPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceQuotaSpec) *ResourceQuotaSpec {
		return &v
	}).(ResourceQuotaSpecPtrOutput)
}

// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaSpecOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaSpec) map[string]string { return v.Hard }).(pulumi.StringMapOutput)
}

// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
func (o ResourceQuotaSpecOutput) ScopeSelector() ScopeSelectorPtrOutput {
	return o.ApplyT(func(v ResourceQuotaSpec) *ScopeSelector { return v.ScopeSelector }).(ScopeSelectorPtrOutput)
}

// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
func (o ResourceQuotaSpecOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceQuotaSpec) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ResourceQuotaSpecPtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaSpec)(nil)).Elem()
}

func (o ResourceQuotaSpecPtrOutput) ToResourceQuotaSpecPtrOutput() ResourceQuotaSpecPtrOutput {
	return o
}

func (o ResourceQuotaSpecPtrOutput) ToResourceQuotaSpecPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPtrOutput {
	return o
}

func (o ResourceQuotaSpecPtrOutput) Elem() ResourceQuotaSpecOutput {
	return o.ApplyT(func(v *ResourceQuotaSpec) ResourceQuotaSpec {
		if v != nil {
			return *v
		}
		var ret ResourceQuotaSpec
		return ret
	}).(ResourceQuotaSpecOutput)
}

// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaSpecPtrOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Hard
	}).(pulumi.StringMapOutput)
}

// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
func (o ResourceQuotaSpecPtrOutput) ScopeSelector() ScopeSelectorPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaSpec) *ScopeSelector {
		if v == nil {
			return nil
		}
		return v.ScopeSelector
	}).(ScopeSelectorPtrOutput)
}

// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
func (o ResourceQuotaSpecPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceQuotaSpec) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpecPatch struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]string `pulumi:"hard"`
	// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector *ScopeSelectorPatch `pulumi:"scopeSelector"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes []string `pulumi:"scopes"`
}

// ResourceQuotaSpecPatchInput is an input type that accepts ResourceQuotaSpecPatchArgs and ResourceQuotaSpecPatchOutput values.
// You can construct a concrete instance of `ResourceQuotaSpecPatchInput` via:
//
//	ResourceQuotaSpecPatchArgs{...}
type ResourceQuotaSpecPatchInput interface {
	pulumi.Input

	ToResourceQuotaSpecPatchOutput() ResourceQuotaSpecPatchOutput
	ToResourceQuotaSpecPatchOutputWithContext(context.Context) ResourceQuotaSpecPatchOutput
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpecPatchArgs struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard pulumi.StringMapInput `pulumi:"hard"`
	// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	ScopeSelector ScopeSelectorPatchPtrInput `pulumi:"scopeSelector"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (ResourceQuotaSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaSpecPatch)(nil)).Elem()
}

func (i ResourceQuotaSpecPatchArgs) ToResourceQuotaSpecPatchOutput() ResourceQuotaSpecPatchOutput {
	return i.ToResourceQuotaSpecPatchOutputWithContext(context.Background())
}

func (i ResourceQuotaSpecPatchArgs) ToResourceQuotaSpecPatchOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecPatchOutput)
}

func (i ResourceQuotaSpecPatchArgs) ToResourceQuotaSpecPatchPtrOutput() ResourceQuotaSpecPatchPtrOutput {
	return i.ToResourceQuotaSpecPatchPtrOutputWithContext(context.Background())
}

func (i ResourceQuotaSpecPatchArgs) ToResourceQuotaSpecPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecPatchOutput).ToResourceQuotaSpecPatchPtrOutputWithContext(ctx)
}

// ResourceQuotaSpecPatchPtrInput is an input type that accepts ResourceQuotaSpecPatchArgs, ResourceQuotaSpecPatchPtr and ResourceQuotaSpecPatchPtrOutput values.
// You can construct a concrete instance of `ResourceQuotaSpecPatchPtrInput` via:
//
//	        ResourceQuotaSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceQuotaSpecPatchPtrInput interface {
	pulumi.Input

	ToResourceQuotaSpecPatchPtrOutput() ResourceQuotaSpecPatchPtrOutput
	ToResourceQuotaSpecPatchPtrOutputWithContext(context.Context) ResourceQuotaSpecPatchPtrOutput
}

type resourceQuotaSpecPatchPtrType ResourceQuotaSpecPatchArgs

func ResourceQuotaSpecPatchPtr(v *ResourceQuotaSpecPatchArgs) ResourceQuotaSpecPatchPtrInput {
	return (*resourceQuotaSpecPatchPtrType)(v)
}

func (*resourceQuotaSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaSpecPatch)(nil)).Elem()
}

func (i *resourceQuotaSpecPatchPtrType) ToResourceQuotaSpecPatchPtrOutput() ResourceQuotaSpecPatchPtrOutput {
	return i.ToResourceQuotaSpecPatchPtrOutputWithContext(context.Background())
}

func (i *resourceQuotaSpecPatchPtrType) ToResourceQuotaSpecPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaSpecPatchPtrOutput)
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type ResourceQuotaSpecPatchOutput struct{ *pulumi.OutputState }

func (ResourceQuotaSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaSpecPatch)(nil)).Elem()
}

func (o ResourceQuotaSpecPatchOutput) ToResourceQuotaSpecPatchOutput() ResourceQuotaSpecPatchOutput {
	return o
}

func (o ResourceQuotaSpecPatchOutput) ToResourceQuotaSpecPatchOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchOutput {
	return o
}

func (o ResourceQuotaSpecPatchOutput) ToResourceQuotaSpecPatchPtrOutput() ResourceQuotaSpecPatchPtrOutput {
	return o.ToResourceQuotaSpecPatchPtrOutputWithContext(context.Background())
}

func (o ResourceQuotaSpecPatchOutput) ToResourceQuotaSpecPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceQuotaSpecPatch) *ResourceQuotaSpecPatch {
		return &v
	}).(ResourceQuotaSpecPatchPtrOutput)
}

// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaSpecPatchOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaSpecPatch) map[string]string { return v.Hard }).(pulumi.StringMapOutput)
}

// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
func (o ResourceQuotaSpecPatchOutput) ScopeSelector() ScopeSelectorPatchPtrOutput {
	return o.ApplyT(func(v ResourceQuotaSpecPatch) *ScopeSelectorPatch { return v.ScopeSelector }).(ScopeSelectorPatchPtrOutput)
}

// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
func (o ResourceQuotaSpecPatchOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceQuotaSpecPatch) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ResourceQuotaSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaSpecPatch)(nil)).Elem()
}

func (o ResourceQuotaSpecPatchPtrOutput) ToResourceQuotaSpecPatchPtrOutput() ResourceQuotaSpecPatchPtrOutput {
	return o
}

func (o ResourceQuotaSpecPatchPtrOutput) ToResourceQuotaSpecPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaSpecPatchPtrOutput {
	return o
}

func (o ResourceQuotaSpecPatchPtrOutput) Elem() ResourceQuotaSpecPatchOutput {
	return o.ApplyT(func(v *ResourceQuotaSpecPatch) ResourceQuotaSpecPatch {
		if v != nil {
			return *v
		}
		var ret ResourceQuotaSpecPatch
		return ret
	}).(ResourceQuotaSpecPatchOutput)
}

// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaSpecPatchPtrOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Hard
	}).(pulumi.StringMapOutput)
}

// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
func (o ResourceQuotaSpecPatchPtrOutput) ScopeSelector() ScopeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaSpecPatch) *ScopeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.ScopeSelector
	}).(ScopeSelectorPatchPtrOutput)
}

// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
func (o ResourceQuotaSpecPatchPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceQuotaSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatus struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]string `pulumi:"hard"`
	// Used is the current observed total usage of the resource in the namespace.
	Used map[string]string `pulumi:"used"`
}

// ResourceQuotaStatusInput is an input type that accepts ResourceQuotaStatusArgs and ResourceQuotaStatusOutput values.
// You can construct a concrete instance of `ResourceQuotaStatusInput` via:
//
//	ResourceQuotaStatusArgs{...}
type ResourceQuotaStatusInput interface {
	pulumi.Input

	ToResourceQuotaStatusOutput() ResourceQuotaStatusOutput
	ToResourceQuotaStatusOutputWithContext(context.Context) ResourceQuotaStatusOutput
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatusArgs struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard pulumi.StringMapInput `pulumi:"hard"`
	// Used is the current observed total usage of the resource in the namespace.
	Used pulumi.StringMapInput `pulumi:"used"`
}

func (ResourceQuotaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaStatus)(nil)).Elem()
}

func (i ResourceQuotaStatusArgs) ToResourceQuotaStatusOutput() ResourceQuotaStatusOutput {
	return i.ToResourceQuotaStatusOutputWithContext(context.Background())
}

func (i ResourceQuotaStatusArgs) ToResourceQuotaStatusOutputWithContext(ctx context.Context) ResourceQuotaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusOutput)
}

func (i ResourceQuotaStatusArgs) ToResourceQuotaStatusPtrOutput() ResourceQuotaStatusPtrOutput {
	return i.ToResourceQuotaStatusPtrOutputWithContext(context.Background())
}

func (i ResourceQuotaStatusArgs) ToResourceQuotaStatusPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusOutput).ToResourceQuotaStatusPtrOutputWithContext(ctx)
}

// ResourceQuotaStatusPtrInput is an input type that accepts ResourceQuotaStatusArgs, ResourceQuotaStatusPtr and ResourceQuotaStatusPtrOutput values.
// You can construct a concrete instance of `ResourceQuotaStatusPtrInput` via:
//
//	        ResourceQuotaStatusArgs{...}
//
//	or:
//
//	        nil
type ResourceQuotaStatusPtrInput interface {
	pulumi.Input

	ToResourceQuotaStatusPtrOutput() ResourceQuotaStatusPtrOutput
	ToResourceQuotaStatusPtrOutputWithContext(context.Context) ResourceQuotaStatusPtrOutput
}

type resourceQuotaStatusPtrType ResourceQuotaStatusArgs

func ResourceQuotaStatusPtr(v *ResourceQuotaStatusArgs) ResourceQuotaStatusPtrInput {
	return (*resourceQuotaStatusPtrType)(v)
}

func (*resourceQuotaStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaStatus)(nil)).Elem()
}

func (i *resourceQuotaStatusPtrType) ToResourceQuotaStatusPtrOutput() ResourceQuotaStatusPtrOutput {
	return i.ToResourceQuotaStatusPtrOutputWithContext(context.Background())
}

func (i *resourceQuotaStatusPtrType) ToResourceQuotaStatusPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusPtrOutput)
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatusOutput struct{ *pulumi.OutputState }

func (ResourceQuotaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaStatus)(nil)).Elem()
}

func (o ResourceQuotaStatusOutput) ToResourceQuotaStatusOutput() ResourceQuotaStatusOutput {
	return o
}

func (o ResourceQuotaStatusOutput) ToResourceQuotaStatusOutputWithContext(ctx context.Context) ResourceQuotaStatusOutput {
	return o
}

func (o ResourceQuotaStatusOutput) ToResourceQuotaStatusPtrOutput() ResourceQuotaStatusPtrOutput {
	return o.ToResourceQuotaStatusPtrOutputWithContext(context.Background())
}

func (o ResourceQuotaStatusOutput) ToResourceQuotaStatusPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceQuotaStatus) *ResourceQuotaStatus {
		return &v
	}).(ResourceQuotaStatusPtrOutput)
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaStatusOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaStatus) map[string]string { return v.Hard }).(pulumi.StringMapOutput)
}

// Used is the current observed total usage of the resource in the namespace.
func (o ResourceQuotaStatusOutput) Used() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaStatus) map[string]string { return v.Used }).(pulumi.StringMapOutput)
}

type ResourceQuotaStatusPtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaStatus)(nil)).Elem()
}

func (o ResourceQuotaStatusPtrOutput) ToResourceQuotaStatusPtrOutput() ResourceQuotaStatusPtrOutput {
	return o
}

func (o ResourceQuotaStatusPtrOutput) ToResourceQuotaStatusPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPtrOutput {
	return o
}

func (o ResourceQuotaStatusPtrOutput) Elem() ResourceQuotaStatusOutput {
	return o.ApplyT(func(v *ResourceQuotaStatus) ResourceQuotaStatus {
		if v != nil {
			return *v
		}
		var ret ResourceQuotaStatus
		return ret
	}).(ResourceQuotaStatusOutput)
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaStatusPtrOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Hard
	}).(pulumi.StringMapOutput)
}

// Used is the current observed total usage of the resource in the namespace.
func (o ResourceQuotaStatusPtrOutput) Used() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Used
	}).(pulumi.StringMapOutput)
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatusPatch struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard map[string]string `pulumi:"hard"`
	// Used is the current observed total usage of the resource in the namespace.
	Used map[string]string `pulumi:"used"`
}

// ResourceQuotaStatusPatchInput is an input type that accepts ResourceQuotaStatusPatchArgs and ResourceQuotaStatusPatchOutput values.
// You can construct a concrete instance of `ResourceQuotaStatusPatchInput` via:
//
//	ResourceQuotaStatusPatchArgs{...}
type ResourceQuotaStatusPatchInput interface {
	pulumi.Input

	ToResourceQuotaStatusPatchOutput() ResourceQuotaStatusPatchOutput
	ToResourceQuotaStatusPatchOutputWithContext(context.Context) ResourceQuotaStatusPatchOutput
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatusPatchArgs struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard pulumi.StringMapInput `pulumi:"hard"`
	// Used is the current observed total usage of the resource in the namespace.
	Used pulumi.StringMapInput `pulumi:"used"`
}

func (ResourceQuotaStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaStatusPatch)(nil)).Elem()
}

func (i ResourceQuotaStatusPatchArgs) ToResourceQuotaStatusPatchOutput() ResourceQuotaStatusPatchOutput {
	return i.ToResourceQuotaStatusPatchOutputWithContext(context.Background())
}

func (i ResourceQuotaStatusPatchArgs) ToResourceQuotaStatusPatchOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusPatchOutput)
}

func (i ResourceQuotaStatusPatchArgs) ToResourceQuotaStatusPatchPtrOutput() ResourceQuotaStatusPatchPtrOutput {
	return i.ToResourceQuotaStatusPatchPtrOutputWithContext(context.Background())
}

func (i ResourceQuotaStatusPatchArgs) ToResourceQuotaStatusPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusPatchOutput).ToResourceQuotaStatusPatchPtrOutputWithContext(ctx)
}

// ResourceQuotaStatusPatchPtrInput is an input type that accepts ResourceQuotaStatusPatchArgs, ResourceQuotaStatusPatchPtr and ResourceQuotaStatusPatchPtrOutput values.
// You can construct a concrete instance of `ResourceQuotaStatusPatchPtrInput` via:
//
//	        ResourceQuotaStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceQuotaStatusPatchPtrInput interface {
	pulumi.Input

	ToResourceQuotaStatusPatchPtrOutput() ResourceQuotaStatusPatchPtrOutput
	ToResourceQuotaStatusPatchPtrOutputWithContext(context.Context) ResourceQuotaStatusPatchPtrOutput
}

type resourceQuotaStatusPatchPtrType ResourceQuotaStatusPatchArgs

func ResourceQuotaStatusPatchPtr(v *ResourceQuotaStatusPatchArgs) ResourceQuotaStatusPatchPtrInput {
	return (*resourceQuotaStatusPatchPtrType)(v)
}

func (*resourceQuotaStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaStatusPatch)(nil)).Elem()
}

func (i *resourceQuotaStatusPatchPtrType) ToResourceQuotaStatusPatchPtrOutput() ResourceQuotaStatusPatchPtrOutput {
	return i.ToResourceQuotaStatusPatchPtrOutputWithContext(context.Background())
}

func (i *resourceQuotaStatusPatchPtrType) ToResourceQuotaStatusPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaStatusPatchPtrOutput)
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type ResourceQuotaStatusPatchOutput struct{ *pulumi.OutputState }

func (ResourceQuotaStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaStatusPatch)(nil)).Elem()
}

func (o ResourceQuotaStatusPatchOutput) ToResourceQuotaStatusPatchOutput() ResourceQuotaStatusPatchOutput {
	return o
}

func (o ResourceQuotaStatusPatchOutput) ToResourceQuotaStatusPatchOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchOutput {
	return o
}

func (o ResourceQuotaStatusPatchOutput) ToResourceQuotaStatusPatchPtrOutput() ResourceQuotaStatusPatchPtrOutput {
	return o.ToResourceQuotaStatusPatchPtrOutputWithContext(context.Background())
}

func (o ResourceQuotaStatusPatchOutput) ToResourceQuotaStatusPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceQuotaStatusPatch) *ResourceQuotaStatusPatch {
		return &v
	}).(ResourceQuotaStatusPatchPtrOutput)
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaStatusPatchOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaStatusPatch) map[string]string { return v.Hard }).(pulumi.StringMapOutput)
}

// Used is the current observed total usage of the resource in the namespace.
func (o ResourceQuotaStatusPatchOutput) Used() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceQuotaStatusPatch) map[string]string { return v.Used }).(pulumi.StringMapOutput)
}

type ResourceQuotaStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaStatusPatch)(nil)).Elem()
}

func (o ResourceQuotaStatusPatchPtrOutput) ToResourceQuotaStatusPatchPtrOutput() ResourceQuotaStatusPatchPtrOutput {
	return o
}

func (o ResourceQuotaStatusPatchPtrOutput) ToResourceQuotaStatusPatchPtrOutputWithContext(ctx context.Context) ResourceQuotaStatusPatchPtrOutput {
	return o
}

func (o ResourceQuotaStatusPatchPtrOutput) Elem() ResourceQuotaStatusPatchOutput {
	return o.ApplyT(func(v *ResourceQuotaStatusPatch) ResourceQuotaStatusPatch {
		if v != nil {
			return *v
		}
		var ret ResourceQuotaStatusPatch
		return ret
	}).(ResourceQuotaStatusPatchOutput)
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (o ResourceQuotaStatusPatchPtrOutput) Hard() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Hard
	}).(pulumi.StringMapOutput)
}

// Used is the current observed total usage of the resource in the namespace.
func (o ResourceQuotaStatusPatchPtrOutput) Used() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceQuotaStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Used
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	Claims []ResourceClaim `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//	ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	Claims ResourceClaimArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput).ToResourceRequirementsPtrOutputWithContext(ctx)
}

// ResourceRequirementsPtrInput is an input type that accepts ResourceRequirementsArgs, ResourceRequirementsPtr and ResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ResourceRequirementsPtrInput` via:
//
//	        ResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type ResourceRequirementsPtrInput interface {
	pulumi.Input

	ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput
	ToResourceRequirementsPtrOutputWithContext(context.Context) ResourceRequirementsPtrOutput
}

type resourceRequirementsPtrType ResourceRequirementsArgs

func ResourceRequirementsPtr(v *ResourceRequirementsArgs) ResourceRequirementsPtrInput {
	return (*resourceRequirementsPtrType)(v)
}

func (*resourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRequirements) *ResourceRequirements {
		return &v
	}).(ResourceRequirementsPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o ResourceRequirementsOutput) Claims() ResourceClaimArrayOutput {
	return o.ApplyT(func(v ResourceRequirements) []ResourceClaim { return v.Claims }).(ResourceClaimArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type ResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) Elem() ResourceRequirementsOutput {
	return o.ApplyT(func(v *ResourceRequirements) ResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ResourceRequirements
		return ret
	}).(ResourceRequirementsOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o ResourceRequirementsPtrOutput) Claims() ResourceClaimArrayOutput {
	return o.ApplyT(func(v *ResourceRequirements) []ResourceClaim {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ResourceClaimArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsPatch struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	Claims []ResourceClaimPatch `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirementsPatchInput is an input type that accepts ResourceRequirementsPatchArgs and ResourceRequirementsPatchOutput values.
// You can construct a concrete instance of `ResourceRequirementsPatchInput` via:
//
//	ResourceRequirementsPatchArgs{...}
type ResourceRequirementsPatchInput interface {
	pulumi.Input

	ToResourceRequirementsPatchOutput() ResourceRequirementsPatchOutput
	ToResourceRequirementsPatchOutputWithContext(context.Context) ResourceRequirementsPatchOutput
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsPatchArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	Claims ResourceClaimPatchArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (ResourceRequirementsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsPatch)(nil)).Elem()
}

func (i ResourceRequirementsPatchArgs) ToResourceRequirementsPatchOutput() ResourceRequirementsPatchOutput {
	return i.ToResourceRequirementsPatchOutputWithContext(context.Background())
}

func (i ResourceRequirementsPatchArgs) ToResourceRequirementsPatchOutputWithContext(ctx context.Context) ResourceRequirementsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPatchOutput)
}

func (i ResourceRequirementsPatchArgs) ToResourceRequirementsPatchPtrOutput() ResourceRequirementsPatchPtrOutput {
	return i.ToResourceRequirementsPatchPtrOutputWithContext(context.Background())
}

func (i ResourceRequirementsPatchArgs) ToResourceRequirementsPatchPtrOutputWithContext(ctx context.Context) ResourceRequirementsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPatchOutput).ToResourceRequirementsPatchPtrOutputWithContext(ctx)
}

// ResourceRequirementsPatchPtrInput is an input type that accepts ResourceRequirementsPatchArgs, ResourceRequirementsPatchPtr and ResourceRequirementsPatchPtrOutput values.
// You can construct a concrete instance of `ResourceRequirementsPatchPtrInput` via:
//
//	        ResourceRequirementsPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceRequirementsPatchPtrInput interface {
	pulumi.Input

	ToResourceRequirementsPatchPtrOutput() ResourceRequirementsPatchPtrOutput
	ToResourceRequirementsPatchPtrOutputWithContext(context.Context) ResourceRequirementsPatchPtrOutput
}

type resourceRequirementsPatchPtrType ResourceRequirementsPatchArgs

func ResourceRequirementsPatchPtr(v *ResourceRequirementsPatchArgs) ResourceRequirementsPatchPtrInput {
	return (*resourceRequirementsPatchPtrType)(v)
}

func (*resourceRequirementsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirementsPatch)(nil)).Elem()
}

func (i *resourceRequirementsPatchPtrType) ToResourceRequirementsPatchPtrOutput() ResourceRequirementsPatchPtrOutput {
	return i.ToResourceRequirementsPatchPtrOutputWithContext(context.Background())
}

func (i *resourceRequirementsPatchPtrType) ToResourceRequirementsPatchPtrOutputWithContext(ctx context.Context) ResourceRequirementsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPatchPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsPatchOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsPatch)(nil)).Elem()
}

func (o ResourceRequirementsPatchOutput) ToResourceRequirementsPatchOutput() ResourceRequirementsPatchOutput {
	return o
}

func (o ResourceRequirementsPatchOutput) ToResourceRequirementsPatchOutputWithContext(ctx context.Context) ResourceRequirementsPatchOutput {
	return o
}

func (o ResourceRequirementsPatchOutput) ToResourceRequirementsPatchPtrOutput() ResourceRequirementsPatchPtrOutput {
	return o.ToResourceRequirementsPatchPtrOutputWithContext(context.Background())
}

func (o ResourceRequirementsPatchOutput) ToResourceRequirementsPatchPtrOutputWithContext(ctx context.Context) ResourceRequirementsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRequirementsPatch) *ResourceRequirementsPatch {
		return &v
	}).(ResourceRequirementsPatchPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o ResourceRequirementsPatchOutput) Claims() ResourceClaimPatchArrayOutput {
	return o.ApplyT(func(v ResourceRequirementsPatch) []ResourceClaimPatch { return v.Claims }).(ResourceClaimPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPatchOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsPatch) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPatchOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsPatch) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type ResourceRequirementsPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirementsPatch)(nil)).Elem()
}

func (o ResourceRequirementsPatchPtrOutput) ToResourceRequirementsPatchPtrOutput() ResourceRequirementsPatchPtrOutput {
	return o
}

func (o ResourceRequirementsPatchPtrOutput) ToResourceRequirementsPatchPtrOutputWithContext(ctx context.Context) ResourceRequirementsPatchPtrOutput {
	return o
}

func (o ResourceRequirementsPatchPtrOutput) Elem() ResourceRequirementsPatchOutput {
	return o.ApplyT(func(v *ResourceRequirementsPatch) ResourceRequirementsPatch {
		if v != nil {
			return *v
		}
		var ret ResourceRequirementsPatch
		return ret
	}).(ResourceRequirementsPatchOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//
// This field is immutable.
func (o ResourceRequirementsPatchPtrOutput) Claims() ResourceClaimPatchArrayOutput {
	return o.ApplyT(func(v *ResourceRequirementsPatch) []ResourceClaimPatch {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ResourceClaimPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPatchPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirementsPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ResourceRequirementsPatchPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirementsPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// SELinuxOptionsInput is an input type that accepts SELinuxOptionsArgs and SELinuxOptionsOutput values.
// You can construct a concrete instance of `SELinuxOptionsInput` via:
//
//	SELinuxOptionsArgs{...}
type SELinuxOptionsInput interface {
	pulumi.Input

	ToSELinuxOptionsOutput() SELinuxOptionsOutput
	ToSELinuxOptionsOutputWithContext(context.Context) SELinuxOptionsOutput
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (SELinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxOptions)(nil)).Elem()
}

func (i SELinuxOptionsArgs) ToSELinuxOptionsOutput() SELinuxOptionsOutput {
	return i.ToSELinuxOptionsOutputWithContext(context.Background())
}

func (i SELinuxOptionsArgs) ToSELinuxOptionsOutputWithContext(ctx context.Context) SELinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsOutput)
}

func (i SELinuxOptionsArgs) ToSELinuxOptionsPtrOutput() SELinuxOptionsPtrOutput {
	return i.ToSELinuxOptionsPtrOutputWithContext(context.Background())
}

func (i SELinuxOptionsArgs) ToSELinuxOptionsPtrOutputWithContext(ctx context.Context) SELinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsOutput).ToSELinuxOptionsPtrOutputWithContext(ctx)
}

// SELinuxOptionsPtrInput is an input type that accepts SELinuxOptionsArgs, SELinuxOptionsPtr and SELinuxOptionsPtrOutput values.
// You can construct a concrete instance of `SELinuxOptionsPtrInput` via:
//
//	        SELinuxOptionsArgs{...}
//
//	or:
//
//	        nil
type SELinuxOptionsPtrInput interface {
	pulumi.Input

	ToSELinuxOptionsPtrOutput() SELinuxOptionsPtrOutput
	ToSELinuxOptionsPtrOutputWithContext(context.Context) SELinuxOptionsPtrOutput
}

type selinuxOptionsPtrType SELinuxOptionsArgs

func SELinuxOptionsPtr(v *SELinuxOptionsArgs) SELinuxOptionsPtrInput {
	return (*selinuxOptionsPtrType)(v)
}

func (*selinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxOptions)(nil)).Elem()
}

func (i *selinuxOptionsPtrType) ToSELinuxOptionsPtrOutput() SELinuxOptionsPtrOutput {
	return i.ToSELinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *selinuxOptionsPtrType) ToSELinuxOptionsPtrOutputWithContext(ctx context.Context) SELinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsPtrOutput)
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptionsOutput struct{ *pulumi.OutputState }

func (SELinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxOptions)(nil)).Elem()
}

func (o SELinuxOptionsOutput) ToSELinuxOptionsOutput() SELinuxOptionsOutput {
	return o
}

func (o SELinuxOptionsOutput) ToSELinuxOptionsOutputWithContext(ctx context.Context) SELinuxOptionsOutput {
	return o
}

func (o SELinuxOptionsOutput) ToSELinuxOptionsPtrOutput() SELinuxOptionsPtrOutput {
	return o.ToSELinuxOptionsPtrOutputWithContext(context.Background())
}

func (o SELinuxOptionsOutput) ToSELinuxOptionsPtrOutputWithContext(ctx context.Context) SELinuxOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SELinuxOptions) *SELinuxOptions {
		return &v
	}).(SELinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o SELinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o SELinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o SELinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o SELinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type SELinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (SELinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxOptions)(nil)).Elem()
}

func (o SELinuxOptionsPtrOutput) ToSELinuxOptionsPtrOutput() SELinuxOptionsPtrOutput {
	return o
}

func (o SELinuxOptionsPtrOutput) ToSELinuxOptionsPtrOutputWithContext(ctx context.Context) SELinuxOptionsPtrOutput {
	return o
}

func (o SELinuxOptionsPtrOutput) Elem() SELinuxOptionsOutput {
	return o.ApplyT(func(v *SELinuxOptions) SELinuxOptions {
		if v != nil {
			return *v
		}
		var ret SELinuxOptions
		return ret
	}).(SELinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o SELinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o SELinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o SELinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o SELinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptionsPatch struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// SELinuxOptionsPatchInput is an input type that accepts SELinuxOptionsPatchArgs and SELinuxOptionsPatchOutput values.
// You can construct a concrete instance of `SELinuxOptionsPatchInput` via:
//
//	SELinuxOptionsPatchArgs{...}
type SELinuxOptionsPatchInput interface {
	pulumi.Input

	ToSELinuxOptionsPatchOutput() SELinuxOptionsPatchOutput
	ToSELinuxOptionsPatchOutputWithContext(context.Context) SELinuxOptionsPatchOutput
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptionsPatchArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (SELinuxOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxOptionsPatch)(nil)).Elem()
}

func (i SELinuxOptionsPatchArgs) ToSELinuxOptionsPatchOutput() SELinuxOptionsPatchOutput {
	return i.ToSELinuxOptionsPatchOutputWithContext(context.Background())
}

func (i SELinuxOptionsPatchArgs) ToSELinuxOptionsPatchOutputWithContext(ctx context.Context) SELinuxOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsPatchOutput)
}

func (i SELinuxOptionsPatchArgs) ToSELinuxOptionsPatchPtrOutput() SELinuxOptionsPatchPtrOutput {
	return i.ToSELinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i SELinuxOptionsPatchArgs) ToSELinuxOptionsPatchPtrOutputWithContext(ctx context.Context) SELinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsPatchOutput).ToSELinuxOptionsPatchPtrOutputWithContext(ctx)
}

// SELinuxOptionsPatchPtrInput is an input type that accepts SELinuxOptionsPatchArgs, SELinuxOptionsPatchPtr and SELinuxOptionsPatchPtrOutput values.
// You can construct a concrete instance of `SELinuxOptionsPatchPtrInput` via:
//
//	        SELinuxOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type SELinuxOptionsPatchPtrInput interface {
	pulumi.Input

	ToSELinuxOptionsPatchPtrOutput() SELinuxOptionsPatchPtrOutput
	ToSELinuxOptionsPatchPtrOutputWithContext(context.Context) SELinuxOptionsPatchPtrOutput
}

type selinuxOptionsPatchPtrType SELinuxOptionsPatchArgs

func SELinuxOptionsPatchPtr(v *SELinuxOptionsPatchArgs) SELinuxOptionsPatchPtrInput {
	return (*selinuxOptionsPatchPtrType)(v)
}

func (*selinuxOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxOptionsPatch)(nil)).Elem()
}

func (i *selinuxOptionsPatchPtrType) ToSELinuxOptionsPatchPtrOutput() SELinuxOptionsPatchPtrOutput {
	return i.ToSELinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *selinuxOptionsPatchPtrType) ToSELinuxOptionsPatchPtrOutputWithContext(ctx context.Context) SELinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SELinuxOptionsPatchPtrOutput)
}

// SELinuxOptions are the labels to be applied to the container
type SELinuxOptionsPatchOutput struct{ *pulumi.OutputState }

func (SELinuxOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SELinuxOptionsPatch)(nil)).Elem()
}

func (o SELinuxOptionsPatchOutput) ToSELinuxOptionsPatchOutput() SELinuxOptionsPatchOutput {
	return o
}

func (o SELinuxOptionsPatchOutput) ToSELinuxOptionsPatchOutputWithContext(ctx context.Context) SELinuxOptionsPatchOutput {
	return o
}

func (o SELinuxOptionsPatchOutput) ToSELinuxOptionsPatchPtrOutput() SELinuxOptionsPatchPtrOutput {
	return o.ToSELinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (o SELinuxOptionsPatchOutput) ToSELinuxOptionsPatchPtrOutputWithContext(ctx context.Context) SELinuxOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SELinuxOptionsPatch) *SELinuxOptionsPatch {
		return &v
	}).(SELinuxOptionsPatchPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o SELinuxOptionsPatchOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptionsPatch) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o SELinuxOptionsPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptionsPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o SELinuxOptionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o SELinuxOptionsPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SELinuxOptionsPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type SELinuxOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (SELinuxOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SELinuxOptionsPatch)(nil)).Elem()
}

func (o SELinuxOptionsPatchPtrOutput) ToSELinuxOptionsPatchPtrOutput() SELinuxOptionsPatchPtrOutput {
	return o
}

func (o SELinuxOptionsPatchPtrOutput) ToSELinuxOptionsPatchPtrOutputWithContext(ctx context.Context) SELinuxOptionsPatchPtrOutput {
	return o
}

func (o SELinuxOptionsPatchPtrOutput) Elem() SELinuxOptionsPatchOutput {
	return o.ApplyT(func(v *SELinuxOptionsPatch) SELinuxOptionsPatch {
		if v != nil {
			return *v
		}
		var ret SELinuxOptionsPatch
		return ret
	}).(SELinuxOptionsPatchOutput)
}

// Level is SELinux level label that applies to the container.
func (o SELinuxOptionsPatchPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o SELinuxOptionsPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o SELinuxOptionsPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o SELinuxOptionsPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SELinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef SecretReference `pulumi:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ScaleIOPersistentVolumeSourceInput is an input type that accepts ScaleIOPersistentVolumeSourceArgs and ScaleIOPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `ScaleIOPersistentVolumeSourceInput` via:
//
//	ScaleIOPersistentVolumeSourceArgs{...}
type ScaleIOPersistentVolumeSourceInput interface {
	pulumi.Input

	ToScaleIOPersistentVolumeSourceOutput() ScaleIOPersistentVolumeSourceOutput
	ToScaleIOPersistentVolumeSourceOutputWithContext(context.Context) ScaleIOPersistentVolumeSourceOutput
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef SecretReferenceInput `pulumi:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ScaleIOPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOPersistentVolumeSource)(nil)).Elem()
}

func (i ScaleIOPersistentVolumeSourceArgs) ToScaleIOPersistentVolumeSourceOutput() ScaleIOPersistentVolumeSourceOutput {
	return i.ToScaleIOPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i ScaleIOPersistentVolumeSourceArgs) ToScaleIOPersistentVolumeSourceOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourceOutput)
}

func (i ScaleIOPersistentVolumeSourceArgs) ToScaleIOPersistentVolumeSourcePtrOutput() ScaleIOPersistentVolumeSourcePtrOutput {
	return i.ToScaleIOPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ScaleIOPersistentVolumeSourceArgs) ToScaleIOPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourceOutput).ToScaleIOPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// ScaleIOPersistentVolumeSourcePtrInput is an input type that accepts ScaleIOPersistentVolumeSourceArgs, ScaleIOPersistentVolumeSourcePtr and ScaleIOPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ScaleIOPersistentVolumeSourcePtrInput` via:
//
//	        ScaleIOPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ScaleIOPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToScaleIOPersistentVolumeSourcePtrOutput() ScaleIOPersistentVolumeSourcePtrOutput
	ToScaleIOPersistentVolumeSourcePtrOutputWithContext(context.Context) ScaleIOPersistentVolumeSourcePtrOutput
}

type scaleIOPersistentVolumeSourcePtrType ScaleIOPersistentVolumeSourceArgs

func ScaleIOPersistentVolumeSourcePtr(v *ScaleIOPersistentVolumeSourceArgs) ScaleIOPersistentVolumeSourcePtrInput {
	return (*scaleIOPersistentVolumeSourcePtrType)(v)
}

func (*scaleIOPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOPersistentVolumeSource)(nil)).Elem()
}

func (i *scaleIOPersistentVolumeSourcePtrType) ToScaleIOPersistentVolumeSourcePtrOutput() ScaleIOPersistentVolumeSourcePtrOutput {
	return i.ToScaleIOPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *scaleIOPersistentVolumeSourcePtrType) ToScaleIOPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourcePtrOutput)
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (ScaleIOPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOPersistentVolumeSource)(nil)).Elem()
}

func (o ScaleIOPersistentVolumeSourceOutput) ToScaleIOPersistentVolumeSourceOutput() ScaleIOPersistentVolumeSourceOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourceOutput) ToScaleIOPersistentVolumeSourceOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourceOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourceOutput) ToScaleIOPersistentVolumeSourcePtrOutput() ScaleIOPersistentVolumeSourcePtrOutput {
	return o.ToScaleIOPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ScaleIOPersistentVolumeSourceOutput) ToScaleIOPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleIOPersistentVolumeSource) *ScaleIOPersistentVolumeSource {
		return &v
	}).(ScaleIOPersistentVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
func (o ScaleIOPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOPersistentVolumeSourceOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) string { return v.Gateway }).(pulumi.StringOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOPersistentVolumeSourceOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOPersistentVolumeSourceOutput) SecretRef() SecretReferenceOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) SecretReference { return v.SecretRef }).(SecretReferenceOutput)
}

// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
func (o ScaleIOPersistentVolumeSourceOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOPersistentVolumeSourceOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOPersistentVolumeSourceOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOPersistentVolumeSourceOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) string { return v.System }).(pulumi.StringOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOPersistentVolumeSourceOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSource) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ScaleIOPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ScaleIOPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOPersistentVolumeSource)(nil)).Elem()
}

func (o ScaleIOPersistentVolumeSourcePtrOutput) ToScaleIOPersistentVolumeSourcePtrOutput() ScaleIOPersistentVolumeSourcePtrOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePtrOutput) ToScaleIOPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePtrOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePtrOutput) Elem() ScaleIOPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) ScaleIOPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret ScaleIOPersistentVolumeSource
		return ret
	}).(ScaleIOPersistentVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
func (o ScaleIOPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOPersistentVolumeSourcePtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOPersistentVolumeSourcePtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOPersistentVolumeSourcePtrOutput) SecretRef() SecretReferencePtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *SecretReference {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(SecretReferencePtrOutput)
}

// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
func (o ScaleIOPersistentVolumeSourcePtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOPersistentVolumeSourcePtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOPersistentVolumeSourcePtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOPersistentVolumeSourcePtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOPersistentVolumeSourcePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway *string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef *SecretReferencePatch `pulumi:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System *string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ScaleIOPersistentVolumeSourcePatchInput is an input type that accepts ScaleIOPersistentVolumeSourcePatchArgs and ScaleIOPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ScaleIOPersistentVolumeSourcePatchInput` via:
//
//	ScaleIOPersistentVolumeSourcePatchArgs{...}
type ScaleIOPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToScaleIOPersistentVolumeSourcePatchOutput() ScaleIOPersistentVolumeSourcePatchOutput
	ToScaleIOPersistentVolumeSourcePatchOutputWithContext(context.Context) ScaleIOPersistentVolumeSourcePatchOutput
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef SecretReferencePatchPtrInput `pulumi:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringPtrInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ScaleIOPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i ScaleIOPersistentVolumeSourcePatchArgs) ToScaleIOPersistentVolumeSourcePatchOutput() ScaleIOPersistentVolumeSourcePatchOutput {
	return i.ToScaleIOPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ScaleIOPersistentVolumeSourcePatchArgs) ToScaleIOPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourcePatchOutput)
}

func (i ScaleIOPersistentVolumeSourcePatchArgs) ToScaleIOPersistentVolumeSourcePatchPtrOutput() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return i.ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ScaleIOPersistentVolumeSourcePatchArgs) ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourcePatchOutput).ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ScaleIOPersistentVolumeSourcePatchPtrInput is an input type that accepts ScaleIOPersistentVolumeSourcePatchArgs, ScaleIOPersistentVolumeSourcePatchPtr and ScaleIOPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ScaleIOPersistentVolumeSourcePatchPtrInput` via:
//
//	        ScaleIOPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ScaleIOPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToScaleIOPersistentVolumeSourcePatchPtrOutput() ScaleIOPersistentVolumeSourcePatchPtrOutput
	ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) ScaleIOPersistentVolumeSourcePatchPtrOutput
}

type scaleIOPersistentVolumeSourcePatchPtrType ScaleIOPersistentVolumeSourcePatchArgs

func ScaleIOPersistentVolumeSourcePatchPtr(v *ScaleIOPersistentVolumeSourcePatchArgs) ScaleIOPersistentVolumeSourcePatchPtrInput {
	return (*scaleIOPersistentVolumeSourcePatchPtrType)(v)
}

func (*scaleIOPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *scaleIOPersistentVolumeSourcePatchPtrType) ToScaleIOPersistentVolumeSourcePatchPtrOutput() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return i.ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *scaleIOPersistentVolumeSourcePatchPtrType) ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOPersistentVolumeSourcePatchPtrOutput)
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type ScaleIOPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ScaleIOPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o ScaleIOPersistentVolumeSourcePatchOutput) ToScaleIOPersistentVolumeSourcePatchOutput() ScaleIOPersistentVolumeSourcePatchOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePatchOutput) ToScaleIOPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePatchOutput) ToScaleIOPersistentVolumeSourcePatchPtrOutput() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o.ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ScaleIOPersistentVolumeSourcePatchOutput) ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleIOPersistentVolumeSourcePatch) *ScaleIOPersistentVolumeSourcePatch {
		return &v
	}).(ScaleIOPersistentVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
func (o ScaleIOPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOPersistentVolumeSourcePatchOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOPersistentVolumeSourcePatchOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOPersistentVolumeSourcePatchOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *SecretReferencePatch { return v.SecretRef }).(SecretReferencePatchPtrOutput)
}

// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
func (o ScaleIOPersistentVolumeSourcePatchOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOPersistentVolumeSourcePatchOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOPersistentVolumeSourcePatchOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOPersistentVolumeSourcePatchOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.System }).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOPersistentVolumeSourcePatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOPersistentVolumeSourcePatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ScaleIOPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleIOPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) ToScaleIOPersistentVolumeSourcePatchPtrOutput() ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) ToScaleIOPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) Elem() ScaleIOPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) ScaleIOPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ScaleIOPersistentVolumeSourcePatch
		return ret
	}).(ScaleIOPersistentVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) SecretRef() SecretReferencePatchPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *SecretReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(SecretReferencePatchPtrOutput)
}

// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOPersistentVolumeSourcePatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef LocalObjectReference `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ScaleIOVolumeSourceInput is an input type that accepts ScaleIOVolumeSourceArgs and ScaleIOVolumeSourceOutput values.
// You can construct a concrete instance of `ScaleIOVolumeSourceInput` via:
//
//	ScaleIOVolumeSourceArgs{...}
type ScaleIOVolumeSourceInput interface {
	pulumi.Input

	ToScaleIOVolumeSourceOutput() ScaleIOVolumeSourceOutput
	ToScaleIOVolumeSourceOutputWithContext(context.Context) ScaleIOVolumeSourceOutput
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef LocalObjectReferenceInput `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ScaleIOVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOVolumeSource)(nil)).Elem()
}

func (i ScaleIOVolumeSourceArgs) ToScaleIOVolumeSourceOutput() ScaleIOVolumeSourceOutput {
	return i.ToScaleIOVolumeSourceOutputWithContext(context.Background())
}

func (i ScaleIOVolumeSourceArgs) ToScaleIOVolumeSourceOutputWithContext(ctx context.Context) ScaleIOVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourceOutput)
}

func (i ScaleIOVolumeSourceArgs) ToScaleIOVolumeSourcePtrOutput() ScaleIOVolumeSourcePtrOutput {
	return i.ToScaleIOVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ScaleIOVolumeSourceArgs) ToScaleIOVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourceOutput).ToScaleIOVolumeSourcePtrOutputWithContext(ctx)
}

// ScaleIOVolumeSourcePtrInput is an input type that accepts ScaleIOVolumeSourceArgs, ScaleIOVolumeSourcePtr and ScaleIOVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ScaleIOVolumeSourcePtrInput` via:
//
//	        ScaleIOVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ScaleIOVolumeSourcePtrInput interface {
	pulumi.Input

	ToScaleIOVolumeSourcePtrOutput() ScaleIOVolumeSourcePtrOutput
	ToScaleIOVolumeSourcePtrOutputWithContext(context.Context) ScaleIOVolumeSourcePtrOutput
}

type scaleIOVolumeSourcePtrType ScaleIOVolumeSourceArgs

func ScaleIOVolumeSourcePtr(v *ScaleIOVolumeSourceArgs) ScaleIOVolumeSourcePtrInput {
	return (*scaleIOVolumeSourcePtrType)(v)
}

func (*scaleIOVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOVolumeSource)(nil)).Elem()
}

func (i *scaleIOVolumeSourcePtrType) ToScaleIOVolumeSourcePtrOutput() ScaleIOVolumeSourcePtrOutput {
	return i.ToScaleIOVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *scaleIOVolumeSourcePtrType) ToScaleIOVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourcePtrOutput)
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSourceOutput struct{ *pulumi.OutputState }

func (ScaleIOVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOVolumeSource)(nil)).Elem()
}

func (o ScaleIOVolumeSourceOutput) ToScaleIOVolumeSourceOutput() ScaleIOVolumeSourceOutput {
	return o
}

func (o ScaleIOVolumeSourceOutput) ToScaleIOVolumeSourceOutputWithContext(ctx context.Context) ScaleIOVolumeSourceOutput {
	return o
}

func (o ScaleIOVolumeSourceOutput) ToScaleIOVolumeSourcePtrOutput() ScaleIOVolumeSourcePtrOutput {
	return o.ToScaleIOVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ScaleIOVolumeSourceOutput) ToScaleIOVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleIOVolumeSource) *ScaleIOVolumeSource {
		return &v
	}).(ScaleIOVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o ScaleIOVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOVolumeSourceOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) string { return v.Gateway }).(pulumi.StringOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOVolumeSourceOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOVolumeSourceOutput) SecretRef() LocalObjectReferenceOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) LocalObjectReference { return v.SecretRef }).(LocalObjectReferenceOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ScaleIOVolumeSourceOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOVolumeSourceOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOVolumeSourceOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOVolumeSourceOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) string { return v.System }).(pulumi.StringOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOVolumeSourceOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSource) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ScaleIOVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ScaleIOVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOVolumeSource)(nil)).Elem()
}

func (o ScaleIOVolumeSourcePtrOutput) ToScaleIOVolumeSourcePtrOutput() ScaleIOVolumeSourcePtrOutput {
	return o
}

func (o ScaleIOVolumeSourcePtrOutput) ToScaleIOVolumeSourcePtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePtrOutput {
	return o
}

func (o ScaleIOVolumeSourcePtrOutput) Elem() ScaleIOVolumeSourceOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) ScaleIOVolumeSource {
		if v != nil {
			return *v
		}
		var ret ScaleIOVolumeSource
		return ret
	}).(ScaleIOVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o ScaleIOVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOVolumeSourcePtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOVolumeSourcePtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ScaleIOVolumeSourcePtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOVolumeSourcePtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOVolumeSourcePtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOVolumeSourcePtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOVolumeSourcePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway *string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System *string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ScaleIOVolumeSourcePatchInput is an input type that accepts ScaleIOVolumeSourcePatchArgs and ScaleIOVolumeSourcePatchOutput values.
// You can construct a concrete instance of `ScaleIOVolumeSourcePatchInput` via:
//
//	ScaleIOVolumeSourcePatchArgs{...}
type ScaleIOVolumeSourcePatchInput interface {
	pulumi.Input

	ToScaleIOVolumeSourcePatchOutput() ScaleIOVolumeSourcePatchOutput
	ToScaleIOVolumeSourcePatchOutputWithContext(context.Context) ScaleIOVolumeSourcePatchOutput
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringPtrInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ScaleIOVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOVolumeSourcePatch)(nil)).Elem()
}

func (i ScaleIOVolumeSourcePatchArgs) ToScaleIOVolumeSourcePatchOutput() ScaleIOVolumeSourcePatchOutput {
	return i.ToScaleIOVolumeSourcePatchOutputWithContext(context.Background())
}

func (i ScaleIOVolumeSourcePatchArgs) ToScaleIOVolumeSourcePatchOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourcePatchOutput)
}

func (i ScaleIOVolumeSourcePatchArgs) ToScaleIOVolumeSourcePatchPtrOutput() ScaleIOVolumeSourcePatchPtrOutput {
	return i.ToScaleIOVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i ScaleIOVolumeSourcePatchArgs) ToScaleIOVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourcePatchOutput).ToScaleIOVolumeSourcePatchPtrOutputWithContext(ctx)
}

// ScaleIOVolumeSourcePatchPtrInput is an input type that accepts ScaleIOVolumeSourcePatchArgs, ScaleIOVolumeSourcePatchPtr and ScaleIOVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `ScaleIOVolumeSourcePatchPtrInput` via:
//
//	        ScaleIOVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ScaleIOVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToScaleIOVolumeSourcePatchPtrOutput() ScaleIOVolumeSourcePatchPtrOutput
	ToScaleIOVolumeSourcePatchPtrOutputWithContext(context.Context) ScaleIOVolumeSourcePatchPtrOutput
}

type scaleIOVolumeSourcePatchPtrType ScaleIOVolumeSourcePatchArgs

func ScaleIOVolumeSourcePatchPtr(v *ScaleIOVolumeSourcePatchArgs) ScaleIOVolumeSourcePatchPtrInput {
	return (*scaleIOVolumeSourcePatchPtrType)(v)
}

func (*scaleIOVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOVolumeSourcePatch)(nil)).Elem()
}

func (i *scaleIOVolumeSourcePatchPtrType) ToScaleIOVolumeSourcePatchPtrOutput() ScaleIOVolumeSourcePatchPtrOutput {
	return i.ToScaleIOVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *scaleIOVolumeSourcePatchPtrType) ToScaleIOVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleIOVolumeSourcePatchPtrOutput)
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type ScaleIOVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (ScaleIOVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleIOVolumeSourcePatch)(nil)).Elem()
}

func (o ScaleIOVolumeSourcePatchOutput) ToScaleIOVolumeSourcePatchOutput() ScaleIOVolumeSourcePatchOutput {
	return o
}

func (o ScaleIOVolumeSourcePatchOutput) ToScaleIOVolumeSourcePatchOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchOutput {
	return o
}

func (o ScaleIOVolumeSourcePatchOutput) ToScaleIOVolumeSourcePatchPtrOutput() ScaleIOVolumeSourcePatchPtrOutput {
	return o.ToScaleIOVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o ScaleIOVolumeSourcePatchOutput) ToScaleIOVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleIOVolumeSourcePatch) *ScaleIOVolumeSourcePatch {
		return &v
	}).(ScaleIOVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o ScaleIOVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOVolumeSourcePatchOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOVolumeSourcePatchOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ScaleIOVolumeSourcePatchOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOVolumeSourcePatchOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOVolumeSourcePatchOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOVolumeSourcePatchOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.System }).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOVolumeSourcePatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleIOVolumeSourcePatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ScaleIOVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleIOVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleIOVolumeSourcePatch)(nil)).Elem()
}

func (o ScaleIOVolumeSourcePatchPtrOutput) ToScaleIOVolumeSourcePatchPtrOutput() ScaleIOVolumeSourcePatchPtrOutput {
	return o
}

func (o ScaleIOVolumeSourcePatchPtrOutput) ToScaleIOVolumeSourcePatchPtrOutputWithContext(ctx context.Context) ScaleIOVolumeSourcePatchPtrOutput {
	return o
}

func (o ScaleIOVolumeSourcePatchPtrOutput) Elem() ScaleIOVolumeSourcePatchOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) ScaleIOVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret ScaleIOVolumeSourcePatch
		return ret
	}).(ScaleIOVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o ScaleIOVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ScaleIOVolumeSourcePatchPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ScaleIOVolumeSourcePatchPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o ScaleIOVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o ScaleIOVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ScaleIOVolumeSourcePatchPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o ScaleIOVolumeSourcePatchPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ScaleIOVolumeSourcePatchPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ScaleIOVolumeSourcePatchPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o ScaleIOVolumeSourcePatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleIOVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelector struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []ScopedResourceSelectorRequirement `pulumi:"matchExpressions"`
}

// ScopeSelectorInput is an input type that accepts ScopeSelectorArgs and ScopeSelectorOutput values.
// You can construct a concrete instance of `ScopeSelectorInput` via:
//
//	ScopeSelectorArgs{...}
type ScopeSelectorInput interface {
	pulumi.Input

	ToScopeSelectorOutput() ScopeSelectorOutput
	ToScopeSelectorOutputWithContext(context.Context) ScopeSelectorOutput
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelectorArgs struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions ScopedResourceSelectorRequirementArrayInput `pulumi:"matchExpressions"`
}

func (ScopeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeSelector)(nil)).Elem()
}

func (i ScopeSelectorArgs) ToScopeSelectorOutput() ScopeSelectorOutput {
	return i.ToScopeSelectorOutputWithContext(context.Background())
}

func (i ScopeSelectorArgs) ToScopeSelectorOutputWithContext(ctx context.Context) ScopeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorOutput)
}

func (i ScopeSelectorArgs) ToScopeSelectorPtrOutput() ScopeSelectorPtrOutput {
	return i.ToScopeSelectorPtrOutputWithContext(context.Background())
}

func (i ScopeSelectorArgs) ToScopeSelectorPtrOutputWithContext(ctx context.Context) ScopeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorOutput).ToScopeSelectorPtrOutputWithContext(ctx)
}

// ScopeSelectorPtrInput is an input type that accepts ScopeSelectorArgs, ScopeSelectorPtr and ScopeSelectorPtrOutput values.
// You can construct a concrete instance of `ScopeSelectorPtrInput` via:
//
//	        ScopeSelectorArgs{...}
//
//	or:
//
//	        nil
type ScopeSelectorPtrInput interface {
	pulumi.Input

	ToScopeSelectorPtrOutput() ScopeSelectorPtrOutput
	ToScopeSelectorPtrOutputWithContext(context.Context) ScopeSelectorPtrOutput
}

type scopeSelectorPtrType ScopeSelectorArgs

func ScopeSelectorPtr(v *ScopeSelectorArgs) ScopeSelectorPtrInput {
	return (*scopeSelectorPtrType)(v)
}

func (*scopeSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeSelector)(nil)).Elem()
}

func (i *scopeSelectorPtrType) ToScopeSelectorPtrOutput() ScopeSelectorPtrOutput {
	return i.ToScopeSelectorPtrOutputWithContext(context.Background())
}

func (i *scopeSelectorPtrType) ToScopeSelectorPtrOutputWithContext(ctx context.Context) ScopeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorPtrOutput)
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelectorOutput struct{ *pulumi.OutputState }

func (ScopeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeSelector)(nil)).Elem()
}

func (o ScopeSelectorOutput) ToScopeSelectorOutput() ScopeSelectorOutput {
	return o
}

func (o ScopeSelectorOutput) ToScopeSelectorOutputWithContext(ctx context.Context) ScopeSelectorOutput {
	return o
}

func (o ScopeSelectorOutput) ToScopeSelectorPtrOutput() ScopeSelectorPtrOutput {
	return o.ToScopeSelectorPtrOutputWithContext(context.Background())
}

func (o ScopeSelectorOutput) ToScopeSelectorPtrOutputWithContext(ctx context.Context) ScopeSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeSelector) *ScopeSelector {
		return &v
	}).(ScopeSelectorPtrOutput)
}

// A list of scope selector requirements by scope of the resources.
func (o ScopeSelectorOutput) MatchExpressions() ScopedResourceSelectorRequirementArrayOutput {
	return o.ApplyT(func(v ScopeSelector) []ScopedResourceSelectorRequirement { return v.MatchExpressions }).(ScopedResourceSelectorRequirementArrayOutput)
}

type ScopeSelectorPtrOutput struct{ *pulumi.OutputState }

func (ScopeSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeSelector)(nil)).Elem()
}

func (o ScopeSelectorPtrOutput) ToScopeSelectorPtrOutput() ScopeSelectorPtrOutput {
	return o
}

func (o ScopeSelectorPtrOutput) ToScopeSelectorPtrOutputWithContext(ctx context.Context) ScopeSelectorPtrOutput {
	return o
}

func (o ScopeSelectorPtrOutput) Elem() ScopeSelectorOutput {
	return o.ApplyT(func(v *ScopeSelector) ScopeSelector {
		if v != nil {
			return *v
		}
		var ret ScopeSelector
		return ret
	}).(ScopeSelectorOutput)
}

// A list of scope selector requirements by scope of the resources.
func (o ScopeSelectorPtrOutput) MatchExpressions() ScopedResourceSelectorRequirementArrayOutput {
	return o.ApplyT(func(v *ScopeSelector) []ScopedResourceSelectorRequirement {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ScopedResourceSelectorRequirementArrayOutput)
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelectorPatch struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []ScopedResourceSelectorRequirementPatch `pulumi:"matchExpressions"`
}

// ScopeSelectorPatchInput is an input type that accepts ScopeSelectorPatchArgs and ScopeSelectorPatchOutput values.
// You can construct a concrete instance of `ScopeSelectorPatchInput` via:
//
//	ScopeSelectorPatchArgs{...}
type ScopeSelectorPatchInput interface {
	pulumi.Input

	ToScopeSelectorPatchOutput() ScopeSelectorPatchOutput
	ToScopeSelectorPatchOutputWithContext(context.Context) ScopeSelectorPatchOutput
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelectorPatchArgs struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions ScopedResourceSelectorRequirementPatchArrayInput `pulumi:"matchExpressions"`
}

func (ScopeSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeSelectorPatch)(nil)).Elem()
}

func (i ScopeSelectorPatchArgs) ToScopeSelectorPatchOutput() ScopeSelectorPatchOutput {
	return i.ToScopeSelectorPatchOutputWithContext(context.Background())
}

func (i ScopeSelectorPatchArgs) ToScopeSelectorPatchOutputWithContext(ctx context.Context) ScopeSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorPatchOutput)
}

func (i ScopeSelectorPatchArgs) ToScopeSelectorPatchPtrOutput() ScopeSelectorPatchPtrOutput {
	return i.ToScopeSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ScopeSelectorPatchArgs) ToScopeSelectorPatchPtrOutputWithContext(ctx context.Context) ScopeSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorPatchOutput).ToScopeSelectorPatchPtrOutputWithContext(ctx)
}

// ScopeSelectorPatchPtrInput is an input type that accepts ScopeSelectorPatchArgs, ScopeSelectorPatchPtr and ScopeSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ScopeSelectorPatchPtrInput` via:
//
//	        ScopeSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ScopeSelectorPatchPtrInput interface {
	pulumi.Input

	ToScopeSelectorPatchPtrOutput() ScopeSelectorPatchPtrOutput
	ToScopeSelectorPatchPtrOutputWithContext(context.Context) ScopeSelectorPatchPtrOutput
}

type scopeSelectorPatchPtrType ScopeSelectorPatchArgs

func ScopeSelectorPatchPtr(v *ScopeSelectorPatchArgs) ScopeSelectorPatchPtrInput {
	return (*scopeSelectorPatchPtrType)(v)
}

func (*scopeSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeSelectorPatch)(nil)).Elem()
}

func (i *scopeSelectorPatchPtrType) ToScopeSelectorPatchPtrOutput() ScopeSelectorPatchPtrOutput {
	return i.ToScopeSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *scopeSelectorPatchPtrType) ToScopeSelectorPatchPtrOutputWithContext(ctx context.Context) ScopeSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeSelectorPatchPtrOutput)
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type ScopeSelectorPatchOutput struct{ *pulumi.OutputState }

func (ScopeSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeSelectorPatch)(nil)).Elem()
}

func (o ScopeSelectorPatchOutput) ToScopeSelectorPatchOutput() ScopeSelectorPatchOutput {
	return o
}

func (o ScopeSelectorPatchOutput) ToScopeSelectorPatchOutputWithContext(ctx context.Context) ScopeSelectorPatchOutput {
	return o
}

func (o ScopeSelectorPatchOutput) ToScopeSelectorPatchPtrOutput() ScopeSelectorPatchPtrOutput {
	return o.ToScopeSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ScopeSelectorPatchOutput) ToScopeSelectorPatchPtrOutputWithContext(ctx context.Context) ScopeSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeSelectorPatch) *ScopeSelectorPatch {
		return &v
	}).(ScopeSelectorPatchPtrOutput)
}

// A list of scope selector requirements by scope of the resources.
func (o ScopeSelectorPatchOutput) MatchExpressions() ScopedResourceSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v ScopeSelectorPatch) []ScopedResourceSelectorRequirementPatch { return v.MatchExpressions }).(ScopedResourceSelectorRequirementPatchArrayOutput)
}

type ScopeSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ScopeSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeSelectorPatch)(nil)).Elem()
}

func (o ScopeSelectorPatchPtrOutput) ToScopeSelectorPatchPtrOutput() ScopeSelectorPatchPtrOutput {
	return o
}

func (o ScopeSelectorPatchPtrOutput) ToScopeSelectorPatchPtrOutputWithContext(ctx context.Context) ScopeSelectorPatchPtrOutput {
	return o
}

func (o ScopeSelectorPatchPtrOutput) Elem() ScopeSelectorPatchOutput {
	return o.ApplyT(func(v *ScopeSelectorPatch) ScopeSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ScopeSelectorPatch
		return ret
	}).(ScopeSelectorPatchOutput)
}

// A list of scope selector requirements by scope of the resources.
func (o ScopeSelectorPatchPtrOutput) MatchExpressions() ScopedResourceSelectorRequirementPatchArrayOutput {
	return o.ApplyT(func(v *ScopeSelectorPatch) []ScopedResourceSelectorRequirementPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ScopedResourceSelectorRequirementPatchArrayOutput)
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirement struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator string `pulumi:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName string `pulumi:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ScopedResourceSelectorRequirementInput is an input type that accepts ScopedResourceSelectorRequirementArgs and ScopedResourceSelectorRequirementOutput values.
// You can construct a concrete instance of `ScopedResourceSelectorRequirementInput` via:
//
//	ScopedResourceSelectorRequirementArgs{...}
type ScopedResourceSelectorRequirementInput interface {
	pulumi.Input

	ToScopedResourceSelectorRequirementOutput() ScopedResourceSelectorRequirementOutput
	ToScopedResourceSelectorRequirementOutputWithContext(context.Context) ScopedResourceSelectorRequirementOutput
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirementArgs struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName pulumi.StringInput `pulumi:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopedResourceSelectorRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopedResourceSelectorRequirement)(nil)).Elem()
}

func (i ScopedResourceSelectorRequirementArgs) ToScopedResourceSelectorRequirementOutput() ScopedResourceSelectorRequirementOutput {
	return i.ToScopedResourceSelectorRequirementOutputWithContext(context.Background())
}

func (i ScopedResourceSelectorRequirementArgs) ToScopedResourceSelectorRequirementOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedResourceSelectorRequirementOutput)
}

// ScopedResourceSelectorRequirementArrayInput is an input type that accepts ScopedResourceSelectorRequirementArray and ScopedResourceSelectorRequirementArrayOutput values.
// You can construct a concrete instance of `ScopedResourceSelectorRequirementArrayInput` via:
//
//	ScopedResourceSelectorRequirementArray{ ScopedResourceSelectorRequirementArgs{...} }
type ScopedResourceSelectorRequirementArrayInput interface {
	pulumi.Input

	ToScopedResourceSelectorRequirementArrayOutput() ScopedResourceSelectorRequirementArrayOutput
	ToScopedResourceSelectorRequirementArrayOutputWithContext(context.Context) ScopedResourceSelectorRequirementArrayOutput
}

type ScopedResourceSelectorRequirementArray []ScopedResourceSelectorRequirementInput

func (ScopedResourceSelectorRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopedResourceSelectorRequirement)(nil)).Elem()
}

func (i ScopedResourceSelectorRequirementArray) ToScopedResourceSelectorRequirementArrayOutput() ScopedResourceSelectorRequirementArrayOutput {
	return i.ToScopedResourceSelectorRequirementArrayOutputWithContext(context.Background())
}

func (i ScopedResourceSelectorRequirementArray) ToScopedResourceSelectorRequirementArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedResourceSelectorRequirementArrayOutput)
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirementOutput struct{ *pulumi.OutputState }

func (ScopedResourceSelectorRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopedResourceSelectorRequirement)(nil)).Elem()
}

func (o ScopedResourceSelectorRequirementOutput) ToScopedResourceSelectorRequirementOutput() ScopedResourceSelectorRequirementOutput {
	return o
}

func (o ScopedResourceSelectorRequirementOutput) ToScopedResourceSelectorRequirementOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementOutput {
	return o
}

// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
func (o ScopedResourceSelectorRequirementOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirement) string { return v.Operator }).(pulumi.StringOutput)
}

// The name of the scope that the selector applies to.
func (o ScopedResourceSelectorRequirementOutput) ScopeName() pulumi.StringOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirement) string { return v.ScopeName }).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ScopedResourceSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopedResourceSelectorRequirementArrayOutput struct{ *pulumi.OutputState }

func (ScopedResourceSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopedResourceSelectorRequirement)(nil)).Elem()
}

func (o ScopedResourceSelectorRequirementArrayOutput) ToScopedResourceSelectorRequirementArrayOutput() ScopedResourceSelectorRequirementArrayOutput {
	return o
}

func (o ScopedResourceSelectorRequirementArrayOutput) ToScopedResourceSelectorRequirementArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementArrayOutput {
	return o
}

func (o ScopedResourceSelectorRequirementArrayOutput) Index(i pulumi.IntInput) ScopedResourceSelectorRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopedResourceSelectorRequirement {
		return vs[0].([]ScopedResourceSelectorRequirement)[vs[1].(int)]
	}).(ScopedResourceSelectorRequirementOutput)
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirementPatch struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator *string `pulumi:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName *string `pulumi:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ScopedResourceSelectorRequirementPatchInput is an input type that accepts ScopedResourceSelectorRequirementPatchArgs and ScopedResourceSelectorRequirementPatchOutput values.
// You can construct a concrete instance of `ScopedResourceSelectorRequirementPatchInput` via:
//
//	ScopedResourceSelectorRequirementPatchArgs{...}
type ScopedResourceSelectorRequirementPatchInput interface {
	pulumi.Input

	ToScopedResourceSelectorRequirementPatchOutput() ScopedResourceSelectorRequirementPatchOutput
	ToScopedResourceSelectorRequirementPatchOutputWithContext(context.Context) ScopedResourceSelectorRequirementPatchOutput
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirementPatchArgs struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName pulumi.StringPtrInput `pulumi:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopedResourceSelectorRequirementPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopedResourceSelectorRequirementPatch)(nil)).Elem()
}

func (i ScopedResourceSelectorRequirementPatchArgs) ToScopedResourceSelectorRequirementPatchOutput() ScopedResourceSelectorRequirementPatchOutput {
	return i.ToScopedResourceSelectorRequirementPatchOutputWithContext(context.Background())
}

func (i ScopedResourceSelectorRequirementPatchArgs) ToScopedResourceSelectorRequirementPatchOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedResourceSelectorRequirementPatchOutput)
}

// ScopedResourceSelectorRequirementPatchArrayInput is an input type that accepts ScopedResourceSelectorRequirementPatchArray and ScopedResourceSelectorRequirementPatchArrayOutput values.
// You can construct a concrete instance of `ScopedResourceSelectorRequirementPatchArrayInput` via:
//
//	ScopedResourceSelectorRequirementPatchArray{ ScopedResourceSelectorRequirementPatchArgs{...} }
type ScopedResourceSelectorRequirementPatchArrayInput interface {
	pulumi.Input

	ToScopedResourceSelectorRequirementPatchArrayOutput() ScopedResourceSelectorRequirementPatchArrayOutput
	ToScopedResourceSelectorRequirementPatchArrayOutputWithContext(context.Context) ScopedResourceSelectorRequirementPatchArrayOutput
}

type ScopedResourceSelectorRequirementPatchArray []ScopedResourceSelectorRequirementPatchInput

func (ScopedResourceSelectorRequirementPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopedResourceSelectorRequirementPatch)(nil)).Elem()
}

func (i ScopedResourceSelectorRequirementPatchArray) ToScopedResourceSelectorRequirementPatchArrayOutput() ScopedResourceSelectorRequirementPatchArrayOutput {
	return i.ToScopedResourceSelectorRequirementPatchArrayOutputWithContext(context.Background())
}

func (i ScopedResourceSelectorRequirementPatchArray) ToScopedResourceSelectorRequirementPatchArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedResourceSelectorRequirementPatchArrayOutput)
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type ScopedResourceSelectorRequirementPatchOutput struct{ *pulumi.OutputState }

func (ScopedResourceSelectorRequirementPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopedResourceSelectorRequirementPatch)(nil)).Elem()
}

func (o ScopedResourceSelectorRequirementPatchOutput) ToScopedResourceSelectorRequirementPatchOutput() ScopedResourceSelectorRequirementPatchOutput {
	return o
}

func (o ScopedResourceSelectorRequirementPatchOutput) ToScopedResourceSelectorRequirementPatchOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementPatchOutput {
	return o
}

// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
func (o ScopedResourceSelectorRequirementPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirementPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The name of the scope that the selector applies to.
func (o ScopedResourceSelectorRequirementPatchOutput) ScopeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirementPatch) *string { return v.ScopeName }).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ScopedResourceSelectorRequirementPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopedResourceSelectorRequirementPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopedResourceSelectorRequirementPatchArrayOutput struct{ *pulumi.OutputState }

func (ScopedResourceSelectorRequirementPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopedResourceSelectorRequirementPatch)(nil)).Elem()
}

func (o ScopedResourceSelectorRequirementPatchArrayOutput) ToScopedResourceSelectorRequirementPatchArrayOutput() ScopedResourceSelectorRequirementPatchArrayOutput {
	return o
}

func (o ScopedResourceSelectorRequirementPatchArrayOutput) ToScopedResourceSelectorRequirementPatchArrayOutputWithContext(ctx context.Context) ScopedResourceSelectorRequirementPatchArrayOutput {
	return o
}

func (o ScopedResourceSelectorRequirementPatchArrayOutput) Index(i pulumi.IntInput) ScopedResourceSelectorRequirementPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopedResourceSelectorRequirementPatch {
		return vs[0].([]ScopedResourceSelectorRequirementPatch)[vs[1].(int)]
	}).(ScopedResourceSelectorRequirementPatchOutput)
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `pulumi:"type"`
}

// SeccompProfileInput is an input type that accepts SeccompProfileArgs and SeccompProfileOutput values.
// You can construct a concrete instance of `SeccompProfileInput` via:
//
//	SeccompProfileArgs{...}
type SeccompProfileInput interface {
	pulumi.Input

	ToSeccompProfileOutput() SeccompProfileOutput
	ToSeccompProfileOutputWithContext(context.Context) SeccompProfileOutput
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfileArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SeccompProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SeccompProfile)(nil)).Elem()
}

func (i SeccompProfileArgs) ToSeccompProfileOutput() SeccompProfileOutput {
	return i.ToSeccompProfileOutputWithContext(context.Background())
}

func (i SeccompProfileArgs) ToSeccompProfileOutputWithContext(ctx context.Context) SeccompProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfileOutput)
}

func (i SeccompProfileArgs) ToSeccompProfilePtrOutput() SeccompProfilePtrOutput {
	return i.ToSeccompProfilePtrOutputWithContext(context.Background())
}

func (i SeccompProfileArgs) ToSeccompProfilePtrOutputWithContext(ctx context.Context) SeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfileOutput).ToSeccompProfilePtrOutputWithContext(ctx)
}

// SeccompProfilePtrInput is an input type that accepts SeccompProfileArgs, SeccompProfilePtr and SeccompProfilePtrOutput values.
// You can construct a concrete instance of `SeccompProfilePtrInput` via:
//
//	        SeccompProfileArgs{...}
//
//	or:
//
//	        nil
type SeccompProfilePtrInput interface {
	pulumi.Input

	ToSeccompProfilePtrOutput() SeccompProfilePtrOutput
	ToSeccompProfilePtrOutputWithContext(context.Context) SeccompProfilePtrOutput
}

type seccompProfilePtrType SeccompProfileArgs

func SeccompProfilePtr(v *SeccompProfileArgs) SeccompProfilePtrInput {
	return (*seccompProfilePtrType)(v)
}

func (*seccompProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SeccompProfile)(nil)).Elem()
}

func (i *seccompProfilePtrType) ToSeccompProfilePtrOutput() SeccompProfilePtrOutput {
	return i.ToSeccompProfilePtrOutputWithContext(context.Background())
}

func (i *seccompProfilePtrType) ToSeccompProfilePtrOutputWithContext(ctx context.Context) SeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfilePtrOutput)
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfileOutput struct{ *pulumi.OutputState }

func (SeccompProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SeccompProfile)(nil)).Elem()
}

func (o SeccompProfileOutput) ToSeccompProfileOutput() SeccompProfileOutput {
	return o
}

func (o SeccompProfileOutput) ToSeccompProfileOutputWithContext(ctx context.Context) SeccompProfileOutput {
	return o
}

func (o SeccompProfileOutput) ToSeccompProfilePtrOutput() SeccompProfilePtrOutput {
	return o.ToSeccompProfilePtrOutputWithContext(context.Background())
}

func (o SeccompProfileOutput) ToSeccompProfilePtrOutputWithContext(ctx context.Context) SeccompProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SeccompProfile) *SeccompProfile {
		return &v
	}).(SeccompProfilePtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
func (o SeccompProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SeccompProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o SeccompProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SeccompProfile) string { return v.Type }).(pulumi.StringOutput)
}

type SeccompProfilePtrOutput struct{ *pulumi.OutputState }

func (SeccompProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SeccompProfile)(nil)).Elem()
}

func (o SeccompProfilePtrOutput) ToSeccompProfilePtrOutput() SeccompProfilePtrOutput {
	return o
}

func (o SeccompProfilePtrOutput) ToSeccompProfilePtrOutputWithContext(ctx context.Context) SeccompProfilePtrOutput {
	return o
}

func (o SeccompProfilePtrOutput) Elem() SeccompProfileOutput {
	return o.ApplyT(func(v *SeccompProfile) SeccompProfile {
		if v != nil {
			return *v
		}
		var ret SeccompProfile
		return ret
	}).(SeccompProfileOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
func (o SeccompProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o SeccompProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeccompProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfilePatch struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type *string `pulumi:"type"`
}

// SeccompProfilePatchInput is an input type that accepts SeccompProfilePatchArgs and SeccompProfilePatchOutput values.
// You can construct a concrete instance of `SeccompProfilePatchInput` via:
//
//	SeccompProfilePatchArgs{...}
type SeccompProfilePatchInput interface {
	pulumi.Input

	ToSeccompProfilePatchOutput() SeccompProfilePatchOutput
	ToSeccompProfilePatchOutputWithContext(context.Context) SeccompProfilePatchOutput
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfilePatchArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SeccompProfilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SeccompProfilePatch)(nil)).Elem()
}

func (i SeccompProfilePatchArgs) ToSeccompProfilePatchOutput() SeccompProfilePatchOutput {
	return i.ToSeccompProfilePatchOutputWithContext(context.Background())
}

func (i SeccompProfilePatchArgs) ToSeccompProfilePatchOutputWithContext(ctx context.Context) SeccompProfilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfilePatchOutput)
}

func (i SeccompProfilePatchArgs) ToSeccompProfilePatchPtrOutput() SeccompProfilePatchPtrOutput {
	return i.ToSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i SeccompProfilePatchArgs) ToSeccompProfilePatchPtrOutputWithContext(ctx context.Context) SeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfilePatchOutput).ToSeccompProfilePatchPtrOutputWithContext(ctx)
}

// SeccompProfilePatchPtrInput is an input type that accepts SeccompProfilePatchArgs, SeccompProfilePatchPtr and SeccompProfilePatchPtrOutput values.
// You can construct a concrete instance of `SeccompProfilePatchPtrInput` via:
//
//	        SeccompProfilePatchArgs{...}
//
//	or:
//
//	        nil
type SeccompProfilePatchPtrInput interface {
	pulumi.Input

	ToSeccompProfilePatchPtrOutput() SeccompProfilePatchPtrOutput
	ToSeccompProfilePatchPtrOutputWithContext(context.Context) SeccompProfilePatchPtrOutput
}

type seccompProfilePatchPtrType SeccompProfilePatchArgs

func SeccompProfilePatchPtr(v *SeccompProfilePatchArgs) SeccompProfilePatchPtrInput {
	return (*seccompProfilePatchPtrType)(v)
}

func (*seccompProfilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SeccompProfilePatch)(nil)).Elem()
}

func (i *seccompProfilePatchPtrType) ToSeccompProfilePatchPtrOutput() SeccompProfilePatchPtrOutput {
	return i.ToSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i *seccompProfilePatchPtrType) ToSeccompProfilePatchPtrOutputWithContext(ctx context.Context) SeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeccompProfilePatchPtrOutput)
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type SeccompProfilePatchOutput struct{ *pulumi.OutputState }

func (SeccompProfilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SeccompProfilePatch)(nil)).Elem()
}

func (o SeccompProfilePatchOutput) ToSeccompProfilePatchOutput() SeccompProfilePatchOutput {
	return o
}

func (o SeccompProfilePatchOutput) ToSeccompProfilePatchOutputWithContext(ctx context.Context) SeccompProfilePatchOutput {
	return o
}

func (o SeccompProfilePatchOutput) ToSeccompProfilePatchPtrOutput() SeccompProfilePatchPtrOutput {
	return o.ToSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (o SeccompProfilePatchOutput) ToSeccompProfilePatchPtrOutputWithContext(ctx context.Context) SeccompProfilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SeccompProfilePatch) *SeccompProfilePatch {
		return &v
	}).(SeccompProfilePatchPtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
func (o SeccompProfilePatchOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SeccompProfilePatch) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o SeccompProfilePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SeccompProfilePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SeccompProfilePatchPtrOutput struct{ *pulumi.OutputState }

func (SeccompProfilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SeccompProfilePatch)(nil)).Elem()
}

func (o SeccompProfilePatchPtrOutput) ToSeccompProfilePatchPtrOutput() SeccompProfilePatchPtrOutput {
	return o
}

func (o SeccompProfilePatchPtrOutput) ToSeccompProfilePatchPtrOutputWithContext(ctx context.Context) SeccompProfilePatchPtrOutput {
	return o
}

func (o SeccompProfilePatchPtrOutput) Elem() SeccompProfilePatchOutput {
	return o.ApplyT(func(v *SeccompProfilePatch) SeccompProfilePatch {
		if v != nil {
			return *v
		}
		var ret SeccompProfilePatch
		return ret
	}).(SeccompProfilePatchOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
func (o SeccompProfilePatchPtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o SeccompProfilePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data map[string]string `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData map[string]string `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `pulumi:"type"`
}

// SecretTypeInput is an input type that accepts SecretTypeArgs and SecretTypeOutput values.
// You can construct a concrete instance of `SecretTypeInput` via:
//
//	SecretTypeArgs{...}
type SecretTypeInput interface {
	pulumi.Input

	ToSecretTypeOutput() SecretTypeOutput
	ToSecretTypeOutputWithContext(context.Context) SecretTypeOutput
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapInput `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrInput `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData pulumi.StringMapInput `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SecretTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretType)(nil)).Elem()
}

func (i SecretTypeArgs) ToSecretTypeOutput() SecretTypeOutput {
	return i.ToSecretTypeOutputWithContext(context.Background())
}

func (i SecretTypeArgs) ToSecretTypeOutputWithContext(ctx context.Context) SecretTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTypeOutput)
}

// SecretTypeArrayInput is an input type that accepts SecretTypeArray and SecretTypeArrayOutput values.
// You can construct a concrete instance of `SecretTypeArrayInput` via:
//
//	SecretTypeArray{ SecretTypeArgs{...} }
type SecretTypeArrayInput interface {
	pulumi.Input

	ToSecretTypeArrayOutput() SecretTypeArrayOutput
	ToSecretTypeArrayOutputWithContext(context.Context) SecretTypeArrayOutput
}

type SecretTypeArray []SecretTypeInput

func (SecretTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretType)(nil)).Elem()
}

func (i SecretTypeArray) ToSecretTypeArrayOutput() SecretTypeArrayOutput {
	return i.ToSecretTypeArrayOutputWithContext(context.Background())
}

func (i SecretTypeArray) ToSecretTypeArrayOutputWithContext(ctx context.Context) SecretTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTypeArrayOutput)
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretTypeOutput struct{ *pulumi.OutputState }

func (SecretTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretType)(nil)).Elem()
}

func (o SecretTypeOutput) ToSecretTypeOutput() SecretTypeOutput {
	return o
}

func (o SecretTypeOutput) ToSecretTypeOutputWithContext(ctx context.Context) SecretTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SecretTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
func (o SecretTypeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretType) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (o SecretTypeOutput) Immutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretType) *bool { return v.Immutable }).(pulumi.BoolPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SecretTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SecretType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
func (o SecretTypeOutput) StringData() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretType) map[string]string { return v.StringData }).(pulumi.StringMapOutput)
}

// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
func (o SecretTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SecretTypeArrayOutput struct{ *pulumi.OutputState }

func (SecretTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretType)(nil)).Elem()
}

func (o SecretTypeArrayOutput) ToSecretTypeArrayOutput() SecretTypeArrayOutput {
	return o
}

func (o SecretTypeArrayOutput) ToSecretTypeArrayOutputWithContext(ctx context.Context) SecretTypeArrayOutput {
	return o
}

func (o SecretTypeArrayOutput) Index(i pulumi.IntInput) SecretTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretType {
		return vs[0].([]SecretType)[vs[1].(int)]
	}).(SecretTypeOutput)
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretEnvSourceInput is an input type that accepts SecretEnvSourceArgs and SecretEnvSourceOutput values.
// You can construct a concrete instance of `SecretEnvSourceInput` via:
//
//	SecretEnvSourceArgs{...}
type SecretEnvSourceInput interface {
	pulumi.Input

	ToSecretEnvSourceOutput() SecretEnvSourceOutput
	ToSecretEnvSourceOutputWithContext(context.Context) SecretEnvSourceOutput
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return i.ToSecretEnvSourceOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput)
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput).ToSecretEnvSourcePtrOutputWithContext(ctx)
}

// SecretEnvSourcePtrInput is an input type that accepts SecretEnvSourceArgs, SecretEnvSourcePtr and SecretEnvSourcePtrOutput values.
// You can construct a concrete instance of `SecretEnvSourcePtrInput` via:
//
//	        SecretEnvSourceArgs{...}
//
//	or:
//
//	        nil
type SecretEnvSourcePtrInput interface {
	pulumi.Input

	ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput
	ToSecretEnvSourcePtrOutputWithContext(context.Context) SecretEnvSourcePtrOutput
}

type secretEnvSourcePtrType SecretEnvSourceArgs

func SecretEnvSourcePtr(v *SecretEnvSourceArgs) SecretEnvSourcePtrInput {
	return (*secretEnvSourcePtrType)(v)
}

func (*secretEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePtrOutput)
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceOutput struct{ *pulumi.OutputState }

func (SecretEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretEnvSource) *SecretEnvSource {
		return &v
	}).(SecretEnvSourcePtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) Elem() SecretEnvSourceOutput {
	return o.ApplyT(func(v *SecretEnvSource) SecretEnvSource {
		if v != nil {
			return *v
		}
		var ret SecretEnvSource
		return ret
	}).(SecretEnvSourceOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourcePatch struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretEnvSourcePatchInput is an input type that accepts SecretEnvSourcePatchArgs and SecretEnvSourcePatchOutput values.
// You can construct a concrete instance of `SecretEnvSourcePatchInput` via:
//
//	SecretEnvSourcePatchArgs{...}
type SecretEnvSourcePatchInput interface {
	pulumi.Input

	ToSecretEnvSourcePatchOutput() SecretEnvSourcePatchOutput
	ToSecretEnvSourcePatchOutputWithContext(context.Context) SecretEnvSourcePatchOutput
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourcePatchArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretEnvSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSourcePatch)(nil)).Elem()
}

func (i SecretEnvSourcePatchArgs) ToSecretEnvSourcePatchOutput() SecretEnvSourcePatchOutput {
	return i.ToSecretEnvSourcePatchOutputWithContext(context.Background())
}

func (i SecretEnvSourcePatchArgs) ToSecretEnvSourcePatchOutputWithContext(ctx context.Context) SecretEnvSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePatchOutput)
}

func (i SecretEnvSourcePatchArgs) ToSecretEnvSourcePatchPtrOutput() SecretEnvSourcePatchPtrOutput {
	return i.ToSecretEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (i SecretEnvSourcePatchArgs) ToSecretEnvSourcePatchPtrOutputWithContext(ctx context.Context) SecretEnvSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePatchOutput).ToSecretEnvSourcePatchPtrOutputWithContext(ctx)
}

// SecretEnvSourcePatchPtrInput is an input type that accepts SecretEnvSourcePatchArgs, SecretEnvSourcePatchPtr and SecretEnvSourcePatchPtrOutput values.
// You can construct a concrete instance of `SecretEnvSourcePatchPtrInput` via:
//
//	        SecretEnvSourcePatchArgs{...}
//
//	or:
//
//	        nil
type SecretEnvSourcePatchPtrInput interface {
	pulumi.Input

	ToSecretEnvSourcePatchPtrOutput() SecretEnvSourcePatchPtrOutput
	ToSecretEnvSourcePatchPtrOutputWithContext(context.Context) SecretEnvSourcePatchPtrOutput
}

type secretEnvSourcePatchPtrType SecretEnvSourcePatchArgs

func SecretEnvSourcePatchPtr(v *SecretEnvSourcePatchArgs) SecretEnvSourcePatchPtrInput {
	return (*secretEnvSourcePatchPtrType)(v)
}

func (*secretEnvSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSourcePatch)(nil)).Elem()
}

func (i *secretEnvSourcePatchPtrType) ToSecretEnvSourcePatchPtrOutput() SecretEnvSourcePatchPtrOutput {
	return i.ToSecretEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (i *secretEnvSourcePatchPtrType) ToSecretEnvSourcePatchPtrOutputWithContext(ctx context.Context) SecretEnvSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePatchPtrOutput)
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourcePatchOutput struct{ *pulumi.OutputState }

func (SecretEnvSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSourcePatch)(nil)).Elem()
}

func (o SecretEnvSourcePatchOutput) ToSecretEnvSourcePatchOutput() SecretEnvSourcePatchOutput {
	return o
}

func (o SecretEnvSourcePatchOutput) ToSecretEnvSourcePatchOutputWithContext(ctx context.Context) SecretEnvSourcePatchOutput {
	return o
}

func (o SecretEnvSourcePatchOutput) ToSecretEnvSourcePatchPtrOutput() SecretEnvSourcePatchPtrOutput {
	return o.ToSecretEnvSourcePatchPtrOutputWithContext(context.Background())
}

func (o SecretEnvSourcePatchOutput) ToSecretEnvSourcePatchPtrOutputWithContext(ctx context.Context) SecretEnvSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretEnvSourcePatch) *SecretEnvSourcePatch {
		return &v
	}).(SecretEnvSourcePatchPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretEnvSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourcePatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretEnvSourcePatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretEnvSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (SecretEnvSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSourcePatch)(nil)).Elem()
}

func (o SecretEnvSourcePatchPtrOutput) ToSecretEnvSourcePatchPtrOutput() SecretEnvSourcePatchPtrOutput {
	return o
}

func (o SecretEnvSourcePatchPtrOutput) ToSecretEnvSourcePatchPtrOutputWithContext(ctx context.Context) SecretEnvSourcePatchPtrOutput {
	return o
}

func (o SecretEnvSourcePatchPtrOutput) Elem() SecretEnvSourcePatchOutput {
	return o.ApplyT(func(v *SecretEnvSourcePatch) SecretEnvSourcePatch {
		if v != nil {
			return *v
		}
		var ret SecretEnvSourcePatch
		return ret
	}).(SecretEnvSourcePatchOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretEnvSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretEnvSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourcePatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretEnvSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretKeySelectorInput is an input type that accepts SecretKeySelectorArgs and SecretKeySelectorOutput values.
// You can construct a concrete instance of `SecretKeySelectorInput` via:
//
//	SecretKeySelectorArgs{...}
type SecretKeySelectorInput interface {
	pulumi.Input

	ToSecretKeySelectorOutput() SecretKeySelectorOutput
	ToSecretKeySelectorOutputWithContext(context.Context) SecretKeySelectorOutput
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return i.ToSecretKeySelectorOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput)
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput).ToSecretKeySelectorPtrOutputWithContext(ctx)
}

// SecretKeySelectorPtrInput is an input type that accepts SecretKeySelectorArgs, SecretKeySelectorPtr and SecretKeySelectorPtrOutput values.
// You can construct a concrete instance of `SecretKeySelectorPtrInput` via:
//
//	        SecretKeySelectorArgs{...}
//
//	or:
//
//	        nil
type SecretKeySelectorPtrInput interface {
	pulumi.Input

	ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput
	ToSecretKeySelectorPtrOutputWithContext(context.Context) SecretKeySelectorPtrOutput
}

type secretKeySelectorPtrType SecretKeySelectorArgs

func SecretKeySelectorPtr(v *SecretKeySelectorArgs) SecretKeySelectorPtrInput {
	return (*secretKeySelectorPtrType)(v)
}

func (*secretKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretKeySelector) *SecretKeySelector {
		return &v
	}).(SecretKeySelectorPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o SecretKeySelectorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelector) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretKeySelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o SecretKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) Elem() SecretKeySelectorOutput {
	return o.ApplyT(func(v *SecretKeySelector) SecretKeySelector {
		if v != nil {
			return *v
		}
		var ret SecretKeySelector
		return ret
	}).(SecretKeySelectorOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o SecretKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o SecretKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretKeySelectorPatchInput is an input type that accepts SecretKeySelectorPatchArgs and SecretKeySelectorPatchOutput values.
// You can construct a concrete instance of `SecretKeySelectorPatchInput` via:
//
//	SecretKeySelectorPatchArgs{...}
type SecretKeySelectorPatchInput interface {
	pulumi.Input

	ToSecretKeySelectorPatchOutput() SecretKeySelectorPatchOutput
	ToSecretKeySelectorPatchOutputWithContext(context.Context) SecretKeySelectorPatchOutput
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretKeySelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelectorPatch)(nil)).Elem()
}

func (i SecretKeySelectorPatchArgs) ToSecretKeySelectorPatchOutput() SecretKeySelectorPatchOutput {
	return i.ToSecretKeySelectorPatchOutputWithContext(context.Background())
}

func (i SecretKeySelectorPatchArgs) ToSecretKeySelectorPatchOutputWithContext(ctx context.Context) SecretKeySelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPatchOutput)
}

func (i SecretKeySelectorPatchArgs) ToSecretKeySelectorPatchPtrOutput() SecretKeySelectorPatchPtrOutput {
	return i.ToSecretKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (i SecretKeySelectorPatchArgs) ToSecretKeySelectorPatchPtrOutputWithContext(ctx context.Context) SecretKeySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPatchOutput).ToSecretKeySelectorPatchPtrOutputWithContext(ctx)
}

// SecretKeySelectorPatchPtrInput is an input type that accepts SecretKeySelectorPatchArgs, SecretKeySelectorPatchPtr and SecretKeySelectorPatchPtrOutput values.
// You can construct a concrete instance of `SecretKeySelectorPatchPtrInput` via:
//
//	        SecretKeySelectorPatchArgs{...}
//
//	or:
//
//	        nil
type SecretKeySelectorPatchPtrInput interface {
	pulumi.Input

	ToSecretKeySelectorPatchPtrOutput() SecretKeySelectorPatchPtrOutput
	ToSecretKeySelectorPatchPtrOutputWithContext(context.Context) SecretKeySelectorPatchPtrOutput
}

type secretKeySelectorPatchPtrType SecretKeySelectorPatchArgs

func SecretKeySelectorPatchPtr(v *SecretKeySelectorPatchArgs) SecretKeySelectorPatchPtrInput {
	return (*secretKeySelectorPatchPtrType)(v)
}

func (*secretKeySelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelectorPatch)(nil)).Elem()
}

func (i *secretKeySelectorPatchPtrType) ToSecretKeySelectorPatchPtrOutput() SecretKeySelectorPatchPtrOutput {
	return i.ToSecretKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (i *secretKeySelectorPatchPtrType) ToSecretKeySelectorPatchPtrOutputWithContext(ctx context.Context) SecretKeySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPatchPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorPatchOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelectorPatch)(nil)).Elem()
}

func (o SecretKeySelectorPatchOutput) ToSecretKeySelectorPatchOutput() SecretKeySelectorPatchOutput {
	return o
}

func (o SecretKeySelectorPatchOutput) ToSecretKeySelectorPatchOutputWithContext(ctx context.Context) SecretKeySelectorPatchOutput {
	return o
}

func (o SecretKeySelectorPatchOutput) ToSecretKeySelectorPatchPtrOutput() SecretKeySelectorPatchPtrOutput {
	return o.ToSecretKeySelectorPatchPtrOutputWithContext(context.Background())
}

func (o SecretKeySelectorPatchOutput) ToSecretKeySelectorPatchPtrOutputWithContext(ctx context.Context) SecretKeySelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretKeySelectorPatch) *SecretKeySelectorPatch {
		return &v
	}).(SecretKeySelectorPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o SecretKeySelectorPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelectorPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretKeySelectorPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelectorPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o SecretKeySelectorPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretKeySelectorPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretKeySelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelectorPatch)(nil)).Elem()
}

func (o SecretKeySelectorPatchPtrOutput) ToSecretKeySelectorPatchPtrOutput() SecretKeySelectorPatchPtrOutput {
	return o
}

func (o SecretKeySelectorPatchPtrOutput) ToSecretKeySelectorPatchPtrOutputWithContext(ctx context.Context) SecretKeySelectorPatchPtrOutput {
	return o
}

func (o SecretKeySelectorPatchPtrOutput) Elem() SecretKeySelectorPatchOutput {
	return o.ApplyT(func(v *SecretKeySelectorPatch) SecretKeySelectorPatch {
		if v != nil {
			return *v
		}
		var ret SecretKeySelectorPatch
		return ret
	}).(SecretKeySelectorPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o SecretKeySelectorPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretKeySelectorPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o SecretKeySelectorPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretKeySelectorPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretList is a list of Secret.
type SecretListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Items []SecretType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// SecretListTypeInput is an input type that accepts SecretListTypeArgs and SecretListTypeOutput values.
// You can construct a concrete instance of `SecretListTypeInput` via:
//
//	SecretListTypeArgs{...}
type SecretListTypeInput interface {
	pulumi.Input

	ToSecretListTypeOutput() SecretListTypeOutput
	ToSecretListTypeOutputWithContext(context.Context) SecretListTypeOutput
}

// SecretList is a list of Secret.
type SecretListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Items SecretTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (SecretListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretListType)(nil)).Elem()
}

func (i SecretListTypeArgs) ToSecretListTypeOutput() SecretListTypeOutput {
	return i.ToSecretListTypeOutputWithContext(context.Background())
}

func (i SecretListTypeArgs) ToSecretListTypeOutputWithContext(ctx context.Context) SecretListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretListTypeOutput)
}

// SecretList is a list of Secret.
type SecretListTypeOutput struct{ *pulumi.OutputState }

func (SecretListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretListType)(nil)).Elem()
}

func (o SecretListTypeOutput) ToSecretListTypeOutput() SecretListTypeOutput {
	return o
}

func (o SecretListTypeOutput) ToSecretListTypeOutputWithContext(ctx context.Context) SecretListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SecretListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
func (o SecretListTypeOutput) Items() SecretTypeArrayOutput {
	return o.ApplyT(func(v SecretListType) []SecretType { return v.Items }).(SecretTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v SecretListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data map[string]string `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData map[string]string `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `pulumi:"type"`
}

// SecretPatchTypeInput is an input type that accepts SecretPatchTypeArgs and SecretPatchTypeOutput values.
// You can construct a concrete instance of `SecretPatchTypeInput` via:
//
//	SecretPatchTypeArgs{...}
type SecretPatchTypeInput interface {
	pulumi.Input

	ToSecretPatchTypeOutput() SecretPatchTypeOutput
	ToSecretPatchTypeOutputWithContext(context.Context) SecretPatchTypeOutput
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data pulumi.StringMapInput `pulumi:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable pulumi.BoolPtrInput `pulumi:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData pulumi.StringMapInput `pulumi:"stringData"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SecretPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretPatchType)(nil)).Elem()
}

func (i SecretPatchTypeArgs) ToSecretPatchTypeOutput() SecretPatchTypeOutput {
	return i.ToSecretPatchTypeOutputWithContext(context.Background())
}

func (i SecretPatchTypeArgs) ToSecretPatchTypeOutputWithContext(ctx context.Context) SecretPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPatchTypeOutput)
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
//
// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
// fields, this encryption only applies to Pulumi's context, including the state file,
// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
// and the contents are visible to users with access to the Secret in Kubernetes using
// tools like 'kubectl'.
//
// For more information on securing Kubernetes Secrets, see the following links:
// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
// https://kubernetes.io/docs/concepts/configuration/secret/#risks
type SecretPatchTypeOutput struct{ *pulumi.OutputState }

func (SecretPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretPatchType)(nil)).Elem()
}

func (o SecretPatchTypeOutput) ToSecretPatchTypeOutput() SecretPatchTypeOutput {
	return o
}

func (o SecretPatchTypeOutput) ToSecretPatchTypeOutputWithContext(ctx context.Context) SecretPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SecretPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
func (o SecretPatchTypeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretPatchType) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (o SecretPatchTypeOutput) Immutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretPatchType) *bool { return v.Immutable }).(pulumi.BoolPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SecretPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SecretPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
func (o SecretPatchTypeOutput) StringData() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretPatchType) map[string]string { return v.StringData }).(pulumi.StringMapOutput)
}

// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
func (o SecretPatchTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretPatchType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjection struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPath `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretProjectionInput is an input type that accepts SecretProjectionArgs and SecretProjectionOutput values.
// You can construct a concrete instance of `SecretProjectionInput` via:
//
//	SecretProjectionArgs{...}
type SecretProjectionInput interface {
	pulumi.Input

	ToSecretProjectionOutput() SecretProjectionOutput
	ToSecretProjectionOutputWithContext(context.Context) SecretProjectionOutput
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjectionArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretProjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretProjection)(nil)).Elem()
}

func (i SecretProjectionArgs) ToSecretProjectionOutput() SecretProjectionOutput {
	return i.ToSecretProjectionOutputWithContext(context.Background())
}

func (i SecretProjectionArgs) ToSecretProjectionOutputWithContext(ctx context.Context) SecretProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionOutput)
}

func (i SecretProjectionArgs) ToSecretProjectionPtrOutput() SecretProjectionPtrOutput {
	return i.ToSecretProjectionPtrOutputWithContext(context.Background())
}

func (i SecretProjectionArgs) ToSecretProjectionPtrOutputWithContext(ctx context.Context) SecretProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionOutput).ToSecretProjectionPtrOutputWithContext(ctx)
}

// SecretProjectionPtrInput is an input type that accepts SecretProjectionArgs, SecretProjectionPtr and SecretProjectionPtrOutput values.
// You can construct a concrete instance of `SecretProjectionPtrInput` via:
//
//	        SecretProjectionArgs{...}
//
//	or:
//
//	        nil
type SecretProjectionPtrInput interface {
	pulumi.Input

	ToSecretProjectionPtrOutput() SecretProjectionPtrOutput
	ToSecretProjectionPtrOutputWithContext(context.Context) SecretProjectionPtrOutput
}

type secretProjectionPtrType SecretProjectionArgs

func SecretProjectionPtr(v *SecretProjectionArgs) SecretProjectionPtrInput {
	return (*secretProjectionPtrType)(v)
}

func (*secretProjectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretProjection)(nil)).Elem()
}

func (i *secretProjectionPtrType) ToSecretProjectionPtrOutput() SecretProjectionPtrOutput {
	return i.ToSecretProjectionPtrOutputWithContext(context.Background())
}

func (i *secretProjectionPtrType) ToSecretProjectionPtrOutputWithContext(ctx context.Context) SecretProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionPtrOutput)
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjectionOutput struct{ *pulumi.OutputState }

func (SecretProjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretProjection)(nil)).Elem()
}

func (o SecretProjectionOutput) ToSecretProjectionOutput() SecretProjectionOutput {
	return o
}

func (o SecretProjectionOutput) ToSecretProjectionOutputWithContext(ctx context.Context) SecretProjectionOutput {
	return o
}

func (o SecretProjectionOutput) ToSecretProjectionPtrOutput() SecretProjectionPtrOutput {
	return o.ToSecretProjectionPtrOutputWithContext(context.Background())
}

func (o SecretProjectionOutput) ToSecretProjectionPtrOutputWithContext(ctx context.Context) SecretProjectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretProjection) *SecretProjection {
		return &v
	}).(SecretProjectionPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretProjectionOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v SecretProjection) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretProjectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretProjection) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o SecretProjectionOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretProjection) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretProjectionPtrOutput struct{ *pulumi.OutputState }

func (SecretProjectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretProjection)(nil)).Elem()
}

func (o SecretProjectionPtrOutput) ToSecretProjectionPtrOutput() SecretProjectionPtrOutput {
	return o
}

func (o SecretProjectionPtrOutput) ToSecretProjectionPtrOutputWithContext(ctx context.Context) SecretProjectionPtrOutput {
	return o
}

func (o SecretProjectionPtrOutput) Elem() SecretProjectionOutput {
	return o.ApplyT(func(v *SecretProjection) SecretProjection {
		if v != nil {
			return *v
		}
		var ret SecretProjection
		return ret
	}).(SecretProjectionOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretProjectionPtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *SecretProjection) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretProjectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretProjection) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o SecretProjectionPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretProjection) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjectionPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPathPatch `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretProjectionPatchInput is an input type that accepts SecretProjectionPatchArgs and SecretProjectionPatchOutput values.
// You can construct a concrete instance of `SecretProjectionPatchInput` via:
//
//	SecretProjectionPatchArgs{...}
type SecretProjectionPatchInput interface {
	pulumi.Input

	ToSecretProjectionPatchOutput() SecretProjectionPatchOutput
	ToSecretProjectionPatchOutputWithContext(context.Context) SecretProjectionPatchOutput
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjectionPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathPatchArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretProjectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretProjectionPatch)(nil)).Elem()
}

func (i SecretProjectionPatchArgs) ToSecretProjectionPatchOutput() SecretProjectionPatchOutput {
	return i.ToSecretProjectionPatchOutputWithContext(context.Background())
}

func (i SecretProjectionPatchArgs) ToSecretProjectionPatchOutputWithContext(ctx context.Context) SecretProjectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionPatchOutput)
}

func (i SecretProjectionPatchArgs) ToSecretProjectionPatchPtrOutput() SecretProjectionPatchPtrOutput {
	return i.ToSecretProjectionPatchPtrOutputWithContext(context.Background())
}

func (i SecretProjectionPatchArgs) ToSecretProjectionPatchPtrOutputWithContext(ctx context.Context) SecretProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionPatchOutput).ToSecretProjectionPatchPtrOutputWithContext(ctx)
}

// SecretProjectionPatchPtrInput is an input type that accepts SecretProjectionPatchArgs, SecretProjectionPatchPtr and SecretProjectionPatchPtrOutput values.
// You can construct a concrete instance of `SecretProjectionPatchPtrInput` via:
//
//	        SecretProjectionPatchArgs{...}
//
//	or:
//
//	        nil
type SecretProjectionPatchPtrInput interface {
	pulumi.Input

	ToSecretProjectionPatchPtrOutput() SecretProjectionPatchPtrOutput
	ToSecretProjectionPatchPtrOutputWithContext(context.Context) SecretProjectionPatchPtrOutput
}

type secretProjectionPatchPtrType SecretProjectionPatchArgs

func SecretProjectionPatchPtr(v *SecretProjectionPatchArgs) SecretProjectionPatchPtrInput {
	return (*secretProjectionPatchPtrType)(v)
}

func (*secretProjectionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretProjectionPatch)(nil)).Elem()
}

func (i *secretProjectionPatchPtrType) ToSecretProjectionPatchPtrOutput() SecretProjectionPatchPtrOutput {
	return i.ToSecretProjectionPatchPtrOutputWithContext(context.Background())
}

func (i *secretProjectionPatchPtrType) ToSecretProjectionPatchPtrOutputWithContext(ctx context.Context) SecretProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretProjectionPatchPtrOutput)
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type SecretProjectionPatchOutput struct{ *pulumi.OutputState }

func (SecretProjectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretProjectionPatch)(nil)).Elem()
}

func (o SecretProjectionPatchOutput) ToSecretProjectionPatchOutput() SecretProjectionPatchOutput {
	return o
}

func (o SecretProjectionPatchOutput) ToSecretProjectionPatchOutputWithContext(ctx context.Context) SecretProjectionPatchOutput {
	return o
}

func (o SecretProjectionPatchOutput) ToSecretProjectionPatchPtrOutput() SecretProjectionPatchPtrOutput {
	return o.ToSecretProjectionPatchPtrOutputWithContext(context.Background())
}

func (o SecretProjectionPatchOutput) ToSecretProjectionPatchPtrOutputWithContext(ctx context.Context) SecretProjectionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretProjectionPatch) *SecretProjectionPatch {
		return &v
	}).(SecretProjectionPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretProjectionPatchOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v SecretProjectionPatch) []KeyToPathPatch { return v.Items }).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretProjectionPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretProjectionPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o SecretProjectionPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretProjectionPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretProjectionPatchPtrOutput struct{ *pulumi.OutputState }

func (SecretProjectionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretProjectionPatch)(nil)).Elem()
}

func (o SecretProjectionPatchPtrOutput) ToSecretProjectionPatchPtrOutput() SecretProjectionPatchPtrOutput {
	return o
}

func (o SecretProjectionPatchPtrOutput) ToSecretProjectionPatchPtrOutputWithContext(ctx context.Context) SecretProjectionPatchPtrOutput {
	return o
}

func (o SecretProjectionPatchPtrOutput) Elem() SecretProjectionPatchOutput {
	return o.ApplyT(func(v *SecretProjectionPatch) SecretProjectionPatch {
		if v != nil {
			return *v
		}
		var ret SecretProjectionPatch
		return ret
	}).(SecretProjectionPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretProjectionPatchPtrOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v *SecretProjectionPatch) []KeyToPathPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SecretProjectionPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretProjectionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o SecretProjectionPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretProjectionPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReference struct {
	// name is unique within a namespace to reference a secret resource.
	Name *string `pulumi:"name"`
	// namespace defines the space within which the secret name must be unique.
	Namespace *string `pulumi:"namespace"`
}

// SecretReferenceInput is an input type that accepts SecretReferenceArgs and SecretReferenceOutput values.
// You can construct a concrete instance of `SecretReferenceInput` via:
//
//	SecretReferenceArgs{...}
type SecretReferenceInput interface {
	pulumi.Input

	ToSecretReferenceOutput() SecretReferenceOutput
	ToSecretReferenceOutputWithContext(context.Context) SecretReferenceOutput
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReferenceArgs struct {
	// name is unique within a namespace to reference a secret resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace defines the space within which the secret name must be unique.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (i SecretReferenceArgs) ToSecretReferenceOutput() SecretReferenceOutput {
	return i.ToSecretReferenceOutputWithContext(context.Background())
}

func (i SecretReferenceArgs) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceOutput)
}

func (i SecretReferenceArgs) ToSecretReferencePtrOutput() SecretReferencePtrOutput {
	return i.ToSecretReferencePtrOutputWithContext(context.Background())
}

func (i SecretReferenceArgs) ToSecretReferencePtrOutputWithContext(ctx context.Context) SecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceOutput).ToSecretReferencePtrOutputWithContext(ctx)
}

// SecretReferencePtrInput is an input type that accepts SecretReferenceArgs, SecretReferencePtr and SecretReferencePtrOutput values.
// You can construct a concrete instance of `SecretReferencePtrInput` via:
//
//	        SecretReferenceArgs{...}
//
//	or:
//
//	        nil
type SecretReferencePtrInput interface {
	pulumi.Input

	ToSecretReferencePtrOutput() SecretReferencePtrOutput
	ToSecretReferencePtrOutputWithContext(context.Context) SecretReferencePtrOutput
}

type secretReferencePtrType SecretReferenceArgs

func SecretReferencePtr(v *SecretReferenceArgs) SecretReferencePtrInput {
	return (*secretReferencePtrType)(v)
}

func (*secretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretReference)(nil)).Elem()
}

func (i *secretReferencePtrType) ToSecretReferencePtrOutput() SecretReferencePtrOutput {
	return i.ToSecretReferencePtrOutputWithContext(context.Background())
}

func (i *secretReferencePtrType) ToSecretReferencePtrOutputWithContext(ctx context.Context) SecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferencePtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReferenceOutput struct{ *pulumi.OutputState }

func (SecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (o SecretReferenceOutput) ToSecretReferenceOutput() SecretReferenceOutput {
	return o
}

func (o SecretReferenceOutput) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return o
}

func (o SecretReferenceOutput) ToSecretReferencePtrOutput() SecretReferencePtrOutput {
	return o.ToSecretReferencePtrOutputWithContext(context.Background())
}

func (o SecretReferenceOutput) ToSecretReferencePtrOutputWithContext(ctx context.Context) SecretReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretReference) *SecretReference {
		return &v
	}).(SecretReferencePtrOutput)
}

// name is unique within a namespace to reference a secret resource.
func (o SecretReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace defines the space within which the secret name must be unique.
func (o SecretReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SecretReferencePtrOutput struct{ *pulumi.OutputState }

func (SecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretReference)(nil)).Elem()
}

func (o SecretReferencePtrOutput) ToSecretReferencePtrOutput() SecretReferencePtrOutput {
	return o
}

func (o SecretReferencePtrOutput) ToSecretReferencePtrOutputWithContext(ctx context.Context) SecretReferencePtrOutput {
	return o
}

func (o SecretReferencePtrOutput) Elem() SecretReferenceOutput {
	return o.ApplyT(func(v *SecretReference) SecretReference {
		if v != nil {
			return *v
		}
		var ret SecretReference
		return ret
	}).(SecretReferenceOutput)
}

// name is unique within a namespace to reference a secret resource.
func (o SecretReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace defines the space within which the secret name must be unique.
func (o SecretReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReferencePatch struct {
	// name is unique within a namespace to reference a secret resource.
	Name *string `pulumi:"name"`
	// namespace defines the space within which the secret name must be unique.
	Namespace *string `pulumi:"namespace"`
}

// SecretReferencePatchInput is an input type that accepts SecretReferencePatchArgs and SecretReferencePatchOutput values.
// You can construct a concrete instance of `SecretReferencePatchInput` via:
//
//	SecretReferencePatchArgs{...}
type SecretReferencePatchInput interface {
	pulumi.Input

	ToSecretReferencePatchOutput() SecretReferencePatchOutput
	ToSecretReferencePatchOutputWithContext(context.Context) SecretReferencePatchOutput
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReferencePatchArgs struct {
	// name is unique within a namespace to reference a secret resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace defines the space within which the secret name must be unique.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SecretReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReferencePatch)(nil)).Elem()
}

func (i SecretReferencePatchArgs) ToSecretReferencePatchOutput() SecretReferencePatchOutput {
	return i.ToSecretReferencePatchOutputWithContext(context.Background())
}

func (i SecretReferencePatchArgs) ToSecretReferencePatchOutputWithContext(ctx context.Context) SecretReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferencePatchOutput)
}

func (i SecretReferencePatchArgs) ToSecretReferencePatchPtrOutput() SecretReferencePatchPtrOutput {
	return i.ToSecretReferencePatchPtrOutputWithContext(context.Background())
}

func (i SecretReferencePatchArgs) ToSecretReferencePatchPtrOutputWithContext(ctx context.Context) SecretReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferencePatchOutput).ToSecretReferencePatchPtrOutputWithContext(ctx)
}

// SecretReferencePatchPtrInput is an input type that accepts SecretReferencePatchArgs, SecretReferencePatchPtr and SecretReferencePatchPtrOutput values.
// You can construct a concrete instance of `SecretReferencePatchPtrInput` via:
//
//	        SecretReferencePatchArgs{...}
//
//	or:
//
//	        nil
type SecretReferencePatchPtrInput interface {
	pulumi.Input

	ToSecretReferencePatchPtrOutput() SecretReferencePatchPtrOutput
	ToSecretReferencePatchPtrOutputWithContext(context.Context) SecretReferencePatchPtrOutput
}

type secretReferencePatchPtrType SecretReferencePatchArgs

func SecretReferencePatchPtr(v *SecretReferencePatchArgs) SecretReferencePatchPtrInput {
	return (*secretReferencePatchPtrType)(v)
}

func (*secretReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretReferencePatch)(nil)).Elem()
}

func (i *secretReferencePatchPtrType) ToSecretReferencePatchPtrOutput() SecretReferencePatchPtrOutput {
	return i.ToSecretReferencePatchPtrOutputWithContext(context.Background())
}

func (i *secretReferencePatchPtrType) ToSecretReferencePatchPtrOutputWithContext(ctx context.Context) SecretReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferencePatchPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type SecretReferencePatchOutput struct{ *pulumi.OutputState }

func (SecretReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReferencePatch)(nil)).Elem()
}

func (o SecretReferencePatchOutput) ToSecretReferencePatchOutput() SecretReferencePatchOutput {
	return o
}

func (o SecretReferencePatchOutput) ToSecretReferencePatchOutputWithContext(ctx context.Context) SecretReferencePatchOutput {
	return o
}

func (o SecretReferencePatchOutput) ToSecretReferencePatchPtrOutput() SecretReferencePatchPtrOutput {
	return o.ToSecretReferencePatchPtrOutputWithContext(context.Background())
}

func (o SecretReferencePatchOutput) ToSecretReferencePatchPtrOutputWithContext(ctx context.Context) SecretReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretReferencePatch) *SecretReferencePatch {
		return &v
	}).(SecretReferencePatchPtrOutput)
}

// name is unique within a namespace to reference a secret resource.
func (o SecretReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace defines the space within which the secret name must be unique.
func (o SecretReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SecretReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (SecretReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretReferencePatch)(nil)).Elem()
}

func (o SecretReferencePatchPtrOutput) ToSecretReferencePatchPtrOutput() SecretReferencePatchPtrOutput {
	return o
}

func (o SecretReferencePatchPtrOutput) ToSecretReferencePatchPtrOutputWithContext(ctx context.Context) SecretReferencePatchPtrOutput {
	return o
}

func (o SecretReferencePatchPtrOutput) Elem() SecretReferencePatchOutput {
	return o.ApplyT(func(v *SecretReferencePatch) SecretReferencePatch {
		if v != nil {
			return *v
		}
		var ret SecretReferencePatch
		return ret
	}).(SecretReferencePatchOutput)
}

// name is unique within a namespace to reference a secret resource.
func (o SecretReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace defines the space within which the secret name must be unique.
func (o SecretReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSource struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPath `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// SecretVolumeSourceInput is an input type that accepts SecretVolumeSourceArgs and SecretVolumeSourceOutput values.
// You can construct a concrete instance of `SecretVolumeSourceInput` via:
//
//	SecretVolumeSourceArgs{...}
type SecretVolumeSourceInput interface {
	pulumi.Input

	ToSecretVolumeSourceOutput() SecretVolumeSourceOutput
	ToSecretVolumeSourceOutputWithContext(context.Context) SecretVolumeSourceOutput
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSourceArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (SecretVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return i.ToSecretVolumeSourceOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput)
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput).ToSecretVolumeSourcePtrOutputWithContext(ctx)
}

// SecretVolumeSourcePtrInput is an input type that accepts SecretVolumeSourceArgs, SecretVolumeSourcePtr and SecretVolumeSourcePtrOutput values.
// You can construct a concrete instance of `SecretVolumeSourcePtrInput` via:
//
//	        SecretVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type SecretVolumeSourcePtrInput interface {
	pulumi.Input

	ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput
	ToSecretVolumeSourcePtrOutputWithContext(context.Context) SecretVolumeSourcePtrOutput
}

type secretVolumeSourcePtrType SecretVolumeSourceArgs

func SecretVolumeSourcePtr(v *SecretVolumeSourceArgs) SecretVolumeSourcePtrInput {
	return (*secretVolumeSourcePtrType)(v)
}

func (*secretVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePtrOutput)
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSourceOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretVolumeSource) *SecretVolumeSource {
		return &v
	}).(SecretVolumeSourcePtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v SecretVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o SecretVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o SecretVolumeSourceOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SecretVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) Elem() SecretVolumeSourceOutput {
	return o.ApplyT(func(v *SecretVolumeSource) SecretVolumeSource {
		if v != nil {
			return *v
		}
		var ret SecretVolumeSource
		return ret
	}).(SecretVolumeSourceOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *SecretVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o SecretVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o SecretVolumeSourcePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSourcePatch struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KeyToPathPatch `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// SecretVolumeSourcePatchInput is an input type that accepts SecretVolumeSourcePatchArgs and SecretVolumeSourcePatchOutput values.
// You can construct a concrete instance of `SecretVolumeSourcePatchInput` via:
//
//	SecretVolumeSourcePatchArgs{...}
type SecretVolumeSourcePatchInput interface {
	pulumi.Input

	ToSecretVolumeSourcePatchOutput() SecretVolumeSourcePatchOutput
	ToSecretVolumeSourcePatchOutputWithContext(context.Context) SecretVolumeSourcePatchOutput
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSourcePatchArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KeyToPathPatchArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (SecretVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSourcePatch)(nil)).Elem()
}

func (i SecretVolumeSourcePatchArgs) ToSecretVolumeSourcePatchOutput() SecretVolumeSourcePatchOutput {
	return i.ToSecretVolumeSourcePatchOutputWithContext(context.Background())
}

func (i SecretVolumeSourcePatchArgs) ToSecretVolumeSourcePatchOutputWithContext(ctx context.Context) SecretVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePatchOutput)
}

func (i SecretVolumeSourcePatchArgs) ToSecretVolumeSourcePatchPtrOutput() SecretVolumeSourcePatchPtrOutput {
	return i.ToSecretVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i SecretVolumeSourcePatchArgs) ToSecretVolumeSourcePatchPtrOutputWithContext(ctx context.Context) SecretVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePatchOutput).ToSecretVolumeSourcePatchPtrOutputWithContext(ctx)
}

// SecretVolumeSourcePatchPtrInput is an input type that accepts SecretVolumeSourcePatchArgs, SecretVolumeSourcePatchPtr and SecretVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `SecretVolumeSourcePatchPtrInput` via:
//
//	        SecretVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type SecretVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToSecretVolumeSourcePatchPtrOutput() SecretVolumeSourcePatchPtrOutput
	ToSecretVolumeSourcePatchPtrOutputWithContext(context.Context) SecretVolumeSourcePatchPtrOutput
}

type secretVolumeSourcePatchPtrType SecretVolumeSourcePatchArgs

func SecretVolumeSourcePatchPtr(v *SecretVolumeSourcePatchArgs) SecretVolumeSourcePatchPtrInput {
	return (*secretVolumeSourcePatchPtrType)(v)
}

func (*secretVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSourcePatch)(nil)).Elem()
}

func (i *secretVolumeSourcePatchPtrType) ToSecretVolumeSourcePatchPtrOutput() SecretVolumeSourcePatchPtrOutput {
	return i.ToSecretVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *secretVolumeSourcePatchPtrType) ToSecretVolumeSourcePatchPtrOutputWithContext(ctx context.Context) SecretVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePatchPtrOutput)
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSourcePatch)(nil)).Elem()
}

func (o SecretVolumeSourcePatchOutput) ToSecretVolumeSourcePatchOutput() SecretVolumeSourcePatchOutput {
	return o
}

func (o SecretVolumeSourcePatchOutput) ToSecretVolumeSourcePatchOutputWithContext(ctx context.Context) SecretVolumeSourcePatchOutput {
	return o
}

func (o SecretVolumeSourcePatchOutput) ToSecretVolumeSourcePatchPtrOutput() SecretVolumeSourcePatchPtrOutput {
	return o.ToSecretVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o SecretVolumeSourcePatchOutput) ToSecretVolumeSourcePatchPtrOutputWithContext(ctx context.Context) SecretVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretVolumeSourcePatch) *SecretVolumeSourcePatch {
		return &v
	}).(SecretVolumeSourcePatchPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourcePatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretVolumeSourcePatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretVolumeSourcePatchOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v SecretVolumeSourcePatch) []KeyToPathPatch { return v.Items }).(KeyToPathPatchArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o SecretVolumeSourcePatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretVolumeSourcePatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o SecretVolumeSourcePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeSourcePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SecretVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSourcePatch)(nil)).Elem()
}

func (o SecretVolumeSourcePatchPtrOutput) ToSecretVolumeSourcePatchPtrOutput() SecretVolumeSourcePatchPtrOutput {
	return o
}

func (o SecretVolumeSourcePatchPtrOutput) ToSecretVolumeSourcePatchPtrOutputWithContext(ctx context.Context) SecretVolumeSourcePatchPtrOutput {
	return o
}

func (o SecretVolumeSourcePatchPtrOutput) Elem() SecretVolumeSourcePatchOutput {
	return o.ApplyT(func(v *SecretVolumeSourcePatch) SecretVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret SecretVolumeSourcePatch
		return ret
	}).(SecretVolumeSourcePatchOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourcePatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSourcePatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o SecretVolumeSourcePatchPtrOutput) Items() KeyToPathPatchArrayOutput {
	return o.ApplyT(func(v *SecretVolumeSourcePatch) []KeyToPathPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathPatchArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o SecretVolumeSourcePatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o SecretVolumeSourcePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities *Capabilities `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *SELinuxOptions `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *SeccompProfile `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *WindowsSecurityContextOptions `pulumi:"windowsOptions"`
}

// SecurityContextInput is an input type that accepts SecurityContextArgs and SecurityContextOutput values.
// You can construct a concrete instance of `SecurityContextInput` via:
//
//	SecurityContextArgs{...}
type SecurityContextInput interface {
	pulumi.Input

	ToSecurityContextOutput() SecurityContextOutput
	ToSecurityContextOutputWithContext(context.Context) SecurityContextOutput
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities CapabilitiesPtrInput `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions SELinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile SeccompProfilePtrInput `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions WindowsSecurityContextOptionsPtrInput `pulumi:"windowsOptions"`
}

func (SecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (i SecurityContextArgs) ToSecurityContextOutput() SecurityContextOutput {
	return i.ToSecurityContextOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput)
}

func (i SecurityContextArgs) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput).ToSecurityContextPtrOutputWithContext(ctx)
}

// SecurityContextPtrInput is an input type that accepts SecurityContextArgs, SecurityContextPtr and SecurityContextPtrOutput values.
// You can construct a concrete instance of `SecurityContextPtrInput` via:
//
//	        SecurityContextArgs{...}
//
//	or:
//
//	        nil
type SecurityContextPtrInput interface {
	pulumi.Input

	ToSecurityContextPtrOutput() SecurityContextPtrOutput
	ToSecurityContextPtrOutputWithContext(context.Context) SecurityContextPtrOutput
}

type securityContextPtrType SecurityContextArgs

func SecurityContextPtr(v *SecurityContextArgs) SecurityContextPtrInput {
	return (*securityContextPtrType)(v)
}

func (*securityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (i *securityContextPtrType) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i *securityContextPtrType) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContextOutput struct{ *pulumi.OutputState }

func (SecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (o SecurityContextOutput) ToSecurityContextOutput() SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (o SecurityContextOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContext) *SecurityContext {
		return &v
	}).(SecurityContextPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) Capabilities() CapabilitiesPtrOutput {
	return o.ApplyT(func(v SecurityContext) *Capabilities { return v.Capabilities }).(CapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContext) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) SeLinuxOptions() SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v SecurityContext) *SELinuxOptions { return v.SeLinuxOptions }).(SELinuxOptionsPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextOutput) SeccompProfile() SeccompProfilePtrOutput {
	return o.ApplyT(func(v SecurityContext) *SeccompProfile { return v.SeccompProfile }).(SeccompProfilePtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o SecurityContextOutput) WindowsOptions() WindowsSecurityContextOptionsPtrOutput {
	return o.ApplyT(func(v SecurityContext) *WindowsSecurityContextOptions { return v.WindowsOptions }).(WindowsSecurityContextOptionsPtrOutput)
}

type SecurityContextPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) Elem() SecurityContextOutput {
	return o.ApplyT(func(v *SecurityContext) SecurityContext {
		if v != nil {
			return *v
		}
		var ret SecurityContext
		return ret
	}).(SecurityContextOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) Capabilities() CapabilitiesPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *Capabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(CapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) SeLinuxOptions() SELinuxOptionsPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *SELinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(SELinuxOptionsPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPtrOutput) SeccompProfile() SeccompProfilePtrOutput {
	return o.ApplyT(func(v *SecurityContext) *SeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(SeccompProfilePtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o SecurityContextPtrOutput) WindowsOptions() WindowsSecurityContextOptionsPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *WindowsSecurityContextOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContextPatch struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities *CapabilitiesPatch `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *SELinuxOptionsPatch `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *SeccompProfilePatch `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *WindowsSecurityContextOptionsPatch `pulumi:"windowsOptions"`
}

// SecurityContextPatchInput is an input type that accepts SecurityContextPatchArgs and SecurityContextPatchOutput values.
// You can construct a concrete instance of `SecurityContextPatchInput` via:
//
//	SecurityContextPatchArgs{...}
type SecurityContextPatchInput interface {
	pulumi.Input

	ToSecurityContextPatchOutput() SecurityContextPatchOutput
	ToSecurityContextPatchOutputWithContext(context.Context) SecurityContextPatchOutput
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContextPatchArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities CapabilitiesPatchPtrInput `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions SELinuxOptionsPatchPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile SeccompProfilePatchPtrInput `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions WindowsSecurityContextOptionsPatchPtrInput `pulumi:"windowsOptions"`
}

func (SecurityContextPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextPatch)(nil)).Elem()
}

func (i SecurityContextPatchArgs) ToSecurityContextPatchOutput() SecurityContextPatchOutput {
	return i.ToSecurityContextPatchOutputWithContext(context.Background())
}

func (i SecurityContextPatchArgs) ToSecurityContextPatchOutputWithContext(ctx context.Context) SecurityContextPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPatchOutput)
}

func (i SecurityContextPatchArgs) ToSecurityContextPatchPtrOutput() SecurityContextPatchPtrOutput {
	return i.ToSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i SecurityContextPatchArgs) ToSecurityContextPatchPtrOutputWithContext(ctx context.Context) SecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPatchOutput).ToSecurityContextPatchPtrOutputWithContext(ctx)
}

// SecurityContextPatchPtrInput is an input type that accepts SecurityContextPatchArgs, SecurityContextPatchPtr and SecurityContextPatchPtrOutput values.
// You can construct a concrete instance of `SecurityContextPatchPtrInput` via:
//
//	        SecurityContextPatchArgs{...}
//
//	or:
//
//	        nil
type SecurityContextPatchPtrInput interface {
	pulumi.Input

	ToSecurityContextPatchPtrOutput() SecurityContextPatchPtrOutput
	ToSecurityContextPatchPtrOutputWithContext(context.Context) SecurityContextPatchPtrOutput
}

type securityContextPatchPtrType SecurityContextPatchArgs

func SecurityContextPatchPtr(v *SecurityContextPatchArgs) SecurityContextPatchPtrInput {
	return (*securityContextPatchPtrType)(v)
}

func (*securityContextPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextPatch)(nil)).Elem()
}

func (i *securityContextPatchPtrType) ToSecurityContextPatchPtrOutput() SecurityContextPatchPtrOutput {
	return i.ToSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i *securityContextPatchPtrType) ToSecurityContextPatchPtrOutputWithContext(ctx context.Context) SecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPatchPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type SecurityContextPatchOutput struct{ *pulumi.OutputState }

func (SecurityContextPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextPatch)(nil)).Elem()
}

func (o SecurityContextPatchOutput) ToSecurityContextPatchOutput() SecurityContextPatchOutput {
	return o
}

func (o SecurityContextPatchOutput) ToSecurityContextPatchOutputWithContext(ctx context.Context) SecurityContextPatchOutput {
	return o
}

func (o SecurityContextPatchOutput) ToSecurityContextPatchPtrOutput() SecurityContextPatchPtrOutput {
	return o.ToSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (o SecurityContextPatchOutput) ToSecurityContextPatchPtrOutputWithContext(ctx context.Context) SecurityContextPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContextPatch) *SecurityContextPatch {
		return &v
	}).(SecurityContextPatchPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) Capabilities() CapabilitiesPatchPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *CapabilitiesPatch { return v.Capabilities }).(CapabilitiesPatchPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextPatchOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) SeLinuxOptions() SELinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *SELinuxOptionsPatch { return v.SeLinuxOptions }).(SELinuxOptionsPatchPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchOutput) SeccompProfile() SeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *SeccompProfilePatch { return v.SeccompProfile }).(SeccompProfilePatchPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o SecurityContextPatchOutput) WindowsOptions() WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ApplyT(func(v SecurityContextPatch) *WindowsSecurityContextOptionsPatch { return v.WindowsOptions }).(WindowsSecurityContextOptionsPatchPtrOutput)
}

type SecurityContextPatchPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextPatch)(nil)).Elem()
}

func (o SecurityContextPatchPtrOutput) ToSecurityContextPatchPtrOutput() SecurityContextPatchPtrOutput {
	return o
}

func (o SecurityContextPatchPtrOutput) ToSecurityContextPatchPtrOutputWithContext(ctx context.Context) SecurityContextPatchPtrOutput {
	return o
}

func (o SecurityContextPatchPtrOutput) Elem() SecurityContextPatchOutput {
	return o.ApplyT(func(v *SecurityContextPatch) SecurityContextPatch {
		if v != nil {
			return *v
		}
		var ret SecurityContextPatch
		return ret
	}).(SecurityContextPatchOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) Capabilities() CapabilitiesPatchPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *CapabilitiesPatch {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(CapabilitiesPatchPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextPatchPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) SeLinuxOptions() SELinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *SELinuxOptionsPatch {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(SELinuxOptionsPatchPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o SecurityContextPatchPtrOutput) SeccompProfile() SeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *SeccompProfilePatch {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(SeccompProfilePatchPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o SecurityContextPatchPtrOutput) WindowsOptions() WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ApplyT(func(v *SecurityContextPatch) *WindowsSecurityContextOptionsPatch {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(WindowsSecurityContextOptionsPatchPtrOutput)
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServiceType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceSpec `pulumi:"spec"`
	// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ServiceStatus `pulumi:"status"`
}

// ServiceTypeInput is an input type that accepts ServiceTypeArgs and ServiceTypeOutput values.
// You can construct a concrete instance of `ServiceTypeInput` via:
//
//	ServiceTypeArgs{...}
type ServiceTypeInput interface {
	pulumi.Input

	ToServiceTypeOutput() ServiceTypeOutput
	ToServiceTypeOutputWithContext(context.Context) ServiceTypeOutput
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServiceTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceStatusPtrInput `pulumi:"status"`
}

func (ServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (i ServiceTypeArgs) ToServiceTypeOutput() ServiceTypeOutput {
	return i.ToServiceTypeOutputWithContext(context.Background())
}

func (i ServiceTypeArgs) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeOutput)
}

// ServiceTypeArrayInput is an input type that accepts ServiceTypeArray and ServiceTypeArrayOutput values.
// You can construct a concrete instance of `ServiceTypeArrayInput` via:
//
//	ServiceTypeArray{ ServiceTypeArgs{...} }
type ServiceTypeArrayInput interface {
	pulumi.Input

	ToServiceTypeArrayOutput() ServiceTypeArrayOutput
	ToServiceTypeArrayOutputWithContext(context.Context) ServiceTypeArrayOutput
}

type ServiceTypeArray []ServiceTypeInput

func (ServiceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceType)(nil)).Elem()
}

func (i ServiceTypeArray) ToServiceTypeArrayOutput() ServiceTypeArrayOutput {
	return i.ToServiceTypeArrayOutputWithContext(context.Background())
}

func (i ServiceTypeArray) ToServiceTypeArrayOutputWithContext(ctx context.Context) ServiceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeArrayOutput)
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServiceTypeOutput struct{ *pulumi.OutputState }

func (ServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (o ServiceTypeOutput) ToServiceTypeOutput() ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceTypeOutput) Spec() ServiceSpecPtrOutput {
	return o.ApplyT(func(v ServiceType) *ServiceSpec { return v.Spec }).(ServiceSpecPtrOutput)
}

// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceTypeOutput) Status() ServiceStatusPtrOutput {
	return o.ApplyT(func(v ServiceType) *ServiceStatus { return v.Status }).(ServiceStatusPtrOutput)
}

type ServiceTypeArrayOutput struct{ *pulumi.OutputState }

func (ServiceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceType)(nil)).Elem()
}

func (o ServiceTypeArrayOutput) ToServiceTypeArrayOutput() ServiceTypeArrayOutput {
	return o
}

func (o ServiceTypeArrayOutput) ToServiceTypeArrayOutputWithContext(ctx context.Context) ServiceTypeArrayOutput {
	return o
}

func (o ServiceTypeArrayOutput) Index(i pulumi.IntInput) ServiceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceType {
		return vs[0].([]ServiceType)[vs[1].(int)]
	}).(ServiceTypeOutput)
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken *bool `pulumi:"automountServiceAccountToken"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []LocalObjectReference `pulumi:"imagePullSecrets"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets []ObjectReference `pulumi:"secrets"`
}

// ServiceAccountTypeInput is an input type that accepts ServiceAccountTypeArgs and ServiceAccountTypeOutput values.
// You can construct a concrete instance of `ServiceAccountTypeInput` via:
//
//	ServiceAccountTypeArgs{...}
type ServiceAccountTypeInput interface {
	pulumi.Input

	ToServiceAccountTypeOutput() ServiceAccountTypeOutput
	ToServiceAccountTypeOutputWithContext(context.Context) ServiceAccountTypeOutput
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken pulumi.BoolPtrInput `pulumi:"automountServiceAccountToken"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets LocalObjectReferenceArrayInput `pulumi:"imagePullSecrets"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets ObjectReferenceArrayInput `pulumi:"secrets"`
}

func (ServiceAccountTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountType)(nil)).Elem()
}

func (i ServiceAccountTypeArgs) ToServiceAccountTypeOutput() ServiceAccountTypeOutput {
	return i.ToServiceAccountTypeOutputWithContext(context.Background())
}

func (i ServiceAccountTypeArgs) ToServiceAccountTypeOutputWithContext(ctx context.Context) ServiceAccountTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTypeOutput)
}

// ServiceAccountTypeArrayInput is an input type that accepts ServiceAccountTypeArray and ServiceAccountTypeArrayOutput values.
// You can construct a concrete instance of `ServiceAccountTypeArrayInput` via:
//
//	ServiceAccountTypeArray{ ServiceAccountTypeArgs{...} }
type ServiceAccountTypeArrayInput interface {
	pulumi.Input

	ToServiceAccountTypeArrayOutput() ServiceAccountTypeArrayOutput
	ToServiceAccountTypeArrayOutputWithContext(context.Context) ServiceAccountTypeArrayOutput
}

type ServiceAccountTypeArray []ServiceAccountTypeInput

func (ServiceAccountTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountType)(nil)).Elem()
}

func (i ServiceAccountTypeArray) ToServiceAccountTypeArrayOutput() ServiceAccountTypeArrayOutput {
	return i.ToServiceAccountTypeArrayOutputWithContext(context.Background())
}

func (i ServiceAccountTypeArray) ToServiceAccountTypeArrayOutputWithContext(ctx context.Context) ServiceAccountTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTypeArrayOutput)
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountTypeOutput struct{ *pulumi.OutputState }

func (ServiceAccountTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountType)(nil)).Elem()
}

func (o ServiceAccountTypeOutput) ToServiceAccountTypeOutput() ServiceAccountTypeOutput {
	return o
}

func (o ServiceAccountTypeOutput) ToServiceAccountTypeOutputWithContext(ctx context.Context) ServiceAccountTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceAccountTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
func (o ServiceAccountTypeOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountType) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
func (o ServiceAccountTypeOutput) ImagePullSecrets() LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v ServiceAccountType) []LocalObjectReference { return v.ImagePullSecrets }).(LocalObjectReferenceArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceAccountTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceAccountTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ServiceAccountType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
func (o ServiceAccountTypeOutput) Secrets() ObjectReferenceArrayOutput {
	return o.ApplyT(func(v ServiceAccountType) []ObjectReference { return v.Secrets }).(ObjectReferenceArrayOutput)
}

type ServiceAccountTypeArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountType)(nil)).Elem()
}

func (o ServiceAccountTypeArrayOutput) ToServiceAccountTypeArrayOutput() ServiceAccountTypeArrayOutput {
	return o
}

func (o ServiceAccountTypeArrayOutput) ToServiceAccountTypeArrayOutputWithContext(ctx context.Context) ServiceAccountTypeArrayOutput {
	return o
}

func (o ServiceAccountTypeArrayOutput) Index(i pulumi.IntInput) ServiceAccountTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountType {
		return vs[0].([]ServiceAccountType)[vs[1].(int)]
	}).(ServiceAccountTypeOutput)
}

// ServiceAccountList is a list of ServiceAccount objects
type ServiceAccountListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	Items []ServiceAccountType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ServiceAccountListTypeInput is an input type that accepts ServiceAccountListTypeArgs and ServiceAccountListTypeOutput values.
// You can construct a concrete instance of `ServiceAccountListTypeInput` via:
//
//	ServiceAccountListTypeArgs{...}
type ServiceAccountListTypeInput interface {
	pulumi.Input

	ToServiceAccountListTypeOutput() ServiceAccountListTypeOutput
	ToServiceAccountListTypeOutputWithContext(context.Context) ServiceAccountListTypeOutput
}

// ServiceAccountList is a list of ServiceAccount objects
type ServiceAccountListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	Items ServiceAccountTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ServiceAccountListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountListType)(nil)).Elem()
}

func (i ServiceAccountListTypeArgs) ToServiceAccountListTypeOutput() ServiceAccountListTypeOutput {
	return i.ToServiceAccountListTypeOutputWithContext(context.Background())
}

func (i ServiceAccountListTypeArgs) ToServiceAccountListTypeOutputWithContext(ctx context.Context) ServiceAccountListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountListTypeOutput)
}

// ServiceAccountList is a list of ServiceAccount objects
type ServiceAccountListTypeOutput struct{ *pulumi.OutputState }

func (ServiceAccountListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountListType)(nil)).Elem()
}

func (o ServiceAccountListTypeOutput) ToServiceAccountListTypeOutput() ServiceAccountListTypeOutput {
	return o
}

func (o ServiceAccountListTypeOutput) ToServiceAccountListTypeOutputWithContext(ctx context.Context) ServiceAccountListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceAccountListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (o ServiceAccountListTypeOutput) Items() ServiceAccountTypeArrayOutput {
	return o.ApplyT(func(v ServiceAccountListType) []ServiceAccountType { return v.Items }).(ServiceAccountTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceAccountListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceAccountListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ServiceAccountListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken *bool `pulumi:"automountServiceAccountToken"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []LocalObjectReferencePatch `pulumi:"imagePullSecrets"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets []ObjectReferencePatch `pulumi:"secrets"`
}

// ServiceAccountPatchTypeInput is an input type that accepts ServiceAccountPatchTypeArgs and ServiceAccountPatchTypeOutput values.
// You can construct a concrete instance of `ServiceAccountPatchTypeInput` via:
//
//	ServiceAccountPatchTypeArgs{...}
type ServiceAccountPatchTypeInput interface {
	pulumi.Input

	ToServiceAccountPatchTypeOutput() ServiceAccountPatchTypeOutput
	ToServiceAccountPatchTypeOutputWithContext(context.Context) ServiceAccountPatchTypeOutput
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken pulumi.BoolPtrInput `pulumi:"automountServiceAccountToken"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets LocalObjectReferencePatchArrayInput `pulumi:"imagePullSecrets"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets ObjectReferencePatchArrayInput `pulumi:"secrets"`
}

func (ServiceAccountPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPatchType)(nil)).Elem()
}

func (i ServiceAccountPatchTypeArgs) ToServiceAccountPatchTypeOutput() ServiceAccountPatchTypeOutput {
	return i.ToServiceAccountPatchTypeOutputWithContext(context.Background())
}

func (i ServiceAccountPatchTypeArgs) ToServiceAccountPatchTypeOutputWithContext(ctx context.Context) ServiceAccountPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPatchTypeOutput)
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type ServiceAccountPatchTypeOutput struct{ *pulumi.OutputState }

func (ServiceAccountPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPatchType)(nil)).Elem()
}

func (o ServiceAccountPatchTypeOutput) ToServiceAccountPatchTypeOutput() ServiceAccountPatchTypeOutput {
	return o
}

func (o ServiceAccountPatchTypeOutput) ToServiceAccountPatchTypeOutputWithContext(ctx context.Context) ServiceAccountPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceAccountPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
func (o ServiceAccountPatchTypeOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
func (o ServiceAccountPatchTypeOutput) ImagePullSecrets() LocalObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) []LocalObjectReferencePatch { return v.ImagePullSecrets }).(LocalObjectReferencePatchArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceAccountPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceAccountPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
func (o ServiceAccountPatchTypeOutput) Secrets() ObjectReferencePatchArrayOutput {
	return o.ApplyT(func(v ServiceAccountPatchType) []ObjectReferencePatch { return v.Secrets }).(ObjectReferencePatchArrayOutput)
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjection struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path string `pulumi:"path"`
}

// ServiceAccountTokenProjectionInput is an input type that accepts ServiceAccountTokenProjectionArgs and ServiceAccountTokenProjectionOutput values.
// You can construct a concrete instance of `ServiceAccountTokenProjectionInput` via:
//
//	ServiceAccountTokenProjectionArgs{...}
type ServiceAccountTokenProjectionInput interface {
	pulumi.Input

	ToServiceAccountTokenProjectionOutput() ServiceAccountTokenProjectionOutput
	ToServiceAccountTokenProjectionOutputWithContext(context.Context) ServiceAccountTokenProjectionOutput
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjectionArgs struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringInput `pulumi:"path"`
}

func (ServiceAccountTokenProjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTokenProjection)(nil)).Elem()
}

func (i ServiceAccountTokenProjectionArgs) ToServiceAccountTokenProjectionOutput() ServiceAccountTokenProjectionOutput {
	return i.ToServiceAccountTokenProjectionOutputWithContext(context.Background())
}

func (i ServiceAccountTokenProjectionArgs) ToServiceAccountTokenProjectionOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionOutput)
}

func (i ServiceAccountTokenProjectionArgs) ToServiceAccountTokenProjectionPtrOutput() ServiceAccountTokenProjectionPtrOutput {
	return i.ToServiceAccountTokenProjectionPtrOutputWithContext(context.Background())
}

func (i ServiceAccountTokenProjectionArgs) ToServiceAccountTokenProjectionPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionOutput).ToServiceAccountTokenProjectionPtrOutputWithContext(ctx)
}

// ServiceAccountTokenProjectionPtrInput is an input type that accepts ServiceAccountTokenProjectionArgs, ServiceAccountTokenProjectionPtr and ServiceAccountTokenProjectionPtrOutput values.
// You can construct a concrete instance of `ServiceAccountTokenProjectionPtrInput` via:
//
//	        ServiceAccountTokenProjectionArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountTokenProjectionPtrInput interface {
	pulumi.Input

	ToServiceAccountTokenProjectionPtrOutput() ServiceAccountTokenProjectionPtrOutput
	ToServiceAccountTokenProjectionPtrOutputWithContext(context.Context) ServiceAccountTokenProjectionPtrOutput
}

type serviceAccountTokenProjectionPtrType ServiceAccountTokenProjectionArgs

func ServiceAccountTokenProjectionPtr(v *ServiceAccountTokenProjectionArgs) ServiceAccountTokenProjectionPtrInput {
	return (*serviceAccountTokenProjectionPtrType)(v)
}

func (*serviceAccountTokenProjectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokenProjection)(nil)).Elem()
}

func (i *serviceAccountTokenProjectionPtrType) ToServiceAccountTokenProjectionPtrOutput() ServiceAccountTokenProjectionPtrOutput {
	return i.ToServiceAccountTokenProjectionPtrOutputWithContext(context.Background())
}

func (i *serviceAccountTokenProjectionPtrType) ToServiceAccountTokenProjectionPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionPtrOutput)
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjectionOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenProjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTokenProjection)(nil)).Elem()
}

func (o ServiceAccountTokenProjectionOutput) ToServiceAccountTokenProjectionOutput() ServiceAccountTokenProjectionOutput {
	return o
}

func (o ServiceAccountTokenProjectionOutput) ToServiceAccountTokenProjectionOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionOutput {
	return o
}

func (o ServiceAccountTokenProjectionOutput) ToServiceAccountTokenProjectionPtrOutput() ServiceAccountTokenProjectionPtrOutput {
	return o.ToServiceAccountTokenProjectionPtrOutputWithContext(context.Background())
}

func (o ServiceAccountTokenProjectionOutput) ToServiceAccountTokenProjectionPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountTokenProjection) *ServiceAccountTokenProjection {
		return &v
	}).(ServiceAccountTokenProjectionPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o ServiceAccountTokenProjectionOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjection) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o ServiceAccountTokenProjectionOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjection) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o ServiceAccountTokenProjectionOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjection) string { return v.Path }).(pulumi.StringOutput)
}

type ServiceAccountTokenProjectionPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenProjectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokenProjection)(nil)).Elem()
}

func (o ServiceAccountTokenProjectionPtrOutput) ToServiceAccountTokenProjectionPtrOutput() ServiceAccountTokenProjectionPtrOutput {
	return o
}

func (o ServiceAccountTokenProjectionPtrOutput) ToServiceAccountTokenProjectionPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPtrOutput {
	return o
}

func (o ServiceAccountTokenProjectionPtrOutput) Elem() ServiceAccountTokenProjectionOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjection) ServiceAccountTokenProjection {
		if v != nil {
			return *v
		}
		var ret ServiceAccountTokenProjection
		return ret
	}).(ServiceAccountTokenProjectionOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o ServiceAccountTokenProjectionPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjection) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o ServiceAccountTokenProjectionPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjection) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o ServiceAccountTokenProjectionPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjection) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjectionPatch struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path *string `pulumi:"path"`
}

// ServiceAccountTokenProjectionPatchInput is an input type that accepts ServiceAccountTokenProjectionPatchArgs and ServiceAccountTokenProjectionPatchOutput values.
// You can construct a concrete instance of `ServiceAccountTokenProjectionPatchInput` via:
//
//	ServiceAccountTokenProjectionPatchArgs{...}
type ServiceAccountTokenProjectionPatchInput interface {
	pulumi.Input

	ToServiceAccountTokenProjectionPatchOutput() ServiceAccountTokenProjectionPatchOutput
	ToServiceAccountTokenProjectionPatchOutputWithContext(context.Context) ServiceAccountTokenProjectionPatchOutput
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjectionPatchArgs struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ServiceAccountTokenProjectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTokenProjectionPatch)(nil)).Elem()
}

func (i ServiceAccountTokenProjectionPatchArgs) ToServiceAccountTokenProjectionPatchOutput() ServiceAccountTokenProjectionPatchOutput {
	return i.ToServiceAccountTokenProjectionPatchOutputWithContext(context.Background())
}

func (i ServiceAccountTokenProjectionPatchArgs) ToServiceAccountTokenProjectionPatchOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionPatchOutput)
}

func (i ServiceAccountTokenProjectionPatchArgs) ToServiceAccountTokenProjectionPatchPtrOutput() ServiceAccountTokenProjectionPatchPtrOutput {
	return i.ToServiceAccountTokenProjectionPatchPtrOutputWithContext(context.Background())
}

func (i ServiceAccountTokenProjectionPatchArgs) ToServiceAccountTokenProjectionPatchPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionPatchOutput).ToServiceAccountTokenProjectionPatchPtrOutputWithContext(ctx)
}

// ServiceAccountTokenProjectionPatchPtrInput is an input type that accepts ServiceAccountTokenProjectionPatchArgs, ServiceAccountTokenProjectionPatchPtr and ServiceAccountTokenProjectionPatchPtrOutput values.
// You can construct a concrete instance of `ServiceAccountTokenProjectionPatchPtrInput` via:
//
//	        ServiceAccountTokenProjectionPatchArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountTokenProjectionPatchPtrInput interface {
	pulumi.Input

	ToServiceAccountTokenProjectionPatchPtrOutput() ServiceAccountTokenProjectionPatchPtrOutput
	ToServiceAccountTokenProjectionPatchPtrOutputWithContext(context.Context) ServiceAccountTokenProjectionPatchPtrOutput
}

type serviceAccountTokenProjectionPatchPtrType ServiceAccountTokenProjectionPatchArgs

func ServiceAccountTokenProjectionPatchPtr(v *ServiceAccountTokenProjectionPatchArgs) ServiceAccountTokenProjectionPatchPtrInput {
	return (*serviceAccountTokenProjectionPatchPtrType)(v)
}

func (*serviceAccountTokenProjectionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokenProjectionPatch)(nil)).Elem()
}

func (i *serviceAccountTokenProjectionPatchPtrType) ToServiceAccountTokenProjectionPatchPtrOutput() ServiceAccountTokenProjectionPatchPtrOutput {
	return i.ToServiceAccountTokenProjectionPatchPtrOutputWithContext(context.Background())
}

func (i *serviceAccountTokenProjectionPatchPtrType) ToServiceAccountTokenProjectionPatchPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenProjectionPatchPtrOutput)
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type ServiceAccountTokenProjectionPatchOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenProjectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTokenProjectionPatch)(nil)).Elem()
}

func (o ServiceAccountTokenProjectionPatchOutput) ToServiceAccountTokenProjectionPatchOutput() ServiceAccountTokenProjectionPatchOutput {
	return o
}

func (o ServiceAccountTokenProjectionPatchOutput) ToServiceAccountTokenProjectionPatchOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchOutput {
	return o
}

func (o ServiceAccountTokenProjectionPatchOutput) ToServiceAccountTokenProjectionPatchPtrOutput() ServiceAccountTokenProjectionPatchPtrOutput {
	return o.ToServiceAccountTokenProjectionPatchPtrOutputWithContext(context.Background())
}

func (o ServiceAccountTokenProjectionPatchOutput) ToServiceAccountTokenProjectionPatchPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountTokenProjectionPatch) *ServiceAccountTokenProjectionPatch {
		return &v
	}).(ServiceAccountTokenProjectionPatchPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o ServiceAccountTokenProjectionPatchOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjectionPatch) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o ServiceAccountTokenProjectionPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjectionPatch) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o ServiceAccountTokenProjectionPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountTokenProjectionPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ServiceAccountTokenProjectionPatchPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenProjectionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokenProjectionPatch)(nil)).Elem()
}

func (o ServiceAccountTokenProjectionPatchPtrOutput) ToServiceAccountTokenProjectionPatchPtrOutput() ServiceAccountTokenProjectionPatchPtrOutput {
	return o
}

func (o ServiceAccountTokenProjectionPatchPtrOutput) ToServiceAccountTokenProjectionPatchPtrOutputWithContext(ctx context.Context) ServiceAccountTokenProjectionPatchPtrOutput {
	return o
}

func (o ServiceAccountTokenProjectionPatchPtrOutput) Elem() ServiceAccountTokenProjectionPatchOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjectionPatch) ServiceAccountTokenProjectionPatch {
		if v != nil {
			return *v
		}
		var ret ServiceAccountTokenProjectionPatch
		return ret
	}).(ServiceAccountTokenProjectionPatchOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o ServiceAccountTokenProjectionPatchPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjectionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o ServiceAccountTokenProjectionPatchPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjectionPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o ServiceAccountTokenProjectionPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokenProjectionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ServiceList holds a list of services.
type ServiceListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of services
	Items []ServiceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ServiceListTypeInput is an input type that accepts ServiceListTypeArgs and ServiceListTypeOutput values.
// You can construct a concrete instance of `ServiceListTypeInput` via:
//
//	ServiceListTypeArgs{...}
type ServiceListTypeInput interface {
	pulumi.Input

	ToServiceListTypeOutput() ServiceListTypeOutput
	ToServiceListTypeOutputWithContext(context.Context) ServiceListTypeOutput
}

// ServiceList holds a list of services.
type ServiceListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of services
	Items ServiceTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ServiceListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceListType)(nil)).Elem()
}

func (i ServiceListTypeArgs) ToServiceListTypeOutput() ServiceListTypeOutput {
	return i.ToServiceListTypeOutputWithContext(context.Background())
}

func (i ServiceListTypeArgs) ToServiceListTypeOutputWithContext(ctx context.Context) ServiceListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceListTypeOutput)
}

// ServiceList holds a list of services.
type ServiceListTypeOutput struct{ *pulumi.OutputState }

func (ServiceListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceListType)(nil)).Elem()
}

func (o ServiceListTypeOutput) ToServiceListTypeOutput() ServiceListTypeOutput {
	return o
}

func (o ServiceListTypeOutput) ToServiceListTypeOutputWithContext(ctx context.Context) ServiceListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of services
func (o ServiceListTypeOutput) Items() ServiceTypeArrayOutput {
	return o.ApplyT(func(v ServiceListType) []ServiceType { return v.Items }).(ServiceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ServiceListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServicePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceSpecPatch `pulumi:"spec"`
	// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ServiceStatusPatch `pulumi:"status"`
}

// ServicePatchTypeInput is an input type that accepts ServicePatchTypeArgs and ServicePatchTypeOutput values.
// You can construct a concrete instance of `ServicePatchTypeInput` via:
//
//	ServicePatchTypeArgs{...}
type ServicePatchTypeInput interface {
	pulumi.Input

	ToServicePatchTypeOutput() ServicePatchTypeOutput
	ToServicePatchTypeOutputWithContext(context.Context) ServicePatchTypeOutput
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServicePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceSpecPatchPtrInput `pulumi:"spec"`
	// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceStatusPatchPtrInput `pulumi:"status"`
}

func (ServicePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePatchType)(nil)).Elem()
}

func (i ServicePatchTypeArgs) ToServicePatchTypeOutput() ServicePatchTypeOutput {
	return i.ToServicePatchTypeOutputWithContext(context.Background())
}

func (i ServicePatchTypeArgs) ToServicePatchTypeOutputWithContext(ctx context.Context) ServicePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePatchTypeOutput)
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. Service object exists.
//  2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
//     for any stragglers.
//  3. The endpoints objects target some number of living objects (unless the Service is
//     an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
//  4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').
//
// Known limitations:
// Services targeting ReplicaSets (and, by extension, Deployments,
// StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
// out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
// '.metadata.annotations' for the Service. Work to handle this case is in progress [2].
//
// [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
// [2] https://github.com/pulumi/pulumi-kubernetes/pull/703
//
// If the Service has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type ServicePatchTypeOutput struct{ *pulumi.OutputState }

func (ServicePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePatchType)(nil)).Elem()
}

func (o ServicePatchTypeOutput) ToServicePatchTypeOutput() ServicePatchTypeOutput {
	return o
}

func (o ServicePatchTypeOutput) ToServicePatchTypeOutputWithContext(ctx context.Context) ServicePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServicePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServicePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServicePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ServicePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServicePatchTypeOutput) Spec() ServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v ServicePatchType) *ServiceSpecPatch { return v.Spec }).(ServiceSpecPatchPtrOutput)
}

// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServicePatchTypeOutput) Status() ServiceStatusPatchPtrOutput {
	return o.ApplyT(func(v ServicePatchType) *ServiceStatusPatch { return v.Status }).(ServiceStatusPatchPtrOutput)
}

// ServicePort contains information on service's port.
type ServicePort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ServicePortInput is an input type that accepts ServicePortArgs and ServicePortOutput values.
// You can construct a concrete instance of `ServicePortInput` via:
//
//	ServicePortArgs{...}
type ServicePortInput interface {
	pulumi.Input

	ToServicePortOutput() ServicePortOutput
	ToServicePortOutputWithContext(context.Context) ServicePortOutput
}

// ServicePort contains information on service's port.
type ServicePortArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ServicePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePort)(nil)).Elem()
}

func (i ServicePortArgs) ToServicePortOutput() ServicePortOutput {
	return i.ToServicePortOutputWithContext(context.Background())
}

func (i ServicePortArgs) ToServicePortOutputWithContext(ctx context.Context) ServicePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePortOutput)
}

// ServicePortArrayInput is an input type that accepts ServicePortArray and ServicePortArrayOutput values.
// You can construct a concrete instance of `ServicePortArrayInput` via:
//
//	ServicePortArray{ ServicePortArgs{...} }
type ServicePortArrayInput interface {
	pulumi.Input

	ToServicePortArrayOutput() ServicePortArrayOutput
	ToServicePortArrayOutputWithContext(context.Context) ServicePortArrayOutput
}

type ServicePortArray []ServicePortInput

func (ServicePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePort)(nil)).Elem()
}

func (i ServicePortArray) ToServicePortArrayOutput() ServicePortArrayOutput {
	return i.ToServicePortArrayOutputWithContext(context.Background())
}

func (i ServicePortArray) ToServicePortArrayOutputWithContext(ctx context.Context) ServicePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePortArrayOutput)
}

// ServicePort contains information on service's port.
type ServicePortOutput struct{ *pulumi.OutputState }

func (ServicePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePort)(nil)).Elem()
}

func (o ServicePortOutput) ToServicePortOutput() ServicePortOutput {
	return o
}

func (o ServicePortOutput) ToServicePortOutputWithContext(ctx context.Context) ServicePortOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (o ServicePortOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePort) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (o ServicePortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ServicePortOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServicePort) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ServicePortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServicePort) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (o ServicePortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ServicePortOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ServicePort) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ServicePortArrayOutput struct{ *pulumi.OutputState }

func (ServicePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePort)(nil)).Elem()
}

func (o ServicePortArrayOutput) ToServicePortArrayOutput() ServicePortArrayOutput {
	return o
}

func (o ServicePortArrayOutput) ToServicePortArrayOutputWithContext(ctx context.Context) ServicePortArrayOutput {
	return o
}

func (o ServicePortArrayOutput) Index(i pulumi.IntInput) ServicePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePort {
		return vs[0].([]ServicePort)[vs[1].(int)]
	}).(ServicePortOutput)
}

// ServicePort contains information on service's port.
type ServicePortPatch struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ServicePortPatchInput is an input type that accepts ServicePortPatchArgs and ServicePortPatchOutput values.
// You can construct a concrete instance of `ServicePortPatchInput` via:
//
//	ServicePortPatchArgs{...}
type ServicePortPatchInput interface {
	pulumi.Input

	ToServicePortPatchOutput() ServicePortPatchOutput
	ToServicePortPatchOutputWithContext(context.Context) ServicePortPatchOutput
}

// ServicePort contains information on service's port.
type ServicePortPatchArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ServicePortPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePortPatch)(nil)).Elem()
}

func (i ServicePortPatchArgs) ToServicePortPatchOutput() ServicePortPatchOutput {
	return i.ToServicePortPatchOutputWithContext(context.Background())
}

func (i ServicePortPatchArgs) ToServicePortPatchOutputWithContext(ctx context.Context) ServicePortPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePortPatchOutput)
}

// ServicePortPatchArrayInput is an input type that accepts ServicePortPatchArray and ServicePortPatchArrayOutput values.
// You can construct a concrete instance of `ServicePortPatchArrayInput` via:
//
//	ServicePortPatchArray{ ServicePortPatchArgs{...} }
type ServicePortPatchArrayInput interface {
	pulumi.Input

	ToServicePortPatchArrayOutput() ServicePortPatchArrayOutput
	ToServicePortPatchArrayOutputWithContext(context.Context) ServicePortPatchArrayOutput
}

type ServicePortPatchArray []ServicePortPatchInput

func (ServicePortPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePortPatch)(nil)).Elem()
}

func (i ServicePortPatchArray) ToServicePortPatchArrayOutput() ServicePortPatchArrayOutput {
	return i.ToServicePortPatchArrayOutputWithContext(context.Background())
}

func (i ServicePortPatchArray) ToServicePortPatchArrayOutputWithContext(ctx context.Context) ServicePortPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePortPatchArrayOutput)
}

// ServicePort contains information on service's port.
type ServicePortPatchOutput struct{ *pulumi.OutputState }

func (ServicePortPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePortPatch)(nil)).Elem()
}

func (o ServicePortPatchOutput) ToServicePortPatchOutput() ServicePortPatchOutput {
	return o
}

func (o ServicePortPatchOutput) ToServicePortPatchOutputWithContext(ctx context.Context) ServicePortPatchOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (o ServicePortPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePortPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (o ServicePortPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePortPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ServicePortPatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServicePortPatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ServicePortPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServicePortPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (o ServicePortPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePortPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ServicePortPatchOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ServicePortPatch) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ServicePortPatchArrayOutput struct{ *pulumi.OutputState }

func (ServicePortPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePortPatch)(nil)).Elem()
}

func (o ServicePortPatchArrayOutput) ToServicePortPatchArrayOutput() ServicePortPatchArrayOutput {
	return o
}

func (o ServicePortPatchArrayOutput) ToServicePortPatchArrayOutputWithContext(ctx context.Context) ServicePortPatchArrayOutput {
	return o
}

func (o ServicePortPatchArrayOutput) Index(i pulumi.IntInput) ServicePortPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePortPatch {
		return vs[0].([]ServicePortPatch)[vs[1].(int)]
	}).(ServicePortPatchOutput)
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `pulumi:"ipFamily"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ServicePort `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *SessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ServiceSpecInput is an input type that accepts ServiceSpecArgs and ServiceSpecOutput values.
// You can construct a concrete instance of `ServiceSpecInput` via:
//
//	ServiceSpecArgs{...}
type ServiceSpecInput interface {
	pulumi.Input

	ToServiceSpecOutput() ServiceSpecOutput
	ToServiceSpecOutputWithContext(context.Context) ServiceSpecOutput
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ServicePortArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig SessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (i ServiceSpecArgs) ToServiceSpecOutput() ServiceSpecOutput {
	return i.ToServiceSpecOutputWithContext(context.Background())
}

func (i ServiceSpecArgs) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecOutput)
}

func (i ServiceSpecArgs) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return i.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (i ServiceSpecArgs) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecOutput).ToServiceSpecPtrOutputWithContext(ctx)
}

// ServiceSpecPtrInput is an input type that accepts ServiceSpecArgs, ServiceSpecPtr and ServiceSpecPtrOutput values.
// You can construct a concrete instance of `ServiceSpecPtrInput` via:
//
//	        ServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceSpecPtrInput interface {
	pulumi.Input

	ToServiceSpecPtrOutput() ServiceSpecPtrOutput
	ToServiceSpecPtrOutputWithContext(context.Context) ServiceSpecPtrOutput
}

type serviceSpecPtrType ServiceSpecArgs

func ServiceSpecPtr(v *ServiceSpecArgs) ServiceSpecPtrInput {
	return (*serviceSpecPtrType)(v)
}

func (*serviceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpec)(nil)).Elem()
}

func (i *serviceSpecPtrType) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return i.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (i *serviceSpecPtrType) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecPtrOutput)
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpecOutput struct{ *pulumi.OutputState }

func (ServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecOutput) ToServiceSpecOutput() ServiceSpecOutput {
	return o
}

func (o ServiceSpecOutput) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return o
}

func (o ServiceSpecOutput) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return o.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (o ServiceSpecOutput) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSpec) *ServiceSpec {
		return &v
	}).(ServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
func (o ServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
func (o ServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
func (o ServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
func (o ServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
func (o ServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ServiceSpecOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
func (o ServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
func (o ServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecOutput) Ports() ServicePortArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []ServicePort { return v.Ports }).(ServicePortArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ServiceSpecOutput) SessionAffinityConfig() SessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *SessionAffinityConfig { return v.SessionAffinityConfig }).(SessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ServiceSpecOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecPtrOutput) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return o
}

func (o ServiceSpecPtrOutput) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return o
}

func (o ServiceSpecPtrOutput) Elem() ServiceSpecOutput {
	return o.ApplyT(func(v *ServiceSpec) ServiceSpec {
		if v != nil {
			return *v
		}
		var ret ServiceSpec
		return ret
	}).(ServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
func (o ServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
func (o ServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
func (o ServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
func (o ServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
func (o ServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ServiceSpecPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
func (o ServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
func (o ServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPtrOutput) Ports() ServicePortArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []ServicePort {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ServicePortArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ServiceSpecPtrOutput) SessionAffinityConfig() SessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *SessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(SessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ServiceSpecPtrOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.TopologyKeys
	}).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpecPatch struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `pulumi:"ipFamily"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ServicePortPatch `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *SessionAffinityConfigPatch `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ServiceSpecPatchInput is an input type that accepts ServiceSpecPatchArgs and ServiceSpecPatchOutput values.
// You can construct a concrete instance of `ServiceSpecPatchInput` via:
//
//	ServiceSpecPatchArgs{...}
type ServiceSpecPatchInput interface {
	pulumi.Input

	ToServiceSpecPatchOutput() ServiceSpecPatchOutput
	ToServiceSpecPatchOutputWithContext(context.Context) ServiceSpecPatchOutput
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpecPatchArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ServicePortPatchArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig SessionAffinityConfigPatchPtrInput `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpecPatch)(nil)).Elem()
}

func (i ServiceSpecPatchArgs) ToServiceSpecPatchOutput() ServiceSpecPatchOutput {
	return i.ToServiceSpecPatchOutputWithContext(context.Background())
}

func (i ServiceSpecPatchArgs) ToServiceSpecPatchOutputWithContext(ctx context.Context) ServiceSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecPatchOutput)
}

func (i ServiceSpecPatchArgs) ToServiceSpecPatchPtrOutput() ServiceSpecPatchPtrOutput {
	return i.ToServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i ServiceSpecPatchArgs) ToServiceSpecPatchPtrOutputWithContext(ctx context.Context) ServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecPatchOutput).ToServiceSpecPatchPtrOutputWithContext(ctx)
}

// ServiceSpecPatchPtrInput is an input type that accepts ServiceSpecPatchArgs, ServiceSpecPatchPtr and ServiceSpecPatchPtrOutput values.
// You can construct a concrete instance of `ServiceSpecPatchPtrInput` via:
//
//	        ServiceSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ServiceSpecPatchPtrInput interface {
	pulumi.Input

	ToServiceSpecPatchPtrOutput() ServiceSpecPatchPtrOutput
	ToServiceSpecPatchPtrOutputWithContext(context.Context) ServiceSpecPatchPtrOutput
}

type serviceSpecPatchPtrType ServiceSpecPatchArgs

func ServiceSpecPatchPtr(v *ServiceSpecPatchArgs) ServiceSpecPatchPtrInput {
	return (*serviceSpecPatchPtrType)(v)
}

func (*serviceSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecPatch)(nil)).Elem()
}

func (i *serviceSpecPatchPtrType) ToServiceSpecPatchPtrOutput() ServiceSpecPatchPtrOutput {
	return i.ToServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i *serviceSpecPatchPtrType) ToServiceSpecPatchPtrOutputWithContext(ctx context.Context) ServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecPatchPtrOutput)
}

// ServiceSpec describes the attributes that a user creates on a service.
type ServiceSpecPatchOutput struct{ *pulumi.OutputState }

func (ServiceSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpecPatch)(nil)).Elem()
}

func (o ServiceSpecPatchOutput) ToServiceSpecPatchOutput() ServiceSpecPatchOutput {
	return o
}

func (o ServiceSpecPatchOutput) ToServiceSpecPatchOutputWithContext(ctx context.Context) ServiceSpecPatchOutput {
	return o
}

func (o ServiceSpecPatchOutput) ToServiceSpecPatchPtrOutput() ServiceSpecPatchPtrOutput {
	return o.ToServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (o ServiceSpecPatchOutput) ToServiceSpecPatchPtrOutputWithContext(ctx context.Context) ServiceSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSpecPatch) *ServiceSpecPatch {
		return &v
	}).(ServiceSpecPatchPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
func (o ServiceSpecPatchOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ServiceSpecPatchOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ServiceSpecPatchOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
func (o ServiceSpecPatchOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
func (o ServiceSpecPatchOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
func (o ServiceSpecPatchOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
func (o ServiceSpecPatchOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ServiceSpecPatchOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
func (o ServiceSpecPatchOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ServiceSpecPatchOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
func (o ServiceSpecPatchOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ServiceSpecPatchOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchOutput) Ports() ServicePortPatchArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []ServicePortPatch { return v.Ports }).(ServicePortPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ServiceSpecPatchOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ServiceSpecPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceSpecPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ServiceSpecPatchOutput) SessionAffinityConfig() SessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *SessionAffinityConfigPatch { return v.SessionAffinityConfig }).(SessionAffinityConfigPatchPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ServiceSpecPatchOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceSpecPatch) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ServiceSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ServiceSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecPatch)(nil)).Elem()
}

func (o ServiceSpecPatchPtrOutput) ToServiceSpecPatchPtrOutput() ServiceSpecPatchPtrOutput {
	return o
}

func (o ServiceSpecPatchPtrOutput) ToServiceSpecPatchPtrOutputWithContext(ctx context.Context) ServiceSpecPatchPtrOutput {
	return o
}

func (o ServiceSpecPatchPtrOutput) Elem() ServiceSpecPatchOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) ServiceSpecPatch {
		if v != nil {
			return *v
		}
		var ret ServiceSpecPatch
		return ret
	}).(ServiceSpecPatchOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
func (o ServiceSpecPatchPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ServiceSpecPatchPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ServiceSpecPatchPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
func (o ServiceSpecPatchPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
func (o ServiceSpecPatchPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
func (o ServiceSpecPatchPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
func (o ServiceSpecPatchPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ServiceSpecPatchPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
func (o ServiceSpecPatchPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ServiceSpecPatchPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
func (o ServiceSpecPatchPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ServiceSpecPatchPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchPtrOutput) Ports() ServicePortPatchArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []ServicePortPatch {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ServicePortPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ServiceSpecPatchPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ServiceSpecPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ServiceSpecPatchPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ServiceSpecPatchPtrOutput) SessionAffinityConfig() SessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *SessionAffinityConfigPatch {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(SessionAffinityConfigPatchPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ServiceSpecPatchPtrOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.TopologyKeys
	}).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ServiceSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServiceStatus represents the current status of a service.
type ServiceStatus struct {
	// Current service state
	Conditions []metav1.Condition `pulumi:"conditions"`
	// LoadBalancer contains the current status of the load-balancer, if one is present.
	LoadBalancer *LoadBalancerStatus `pulumi:"loadBalancer"`
}

// ServiceStatusInput is an input type that accepts ServiceStatusArgs and ServiceStatusOutput values.
// You can construct a concrete instance of `ServiceStatusInput` via:
//
//	ServiceStatusArgs{...}
type ServiceStatusInput interface {
	pulumi.Input

	ToServiceStatusOutput() ServiceStatusOutput
	ToServiceStatusOutputWithContext(context.Context) ServiceStatusOutput
}

// ServiceStatus represents the current status of a service.
type ServiceStatusArgs struct {
	// Current service state
	Conditions metav1.ConditionArrayInput `pulumi:"conditions"`
	// LoadBalancer contains the current status of the load-balancer, if one is present.
	LoadBalancer LoadBalancerStatusPtrInput `pulumi:"loadBalancer"`
}

func (ServiceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceStatus)(nil)).Elem()
}

func (i ServiceStatusArgs) ToServiceStatusOutput() ServiceStatusOutput {
	return i.ToServiceStatusOutputWithContext(context.Background())
}

func (i ServiceStatusArgs) ToServiceStatusOutputWithContext(ctx context.Context) ServiceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusOutput)
}

func (i ServiceStatusArgs) ToServiceStatusPtrOutput() ServiceStatusPtrOutput {
	return i.ToServiceStatusPtrOutputWithContext(context.Background())
}

func (i ServiceStatusArgs) ToServiceStatusPtrOutputWithContext(ctx context.Context) ServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusOutput).ToServiceStatusPtrOutputWithContext(ctx)
}

// ServiceStatusPtrInput is an input type that accepts ServiceStatusArgs, ServiceStatusPtr and ServiceStatusPtrOutput values.
// You can construct a concrete instance of `ServiceStatusPtrInput` via:
//
//	        ServiceStatusArgs{...}
//
//	or:
//
//	        nil
type ServiceStatusPtrInput interface {
	pulumi.Input

	ToServiceStatusPtrOutput() ServiceStatusPtrOutput
	ToServiceStatusPtrOutputWithContext(context.Context) ServiceStatusPtrOutput
}

type serviceStatusPtrType ServiceStatusArgs

func ServiceStatusPtr(v *ServiceStatusArgs) ServiceStatusPtrInput {
	return (*serviceStatusPtrType)(v)
}

func (*serviceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceStatus)(nil)).Elem()
}

func (i *serviceStatusPtrType) ToServiceStatusPtrOutput() ServiceStatusPtrOutput {
	return i.ToServiceStatusPtrOutputWithContext(context.Background())
}

func (i *serviceStatusPtrType) ToServiceStatusPtrOutputWithContext(ctx context.Context) ServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusPtrOutput)
}

// ServiceStatus represents the current status of a service.
type ServiceStatusOutput struct{ *pulumi.OutputState }

func (ServiceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceStatus)(nil)).Elem()
}

func (o ServiceStatusOutput) ToServiceStatusOutput() ServiceStatusOutput {
	return o
}

func (o ServiceStatusOutput) ToServiceStatusOutputWithContext(ctx context.Context) ServiceStatusOutput {
	return o
}

func (o ServiceStatusOutput) ToServiceStatusPtrOutput() ServiceStatusPtrOutput {
	return o.ToServiceStatusPtrOutputWithContext(context.Background())
}

func (o ServiceStatusOutput) ToServiceStatusPtrOutputWithContext(ctx context.Context) ServiceStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceStatus) *ServiceStatus {
		return &v
	}).(ServiceStatusPtrOutput)
}

// Current service state
func (o ServiceStatusOutput) Conditions() metav1.ConditionArrayOutput {
	return o.ApplyT(func(v ServiceStatus) []metav1.Condition { return v.Conditions }).(metav1.ConditionArrayOutput)
}

// LoadBalancer contains the current status of the load-balancer, if one is present.
func (o ServiceStatusOutput) LoadBalancer() LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v ServiceStatus) *LoadBalancerStatus { return v.LoadBalancer }).(LoadBalancerStatusPtrOutput)
}

type ServiceStatusPtrOutput struct{ *pulumi.OutputState }

func (ServiceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceStatus)(nil)).Elem()
}

func (o ServiceStatusPtrOutput) ToServiceStatusPtrOutput() ServiceStatusPtrOutput {
	return o
}

func (o ServiceStatusPtrOutput) ToServiceStatusPtrOutputWithContext(ctx context.Context) ServiceStatusPtrOutput {
	return o
}

func (o ServiceStatusPtrOutput) Elem() ServiceStatusOutput {
	return o.ApplyT(func(v *ServiceStatus) ServiceStatus {
		if v != nil {
			return *v
		}
		var ret ServiceStatus
		return ret
	}).(ServiceStatusOutput)
}

// Current service state
func (o ServiceStatusPtrOutput) Conditions() metav1.ConditionArrayOutput {
	return o.ApplyT(func(v *ServiceStatus) []metav1.Condition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(metav1.ConditionArrayOutput)
}

// LoadBalancer contains the current status of the load-balancer, if one is present.
func (o ServiceStatusPtrOutput) LoadBalancer() LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v *ServiceStatus) *LoadBalancerStatus {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerStatusPtrOutput)
}

// ServiceStatus represents the current status of a service.
type ServiceStatusPatch struct {
	// Current service state
	Conditions []metav1.ConditionPatch `pulumi:"conditions"`
	// LoadBalancer contains the current status of the load-balancer, if one is present.
	LoadBalancer *LoadBalancerStatusPatch `pulumi:"loadBalancer"`
}

// ServiceStatusPatchInput is an input type that accepts ServiceStatusPatchArgs and ServiceStatusPatchOutput values.
// You can construct a concrete instance of `ServiceStatusPatchInput` via:
//
//	ServiceStatusPatchArgs{...}
type ServiceStatusPatchInput interface {
	pulumi.Input

	ToServiceStatusPatchOutput() ServiceStatusPatchOutput
	ToServiceStatusPatchOutputWithContext(context.Context) ServiceStatusPatchOutput
}

// ServiceStatus represents the current status of a service.
type ServiceStatusPatchArgs struct {
	// Current service state
	Conditions metav1.ConditionPatchArrayInput `pulumi:"conditions"`
	// LoadBalancer contains the current status of the load-balancer, if one is present.
	LoadBalancer LoadBalancerStatusPatchPtrInput `pulumi:"loadBalancer"`
}

func (ServiceStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceStatusPatch)(nil)).Elem()
}

func (i ServiceStatusPatchArgs) ToServiceStatusPatchOutput() ServiceStatusPatchOutput {
	return i.ToServiceStatusPatchOutputWithContext(context.Background())
}

func (i ServiceStatusPatchArgs) ToServiceStatusPatchOutputWithContext(ctx context.Context) ServiceStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusPatchOutput)
}

func (i ServiceStatusPatchArgs) ToServiceStatusPatchPtrOutput() ServiceStatusPatchPtrOutput {
	return i.ToServiceStatusPatchPtrOutputWithContext(context.Background())
}

func (i ServiceStatusPatchArgs) ToServiceStatusPatchPtrOutputWithContext(ctx context.Context) ServiceStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusPatchOutput).ToServiceStatusPatchPtrOutputWithContext(ctx)
}

// ServiceStatusPatchPtrInput is an input type that accepts ServiceStatusPatchArgs, ServiceStatusPatchPtr and ServiceStatusPatchPtrOutput values.
// You can construct a concrete instance of `ServiceStatusPatchPtrInput` via:
//
//	        ServiceStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ServiceStatusPatchPtrInput interface {
	pulumi.Input

	ToServiceStatusPatchPtrOutput() ServiceStatusPatchPtrOutput
	ToServiceStatusPatchPtrOutputWithContext(context.Context) ServiceStatusPatchPtrOutput
}

type serviceStatusPatchPtrType ServiceStatusPatchArgs

func ServiceStatusPatchPtr(v *ServiceStatusPatchArgs) ServiceStatusPatchPtrInput {
	return (*serviceStatusPatchPtrType)(v)
}

func (*serviceStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceStatusPatch)(nil)).Elem()
}

func (i *serviceStatusPatchPtrType) ToServiceStatusPatchPtrOutput() ServiceStatusPatchPtrOutput {
	return i.ToServiceStatusPatchPtrOutputWithContext(context.Background())
}

func (i *serviceStatusPatchPtrType) ToServiceStatusPatchPtrOutputWithContext(ctx context.Context) ServiceStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceStatusPatchPtrOutput)
}

// ServiceStatus represents the current status of a service.
type ServiceStatusPatchOutput struct{ *pulumi.OutputState }

func (ServiceStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceStatusPatch)(nil)).Elem()
}

func (o ServiceStatusPatchOutput) ToServiceStatusPatchOutput() ServiceStatusPatchOutput {
	return o
}

func (o ServiceStatusPatchOutput) ToServiceStatusPatchOutputWithContext(ctx context.Context) ServiceStatusPatchOutput {
	return o
}

func (o ServiceStatusPatchOutput) ToServiceStatusPatchPtrOutput() ServiceStatusPatchPtrOutput {
	return o.ToServiceStatusPatchPtrOutputWithContext(context.Background())
}

func (o ServiceStatusPatchOutput) ToServiceStatusPatchPtrOutputWithContext(ctx context.Context) ServiceStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceStatusPatch) *ServiceStatusPatch {
		return &v
	}).(ServiceStatusPatchPtrOutput)
}

// Current service state
func (o ServiceStatusPatchOutput) Conditions() metav1.ConditionPatchArrayOutput {
	return o.ApplyT(func(v ServiceStatusPatch) []metav1.ConditionPatch { return v.Conditions }).(metav1.ConditionPatchArrayOutput)
}

// LoadBalancer contains the current status of the load-balancer, if one is present.
func (o ServiceStatusPatchOutput) LoadBalancer() LoadBalancerStatusPatchPtrOutput {
	return o.ApplyT(func(v ServiceStatusPatch) *LoadBalancerStatusPatch { return v.LoadBalancer }).(LoadBalancerStatusPatchPtrOutput)
}

type ServiceStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ServiceStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceStatusPatch)(nil)).Elem()
}

func (o ServiceStatusPatchPtrOutput) ToServiceStatusPatchPtrOutput() ServiceStatusPatchPtrOutput {
	return o
}

func (o ServiceStatusPatchPtrOutput) ToServiceStatusPatchPtrOutputWithContext(ctx context.Context) ServiceStatusPatchPtrOutput {
	return o
}

func (o ServiceStatusPatchPtrOutput) Elem() ServiceStatusPatchOutput {
	return o.ApplyT(func(v *ServiceStatusPatch) ServiceStatusPatch {
		if v != nil {
			return *v
		}
		var ret ServiceStatusPatch
		return ret
	}).(ServiceStatusPatchOutput)
}

// Current service state
func (o ServiceStatusPatchPtrOutput) Conditions() metav1.ConditionPatchArrayOutput {
	return o.ApplyT(func(v *ServiceStatusPatch) []metav1.ConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(metav1.ConditionPatchArrayOutput)
}

// LoadBalancer contains the current status of the load-balancer, if one is present.
func (o ServiceStatusPatchPtrOutput) LoadBalancer() LoadBalancerStatusPatchPtrOutput {
	return o.ApplyT(func(v *ServiceStatusPatch) *LoadBalancerStatusPatch {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerStatusPatchPtrOutput)
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ClientIPConfig `pulumi:"clientIP"`
}

// SessionAffinityConfigInput is an input type that accepts SessionAffinityConfigArgs and SessionAffinityConfigOutput values.
// You can construct a concrete instance of `SessionAffinityConfigInput` via:
//
//	SessionAffinityConfigArgs{...}
type SessionAffinityConfigInput interface {
	pulumi.Input

	ToSessionAffinityConfigOutput() SessionAffinityConfigOutput
	ToSessionAffinityConfigOutputWithContext(context.Context) SessionAffinityConfigOutput
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ClientIPConfigPtrInput `pulumi:"clientIP"`
}

func (SessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityConfig)(nil)).Elem()
}

func (i SessionAffinityConfigArgs) ToSessionAffinityConfigOutput() SessionAffinityConfigOutput {
	return i.ToSessionAffinityConfigOutputWithContext(context.Background())
}

func (i SessionAffinityConfigArgs) ToSessionAffinityConfigOutputWithContext(ctx context.Context) SessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigOutput)
}

func (i SessionAffinityConfigArgs) ToSessionAffinityConfigPtrOutput() SessionAffinityConfigPtrOutput {
	return i.ToSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i SessionAffinityConfigArgs) ToSessionAffinityConfigPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigOutput).ToSessionAffinityConfigPtrOutputWithContext(ctx)
}

// SessionAffinityConfigPtrInput is an input type that accepts SessionAffinityConfigArgs, SessionAffinityConfigPtr and SessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `SessionAffinityConfigPtrInput` via:
//
//	        SessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type SessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToSessionAffinityConfigPtrOutput() SessionAffinityConfigPtrOutput
	ToSessionAffinityConfigPtrOutputWithContext(context.Context) SessionAffinityConfigPtrOutput
}

type sessionAffinityConfigPtrType SessionAffinityConfigArgs

func SessionAffinityConfigPtr(v *SessionAffinityConfigArgs) SessionAffinityConfigPtrInput {
	return (*sessionAffinityConfigPtrType)(v)
}

func (*sessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionAffinityConfig)(nil)).Elem()
}

func (i *sessionAffinityConfigPtrType) ToSessionAffinityConfigPtrOutput() SessionAffinityConfigPtrOutput {
	return i.ToSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *sessionAffinityConfigPtrType) ToSessionAffinityConfigPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigPtrOutput)
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (SessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityConfig)(nil)).Elem()
}

func (o SessionAffinityConfigOutput) ToSessionAffinityConfigOutput() SessionAffinityConfigOutput {
	return o
}

func (o SessionAffinityConfigOutput) ToSessionAffinityConfigOutputWithContext(ctx context.Context) SessionAffinityConfigOutput {
	return o
}

func (o SessionAffinityConfigOutput) ToSessionAffinityConfigPtrOutput() SessionAffinityConfigPtrOutput {
	return o.ToSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o SessionAffinityConfigOutput) ToSessionAffinityConfigPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SessionAffinityConfig) *SessionAffinityConfig {
		return &v
	}).(SessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o SessionAffinityConfigOutput) ClientIP() ClientIPConfigPtrOutput {
	return o.ApplyT(func(v SessionAffinityConfig) *ClientIPConfig { return v.ClientIP }).(ClientIPConfigPtrOutput)
}

type SessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (SessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionAffinityConfig)(nil)).Elem()
}

func (o SessionAffinityConfigPtrOutput) ToSessionAffinityConfigPtrOutput() SessionAffinityConfigPtrOutput {
	return o
}

func (o SessionAffinityConfigPtrOutput) ToSessionAffinityConfigPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPtrOutput {
	return o
}

func (o SessionAffinityConfigPtrOutput) Elem() SessionAffinityConfigOutput {
	return o.ApplyT(func(v *SessionAffinityConfig) SessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret SessionAffinityConfig
		return ret
	}).(SessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o SessionAffinityConfigPtrOutput) ClientIP() ClientIPConfigPtrOutput {
	return o.ApplyT(func(v *SessionAffinityConfig) *ClientIPConfig {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ClientIPConfigPtrOutput)
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfigPatch struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ClientIPConfigPatch `pulumi:"clientIP"`
}

// SessionAffinityConfigPatchInput is an input type that accepts SessionAffinityConfigPatchArgs and SessionAffinityConfigPatchOutput values.
// You can construct a concrete instance of `SessionAffinityConfigPatchInput` via:
//
//	SessionAffinityConfigPatchArgs{...}
type SessionAffinityConfigPatchInput interface {
	pulumi.Input

	ToSessionAffinityConfigPatchOutput() SessionAffinityConfigPatchOutput
	ToSessionAffinityConfigPatchOutputWithContext(context.Context) SessionAffinityConfigPatchOutput
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfigPatchArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ClientIPConfigPatchPtrInput `pulumi:"clientIP"`
}

func (SessionAffinityConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityConfigPatch)(nil)).Elem()
}

func (i SessionAffinityConfigPatchArgs) ToSessionAffinityConfigPatchOutput() SessionAffinityConfigPatchOutput {
	return i.ToSessionAffinityConfigPatchOutputWithContext(context.Background())
}

func (i SessionAffinityConfigPatchArgs) ToSessionAffinityConfigPatchOutputWithContext(ctx context.Context) SessionAffinityConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigPatchOutput)
}

func (i SessionAffinityConfigPatchArgs) ToSessionAffinityConfigPatchPtrOutput() SessionAffinityConfigPatchPtrOutput {
	return i.ToSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i SessionAffinityConfigPatchArgs) ToSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigPatchOutput).ToSessionAffinityConfigPatchPtrOutputWithContext(ctx)
}

// SessionAffinityConfigPatchPtrInput is an input type that accepts SessionAffinityConfigPatchArgs, SessionAffinityConfigPatchPtr and SessionAffinityConfigPatchPtrOutput values.
// You can construct a concrete instance of `SessionAffinityConfigPatchPtrInput` via:
//
//	        SessionAffinityConfigPatchArgs{...}
//
//	or:
//
//	        nil
type SessionAffinityConfigPatchPtrInput interface {
	pulumi.Input

	ToSessionAffinityConfigPatchPtrOutput() SessionAffinityConfigPatchPtrOutput
	ToSessionAffinityConfigPatchPtrOutputWithContext(context.Context) SessionAffinityConfigPatchPtrOutput
}

type sessionAffinityConfigPatchPtrType SessionAffinityConfigPatchArgs

func SessionAffinityConfigPatchPtr(v *SessionAffinityConfigPatchArgs) SessionAffinityConfigPatchPtrInput {
	return (*sessionAffinityConfigPatchPtrType)(v)
}

func (*sessionAffinityConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionAffinityConfigPatch)(nil)).Elem()
}

func (i *sessionAffinityConfigPatchPtrType) ToSessionAffinityConfigPatchPtrOutput() SessionAffinityConfigPatchPtrOutput {
	return i.ToSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i *sessionAffinityConfigPatchPtrType) ToSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionAffinityConfigPatchPtrOutput)
}

// SessionAffinityConfig represents the configurations of session affinity.
type SessionAffinityConfigPatchOutput struct{ *pulumi.OutputState }

func (SessionAffinityConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityConfigPatch)(nil)).Elem()
}

func (o SessionAffinityConfigPatchOutput) ToSessionAffinityConfigPatchOutput() SessionAffinityConfigPatchOutput {
	return o
}

func (o SessionAffinityConfigPatchOutput) ToSessionAffinityConfigPatchOutputWithContext(ctx context.Context) SessionAffinityConfigPatchOutput {
	return o
}

func (o SessionAffinityConfigPatchOutput) ToSessionAffinityConfigPatchPtrOutput() SessionAffinityConfigPatchPtrOutput {
	return o.ToSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (o SessionAffinityConfigPatchOutput) ToSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SessionAffinityConfigPatch) *SessionAffinityConfigPatch {
		return &v
	}).(SessionAffinityConfigPatchPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o SessionAffinityConfigPatchOutput) ClientIP() ClientIPConfigPatchPtrOutput {
	return o.ApplyT(func(v SessionAffinityConfigPatch) *ClientIPConfigPatch { return v.ClientIP }).(ClientIPConfigPatchPtrOutput)
}

type SessionAffinityConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (SessionAffinityConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionAffinityConfigPatch)(nil)).Elem()
}

func (o SessionAffinityConfigPatchPtrOutput) ToSessionAffinityConfigPatchPtrOutput() SessionAffinityConfigPatchPtrOutput {
	return o
}

func (o SessionAffinityConfigPatchPtrOutput) ToSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) SessionAffinityConfigPatchPtrOutput {
	return o
}

func (o SessionAffinityConfigPatchPtrOutput) Elem() SessionAffinityConfigPatchOutput {
	return o.ApplyT(func(v *SessionAffinityConfigPatch) SessionAffinityConfigPatch {
		if v != nil {
			return *v
		}
		var ret SessionAffinityConfigPatch
		return ret
	}).(SessionAffinityConfigPatchOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o SessionAffinityConfigPatchPtrOutput) ClientIP() ClientIPConfigPatchPtrOutput {
	return o.ApplyT(func(v *SessionAffinityConfigPatch) *ClientIPConfigPatch {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ClientIPConfigPatchPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *ObjectReference `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// StorageOSPersistentVolumeSourceInput is an input type that accepts StorageOSPersistentVolumeSourceArgs and StorageOSPersistentVolumeSourceOutput values.
// You can construct a concrete instance of `StorageOSPersistentVolumeSourceInput` via:
//
//	StorageOSPersistentVolumeSourceArgs{...}
type StorageOSPersistentVolumeSourceInput interface {
	pulumi.Input

	ToStorageOSPersistentVolumeSourceOutput() StorageOSPersistentVolumeSourceOutput
	ToStorageOSPersistentVolumeSourceOutputWithContext(context.Context) StorageOSPersistentVolumeSourceOutput
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef ObjectReferencePtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (StorageOSPersistentVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSPersistentVolumeSource)(nil)).Elem()
}

func (i StorageOSPersistentVolumeSourceArgs) ToStorageOSPersistentVolumeSourceOutput() StorageOSPersistentVolumeSourceOutput {
	return i.ToStorageOSPersistentVolumeSourceOutputWithContext(context.Background())
}

func (i StorageOSPersistentVolumeSourceArgs) ToStorageOSPersistentVolumeSourceOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourceOutput)
}

func (i StorageOSPersistentVolumeSourceArgs) ToStorageOSPersistentVolumeSourcePtrOutput() StorageOSPersistentVolumeSourcePtrOutput {
	return i.ToStorageOSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i StorageOSPersistentVolumeSourceArgs) ToStorageOSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourceOutput).ToStorageOSPersistentVolumeSourcePtrOutputWithContext(ctx)
}

// StorageOSPersistentVolumeSourcePtrInput is an input type that accepts StorageOSPersistentVolumeSourceArgs, StorageOSPersistentVolumeSourcePtr and StorageOSPersistentVolumeSourcePtrOutput values.
// You can construct a concrete instance of `StorageOSPersistentVolumeSourcePtrInput` via:
//
//	        StorageOSPersistentVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type StorageOSPersistentVolumeSourcePtrInput interface {
	pulumi.Input

	ToStorageOSPersistentVolumeSourcePtrOutput() StorageOSPersistentVolumeSourcePtrOutput
	ToStorageOSPersistentVolumeSourcePtrOutputWithContext(context.Context) StorageOSPersistentVolumeSourcePtrOutput
}

type storageOSPersistentVolumeSourcePtrType StorageOSPersistentVolumeSourceArgs

func StorageOSPersistentVolumeSourcePtr(v *StorageOSPersistentVolumeSourceArgs) StorageOSPersistentVolumeSourcePtrInput {
	return (*storageOSPersistentVolumeSourcePtrType)(v)
}

func (*storageOSPersistentVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSPersistentVolumeSource)(nil)).Elem()
}

func (i *storageOSPersistentVolumeSourcePtrType) ToStorageOSPersistentVolumeSourcePtrOutput() StorageOSPersistentVolumeSourcePtrOutput {
	return i.ToStorageOSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *storageOSPersistentVolumeSourcePtrType) ToStorageOSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourcePtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSourceOutput struct{ *pulumi.OutputState }

func (StorageOSPersistentVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSPersistentVolumeSource)(nil)).Elem()
}

func (o StorageOSPersistentVolumeSourceOutput) ToStorageOSPersistentVolumeSourceOutput() StorageOSPersistentVolumeSourceOutput {
	return o
}

func (o StorageOSPersistentVolumeSourceOutput) ToStorageOSPersistentVolumeSourceOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourceOutput {
	return o
}

func (o StorageOSPersistentVolumeSourceOutput) ToStorageOSPersistentVolumeSourcePtrOutput() StorageOSPersistentVolumeSourcePtrOutput {
	return o.ToStorageOSPersistentVolumeSourcePtrOutputWithContext(context.Background())
}

func (o StorageOSPersistentVolumeSourceOutput) ToStorageOSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageOSPersistentVolumeSource) *StorageOSPersistentVolumeSource {
		return &v
	}).(StorageOSPersistentVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSPersistentVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSPersistentVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSPersistentVolumeSourceOutput) SecretRef() ObjectReferencePtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSource) *ObjectReference { return v.SecretRef }).(ObjectReferencePtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSPersistentVolumeSourceOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSource) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSPersistentVolumeSourceOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSource) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type StorageOSPersistentVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageOSPersistentVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSPersistentVolumeSource)(nil)).Elem()
}

func (o StorageOSPersistentVolumeSourcePtrOutput) ToStorageOSPersistentVolumeSourcePtrOutput() StorageOSPersistentVolumeSourcePtrOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePtrOutput) ToStorageOSPersistentVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePtrOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePtrOutput) Elem() StorageOSPersistentVolumeSourceOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) StorageOSPersistentVolumeSource {
		if v != nil {
			return *v
		}
		var ret StorageOSPersistentVolumeSource
		return ret
	}).(StorageOSPersistentVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSPersistentVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSPersistentVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSPersistentVolumeSourcePtrOutput) SecretRef() ObjectReferencePtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) *ObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ObjectReferencePtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSPersistentVolumeSourcePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSPersistentVolumeSourcePtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *ObjectReferencePatch `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// StorageOSPersistentVolumeSourcePatchInput is an input type that accepts StorageOSPersistentVolumeSourcePatchArgs and StorageOSPersistentVolumeSourcePatchOutput values.
// You can construct a concrete instance of `StorageOSPersistentVolumeSourcePatchInput` via:
//
//	StorageOSPersistentVolumeSourcePatchArgs{...}
type StorageOSPersistentVolumeSourcePatchInput interface {
	pulumi.Input

	ToStorageOSPersistentVolumeSourcePatchOutput() StorageOSPersistentVolumeSourcePatchOutput
	ToStorageOSPersistentVolumeSourcePatchOutputWithContext(context.Context) StorageOSPersistentVolumeSourcePatchOutput
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef ObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (StorageOSPersistentVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i StorageOSPersistentVolumeSourcePatchArgs) ToStorageOSPersistentVolumeSourcePatchOutput() StorageOSPersistentVolumeSourcePatchOutput {
	return i.ToStorageOSPersistentVolumeSourcePatchOutputWithContext(context.Background())
}

func (i StorageOSPersistentVolumeSourcePatchArgs) ToStorageOSPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourcePatchOutput)
}

func (i StorageOSPersistentVolumeSourcePatchArgs) ToStorageOSPersistentVolumeSourcePatchPtrOutput() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return i.ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i StorageOSPersistentVolumeSourcePatchArgs) ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourcePatchOutput).ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(ctx)
}

// StorageOSPersistentVolumeSourcePatchPtrInput is an input type that accepts StorageOSPersistentVolumeSourcePatchArgs, StorageOSPersistentVolumeSourcePatchPtr and StorageOSPersistentVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `StorageOSPersistentVolumeSourcePatchPtrInput` via:
//
//	        StorageOSPersistentVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type StorageOSPersistentVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToStorageOSPersistentVolumeSourcePatchPtrOutput() StorageOSPersistentVolumeSourcePatchPtrOutput
	ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(context.Context) StorageOSPersistentVolumeSourcePatchPtrOutput
}

type storageOSPersistentVolumeSourcePatchPtrType StorageOSPersistentVolumeSourcePatchArgs

func StorageOSPersistentVolumeSourcePatchPtr(v *StorageOSPersistentVolumeSourcePatchArgs) StorageOSPersistentVolumeSourcePatchPtrInput {
	return (*storageOSPersistentVolumeSourcePatchPtrType)(v)
}

func (*storageOSPersistentVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (i *storageOSPersistentVolumeSourcePatchPtrType) ToStorageOSPersistentVolumeSourcePatchPtrOutput() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return i.ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *storageOSPersistentVolumeSourcePatchPtrType) ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSPersistentVolumeSourcePatchPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSPersistentVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (StorageOSPersistentVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o StorageOSPersistentVolumeSourcePatchOutput) ToStorageOSPersistentVolumeSourcePatchOutput() StorageOSPersistentVolumeSourcePatchOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePatchOutput) ToStorageOSPersistentVolumeSourcePatchOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePatchOutput) ToStorageOSPersistentVolumeSourcePatchPtrOutput() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o.ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o StorageOSPersistentVolumeSourcePatchOutput) ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageOSPersistentVolumeSourcePatch) *StorageOSPersistentVolumeSourcePatch {
		return &v
	}).(StorageOSPersistentVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSPersistentVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSPersistentVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSPersistentVolumeSourcePatchOutput) SecretRef() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSourcePatch) *ObjectReferencePatch { return v.SecretRef }).(ObjectReferencePatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSPersistentVolumeSourcePatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSourcePatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSPersistentVolumeSourcePatchOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSPersistentVolumeSourcePatch) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type StorageOSPersistentVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (StorageOSPersistentVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSPersistentVolumeSourcePatch)(nil)).Elem()
}

func (o StorageOSPersistentVolumeSourcePatchPtrOutput) ToStorageOSPersistentVolumeSourcePatchPtrOutput() StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePatchPtrOutput) ToStorageOSPersistentVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSPersistentVolumeSourcePatchPtrOutput {
	return o
}

func (o StorageOSPersistentVolumeSourcePatchPtrOutput) Elem() StorageOSPersistentVolumeSourcePatchOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) StorageOSPersistentVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret StorageOSPersistentVolumeSourcePatch
		return ret
	}).(StorageOSPersistentVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSPersistentVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSPersistentVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSPersistentVolumeSourcePatchPtrOutput) SecretRef() ObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) *ObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ObjectReferencePatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSPersistentVolumeSourcePatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSPersistentVolumeSourcePatchPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSPersistentVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *LocalObjectReference `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// StorageOSVolumeSourceInput is an input type that accepts StorageOSVolumeSourceArgs and StorageOSVolumeSourceOutput values.
// You can construct a concrete instance of `StorageOSVolumeSourceInput` via:
//
//	StorageOSVolumeSourceArgs{...}
type StorageOSVolumeSourceInput interface {
	pulumi.Input

	ToStorageOSVolumeSourceOutput() StorageOSVolumeSourceOutput
	ToStorageOSVolumeSourceOutputWithContext(context.Context) StorageOSVolumeSourceOutput
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSourceArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef LocalObjectReferencePtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (StorageOSVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSVolumeSource)(nil)).Elem()
}

func (i StorageOSVolumeSourceArgs) ToStorageOSVolumeSourceOutput() StorageOSVolumeSourceOutput {
	return i.ToStorageOSVolumeSourceOutputWithContext(context.Background())
}

func (i StorageOSVolumeSourceArgs) ToStorageOSVolumeSourceOutputWithContext(ctx context.Context) StorageOSVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourceOutput)
}

func (i StorageOSVolumeSourceArgs) ToStorageOSVolumeSourcePtrOutput() StorageOSVolumeSourcePtrOutput {
	return i.ToStorageOSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i StorageOSVolumeSourceArgs) ToStorageOSVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourceOutput).ToStorageOSVolumeSourcePtrOutputWithContext(ctx)
}

// StorageOSVolumeSourcePtrInput is an input type that accepts StorageOSVolumeSourceArgs, StorageOSVolumeSourcePtr and StorageOSVolumeSourcePtrOutput values.
// You can construct a concrete instance of `StorageOSVolumeSourcePtrInput` via:
//
//	        StorageOSVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type StorageOSVolumeSourcePtrInput interface {
	pulumi.Input

	ToStorageOSVolumeSourcePtrOutput() StorageOSVolumeSourcePtrOutput
	ToStorageOSVolumeSourcePtrOutputWithContext(context.Context) StorageOSVolumeSourcePtrOutput
}

type storageOSVolumeSourcePtrType StorageOSVolumeSourceArgs

func StorageOSVolumeSourcePtr(v *StorageOSVolumeSourceArgs) StorageOSVolumeSourcePtrInput {
	return (*storageOSVolumeSourcePtrType)(v)
}

func (*storageOSVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSVolumeSource)(nil)).Elem()
}

func (i *storageOSVolumeSourcePtrType) ToStorageOSVolumeSourcePtrOutput() StorageOSVolumeSourcePtrOutput {
	return i.ToStorageOSVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *storageOSVolumeSourcePtrType) ToStorageOSVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourcePtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSourceOutput struct{ *pulumi.OutputState }

func (StorageOSVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSVolumeSource)(nil)).Elem()
}

func (o StorageOSVolumeSourceOutput) ToStorageOSVolumeSourceOutput() StorageOSVolumeSourceOutput {
	return o
}

func (o StorageOSVolumeSourceOutput) ToStorageOSVolumeSourceOutputWithContext(ctx context.Context) StorageOSVolumeSourceOutput {
	return o
}

func (o StorageOSVolumeSourceOutput) ToStorageOSVolumeSourcePtrOutput() StorageOSVolumeSourcePtrOutput {
	return o.ToStorageOSVolumeSourcePtrOutputWithContext(context.Background())
}

func (o StorageOSVolumeSourceOutput) ToStorageOSVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageOSVolumeSource) *StorageOSVolumeSource {
		return &v
	}).(StorageOSVolumeSourcePtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSVolumeSourceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSource) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSVolumeSourceOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSource) *LocalObjectReference { return v.SecretRef }).(LocalObjectReferencePtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSVolumeSourceOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSource) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSVolumeSourceOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSource) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type StorageOSVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageOSVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSVolumeSource)(nil)).Elem()
}

func (o StorageOSVolumeSourcePtrOutput) ToStorageOSVolumeSourcePtrOutput() StorageOSVolumeSourcePtrOutput {
	return o
}

func (o StorageOSVolumeSourcePtrOutput) ToStorageOSVolumeSourcePtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePtrOutput {
	return o
}

func (o StorageOSVolumeSourcePtrOutput) Elem() StorageOSVolumeSourceOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) StorageOSVolumeSource {
		if v != nil {
			return *v
		}
		var ret StorageOSVolumeSource
		return ret
	}).(StorageOSVolumeSourceOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSVolumeSourcePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSVolumeSourcePtrOutput) SecretRef() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSVolumeSourcePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSVolumeSourcePtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSourcePatch struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *LocalObjectReferencePatch `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// StorageOSVolumeSourcePatchInput is an input type that accepts StorageOSVolumeSourcePatchArgs and StorageOSVolumeSourcePatchOutput values.
// You can construct a concrete instance of `StorageOSVolumeSourcePatchInput` via:
//
//	StorageOSVolumeSourcePatchArgs{...}
type StorageOSVolumeSourcePatchInput interface {
	pulumi.Input

	ToStorageOSVolumeSourcePatchOutput() StorageOSVolumeSourcePatchOutput
	ToStorageOSVolumeSourcePatchOutputWithContext(context.Context) StorageOSVolumeSourcePatchOutput
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSourcePatchArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef LocalObjectReferencePatchPtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (StorageOSVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSVolumeSourcePatch)(nil)).Elem()
}

func (i StorageOSVolumeSourcePatchArgs) ToStorageOSVolumeSourcePatchOutput() StorageOSVolumeSourcePatchOutput {
	return i.ToStorageOSVolumeSourcePatchOutputWithContext(context.Background())
}

func (i StorageOSVolumeSourcePatchArgs) ToStorageOSVolumeSourcePatchOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourcePatchOutput)
}

func (i StorageOSVolumeSourcePatchArgs) ToStorageOSVolumeSourcePatchPtrOutput() StorageOSVolumeSourcePatchPtrOutput {
	return i.ToStorageOSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i StorageOSVolumeSourcePatchArgs) ToStorageOSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourcePatchOutput).ToStorageOSVolumeSourcePatchPtrOutputWithContext(ctx)
}

// StorageOSVolumeSourcePatchPtrInput is an input type that accepts StorageOSVolumeSourcePatchArgs, StorageOSVolumeSourcePatchPtr and StorageOSVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `StorageOSVolumeSourcePatchPtrInput` via:
//
//	        StorageOSVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type StorageOSVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToStorageOSVolumeSourcePatchPtrOutput() StorageOSVolumeSourcePatchPtrOutput
	ToStorageOSVolumeSourcePatchPtrOutputWithContext(context.Context) StorageOSVolumeSourcePatchPtrOutput
}

type storageOSVolumeSourcePatchPtrType StorageOSVolumeSourcePatchArgs

func StorageOSVolumeSourcePatchPtr(v *StorageOSVolumeSourcePatchArgs) StorageOSVolumeSourcePatchPtrInput {
	return (*storageOSVolumeSourcePatchPtrType)(v)
}

func (*storageOSVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSVolumeSourcePatch)(nil)).Elem()
}

func (i *storageOSVolumeSourcePatchPtrType) ToStorageOSVolumeSourcePatchPtrOutput() StorageOSVolumeSourcePatchPtrOutput {
	return i.ToStorageOSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *storageOSVolumeSourcePatchPtrType) ToStorageOSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOSVolumeSourcePatchPtrOutput)
}

// Represents a StorageOS persistent volume resource.
type StorageOSVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (StorageOSVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageOSVolumeSourcePatch)(nil)).Elem()
}

func (o StorageOSVolumeSourcePatchOutput) ToStorageOSVolumeSourcePatchOutput() StorageOSVolumeSourcePatchOutput {
	return o
}

func (o StorageOSVolumeSourcePatchOutput) ToStorageOSVolumeSourcePatchOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchOutput {
	return o
}

func (o StorageOSVolumeSourcePatchOutput) ToStorageOSVolumeSourcePatchPtrOutput() StorageOSVolumeSourcePatchPtrOutput {
	return o.ToStorageOSVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o StorageOSVolumeSourcePatchOutput) ToStorageOSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageOSVolumeSourcePatch) *StorageOSVolumeSourcePatch {
		return &v
	}).(StorageOSVolumeSourcePatchPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSVolumeSourcePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSourcePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSVolumeSourcePatchOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSourcePatch) *LocalObjectReferencePatch { return v.SecretRef }).(LocalObjectReferencePatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSVolumeSourcePatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSourcePatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSVolumeSourcePatchOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageOSVolumeSourcePatch) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type StorageOSVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (StorageOSVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageOSVolumeSourcePatch)(nil)).Elem()
}

func (o StorageOSVolumeSourcePatchPtrOutput) ToStorageOSVolumeSourcePatchPtrOutput() StorageOSVolumeSourcePatchPtrOutput {
	return o
}

func (o StorageOSVolumeSourcePatchPtrOutput) ToStorageOSVolumeSourcePatchPtrOutputWithContext(ctx context.Context) StorageOSVolumeSourcePatchPtrOutput {
	return o
}

func (o StorageOSVolumeSourcePatchPtrOutput) Elem() StorageOSVolumeSourcePatchOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) StorageOSVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret StorageOSVolumeSourcePatch
		return ret
	}).(StorageOSVolumeSourcePatchOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o StorageOSVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o StorageOSVolumeSourcePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o StorageOSVolumeSourcePatchPtrOutput) SecretRef() LocalObjectReferencePatchPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) *LocalObjectReferencePatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(LocalObjectReferencePatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o StorageOSVolumeSourcePatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o StorageOSVolumeSourcePatchPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageOSVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// Sysctl defines a kernel parameter to be set
type Sysctl struct {
	// Name of a property to set
	Name string `pulumi:"name"`
	// Value of a property to set
	Value string `pulumi:"value"`
}

// SysctlInput is an input type that accepts SysctlArgs and SysctlOutput values.
// You can construct a concrete instance of `SysctlInput` via:
//
//	SysctlArgs{...}
type SysctlInput interface {
	pulumi.Input

	ToSysctlOutput() SysctlOutput
	ToSysctlOutputWithContext(context.Context) SysctlOutput
}

// Sysctl defines a kernel parameter to be set
type SysctlArgs struct {
	// Name of a property to set
	Name pulumi.StringInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringInput `pulumi:"value"`
}

func (SysctlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sysctl)(nil)).Elem()
}

func (i SysctlArgs) ToSysctlOutput() SysctlOutput {
	return i.ToSysctlOutputWithContext(context.Background())
}

func (i SysctlArgs) ToSysctlOutputWithContext(ctx context.Context) SysctlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlOutput)
}

// SysctlArrayInput is an input type that accepts SysctlArray and SysctlArrayOutput values.
// You can construct a concrete instance of `SysctlArrayInput` via:
//
//	SysctlArray{ SysctlArgs{...} }
type SysctlArrayInput interface {
	pulumi.Input

	ToSysctlArrayOutput() SysctlArrayOutput
	ToSysctlArrayOutputWithContext(context.Context) SysctlArrayOutput
}

type SysctlArray []SysctlInput

func (SysctlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Sysctl)(nil)).Elem()
}

func (i SysctlArray) ToSysctlArrayOutput() SysctlArrayOutput {
	return i.ToSysctlArrayOutputWithContext(context.Background())
}

func (i SysctlArray) ToSysctlArrayOutputWithContext(ctx context.Context) SysctlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type SysctlOutput struct{ *pulumi.OutputState }

func (SysctlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sysctl)(nil)).Elem()
}

func (o SysctlOutput) ToSysctlOutput() SysctlOutput {
	return o
}

func (o SysctlOutput) ToSysctlOutputWithContext(ctx context.Context) SysctlOutput {
	return o
}

// Name of a property to set
func (o SysctlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sysctl) string { return v.Name }).(pulumi.StringOutput)
}

// Value of a property to set
func (o SysctlOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Sysctl) string { return v.Value }).(pulumi.StringOutput)
}

type SysctlArrayOutput struct{ *pulumi.OutputState }

func (SysctlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Sysctl)(nil)).Elem()
}

func (o SysctlArrayOutput) ToSysctlArrayOutput() SysctlArrayOutput {
	return o
}

func (o SysctlArrayOutput) ToSysctlArrayOutputWithContext(ctx context.Context) SysctlArrayOutput {
	return o
}

func (o SysctlArrayOutput) Index(i pulumi.IntInput) SysctlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Sysctl {
		return vs[0].([]Sysctl)[vs[1].(int)]
	}).(SysctlOutput)
}

// Sysctl defines a kernel parameter to be set
type SysctlPatch struct {
	// Name of a property to set
	Name *string `pulumi:"name"`
	// Value of a property to set
	Value *string `pulumi:"value"`
}

// SysctlPatchInput is an input type that accepts SysctlPatchArgs and SysctlPatchOutput values.
// You can construct a concrete instance of `SysctlPatchInput` via:
//
//	SysctlPatchArgs{...}
type SysctlPatchInput interface {
	pulumi.Input

	ToSysctlPatchOutput() SysctlPatchOutput
	ToSysctlPatchOutputWithContext(context.Context) SysctlPatchOutput
}

// Sysctl defines a kernel parameter to be set
type SysctlPatchArgs struct {
	// Name of a property to set
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SysctlPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlPatch)(nil)).Elem()
}

func (i SysctlPatchArgs) ToSysctlPatchOutput() SysctlPatchOutput {
	return i.ToSysctlPatchOutputWithContext(context.Background())
}

func (i SysctlPatchArgs) ToSysctlPatchOutputWithContext(ctx context.Context) SysctlPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlPatchOutput)
}

// SysctlPatchArrayInput is an input type that accepts SysctlPatchArray and SysctlPatchArrayOutput values.
// You can construct a concrete instance of `SysctlPatchArrayInput` via:
//
//	SysctlPatchArray{ SysctlPatchArgs{...} }
type SysctlPatchArrayInput interface {
	pulumi.Input

	ToSysctlPatchArrayOutput() SysctlPatchArrayOutput
	ToSysctlPatchArrayOutputWithContext(context.Context) SysctlPatchArrayOutput
}

type SysctlPatchArray []SysctlPatchInput

func (SysctlPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SysctlPatch)(nil)).Elem()
}

func (i SysctlPatchArray) ToSysctlPatchArrayOutput() SysctlPatchArrayOutput {
	return i.ToSysctlPatchArrayOutputWithContext(context.Background())
}

func (i SysctlPatchArray) ToSysctlPatchArrayOutputWithContext(ctx context.Context) SysctlPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlPatchArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type SysctlPatchOutput struct{ *pulumi.OutputState }

func (SysctlPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlPatch)(nil)).Elem()
}

func (o SysctlPatchOutput) ToSysctlPatchOutput() SysctlPatchOutput {
	return o
}

func (o SysctlPatchOutput) ToSysctlPatchOutputWithContext(ctx context.Context) SysctlPatchOutput {
	return o
}

// Name of a property to set
func (o SysctlPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of a property to set
func (o SysctlPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SysctlPatchArrayOutput struct{ *pulumi.OutputState }

func (SysctlPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SysctlPatch)(nil)).Elem()
}

func (o SysctlPatchArrayOutput) ToSysctlPatchArrayOutput() SysctlPatchArrayOutput {
	return o
}

func (o SysctlPatchArrayOutput) ToSysctlPatchArrayOutputWithContext(ctx context.Context) SysctlPatchArrayOutput {
	return o
}

func (o SysctlPatchArrayOutput) Index(i pulumi.IntInput) SysctlPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SysctlPatch {
		return vs[0].([]SysctlPatch)[vs[1].(int)]
	}).(SysctlPatchOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketAction struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// TCPSocketActionInput is an input type that accepts TCPSocketActionArgs and TCPSocketActionOutput values.
// You can construct a concrete instance of `TCPSocketActionInput` via:
//
//	TCPSocketActionArgs{...}
type TCPSocketActionInput interface {
	pulumi.Input

	ToTCPSocketActionOutput() TCPSocketActionOutput
	ToTCPSocketActionOutputWithContext(context.Context) TCPSocketActionOutput
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (TCPSocketActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return i.ToTCPSocketActionOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput)
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput).ToTCPSocketActionPtrOutputWithContext(ctx)
}

// TCPSocketActionPtrInput is an input type that accepts TCPSocketActionArgs, TCPSocketActionPtr and TCPSocketActionPtrOutput values.
// You can construct a concrete instance of `TCPSocketActionPtrInput` via:
//
//	        TCPSocketActionArgs{...}
//
//	or:
//
//	        nil
type TCPSocketActionPtrInput interface {
	pulumi.Input

	ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput
	ToTCPSocketActionPtrOutputWithContext(context.Context) TCPSocketActionPtrOutput
}

type tcpsocketActionPtrType TCPSocketActionArgs

func TCPSocketActionPtr(v *TCPSocketActionArgs) TCPSocketActionPtrInput {
	return (*tcpsocketActionPtrType)(v)
}

func (*tcpsocketActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionOutput struct{ *pulumi.OutputState }

func (TCPSocketActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TCPSocketAction) *TCPSocketAction {
		return &v
	}).(TCPSocketActionPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPSocketAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o TCPSocketActionOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v TCPSocketAction) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type TCPSocketActionPtrOutput struct{ *pulumi.OutputState }

func (TCPSocketActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) Elem() TCPSocketActionOutput {
	return o.ApplyT(func(v *TCPSocketAction) TCPSocketAction {
		if v != nil {
			return *v
		}
		var ret TCPSocketAction
		return ret
	}).(TCPSocketActionOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPSocketAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o TCPSocketActionPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *TCPSocketAction) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionPatch struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// TCPSocketActionPatchInput is an input type that accepts TCPSocketActionPatchArgs and TCPSocketActionPatchOutput values.
// You can construct a concrete instance of `TCPSocketActionPatchInput` via:
//
//	TCPSocketActionPatchArgs{...}
type TCPSocketActionPatchInput interface {
	pulumi.Input

	ToTCPSocketActionPatchOutput() TCPSocketActionPatchOutput
	ToTCPSocketActionPatchOutputWithContext(context.Context) TCPSocketActionPatchOutput
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionPatchArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (TCPSocketActionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketActionPatch)(nil)).Elem()
}

func (i TCPSocketActionPatchArgs) ToTCPSocketActionPatchOutput() TCPSocketActionPatchOutput {
	return i.ToTCPSocketActionPatchOutputWithContext(context.Background())
}

func (i TCPSocketActionPatchArgs) ToTCPSocketActionPatchOutputWithContext(ctx context.Context) TCPSocketActionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPatchOutput)
}

func (i TCPSocketActionPatchArgs) ToTCPSocketActionPatchPtrOutput() TCPSocketActionPatchPtrOutput {
	return i.ToTCPSocketActionPatchPtrOutputWithContext(context.Background())
}

func (i TCPSocketActionPatchArgs) ToTCPSocketActionPatchPtrOutputWithContext(ctx context.Context) TCPSocketActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPatchOutput).ToTCPSocketActionPatchPtrOutputWithContext(ctx)
}

// TCPSocketActionPatchPtrInput is an input type that accepts TCPSocketActionPatchArgs, TCPSocketActionPatchPtr and TCPSocketActionPatchPtrOutput values.
// You can construct a concrete instance of `TCPSocketActionPatchPtrInput` via:
//
//	        TCPSocketActionPatchArgs{...}
//
//	or:
//
//	        nil
type TCPSocketActionPatchPtrInput interface {
	pulumi.Input

	ToTCPSocketActionPatchPtrOutput() TCPSocketActionPatchPtrOutput
	ToTCPSocketActionPatchPtrOutputWithContext(context.Context) TCPSocketActionPatchPtrOutput
}

type tcpsocketActionPatchPtrType TCPSocketActionPatchArgs

func TCPSocketActionPatchPtr(v *TCPSocketActionPatchArgs) TCPSocketActionPatchPtrInput {
	return (*tcpsocketActionPatchPtrType)(v)
}

func (*tcpsocketActionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketActionPatch)(nil)).Elem()
}

func (i *tcpsocketActionPatchPtrType) ToTCPSocketActionPatchPtrOutput() TCPSocketActionPatchPtrOutput {
	return i.ToTCPSocketActionPatchPtrOutputWithContext(context.Background())
}

func (i *tcpsocketActionPatchPtrType) ToTCPSocketActionPatchPtrOutputWithContext(ctx context.Context) TCPSocketActionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPatchPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionPatchOutput struct{ *pulumi.OutputState }

func (TCPSocketActionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketActionPatch)(nil)).Elem()
}

func (o TCPSocketActionPatchOutput) ToTCPSocketActionPatchOutput() TCPSocketActionPatchOutput {
	return o
}

func (o TCPSocketActionPatchOutput) ToTCPSocketActionPatchOutputWithContext(ctx context.Context) TCPSocketActionPatchOutput {
	return o
}

func (o TCPSocketActionPatchOutput) ToTCPSocketActionPatchPtrOutput() TCPSocketActionPatchPtrOutput {
	return o.ToTCPSocketActionPatchPtrOutputWithContext(context.Background())
}

func (o TCPSocketActionPatchOutput) ToTCPSocketActionPatchPtrOutputWithContext(ctx context.Context) TCPSocketActionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TCPSocketActionPatch) *TCPSocketActionPatch {
		return &v
	}).(TCPSocketActionPatchPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPSocketActionPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o TCPSocketActionPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v TCPSocketActionPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type TCPSocketActionPatchPtrOutput struct{ *pulumi.OutputState }

func (TCPSocketActionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketActionPatch)(nil)).Elem()
}

func (o TCPSocketActionPatchPtrOutput) ToTCPSocketActionPatchPtrOutput() TCPSocketActionPatchPtrOutput {
	return o
}

func (o TCPSocketActionPatchPtrOutput) ToTCPSocketActionPatchPtrOutputWithContext(ctx context.Context) TCPSocketActionPatchPtrOutput {
	return o
}

func (o TCPSocketActionPatchPtrOutput) Elem() TCPSocketActionPatchOutput {
	return o.ApplyT(func(v *TCPSocketActionPatch) TCPSocketActionPatch {
		if v != nil {
			return *v
		}
		var ret TCPSocketActionPatch
		return ret
	}).(TCPSocketActionPatchOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPSocketActionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o TCPSocketActionPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *TCPSocketActionPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type Taint struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `pulumi:"effect"`
	// Required. The taint key to be applied to a node.
	Key string `pulumi:"key"`
	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
	TimeAdded *string `pulumi:"timeAdded"`
	// The taint value corresponding to the taint key.
	Value *string `pulumi:"value"`
}

// TaintInput is an input type that accepts TaintArgs and TaintOutput values.
// You can construct a concrete instance of `TaintInput` via:
//
//	TaintArgs{...}
type TaintInput interface {
	pulumi.Input

	ToTaintOutput() TaintOutput
	ToTaintOutputWithContext(context.Context) TaintOutput
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type TaintArgs struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringInput `pulumi:"effect"`
	// Required. The taint key to be applied to a node.
	Key pulumi.StringInput `pulumi:"key"`
	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
	TimeAdded pulumi.StringPtrInput `pulumi:"timeAdded"`
	// The taint value corresponding to the taint key.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Taint)(nil)).Elem()
}

func (i TaintArgs) ToTaintOutput() TaintOutput {
	return i.ToTaintOutputWithContext(context.Background())
}

func (i TaintArgs) ToTaintOutputWithContext(ctx context.Context) TaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaintOutput)
}

// TaintArrayInput is an input type that accepts TaintArray and TaintArrayOutput values.
// You can construct a concrete instance of `TaintArrayInput` via:
//
//	TaintArray{ TaintArgs{...} }
type TaintArrayInput interface {
	pulumi.Input

	ToTaintArrayOutput() TaintArrayOutput
	ToTaintArrayOutputWithContext(context.Context) TaintArrayOutput
}

type TaintArray []TaintInput

func (TaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Taint)(nil)).Elem()
}

func (i TaintArray) ToTaintArrayOutput() TaintArrayOutput {
	return i.ToTaintArrayOutputWithContext(context.Background())
}

func (i TaintArray) ToTaintArrayOutputWithContext(ctx context.Context) TaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaintArrayOutput)
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type TaintOutput struct{ *pulumi.OutputState }

func (TaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Taint)(nil)).Elem()
}

func (o TaintOutput) ToTaintOutput() TaintOutput {
	return o
}

func (o TaintOutput) ToTaintOutputWithContext(ctx context.Context) TaintOutput {
	return o
}

// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
func (o TaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v Taint) string { return v.Effect }).(pulumi.StringOutput)
}

// Required. The taint key to be applied to a node.
func (o TaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v Taint) string { return v.Key }).(pulumi.StringOutput)
}

// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
func (o TaintOutput) TimeAdded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Taint) *string { return v.TimeAdded }).(pulumi.StringPtrOutput)
}

// The taint value corresponding to the taint key.
func (o TaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Taint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaintArrayOutput struct{ *pulumi.OutputState }

func (TaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Taint)(nil)).Elem()
}

func (o TaintArrayOutput) ToTaintArrayOutput() TaintArrayOutput {
	return o
}

func (o TaintArrayOutput) ToTaintArrayOutputWithContext(ctx context.Context) TaintArrayOutput {
	return o
}

func (o TaintArrayOutput) Index(i pulumi.IntInput) TaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Taint {
		return vs[0].([]Taint)[vs[1].(int)]
	}).(TaintOutput)
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type TaintPatch struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Required. The taint key to be applied to a node.
	Key *string `pulumi:"key"`
	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
	TimeAdded *string `pulumi:"timeAdded"`
	// The taint value corresponding to the taint key.
	Value *string `pulumi:"value"`
}

// TaintPatchInput is an input type that accepts TaintPatchArgs and TaintPatchOutput values.
// You can construct a concrete instance of `TaintPatchInput` via:
//
//	TaintPatchArgs{...}
type TaintPatchInput interface {
	pulumi.Input

	ToTaintPatchOutput() TaintPatchOutput
	ToTaintPatchOutputWithContext(context.Context) TaintPatchOutput
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type TaintPatchArgs struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Required. The taint key to be applied to a node.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
	TimeAdded pulumi.StringPtrInput `pulumi:"timeAdded"`
	// The taint value corresponding to the taint key.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaintPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaintPatch)(nil)).Elem()
}

func (i TaintPatchArgs) ToTaintPatchOutput() TaintPatchOutput {
	return i.ToTaintPatchOutputWithContext(context.Background())
}

func (i TaintPatchArgs) ToTaintPatchOutputWithContext(ctx context.Context) TaintPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaintPatchOutput)
}

// TaintPatchArrayInput is an input type that accepts TaintPatchArray and TaintPatchArrayOutput values.
// You can construct a concrete instance of `TaintPatchArrayInput` via:
//
//	TaintPatchArray{ TaintPatchArgs{...} }
type TaintPatchArrayInput interface {
	pulumi.Input

	ToTaintPatchArrayOutput() TaintPatchArrayOutput
	ToTaintPatchArrayOutputWithContext(context.Context) TaintPatchArrayOutput
}

type TaintPatchArray []TaintPatchInput

func (TaintPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaintPatch)(nil)).Elem()
}

func (i TaintPatchArray) ToTaintPatchArrayOutput() TaintPatchArrayOutput {
	return i.ToTaintPatchArrayOutputWithContext(context.Background())
}

func (i TaintPatchArray) ToTaintPatchArrayOutputWithContext(ctx context.Context) TaintPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaintPatchArrayOutput)
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type TaintPatchOutput struct{ *pulumi.OutputState }

func (TaintPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaintPatch)(nil)).Elem()
}

func (o TaintPatchOutput) ToTaintPatchOutput() TaintPatchOutput {
	return o
}

func (o TaintPatchOutput) ToTaintPatchOutputWithContext(ctx context.Context) TaintPatchOutput {
	return o
}

// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
func (o TaintPatchOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaintPatch) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Required. The taint key to be applied to a node.
func (o TaintPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaintPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
func (o TaintPatchOutput) TimeAdded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaintPatch) *string { return v.TimeAdded }).(pulumi.StringPtrOutput)
}

// The taint value corresponding to the taint key.
func (o TaintPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaintPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaintPatchArrayOutput struct{ *pulumi.OutputState }

func (TaintPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaintPatch)(nil)).Elem()
}

func (o TaintPatchArrayOutput) ToTaintPatchArrayOutput() TaintPatchArrayOutput {
	return o
}

func (o TaintPatchArrayOutput) ToTaintPatchArrayOutputWithContext(ctx context.Context) TaintPatchArrayOutput {
	return o
}

func (o TaintPatchArrayOutput) Index(i pulumi.IntInput) TaintPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaintPatch {
		return vs[0].([]TaintPatch)[vs[1].(int)]
	}).(TaintPatchOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type Toleration struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// TolerationInput is an input type that accepts TolerationArgs and TolerationOutput values.
// You can construct a concrete instance of `TolerationInput` via:
//
//	TolerationArgs{...}
type TolerationInput interface {
	pulumi.Input

	ToTolerationOutput() TolerationOutput
	ToTolerationOutputWithContext(context.Context) TolerationOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type TolerationArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TolerationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Toleration)(nil)).Elem()
}

func (i TolerationArgs) ToTolerationOutput() TolerationOutput {
	return i.ToTolerationOutputWithContext(context.Background())
}

func (i TolerationArgs) ToTolerationOutputWithContext(ctx context.Context) TolerationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TolerationOutput)
}

// TolerationArrayInput is an input type that accepts TolerationArray and TolerationArrayOutput values.
// You can construct a concrete instance of `TolerationArrayInput` via:
//
//	TolerationArray{ TolerationArgs{...} }
type TolerationArrayInput interface {
	pulumi.Input

	ToTolerationArrayOutput() TolerationArrayOutput
	ToTolerationArrayOutputWithContext(context.Context) TolerationArrayOutput
}

type TolerationArray []TolerationInput

func (TolerationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Toleration)(nil)).Elem()
}

func (i TolerationArray) ToTolerationArrayOutput() TolerationArrayOutput {
	return i.ToTolerationArrayOutputWithContext(context.Background())
}

func (i TolerationArray) ToTolerationArrayOutputWithContext(ctx context.Context) TolerationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TolerationArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type TolerationOutput struct{ *pulumi.OutputState }

func (TolerationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Toleration)(nil)).Elem()
}

func (o TolerationOutput) ToTolerationOutput() TolerationOutput {
	return o
}

func (o TolerationOutput) ToTolerationOutputWithContext(ctx context.Context) TolerationOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o TolerationOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Toleration) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o TolerationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Toleration) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o TolerationOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Toleration) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o TolerationOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Toleration) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o TolerationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Toleration) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TolerationArrayOutput struct{ *pulumi.OutputState }

func (TolerationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Toleration)(nil)).Elem()
}

func (o TolerationArrayOutput) ToTolerationArrayOutput() TolerationArrayOutput {
	return o
}

func (o TolerationArrayOutput) ToTolerationArrayOutputWithContext(ctx context.Context) TolerationArrayOutput {
	return o
}

func (o TolerationArrayOutput) Index(i pulumi.IntInput) TolerationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Toleration {
		return vs[0].([]Toleration)[vs[1].(int)]
	}).(TolerationOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type TolerationPatch struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// TolerationPatchInput is an input type that accepts TolerationPatchArgs and TolerationPatchOutput values.
// You can construct a concrete instance of `TolerationPatchInput` via:
//
//	TolerationPatchArgs{...}
type TolerationPatchInput interface {
	pulumi.Input

	ToTolerationPatchOutput() TolerationPatchOutput
	ToTolerationPatchOutputWithContext(context.Context) TolerationPatchOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type TolerationPatchArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TolerationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TolerationPatch)(nil)).Elem()
}

func (i TolerationPatchArgs) ToTolerationPatchOutput() TolerationPatchOutput {
	return i.ToTolerationPatchOutputWithContext(context.Background())
}

func (i TolerationPatchArgs) ToTolerationPatchOutputWithContext(ctx context.Context) TolerationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TolerationPatchOutput)
}

// TolerationPatchArrayInput is an input type that accepts TolerationPatchArray and TolerationPatchArrayOutput values.
// You can construct a concrete instance of `TolerationPatchArrayInput` via:
//
//	TolerationPatchArray{ TolerationPatchArgs{...} }
type TolerationPatchArrayInput interface {
	pulumi.Input

	ToTolerationPatchArrayOutput() TolerationPatchArrayOutput
	ToTolerationPatchArrayOutputWithContext(context.Context) TolerationPatchArrayOutput
}

type TolerationPatchArray []TolerationPatchInput

func (TolerationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TolerationPatch)(nil)).Elem()
}

func (i TolerationPatchArray) ToTolerationPatchArrayOutput() TolerationPatchArrayOutput {
	return i.ToTolerationPatchArrayOutputWithContext(context.Background())
}

func (i TolerationPatchArray) ToTolerationPatchArrayOutputWithContext(ctx context.Context) TolerationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TolerationPatchArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type TolerationPatchOutput struct{ *pulumi.OutputState }

func (TolerationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TolerationPatch)(nil)).Elem()
}

func (o TolerationPatchOutput) ToTolerationPatchOutput() TolerationPatchOutput {
	return o
}

func (o TolerationPatchOutput) ToTolerationPatchOutputWithContext(ctx context.Context) TolerationPatchOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o TolerationPatchOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TolerationPatch) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o TolerationPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TolerationPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o TolerationPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TolerationPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o TolerationPatchOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TolerationPatch) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o TolerationPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TolerationPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TolerationPatchArrayOutput struct{ *pulumi.OutputState }

func (TolerationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TolerationPatch)(nil)).Elem()
}

func (o TolerationPatchArrayOutput) ToTolerationPatchArrayOutput() TolerationPatchArrayOutput {
	return o
}

func (o TolerationPatchArrayOutput) ToTolerationPatchArrayOutputWithContext(ctx context.Context) TolerationPatchArrayOutput {
	return o
}

func (o TolerationPatchArrayOutput) Index(i pulumi.IntInput) TolerationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TolerationPatch {
		return vs[0].([]TolerationPatch)[vs[1].(int)]
	}).(TolerationPatchOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirement struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// TopologySelectorLabelRequirementInput is an input type that accepts TopologySelectorLabelRequirementArgs and TopologySelectorLabelRequirementOutput values.
// You can construct a concrete instance of `TopologySelectorLabelRequirementInput` via:
//
//	TopologySelectorLabelRequirementArgs{...}
type TopologySelectorLabelRequirementInput interface {
	pulumi.Input

	ToTopologySelectorLabelRequirementOutput() TopologySelectorLabelRequirementOutput
	ToTopologySelectorLabelRequirementOutputWithContext(context.Context) TopologySelectorLabelRequirementOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirementArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TopologySelectorLabelRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorLabelRequirement)(nil)).Elem()
}

func (i TopologySelectorLabelRequirementArgs) ToTopologySelectorLabelRequirementOutput() TopologySelectorLabelRequirementOutput {
	return i.ToTopologySelectorLabelRequirementOutputWithContext(context.Background())
}

func (i TopologySelectorLabelRequirementArgs) ToTopologySelectorLabelRequirementOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorLabelRequirementOutput)
}

// TopologySelectorLabelRequirementArrayInput is an input type that accepts TopologySelectorLabelRequirementArray and TopologySelectorLabelRequirementArrayOutput values.
// You can construct a concrete instance of `TopologySelectorLabelRequirementArrayInput` via:
//
//	TopologySelectorLabelRequirementArray{ TopologySelectorLabelRequirementArgs{...} }
type TopologySelectorLabelRequirementArrayInput interface {
	pulumi.Input

	ToTopologySelectorLabelRequirementArrayOutput() TopologySelectorLabelRequirementArrayOutput
	ToTopologySelectorLabelRequirementArrayOutputWithContext(context.Context) TopologySelectorLabelRequirementArrayOutput
}

type TopologySelectorLabelRequirementArray []TopologySelectorLabelRequirementInput

func (TopologySelectorLabelRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorLabelRequirement)(nil)).Elem()
}

func (i TopologySelectorLabelRequirementArray) ToTopologySelectorLabelRequirementArrayOutput() TopologySelectorLabelRequirementArrayOutput {
	return i.ToTopologySelectorLabelRequirementArrayOutputWithContext(context.Background())
}

func (i TopologySelectorLabelRequirementArray) ToTopologySelectorLabelRequirementArrayOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorLabelRequirementArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirementOutput struct{ *pulumi.OutputState }

func (TopologySelectorLabelRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorLabelRequirement)(nil)).Elem()
}

func (o TopologySelectorLabelRequirementOutput) ToTopologySelectorLabelRequirementOutput() TopologySelectorLabelRequirementOutput {
	return o
}

func (o TopologySelectorLabelRequirementOutput) ToTopologySelectorLabelRequirementOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementOutput {
	return o
}

// The label key that the selector applies to.
func (o TopologySelectorLabelRequirementOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TopologySelectorLabelRequirement) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o TopologySelectorLabelRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopologySelectorLabelRequirement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TopologySelectorLabelRequirementArrayOutput struct{ *pulumi.OutputState }

func (TopologySelectorLabelRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorLabelRequirement)(nil)).Elem()
}

func (o TopologySelectorLabelRequirementArrayOutput) ToTopologySelectorLabelRequirementArrayOutput() TopologySelectorLabelRequirementArrayOutput {
	return o
}

func (o TopologySelectorLabelRequirementArrayOutput) ToTopologySelectorLabelRequirementArrayOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementArrayOutput {
	return o
}

func (o TopologySelectorLabelRequirementArrayOutput) Index(i pulumi.IntInput) TopologySelectorLabelRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySelectorLabelRequirement {
		return vs[0].([]TopologySelectorLabelRequirement)[vs[1].(int)]
	}).(TopologySelectorLabelRequirementOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirementPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// TopologySelectorLabelRequirementPatchInput is an input type that accepts TopologySelectorLabelRequirementPatchArgs and TopologySelectorLabelRequirementPatchOutput values.
// You can construct a concrete instance of `TopologySelectorLabelRequirementPatchInput` via:
//
//	TopologySelectorLabelRequirementPatchArgs{...}
type TopologySelectorLabelRequirementPatchInput interface {
	pulumi.Input

	ToTopologySelectorLabelRequirementPatchOutput() TopologySelectorLabelRequirementPatchOutput
	ToTopologySelectorLabelRequirementPatchOutputWithContext(context.Context) TopologySelectorLabelRequirementPatchOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirementPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TopologySelectorLabelRequirementPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorLabelRequirementPatch)(nil)).Elem()
}

func (i TopologySelectorLabelRequirementPatchArgs) ToTopologySelectorLabelRequirementPatchOutput() TopologySelectorLabelRequirementPatchOutput {
	return i.ToTopologySelectorLabelRequirementPatchOutputWithContext(context.Background())
}

func (i TopologySelectorLabelRequirementPatchArgs) ToTopologySelectorLabelRequirementPatchOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorLabelRequirementPatchOutput)
}

// TopologySelectorLabelRequirementPatchArrayInput is an input type that accepts TopologySelectorLabelRequirementPatchArray and TopologySelectorLabelRequirementPatchArrayOutput values.
// You can construct a concrete instance of `TopologySelectorLabelRequirementPatchArrayInput` via:
//
//	TopologySelectorLabelRequirementPatchArray{ TopologySelectorLabelRequirementPatchArgs{...} }
type TopologySelectorLabelRequirementPatchArrayInput interface {
	pulumi.Input

	ToTopologySelectorLabelRequirementPatchArrayOutput() TopologySelectorLabelRequirementPatchArrayOutput
	ToTopologySelectorLabelRequirementPatchArrayOutputWithContext(context.Context) TopologySelectorLabelRequirementPatchArrayOutput
}

type TopologySelectorLabelRequirementPatchArray []TopologySelectorLabelRequirementPatchInput

func (TopologySelectorLabelRequirementPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorLabelRequirementPatch)(nil)).Elem()
}

func (i TopologySelectorLabelRequirementPatchArray) ToTopologySelectorLabelRequirementPatchArrayOutput() TopologySelectorLabelRequirementPatchArrayOutput {
	return i.ToTopologySelectorLabelRequirementPatchArrayOutputWithContext(context.Background())
}

func (i TopologySelectorLabelRequirementPatchArray) ToTopologySelectorLabelRequirementPatchArrayOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorLabelRequirementPatchArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type TopologySelectorLabelRequirementPatchOutput struct{ *pulumi.OutputState }

func (TopologySelectorLabelRequirementPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorLabelRequirementPatch)(nil)).Elem()
}

func (o TopologySelectorLabelRequirementPatchOutput) ToTopologySelectorLabelRequirementPatchOutput() TopologySelectorLabelRequirementPatchOutput {
	return o
}

func (o TopologySelectorLabelRequirementPatchOutput) ToTopologySelectorLabelRequirementPatchOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o TopologySelectorLabelRequirementPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySelectorLabelRequirementPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o TopologySelectorLabelRequirementPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopologySelectorLabelRequirementPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TopologySelectorLabelRequirementPatchArrayOutput struct{ *pulumi.OutputState }

func (TopologySelectorLabelRequirementPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorLabelRequirementPatch)(nil)).Elem()
}

func (o TopologySelectorLabelRequirementPatchArrayOutput) ToTopologySelectorLabelRequirementPatchArrayOutput() TopologySelectorLabelRequirementPatchArrayOutput {
	return o
}

func (o TopologySelectorLabelRequirementPatchArrayOutput) ToTopologySelectorLabelRequirementPatchArrayOutputWithContext(ctx context.Context) TopologySelectorLabelRequirementPatchArrayOutput {
	return o
}

func (o TopologySelectorLabelRequirementPatchArrayOutput) Index(i pulumi.IntInput) TopologySelectorLabelRequirementPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySelectorLabelRequirementPatch {
		return vs[0].([]TopologySelectorLabelRequirementPatch)[vs[1].(int)]
	}).(TopologySelectorLabelRequirementPatchOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTerm struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []TopologySelectorLabelRequirement `pulumi:"matchLabelExpressions"`
}

// TopologySelectorTermInput is an input type that accepts TopologySelectorTermArgs and TopologySelectorTermOutput values.
// You can construct a concrete instance of `TopologySelectorTermInput` via:
//
//	TopologySelectorTermArgs{...}
type TopologySelectorTermInput interface {
	pulumi.Input

	ToTopologySelectorTermOutput() TopologySelectorTermOutput
	ToTopologySelectorTermOutputWithContext(context.Context) TopologySelectorTermOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTermArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions TopologySelectorLabelRequirementArrayInput `pulumi:"matchLabelExpressions"`
}

func (TopologySelectorTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorTerm)(nil)).Elem()
}

func (i TopologySelectorTermArgs) ToTopologySelectorTermOutput() TopologySelectorTermOutput {
	return i.ToTopologySelectorTermOutputWithContext(context.Background())
}

func (i TopologySelectorTermArgs) ToTopologySelectorTermOutputWithContext(ctx context.Context) TopologySelectorTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorTermOutput)
}

// TopologySelectorTermArrayInput is an input type that accepts TopologySelectorTermArray and TopologySelectorTermArrayOutput values.
// You can construct a concrete instance of `TopologySelectorTermArrayInput` via:
//
//	TopologySelectorTermArray{ TopologySelectorTermArgs{...} }
type TopologySelectorTermArrayInput interface {
	pulumi.Input

	ToTopologySelectorTermArrayOutput() TopologySelectorTermArrayOutput
	ToTopologySelectorTermArrayOutputWithContext(context.Context) TopologySelectorTermArrayOutput
}

type TopologySelectorTermArray []TopologySelectorTermInput

func (TopologySelectorTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorTerm)(nil)).Elem()
}

func (i TopologySelectorTermArray) ToTopologySelectorTermArrayOutput() TopologySelectorTermArrayOutput {
	return i.ToTopologySelectorTermArrayOutputWithContext(context.Background())
}

func (i TopologySelectorTermArray) ToTopologySelectorTermArrayOutputWithContext(ctx context.Context) TopologySelectorTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorTermArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTermOutput struct{ *pulumi.OutputState }

func (TopologySelectorTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorTerm)(nil)).Elem()
}

func (o TopologySelectorTermOutput) ToTopologySelectorTermOutput() TopologySelectorTermOutput {
	return o
}

func (o TopologySelectorTermOutput) ToTopologySelectorTermOutputWithContext(ctx context.Context) TopologySelectorTermOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o TopologySelectorTermOutput) MatchLabelExpressions() TopologySelectorLabelRequirementArrayOutput {
	return o.ApplyT(func(v TopologySelectorTerm) []TopologySelectorLabelRequirement { return v.MatchLabelExpressions }).(TopologySelectorLabelRequirementArrayOutput)
}

type TopologySelectorTermArrayOutput struct{ *pulumi.OutputState }

func (TopologySelectorTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorTerm)(nil)).Elem()
}

func (o TopologySelectorTermArrayOutput) ToTopologySelectorTermArrayOutput() TopologySelectorTermArrayOutput {
	return o
}

func (o TopologySelectorTermArrayOutput) ToTopologySelectorTermArrayOutputWithContext(ctx context.Context) TopologySelectorTermArrayOutput {
	return o
}

func (o TopologySelectorTermArrayOutput) Index(i pulumi.IntInput) TopologySelectorTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySelectorTerm {
		return vs[0].([]TopologySelectorTerm)[vs[1].(int)]
	}).(TopologySelectorTermOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTermPatch struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []TopologySelectorLabelRequirementPatch `pulumi:"matchLabelExpressions"`
}

// TopologySelectorTermPatchInput is an input type that accepts TopologySelectorTermPatchArgs and TopologySelectorTermPatchOutput values.
// You can construct a concrete instance of `TopologySelectorTermPatchInput` via:
//
//	TopologySelectorTermPatchArgs{...}
type TopologySelectorTermPatchInput interface {
	pulumi.Input

	ToTopologySelectorTermPatchOutput() TopologySelectorTermPatchOutput
	ToTopologySelectorTermPatchOutputWithContext(context.Context) TopologySelectorTermPatchOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTermPatchArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions TopologySelectorLabelRequirementPatchArrayInput `pulumi:"matchLabelExpressions"`
}

func (TopologySelectorTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorTermPatch)(nil)).Elem()
}

func (i TopologySelectorTermPatchArgs) ToTopologySelectorTermPatchOutput() TopologySelectorTermPatchOutput {
	return i.ToTopologySelectorTermPatchOutputWithContext(context.Background())
}

func (i TopologySelectorTermPatchArgs) ToTopologySelectorTermPatchOutputWithContext(ctx context.Context) TopologySelectorTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorTermPatchOutput)
}

// TopologySelectorTermPatchArrayInput is an input type that accepts TopologySelectorTermPatchArray and TopologySelectorTermPatchArrayOutput values.
// You can construct a concrete instance of `TopologySelectorTermPatchArrayInput` via:
//
//	TopologySelectorTermPatchArray{ TopologySelectorTermPatchArgs{...} }
type TopologySelectorTermPatchArrayInput interface {
	pulumi.Input

	ToTopologySelectorTermPatchArrayOutput() TopologySelectorTermPatchArrayOutput
	ToTopologySelectorTermPatchArrayOutputWithContext(context.Context) TopologySelectorTermPatchArrayOutput
}

type TopologySelectorTermPatchArray []TopologySelectorTermPatchInput

func (TopologySelectorTermPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorTermPatch)(nil)).Elem()
}

func (i TopologySelectorTermPatchArray) ToTopologySelectorTermPatchArrayOutput() TopologySelectorTermPatchArrayOutput {
	return i.ToTopologySelectorTermPatchArrayOutputWithContext(context.Background())
}

func (i TopologySelectorTermPatchArray) ToTopologySelectorTermPatchArrayOutputWithContext(ctx context.Context) TopologySelectorTermPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySelectorTermPatchArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type TopologySelectorTermPatchOutput struct{ *pulumi.OutputState }

func (TopologySelectorTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySelectorTermPatch)(nil)).Elem()
}

func (o TopologySelectorTermPatchOutput) ToTopologySelectorTermPatchOutput() TopologySelectorTermPatchOutput {
	return o
}

func (o TopologySelectorTermPatchOutput) ToTopologySelectorTermPatchOutputWithContext(ctx context.Context) TopologySelectorTermPatchOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o TopologySelectorTermPatchOutput) MatchLabelExpressions() TopologySelectorLabelRequirementPatchArrayOutput {
	return o.ApplyT(func(v TopologySelectorTermPatch) []TopologySelectorLabelRequirementPatch {
		return v.MatchLabelExpressions
	}).(TopologySelectorLabelRequirementPatchArrayOutput)
}

type TopologySelectorTermPatchArrayOutput struct{ *pulumi.OutputState }

func (TopologySelectorTermPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySelectorTermPatch)(nil)).Elem()
}

func (o TopologySelectorTermPatchArrayOutput) ToTopologySelectorTermPatchArrayOutput() TopologySelectorTermPatchArrayOutput {
	return o
}

func (o TopologySelectorTermPatchArrayOutput) ToTopologySelectorTermPatchArrayOutputWithContext(ctx context.Context) TopologySelectorTermPatchArrayOutput {
	return o
}

func (o TopologySelectorTermPatchArrayOutput) Index(i pulumi.IntInput) TopologySelectorTermPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySelectorTermPatch {
		return vs[0].([]TopologySelectorTermPatch)[vs[1].(int)]
	}).(TopologySelectorTermPatchOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraint struct {
	// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
	LabelSelector *metav1.LabelSelector `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable string `pulumi:"whenUnsatisfiable"`
}

// TopologySpreadConstraintInput is an input type that accepts TopologySpreadConstraintArgs and TopologySpreadConstraintOutput values.
// You can construct a concrete instance of `TopologySpreadConstraintInput` via:
//
//	TopologySpreadConstraintArgs{...}
type TopologySpreadConstraintInput interface {
	pulumi.Input

	ToTopologySpreadConstraintOutput() TopologySpreadConstraintOutput
	ToTopologySpreadConstraintOutputWithContext(context.Context) TopologySpreadConstraintOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraintArgs struct {
	// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
	LabelSelector metav1.LabelSelectorPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable pulumi.StringInput `pulumi:"whenUnsatisfiable"`
}

func (TopologySpreadConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySpreadConstraint)(nil)).Elem()
}

func (i TopologySpreadConstraintArgs) ToTopologySpreadConstraintOutput() TopologySpreadConstraintOutput {
	return i.ToTopologySpreadConstraintOutputWithContext(context.Background())
}

func (i TopologySpreadConstraintArgs) ToTopologySpreadConstraintOutputWithContext(ctx context.Context) TopologySpreadConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySpreadConstraintOutput)
}

// TopologySpreadConstraintArrayInput is an input type that accepts TopologySpreadConstraintArray and TopologySpreadConstraintArrayOutput values.
// You can construct a concrete instance of `TopologySpreadConstraintArrayInput` via:
//
//	TopologySpreadConstraintArray{ TopologySpreadConstraintArgs{...} }
type TopologySpreadConstraintArrayInput interface {
	pulumi.Input

	ToTopologySpreadConstraintArrayOutput() TopologySpreadConstraintArrayOutput
	ToTopologySpreadConstraintArrayOutputWithContext(context.Context) TopologySpreadConstraintArrayOutput
}

type TopologySpreadConstraintArray []TopologySpreadConstraintInput

func (TopologySpreadConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySpreadConstraint)(nil)).Elem()
}

func (i TopologySpreadConstraintArray) ToTopologySpreadConstraintArrayOutput() TopologySpreadConstraintArrayOutput {
	return i.ToTopologySpreadConstraintArrayOutputWithContext(context.Background())
}

func (i TopologySpreadConstraintArray) ToTopologySpreadConstraintArrayOutputWithContext(ctx context.Context) TopologySpreadConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySpreadConstraintArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraintOutput struct{ *pulumi.OutputState }

func (TopologySpreadConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySpreadConstraint)(nil)).Elem()
}

func (o TopologySpreadConstraintOutput) ToTopologySpreadConstraintOutput() TopologySpreadConstraintOutput {
	return o
}

func (o TopologySpreadConstraintOutput) ToTopologySpreadConstraintOutputWithContext(ctx context.Context) TopologySpreadConstraintOutput {
	return o
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
func (o TopologySpreadConstraintOutput) LabelSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) *metav1.LabelSelector { return v.LabelSelector }).(metav1.LabelSelectorPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (o TopologySpreadConstraintOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) []string { return v.MatchLabelKeys }).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (o TopologySpreadConstraintOutput) MaxSkew() pulumi.IntOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) int { return v.MaxSkew }).(pulumi.IntOutput)
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//
// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (o TopologySpreadConstraintOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o TopologySpreadConstraintOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) *string { return v.NodeAffinityPolicy }).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o TopologySpreadConstraintOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) *string { return v.NodeTaintsPolicy }).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (o TopologySpreadConstraintOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) string { return v.TopologyKey }).(pulumi.StringOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
//
//	but giving higher precedence to topologies that would help reduce the
//	skew.
//
// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (o TopologySpreadConstraintOutput) WhenUnsatisfiable() pulumi.StringOutput {
	return o.ApplyT(func(v TopologySpreadConstraint) string { return v.WhenUnsatisfiable }).(pulumi.StringOutput)
}

type TopologySpreadConstraintArrayOutput struct{ *pulumi.OutputState }

func (TopologySpreadConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySpreadConstraint)(nil)).Elem()
}

func (o TopologySpreadConstraintArrayOutput) ToTopologySpreadConstraintArrayOutput() TopologySpreadConstraintArrayOutput {
	return o
}

func (o TopologySpreadConstraintArrayOutput) ToTopologySpreadConstraintArrayOutputWithContext(ctx context.Context) TopologySpreadConstraintArrayOutput {
	return o
}

func (o TopologySpreadConstraintArrayOutput) Index(i pulumi.IntInput) TopologySpreadConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySpreadConstraint {
		return vs[0].([]TopologySpreadConstraint)[vs[1].(int)]
	}).(TopologySpreadConstraintOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraintPatch struct {
	// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
	LabelSelector *metav1.LabelSelectorPatch `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// TopologySpreadConstraintPatchInput is an input type that accepts TopologySpreadConstraintPatchArgs and TopologySpreadConstraintPatchOutput values.
// You can construct a concrete instance of `TopologySpreadConstraintPatchInput` via:
//
//	TopologySpreadConstraintPatchArgs{...}
type TopologySpreadConstraintPatchInput interface {
	pulumi.Input

	ToTopologySpreadConstraintPatchOutput() TopologySpreadConstraintPatchOutput
	ToTopologySpreadConstraintPatchOutputWithContext(context.Context) TopologySpreadConstraintPatchOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraintPatchArgs struct {
	// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
	LabelSelector metav1.LabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (TopologySpreadConstraintPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySpreadConstraintPatch)(nil)).Elem()
}

func (i TopologySpreadConstraintPatchArgs) ToTopologySpreadConstraintPatchOutput() TopologySpreadConstraintPatchOutput {
	return i.ToTopologySpreadConstraintPatchOutputWithContext(context.Background())
}

func (i TopologySpreadConstraintPatchArgs) ToTopologySpreadConstraintPatchOutputWithContext(ctx context.Context) TopologySpreadConstraintPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySpreadConstraintPatchOutput)
}

// TopologySpreadConstraintPatchArrayInput is an input type that accepts TopologySpreadConstraintPatchArray and TopologySpreadConstraintPatchArrayOutput values.
// You can construct a concrete instance of `TopologySpreadConstraintPatchArrayInput` via:
//
//	TopologySpreadConstraintPatchArray{ TopologySpreadConstraintPatchArgs{...} }
type TopologySpreadConstraintPatchArrayInput interface {
	pulumi.Input

	ToTopologySpreadConstraintPatchArrayOutput() TopologySpreadConstraintPatchArrayOutput
	ToTopologySpreadConstraintPatchArrayOutputWithContext(context.Context) TopologySpreadConstraintPatchArrayOutput
}

type TopologySpreadConstraintPatchArray []TopologySpreadConstraintPatchInput

func (TopologySpreadConstraintPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySpreadConstraintPatch)(nil)).Elem()
}

func (i TopologySpreadConstraintPatchArray) ToTopologySpreadConstraintPatchArrayOutput() TopologySpreadConstraintPatchArrayOutput {
	return i.ToTopologySpreadConstraintPatchArrayOutputWithContext(context.Background())
}

func (i TopologySpreadConstraintPatchArray) ToTopologySpreadConstraintPatchArrayOutputWithContext(ctx context.Context) TopologySpreadConstraintPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologySpreadConstraintPatchArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type TopologySpreadConstraintPatchOutput struct{ *pulumi.OutputState }

func (TopologySpreadConstraintPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologySpreadConstraintPatch)(nil)).Elem()
}

func (o TopologySpreadConstraintPatchOutput) ToTopologySpreadConstraintPatchOutput() TopologySpreadConstraintPatchOutput {
	return o
}

func (o TopologySpreadConstraintPatchOutput) ToTopologySpreadConstraintPatchOutputWithContext(ctx context.Context) TopologySpreadConstraintPatchOutput {
	return o
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
func (o TopologySpreadConstraintPatchOutput) LabelSelector() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *metav1.LabelSelectorPatch { return v.LabelSelector }).(metav1.LabelSelectorPatchPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (o TopologySpreadConstraintPatchOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) []string { return v.MatchLabelKeys }).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (o TopologySpreadConstraintPatchOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//
// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (o TopologySpreadConstraintPatchOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o TopologySpreadConstraintPatchOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *string { return v.NodeAffinityPolicy }).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o TopologySpreadConstraintPatchOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *string { return v.NodeTaintsPolicy }).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (o TopologySpreadConstraintPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
//
//	but giving higher precedence to topologies that would help reduce the
//	skew.
//
// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (o TopologySpreadConstraintPatchOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopologySpreadConstraintPatch) *string { return v.WhenUnsatisfiable }).(pulumi.StringPtrOutput)
}

type TopologySpreadConstraintPatchArrayOutput struct{ *pulumi.OutputState }

func (TopologySpreadConstraintPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologySpreadConstraintPatch)(nil)).Elem()
}

func (o TopologySpreadConstraintPatchArrayOutput) ToTopologySpreadConstraintPatchArrayOutput() TopologySpreadConstraintPatchArrayOutput {
	return o
}

func (o TopologySpreadConstraintPatchArrayOutput) ToTopologySpreadConstraintPatchArrayOutputWithContext(ctx context.Context) TopologySpreadConstraintPatchArrayOutput {
	return o
}

func (o TopologySpreadConstraintPatchArrayOutput) Index(i pulumi.IntInput) TopologySpreadConstraintPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologySpreadConstraintPatch {
		return vs[0].([]TopologySpreadConstraintPatch)[vs[1].(int)]
	}).(TopologySpreadConstraintPatchOutput)
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// TypedLocalObjectReferenceInput is an input type that accepts TypedLocalObjectReferenceArgs and TypedLocalObjectReferenceOutput values.
// You can construct a concrete instance of `TypedLocalObjectReferenceInput` via:
//
//	TypedLocalObjectReferenceArgs{...}
type TypedLocalObjectReferenceInput interface {
	pulumi.Input

	ToTypedLocalObjectReferenceOutput() TypedLocalObjectReferenceOutput
	ToTypedLocalObjectReferenceOutputWithContext(context.Context) TypedLocalObjectReferenceOutput
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (TypedLocalObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedLocalObjectReference)(nil)).Elem()
}

func (i TypedLocalObjectReferenceArgs) ToTypedLocalObjectReferenceOutput() TypedLocalObjectReferenceOutput {
	return i.ToTypedLocalObjectReferenceOutputWithContext(context.Background())
}

func (i TypedLocalObjectReferenceArgs) ToTypedLocalObjectReferenceOutputWithContext(ctx context.Context) TypedLocalObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferenceOutput)
}

func (i TypedLocalObjectReferenceArgs) ToTypedLocalObjectReferencePtrOutput() TypedLocalObjectReferencePtrOutput {
	return i.ToTypedLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i TypedLocalObjectReferenceArgs) ToTypedLocalObjectReferencePtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferenceOutput).ToTypedLocalObjectReferencePtrOutputWithContext(ctx)
}

// TypedLocalObjectReferencePtrInput is an input type that accepts TypedLocalObjectReferenceArgs, TypedLocalObjectReferencePtr and TypedLocalObjectReferencePtrOutput values.
// You can construct a concrete instance of `TypedLocalObjectReferencePtrInput` via:
//
//	        TypedLocalObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type TypedLocalObjectReferencePtrInput interface {
	pulumi.Input

	ToTypedLocalObjectReferencePtrOutput() TypedLocalObjectReferencePtrOutput
	ToTypedLocalObjectReferencePtrOutputWithContext(context.Context) TypedLocalObjectReferencePtrOutput
}

type typedLocalObjectReferencePtrType TypedLocalObjectReferenceArgs

func TypedLocalObjectReferencePtr(v *TypedLocalObjectReferenceArgs) TypedLocalObjectReferencePtrInput {
	return (*typedLocalObjectReferencePtrType)(v)
}

func (*typedLocalObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedLocalObjectReference)(nil)).Elem()
}

func (i *typedLocalObjectReferencePtrType) ToTypedLocalObjectReferencePtrOutput() TypedLocalObjectReferencePtrOutput {
	return i.ToTypedLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i *typedLocalObjectReferencePtrType) ToTypedLocalObjectReferencePtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferencePtrOutput)
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReferenceOutput struct{ *pulumi.OutputState }

func (TypedLocalObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedLocalObjectReference)(nil)).Elem()
}

func (o TypedLocalObjectReferenceOutput) ToTypedLocalObjectReferenceOutput() TypedLocalObjectReferenceOutput {
	return o
}

func (o TypedLocalObjectReferenceOutput) ToTypedLocalObjectReferenceOutputWithContext(ctx context.Context) TypedLocalObjectReferenceOutput {
	return o
}

func (o TypedLocalObjectReferenceOutput) ToTypedLocalObjectReferencePtrOutput() TypedLocalObjectReferencePtrOutput {
	return o.ToTypedLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (o TypedLocalObjectReferenceOutput) ToTypedLocalObjectReferencePtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypedLocalObjectReference) *TypedLocalObjectReference {
		return &v
	}).(TypedLocalObjectReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedLocalObjectReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedLocalObjectReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedLocalObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TypedLocalObjectReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o TypedLocalObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TypedLocalObjectReference) string { return v.Name }).(pulumi.StringOutput)
}

type TypedLocalObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (TypedLocalObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedLocalObjectReference)(nil)).Elem()
}

func (o TypedLocalObjectReferencePtrOutput) ToTypedLocalObjectReferencePtrOutput() TypedLocalObjectReferencePtrOutput {
	return o
}

func (o TypedLocalObjectReferencePtrOutput) ToTypedLocalObjectReferencePtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePtrOutput {
	return o
}

func (o TypedLocalObjectReferencePtrOutput) Elem() TypedLocalObjectReferenceOutput {
	return o.ApplyT(func(v *TypedLocalObjectReference) TypedLocalObjectReference {
		if v != nil {
			return *v
		}
		var ret TypedLocalObjectReference
		return ret
	}).(TypedLocalObjectReferenceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedLocalObjectReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedLocalObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedLocalObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReferencePatch struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// TypedLocalObjectReferencePatchInput is an input type that accepts TypedLocalObjectReferencePatchArgs and TypedLocalObjectReferencePatchOutput values.
// You can construct a concrete instance of `TypedLocalObjectReferencePatchInput` via:
//
//	TypedLocalObjectReferencePatchArgs{...}
type TypedLocalObjectReferencePatchInput interface {
	pulumi.Input

	ToTypedLocalObjectReferencePatchOutput() TypedLocalObjectReferencePatchOutput
	ToTypedLocalObjectReferencePatchOutputWithContext(context.Context) TypedLocalObjectReferencePatchOutput
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TypedLocalObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedLocalObjectReferencePatch)(nil)).Elem()
}

func (i TypedLocalObjectReferencePatchArgs) ToTypedLocalObjectReferencePatchOutput() TypedLocalObjectReferencePatchOutput {
	return i.ToTypedLocalObjectReferencePatchOutputWithContext(context.Background())
}

func (i TypedLocalObjectReferencePatchArgs) ToTypedLocalObjectReferencePatchOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferencePatchOutput)
}

func (i TypedLocalObjectReferencePatchArgs) ToTypedLocalObjectReferencePatchPtrOutput() TypedLocalObjectReferencePatchPtrOutput {
	return i.ToTypedLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i TypedLocalObjectReferencePatchArgs) ToTypedLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferencePatchOutput).ToTypedLocalObjectReferencePatchPtrOutputWithContext(ctx)
}

// TypedLocalObjectReferencePatchPtrInput is an input type that accepts TypedLocalObjectReferencePatchArgs, TypedLocalObjectReferencePatchPtr and TypedLocalObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `TypedLocalObjectReferencePatchPtrInput` via:
//
//	        TypedLocalObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type TypedLocalObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToTypedLocalObjectReferencePatchPtrOutput() TypedLocalObjectReferencePatchPtrOutput
	ToTypedLocalObjectReferencePatchPtrOutputWithContext(context.Context) TypedLocalObjectReferencePatchPtrOutput
}

type typedLocalObjectReferencePatchPtrType TypedLocalObjectReferencePatchArgs

func TypedLocalObjectReferencePatchPtr(v *TypedLocalObjectReferencePatchArgs) TypedLocalObjectReferencePatchPtrInput {
	return (*typedLocalObjectReferencePatchPtrType)(v)
}

func (*typedLocalObjectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedLocalObjectReferencePatch)(nil)).Elem()
}

func (i *typedLocalObjectReferencePatchPtrType) ToTypedLocalObjectReferencePatchPtrOutput() TypedLocalObjectReferencePatchPtrOutput {
	return i.ToTypedLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *typedLocalObjectReferencePatchPtrType) ToTypedLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedLocalObjectReferencePatchPtrOutput)
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (TypedLocalObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedLocalObjectReferencePatch)(nil)).Elem()
}

func (o TypedLocalObjectReferencePatchOutput) ToTypedLocalObjectReferencePatchOutput() TypedLocalObjectReferencePatchOutput {
	return o
}

func (o TypedLocalObjectReferencePatchOutput) ToTypedLocalObjectReferencePatchOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchOutput {
	return o
}

func (o TypedLocalObjectReferencePatchOutput) ToTypedLocalObjectReferencePatchPtrOutput() TypedLocalObjectReferencePatchPtrOutput {
	return o.ToTypedLocalObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o TypedLocalObjectReferencePatchOutput) ToTypedLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypedLocalObjectReferencePatch) *TypedLocalObjectReferencePatch {
		return &v
	}).(TypedLocalObjectReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedLocalObjectReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedLocalObjectReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedLocalObjectReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedLocalObjectReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedLocalObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedLocalObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TypedLocalObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (TypedLocalObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedLocalObjectReferencePatch)(nil)).Elem()
}

func (o TypedLocalObjectReferencePatchPtrOutput) ToTypedLocalObjectReferencePatchPtrOutput() TypedLocalObjectReferencePatchPtrOutput {
	return o
}

func (o TypedLocalObjectReferencePatchPtrOutput) ToTypedLocalObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedLocalObjectReferencePatchPtrOutput {
	return o
}

func (o TypedLocalObjectReferencePatchPtrOutput) Elem() TypedLocalObjectReferencePatchOutput {
	return o.ApplyT(func(v *TypedLocalObjectReferencePatch) TypedLocalObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret TypedLocalObjectReferencePatch
		return ret
	}).(TypedLocalObjectReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedLocalObjectReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedLocalObjectReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedLocalObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedLocalObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type TypedObjectReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// TypedObjectReferenceInput is an input type that accepts TypedObjectReferenceArgs and TypedObjectReferenceOutput values.
// You can construct a concrete instance of `TypedObjectReferenceInput` via:
//
//	TypedObjectReferenceArgs{...}
type TypedObjectReferenceInput interface {
	pulumi.Input

	ToTypedObjectReferenceOutput() TypedObjectReferenceOutput
	ToTypedObjectReferenceOutputWithContext(context.Context) TypedObjectReferenceOutput
}

type TypedObjectReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TypedObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedObjectReference)(nil)).Elem()
}

func (i TypedObjectReferenceArgs) ToTypedObjectReferenceOutput() TypedObjectReferenceOutput {
	return i.ToTypedObjectReferenceOutputWithContext(context.Background())
}

func (i TypedObjectReferenceArgs) ToTypedObjectReferenceOutputWithContext(ctx context.Context) TypedObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferenceOutput)
}

func (i TypedObjectReferenceArgs) ToTypedObjectReferencePtrOutput() TypedObjectReferencePtrOutput {
	return i.ToTypedObjectReferencePtrOutputWithContext(context.Background())
}

func (i TypedObjectReferenceArgs) ToTypedObjectReferencePtrOutputWithContext(ctx context.Context) TypedObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferenceOutput).ToTypedObjectReferencePtrOutputWithContext(ctx)
}

// TypedObjectReferencePtrInput is an input type that accepts TypedObjectReferenceArgs, TypedObjectReferencePtr and TypedObjectReferencePtrOutput values.
// You can construct a concrete instance of `TypedObjectReferencePtrInput` via:
//
//	        TypedObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type TypedObjectReferencePtrInput interface {
	pulumi.Input

	ToTypedObjectReferencePtrOutput() TypedObjectReferencePtrOutput
	ToTypedObjectReferencePtrOutputWithContext(context.Context) TypedObjectReferencePtrOutput
}

type typedObjectReferencePtrType TypedObjectReferenceArgs

func TypedObjectReferencePtr(v *TypedObjectReferenceArgs) TypedObjectReferencePtrInput {
	return (*typedObjectReferencePtrType)(v)
}

func (*typedObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedObjectReference)(nil)).Elem()
}

func (i *typedObjectReferencePtrType) ToTypedObjectReferencePtrOutput() TypedObjectReferencePtrOutput {
	return i.ToTypedObjectReferencePtrOutputWithContext(context.Background())
}

func (i *typedObjectReferencePtrType) ToTypedObjectReferencePtrOutputWithContext(ctx context.Context) TypedObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferencePtrOutput)
}

type TypedObjectReferenceOutput struct{ *pulumi.OutputState }

func (TypedObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedObjectReference)(nil)).Elem()
}

func (o TypedObjectReferenceOutput) ToTypedObjectReferenceOutput() TypedObjectReferenceOutput {
	return o
}

func (o TypedObjectReferenceOutput) ToTypedObjectReferenceOutputWithContext(ctx context.Context) TypedObjectReferenceOutput {
	return o
}

func (o TypedObjectReferenceOutput) ToTypedObjectReferencePtrOutput() TypedObjectReferencePtrOutput {
	return o.ToTypedObjectReferencePtrOutputWithContext(context.Background())
}

func (o TypedObjectReferenceOutput) ToTypedObjectReferencePtrOutputWithContext(ctx context.Context) TypedObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypedObjectReference) *TypedObjectReference {
		return &v
	}).(TypedObjectReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedObjectReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedObjectReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TypedObjectReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o TypedObjectReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TypedObjectReference) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o TypedObjectReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TypedObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (TypedObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedObjectReference)(nil)).Elem()
}

func (o TypedObjectReferencePtrOutput) ToTypedObjectReferencePtrOutput() TypedObjectReferencePtrOutput {
	return o
}

func (o TypedObjectReferencePtrOutput) ToTypedObjectReferencePtrOutputWithContext(ctx context.Context) TypedObjectReferencePtrOutput {
	return o
}

func (o TypedObjectReferencePtrOutput) Elem() TypedObjectReferenceOutput {
	return o.ApplyT(func(v *TypedObjectReference) TypedObjectReference {
		if v != nil {
			return *v
		}
		var ret TypedObjectReference
		return ret
	}).(TypedObjectReferenceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedObjectReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedObjectReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o TypedObjectReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type TypedObjectReferencePatch struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// TypedObjectReferencePatchInput is an input type that accepts TypedObjectReferencePatchArgs and TypedObjectReferencePatchOutput values.
// You can construct a concrete instance of `TypedObjectReferencePatchInput` via:
//
//	TypedObjectReferencePatchArgs{...}
type TypedObjectReferencePatchInput interface {
	pulumi.Input

	ToTypedObjectReferencePatchOutput() TypedObjectReferencePatchOutput
	ToTypedObjectReferencePatchOutputWithContext(context.Context) TypedObjectReferencePatchOutput
}

type TypedObjectReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TypedObjectReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedObjectReferencePatch)(nil)).Elem()
}

func (i TypedObjectReferencePatchArgs) ToTypedObjectReferencePatchOutput() TypedObjectReferencePatchOutput {
	return i.ToTypedObjectReferencePatchOutputWithContext(context.Background())
}

func (i TypedObjectReferencePatchArgs) ToTypedObjectReferencePatchOutputWithContext(ctx context.Context) TypedObjectReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferencePatchOutput)
}

func (i TypedObjectReferencePatchArgs) ToTypedObjectReferencePatchPtrOutput() TypedObjectReferencePatchPtrOutput {
	return i.ToTypedObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i TypedObjectReferencePatchArgs) ToTypedObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferencePatchOutput).ToTypedObjectReferencePatchPtrOutputWithContext(ctx)
}

// TypedObjectReferencePatchPtrInput is an input type that accepts TypedObjectReferencePatchArgs, TypedObjectReferencePatchPtr and TypedObjectReferencePatchPtrOutput values.
// You can construct a concrete instance of `TypedObjectReferencePatchPtrInput` via:
//
//	        TypedObjectReferencePatchArgs{...}
//
//	or:
//
//	        nil
type TypedObjectReferencePatchPtrInput interface {
	pulumi.Input

	ToTypedObjectReferencePatchPtrOutput() TypedObjectReferencePatchPtrOutput
	ToTypedObjectReferencePatchPtrOutputWithContext(context.Context) TypedObjectReferencePatchPtrOutput
}

type typedObjectReferencePatchPtrType TypedObjectReferencePatchArgs

func TypedObjectReferencePatchPtr(v *TypedObjectReferencePatchArgs) TypedObjectReferencePatchPtrInput {
	return (*typedObjectReferencePatchPtrType)(v)
}

func (*typedObjectReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedObjectReferencePatch)(nil)).Elem()
}

func (i *typedObjectReferencePatchPtrType) ToTypedObjectReferencePatchPtrOutput() TypedObjectReferencePatchPtrOutput {
	return i.ToTypedObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (i *typedObjectReferencePatchPtrType) ToTypedObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedObjectReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypedObjectReferencePatchPtrOutput)
}

type TypedObjectReferencePatchOutput struct{ *pulumi.OutputState }

func (TypedObjectReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypedObjectReferencePatch)(nil)).Elem()
}

func (o TypedObjectReferencePatchOutput) ToTypedObjectReferencePatchOutput() TypedObjectReferencePatchOutput {
	return o
}

func (o TypedObjectReferencePatchOutput) ToTypedObjectReferencePatchOutputWithContext(ctx context.Context) TypedObjectReferencePatchOutput {
	return o
}

func (o TypedObjectReferencePatchOutput) ToTypedObjectReferencePatchPtrOutput() TypedObjectReferencePatchPtrOutput {
	return o.ToTypedObjectReferencePatchPtrOutputWithContext(context.Background())
}

func (o TypedObjectReferencePatchOutput) ToTypedObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedObjectReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypedObjectReferencePatch) *TypedObjectReferencePatch {
		return &v
	}).(TypedObjectReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedObjectReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedObjectReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedObjectReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o TypedObjectReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypedObjectReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TypedObjectReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (TypedObjectReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypedObjectReferencePatch)(nil)).Elem()
}

func (o TypedObjectReferencePatchPtrOutput) ToTypedObjectReferencePatchPtrOutput() TypedObjectReferencePatchPtrOutput {
	return o
}

func (o TypedObjectReferencePatchPtrOutput) ToTypedObjectReferencePatchPtrOutputWithContext(ctx context.Context) TypedObjectReferencePatchPtrOutput {
	return o
}

func (o TypedObjectReferencePatchPtrOutput) Elem() TypedObjectReferencePatchOutput {
	return o.ApplyT(func(v *TypedObjectReferencePatch) TypedObjectReferencePatch {
		if v != nil {
			return *v
		}
		var ret TypedObjectReferencePatch
		return ret
	}).(TypedObjectReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o TypedObjectReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o TypedObjectReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o TypedObjectReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o TypedObjectReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypedObjectReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type Volume struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSource `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSource `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFileVolumeSource `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSVolumeSource `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *CinderVolumeSource `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap *ConfigMapVolumeSource `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi *CSIVolumeSource `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI *DownwardAPIVolumeSource `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir *EmptyDirVolumeSource `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//
	// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
	//    tracking are needed,
	// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
	//    a PersistentVolumeClaim (see EphemeralVolumeSource for more
	//    information on the connection between this volume type
	//    and PersistentVolumeClaim).
	//
	// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//
	// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//
	// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral *EphemeralVolumeSource `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *FCVolumeSource `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *FlexVolumeSource `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker *FlockerVolumeSource `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSource `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *GitRepoVolumeSource `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *GlusterfsVolumeSource `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath *HostPathVolumeSource `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi *ISCSIVolumeSource `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *NFSVolumeSource `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSource `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSource `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *PortworxVolumeSource `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected *ProjectedVolumeSource `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSource `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RBDVolumeSource `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *ScaleIOVolumeSource `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *SecretVolumeSource `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos *StorageOSVolumeSource `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSource `pulumi:"vsphereVolume"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type VolumeArgs struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AWSElasticBlockStoreVolumeSourcePtrInput `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AzureDiskVolumeSourcePtrInput `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AzureFileVolumeSourcePtrInput `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs CephFSVolumeSourcePtrInput `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder CinderVolumeSourcePtrInput `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap ConfigMapVolumeSourcePtrInput `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi CSIVolumeSourcePtrInput `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI DownwardAPIVolumeSourcePtrInput `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir EmptyDirVolumeSourcePtrInput `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//
	// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
	//    tracking are needed,
	// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
	//    a PersistentVolumeClaim (see EphemeralVolumeSource for more
	//    information on the connection between this volume type
	//    and PersistentVolumeClaim).
	//
	// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//
	// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//
	// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral EphemeralVolumeSourcePtrInput `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc FCVolumeSourcePtrInput `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume FlexVolumeSourcePtrInput `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker FlockerVolumeSourcePtrInput `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk GCEPersistentDiskVolumeSourcePtrInput `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo GitRepoVolumeSourcePtrInput `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs GlusterfsVolumeSourcePtrInput `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath HostPathVolumeSourcePtrInput `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi ISCSIVolumeSourcePtrInput `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs NFSVolumeSourcePtrInput `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim PersistentVolumeClaimVolumeSourcePtrInput `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk PhotonPersistentDiskVolumeSourcePtrInput `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume PortworxVolumeSourcePtrInput `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected ProjectedVolumeSourcePtrInput `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte QuobyteVolumeSourcePtrInput `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd RBDVolumeSourcePtrInput `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO ScaleIOVolumeSourcePtrInput `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret SecretVolumeSourcePtrInput `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos StorageOSVolumeSourcePtrInput `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume VsphereVirtualDiskVolumeSourcePtrInput `pulumi:"vsphereVolume"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o VolumeOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *AWSElasticBlockStoreVolumeSource { return v.AwsElasticBlockStore }).(AWSElasticBlockStoreVolumeSourcePtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o VolumeOutput) AzureDisk() AzureDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *AzureDiskVolumeSource { return v.AzureDisk }).(AzureDiskVolumeSourcePtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o VolumeOutput) AzureFile() AzureFileVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *AzureFileVolumeSource { return v.AzureFile }).(AzureFileVolumeSourcePtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o VolumeOutput) Cephfs() CephFSVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *CephFSVolumeSource { return v.Cephfs }).(CephFSVolumeSourcePtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o VolumeOutput) Cinder() CinderVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *CinderVolumeSource { return v.Cinder }).(CinderVolumeSourcePtrOutput)
}

// configMap represents a configMap that should populate this volume
func (o VolumeOutput) ConfigMap() ConfigMapVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ConfigMapVolumeSource { return v.ConfigMap }).(ConfigMapVolumeSourcePtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
func (o VolumeOutput) Csi() CSIVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *CSIVolumeSource { return v.Csi }).(CSIVolumeSourcePtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
func (o VolumeOutput) DownwardAPI() DownwardAPIVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *DownwardAPIVolumeSource { return v.DownwardAPI }).(DownwardAPIVolumeSourcePtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o VolumeOutput) EmptyDir() EmptyDirVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *EmptyDirVolumeSource { return v.EmptyDir }).(EmptyDirVolumeSourcePtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//
// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
func (o VolumeOutput) Ephemeral() EphemeralVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *EphemeralVolumeSource { return v.Ephemeral }).(EphemeralVolumeSourcePtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o VolumeOutput) Fc() FCVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *FCVolumeSource { return v.Fc }).(FCVolumeSourcePtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o VolumeOutput) FlexVolume() FlexVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *FlexVolumeSource { return v.FlexVolume }).(FlexVolumeSourcePtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
func (o VolumeOutput) Flocker() FlockerVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *FlockerVolumeSource { return v.Flocker }).(FlockerVolumeSourcePtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o VolumeOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *GCEPersistentDiskVolumeSource { return v.GcePersistentDisk }).(GCEPersistentDiskVolumeSourcePtrOutput)
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
func (o VolumeOutput) GitRepo() GitRepoVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *GitRepoVolumeSource { return v.GitRepo }).(GitRepoVolumeSourcePtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o VolumeOutput) Glusterfs() GlusterfsVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *GlusterfsVolumeSource { return v.Glusterfs }).(GlusterfsVolumeSourcePtrOutput)
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o VolumeOutput) HostPath() HostPathVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *HostPathVolumeSource { return v.HostPath }).(HostPathVolumeSourcePtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
func (o VolumeOutput) Iscsi() ISCSIVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ISCSIVolumeSource { return v.Iscsi }).(ISCSIVolumeSourcePtrOutput)
}

// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Volume) string { return v.Name }).(pulumi.StringOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o VolumeOutput) Nfs() NFSVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *NFSVolumeSource { return v.Nfs }).(NFSVolumeSourcePtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o VolumeOutput) PersistentVolumeClaim() PersistentVolumeClaimVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *PersistentVolumeClaimVolumeSource { return v.PersistentVolumeClaim }).(PersistentVolumeClaimVolumeSourcePtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o VolumeOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *PhotonPersistentDiskVolumeSource { return v.PhotonPersistentDisk }).(PhotonPersistentDiskVolumeSourcePtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o VolumeOutput) PortworxVolume() PortworxVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *PortworxVolumeSource { return v.PortworxVolume }).(PortworxVolumeSourcePtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
func (o VolumeOutput) Projected() ProjectedVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ProjectedVolumeSource { return v.Projected }).(ProjectedVolumeSourcePtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o VolumeOutput) Quobyte() QuobyteVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *QuobyteVolumeSource { return v.Quobyte }).(QuobyteVolumeSourcePtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o VolumeOutput) Rbd() RBDVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *RBDVolumeSource { return v.Rbd }).(RBDVolumeSourcePtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o VolumeOutput) ScaleIO() ScaleIOVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ScaleIOVolumeSource { return v.ScaleIO }).(ScaleIOVolumeSourcePtrOutput)
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o VolumeOutput) Secret() SecretVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *SecretVolumeSource { return v.Secret }).(SecretVolumeSourcePtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
func (o VolumeOutput) Storageos() StorageOSVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *StorageOSVolumeSource { return v.Storageos }).(StorageOSVolumeSourcePtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o VolumeOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *VsphereVirtualDiskVolumeSource { return v.VsphereVolume }).(VsphereVirtualDiskVolumeSourcePtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDevice struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name string `pulumi:"name"`
}

// VolumeDeviceInput is an input type that accepts VolumeDeviceArgs and VolumeDeviceOutput values.
// You can construct a concrete instance of `VolumeDeviceInput` via:
//
//	VolumeDeviceArgs{...}
type VolumeDeviceInput interface {
	pulumi.Input

	ToVolumeDeviceOutput() VolumeDeviceOutput
	ToVolumeDeviceOutputWithContext(context.Context) VolumeDeviceOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDeviceArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringInput `pulumi:"name"`
}

func (VolumeDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDevice)(nil)).Elem()
}

func (i VolumeDeviceArgs) ToVolumeDeviceOutput() VolumeDeviceOutput {
	return i.ToVolumeDeviceOutputWithContext(context.Background())
}

func (i VolumeDeviceArgs) ToVolumeDeviceOutputWithContext(ctx context.Context) VolumeDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDeviceOutput)
}

// VolumeDeviceArrayInput is an input type that accepts VolumeDeviceArray and VolumeDeviceArrayOutput values.
// You can construct a concrete instance of `VolumeDeviceArrayInput` via:
//
//	VolumeDeviceArray{ VolumeDeviceArgs{...} }
type VolumeDeviceArrayInput interface {
	pulumi.Input

	ToVolumeDeviceArrayOutput() VolumeDeviceArrayOutput
	ToVolumeDeviceArrayOutputWithContext(context.Context) VolumeDeviceArrayOutput
}

type VolumeDeviceArray []VolumeDeviceInput

func (VolumeDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDevice)(nil)).Elem()
}

func (i VolumeDeviceArray) ToVolumeDeviceArrayOutput() VolumeDeviceArrayOutput {
	return i.ToVolumeDeviceArrayOutputWithContext(context.Background())
}

func (i VolumeDeviceArray) ToVolumeDeviceArrayOutputWithContext(ctx context.Context) VolumeDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDeviceArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDeviceOutput struct{ *pulumi.OutputState }

func (VolumeDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDevice)(nil)).Elem()
}

func (o VolumeDeviceOutput) ToVolumeDeviceOutput() VolumeDeviceOutput {
	return o
}

func (o VolumeDeviceOutput) ToVolumeDeviceOutputWithContext(ctx context.Context) VolumeDeviceOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o VolumeDeviceOutput) DevicePath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDevice) string { return v.DevicePath }).(pulumi.StringOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o VolumeDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDevice) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeDeviceArrayOutput struct{ *pulumi.OutputState }

func (VolumeDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDevice)(nil)).Elem()
}

func (o VolumeDeviceArrayOutput) ToVolumeDeviceArrayOutput() VolumeDeviceArrayOutput {
	return o
}

func (o VolumeDeviceArrayOutput) ToVolumeDeviceArrayOutputWithContext(ctx context.Context) VolumeDeviceArrayOutput {
	return o
}

func (o VolumeDeviceArrayOutput) Index(i pulumi.IntInput) VolumeDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeDevice {
		return vs[0].([]VolumeDevice)[vs[1].(int)]
	}).(VolumeDeviceOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDevicePatch struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath *string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name *string `pulumi:"name"`
}

// VolumeDevicePatchInput is an input type that accepts VolumeDevicePatchArgs and VolumeDevicePatchOutput values.
// You can construct a concrete instance of `VolumeDevicePatchInput` via:
//
//	VolumeDevicePatchArgs{...}
type VolumeDevicePatchInput interface {
	pulumi.Input

	ToVolumeDevicePatchOutput() VolumeDevicePatchOutput
	ToVolumeDevicePatchOutputWithContext(context.Context) VolumeDevicePatchOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDevicePatchArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VolumeDevicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDevicePatch)(nil)).Elem()
}

func (i VolumeDevicePatchArgs) ToVolumeDevicePatchOutput() VolumeDevicePatchOutput {
	return i.ToVolumeDevicePatchOutputWithContext(context.Background())
}

func (i VolumeDevicePatchArgs) ToVolumeDevicePatchOutputWithContext(ctx context.Context) VolumeDevicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDevicePatchOutput)
}

// VolumeDevicePatchArrayInput is an input type that accepts VolumeDevicePatchArray and VolumeDevicePatchArrayOutput values.
// You can construct a concrete instance of `VolumeDevicePatchArrayInput` via:
//
//	VolumeDevicePatchArray{ VolumeDevicePatchArgs{...} }
type VolumeDevicePatchArrayInput interface {
	pulumi.Input

	ToVolumeDevicePatchArrayOutput() VolumeDevicePatchArrayOutput
	ToVolumeDevicePatchArrayOutputWithContext(context.Context) VolumeDevicePatchArrayOutput
}

type VolumeDevicePatchArray []VolumeDevicePatchInput

func (VolumeDevicePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDevicePatch)(nil)).Elem()
}

func (i VolumeDevicePatchArray) ToVolumeDevicePatchArrayOutput() VolumeDevicePatchArrayOutput {
	return i.ToVolumeDevicePatchArrayOutputWithContext(context.Background())
}

func (i VolumeDevicePatchArray) ToVolumeDevicePatchArrayOutputWithContext(ctx context.Context) VolumeDevicePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDevicePatchArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type VolumeDevicePatchOutput struct{ *pulumi.OutputState }

func (VolumeDevicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDevicePatch)(nil)).Elem()
}

func (o VolumeDevicePatchOutput) ToVolumeDevicePatchOutput() VolumeDevicePatchOutput {
	return o
}

func (o VolumeDevicePatchOutput) ToVolumeDevicePatchOutputWithContext(ctx context.Context) VolumeDevicePatchOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o VolumeDevicePatchOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDevicePatch) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o VolumeDevicePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDevicePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VolumeDevicePatchArrayOutput struct{ *pulumi.OutputState }

func (VolumeDevicePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDevicePatch)(nil)).Elem()
}

func (o VolumeDevicePatchArrayOutput) ToVolumeDevicePatchArrayOutput() VolumeDevicePatchArrayOutput {
	return o
}

func (o VolumeDevicePatchArrayOutput) ToVolumeDevicePatchArrayOutputWithContext(ctx context.Context) VolumeDevicePatchArrayOutput {
	return o
}

func (o VolumeDevicePatchArrayOutput) Index(i pulumi.IntInput) VolumeDevicePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeDevicePatch {
		return vs[0].([]VolumeDevicePatch)[vs[1].(int)]
	}).(VolumeDevicePatchOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//	VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//	VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o VolumeMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o VolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o VolumeMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountPatch struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name *string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// VolumeMountPatchInput is an input type that accepts VolumeMountPatchArgs and VolumeMountPatchOutput values.
// You can construct a concrete instance of `VolumeMountPatchInput` via:
//
//	VolumeMountPatchArgs{...}
type VolumeMountPatchInput interface {
	pulumi.Input

	ToVolumeMountPatchOutput() VolumeMountPatchOutput
	ToVolumeMountPatchOutputWithContext(context.Context) VolumeMountPatchOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountPatchArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (VolumeMountPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountPatch)(nil)).Elem()
}

func (i VolumeMountPatchArgs) ToVolumeMountPatchOutput() VolumeMountPatchOutput {
	return i.ToVolumeMountPatchOutputWithContext(context.Background())
}

func (i VolumeMountPatchArgs) ToVolumeMountPatchOutputWithContext(ctx context.Context) VolumeMountPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountPatchOutput)
}

// VolumeMountPatchArrayInput is an input type that accepts VolumeMountPatchArray and VolumeMountPatchArrayOutput values.
// You can construct a concrete instance of `VolumeMountPatchArrayInput` via:
//
//	VolumeMountPatchArray{ VolumeMountPatchArgs{...} }
type VolumeMountPatchArrayInput interface {
	pulumi.Input

	ToVolumeMountPatchArrayOutput() VolumeMountPatchArrayOutput
	ToVolumeMountPatchArrayOutputWithContext(context.Context) VolumeMountPatchArrayOutput
}

type VolumeMountPatchArray []VolumeMountPatchInput

func (VolumeMountPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountPatch)(nil)).Elem()
}

func (i VolumeMountPatchArray) ToVolumeMountPatchArrayOutput() VolumeMountPatchArrayOutput {
	return i.ToVolumeMountPatchArrayOutputWithContext(context.Background())
}

func (i VolumeMountPatchArray) ToVolumeMountPatchArrayOutputWithContext(ctx context.Context) VolumeMountPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountPatchArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountPatchOutput struct{ *pulumi.OutputState }

func (VolumeMountPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountPatch)(nil)).Elem()
}

func (o VolumeMountPatchOutput) ToVolumeMountPatchOutput() VolumeMountPatchOutput {
	return o
}

func (o VolumeMountPatchOutput) ToVolumeMountPatchOutputWithContext(ctx context.Context) VolumeMountPatchOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o VolumeMountPatchOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o VolumeMountPatchOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o VolumeMountPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o VolumeMountPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountPatchOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o VolumeMountPatchOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountPatch) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type VolumeMountPatchArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountPatch)(nil)).Elem()
}

func (o VolumeMountPatchArrayOutput) ToVolumeMountPatchArrayOutput() VolumeMountPatchArrayOutput {
	return o
}

func (o VolumeMountPatchArrayOutput) ToVolumeMountPatchArrayOutputWithContext(ctx context.Context) VolumeMountPatchArrayOutput {
	return o
}

func (o VolumeMountPatchArrayOutput) Index(i pulumi.IntInput) VolumeMountPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountPatch {
		return vs[0].([]VolumeMountPatch)[vs[1].(int)]
	}).(VolumeMountPatchOutput)
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinity struct {
	// required specifies hard node constraints that must be met.
	Required *NodeSelector `pulumi:"required"`
}

// VolumeNodeAffinityInput is an input type that accepts VolumeNodeAffinityArgs and VolumeNodeAffinityOutput values.
// You can construct a concrete instance of `VolumeNodeAffinityInput` via:
//
//	VolumeNodeAffinityArgs{...}
type VolumeNodeAffinityInput interface {
	pulumi.Input

	ToVolumeNodeAffinityOutput() VolumeNodeAffinityOutput
	ToVolumeNodeAffinityOutputWithContext(context.Context) VolumeNodeAffinityOutput
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinityArgs struct {
	// required specifies hard node constraints that must be met.
	Required NodeSelectorPtrInput `pulumi:"required"`
}

func (VolumeNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeAffinity)(nil)).Elem()
}

func (i VolumeNodeAffinityArgs) ToVolumeNodeAffinityOutput() VolumeNodeAffinityOutput {
	return i.ToVolumeNodeAffinityOutputWithContext(context.Background())
}

func (i VolumeNodeAffinityArgs) ToVolumeNodeAffinityOutputWithContext(ctx context.Context) VolumeNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityOutput)
}

func (i VolumeNodeAffinityArgs) ToVolumeNodeAffinityPtrOutput() VolumeNodeAffinityPtrOutput {
	return i.ToVolumeNodeAffinityPtrOutputWithContext(context.Background())
}

func (i VolumeNodeAffinityArgs) ToVolumeNodeAffinityPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityOutput).ToVolumeNodeAffinityPtrOutputWithContext(ctx)
}

// VolumeNodeAffinityPtrInput is an input type that accepts VolumeNodeAffinityArgs, VolumeNodeAffinityPtr and VolumeNodeAffinityPtrOutput values.
// You can construct a concrete instance of `VolumeNodeAffinityPtrInput` via:
//
//	        VolumeNodeAffinityArgs{...}
//
//	or:
//
//	        nil
type VolumeNodeAffinityPtrInput interface {
	pulumi.Input

	ToVolumeNodeAffinityPtrOutput() VolumeNodeAffinityPtrOutput
	ToVolumeNodeAffinityPtrOutputWithContext(context.Context) VolumeNodeAffinityPtrOutput
}

type volumeNodeAffinityPtrType VolumeNodeAffinityArgs

func VolumeNodeAffinityPtr(v *VolumeNodeAffinityArgs) VolumeNodeAffinityPtrInput {
	return (*volumeNodeAffinityPtrType)(v)
}

func (*volumeNodeAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeAffinity)(nil)).Elem()
}

func (i *volumeNodeAffinityPtrType) ToVolumeNodeAffinityPtrOutput() VolumeNodeAffinityPtrOutput {
	return i.ToVolumeNodeAffinityPtrOutputWithContext(context.Background())
}

func (i *volumeNodeAffinityPtrType) ToVolumeNodeAffinityPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityPtrOutput)
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinityOutput struct{ *pulumi.OutputState }

func (VolumeNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeAffinity)(nil)).Elem()
}

func (o VolumeNodeAffinityOutput) ToVolumeNodeAffinityOutput() VolumeNodeAffinityOutput {
	return o
}

func (o VolumeNodeAffinityOutput) ToVolumeNodeAffinityOutputWithContext(ctx context.Context) VolumeNodeAffinityOutput {
	return o
}

func (o VolumeNodeAffinityOutput) ToVolumeNodeAffinityPtrOutput() VolumeNodeAffinityPtrOutput {
	return o.ToVolumeNodeAffinityPtrOutputWithContext(context.Background())
}

func (o VolumeNodeAffinityOutput) ToVolumeNodeAffinityPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeNodeAffinity) *VolumeNodeAffinity {
		return &v
	}).(VolumeNodeAffinityPtrOutput)
}

// required specifies hard node constraints that must be met.
func (o VolumeNodeAffinityOutput) Required() NodeSelectorPtrOutput {
	return o.ApplyT(func(v VolumeNodeAffinity) *NodeSelector { return v.Required }).(NodeSelectorPtrOutput)
}

type VolumeNodeAffinityPtrOutput struct{ *pulumi.OutputState }

func (VolumeNodeAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeAffinity)(nil)).Elem()
}

func (o VolumeNodeAffinityPtrOutput) ToVolumeNodeAffinityPtrOutput() VolumeNodeAffinityPtrOutput {
	return o
}

func (o VolumeNodeAffinityPtrOutput) ToVolumeNodeAffinityPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPtrOutput {
	return o
}

func (o VolumeNodeAffinityPtrOutput) Elem() VolumeNodeAffinityOutput {
	return o.ApplyT(func(v *VolumeNodeAffinity) VolumeNodeAffinity {
		if v != nil {
			return *v
		}
		var ret VolumeNodeAffinity
		return ret
	}).(VolumeNodeAffinityOutput)
}

// required specifies hard node constraints that must be met.
func (o VolumeNodeAffinityPtrOutput) Required() NodeSelectorPtrOutput {
	return o.ApplyT(func(v *VolumeNodeAffinity) *NodeSelector {
		if v == nil {
			return nil
		}
		return v.Required
	}).(NodeSelectorPtrOutput)
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinityPatch struct {
	// required specifies hard node constraints that must be met.
	Required *NodeSelectorPatch `pulumi:"required"`
}

// VolumeNodeAffinityPatchInput is an input type that accepts VolumeNodeAffinityPatchArgs and VolumeNodeAffinityPatchOutput values.
// You can construct a concrete instance of `VolumeNodeAffinityPatchInput` via:
//
//	VolumeNodeAffinityPatchArgs{...}
type VolumeNodeAffinityPatchInput interface {
	pulumi.Input

	ToVolumeNodeAffinityPatchOutput() VolumeNodeAffinityPatchOutput
	ToVolumeNodeAffinityPatchOutputWithContext(context.Context) VolumeNodeAffinityPatchOutput
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinityPatchArgs struct {
	// required specifies hard node constraints that must be met.
	Required NodeSelectorPatchPtrInput `pulumi:"required"`
}

func (VolumeNodeAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeAffinityPatch)(nil)).Elem()
}

func (i VolumeNodeAffinityPatchArgs) ToVolumeNodeAffinityPatchOutput() VolumeNodeAffinityPatchOutput {
	return i.ToVolumeNodeAffinityPatchOutputWithContext(context.Background())
}

func (i VolumeNodeAffinityPatchArgs) ToVolumeNodeAffinityPatchOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityPatchOutput)
}

func (i VolumeNodeAffinityPatchArgs) ToVolumeNodeAffinityPatchPtrOutput() VolumeNodeAffinityPatchPtrOutput {
	return i.ToVolumeNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i VolumeNodeAffinityPatchArgs) ToVolumeNodeAffinityPatchPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityPatchOutput).ToVolumeNodeAffinityPatchPtrOutputWithContext(ctx)
}

// VolumeNodeAffinityPatchPtrInput is an input type that accepts VolumeNodeAffinityPatchArgs, VolumeNodeAffinityPatchPtr and VolumeNodeAffinityPatchPtrOutput values.
// You can construct a concrete instance of `VolumeNodeAffinityPatchPtrInput` via:
//
//	        VolumeNodeAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeNodeAffinityPatchPtrInput interface {
	pulumi.Input

	ToVolumeNodeAffinityPatchPtrOutput() VolumeNodeAffinityPatchPtrOutput
	ToVolumeNodeAffinityPatchPtrOutputWithContext(context.Context) VolumeNodeAffinityPatchPtrOutput
}

type volumeNodeAffinityPatchPtrType VolumeNodeAffinityPatchArgs

func VolumeNodeAffinityPatchPtr(v *VolumeNodeAffinityPatchArgs) VolumeNodeAffinityPatchPtrInput {
	return (*volumeNodeAffinityPatchPtrType)(v)
}

func (*volumeNodeAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeAffinityPatch)(nil)).Elem()
}

func (i *volumeNodeAffinityPatchPtrType) ToVolumeNodeAffinityPatchPtrOutput() VolumeNodeAffinityPatchPtrOutput {
	return i.ToVolumeNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *volumeNodeAffinityPatchPtrType) ToVolumeNodeAffinityPatchPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeAffinityPatchPtrOutput)
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type VolumeNodeAffinityPatchOutput struct{ *pulumi.OutputState }

func (VolumeNodeAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeAffinityPatch)(nil)).Elem()
}

func (o VolumeNodeAffinityPatchOutput) ToVolumeNodeAffinityPatchOutput() VolumeNodeAffinityPatchOutput {
	return o
}

func (o VolumeNodeAffinityPatchOutput) ToVolumeNodeAffinityPatchOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchOutput {
	return o
}

func (o VolumeNodeAffinityPatchOutput) ToVolumeNodeAffinityPatchPtrOutput() VolumeNodeAffinityPatchPtrOutput {
	return o.ToVolumeNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (o VolumeNodeAffinityPatchOutput) ToVolumeNodeAffinityPatchPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeNodeAffinityPatch) *VolumeNodeAffinityPatch {
		return &v
	}).(VolumeNodeAffinityPatchPtrOutput)
}

// required specifies hard node constraints that must be met.
func (o VolumeNodeAffinityPatchOutput) Required() NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v VolumeNodeAffinityPatch) *NodeSelectorPatch { return v.Required }).(NodeSelectorPatchPtrOutput)
}

type VolumeNodeAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeNodeAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeAffinityPatch)(nil)).Elem()
}

func (o VolumeNodeAffinityPatchPtrOutput) ToVolumeNodeAffinityPatchPtrOutput() VolumeNodeAffinityPatchPtrOutput {
	return o
}

func (o VolumeNodeAffinityPatchPtrOutput) ToVolumeNodeAffinityPatchPtrOutputWithContext(ctx context.Context) VolumeNodeAffinityPatchPtrOutput {
	return o
}

func (o VolumeNodeAffinityPatchPtrOutput) Elem() VolumeNodeAffinityPatchOutput {
	return o.ApplyT(func(v *VolumeNodeAffinityPatch) VolumeNodeAffinityPatch {
		if v != nil {
			return *v
		}
		var ret VolumeNodeAffinityPatch
		return ret
	}).(VolumeNodeAffinityPatchOutput)
}

// required specifies hard node constraints that must be met.
func (o VolumeNodeAffinityPatchPtrOutput) Required() NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *VolumeNodeAffinityPatch) *NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Required
	}).(NodeSelectorPatchPtrOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type VolumePatch struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSourcePatch `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSourcePatch `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFileVolumeSourcePatch `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSVolumeSourcePatch `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *CinderVolumeSourcePatch `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap *ConfigMapVolumeSourcePatch `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi *CSIVolumeSourcePatch `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI *DownwardAPIVolumeSourcePatch `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir *EmptyDirVolumeSourcePatch `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//
	// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
	//    tracking are needed,
	// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
	//    a PersistentVolumeClaim (see EphemeralVolumeSource for more
	//    information on the connection between this volume type
	//    and PersistentVolumeClaim).
	//
	// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//
	// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//
	// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral *EphemeralVolumeSourcePatch `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *FCVolumeSourcePatch `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *FlexVolumeSourcePatch `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker *FlockerVolumeSourcePatch `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSourcePatch `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *GitRepoVolumeSourcePatch `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *GlusterfsVolumeSourcePatch `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath *HostPathVolumeSourcePatch `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi *ISCSIVolumeSourcePatch `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *NFSVolumeSourcePatch `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSourcePatch `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSourcePatch `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *PortworxVolumeSourcePatch `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected *ProjectedVolumeSourcePatch `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSourcePatch `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RBDVolumeSourcePatch `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *ScaleIOVolumeSourcePatch `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *SecretVolumeSourcePatch `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos *StorageOSVolumeSourcePatch `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSourcePatch `pulumi:"vsphereVolume"`
}

// VolumePatchInput is an input type that accepts VolumePatchArgs and VolumePatchOutput values.
// You can construct a concrete instance of `VolumePatchInput` via:
//
//	VolumePatchArgs{...}
type VolumePatchInput interface {
	pulumi.Input

	ToVolumePatchOutput() VolumePatchOutput
	ToVolumePatchOutputWithContext(context.Context) VolumePatchOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type VolumePatchArgs struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AWSElasticBlockStoreVolumeSourcePatchPtrInput `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AzureDiskVolumeSourcePatchPtrInput `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AzureFileVolumeSourcePatchPtrInput `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs CephFSVolumeSourcePatchPtrInput `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder CinderVolumeSourcePatchPtrInput `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap ConfigMapVolumeSourcePatchPtrInput `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi CSIVolumeSourcePatchPtrInput `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI DownwardAPIVolumeSourcePatchPtrInput `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir EmptyDirVolumeSourcePatchPtrInput `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//
	// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
	//    tracking are needed,
	// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
	//    a PersistentVolumeClaim (see EphemeralVolumeSource for more
	//    information on the connection between this volume type
	//    and PersistentVolumeClaim).
	//
	// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//
	// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//
	// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral EphemeralVolumeSourcePatchPtrInput `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc FCVolumeSourcePatchPtrInput `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume FlexVolumeSourcePatchPtrInput `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker FlockerVolumeSourcePatchPtrInput `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk GCEPersistentDiskVolumeSourcePatchPtrInput `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo GitRepoVolumeSourcePatchPtrInput `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs GlusterfsVolumeSourcePatchPtrInput `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	HostPath HostPathVolumeSourcePatchPtrInput `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi ISCSIVolumeSourcePatchPtrInput `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs NFSVolumeSourcePatchPtrInput `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim PersistentVolumeClaimVolumeSourcePatchPtrInput `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk PhotonPersistentDiskVolumeSourcePatchPtrInput `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume PortworxVolumeSourcePatchPtrInput `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected ProjectedVolumeSourcePatchPtrInput `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte QuobyteVolumeSourcePatchPtrInput `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd RBDVolumeSourcePatchPtrInput `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO ScaleIOVolumeSourcePatchPtrInput `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret SecretVolumeSourcePatchPtrInput `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos StorageOSVolumeSourcePatchPtrInput `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume VsphereVirtualDiskVolumeSourcePatchPtrInput `pulumi:"vsphereVolume"`
}

func (VolumePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePatch)(nil)).Elem()
}

func (i VolumePatchArgs) ToVolumePatchOutput() VolumePatchOutput {
	return i.ToVolumePatchOutputWithContext(context.Background())
}

func (i VolumePatchArgs) ToVolumePatchOutputWithContext(ctx context.Context) VolumePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePatchOutput)
}

// VolumePatchArrayInput is an input type that accepts VolumePatchArray and VolumePatchArrayOutput values.
// You can construct a concrete instance of `VolumePatchArrayInput` via:
//
//	VolumePatchArray{ VolumePatchArgs{...} }
type VolumePatchArrayInput interface {
	pulumi.Input

	ToVolumePatchArrayOutput() VolumePatchArrayOutput
	ToVolumePatchArrayOutputWithContext(context.Context) VolumePatchArrayOutput
}

type VolumePatchArray []VolumePatchInput

func (VolumePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumePatch)(nil)).Elem()
}

func (i VolumePatchArray) ToVolumePatchArrayOutput() VolumePatchArrayOutput {
	return i.ToVolumePatchArrayOutputWithContext(context.Background())
}

func (i VolumePatchArray) ToVolumePatchArrayOutputWithContext(ctx context.Context) VolumePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePatchArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type VolumePatchOutput struct{ *pulumi.OutputState }

func (VolumePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePatch)(nil)).Elem()
}

func (o VolumePatchOutput) ToVolumePatchOutput() VolumePatchOutput {
	return o
}

func (o VolumePatchOutput) ToVolumePatchOutputWithContext(ctx context.Context) VolumePatchOutput {
	return o
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o VolumePatchOutput) AwsElasticBlockStore() AWSElasticBlockStoreVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *AWSElasticBlockStoreVolumeSourcePatch { return v.AwsElasticBlockStore }).(AWSElasticBlockStoreVolumeSourcePatchPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o VolumePatchOutput) AzureDisk() AzureDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *AzureDiskVolumeSourcePatch { return v.AzureDisk }).(AzureDiskVolumeSourcePatchPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o VolumePatchOutput) AzureFile() AzureFileVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *AzureFileVolumeSourcePatch { return v.AzureFile }).(AzureFileVolumeSourcePatchPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o VolumePatchOutput) Cephfs() CephFSVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *CephFSVolumeSourcePatch { return v.Cephfs }).(CephFSVolumeSourcePatchPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o VolumePatchOutput) Cinder() CinderVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *CinderVolumeSourcePatch { return v.Cinder }).(CinderVolumeSourcePatchPtrOutput)
}

// configMap represents a configMap that should populate this volume
func (o VolumePatchOutput) ConfigMap() ConfigMapVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *ConfigMapVolumeSourcePatch { return v.ConfigMap }).(ConfigMapVolumeSourcePatchPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
func (o VolumePatchOutput) Csi() CSIVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *CSIVolumeSourcePatch { return v.Csi }).(CSIVolumeSourcePatchPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
func (o VolumePatchOutput) DownwardAPI() DownwardAPIVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *DownwardAPIVolumeSourcePatch { return v.DownwardAPI }).(DownwardAPIVolumeSourcePatchPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o VolumePatchOutput) EmptyDir() EmptyDirVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *EmptyDirVolumeSourcePatch { return v.EmptyDir }).(EmptyDirVolumeSourcePatchPtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//
// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
func (o VolumePatchOutput) Ephemeral() EphemeralVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *EphemeralVolumeSourcePatch { return v.Ephemeral }).(EphemeralVolumeSourcePatchPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o VolumePatchOutput) Fc() FCVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *FCVolumeSourcePatch { return v.Fc }).(FCVolumeSourcePatchPtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o VolumePatchOutput) FlexVolume() FlexVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *FlexVolumeSourcePatch { return v.FlexVolume }).(FlexVolumeSourcePatchPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
func (o VolumePatchOutput) Flocker() FlockerVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *FlockerVolumeSourcePatch { return v.Flocker }).(FlockerVolumeSourcePatchPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o VolumePatchOutput) GcePersistentDisk() GCEPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *GCEPersistentDiskVolumeSourcePatch { return v.GcePersistentDisk }).(GCEPersistentDiskVolumeSourcePatchPtrOutput)
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
func (o VolumePatchOutput) GitRepo() GitRepoVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *GitRepoVolumeSourcePatch { return v.GitRepo }).(GitRepoVolumeSourcePatchPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o VolumePatchOutput) Glusterfs() GlusterfsVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *GlusterfsVolumeSourcePatch { return v.Glusterfs }).(GlusterfsVolumeSourcePatchPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o VolumePatchOutput) HostPath() HostPathVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *HostPathVolumeSourcePatch { return v.HostPath }).(HostPathVolumeSourcePatchPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
func (o VolumePatchOutput) Iscsi() ISCSIVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *ISCSIVolumeSourcePatch { return v.Iscsi }).(ISCSIVolumeSourcePatchPtrOutput)
}

// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o VolumePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o VolumePatchOutput) Nfs() NFSVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *NFSVolumeSourcePatch { return v.Nfs }).(NFSVolumeSourcePatchPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o VolumePatchOutput) PersistentVolumeClaim() PersistentVolumeClaimVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *PersistentVolumeClaimVolumeSourcePatch { return v.PersistentVolumeClaim }).(PersistentVolumeClaimVolumeSourcePatchPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o VolumePatchOutput) PhotonPersistentDisk() PhotonPersistentDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *PhotonPersistentDiskVolumeSourcePatch { return v.PhotonPersistentDisk }).(PhotonPersistentDiskVolumeSourcePatchPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o VolumePatchOutput) PortworxVolume() PortworxVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *PortworxVolumeSourcePatch { return v.PortworxVolume }).(PortworxVolumeSourcePatchPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
func (o VolumePatchOutput) Projected() ProjectedVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *ProjectedVolumeSourcePatch { return v.Projected }).(ProjectedVolumeSourcePatchPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o VolumePatchOutput) Quobyte() QuobyteVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *QuobyteVolumeSourcePatch { return v.Quobyte }).(QuobyteVolumeSourcePatchPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o VolumePatchOutput) Rbd() RBDVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *RBDVolumeSourcePatch { return v.Rbd }).(RBDVolumeSourcePatchPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o VolumePatchOutput) ScaleIO() ScaleIOVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *ScaleIOVolumeSourcePatch { return v.ScaleIO }).(ScaleIOVolumeSourcePatchPtrOutput)
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o VolumePatchOutput) Secret() SecretVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *SecretVolumeSourcePatch { return v.Secret }).(SecretVolumeSourcePatchPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
func (o VolumePatchOutput) Storageos() StorageOSVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *StorageOSVolumeSourcePatch { return v.Storageos }).(StorageOSVolumeSourcePatchPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o VolumePatchOutput) VsphereVolume() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumePatch) *VsphereVirtualDiskVolumeSourcePatch { return v.VsphereVolume }).(VsphereVirtualDiskVolumeSourcePatchPtrOutput)
}

type VolumePatchArrayOutput struct{ *pulumi.OutputState }

func (VolumePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumePatch)(nil)).Elem()
}

func (o VolumePatchArrayOutput) ToVolumePatchArrayOutput() VolumePatchArrayOutput {
	return o
}

func (o VolumePatchArrayOutput) ToVolumePatchArrayOutputWithContext(ctx context.Context) VolumePatchArrayOutput {
	return o
}

func (o VolumePatchArrayOutput) Index(i pulumi.IntInput) VolumePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumePatch {
		return vs[0].([]VolumePatch)[vs[1].(int)]
	}).(VolumePatchOutput)
}

// Projection that may be projected along with other supported volume types
type VolumeProjection struct {
	// configMap information about the configMap data to project
	ConfigMap *ConfigMapProjection `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI *DownwardAPIProjection `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret *SecretProjection `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken *ServiceAccountTokenProjection `pulumi:"serviceAccountToken"`
}

// VolumeProjectionInput is an input type that accepts VolumeProjectionArgs and VolumeProjectionOutput values.
// You can construct a concrete instance of `VolumeProjectionInput` via:
//
//	VolumeProjectionArgs{...}
type VolumeProjectionInput interface {
	pulumi.Input

	ToVolumeProjectionOutput() VolumeProjectionOutput
	ToVolumeProjectionOutputWithContext(context.Context) VolumeProjectionOutput
}

// Projection that may be projected along with other supported volume types
type VolumeProjectionArgs struct {
	// configMap information about the configMap data to project
	ConfigMap ConfigMapProjectionPtrInput `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI DownwardAPIProjectionPtrInput `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret SecretProjectionPtrInput `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken ServiceAccountTokenProjectionPtrInput `pulumi:"serviceAccountToken"`
}

func (VolumeProjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProjection)(nil)).Elem()
}

func (i VolumeProjectionArgs) ToVolumeProjectionOutput() VolumeProjectionOutput {
	return i.ToVolumeProjectionOutputWithContext(context.Background())
}

func (i VolumeProjectionArgs) ToVolumeProjectionOutputWithContext(ctx context.Context) VolumeProjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProjectionOutput)
}

// VolumeProjectionArrayInput is an input type that accepts VolumeProjectionArray and VolumeProjectionArrayOutput values.
// You can construct a concrete instance of `VolumeProjectionArrayInput` via:
//
//	VolumeProjectionArray{ VolumeProjectionArgs{...} }
type VolumeProjectionArrayInput interface {
	pulumi.Input

	ToVolumeProjectionArrayOutput() VolumeProjectionArrayOutput
	ToVolumeProjectionArrayOutputWithContext(context.Context) VolumeProjectionArrayOutput
}

type VolumeProjectionArray []VolumeProjectionInput

func (VolumeProjectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeProjection)(nil)).Elem()
}

func (i VolumeProjectionArray) ToVolumeProjectionArrayOutput() VolumeProjectionArrayOutput {
	return i.ToVolumeProjectionArrayOutputWithContext(context.Background())
}

func (i VolumeProjectionArray) ToVolumeProjectionArrayOutputWithContext(ctx context.Context) VolumeProjectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProjectionArrayOutput)
}

// Projection that may be projected along with other supported volume types
type VolumeProjectionOutput struct{ *pulumi.OutputState }

func (VolumeProjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProjection)(nil)).Elem()
}

func (o VolumeProjectionOutput) ToVolumeProjectionOutput() VolumeProjectionOutput {
	return o
}

func (o VolumeProjectionOutput) ToVolumeProjectionOutputWithContext(ctx context.Context) VolumeProjectionOutput {
	return o
}

// configMap information about the configMap data to project
func (o VolumeProjectionOutput) ConfigMap() ConfigMapProjectionPtrOutput {
	return o.ApplyT(func(v VolumeProjection) *ConfigMapProjection { return v.ConfigMap }).(ConfigMapProjectionPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
func (o VolumeProjectionOutput) DownwardAPI() DownwardAPIProjectionPtrOutput {
	return o.ApplyT(func(v VolumeProjection) *DownwardAPIProjection { return v.DownwardAPI }).(DownwardAPIProjectionPtrOutput)
}

// secret information about the secret data to project
func (o VolumeProjectionOutput) Secret() SecretProjectionPtrOutput {
	return o.ApplyT(func(v VolumeProjection) *SecretProjection { return v.Secret }).(SecretProjectionPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
func (o VolumeProjectionOutput) ServiceAccountToken() ServiceAccountTokenProjectionPtrOutput {
	return o.ApplyT(func(v VolumeProjection) *ServiceAccountTokenProjection { return v.ServiceAccountToken }).(ServiceAccountTokenProjectionPtrOutput)
}

type VolumeProjectionArrayOutput struct{ *pulumi.OutputState }

func (VolumeProjectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeProjection)(nil)).Elem()
}

func (o VolumeProjectionArrayOutput) ToVolumeProjectionArrayOutput() VolumeProjectionArrayOutput {
	return o
}

func (o VolumeProjectionArrayOutput) ToVolumeProjectionArrayOutputWithContext(ctx context.Context) VolumeProjectionArrayOutput {
	return o
}

func (o VolumeProjectionArrayOutput) Index(i pulumi.IntInput) VolumeProjectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeProjection {
		return vs[0].([]VolumeProjection)[vs[1].(int)]
	}).(VolumeProjectionOutput)
}

// Projection that may be projected along with other supported volume types
type VolumeProjectionPatch struct {
	// configMap information about the configMap data to project
	ConfigMap *ConfigMapProjectionPatch `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI *DownwardAPIProjectionPatch `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret *SecretProjectionPatch `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken *ServiceAccountTokenProjectionPatch `pulumi:"serviceAccountToken"`
}

// VolumeProjectionPatchInput is an input type that accepts VolumeProjectionPatchArgs and VolumeProjectionPatchOutput values.
// You can construct a concrete instance of `VolumeProjectionPatchInput` via:
//
//	VolumeProjectionPatchArgs{...}
type VolumeProjectionPatchInput interface {
	pulumi.Input

	ToVolumeProjectionPatchOutput() VolumeProjectionPatchOutput
	ToVolumeProjectionPatchOutputWithContext(context.Context) VolumeProjectionPatchOutput
}

// Projection that may be projected along with other supported volume types
type VolumeProjectionPatchArgs struct {
	// configMap information about the configMap data to project
	ConfigMap ConfigMapProjectionPatchPtrInput `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI DownwardAPIProjectionPatchPtrInput `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret SecretProjectionPatchPtrInput `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken ServiceAccountTokenProjectionPatchPtrInput `pulumi:"serviceAccountToken"`
}

func (VolumeProjectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProjectionPatch)(nil)).Elem()
}

func (i VolumeProjectionPatchArgs) ToVolumeProjectionPatchOutput() VolumeProjectionPatchOutput {
	return i.ToVolumeProjectionPatchOutputWithContext(context.Background())
}

func (i VolumeProjectionPatchArgs) ToVolumeProjectionPatchOutputWithContext(ctx context.Context) VolumeProjectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProjectionPatchOutput)
}

// VolumeProjectionPatchArrayInput is an input type that accepts VolumeProjectionPatchArray and VolumeProjectionPatchArrayOutput values.
// You can construct a concrete instance of `VolumeProjectionPatchArrayInput` via:
//
//	VolumeProjectionPatchArray{ VolumeProjectionPatchArgs{...} }
type VolumeProjectionPatchArrayInput interface {
	pulumi.Input

	ToVolumeProjectionPatchArrayOutput() VolumeProjectionPatchArrayOutput
	ToVolumeProjectionPatchArrayOutputWithContext(context.Context) VolumeProjectionPatchArrayOutput
}

type VolumeProjectionPatchArray []VolumeProjectionPatchInput

func (VolumeProjectionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeProjectionPatch)(nil)).Elem()
}

func (i VolumeProjectionPatchArray) ToVolumeProjectionPatchArrayOutput() VolumeProjectionPatchArrayOutput {
	return i.ToVolumeProjectionPatchArrayOutputWithContext(context.Background())
}

func (i VolumeProjectionPatchArray) ToVolumeProjectionPatchArrayOutputWithContext(ctx context.Context) VolumeProjectionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProjectionPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types
type VolumeProjectionPatchOutput struct{ *pulumi.OutputState }

func (VolumeProjectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProjectionPatch)(nil)).Elem()
}

func (o VolumeProjectionPatchOutput) ToVolumeProjectionPatchOutput() VolumeProjectionPatchOutput {
	return o
}

func (o VolumeProjectionPatchOutput) ToVolumeProjectionPatchOutputWithContext(ctx context.Context) VolumeProjectionPatchOutput {
	return o
}

// configMap information about the configMap data to project
func (o VolumeProjectionPatchOutput) ConfigMap() ConfigMapProjectionPatchPtrOutput {
	return o.ApplyT(func(v VolumeProjectionPatch) *ConfigMapProjectionPatch { return v.ConfigMap }).(ConfigMapProjectionPatchPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
func (o VolumeProjectionPatchOutput) DownwardAPI() DownwardAPIProjectionPatchPtrOutput {
	return o.ApplyT(func(v VolumeProjectionPatch) *DownwardAPIProjectionPatch { return v.DownwardAPI }).(DownwardAPIProjectionPatchPtrOutput)
}

// secret information about the secret data to project
func (o VolumeProjectionPatchOutput) Secret() SecretProjectionPatchPtrOutput {
	return o.ApplyT(func(v VolumeProjectionPatch) *SecretProjectionPatch { return v.Secret }).(SecretProjectionPatchPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
func (o VolumeProjectionPatchOutput) ServiceAccountToken() ServiceAccountTokenProjectionPatchPtrOutput {
	return o.ApplyT(func(v VolumeProjectionPatch) *ServiceAccountTokenProjectionPatch { return v.ServiceAccountToken }).(ServiceAccountTokenProjectionPatchPtrOutput)
}

type VolumeProjectionPatchArrayOutput struct{ *pulumi.OutputState }

func (VolumeProjectionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeProjectionPatch)(nil)).Elem()
}

func (o VolumeProjectionPatchArrayOutput) ToVolumeProjectionPatchArrayOutput() VolumeProjectionPatchArrayOutput {
	return o
}

func (o VolumeProjectionPatchArrayOutput) ToVolumeProjectionPatchArrayOutputWithContext(ctx context.Context) VolumeProjectionPatchArrayOutput {
	return o
}

func (o VolumeProjectionPatchArrayOutput) Index(i pulumi.IntInput) VolumeProjectionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeProjectionPatch {
		return vs[0].([]VolumeProjectionPatch)[vs[1].(int)]
	}).(VolumeProjectionPatchOutput)
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSource struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath string `pulumi:"volumePath"`
}

// VsphereVirtualDiskVolumeSourceInput is an input type that accepts VsphereVirtualDiskVolumeSourceArgs and VsphereVirtualDiskVolumeSourceOutput values.
// You can construct a concrete instance of `VsphereVirtualDiskVolumeSourceInput` via:
//
//	VsphereVirtualDiskVolumeSourceArgs{...}
type VsphereVirtualDiskVolumeSourceInput interface {
	pulumi.Input

	ToVsphereVirtualDiskVolumeSourceOutput() VsphereVirtualDiskVolumeSourceOutput
	ToVsphereVirtualDiskVolumeSourceOutputWithContext(context.Context) VsphereVirtualDiskVolumeSourceOutput
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSourceArgs struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath pulumi.StringInput `pulumi:"volumePath"`
}

func (VsphereVirtualDiskVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VsphereVirtualDiskVolumeSource)(nil)).Elem()
}

func (i VsphereVirtualDiskVolumeSourceArgs) ToVsphereVirtualDiskVolumeSourceOutput() VsphereVirtualDiskVolumeSourceOutput {
	return i.ToVsphereVirtualDiskVolumeSourceOutputWithContext(context.Background())
}

func (i VsphereVirtualDiskVolumeSourceArgs) ToVsphereVirtualDiskVolumeSourceOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourceOutput)
}

func (i VsphereVirtualDiskVolumeSourceArgs) ToVsphereVirtualDiskVolumeSourcePtrOutput() VsphereVirtualDiskVolumeSourcePtrOutput {
	return i.ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i VsphereVirtualDiskVolumeSourceArgs) ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourceOutput).ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(ctx)
}

// VsphereVirtualDiskVolumeSourcePtrInput is an input type that accepts VsphereVirtualDiskVolumeSourceArgs, VsphereVirtualDiskVolumeSourcePtr and VsphereVirtualDiskVolumeSourcePtrOutput values.
// You can construct a concrete instance of `VsphereVirtualDiskVolumeSourcePtrInput` via:
//
//	        VsphereVirtualDiskVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type VsphereVirtualDiskVolumeSourcePtrInput interface {
	pulumi.Input

	ToVsphereVirtualDiskVolumeSourcePtrOutput() VsphereVirtualDiskVolumeSourcePtrOutput
	ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(context.Context) VsphereVirtualDiskVolumeSourcePtrOutput
}

type vsphereVirtualDiskVolumeSourcePtrType VsphereVirtualDiskVolumeSourceArgs

func VsphereVirtualDiskVolumeSourcePtr(v *VsphereVirtualDiskVolumeSourceArgs) VsphereVirtualDiskVolumeSourcePtrInput {
	return (*vsphereVirtualDiskVolumeSourcePtrType)(v)
}

func (*vsphereVirtualDiskVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VsphereVirtualDiskVolumeSource)(nil)).Elem()
}

func (i *vsphereVirtualDiskVolumeSourcePtrType) ToVsphereVirtualDiskVolumeSourcePtrOutput() VsphereVirtualDiskVolumeSourcePtrOutput {
	return i.ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *vsphereVirtualDiskVolumeSourcePtrType) ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourcePtrOutput)
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSourceOutput struct{ *pulumi.OutputState }

func (VsphereVirtualDiskVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VsphereVirtualDiskVolumeSource)(nil)).Elem()
}

func (o VsphereVirtualDiskVolumeSourceOutput) ToVsphereVirtualDiskVolumeSourceOutput() VsphereVirtualDiskVolumeSourceOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourceOutput) ToVsphereVirtualDiskVolumeSourceOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourceOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourceOutput) ToVsphereVirtualDiskVolumeSourcePtrOutput() VsphereVirtualDiskVolumeSourcePtrOutput {
	return o.ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(context.Background())
}

func (o VsphereVirtualDiskVolumeSourceOutput) ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VsphereVirtualDiskVolumeSource) *VsphereVirtualDiskVolumeSource {
		return &v
	}).(VsphereVirtualDiskVolumeSourcePtrOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o VsphereVirtualDiskVolumeSourceOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSource) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o VsphereVirtualDiskVolumeSourceOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSource) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o VsphereVirtualDiskVolumeSourceOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSource) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o VsphereVirtualDiskVolumeSourceOutput) VolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSource) string { return v.VolumePath }).(pulumi.StringOutput)
}

type VsphereVirtualDiskVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (VsphereVirtualDiskVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VsphereVirtualDiskVolumeSource)(nil)).Elem()
}

func (o VsphereVirtualDiskVolumeSourcePtrOutput) ToVsphereVirtualDiskVolumeSourcePtrOutput() VsphereVirtualDiskVolumeSourcePtrOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePtrOutput) ToVsphereVirtualDiskVolumeSourcePtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePtrOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePtrOutput) Elem() VsphereVirtualDiskVolumeSourceOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSource) VsphereVirtualDiskVolumeSource {
		if v != nil {
			return *v
		}
		var ret VsphereVirtualDiskVolumeSource
		return ret
	}).(VsphereVirtualDiskVolumeSourceOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o VsphereVirtualDiskVolumeSourcePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o VsphereVirtualDiskVolumeSourcePtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o VsphereVirtualDiskVolumeSourcePtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o VsphereVirtualDiskVolumeSourcePtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSourcePatch struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath *string `pulumi:"volumePath"`
}

// VsphereVirtualDiskVolumeSourcePatchInput is an input type that accepts VsphereVirtualDiskVolumeSourcePatchArgs and VsphereVirtualDiskVolumeSourcePatchOutput values.
// You can construct a concrete instance of `VsphereVirtualDiskVolumeSourcePatchInput` via:
//
//	VsphereVirtualDiskVolumeSourcePatchArgs{...}
type VsphereVirtualDiskVolumeSourcePatchInput interface {
	pulumi.Input

	ToVsphereVirtualDiskVolumeSourcePatchOutput() VsphereVirtualDiskVolumeSourcePatchOutput
	ToVsphereVirtualDiskVolumeSourcePatchOutputWithContext(context.Context) VsphereVirtualDiskVolumeSourcePatchOutput
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSourcePatchArgs struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath pulumi.StringPtrInput `pulumi:"volumePath"`
}

func (VsphereVirtualDiskVolumeSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VsphereVirtualDiskVolumeSourcePatch)(nil)).Elem()
}

func (i VsphereVirtualDiskVolumeSourcePatchArgs) ToVsphereVirtualDiskVolumeSourcePatchOutput() VsphereVirtualDiskVolumeSourcePatchOutput {
	return i.ToVsphereVirtualDiskVolumeSourcePatchOutputWithContext(context.Background())
}

func (i VsphereVirtualDiskVolumeSourcePatchArgs) ToVsphereVirtualDiskVolumeSourcePatchOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourcePatchOutput)
}

func (i VsphereVirtualDiskVolumeSourcePatchArgs) ToVsphereVirtualDiskVolumeSourcePatchPtrOutput() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return i.ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i VsphereVirtualDiskVolumeSourcePatchArgs) ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourcePatchOutput).ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(ctx)
}

// VsphereVirtualDiskVolumeSourcePatchPtrInput is an input type that accepts VsphereVirtualDiskVolumeSourcePatchArgs, VsphereVirtualDiskVolumeSourcePatchPtr and VsphereVirtualDiskVolumeSourcePatchPtrOutput values.
// You can construct a concrete instance of `VsphereVirtualDiskVolumeSourcePatchPtrInput` via:
//
//	        VsphereVirtualDiskVolumeSourcePatchArgs{...}
//
//	or:
//
//	        nil
type VsphereVirtualDiskVolumeSourcePatchPtrInput interface {
	pulumi.Input

	ToVsphereVirtualDiskVolumeSourcePatchPtrOutput() VsphereVirtualDiskVolumeSourcePatchPtrOutput
	ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(context.Context) VsphereVirtualDiskVolumeSourcePatchPtrOutput
}

type vsphereVirtualDiskVolumeSourcePatchPtrType VsphereVirtualDiskVolumeSourcePatchArgs

func VsphereVirtualDiskVolumeSourcePatchPtr(v *VsphereVirtualDiskVolumeSourcePatchArgs) VsphereVirtualDiskVolumeSourcePatchPtrInput {
	return (*vsphereVirtualDiskVolumeSourcePatchPtrType)(v)
}

func (*vsphereVirtualDiskVolumeSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VsphereVirtualDiskVolumeSourcePatch)(nil)).Elem()
}

func (i *vsphereVirtualDiskVolumeSourcePatchPtrType) ToVsphereVirtualDiskVolumeSourcePatchPtrOutput() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return i.ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (i *vsphereVirtualDiskVolumeSourcePatchPtrType) ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VsphereVirtualDiskVolumeSourcePatchPtrOutput)
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSourcePatchOutput struct{ *pulumi.OutputState }

func (VsphereVirtualDiskVolumeSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VsphereVirtualDiskVolumeSourcePatch)(nil)).Elem()
}

func (o VsphereVirtualDiskVolumeSourcePatchOutput) ToVsphereVirtualDiskVolumeSourcePatchOutput() VsphereVirtualDiskVolumeSourcePatchOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePatchOutput) ToVsphereVirtualDiskVolumeSourcePatchOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePatchOutput) ToVsphereVirtualDiskVolumeSourcePatchPtrOutput() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o.ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(context.Background())
}

func (o VsphereVirtualDiskVolumeSourcePatchOutput) ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VsphereVirtualDiskVolumeSourcePatch) *VsphereVirtualDiskVolumeSourcePatch {
		return &v
	}).(VsphereVirtualDiskVolumeSourcePatchPtrOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o VsphereVirtualDiskVolumeSourcePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSourcePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o VsphereVirtualDiskVolumeSourcePatchOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSourcePatch) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o VsphereVirtualDiskVolumeSourcePatchOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSourcePatch) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o VsphereVirtualDiskVolumeSourcePatchOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VsphereVirtualDiskVolumeSourcePatch) *string { return v.VolumePath }).(pulumi.StringPtrOutput)
}

type VsphereVirtualDiskVolumeSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (VsphereVirtualDiskVolumeSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VsphereVirtualDiskVolumeSourcePatch)(nil)).Elem()
}

func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) ToVsphereVirtualDiskVolumeSourcePatchPtrOutput() VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) ToVsphereVirtualDiskVolumeSourcePatchPtrOutputWithContext(ctx context.Context) VsphereVirtualDiskVolumeSourcePatchPtrOutput {
	return o
}

func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) Elem() VsphereVirtualDiskVolumeSourcePatchOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSourcePatch) VsphereVirtualDiskVolumeSourcePatch {
		if v != nil {
			return *v
		}
		var ret VsphereVirtualDiskVolumeSourcePatch
		return ret
	}).(VsphereVirtualDiskVolumeSourcePatchOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o VsphereVirtualDiskVolumeSourcePatchPtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VsphereVirtualDiskVolumeSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTerm struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm PodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// WeightedPodAffinityTermInput is an input type that accepts WeightedPodAffinityTermArgs and WeightedPodAffinityTermOutput values.
// You can construct a concrete instance of `WeightedPodAffinityTermInput` via:
//
//	WeightedPodAffinityTermArgs{...}
type WeightedPodAffinityTermInput interface {
	pulumi.Input

	ToWeightedPodAffinityTermOutput() WeightedPodAffinityTermOutput
	ToWeightedPodAffinityTermOutputWithContext(context.Context) WeightedPodAffinityTermOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTermArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm PodAffinityTermInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (WeightedPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedPodAffinityTerm)(nil)).Elem()
}

func (i WeightedPodAffinityTermArgs) ToWeightedPodAffinityTermOutput() WeightedPodAffinityTermOutput {
	return i.ToWeightedPodAffinityTermOutputWithContext(context.Background())
}

func (i WeightedPodAffinityTermArgs) ToWeightedPodAffinityTermOutputWithContext(ctx context.Context) WeightedPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedPodAffinityTermOutput)
}

// WeightedPodAffinityTermArrayInput is an input type that accepts WeightedPodAffinityTermArray and WeightedPodAffinityTermArrayOutput values.
// You can construct a concrete instance of `WeightedPodAffinityTermArrayInput` via:
//
//	WeightedPodAffinityTermArray{ WeightedPodAffinityTermArgs{...} }
type WeightedPodAffinityTermArrayInput interface {
	pulumi.Input

	ToWeightedPodAffinityTermArrayOutput() WeightedPodAffinityTermArrayOutput
	ToWeightedPodAffinityTermArrayOutputWithContext(context.Context) WeightedPodAffinityTermArrayOutput
}

type WeightedPodAffinityTermArray []WeightedPodAffinityTermInput

func (WeightedPodAffinityTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedPodAffinityTerm)(nil)).Elem()
}

func (i WeightedPodAffinityTermArray) ToWeightedPodAffinityTermArrayOutput() WeightedPodAffinityTermArrayOutput {
	return i.ToWeightedPodAffinityTermArrayOutputWithContext(context.Background())
}

func (i WeightedPodAffinityTermArray) ToWeightedPodAffinityTermArrayOutputWithContext(ctx context.Context) WeightedPodAffinityTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedPodAffinityTermArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTermOutput struct{ *pulumi.OutputState }

func (WeightedPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedPodAffinityTerm)(nil)).Elem()
}

func (o WeightedPodAffinityTermOutput) ToWeightedPodAffinityTermOutput() WeightedPodAffinityTermOutput {
	return o
}

func (o WeightedPodAffinityTermOutput) ToWeightedPodAffinityTermOutputWithContext(ctx context.Context) WeightedPodAffinityTermOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o WeightedPodAffinityTermOutput) PodAffinityTerm() PodAffinityTermOutput {
	return o.ApplyT(func(v WeightedPodAffinityTerm) PodAffinityTerm { return v.PodAffinityTerm }).(PodAffinityTermOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o WeightedPodAffinityTermOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v WeightedPodAffinityTerm) int { return v.Weight }).(pulumi.IntOutput)
}

type WeightedPodAffinityTermArrayOutput struct{ *pulumi.OutputState }

func (WeightedPodAffinityTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedPodAffinityTerm)(nil)).Elem()
}

func (o WeightedPodAffinityTermArrayOutput) ToWeightedPodAffinityTermArrayOutput() WeightedPodAffinityTermArrayOutput {
	return o
}

func (o WeightedPodAffinityTermArrayOutput) ToWeightedPodAffinityTermArrayOutputWithContext(ctx context.Context) WeightedPodAffinityTermArrayOutput {
	return o
}

func (o WeightedPodAffinityTermArrayOutput) Index(i pulumi.IntInput) WeightedPodAffinityTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedPodAffinityTerm {
		return vs[0].([]WeightedPodAffinityTerm)[vs[1].(int)]
	}).(WeightedPodAffinityTermOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTermPatch struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm *PodAffinityTermPatch `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// WeightedPodAffinityTermPatchInput is an input type that accepts WeightedPodAffinityTermPatchArgs and WeightedPodAffinityTermPatchOutput values.
// You can construct a concrete instance of `WeightedPodAffinityTermPatchInput` via:
//
//	WeightedPodAffinityTermPatchArgs{...}
type WeightedPodAffinityTermPatchInput interface {
	pulumi.Input

	ToWeightedPodAffinityTermPatchOutput() WeightedPodAffinityTermPatchOutput
	ToWeightedPodAffinityTermPatchOutputWithContext(context.Context) WeightedPodAffinityTermPatchOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTermPatchArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm PodAffinityTermPatchPtrInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WeightedPodAffinityTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedPodAffinityTermPatch)(nil)).Elem()
}

func (i WeightedPodAffinityTermPatchArgs) ToWeightedPodAffinityTermPatchOutput() WeightedPodAffinityTermPatchOutput {
	return i.ToWeightedPodAffinityTermPatchOutputWithContext(context.Background())
}

func (i WeightedPodAffinityTermPatchArgs) ToWeightedPodAffinityTermPatchOutputWithContext(ctx context.Context) WeightedPodAffinityTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedPodAffinityTermPatchOutput)
}

// WeightedPodAffinityTermPatchArrayInput is an input type that accepts WeightedPodAffinityTermPatchArray and WeightedPodAffinityTermPatchArrayOutput values.
// You can construct a concrete instance of `WeightedPodAffinityTermPatchArrayInput` via:
//
//	WeightedPodAffinityTermPatchArray{ WeightedPodAffinityTermPatchArgs{...} }
type WeightedPodAffinityTermPatchArrayInput interface {
	pulumi.Input

	ToWeightedPodAffinityTermPatchArrayOutput() WeightedPodAffinityTermPatchArrayOutput
	ToWeightedPodAffinityTermPatchArrayOutputWithContext(context.Context) WeightedPodAffinityTermPatchArrayOutput
}

type WeightedPodAffinityTermPatchArray []WeightedPodAffinityTermPatchInput

func (WeightedPodAffinityTermPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedPodAffinityTermPatch)(nil)).Elem()
}

func (i WeightedPodAffinityTermPatchArray) ToWeightedPodAffinityTermPatchArrayOutput() WeightedPodAffinityTermPatchArrayOutput {
	return i.ToWeightedPodAffinityTermPatchArrayOutputWithContext(context.Background())
}

func (i WeightedPodAffinityTermPatchArray) ToWeightedPodAffinityTermPatchArrayOutputWithContext(ctx context.Context) WeightedPodAffinityTermPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedPodAffinityTermPatchArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedPodAffinityTermPatchOutput struct{ *pulumi.OutputState }

func (WeightedPodAffinityTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedPodAffinityTermPatch)(nil)).Elem()
}

func (o WeightedPodAffinityTermPatchOutput) ToWeightedPodAffinityTermPatchOutput() WeightedPodAffinityTermPatchOutput {
	return o
}

func (o WeightedPodAffinityTermPatchOutput) ToWeightedPodAffinityTermPatchOutputWithContext(ctx context.Context) WeightedPodAffinityTermPatchOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o WeightedPodAffinityTermPatchOutput) PodAffinityTerm() PodAffinityTermPatchPtrOutput {
	return o.ApplyT(func(v WeightedPodAffinityTermPatch) *PodAffinityTermPatch { return v.PodAffinityTerm }).(PodAffinityTermPatchPtrOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o WeightedPodAffinityTermPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeightedPodAffinityTermPatch) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WeightedPodAffinityTermPatchArrayOutput struct{ *pulumi.OutputState }

func (WeightedPodAffinityTermPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedPodAffinityTermPatch)(nil)).Elem()
}

func (o WeightedPodAffinityTermPatchArrayOutput) ToWeightedPodAffinityTermPatchArrayOutput() WeightedPodAffinityTermPatchArrayOutput {
	return o
}

func (o WeightedPodAffinityTermPatchArrayOutput) ToWeightedPodAffinityTermPatchArrayOutputWithContext(ctx context.Context) WeightedPodAffinityTermPatchArrayOutput {
	return o
}

func (o WeightedPodAffinityTermPatchArrayOutput) Index(i pulumi.IntInput) WeightedPodAffinityTermPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedPodAffinityTermPatch {
		return vs[0].([]WeightedPodAffinityTermPatch)[vs[1].(int)]
	}).(WeightedPodAffinityTermPatchOutput)
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// WindowsSecurityContextOptionsInput is an input type that accepts WindowsSecurityContextOptionsArgs and WindowsSecurityContextOptionsOutput values.
// You can construct a concrete instance of `WindowsSecurityContextOptionsInput` via:
//
//	WindowsSecurityContextOptionsArgs{...}
type WindowsSecurityContextOptionsInput interface {
	pulumi.Input

	ToWindowsSecurityContextOptionsOutput() WindowsSecurityContextOptionsOutput
	ToWindowsSecurityContextOptionsOutputWithContext(context.Context) WindowsSecurityContextOptionsOutput
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (WindowsSecurityContextOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsSecurityContextOptions)(nil)).Elem()
}

func (i WindowsSecurityContextOptionsArgs) ToWindowsSecurityContextOptionsOutput() WindowsSecurityContextOptionsOutput {
	return i.ToWindowsSecurityContextOptionsOutputWithContext(context.Background())
}

func (i WindowsSecurityContextOptionsArgs) ToWindowsSecurityContextOptionsOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsOutput)
}

func (i WindowsSecurityContextOptionsArgs) ToWindowsSecurityContextOptionsPtrOutput() WindowsSecurityContextOptionsPtrOutput {
	return i.ToWindowsSecurityContextOptionsPtrOutputWithContext(context.Background())
}

func (i WindowsSecurityContextOptionsArgs) ToWindowsSecurityContextOptionsPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsOutput).ToWindowsSecurityContextOptionsPtrOutputWithContext(ctx)
}

// WindowsSecurityContextOptionsPtrInput is an input type that accepts WindowsSecurityContextOptionsArgs, WindowsSecurityContextOptionsPtr and WindowsSecurityContextOptionsPtrOutput values.
// You can construct a concrete instance of `WindowsSecurityContextOptionsPtrInput` via:
//
//	        WindowsSecurityContextOptionsArgs{...}
//
//	or:
//
//	        nil
type WindowsSecurityContextOptionsPtrInput interface {
	pulumi.Input

	ToWindowsSecurityContextOptionsPtrOutput() WindowsSecurityContextOptionsPtrOutput
	ToWindowsSecurityContextOptionsPtrOutputWithContext(context.Context) WindowsSecurityContextOptionsPtrOutput
}

type windowsSecurityContextOptionsPtrType WindowsSecurityContextOptionsArgs

func WindowsSecurityContextOptionsPtr(v *WindowsSecurityContextOptionsArgs) WindowsSecurityContextOptionsPtrInput {
	return (*windowsSecurityContextOptionsPtrType)(v)
}

func (*windowsSecurityContextOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsSecurityContextOptions)(nil)).Elem()
}

func (i *windowsSecurityContextOptionsPtrType) ToWindowsSecurityContextOptionsPtrOutput() WindowsSecurityContextOptionsPtrOutput {
	return i.ToWindowsSecurityContextOptionsPtrOutputWithContext(context.Background())
}

func (i *windowsSecurityContextOptionsPtrType) ToWindowsSecurityContextOptionsPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsPtrOutput)
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptionsOutput struct{ *pulumi.OutputState }

func (WindowsSecurityContextOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsSecurityContextOptions)(nil)).Elem()
}

func (o WindowsSecurityContextOptionsOutput) ToWindowsSecurityContextOptionsOutput() WindowsSecurityContextOptionsOutput {
	return o
}

func (o WindowsSecurityContextOptionsOutput) ToWindowsSecurityContextOptionsOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsOutput {
	return o
}

func (o WindowsSecurityContextOptionsOutput) ToWindowsSecurityContextOptionsPtrOutput() WindowsSecurityContextOptionsPtrOutput {
	return o.ToWindowsSecurityContextOptionsPtrOutputWithContext(context.Background())
}

func (o WindowsSecurityContextOptionsOutput) ToWindowsSecurityContextOptionsPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsSecurityContextOptions) *WindowsSecurityContextOptions {
		return &v
	}).(WindowsSecurityContextOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o WindowsSecurityContextOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o WindowsSecurityContextOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptions) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o WindowsSecurityContextOptionsOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptions) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o WindowsSecurityContextOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type WindowsSecurityContextOptionsPtrOutput struct{ *pulumi.OutputState }

func (WindowsSecurityContextOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsSecurityContextOptions)(nil)).Elem()
}

func (o WindowsSecurityContextOptionsPtrOutput) ToWindowsSecurityContextOptionsPtrOutput() WindowsSecurityContextOptionsPtrOutput {
	return o
}

func (o WindowsSecurityContextOptionsPtrOutput) ToWindowsSecurityContextOptionsPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPtrOutput {
	return o
}

func (o WindowsSecurityContextOptionsPtrOutput) Elem() WindowsSecurityContextOptionsOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptions) WindowsSecurityContextOptions {
		if v != nil {
			return *v
		}
		var ret WindowsSecurityContextOptions
		return ret
	}).(WindowsSecurityContextOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o WindowsSecurityContextOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o WindowsSecurityContextOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o WindowsSecurityContextOptionsPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o WindowsSecurityContextOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptionsPatch struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// WindowsSecurityContextOptionsPatchInput is an input type that accepts WindowsSecurityContextOptionsPatchArgs and WindowsSecurityContextOptionsPatchOutput values.
// You can construct a concrete instance of `WindowsSecurityContextOptionsPatchInput` via:
//
//	WindowsSecurityContextOptionsPatchArgs{...}
type WindowsSecurityContextOptionsPatchInput interface {
	pulumi.Input

	ToWindowsSecurityContextOptionsPatchOutput() WindowsSecurityContextOptionsPatchOutput
	ToWindowsSecurityContextOptionsPatchOutputWithContext(context.Context) WindowsSecurityContextOptionsPatchOutput
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptionsPatchArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (WindowsSecurityContextOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsSecurityContextOptionsPatch)(nil)).Elem()
}

func (i WindowsSecurityContextOptionsPatchArgs) ToWindowsSecurityContextOptionsPatchOutput() WindowsSecurityContextOptionsPatchOutput {
	return i.ToWindowsSecurityContextOptionsPatchOutputWithContext(context.Background())
}

func (i WindowsSecurityContextOptionsPatchArgs) ToWindowsSecurityContextOptionsPatchOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsPatchOutput)
}

func (i WindowsSecurityContextOptionsPatchArgs) ToWindowsSecurityContextOptionsPatchPtrOutput() WindowsSecurityContextOptionsPatchPtrOutput {
	return i.ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(context.Background())
}

func (i WindowsSecurityContextOptionsPatchArgs) ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsPatchOutput).ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(ctx)
}

// WindowsSecurityContextOptionsPatchPtrInput is an input type that accepts WindowsSecurityContextOptionsPatchArgs, WindowsSecurityContextOptionsPatchPtr and WindowsSecurityContextOptionsPatchPtrOutput values.
// You can construct a concrete instance of `WindowsSecurityContextOptionsPatchPtrInput` via:
//
//	        WindowsSecurityContextOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type WindowsSecurityContextOptionsPatchPtrInput interface {
	pulumi.Input

	ToWindowsSecurityContextOptionsPatchPtrOutput() WindowsSecurityContextOptionsPatchPtrOutput
	ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(context.Context) WindowsSecurityContextOptionsPatchPtrOutput
}

type windowsSecurityContextOptionsPatchPtrType WindowsSecurityContextOptionsPatchArgs

func WindowsSecurityContextOptionsPatchPtr(v *WindowsSecurityContextOptionsPatchArgs) WindowsSecurityContextOptionsPatchPtrInput {
	return (*windowsSecurityContextOptionsPatchPtrType)(v)
}

func (*windowsSecurityContextOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsSecurityContextOptionsPatch)(nil)).Elem()
}

func (i *windowsSecurityContextOptionsPatchPtrType) ToWindowsSecurityContextOptionsPatchPtrOutput() WindowsSecurityContextOptionsPatchPtrOutput {
	return i.ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *windowsSecurityContextOptionsPatchPtrType) ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsSecurityContextOptionsPatchPtrOutput)
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type WindowsSecurityContextOptionsPatchOutput struct{ *pulumi.OutputState }

func (WindowsSecurityContextOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsSecurityContextOptionsPatch)(nil)).Elem()
}

func (o WindowsSecurityContextOptionsPatchOutput) ToWindowsSecurityContextOptionsPatchOutput() WindowsSecurityContextOptionsPatchOutput {
	return o
}

func (o WindowsSecurityContextOptionsPatchOutput) ToWindowsSecurityContextOptionsPatchOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchOutput {
	return o
}

func (o WindowsSecurityContextOptionsPatchOutput) ToWindowsSecurityContextOptionsPatchPtrOutput() WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(context.Background())
}

func (o WindowsSecurityContextOptionsPatchOutput) ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsSecurityContextOptionsPatch) *WindowsSecurityContextOptionsPatch {
		return &v
	}).(WindowsSecurityContextOptionsPatchPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o WindowsSecurityContextOptionsPatchOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptionsPatch) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o WindowsSecurityContextOptionsPatchOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptionsPatch) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o WindowsSecurityContextOptionsPatchOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptionsPatch) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o WindowsSecurityContextOptionsPatchOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsSecurityContextOptionsPatch) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type WindowsSecurityContextOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (WindowsSecurityContextOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsSecurityContextOptionsPatch)(nil)).Elem()
}

func (o WindowsSecurityContextOptionsPatchPtrOutput) ToWindowsSecurityContextOptionsPatchPtrOutput() WindowsSecurityContextOptionsPatchPtrOutput {
	return o
}

func (o WindowsSecurityContextOptionsPatchPtrOutput) ToWindowsSecurityContextOptionsPatchPtrOutputWithContext(ctx context.Context) WindowsSecurityContextOptionsPatchPtrOutput {
	return o
}

func (o WindowsSecurityContextOptionsPatchPtrOutput) Elem() WindowsSecurityContextOptionsPatchOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptionsPatch) WindowsSecurityContextOptionsPatch {
		if v != nil {
			return *v
		}
		var ret WindowsSecurityContextOptionsPatch
		return ret
	}).(WindowsSecurityContextOptionsPatchOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o WindowsSecurityContextOptionsPatchPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o WindowsSecurityContextOptionsPatchPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o WindowsSecurityContextOptionsPatchPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o WindowsSecurityContextOptionsPatchPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsSecurityContextOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AWSElasticBlockStoreVolumeSourceInput)(nil)).Elem(), AWSElasticBlockStoreVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AWSElasticBlockStoreVolumeSourcePtrInput)(nil)).Elem(), AWSElasticBlockStoreVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AWSElasticBlockStoreVolumeSourcePatchInput)(nil)).Elem(), AWSElasticBlockStoreVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AWSElasticBlockStoreVolumeSourcePatchPtrInput)(nil)).Elem(), AWSElasticBlockStoreVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AffinityInput)(nil)).Elem(), AffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AffinityPtrInput)(nil)).Elem(), AffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AffinityPatchInput)(nil)).Elem(), AffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AffinityPatchPtrInput)(nil)).Elem(), AffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedVolumeInput)(nil)).Elem(), AttachedVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedVolumeArrayInput)(nil)).Elem(), AttachedVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedVolumePatchInput)(nil)).Elem(), AttachedVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedVolumePatchArrayInput)(nil)).Elem(), AttachedVolumePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDiskVolumeSourceInput)(nil)).Elem(), AzureDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDiskVolumeSourcePtrInput)(nil)).Elem(), AzureDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDiskVolumeSourcePatchInput)(nil)).Elem(), AzureDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDiskVolumeSourcePatchPtrInput)(nil)).Elem(), AzureDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFilePersistentVolumeSourceInput)(nil)).Elem(), AzureFilePersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFilePersistentVolumeSourcePtrInput)(nil)).Elem(), AzureFilePersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFilePersistentVolumeSourcePatchInput)(nil)).Elem(), AzureFilePersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFilePersistentVolumeSourcePatchPtrInput)(nil)).Elem(), AzureFilePersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFileVolumeSourceInput)(nil)).Elem(), AzureFileVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFileVolumeSourcePtrInput)(nil)).Elem(), AzureFileVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFileVolumeSourcePatchInput)(nil)).Elem(), AzureFileVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureFileVolumeSourcePatchPtrInput)(nil)).Elem(), AzureFileVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingTypeInput)(nil)).Elem(), BindingTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingPatchTypeInput)(nil)).Elem(), BindingPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIPersistentVolumeSourceInput)(nil)).Elem(), CSIPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIPersistentVolumeSourcePtrInput)(nil)).Elem(), CSIPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIPersistentVolumeSourcePatchInput)(nil)).Elem(), CSIPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), CSIPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIVolumeSourceInput)(nil)).Elem(), CSIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIVolumeSourcePtrInput)(nil)).Elem(), CSIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIVolumeSourcePatchInput)(nil)).Elem(), CSIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIVolumeSourcePatchPtrInput)(nil)).Elem(), CSIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilitiesInput)(nil)).Elem(), CapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilitiesPtrInput)(nil)).Elem(), CapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilitiesPatchInput)(nil)).Elem(), CapabilitiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilitiesPatchPtrInput)(nil)).Elem(), CapabilitiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSPersistentVolumeSourceInput)(nil)).Elem(), CephFSPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSPersistentVolumeSourcePtrInput)(nil)).Elem(), CephFSPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSPersistentVolumeSourcePatchInput)(nil)).Elem(), CephFSPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), CephFSPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSVolumeSourceInput)(nil)).Elem(), CephFSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSVolumeSourcePtrInput)(nil)).Elem(), CephFSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSVolumeSourcePatchInput)(nil)).Elem(), CephFSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CephFSVolumeSourcePatchPtrInput)(nil)).Elem(), CephFSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderPersistentVolumeSourceInput)(nil)).Elem(), CinderPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderPersistentVolumeSourcePtrInput)(nil)).Elem(), CinderPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderPersistentVolumeSourcePatchInput)(nil)).Elem(), CinderPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), CinderPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderVolumeSourceInput)(nil)).Elem(), CinderVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderVolumeSourcePtrInput)(nil)).Elem(), CinderVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderVolumeSourcePatchInput)(nil)).Elem(), CinderVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CinderVolumeSourcePatchPtrInput)(nil)).Elem(), CinderVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimSourceInput)(nil)).Elem(), ClaimSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimSourcePtrInput)(nil)).Elem(), ClaimSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimSourcePatchInput)(nil)).Elem(), ClaimSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimSourcePatchPtrInput)(nil)).Elem(), ClaimSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientIPConfigInput)(nil)).Elem(), ClientIPConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientIPConfigPtrInput)(nil)).Elem(), ClientIPConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientIPConfigPatchInput)(nil)).Elem(), ClientIPConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientIPConfigPatchPtrInput)(nil)).Elem(), ClientIPConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionInput)(nil)).Elem(), ComponentConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionArrayInput)(nil)).Elem(), ComponentConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionPatchInput)(nil)).Elem(), ComponentConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionPatchArrayInput)(nil)).Elem(), ComponentConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentStatusInput)(nil)).Elem(), ComponentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentStatusArrayInput)(nil)).Elem(), ComponentStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentStatusListInput)(nil)).Elem(), ComponentStatusListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentStatusPatchInput)(nil)).Elem(), ComponentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapTypeInput)(nil)).Elem(), ConfigMapTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapTypeArrayInput)(nil)).Elem(), ConfigMapTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourceInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourcePtrInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourcePatchInput)(nil)).Elem(), ConfigMapEnvSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourcePatchPtrInput)(nil)).Elem(), ConfigMapEnvSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorPtrInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorPatchInput)(nil)).Elem(), ConfigMapKeySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorPatchPtrInput)(nil)).Elem(), ConfigMapKeySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapListTypeInput)(nil)).Elem(), ConfigMapListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapNodeConfigSourceInput)(nil)).Elem(), ConfigMapNodeConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapNodeConfigSourcePtrInput)(nil)).Elem(), ConfigMapNodeConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapNodeConfigSourcePatchInput)(nil)).Elem(), ConfigMapNodeConfigSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapNodeConfigSourcePatchPtrInput)(nil)).Elem(), ConfigMapNodeConfigSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapPatchTypeInput)(nil)).Elem(), ConfigMapPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapProjectionInput)(nil)).Elem(), ConfigMapProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapProjectionPtrInput)(nil)).Elem(), ConfigMapProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapProjectionPatchInput)(nil)).Elem(), ConfigMapProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapProjectionPatchPtrInput)(nil)).Elem(), ConfigMapProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourceInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourcePtrInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourcePatchInput)(nil)).Elem(), ConfigMapVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourcePatchPtrInput)(nil)).Elem(), ConfigMapVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageArrayInput)(nil)).Elem(), ContainerImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImagePatchInput)(nil)).Elem(), ContainerImagePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImagePatchArrayInput)(nil)).Elem(), ContainerImagePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPatchInput)(nil)).Elem(), ContainerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPatchArrayInput)(nil)).Elem(), ContainerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortInput)(nil)).Elem(), ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortArrayInput)(nil)).Elem(), ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortPatchInput)(nil)).Elem(), ContainerPortPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortPatchArrayInput)(nil)).Elem(), ContainerPortPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateInput)(nil)).Elem(), ContainerStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatePtrInput)(nil)).Elem(), ContainerStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatePatchInput)(nil)).Elem(), ContainerStatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatePatchPtrInput)(nil)).Elem(), ContainerStatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateRunningInput)(nil)).Elem(), ContainerStateRunningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateRunningPtrInput)(nil)).Elem(), ContainerStateRunningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateRunningPatchInput)(nil)).Elem(), ContainerStateRunningPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateRunningPatchPtrInput)(nil)).Elem(), ContainerStateRunningPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateTerminatedInput)(nil)).Elem(), ContainerStateTerminatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateTerminatedPtrInput)(nil)).Elem(), ContainerStateTerminatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateTerminatedPatchInput)(nil)).Elem(), ContainerStateTerminatedPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateTerminatedPatchPtrInput)(nil)).Elem(), ContainerStateTerminatedPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateWaitingInput)(nil)).Elem(), ContainerStateWaitingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateWaitingPtrInput)(nil)).Elem(), ContainerStateWaitingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateWaitingPatchInput)(nil)).Elem(), ContainerStateWaitingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStateWaitingPatchPtrInput)(nil)).Elem(), ContainerStateWaitingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatusInput)(nil)).Elem(), ContainerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatusArrayInput)(nil)).Elem(), ContainerStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatusPatchInput)(nil)).Elem(), ContainerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerStatusPatchArrayInput)(nil)).Elem(), ContainerStatusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DaemonEndpointInput)(nil)).Elem(), DaemonEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DaemonEndpointPtrInput)(nil)).Elem(), DaemonEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DaemonEndpointPatchInput)(nil)).Elem(), DaemonEndpointPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DaemonEndpointPatchPtrInput)(nil)).Elem(), DaemonEndpointPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIProjectionInput)(nil)).Elem(), DownwardAPIProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIProjectionPtrInput)(nil)).Elem(), DownwardAPIProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIProjectionPatchInput)(nil)).Elem(), DownwardAPIProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIProjectionPatchPtrInput)(nil)).Elem(), DownwardAPIProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeFileInput)(nil)).Elem(), DownwardAPIVolumeFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeFileArrayInput)(nil)).Elem(), DownwardAPIVolumeFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeFilePatchInput)(nil)).Elem(), DownwardAPIVolumeFilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeFilePatchArrayInput)(nil)).Elem(), DownwardAPIVolumeFilePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeSourceInput)(nil)).Elem(), DownwardAPIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeSourcePtrInput)(nil)).Elem(), DownwardAPIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeSourcePatchInput)(nil)).Elem(), DownwardAPIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownwardAPIVolumeSourcePatchPtrInput)(nil)).Elem(), DownwardAPIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourceInput)(nil)).Elem(), EmptyDirVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourcePtrInput)(nil)).Elem(), EmptyDirVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourcePatchInput)(nil)).Elem(), EmptyDirVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourcePatchPtrInput)(nil)).Elem(), EmptyDirVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAddressInput)(nil)).Elem(), EndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAddressArrayInput)(nil)).Elem(), EndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAddressPatchInput)(nil)).Elem(), EndpointAddressPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAddressPatchArrayInput)(nil)).Elem(), EndpointAddressPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortInput)(nil)).Elem(), EndpointPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortArrayInput)(nil)).Elem(), EndpointPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortPatchInput)(nil)).Elem(), EndpointPortPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPortPatchArrayInput)(nil)).Elem(), EndpointPortPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSubsetInput)(nil)).Elem(), EndpointSubsetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSubsetArrayInput)(nil)).Elem(), EndpointSubsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSubsetPatchInput)(nil)).Elem(), EndpointSubsetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSubsetPatchArrayInput)(nil)).Elem(), EndpointSubsetPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsTypeInput)(nil)).Elem(), EndpointsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsTypeArrayInput)(nil)).Elem(), EndpointsTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsListTypeInput)(nil)).Elem(), EndpointsListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsPatchTypeInput)(nil)).Elem(), EndpointsPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceInput)(nil)).Elem(), EnvFromSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceArrayInput)(nil)).Elem(), EnvFromSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourcePatchInput)(nil)).Elem(), EnvFromSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourcePatchArrayInput)(nil)).Elem(), EnvFromSourcePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarInput)(nil)).Elem(), EnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarArrayInput)(nil)).Elem(), EnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarPatchInput)(nil)).Elem(), EnvVarPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarPatchArrayInput)(nil)).Elem(), EnvVarPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourceInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourcePtrInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourcePatchInput)(nil)).Elem(), EnvVarSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourcePatchPtrInput)(nil)).Elem(), EnvVarSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralContainerInput)(nil)).Elem(), EphemeralContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralContainerArrayInput)(nil)).Elem(), EphemeralContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralContainerPatchInput)(nil)).Elem(), EphemeralContainerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralContainerPatchArrayInput)(nil)).Elem(), EphemeralContainerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralVolumeSourceInput)(nil)).Elem(), EphemeralVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralVolumeSourcePtrInput)(nil)).Elem(), EphemeralVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralVolumeSourcePatchInput)(nil)).Elem(), EphemeralVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralVolumeSourcePatchPtrInput)(nil)).Elem(), EphemeralVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeInput)(nil)).Elem(), EventTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeArrayInput)(nil)).Elem(), EventTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventListTypeInput)(nil)).Elem(), EventListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventPatchTypeInput)(nil)).Elem(), EventPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSeriesInput)(nil)).Elem(), EventSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSeriesPtrInput)(nil)).Elem(), EventSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSeriesPatchInput)(nil)).Elem(), EventSeriesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSeriesPatchPtrInput)(nil)).Elem(), EventSeriesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceInput)(nil)).Elem(), EventSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePtrInput)(nil)).Elem(), EventSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchInput)(nil)).Elem(), EventSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchPtrInput)(nil)).Elem(), EventSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionPtrInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionPatchInput)(nil)).Elem(), ExecActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionPatchPtrInput)(nil)).Elem(), ExecActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FCVolumeSourceInput)(nil)).Elem(), FCVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FCVolumeSourcePtrInput)(nil)).Elem(), FCVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FCVolumeSourcePatchInput)(nil)).Elem(), FCVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FCVolumeSourcePatchPtrInput)(nil)).Elem(), FCVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexPersistentVolumeSourceInput)(nil)).Elem(), FlexPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexPersistentVolumeSourcePtrInput)(nil)).Elem(), FlexPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexPersistentVolumeSourcePatchInput)(nil)).Elem(), FlexPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), FlexPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexVolumeSourceInput)(nil)).Elem(), FlexVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexVolumeSourcePtrInput)(nil)).Elem(), FlexVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexVolumeSourcePatchInput)(nil)).Elem(), FlexVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexVolumeSourcePatchPtrInput)(nil)).Elem(), FlexVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlockerVolumeSourceInput)(nil)).Elem(), FlockerVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlockerVolumeSourcePtrInput)(nil)).Elem(), FlockerVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlockerVolumeSourcePatchInput)(nil)).Elem(), FlockerVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlockerVolumeSourcePatchPtrInput)(nil)).Elem(), FlockerVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCEPersistentDiskVolumeSourceInput)(nil)).Elem(), GCEPersistentDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCEPersistentDiskVolumeSourcePtrInput)(nil)).Elem(), GCEPersistentDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCEPersistentDiskVolumeSourcePatchInput)(nil)).Elem(), GCEPersistentDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCEPersistentDiskVolumeSourcePatchPtrInput)(nil)).Elem(), GCEPersistentDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionInput)(nil)).Elem(), GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionPtrInput)(nil)).Elem(), GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionPatchInput)(nil)).Elem(), GRPCActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionPatchPtrInput)(nil)).Elem(), GRPCActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoVolumeSourceInput)(nil)).Elem(), GitRepoVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoVolumeSourcePtrInput)(nil)).Elem(), GitRepoVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoVolumeSourcePatchInput)(nil)).Elem(), GitRepoVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoVolumeSourcePatchPtrInput)(nil)).Elem(), GitRepoVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsPersistentVolumeSourceInput)(nil)).Elem(), GlusterfsPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsPersistentVolumeSourcePtrInput)(nil)).Elem(), GlusterfsPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsPersistentVolumeSourcePatchInput)(nil)).Elem(), GlusterfsPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), GlusterfsPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsVolumeSourceInput)(nil)).Elem(), GlusterfsVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsVolumeSourcePtrInput)(nil)).Elem(), GlusterfsVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsVolumeSourcePatchInput)(nil)).Elem(), GlusterfsVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlusterfsVolumeSourcePatchPtrInput)(nil)).Elem(), GlusterfsVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionPtrInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionPatchInput)(nil)).Elem(), HTTPGetActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionPatchPtrInput)(nil)).Elem(), HTTPGetActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderInput)(nil)).Elem(), HTTPHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderArrayInput)(nil)).Elem(), HTTPHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderPatchInput)(nil)).Elem(), HTTPHeaderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderPatchArrayInput)(nil)).Elem(), HTTPHeaderPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HandlerInput)(nil)).Elem(), HandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HandlerPatchInput)(nil)).Elem(), HandlerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasInput)(nil)).Elem(), HostAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasArrayInput)(nil)).Elem(), HostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasPatchInput)(nil)).Elem(), HostAliasPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasPatchArrayInput)(nil)).Elem(), HostAliasPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPathVolumeSourceInput)(nil)).Elem(), HostPathVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPathVolumeSourcePtrInput)(nil)).Elem(), HostPathVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPathVolumeSourcePatchInput)(nil)).Elem(), HostPathVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPathVolumeSourcePatchPtrInput)(nil)).Elem(), HostPathVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIPersistentVolumeSourceInput)(nil)).Elem(), ISCSIPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIPersistentVolumeSourcePtrInput)(nil)).Elem(), ISCSIPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIPersistentVolumeSourcePatchInput)(nil)).Elem(), ISCSIPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), ISCSIPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIVolumeSourceInput)(nil)).Elem(), ISCSIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIVolumeSourcePtrInput)(nil)).Elem(), ISCSIVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIVolumeSourcePatchInput)(nil)).Elem(), ISCSIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ISCSIVolumeSourcePatchPtrInput)(nil)).Elem(), ISCSIVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathInput)(nil)).Elem(), KeyToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathArrayInput)(nil)).Elem(), KeyToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathPatchInput)(nil)).Elem(), KeyToPathPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathPatchArrayInput)(nil)).Elem(), KeyToPathPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleInput)(nil)).Elem(), LifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePtrInput)(nil)).Elem(), LifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHandlerInput)(nil)).Elem(), LifecycleHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHandlerPtrInput)(nil)).Elem(), LifecycleHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHandlerPatchInput)(nil)).Elem(), LifecycleHandlerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHandlerPatchPtrInput)(nil)).Elem(), LifecycleHandlerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePatchInput)(nil)).Elem(), LifecyclePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePatchPtrInput)(nil)).Elem(), LifecyclePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeTypeInput)(nil)).Elem(), LimitRangeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeTypeArrayInput)(nil)).Elem(), LimitRangeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeItemInput)(nil)).Elem(), LimitRangeItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeItemArrayInput)(nil)).Elem(), LimitRangeItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeItemPatchInput)(nil)).Elem(), LimitRangeItemPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeItemPatchArrayInput)(nil)).Elem(), LimitRangeItemPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeListTypeInput)(nil)).Elem(), LimitRangeListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangePatchTypeInput)(nil)).Elem(), LimitRangePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeSpecInput)(nil)).Elem(), LimitRangeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeSpecPtrInput)(nil)).Elem(), LimitRangeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeSpecPatchInput)(nil)).Elem(), LimitRangeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitRangeSpecPatchPtrInput)(nil)).Elem(), LimitRangeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIngressInput)(nil)).Elem(), LoadBalancerIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIngressArrayInput)(nil)).Elem(), LoadBalancerIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIngressPatchInput)(nil)).Elem(), LoadBalancerIngressPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIngressPatchArrayInput)(nil)).Elem(), LoadBalancerIngressPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerStatusInput)(nil)).Elem(), LoadBalancerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerStatusPtrInput)(nil)).Elem(), LoadBalancerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerStatusPatchInput)(nil)).Elem(), LoadBalancerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerStatusPatchPtrInput)(nil)).Elem(), LoadBalancerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePtrInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceArrayInput)(nil)).Elem(), LocalObjectReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePatchInput)(nil)).Elem(), LocalObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePatchPtrInput)(nil)).Elem(), LocalObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePatchArrayInput)(nil)).Elem(), LocalObjectReferencePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVolumeSourceInput)(nil)).Elem(), LocalVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVolumeSourcePtrInput)(nil)).Elem(), LocalVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVolumeSourcePatchInput)(nil)).Elem(), LocalVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVolumeSourcePatchPtrInput)(nil)).Elem(), LocalVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NFSVolumeSourceInput)(nil)).Elem(), NFSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NFSVolumeSourcePtrInput)(nil)).Elem(), NFSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NFSVolumeSourcePatchInput)(nil)).Elem(), NFSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NFSVolumeSourcePatchPtrInput)(nil)).Elem(), NFSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTypeInput)(nil)).Elem(), NamespaceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTypeArrayInput)(nil)).Elem(), NamespaceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConditionInput)(nil)).Elem(), NamespaceConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConditionArrayInput)(nil)).Elem(), NamespaceConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConditionPatchInput)(nil)).Elem(), NamespaceConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConditionPatchArrayInput)(nil)).Elem(), NamespaceConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceListTypeInput)(nil)).Elem(), NamespaceListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacePatchTypeInput)(nil)).Elem(), NamespacePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSpecInput)(nil)).Elem(), NamespaceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSpecPtrInput)(nil)).Elem(), NamespaceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSpecPatchInput)(nil)).Elem(), NamespaceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSpecPatchPtrInput)(nil)).Elem(), NamespaceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceStatusInput)(nil)).Elem(), NamespaceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceStatusPtrInput)(nil)).Elem(), NamespaceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceStatusPatchInput)(nil)).Elem(), NamespaceStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceStatusPatchPtrInput)(nil)).Elem(), NamespaceStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTypeInput)(nil)).Elem(), NodeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTypeArrayInput)(nil)).Elem(), NodeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAddressInput)(nil)).Elem(), NodeAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAddressArrayInput)(nil)).Elem(), NodeAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAddressPatchInput)(nil)).Elem(), NodeAddressPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAddressPatchArrayInput)(nil)).Elem(), NodeAddressPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityInput)(nil)).Elem(), NodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityPtrInput)(nil)).Elem(), NodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityPatchInput)(nil)).Elem(), NodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityPatchPtrInput)(nil)).Elem(), NodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConditionInput)(nil)).Elem(), NodeConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConditionArrayInput)(nil)).Elem(), NodeConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConditionPatchInput)(nil)).Elem(), NodeConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConditionPatchArrayInput)(nil)).Elem(), NodeConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigSourceInput)(nil)).Elem(), NodeConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigSourcePtrInput)(nil)).Elem(), NodeConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigSourcePatchInput)(nil)).Elem(), NodeConfigSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigSourcePatchPtrInput)(nil)).Elem(), NodeConfigSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigStatusInput)(nil)).Elem(), NodeConfigStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigStatusPtrInput)(nil)).Elem(), NodeConfigStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigStatusPatchInput)(nil)).Elem(), NodeConfigStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigStatusPatchPtrInput)(nil)).Elem(), NodeConfigStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDaemonEndpointsInput)(nil)).Elem(), NodeDaemonEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDaemonEndpointsPtrInput)(nil)).Elem(), NodeDaemonEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDaemonEndpointsPatchInput)(nil)).Elem(), NodeDaemonEndpointsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDaemonEndpointsPatchPtrInput)(nil)).Elem(), NodeDaemonEndpointsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeListTypeInput)(nil)).Elem(), NodeListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePatchTypeInput)(nil)).Elem(), NodePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorInput)(nil)).Elem(), NodeSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorPtrInput)(nil)).Elem(), NodeSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorPatchInput)(nil)).Elem(), NodeSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorPatchPtrInput)(nil)).Elem(), NodeSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorRequirementInput)(nil)).Elem(), NodeSelectorRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorRequirementArrayInput)(nil)).Elem(), NodeSelectorRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorRequirementPatchInput)(nil)).Elem(), NodeSelectorRequirementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorRequirementPatchArrayInput)(nil)).Elem(), NodeSelectorRequirementPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorTermInput)(nil)).Elem(), NodeSelectorTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorTermArrayInput)(nil)).Elem(), NodeSelectorTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorTermPatchInput)(nil)).Elem(), NodeSelectorTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorTermPatchPtrInput)(nil)).Elem(), NodeSelectorTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSelectorTermPatchArrayInput)(nil)).Elem(), NodeSelectorTermPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecInput)(nil)).Elem(), NodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecPtrInput)(nil)).Elem(), NodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecPatchInput)(nil)).Elem(), NodeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecPatchPtrInput)(nil)).Elem(), NodeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStatusInput)(nil)).Elem(), NodeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStatusPtrInput)(nil)).Elem(), NodeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStatusPatchInput)(nil)).Elem(), NodeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStatusPatchPtrInput)(nil)).Elem(), NodeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSystemInfoInput)(nil)).Elem(), NodeSystemInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSystemInfoPtrInput)(nil)).Elem(), NodeSystemInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSystemInfoPatchInput)(nil)).Elem(), NodeSystemInfoPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSystemInfoPatchPtrInput)(nil)).Elem(), NodeSystemInfoPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectFieldSelectorInput)(nil)).Elem(), ObjectFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectFieldSelectorPtrInput)(nil)).Elem(), ObjectFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectFieldSelectorPatchInput)(nil)).Elem(), ObjectFieldSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectFieldSelectorPatchPtrInput)(nil)).Elem(), ObjectFieldSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferenceInput)(nil)).Elem(), ObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferencePtrInput)(nil)).Elem(), ObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferenceArrayInput)(nil)).Elem(), ObjectReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferencePatchInput)(nil)).Elem(), ObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferencePatchPtrInput)(nil)).Elem(), ObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectReferencePatchArrayInput)(nil)).Elem(), ObjectReferencePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeTypeInput)(nil)).Elem(), PersistentVolumeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeTypeArrayInput)(nil)).Elem(), PersistentVolumeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTypeInput)(nil)).Elem(), PersistentVolumeClaimTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTypeArrayInput)(nil)).Elem(), PersistentVolumeClaimTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimConditionInput)(nil)).Elem(), PersistentVolumeClaimConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimConditionArrayInput)(nil)).Elem(), PersistentVolumeClaimConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimConditionPatchInput)(nil)).Elem(), PersistentVolumeClaimConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimConditionPatchArrayInput)(nil)).Elem(), PersistentVolumeClaimConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimListTypeInput)(nil)).Elem(), PersistentVolumeClaimListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimPatchTypeInput)(nil)).Elem(), PersistentVolumeClaimPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimPatchTypeArrayInput)(nil)).Elem(), PersistentVolumeClaimPatchTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimSpecInput)(nil)).Elem(), PersistentVolumeClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimSpecPtrInput)(nil)).Elem(), PersistentVolumeClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimSpecPatchInput)(nil)).Elem(), PersistentVolumeClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimSpecPatchPtrInput)(nil)).Elem(), PersistentVolumeClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimStatusInput)(nil)).Elem(), PersistentVolumeClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimStatusPtrInput)(nil)).Elem(), PersistentVolumeClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimStatusPatchInput)(nil)).Elem(), PersistentVolumeClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimStatusPatchPtrInput)(nil)).Elem(), PersistentVolumeClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTemplateInput)(nil)).Elem(), PersistentVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTemplatePtrInput)(nil)).Elem(), PersistentVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTemplatePatchInput)(nil)).Elem(), PersistentVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimTemplatePatchPtrInput)(nil)).Elem(), PersistentVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimVolumeSourceInput)(nil)).Elem(), PersistentVolumeClaimVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimVolumeSourcePtrInput)(nil)).Elem(), PersistentVolumeClaimVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimVolumeSourcePatchInput)(nil)).Elem(), PersistentVolumeClaimVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeClaimVolumeSourcePatchPtrInput)(nil)).Elem(), PersistentVolumeClaimVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeListTypeInput)(nil)).Elem(), PersistentVolumeListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumePatchTypeInput)(nil)).Elem(), PersistentVolumePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeSpecInput)(nil)).Elem(), PersistentVolumeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeSpecPtrInput)(nil)).Elem(), PersistentVolumeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeSpecPatchInput)(nil)).Elem(), PersistentVolumeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeSpecPatchPtrInput)(nil)).Elem(), PersistentVolumeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeStatusInput)(nil)).Elem(), PersistentVolumeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeStatusPtrInput)(nil)).Elem(), PersistentVolumeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeStatusPatchInput)(nil)).Elem(), PersistentVolumeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentVolumeStatusPatchPtrInput)(nil)).Elem(), PersistentVolumeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhotonPersistentDiskVolumeSourceInput)(nil)).Elem(), PhotonPersistentDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhotonPersistentDiskVolumeSourcePtrInput)(nil)).Elem(), PhotonPersistentDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhotonPersistentDiskVolumeSourcePatchInput)(nil)).Elem(), PhotonPersistentDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhotonPersistentDiskVolumeSourcePatchPtrInput)(nil)).Elem(), PhotonPersistentDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTypeInput)(nil)).Elem(), PodTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTypeArrayInput)(nil)).Elem(), PodTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityInput)(nil)).Elem(), PodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityPtrInput)(nil)).Elem(), PodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityPatchInput)(nil)).Elem(), PodAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityPatchPtrInput)(nil)).Elem(), PodAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityTermInput)(nil)).Elem(), PodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityTermArrayInput)(nil)).Elem(), PodAffinityTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityTermPatchInput)(nil)).Elem(), PodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityTermPatchPtrInput)(nil)).Elem(), PodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAffinityTermPatchArrayInput)(nil)).Elem(), PodAffinityTermPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAntiAffinityInput)(nil)).Elem(), PodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAntiAffinityPtrInput)(nil)).Elem(), PodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAntiAffinityPatchInput)(nil)).Elem(), PodAntiAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodAntiAffinityPatchPtrInput)(nil)).Elem(), PodAntiAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodConditionInput)(nil)).Elem(), PodConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodConditionArrayInput)(nil)).Elem(), PodConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodConditionPatchInput)(nil)).Elem(), PodConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodConditionPatchArrayInput)(nil)).Elem(), PodConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigInput)(nil)).Elem(), PodDNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigPtrInput)(nil)).Elem(), PodDNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigOptionInput)(nil)).Elem(), PodDNSConfigOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigOptionArrayInput)(nil)).Elem(), PodDNSConfigOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigOptionPatchInput)(nil)).Elem(), PodDNSConfigOptionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigOptionPatchArrayInput)(nil)).Elem(), PodDNSConfigOptionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigPatchInput)(nil)).Elem(), PodDNSConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodDNSConfigPatchPtrInput)(nil)).Elem(), PodDNSConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodIPInput)(nil)).Elem(), PodIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodIPArrayInput)(nil)).Elem(), PodIPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodIPPatchInput)(nil)).Elem(), PodIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodIPPatchArrayInput)(nil)).Elem(), PodIPPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodListTypeInput)(nil)).Elem(), PodListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodOSInput)(nil)).Elem(), PodOSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodOSPtrInput)(nil)).Elem(), PodOSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodOSPatchInput)(nil)).Elem(), PodOSPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodOSPatchPtrInput)(nil)).Elem(), PodOSPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodPatchTypeInput)(nil)).Elem(), PodPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodReadinessGateInput)(nil)).Elem(), PodReadinessGateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodReadinessGateArrayInput)(nil)).Elem(), PodReadinessGateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodReadinessGatePatchInput)(nil)).Elem(), PodReadinessGatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodReadinessGatePatchArrayInput)(nil)).Elem(), PodReadinessGatePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodResourceClaimInput)(nil)).Elem(), PodResourceClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodResourceClaimArrayInput)(nil)).Elem(), PodResourceClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodResourceClaimPatchInput)(nil)).Elem(), PodResourceClaimPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodResourceClaimPatchArrayInput)(nil)).Elem(), PodResourceClaimPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingGateInput)(nil)).Elem(), PodSchedulingGateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingGateArrayInput)(nil)).Elem(), PodSchedulingGateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingGatePatchInput)(nil)).Elem(), PodSchedulingGatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingGatePatchArrayInput)(nil)).Elem(), PodSchedulingGatePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityContextInput)(nil)).Elem(), PodSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityContextPtrInput)(nil)).Elem(), PodSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityContextPatchInput)(nil)).Elem(), PodSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSecurityContextPatchPtrInput)(nil)).Elem(), PodSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSpecInput)(nil)).Elem(), PodSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSpecPtrInput)(nil)).Elem(), PodSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSpecPatchInput)(nil)).Elem(), PodSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSpecPatchPtrInput)(nil)).Elem(), PodSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodStatusInput)(nil)).Elem(), PodStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodStatusPtrInput)(nil)).Elem(), PodStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodStatusPatchInput)(nil)).Elem(), PodStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodStatusPatchPtrInput)(nil)).Elem(), PodStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateTypeInput)(nil)).Elem(), PodTemplateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateTypeArrayInput)(nil)).Elem(), PodTemplateTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateListTypeInput)(nil)).Elem(), PodTemplateListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplatePatchTypeInput)(nil)).Elem(), PodTemplatePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateSpecInput)(nil)).Elem(), PodTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateSpecPtrInput)(nil)).Elem(), PodTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateSpecPatchInput)(nil)).Elem(), PodTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodTemplateSpecPatchPtrInput)(nil)).Elem(), PodTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortStatusInput)(nil)).Elem(), PortStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortStatusArrayInput)(nil)).Elem(), PortStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortStatusPatchInput)(nil)).Elem(), PortStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortStatusPatchArrayInput)(nil)).Elem(), PortStatusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortworxVolumeSourceInput)(nil)).Elem(), PortworxVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortworxVolumeSourcePtrInput)(nil)).Elem(), PortworxVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortworxVolumeSourcePatchInput)(nil)).Elem(), PortworxVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortworxVolumeSourcePatchPtrInput)(nil)).Elem(), PortworxVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferredSchedulingTermInput)(nil)).Elem(), PreferredSchedulingTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferredSchedulingTermArrayInput)(nil)).Elem(), PreferredSchedulingTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferredSchedulingTermPatchInput)(nil)).Elem(), PreferredSchedulingTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferredSchedulingTermPatchArrayInput)(nil)).Elem(), PreferredSchedulingTermPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePtrInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePatchInput)(nil)).Elem(), ProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePatchPtrInput)(nil)).Elem(), ProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectedVolumeSourceInput)(nil)).Elem(), ProjectedVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectedVolumeSourcePtrInput)(nil)).Elem(), ProjectedVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectedVolumeSourcePatchInput)(nil)).Elem(), ProjectedVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectedVolumeSourcePatchPtrInput)(nil)).Elem(), ProjectedVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuobyteVolumeSourceInput)(nil)).Elem(), QuobyteVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuobyteVolumeSourcePtrInput)(nil)).Elem(), QuobyteVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuobyteVolumeSourcePatchInput)(nil)).Elem(), QuobyteVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuobyteVolumeSourcePatchPtrInput)(nil)).Elem(), QuobyteVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDPersistentVolumeSourceInput)(nil)).Elem(), RBDPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDPersistentVolumeSourcePtrInput)(nil)).Elem(), RBDPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDPersistentVolumeSourcePatchInput)(nil)).Elem(), RBDPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), RBDPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDVolumeSourceInput)(nil)).Elem(), RBDVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDVolumeSourcePtrInput)(nil)).Elem(), RBDVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDVolumeSourcePatchInput)(nil)).Elem(), RBDVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RBDVolumeSourcePatchPtrInput)(nil)).Elem(), RBDVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerTypeInput)(nil)).Elem(), ReplicationControllerTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerTypeArrayInput)(nil)).Elem(), ReplicationControllerTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerConditionInput)(nil)).Elem(), ReplicationControllerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerConditionArrayInput)(nil)).Elem(), ReplicationControllerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerConditionPatchInput)(nil)).Elem(), ReplicationControllerConditionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerConditionPatchArrayInput)(nil)).Elem(), ReplicationControllerConditionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerListTypeInput)(nil)).Elem(), ReplicationControllerListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerPatchTypeInput)(nil)).Elem(), ReplicationControllerPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerSpecInput)(nil)).Elem(), ReplicationControllerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerSpecPtrInput)(nil)).Elem(), ReplicationControllerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerSpecPatchInput)(nil)).Elem(), ReplicationControllerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerSpecPatchPtrInput)(nil)).Elem(), ReplicationControllerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerStatusInput)(nil)).Elem(), ReplicationControllerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerStatusPtrInput)(nil)).Elem(), ReplicationControllerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerStatusPatchInput)(nil)).Elem(), ReplicationControllerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationControllerStatusPatchPtrInput)(nil)).Elem(), ReplicationControllerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimInput)(nil)).Elem(), ResourceClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimArrayInput)(nil)).Elem(), ResourceClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimPatchInput)(nil)).Elem(), ResourceClaimPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimPatchArrayInput)(nil)).Elem(), ResourceClaimPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFieldSelectorInput)(nil)).Elem(), ResourceFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFieldSelectorPtrInput)(nil)).Elem(), ResourceFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFieldSelectorPatchInput)(nil)).Elem(), ResourceFieldSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFieldSelectorPatchPtrInput)(nil)).Elem(), ResourceFieldSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaTypeInput)(nil)).Elem(), ResourceQuotaTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaTypeArrayInput)(nil)).Elem(), ResourceQuotaTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaListTypeInput)(nil)).Elem(), ResourceQuotaListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaPatchTypeInput)(nil)).Elem(), ResourceQuotaPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaSpecInput)(nil)).Elem(), ResourceQuotaSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaSpecPtrInput)(nil)).Elem(), ResourceQuotaSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaSpecPatchInput)(nil)).Elem(), ResourceQuotaSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaSpecPatchPtrInput)(nil)).Elem(), ResourceQuotaSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaStatusInput)(nil)).Elem(), ResourceQuotaStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaStatusPtrInput)(nil)).Elem(), ResourceQuotaStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaStatusPatchInput)(nil)).Elem(), ResourceQuotaStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceQuotaStatusPatchPtrInput)(nil)).Elem(), ResourceQuotaStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsPtrInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsPatchInput)(nil)).Elem(), ResourceRequirementsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsPatchPtrInput)(nil)).Elem(), ResourceRequirementsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SELinuxOptionsInput)(nil)).Elem(), SELinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SELinuxOptionsPtrInput)(nil)).Elem(), SELinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SELinuxOptionsPatchInput)(nil)).Elem(), SELinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SELinuxOptionsPatchPtrInput)(nil)).Elem(), SELinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOPersistentVolumeSourceInput)(nil)).Elem(), ScaleIOPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOPersistentVolumeSourcePtrInput)(nil)).Elem(), ScaleIOPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOPersistentVolumeSourcePatchInput)(nil)).Elem(), ScaleIOPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), ScaleIOPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOVolumeSourceInput)(nil)).Elem(), ScaleIOVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOVolumeSourcePtrInput)(nil)).Elem(), ScaleIOVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOVolumeSourcePatchInput)(nil)).Elem(), ScaleIOVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleIOVolumeSourcePatchPtrInput)(nil)).Elem(), ScaleIOVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeSelectorInput)(nil)).Elem(), ScopeSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeSelectorPtrInput)(nil)).Elem(), ScopeSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeSelectorPatchInput)(nil)).Elem(), ScopeSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeSelectorPatchPtrInput)(nil)).Elem(), ScopeSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedResourceSelectorRequirementInput)(nil)).Elem(), ScopedResourceSelectorRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedResourceSelectorRequirementArrayInput)(nil)).Elem(), ScopedResourceSelectorRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedResourceSelectorRequirementPatchInput)(nil)).Elem(), ScopedResourceSelectorRequirementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedResourceSelectorRequirementPatchArrayInput)(nil)).Elem(), ScopedResourceSelectorRequirementPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeccompProfileInput)(nil)).Elem(), SeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeccompProfilePtrInput)(nil)).Elem(), SeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeccompProfilePatchInput)(nil)).Elem(), SeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeccompProfilePatchPtrInput)(nil)).Elem(), SeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTypeInput)(nil)).Elem(), SecretTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTypeArrayInput)(nil)).Elem(), SecretTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourceInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourcePtrInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourcePatchInput)(nil)).Elem(), SecretEnvSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourcePatchPtrInput)(nil)).Elem(), SecretEnvSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorPtrInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorPatchInput)(nil)).Elem(), SecretKeySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorPatchPtrInput)(nil)).Elem(), SecretKeySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretListTypeInput)(nil)).Elem(), SecretListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPatchTypeInput)(nil)).Elem(), SecretPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretProjectionInput)(nil)).Elem(), SecretProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretProjectionPtrInput)(nil)).Elem(), SecretProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretProjectionPatchInput)(nil)).Elem(), SecretProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretProjectionPatchPtrInput)(nil)).Elem(), SecretProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReferenceInput)(nil)).Elem(), SecretReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReferencePtrInput)(nil)).Elem(), SecretReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReferencePatchInput)(nil)).Elem(), SecretReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReferencePatchPtrInput)(nil)).Elem(), SecretReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourceInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourcePtrInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourcePatchInput)(nil)).Elem(), SecretVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourcePatchPtrInput)(nil)).Elem(), SecretVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextPtrInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextPatchInput)(nil)).Elem(), SecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextPatchPtrInput)(nil)).Elem(), SecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTypeInput)(nil)).Elem(), ServiceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTypeArrayInput)(nil)).Elem(), ServiceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTypeInput)(nil)).Elem(), ServiceAccountTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTypeArrayInput)(nil)).Elem(), ServiceAccountTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountListTypeInput)(nil)).Elem(), ServiceAccountListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPatchTypeInput)(nil)).Elem(), ServiceAccountPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenProjectionInput)(nil)).Elem(), ServiceAccountTokenProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenProjectionPtrInput)(nil)).Elem(), ServiceAccountTokenProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenProjectionPatchInput)(nil)).Elem(), ServiceAccountTokenProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenProjectionPatchPtrInput)(nil)).Elem(), ServiceAccountTokenProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceListTypeInput)(nil)).Elem(), ServiceListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePatchTypeInput)(nil)).Elem(), ServicePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePortInput)(nil)).Elem(), ServicePortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePortArrayInput)(nil)).Elem(), ServicePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePortPatchInput)(nil)).Elem(), ServicePortPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePortPatchArrayInput)(nil)).Elem(), ServicePortPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecInput)(nil)).Elem(), ServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecPtrInput)(nil)).Elem(), ServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecPatchInput)(nil)).Elem(), ServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecPatchPtrInput)(nil)).Elem(), ServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceStatusInput)(nil)).Elem(), ServiceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceStatusPtrInput)(nil)).Elem(), ServiceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceStatusPatchInput)(nil)).Elem(), ServiceStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceStatusPatchPtrInput)(nil)).Elem(), ServiceStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionAffinityConfigInput)(nil)).Elem(), SessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionAffinityConfigPtrInput)(nil)).Elem(), SessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionAffinityConfigPatchInput)(nil)).Elem(), SessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionAffinityConfigPatchPtrInput)(nil)).Elem(), SessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSPersistentVolumeSourceInput)(nil)).Elem(), StorageOSPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSPersistentVolumeSourcePtrInput)(nil)).Elem(), StorageOSPersistentVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSPersistentVolumeSourcePatchInput)(nil)).Elem(), StorageOSPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSPersistentVolumeSourcePatchPtrInput)(nil)).Elem(), StorageOSPersistentVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSVolumeSourceInput)(nil)).Elem(), StorageOSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSVolumeSourcePtrInput)(nil)).Elem(), StorageOSVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSVolumeSourcePatchInput)(nil)).Elem(), StorageOSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageOSVolumeSourcePatchPtrInput)(nil)).Elem(), StorageOSVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SysctlInput)(nil)).Elem(), SysctlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SysctlArrayInput)(nil)).Elem(), SysctlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SysctlPatchInput)(nil)).Elem(), SysctlPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SysctlPatchArrayInput)(nil)).Elem(), SysctlPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionPtrInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionPatchInput)(nil)).Elem(), TCPSocketActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionPatchPtrInput)(nil)).Elem(), TCPSocketActionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaintInput)(nil)).Elem(), TaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaintArrayInput)(nil)).Elem(), TaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaintPatchInput)(nil)).Elem(), TaintPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaintPatchArrayInput)(nil)).Elem(), TaintPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TolerationInput)(nil)).Elem(), TolerationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TolerationArrayInput)(nil)).Elem(), TolerationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TolerationPatchInput)(nil)).Elem(), TolerationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TolerationPatchArrayInput)(nil)).Elem(), TolerationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorLabelRequirementInput)(nil)).Elem(), TopologySelectorLabelRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorLabelRequirementArrayInput)(nil)).Elem(), TopologySelectorLabelRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorLabelRequirementPatchInput)(nil)).Elem(), TopologySelectorLabelRequirementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorLabelRequirementPatchArrayInput)(nil)).Elem(), TopologySelectorLabelRequirementPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorTermInput)(nil)).Elem(), TopologySelectorTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorTermArrayInput)(nil)).Elem(), TopologySelectorTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorTermPatchInput)(nil)).Elem(), TopologySelectorTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySelectorTermPatchArrayInput)(nil)).Elem(), TopologySelectorTermPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySpreadConstraintInput)(nil)).Elem(), TopologySpreadConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySpreadConstraintArrayInput)(nil)).Elem(), TopologySpreadConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySpreadConstraintPatchInput)(nil)).Elem(), TopologySpreadConstraintPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopologySpreadConstraintPatchArrayInput)(nil)).Elem(), TopologySpreadConstraintPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedLocalObjectReferenceInput)(nil)).Elem(), TypedLocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedLocalObjectReferencePtrInput)(nil)).Elem(), TypedLocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedLocalObjectReferencePatchInput)(nil)).Elem(), TypedLocalObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedLocalObjectReferencePatchPtrInput)(nil)).Elem(), TypedLocalObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedObjectReferenceInput)(nil)).Elem(), TypedObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedObjectReferencePtrInput)(nil)).Elem(), TypedObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedObjectReferencePatchInput)(nil)).Elem(), TypedObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypedObjectReferencePatchPtrInput)(nil)).Elem(), TypedObjectReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDeviceInput)(nil)).Elem(), VolumeDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDeviceArrayInput)(nil)).Elem(), VolumeDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDevicePatchInput)(nil)).Elem(), VolumeDevicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDevicePatchArrayInput)(nil)).Elem(), VolumeDevicePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountInput)(nil)).Elem(), VolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountArrayInput)(nil)).Elem(), VolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountPatchInput)(nil)).Elem(), VolumeMountPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountPatchArrayInput)(nil)).Elem(), VolumeMountPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeAffinityInput)(nil)).Elem(), VolumeNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeAffinityPtrInput)(nil)).Elem(), VolumeNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeAffinityPatchInput)(nil)).Elem(), VolumeNodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeAffinityPatchPtrInput)(nil)).Elem(), VolumeNodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumePatchInput)(nil)).Elem(), VolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumePatchArrayInput)(nil)).Elem(), VolumePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeProjectionInput)(nil)).Elem(), VolumeProjectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeProjectionArrayInput)(nil)).Elem(), VolumeProjectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeProjectionPatchInput)(nil)).Elem(), VolumeProjectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeProjectionPatchArrayInput)(nil)).Elem(), VolumeProjectionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VsphereVirtualDiskVolumeSourceInput)(nil)).Elem(), VsphereVirtualDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VsphereVirtualDiskVolumeSourcePtrInput)(nil)).Elem(), VsphereVirtualDiskVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VsphereVirtualDiskVolumeSourcePatchInput)(nil)).Elem(), VsphereVirtualDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VsphereVirtualDiskVolumeSourcePatchPtrInput)(nil)).Elem(), VsphereVirtualDiskVolumeSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedPodAffinityTermInput)(nil)).Elem(), WeightedPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedPodAffinityTermArrayInput)(nil)).Elem(), WeightedPodAffinityTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedPodAffinityTermPatchInput)(nil)).Elem(), WeightedPodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedPodAffinityTermPatchArrayInput)(nil)).Elem(), WeightedPodAffinityTermPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsSecurityContextOptionsInput)(nil)).Elem(), WindowsSecurityContextOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsSecurityContextOptionsPtrInput)(nil)).Elem(), WindowsSecurityContextOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsSecurityContextOptionsPatchInput)(nil)).Elem(), WindowsSecurityContextOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsSecurityContextOptionsPatchPtrInput)(nil)).Elem(), WindowsSecurityContextOptionsPatchArgs{})
	pulumi.RegisterOutputType(AWSElasticBlockStoreVolumeSourceOutput{})
	pulumi.RegisterOutputType(AWSElasticBlockStoreVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(AWSElasticBlockStoreVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(AWSElasticBlockStoreVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(AffinityOutput{})
	pulumi.RegisterOutputType(AffinityPtrOutput{})
	pulumi.RegisterOutputType(AffinityPatchOutput{})
	pulumi.RegisterOutputType(AffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(AttachedVolumeOutput{})
	pulumi.RegisterOutputType(AttachedVolumeArrayOutput{})
	pulumi.RegisterOutputType(AttachedVolumePatchOutput{})
	pulumi.RegisterOutputType(AttachedVolumePatchArrayOutput{})
	pulumi.RegisterOutputType(AzureDiskVolumeSourceOutput{})
	pulumi.RegisterOutputType(AzureDiskVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureDiskVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(AzureDiskVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(AzureFilePersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(AzureFilePersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureFilePersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(AzureFilePersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeSourceOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(BindingTypeOutput{})
	pulumi.RegisterOutputType(BindingPatchTypeOutput{})
	pulumi.RegisterOutputType(CSIPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(CSIPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CSIPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CSIPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(CSIVolumeSourceOutput{})
	pulumi.RegisterOutputType(CSIVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CSIVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CSIVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(CapabilitiesOutput{})
	pulumi.RegisterOutputType(CapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(CapabilitiesPatchOutput{})
	pulumi.RegisterOutputType(CapabilitiesPatchPtrOutput{})
	pulumi.RegisterOutputType(CephFSPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(CephFSPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CephFSPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CephFSPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(CephFSVolumeSourceOutput{})
	pulumi.RegisterOutputType(CephFSVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CephFSVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CephFSVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(CinderPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(CinderPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CinderPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CinderPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(CinderVolumeSourceOutput{})
	pulumi.RegisterOutputType(CinderVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(CinderVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(CinderVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ClaimSourceOutput{})
	pulumi.RegisterOutputType(ClaimSourcePtrOutput{})
	pulumi.RegisterOutputType(ClaimSourcePatchOutput{})
	pulumi.RegisterOutputType(ClaimSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ClientIPConfigOutput{})
	pulumi.RegisterOutputType(ClientIPConfigPtrOutput{})
	pulumi.RegisterOutputType(ClientIPConfigPatchOutput{})
	pulumi.RegisterOutputType(ClientIPConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ComponentConditionOutput{})
	pulumi.RegisterOutputType(ComponentConditionArrayOutput{})
	pulumi.RegisterOutputType(ComponentConditionPatchOutput{})
	pulumi.RegisterOutputType(ComponentConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(ComponentStatusOutput{})
	pulumi.RegisterOutputType(ComponentStatusArrayOutput{})
	pulumi.RegisterOutputType(ComponentStatusListOutput{})
	pulumi.RegisterOutputType(ComponentStatusPatchOutput{})
	pulumi.RegisterOutputType(ConfigMapTypeOutput{})
	pulumi.RegisterOutputType(ConfigMapTypeArrayOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourcePatchOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorPatchOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapListTypeOutput{})
	pulumi.RegisterOutputType(ConfigMapNodeConfigSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapNodeConfigSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapNodeConfigSourcePatchOutput{})
	pulumi.RegisterOutputType(ConfigMapNodeConfigSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapPatchTypeOutput{})
	pulumi.RegisterOutputType(ConfigMapProjectionOutput{})
	pulumi.RegisterOutputType(ConfigMapProjectionPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapProjectionPatchOutput{})
	pulumi.RegisterOutputType(ConfigMapProjectionPatchPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImageArrayOutput{})
	pulumi.RegisterOutputType(ContainerImagePatchOutput{})
	pulumi.RegisterOutputType(ContainerImagePatchArrayOutput{})
	pulumi.RegisterOutputType(ContainerPatchOutput{})
	pulumi.RegisterOutputType(ContainerPatchArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortPatchOutput{})
	pulumi.RegisterOutputType(ContainerPortPatchArrayOutput{})
	pulumi.RegisterOutputType(ContainerStateOutput{})
	pulumi.RegisterOutputType(ContainerStatePtrOutput{})
	pulumi.RegisterOutputType(ContainerStatePatchOutput{})
	pulumi.RegisterOutputType(ContainerStatePatchPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateRunningOutput{})
	pulumi.RegisterOutputType(ContainerStateRunningPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateRunningPatchOutput{})
	pulumi.RegisterOutputType(ContainerStateRunningPatchPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateTerminatedOutput{})
	pulumi.RegisterOutputType(ContainerStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateTerminatedPatchOutput{})
	pulumi.RegisterOutputType(ContainerStateTerminatedPatchPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateWaitingOutput{})
	pulumi.RegisterOutputType(ContainerStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(ContainerStateWaitingPatchOutput{})
	pulumi.RegisterOutputType(ContainerStateWaitingPatchPtrOutput{})
	pulumi.RegisterOutputType(ContainerStatusOutput{})
	pulumi.RegisterOutputType(ContainerStatusArrayOutput{})
	pulumi.RegisterOutputType(ContainerStatusPatchOutput{})
	pulumi.RegisterOutputType(ContainerStatusPatchArrayOutput{})
	pulumi.RegisterOutputType(DaemonEndpointOutput{})
	pulumi.RegisterOutputType(DaemonEndpointPtrOutput{})
	pulumi.RegisterOutputType(DaemonEndpointPatchOutput{})
	pulumi.RegisterOutputType(DaemonEndpointPatchPtrOutput{})
	pulumi.RegisterOutputType(DownwardAPIProjectionOutput{})
	pulumi.RegisterOutputType(DownwardAPIProjectionPtrOutput{})
	pulumi.RegisterOutputType(DownwardAPIProjectionPatchOutput{})
	pulumi.RegisterOutputType(DownwardAPIProjectionPatchPtrOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeFileOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeFileArrayOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeFilePatchOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeFilePatchArrayOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeSourceOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(DownwardAPIVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourceOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(EndpointAddressOutput{})
	pulumi.RegisterOutputType(EndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(EndpointAddressPatchOutput{})
	pulumi.RegisterOutputType(EndpointAddressPatchArrayOutput{})
	pulumi.RegisterOutputType(EndpointPortOutput{})
	pulumi.RegisterOutputType(EndpointPortArrayOutput{})
	pulumi.RegisterOutputType(EndpointPortPatchOutput{})
	pulumi.RegisterOutputType(EndpointPortPatchArrayOutput{})
	pulumi.RegisterOutputType(EndpointSubsetOutput{})
	pulumi.RegisterOutputType(EndpointSubsetArrayOutput{})
	pulumi.RegisterOutputType(EndpointSubsetPatchOutput{})
	pulumi.RegisterOutputType(EndpointSubsetPatchArrayOutput{})
	pulumi.RegisterOutputType(EndpointsTypeOutput{})
	pulumi.RegisterOutputType(EndpointsTypeArrayOutput{})
	pulumi.RegisterOutputType(EndpointsListTypeOutput{})
	pulumi.RegisterOutputType(EndpointsPatchTypeOutput{})
	pulumi.RegisterOutputType(EnvFromSourceOutput{})
	pulumi.RegisterOutputType(EnvFromSourceArrayOutput{})
	pulumi.RegisterOutputType(EnvFromSourcePatchOutput{})
	pulumi.RegisterOutputType(EnvFromSourcePatchArrayOutput{})
	pulumi.RegisterOutputType(EnvVarOutput{})
	pulumi.RegisterOutputType(EnvVarArrayOutput{})
	pulumi.RegisterOutputType(EnvVarPatchOutput{})
	pulumi.RegisterOutputType(EnvVarPatchArrayOutput{})
	pulumi.RegisterOutputType(EnvVarSourceOutput{})
	pulumi.RegisterOutputType(EnvVarSourcePtrOutput{})
	pulumi.RegisterOutputType(EnvVarSourcePatchOutput{})
	pulumi.RegisterOutputType(EnvVarSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(EphemeralContainerOutput{})
	pulumi.RegisterOutputType(EphemeralContainerArrayOutput{})
	pulumi.RegisterOutputType(EphemeralContainerPatchOutput{})
	pulumi.RegisterOutputType(EphemeralContainerPatchArrayOutput{})
	pulumi.RegisterOutputType(EphemeralVolumeSourceOutput{})
	pulumi.RegisterOutputType(EphemeralVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(EphemeralVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(EphemeralVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(EventTypeOutput{})
	pulumi.RegisterOutputType(EventTypeArrayOutput{})
	pulumi.RegisterOutputType(EventListTypeOutput{})
	pulumi.RegisterOutputType(EventPatchTypeOutput{})
	pulumi.RegisterOutputType(EventSeriesOutput{})
	pulumi.RegisterOutputType(EventSeriesPtrOutput{})
	pulumi.RegisterOutputType(EventSeriesPatchOutput{})
	pulumi.RegisterOutputType(EventSeriesPatchPtrOutput{})
	pulumi.RegisterOutputType(EventSourceOutput{})
	pulumi.RegisterOutputType(EventSourcePtrOutput{})
	pulumi.RegisterOutputType(EventSourcePatchOutput{})
	pulumi.RegisterOutputType(EventSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ExecActionOutput{})
	pulumi.RegisterOutputType(ExecActionPtrOutput{})
	pulumi.RegisterOutputType(ExecActionPatchOutput{})
	pulumi.RegisterOutputType(ExecActionPatchPtrOutput{})
	pulumi.RegisterOutputType(FCVolumeSourceOutput{})
	pulumi.RegisterOutputType(FCVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(FCVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(FCVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(FlexPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(FlexPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(FlexPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(FlexPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(FlexVolumeSourceOutput{})
	pulumi.RegisterOutputType(FlexVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(FlexVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(FlexVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(FlockerVolumeSourceOutput{})
	pulumi.RegisterOutputType(FlockerVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(FlockerVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(FlockerVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(GCEPersistentDiskVolumeSourceOutput{})
	pulumi.RegisterOutputType(GCEPersistentDiskVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GCEPersistentDiskVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(GCEPersistentDiskVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCActionOutput{})
	pulumi.RegisterOutputType(GRPCActionPtrOutput{})
	pulumi.RegisterOutputType(GRPCActionPatchOutput{})
	pulumi.RegisterOutputType(GRPCActionPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeSourceOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(GlusterfsPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(GlusterfsPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GlusterfsPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(GlusterfsPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(GlusterfsVolumeSourceOutput{})
	pulumi.RegisterOutputType(GlusterfsVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GlusterfsVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(GlusterfsVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(HTTPGetActionOutput{})
	pulumi.RegisterOutputType(HTTPGetActionPtrOutput{})
	pulumi.RegisterOutputType(HTTPGetActionPatchOutput{})
	pulumi.RegisterOutputType(HTTPGetActionPatchPtrOutput{})
	pulumi.RegisterOutputType(HTTPHeaderOutput{})
	pulumi.RegisterOutputType(HTTPHeaderArrayOutput{})
	pulumi.RegisterOutputType(HTTPHeaderPatchOutput{})
	pulumi.RegisterOutputType(HTTPHeaderPatchArrayOutput{})
	pulumi.RegisterOutputType(HandlerOutput{})
	pulumi.RegisterOutputType(HandlerPatchOutput{})
	pulumi.RegisterOutputType(HostAliasOutput{})
	pulumi.RegisterOutputType(HostAliasArrayOutput{})
	pulumi.RegisterOutputType(HostAliasPatchOutput{})
	pulumi.RegisterOutputType(HostAliasPatchArrayOutput{})
	pulumi.RegisterOutputType(HostPathVolumeSourceOutput{})
	pulumi.RegisterOutputType(HostPathVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(HostPathVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(HostPathVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ISCSIPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(ISCSIPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ISCSIPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ISCSIPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ISCSIVolumeSourceOutput{})
	pulumi.RegisterOutputType(ISCSIVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ISCSIVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ISCSIVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(KeyToPathOutput{})
	pulumi.RegisterOutputType(KeyToPathArrayOutput{})
	pulumi.RegisterOutputType(KeyToPathPatchOutput{})
	pulumi.RegisterOutputType(KeyToPathPatchArrayOutput{})
	pulumi.RegisterOutputType(LifecycleOutput{})
	pulumi.RegisterOutputType(LifecyclePtrOutput{})
	pulumi.RegisterOutputType(LifecycleHandlerOutput{})
	pulumi.RegisterOutputType(LifecycleHandlerPtrOutput{})
	pulumi.RegisterOutputType(LifecycleHandlerPatchOutput{})
	pulumi.RegisterOutputType(LifecycleHandlerPatchPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePatchOutput{})
	pulumi.RegisterOutputType(LifecyclePatchPtrOutput{})
	pulumi.RegisterOutputType(LimitRangeTypeOutput{})
	pulumi.RegisterOutputType(LimitRangeTypeArrayOutput{})
	pulumi.RegisterOutputType(LimitRangeItemOutput{})
	pulumi.RegisterOutputType(LimitRangeItemArrayOutput{})
	pulumi.RegisterOutputType(LimitRangeItemPatchOutput{})
	pulumi.RegisterOutputType(LimitRangeItemPatchArrayOutput{})
	pulumi.RegisterOutputType(LimitRangeListTypeOutput{})
	pulumi.RegisterOutputType(LimitRangePatchTypeOutput{})
	pulumi.RegisterOutputType(LimitRangeSpecOutput{})
	pulumi.RegisterOutputType(LimitRangeSpecPtrOutput{})
	pulumi.RegisterOutputType(LimitRangeSpecPatchOutput{})
	pulumi.RegisterOutputType(LimitRangeSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerIngressOutput{})
	pulumi.RegisterOutputType(LoadBalancerIngressArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerIngressPatchOutput{})
	pulumi.RegisterOutputType(LoadBalancerIngressPatchArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerStatusOutput{})
	pulumi.RegisterOutputType(LoadBalancerStatusPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerStatusPatchOutput{})
	pulumi.RegisterOutputType(LoadBalancerStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceArrayOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePatchArrayOutput{})
	pulumi.RegisterOutputType(LocalVolumeSourceOutput{})
	pulumi.RegisterOutputType(LocalVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(LocalVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(LocalVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(NFSVolumeSourceOutput{})
	pulumi.RegisterOutputType(NFSVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(NFSVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(NFSVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceTypeArrayOutput{})
	pulumi.RegisterOutputType(NamespaceConditionOutput{})
	pulumi.RegisterOutputType(NamespaceConditionArrayOutput{})
	pulumi.RegisterOutputType(NamespaceConditionPatchOutput{})
	pulumi.RegisterOutputType(NamespaceConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(NamespaceListTypeOutput{})
	pulumi.RegisterOutputType(NamespacePatchTypeOutput{})
	pulumi.RegisterOutputType(NamespaceSpecOutput{})
	pulumi.RegisterOutputType(NamespaceSpecPtrOutput{})
	pulumi.RegisterOutputType(NamespaceSpecPatchOutput{})
	pulumi.RegisterOutputType(NamespaceSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(NamespaceStatusOutput{})
	pulumi.RegisterOutputType(NamespaceStatusPtrOutput{})
	pulumi.RegisterOutputType(NamespaceStatusPatchOutput{})
	pulumi.RegisterOutputType(NamespaceStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeTypeOutput{})
	pulumi.RegisterOutputType(NodeTypeArrayOutput{})
	pulumi.RegisterOutputType(NodeAddressOutput{})
	pulumi.RegisterOutputType(NodeAddressArrayOutput{})
	pulumi.RegisterOutputType(NodeAddressPatchOutput{})
	pulumi.RegisterOutputType(NodeAddressPatchArrayOutput{})
	pulumi.RegisterOutputType(NodeAffinityOutput{})
	pulumi.RegisterOutputType(NodeAffinityPtrOutput{})
	pulumi.RegisterOutputType(NodeAffinityPatchOutput{})
	pulumi.RegisterOutputType(NodeAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeConditionOutput{})
	pulumi.RegisterOutputType(NodeConditionArrayOutput{})
	pulumi.RegisterOutputType(NodeConditionPatchOutput{})
	pulumi.RegisterOutputType(NodeConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(NodeConfigSourceOutput{})
	pulumi.RegisterOutputType(NodeConfigSourcePtrOutput{})
	pulumi.RegisterOutputType(NodeConfigSourcePatchOutput{})
	pulumi.RegisterOutputType(NodeConfigSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigStatusOutput{})
	pulumi.RegisterOutputType(NodeConfigStatusPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigStatusPatchOutput{})
	pulumi.RegisterOutputType(NodeConfigStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeDaemonEndpointsOutput{})
	pulumi.RegisterOutputType(NodeDaemonEndpointsPtrOutput{})
	pulumi.RegisterOutputType(NodeDaemonEndpointsPatchOutput{})
	pulumi.RegisterOutputType(NodeDaemonEndpointsPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeListTypeOutput{})
	pulumi.RegisterOutputType(NodePatchTypeOutput{})
	pulumi.RegisterOutputType(NodeSelectorOutput{})
	pulumi.RegisterOutputType(NodeSelectorPtrOutput{})
	pulumi.RegisterOutputType(NodeSelectorPatchOutput{})
	pulumi.RegisterOutputType(NodeSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeSelectorRequirementOutput{})
	pulumi.RegisterOutputType(NodeSelectorRequirementArrayOutput{})
	pulumi.RegisterOutputType(NodeSelectorRequirementPatchOutput{})
	pulumi.RegisterOutputType(NodeSelectorRequirementPatchArrayOutput{})
	pulumi.RegisterOutputType(NodeSelectorTermOutput{})
	pulumi.RegisterOutputType(NodeSelectorTermArrayOutput{})
	pulumi.RegisterOutputType(NodeSelectorTermPatchOutput{})
	pulumi.RegisterOutputType(NodeSelectorTermPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeSelectorTermPatchArrayOutput{})
	pulumi.RegisterOutputType(NodeSpecOutput{})
	pulumi.RegisterOutputType(NodeSpecPtrOutput{})
	pulumi.RegisterOutputType(NodeSpecPatchOutput{})
	pulumi.RegisterOutputType(NodeSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeStatusOutput{})
	pulumi.RegisterOutputType(NodeStatusPtrOutput{})
	pulumi.RegisterOutputType(NodeStatusPatchOutput{})
	pulumi.RegisterOutputType(NodeStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(NodeSystemInfoOutput{})
	pulumi.RegisterOutputType(NodeSystemInfoPtrOutput{})
	pulumi.RegisterOutputType(NodeSystemInfoPatchOutput{})
	pulumi.RegisterOutputType(NodeSystemInfoPatchPtrOutput{})
	pulumi.RegisterOutputType(ObjectFieldSelectorOutput{})
	pulumi.RegisterOutputType(ObjectFieldSelectorPtrOutput{})
	pulumi.RegisterOutputType(ObjectFieldSelectorPatchOutput{})
	pulumi.RegisterOutputType(ObjectFieldSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ObjectReferenceOutput{})
	pulumi.RegisterOutputType(ObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(ObjectReferenceArrayOutput{})
	pulumi.RegisterOutputType(ObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(ObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ObjectReferencePatchArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumeTypeArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTypeArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimConditionOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimConditionArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimConditionPatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimListTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimPatchTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimPatchTypeArrayOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimSpecOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimSpecPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimSpecPatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimStatusOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimStatusPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimStatusPatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTemplatePatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimTemplatePatchPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimVolumeSourceOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeClaimVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeListTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumePatchTypeOutput{})
	pulumi.RegisterOutputType(PersistentVolumeSpecOutput{})
	pulumi.RegisterOutputType(PersistentVolumeSpecPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeSpecPatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeStatusOutput{})
	pulumi.RegisterOutputType(PersistentVolumeStatusPtrOutput{})
	pulumi.RegisterOutputType(PersistentVolumeStatusPatchOutput{})
	pulumi.RegisterOutputType(PersistentVolumeStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(PhotonPersistentDiskVolumeSourceOutput{})
	pulumi.RegisterOutputType(PhotonPersistentDiskVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(PhotonPersistentDiskVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(PhotonPersistentDiskVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(PodTypeOutput{})
	pulumi.RegisterOutputType(PodTypeArrayOutput{})
	pulumi.RegisterOutputType(PodAffinityOutput{})
	pulumi.RegisterOutputType(PodAffinityPtrOutput{})
	pulumi.RegisterOutputType(PodAffinityPatchOutput{})
	pulumi.RegisterOutputType(PodAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PodAffinityTermOutput{})
	pulumi.RegisterOutputType(PodAffinityTermArrayOutput{})
	pulumi.RegisterOutputType(PodAffinityTermPatchOutput{})
	pulumi.RegisterOutputType(PodAffinityTermPatchPtrOutput{})
	pulumi.RegisterOutputType(PodAffinityTermPatchArrayOutput{})
	pulumi.RegisterOutputType(PodAntiAffinityOutput{})
	pulumi.RegisterOutputType(PodAntiAffinityPtrOutput{})
	pulumi.RegisterOutputType(PodAntiAffinityPatchOutput{})
	pulumi.RegisterOutputType(PodAntiAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PodConditionOutput{})
	pulumi.RegisterOutputType(PodConditionArrayOutput{})
	pulumi.RegisterOutputType(PodConditionPatchOutput{})
	pulumi.RegisterOutputType(PodConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(PodDNSConfigOutput{})
	pulumi.RegisterOutputType(PodDNSConfigPtrOutput{})
	pulumi.RegisterOutputType(PodDNSConfigOptionOutput{})
	pulumi.RegisterOutputType(PodDNSConfigOptionArrayOutput{})
	pulumi.RegisterOutputType(PodDNSConfigOptionPatchOutput{})
	pulumi.RegisterOutputType(PodDNSConfigOptionPatchArrayOutput{})
	pulumi.RegisterOutputType(PodDNSConfigPatchOutput{})
	pulumi.RegisterOutputType(PodDNSConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(PodIPOutput{})
	pulumi.RegisterOutputType(PodIPArrayOutput{})
	pulumi.RegisterOutputType(PodIPPatchOutput{})
	pulumi.RegisterOutputType(PodIPPatchArrayOutput{})
	pulumi.RegisterOutputType(PodListTypeOutput{})
	pulumi.RegisterOutputType(PodOSOutput{})
	pulumi.RegisterOutputType(PodOSPtrOutput{})
	pulumi.RegisterOutputType(PodOSPatchOutput{})
	pulumi.RegisterOutputType(PodOSPatchPtrOutput{})
	pulumi.RegisterOutputType(PodPatchTypeOutput{})
	pulumi.RegisterOutputType(PodReadinessGateOutput{})
	pulumi.RegisterOutputType(PodReadinessGateArrayOutput{})
	pulumi.RegisterOutputType(PodReadinessGatePatchOutput{})
	pulumi.RegisterOutputType(PodReadinessGatePatchArrayOutput{})
	pulumi.RegisterOutputType(PodResourceClaimOutput{})
	pulumi.RegisterOutputType(PodResourceClaimArrayOutput{})
	pulumi.RegisterOutputType(PodResourceClaimPatchOutput{})
	pulumi.RegisterOutputType(PodResourceClaimPatchArrayOutput{})
	pulumi.RegisterOutputType(PodSchedulingGateOutput{})
	pulumi.RegisterOutputType(PodSchedulingGateArrayOutput{})
	pulumi.RegisterOutputType(PodSchedulingGatePatchOutput{})
	pulumi.RegisterOutputType(PodSchedulingGatePatchArrayOutput{})
	pulumi.RegisterOutputType(PodSecurityContextOutput{})
	pulumi.RegisterOutputType(PodSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(PodSecurityContextPatchOutput{})
	pulumi.RegisterOutputType(PodSecurityContextPatchPtrOutput{})
	pulumi.RegisterOutputType(PodSpecOutput{})
	pulumi.RegisterOutputType(PodSpecPtrOutput{})
	pulumi.RegisterOutputType(PodSpecPatchOutput{})
	pulumi.RegisterOutputType(PodSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PodStatusOutput{})
	pulumi.RegisterOutputType(PodStatusPtrOutput{})
	pulumi.RegisterOutputType(PodStatusPatchOutput{})
	pulumi.RegisterOutputType(PodStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(PodTemplateTypeOutput{})
	pulumi.RegisterOutputType(PodTemplateTypeArrayOutput{})
	pulumi.RegisterOutputType(PodTemplateListTypeOutput{})
	pulumi.RegisterOutputType(PodTemplatePatchTypeOutput{})
	pulumi.RegisterOutputType(PodTemplateSpecOutput{})
	pulumi.RegisterOutputType(PodTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(PodTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(PodTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PortStatusOutput{})
	pulumi.RegisterOutputType(PortStatusArrayOutput{})
	pulumi.RegisterOutputType(PortStatusPatchOutput{})
	pulumi.RegisterOutputType(PortStatusPatchArrayOutput{})
	pulumi.RegisterOutputType(PortworxVolumeSourceOutput{})
	pulumi.RegisterOutputType(PortworxVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(PortworxVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(PortworxVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(PreferredSchedulingTermOutput{})
	pulumi.RegisterOutputType(PreferredSchedulingTermArrayOutput{})
	pulumi.RegisterOutputType(PreferredSchedulingTermPatchOutput{})
	pulumi.RegisterOutputType(PreferredSchedulingTermPatchArrayOutput{})
	pulumi.RegisterOutputType(ProbeOutput{})
	pulumi.RegisterOutputType(ProbePtrOutput{})
	pulumi.RegisterOutputType(ProbePatchOutput{})
	pulumi.RegisterOutputType(ProbePatchPtrOutput{})
	pulumi.RegisterOutputType(ProjectedVolumeSourceOutput{})
	pulumi.RegisterOutputType(ProjectedVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ProjectedVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ProjectedVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(QuobyteVolumeSourceOutput{})
	pulumi.RegisterOutputType(QuobyteVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(QuobyteVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(QuobyteVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(RBDPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(RBDPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(RBDPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(RBDPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(RBDVolumeSourceOutput{})
	pulumi.RegisterOutputType(RBDVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(RBDVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(RBDVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ReplicationControllerTypeOutput{})
	pulumi.RegisterOutputType(ReplicationControllerTypeArrayOutput{})
	pulumi.RegisterOutputType(ReplicationControllerConditionOutput{})
	pulumi.RegisterOutputType(ReplicationControllerConditionArrayOutput{})
	pulumi.RegisterOutputType(ReplicationControllerConditionPatchOutput{})
	pulumi.RegisterOutputType(ReplicationControllerConditionPatchArrayOutput{})
	pulumi.RegisterOutputType(ReplicationControllerListTypeOutput{})
	pulumi.RegisterOutputType(ReplicationControllerPatchTypeOutput{})
	pulumi.RegisterOutputType(ReplicationControllerSpecOutput{})
	pulumi.RegisterOutputType(ReplicationControllerSpecPtrOutput{})
	pulumi.RegisterOutputType(ReplicationControllerSpecPatchOutput{})
	pulumi.RegisterOutputType(ReplicationControllerSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ReplicationControllerStatusOutput{})
	pulumi.RegisterOutputType(ReplicationControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(ReplicationControllerStatusPatchOutput{})
	pulumi.RegisterOutputType(ReplicationControllerStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimOutput{})
	pulumi.RegisterOutputType(ResourceClaimArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceFieldSelectorOutput{})
	pulumi.RegisterOutputType(ResourceFieldSelectorPtrOutput{})
	pulumi.RegisterOutputType(ResourceFieldSelectorPatchOutput{})
	pulumi.RegisterOutputType(ResourceFieldSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaTypeOutput{})
	pulumi.RegisterOutputType(ResourceQuotaTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceQuotaListTypeOutput{})
	pulumi.RegisterOutputType(ResourceQuotaPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceQuotaSpecOutput{})
	pulumi.RegisterOutputType(ResourceQuotaSpecPtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaSpecPatchOutput{})
	pulumi.RegisterOutputType(ResourceQuotaSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaStatusOutput{})
	pulumi.RegisterOutputType(ResourceQuotaStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaStatusPatchOutput{})
	pulumi.RegisterOutputType(ResourceQuotaStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsPatchOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsPatchPtrOutput{})
	pulumi.RegisterOutputType(SELinuxOptionsOutput{})
	pulumi.RegisterOutputType(SELinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(SELinuxOptionsPatchOutput{})
	pulumi.RegisterOutputType(SELinuxOptionsPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleIOPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(ScaleIOPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ScaleIOPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ScaleIOPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleIOVolumeSourceOutput{})
	pulumi.RegisterOutputType(ScaleIOVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ScaleIOVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(ScaleIOVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ScopeSelectorOutput{})
	pulumi.RegisterOutputType(ScopeSelectorPtrOutput{})
	pulumi.RegisterOutputType(ScopeSelectorPatchOutput{})
	pulumi.RegisterOutputType(ScopeSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ScopedResourceSelectorRequirementOutput{})
	pulumi.RegisterOutputType(ScopedResourceSelectorRequirementArrayOutput{})
	pulumi.RegisterOutputType(ScopedResourceSelectorRequirementPatchOutput{})
	pulumi.RegisterOutputType(ScopedResourceSelectorRequirementPatchArrayOutput{})
	pulumi.RegisterOutputType(SeccompProfileOutput{})
	pulumi.RegisterOutputType(SeccompProfilePtrOutput{})
	pulumi.RegisterOutputType(SeccompProfilePatchOutput{})
	pulumi.RegisterOutputType(SeccompProfilePatchPtrOutput{})
	pulumi.RegisterOutputType(SecretTypeOutput{})
	pulumi.RegisterOutputType(SecretTypeArrayOutput{})
	pulumi.RegisterOutputType(SecretEnvSourceOutput{})
	pulumi.RegisterOutputType(SecretEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretEnvSourcePatchOutput{})
	pulumi.RegisterOutputType(SecretEnvSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorPatchOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(SecretListTypeOutput{})
	pulumi.RegisterOutputType(SecretPatchTypeOutput{})
	pulumi.RegisterOutputType(SecretProjectionOutput{})
	pulumi.RegisterOutputType(SecretProjectionPtrOutput{})
	pulumi.RegisterOutputType(SecretProjectionPatchOutput{})
	pulumi.RegisterOutputType(SecretProjectionPatchPtrOutput{})
	pulumi.RegisterOutputType(SecretReferenceOutput{})
	pulumi.RegisterOutputType(SecretReferencePtrOutput{})
	pulumi.RegisterOutputType(SecretReferencePatchOutput{})
	pulumi.RegisterOutputType(SecretReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourceOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextOutput{})
	pulumi.RegisterOutputType(SecurityContextPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextPatchOutput{})
	pulumi.RegisterOutputType(SecurityContextPatchPtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeOutput{})
	pulumi.RegisterOutputType(ServiceTypeArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountTypeOutput{})
	pulumi.RegisterOutputType(ServiceAccountTypeArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountListTypeOutput{})
	pulumi.RegisterOutputType(ServiceAccountPatchTypeOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenProjectionOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenProjectionPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenProjectionPatchOutput{})
	pulumi.RegisterOutputType(ServiceAccountTokenProjectionPatchPtrOutput{})
	pulumi.RegisterOutputType(ServiceListTypeOutput{})
	pulumi.RegisterOutputType(ServicePatchTypeOutput{})
	pulumi.RegisterOutputType(ServicePortOutput{})
	pulumi.RegisterOutputType(ServicePortArrayOutput{})
	pulumi.RegisterOutputType(ServicePortPatchOutput{})
	pulumi.RegisterOutputType(ServicePortPatchArrayOutput{})
	pulumi.RegisterOutputType(ServiceSpecOutput{})
	pulumi.RegisterOutputType(ServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceSpecPatchOutput{})
	pulumi.RegisterOutputType(ServiceSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ServiceStatusOutput{})
	pulumi.RegisterOutputType(ServiceStatusPtrOutput{})
	pulumi.RegisterOutputType(ServiceStatusPatchOutput{})
	pulumi.RegisterOutputType(ServiceStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(SessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(SessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(SessionAffinityConfigPatchOutput{})
	pulumi.RegisterOutputType(SessionAffinityConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(StorageOSPersistentVolumeSourceOutput{})
	pulumi.RegisterOutputType(StorageOSPersistentVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(StorageOSPersistentVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(StorageOSPersistentVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(StorageOSVolumeSourceOutput{})
	pulumi.RegisterOutputType(StorageOSVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(StorageOSVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(StorageOSVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(SysctlOutput{})
	pulumi.RegisterOutputType(SysctlArrayOutput{})
	pulumi.RegisterOutputType(SysctlPatchOutput{})
	pulumi.RegisterOutputType(SysctlPatchArrayOutput{})
	pulumi.RegisterOutputType(TCPSocketActionOutput{})
	pulumi.RegisterOutputType(TCPSocketActionPtrOutput{})
	pulumi.RegisterOutputType(TCPSocketActionPatchOutput{})
	pulumi.RegisterOutputType(TCPSocketActionPatchPtrOutput{})
	pulumi.RegisterOutputType(TaintOutput{})
	pulumi.RegisterOutputType(TaintArrayOutput{})
	pulumi.RegisterOutputType(TaintPatchOutput{})
	pulumi.RegisterOutputType(TaintPatchArrayOutput{})
	pulumi.RegisterOutputType(TolerationOutput{})
	pulumi.RegisterOutputType(TolerationArrayOutput{})
	pulumi.RegisterOutputType(TolerationPatchOutput{})
	pulumi.RegisterOutputType(TolerationPatchArrayOutput{})
	pulumi.RegisterOutputType(TopologySelectorLabelRequirementOutput{})
	pulumi.RegisterOutputType(TopologySelectorLabelRequirementArrayOutput{})
	pulumi.RegisterOutputType(TopologySelectorLabelRequirementPatchOutput{})
	pulumi.RegisterOutputType(TopologySelectorLabelRequirementPatchArrayOutput{})
	pulumi.RegisterOutputType(TopologySelectorTermOutput{})
	pulumi.RegisterOutputType(TopologySelectorTermArrayOutput{})
	pulumi.RegisterOutputType(TopologySelectorTermPatchOutput{})
	pulumi.RegisterOutputType(TopologySelectorTermPatchArrayOutput{})
	pulumi.RegisterOutputType(TopologySpreadConstraintOutput{})
	pulumi.RegisterOutputType(TopologySpreadConstraintArrayOutput{})
	pulumi.RegisterOutputType(TopologySpreadConstraintPatchOutput{})
	pulumi.RegisterOutputType(TopologySpreadConstraintPatchArrayOutput{})
	pulumi.RegisterOutputType(TypedLocalObjectReferenceOutput{})
	pulumi.RegisterOutputType(TypedLocalObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(TypedLocalObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(TypedLocalObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(TypedObjectReferenceOutput{})
	pulumi.RegisterOutputType(TypedObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(TypedObjectReferencePatchOutput{})
	pulumi.RegisterOutputType(TypedObjectReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeDeviceOutput{})
	pulumi.RegisterOutputType(VolumeDeviceArrayOutput{})
	pulumi.RegisterOutputType(VolumeDevicePatchOutput{})
	pulumi.RegisterOutputType(VolumeDevicePatchArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountPatchOutput{})
	pulumi.RegisterOutputType(VolumeMountPatchArrayOutput{})
	pulumi.RegisterOutputType(VolumeNodeAffinityOutput{})
	pulumi.RegisterOutputType(VolumeNodeAffinityPtrOutput{})
	pulumi.RegisterOutputType(VolumeNodeAffinityPatchOutput{})
	pulumi.RegisterOutputType(VolumeNodeAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumePatchOutput{})
	pulumi.RegisterOutputType(VolumePatchArrayOutput{})
	pulumi.RegisterOutputType(VolumeProjectionOutput{})
	pulumi.RegisterOutputType(VolumeProjectionArrayOutput{})
	pulumi.RegisterOutputType(VolumeProjectionPatchOutput{})
	pulumi.RegisterOutputType(VolumeProjectionPatchArrayOutput{})
	pulumi.RegisterOutputType(VsphereVirtualDiskVolumeSourceOutput{})
	pulumi.RegisterOutputType(VsphereVirtualDiskVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(VsphereVirtualDiskVolumeSourcePatchOutput{})
	pulumi.RegisterOutputType(VsphereVirtualDiskVolumeSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(WeightedPodAffinityTermOutput{})
	pulumi.RegisterOutputType(WeightedPodAffinityTermArrayOutput{})
	pulumi.RegisterOutputType(WeightedPodAffinityTermPatchOutput{})
	pulumi.RegisterOutputType(WeightedPodAffinityTermPatchArrayOutput{})
	pulumi.RegisterOutputType(WindowsSecurityContextOptionsOutput{})
	pulumi.RegisterOutputType(WindowsSecurityContextOptionsPtrOutput{})
	pulumi.RegisterOutputType(WindowsSecurityContextOptionsPatchOutput{})
	pulumi.RegisterOutputType(WindowsSecurityContextOptionsPatchPtrOutput{})
}
