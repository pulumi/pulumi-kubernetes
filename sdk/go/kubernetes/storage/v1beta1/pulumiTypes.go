// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1beta1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriver struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the CSI Driver.
	Spec *CSIDriverSpec `pulumi:"spec"`
}

type CSIDriverInput interface {
	pulumi.Input

	ToCSIDriverOutput() CSIDriverOutput
	ToCSIDriverOutputWithContext(context.Context) CSIDriverOutput
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the CSI Driver.
	Spec CSIDriverSpecPtrInput `pulumi:"spec"`
}

func (CSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriver)(nil)).Elem()
}

func (i CSIDriverArgs) ToCSIDriverOutput() CSIDriverOutput {
	return i.ToCSIDriverOutputWithContext(context.Background())
}

func (i CSIDriverArgs) ToCSIDriverOutputWithContext(ctx context.Context) CSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverOutput)
}

type CSIDriverArrayInput interface {
	pulumi.Input

	ToCSIDriverArrayOutput() CSIDriverArrayOutput
	ToCSIDriverArrayOutputWithContext(context.Context) CSIDriverArrayOutput
}

type CSIDriverArray []CSIDriverInput

func (CSIDriverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIDriver)(nil)).Elem()
}

func (i CSIDriverArray) ToCSIDriverArrayOutput() CSIDriverArrayOutput {
	return i.ToCSIDriverArrayOutputWithContext(context.Background())
}

func (i CSIDriverArray) ToCSIDriverArrayOutputWithContext(ctx context.Context) CSIDriverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverArrayOutput)
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverOutput struct { *pulumi.OutputState }

func (CSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriver)(nil)).Elem()
}

func (o CSIDriverOutput) ToCSIDriverOutput() CSIDriverOutput {
	return o
}

func (o CSIDriverOutput) ToCSIDriverOutputWithContext(ctx context.Context) CSIDriverOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIDriverOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSIDriver) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIDriverOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSIDriver) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIDriverOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v CSIDriver) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the CSI Driver.
func (o CSIDriverOutput) Spec() CSIDriverSpecPtrOutput {
	return o.ApplyT(func (v CSIDriver) *CSIDriverSpec { return v.Spec }).(CSIDriverSpecPtrOutput)
}

type CSIDriverArrayOutput struct { *pulumi.OutputState }

func (CSIDriverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIDriver)(nil)).Elem()
}

func (o CSIDriverArrayOutput) ToCSIDriverArrayOutput() CSIDriverArrayOutput {
	return o
}

func (o CSIDriverArrayOutput) ToCSIDriverArrayOutputWithContext(ctx context.Context) CSIDriverArrayOutput {
	return o
}

func (o CSIDriverArrayOutput) Index(i pulumi.IntInput) CSIDriverOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CSIDriver {
		return vs[0].([]CSIDriver)[vs[1].(int)]
	}).(CSIDriverOutput)
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CSIDriver
	Items []CSIDriver `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type CSIDriverListInput interface {
	pulumi.Input

	ToCSIDriverListOutput() CSIDriverListOutput
	ToCSIDriverListOutputWithContext(context.Context) CSIDriverListOutput
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CSIDriver
	Items CSIDriverArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSIDriverListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverList)(nil)).Elem()
}

func (i CSIDriverListArgs) ToCSIDriverListOutput() CSIDriverListOutput {
	return i.ToCSIDriverListOutputWithContext(context.Background())
}

func (i CSIDriverListArgs) ToCSIDriverListOutputWithContext(ctx context.Context) CSIDriverListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverListOutput)
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverListOutput struct { *pulumi.OutputState }

func (CSIDriverListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverList)(nil)).Elem()
}

func (o CSIDriverListOutput) ToCSIDriverListOutput() CSIDriverListOutput {
	return o
}

func (o CSIDriverListOutput) ToCSIDriverListOutputWithContext(ctx context.Context) CSIDriverListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIDriverListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSIDriverList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CSIDriver
func (o CSIDriverListOutput) Items() CSIDriverArrayOutput {
	return o.ApplyT(func (v CSIDriverList) []CSIDriver { return v.Items }).(CSIDriverArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIDriverListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSIDriverList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIDriverListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v CSIDriverList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpec struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	AttachRequired *bool `pulumi:"attachRequired"`
	// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	PodInfoOnMount *bool `pulumi:"podInfoOnMount"`
	// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	VolumeLifecycleModes []string `pulumi:"volumeLifecycleModes"`
}

type CSIDriverSpecInput interface {
	pulumi.Input

	ToCSIDriverSpecOutput() CSIDriverSpecOutput
	ToCSIDriverSpecOutputWithContext(context.Context) CSIDriverSpecOutput
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecArgs struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	AttachRequired pulumi.BoolPtrInput `pulumi:"attachRequired"`
	// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	PodInfoOnMount pulumi.BoolPtrInput `pulumi:"podInfoOnMount"`
	// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	VolumeLifecycleModes pulumi.StringArrayInput `pulumi:"volumeLifecycleModes"`
}

func (CSIDriverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpec)(nil)).Elem()
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecOutput() CSIDriverSpecOutput {
	return i.ToCSIDriverSpecOutputWithContext(context.Background())
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecOutputWithContext(ctx context.Context) CSIDriverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecOutput)
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecPtrOutput() CSIDriverSpecPtrOutput {
	return i.ToCSIDriverSpecPtrOutputWithContext(context.Background())
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecPtrOutputWithContext(ctx context.Context) CSIDriverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecOutput).ToCSIDriverSpecPtrOutputWithContext(ctx)
}

type CSIDriverSpecPtrInput interface {
	pulumi.Input

	ToCSIDriverSpecPtrOutput() CSIDriverSpecPtrOutput
	ToCSIDriverSpecPtrOutputWithContext(context.Context) CSIDriverSpecPtrOutput
}

type csidriverSpecPtrType CSIDriverSpecArgs

func CSIDriverSpecPtr(v *CSIDriverSpecArgs) CSIDriverSpecPtrInput {	return (*csidriverSpecPtrType)(v)
}

func (*csidriverSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIDriverSpec)(nil)).Elem()
}

func (i *csidriverSpecPtrType) ToCSIDriverSpecPtrOutput() CSIDriverSpecPtrOutput {
	return i.ToCSIDriverSpecPtrOutputWithContext(context.Background())
}

func (i *csidriverSpecPtrType) ToCSIDriverSpecPtrOutputWithContext(ctx context.Context) CSIDriverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecPtrOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecOutput struct { *pulumi.OutputState }

func (CSIDriverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpec)(nil)).Elem()
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecOutput() CSIDriverSpecOutput {
	return o
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecOutputWithContext(ctx context.Context) CSIDriverSpecOutput {
	return o
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecPtrOutput() CSIDriverSpecPtrOutput {
	return o.ToCSIDriverSpecPtrOutputWithContext(context.Background())
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecPtrOutputWithContext(ctx context.Context) CSIDriverSpecPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *CSIDriverSpec {
		return &v
	}).(CSIDriverSpecPtrOutput)
}
// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
func (o CSIDriverSpecOutput) AttachRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CSIDriverSpec) *bool { return v.AttachRequired }).(pulumi.BoolPtrOutput)
}

// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
//                                 defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
func (o CSIDriverSpecOutput) PodInfoOnMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CSIDriverSpec) *bool { return v.PodInfoOnMount }).(pulumi.BoolPtrOutput)
}

// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
func (o CSIDriverSpecOutput) VolumeLifecycleModes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CSIDriverSpec) []string { return v.VolumeLifecycleModes }).(pulumi.StringArrayOutput)
}

type CSIDriverSpecPtrOutput struct { *pulumi.OutputState }

func (CSIDriverSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIDriverSpec)(nil)).Elem()
}

func (o CSIDriverSpecPtrOutput) ToCSIDriverSpecPtrOutput() CSIDriverSpecPtrOutput {
	return o
}

func (o CSIDriverSpecPtrOutput) ToCSIDriverSpecPtrOutputWithContext(ctx context.Context) CSIDriverSpecPtrOutput {
	return o
}

func (o CSIDriverSpecPtrOutput) Elem() CSIDriverSpecOutput {
	return o.ApplyT(func (v *CSIDriverSpec) CSIDriverSpec { return *v }).(CSIDriverSpecOutput)
}

// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
func (o CSIDriverSpecPtrOutput) AttachRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CSIDriverSpec) *bool { return v.AttachRequired }).(pulumi.BoolPtrOutput)
}

// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
//                                 defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
func (o CSIDriverSpecPtrOutput) PodInfoOnMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CSIDriverSpec) *bool { return v.PodInfoOnMount }).(pulumi.BoolPtrOutput)
}

// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
func (o CSIDriverSpecPtrOutput) VolumeLifecycleModes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CSIDriverSpec) []string { return v.VolumeLifecycleModes }).(pulumi.StringArrayOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINode struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// metadata.name must be the Kubernetes node name.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec *CSINodeSpec `pulumi:"spec"`
}

type CSINodeInput interface {
	pulumi.Input

	ToCSINodeOutput() CSINodeOutput
	ToCSINodeOutputWithContext(context.Context) CSINodeOutput
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// metadata.name must be the Kubernetes node name.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec CSINodeSpecPtrInput `pulumi:"spec"`
}

func (CSINodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINode)(nil)).Elem()
}

func (i CSINodeArgs) ToCSINodeOutput() CSINodeOutput {
	return i.ToCSINodeOutputWithContext(context.Background())
}

func (i CSINodeArgs) ToCSINodeOutputWithContext(ctx context.Context) CSINodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeOutput)
}

type CSINodeArrayInput interface {
	pulumi.Input

	ToCSINodeArrayOutput() CSINodeArrayOutput
	ToCSINodeArrayOutputWithContext(context.Context) CSINodeArrayOutput
}

type CSINodeArray []CSINodeInput

func (CSINodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINode)(nil)).Elem()
}

func (i CSINodeArray) ToCSINodeArrayOutput() CSINodeArrayOutput {
	return i.ToCSINodeArrayOutputWithContext(context.Background())
}

func (i CSINodeArray) ToCSINodeArrayOutputWithContext(ctx context.Context) CSINodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeArrayOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodeOutput struct { *pulumi.OutputState }

func (CSINodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINode)(nil)).Elem()
}

func (o CSINodeOutput) ToCSINodeOutput() CSINodeOutput {
	return o
}

func (o CSINodeOutput) ToCSINodeOutputWithContext(ctx context.Context) CSINodeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSINodeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINode) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSINodeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINode) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// metadata.name must be the Kubernetes node name.
func (o CSINodeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v CSINode) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec is the specification of CSINode
func (o CSINodeOutput) Spec() CSINodeSpecPtrOutput {
	return o.ApplyT(func (v CSINode) *CSINodeSpec { return v.Spec }).(CSINodeSpecPtrOutput)
}

type CSINodeArrayOutput struct { *pulumi.OutputState }

func (CSINodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINode)(nil)).Elem()
}

func (o CSINodeArrayOutput) ToCSINodeArrayOutput() CSINodeArrayOutput {
	return o
}

func (o CSINodeArrayOutput) ToCSINodeArrayOutputWithContext(ctx context.Context) CSINodeArrayOutput {
	return o
}

func (o CSINodeArrayOutput) Index(i pulumi.IntInput) CSINodeOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CSINode {
		return vs[0].([]CSINode)[vs[1].(int)]
	}).(CSINodeOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriver struct {
	// allocatable represents the volume resources of a node that are available for scheduling.
	Allocatable *VolumeNodeResources `pulumi:"allocatable"`
	// This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name *string `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID *string `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []string `pulumi:"topologyKeys"`
}

type CSINodeDriverInput interface {
	pulumi.Input

	ToCSINodeDriverOutput() CSINodeDriverOutput
	ToCSINodeDriverOutputWithContext(context.Context) CSINodeDriverOutput
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverArgs struct {
	// allocatable represents the volume resources of a node that are available for scheduling.
	Allocatable VolumeNodeResourcesPtrInput `pulumi:"allocatable"`
	// This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID pulumi.StringPtrInput `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
}

func (CSINodeDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriver)(nil)).Elem()
}

func (i CSINodeDriverArgs) ToCSINodeDriverOutput() CSINodeDriverOutput {
	return i.ToCSINodeDriverOutputWithContext(context.Background())
}

func (i CSINodeDriverArgs) ToCSINodeDriverOutputWithContext(ctx context.Context) CSINodeDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverOutput)
}

type CSINodeDriverArrayInput interface {
	pulumi.Input

	ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput
	ToCSINodeDriverArrayOutputWithContext(context.Context) CSINodeDriverArrayOutput
}

type CSINodeDriverArray []CSINodeDriverInput

func (CSINodeDriverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriver)(nil)).Elem()
}

func (i CSINodeDriverArray) ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput {
	return i.ToCSINodeDriverArrayOutputWithContext(context.Background())
}

func (i CSINodeDriverArray) ToCSINodeDriverArrayOutputWithContext(ctx context.Context) CSINodeDriverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverArrayOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverOutput struct { *pulumi.OutputState }

func (CSINodeDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriver)(nil)).Elem()
}

func (o CSINodeDriverOutput) ToCSINodeDriverOutput() CSINodeDriverOutput {
	return o
}

func (o CSINodeDriverOutput) ToCSINodeDriverOutputWithContext(ctx context.Context) CSINodeDriverOutput {
	return o
}

// allocatable represents the volume resources of a node that are available for scheduling.
func (o CSINodeDriverOutput) Allocatable() VolumeNodeResourcesPtrOutput {
	return o.ApplyT(func (v CSINodeDriver) *VolumeNodeResources { return v.Allocatable }).(VolumeNodeResourcesPtrOutput)
}

// This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
func (o CSINodeDriverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINodeDriver) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
func (o CSINodeDriverOutput) NodeID() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINodeDriver) *string { return v.NodeID }).(pulumi.StringPtrOutput)
}

// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
func (o CSINodeDriverOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CSINodeDriver) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

type CSINodeDriverArrayOutput struct { *pulumi.OutputState }

func (CSINodeDriverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriver)(nil)).Elem()
}

func (o CSINodeDriverArrayOutput) ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput {
	return o
}

func (o CSINodeDriverArrayOutput) ToCSINodeDriverArrayOutputWithContext(ctx context.Context) CSINodeDriverArrayOutput {
	return o
}

func (o CSINodeDriverArrayOutput) Index(i pulumi.IntInput) CSINodeDriverOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CSINodeDriver {
		return vs[0].([]CSINodeDriver)[vs[1].(int)]
	}).(CSINodeDriverOutput)
}

// CSINodeList is a collection of CSINode objects.
type CSINodeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CSINode
	Items []CSINode `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type CSINodeListInput interface {
	pulumi.Input

	ToCSINodeListOutput() CSINodeListOutput
	ToCSINodeListOutputWithContext(context.Context) CSINodeListOutput
}

// CSINodeList is a collection of CSINode objects.
type CSINodeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CSINode
	Items CSINodeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSINodeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeList)(nil)).Elem()
}

func (i CSINodeListArgs) ToCSINodeListOutput() CSINodeListOutput {
	return i.ToCSINodeListOutputWithContext(context.Background())
}

func (i CSINodeListArgs) ToCSINodeListOutputWithContext(ctx context.Context) CSINodeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeListOutput)
}

// CSINodeList is a collection of CSINode objects.
type CSINodeListOutput struct { *pulumi.OutputState }

func (CSINodeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeList)(nil)).Elem()
}

func (o CSINodeListOutput) ToCSINodeListOutput() CSINodeListOutput {
	return o
}

func (o CSINodeListOutput) ToCSINodeListOutputWithContext(ctx context.Context) CSINodeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSINodeListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINodeList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CSINode
func (o CSINodeListOutput) Items() CSINodeArrayOutput {
	return o.ApplyT(func (v CSINodeList) []CSINode { return v.Items }).(CSINodeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSINodeListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CSINodeList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSINodeListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v CSINodeList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpec struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers []CSINodeDriver `pulumi:"drivers"`
}

type CSINodeSpecInput interface {
	pulumi.Input

	ToCSINodeSpecOutput() CSINodeSpecOutput
	ToCSINodeSpecOutputWithContext(context.Context) CSINodeSpecOutput
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecArgs struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers CSINodeDriverArrayInput `pulumi:"drivers"`
}

func (CSINodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpec)(nil)).Elem()
}

func (i CSINodeSpecArgs) ToCSINodeSpecOutput() CSINodeSpecOutput {
	return i.ToCSINodeSpecOutputWithContext(context.Background())
}

func (i CSINodeSpecArgs) ToCSINodeSpecOutputWithContext(ctx context.Context) CSINodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecOutput)
}

func (i CSINodeSpecArgs) ToCSINodeSpecPtrOutput() CSINodeSpecPtrOutput {
	return i.ToCSINodeSpecPtrOutputWithContext(context.Background())
}

func (i CSINodeSpecArgs) ToCSINodeSpecPtrOutputWithContext(ctx context.Context) CSINodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecOutput).ToCSINodeSpecPtrOutputWithContext(ctx)
}

type CSINodeSpecPtrInput interface {
	pulumi.Input

	ToCSINodeSpecPtrOutput() CSINodeSpecPtrOutput
	ToCSINodeSpecPtrOutputWithContext(context.Context) CSINodeSpecPtrOutput
}

type csinodeSpecPtrType CSINodeSpecArgs

func CSINodeSpecPtr(v *CSINodeSpecArgs) CSINodeSpecPtrInput {	return (*csinodeSpecPtrType)(v)
}

func (*csinodeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSINodeSpec)(nil)).Elem()
}

func (i *csinodeSpecPtrType) ToCSINodeSpecPtrOutput() CSINodeSpecPtrOutput {
	return i.ToCSINodeSpecPtrOutputWithContext(context.Background())
}

func (i *csinodeSpecPtrType) ToCSINodeSpecPtrOutputWithContext(ctx context.Context) CSINodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecPtrOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecOutput struct { *pulumi.OutputState }

func (CSINodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpec)(nil)).Elem()
}

func (o CSINodeSpecOutput) ToCSINodeSpecOutput() CSINodeSpecOutput {
	return o
}

func (o CSINodeSpecOutput) ToCSINodeSpecOutputWithContext(ctx context.Context) CSINodeSpecOutput {
	return o
}

func (o CSINodeSpecOutput) ToCSINodeSpecPtrOutput() CSINodeSpecPtrOutput {
	return o.ToCSINodeSpecPtrOutputWithContext(context.Background())
}

func (o CSINodeSpecOutput) ToCSINodeSpecPtrOutputWithContext(ctx context.Context) CSINodeSpecPtrOutput {
	return o.ApplyT(func(v CSINodeSpec) *CSINodeSpec {
		return &v
	}).(CSINodeSpecPtrOutput)
}
// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (o CSINodeSpecOutput) Drivers() CSINodeDriverArrayOutput {
	return o.ApplyT(func (v CSINodeSpec) []CSINodeDriver { return v.Drivers }).(CSINodeDriverArrayOutput)
}

type CSINodeSpecPtrOutput struct { *pulumi.OutputState }

func (CSINodeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSINodeSpec)(nil)).Elem()
}

func (o CSINodeSpecPtrOutput) ToCSINodeSpecPtrOutput() CSINodeSpecPtrOutput {
	return o
}

func (o CSINodeSpecPtrOutput) ToCSINodeSpecPtrOutputWithContext(ctx context.Context) CSINodeSpecPtrOutput {
	return o
}

func (o CSINodeSpecPtrOutput) Elem() CSINodeSpecOutput {
	return o.ApplyT(func (v *CSINodeSpec) CSINodeSpec { return *v }).(CSINodeSpecOutput)
}

// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (o CSINodeSpecPtrOutput) Drivers() CSINodeDriverArrayOutput {
	return o.ApplyT(func (v CSINodeSpec) []CSINodeDriver { return v.Drivers }).(CSINodeDriverArrayOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClass struct {
	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies []corev1.TopologySelectorTerm `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions []string `pulumi:"mountOptions"`
	// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters map[string]string `pulumi:"parameters"`
	// Provisioner indicates the type of the provisioner.
	Provisioner *string `pulumi:"provisioner"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode *string `pulumi:"volumeBindingMode"`
}

type StorageClassInput interface {
	pulumi.Input

	ToStorageClassOutput() StorageClassOutput
	ToStorageClassOutputWithContext(context.Context) StorageClassOutput
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassArgs struct {
	// AllowVolumeExpansion shows whether the storage class allow volume expand
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies corev1.TopologySelectorTermArrayInput `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode pulumi.StringPtrInput `pulumi:"volumeBindingMode"`
}

func (StorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClass)(nil)).Elem()
}

func (i StorageClassArgs) ToStorageClassOutput() StorageClassOutput {
	return i.ToStorageClassOutputWithContext(context.Background())
}

func (i StorageClassArgs) ToStorageClassOutputWithContext(ctx context.Context) StorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassOutput)
}

type StorageClassArrayInput interface {
	pulumi.Input

	ToStorageClassArrayOutput() StorageClassArrayOutput
	ToStorageClassArrayOutputWithContext(context.Context) StorageClassArrayOutput
}

type StorageClassArray []StorageClassInput

func (StorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageClass)(nil)).Elem()
}

func (i StorageClassArray) ToStorageClassArrayOutput() StorageClassArrayOutput {
	return i.ToStorageClassArrayOutputWithContext(context.Background())
}

func (i StorageClassArray) ToStorageClassArrayOutputWithContext(ctx context.Context) StorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassArrayOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassOutput struct { *pulumi.OutputState }

func (StorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClass)(nil)).Elem()
}

func (o StorageClassOutput) ToStorageClassOutput() StorageClassOutput {
	return o
}

func (o StorageClassOutput) ToStorageClassOutputWithContext(ctx context.Context) StorageClassOutput {
	return o
}

// AllowVolumeExpansion shows whether the storage class allow volume expand
func (o StorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v StorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassOutput) AllowedTopologies() corev1.TopologySelectorTermArrayOutput {
	return o.ApplyT(func (v StorageClass) []corev1.TopologySelectorTerm { return v.AllowedTopologies }).(corev1.TopologySelectorTermArrayOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageClassOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClass) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageClassOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClass) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageClassOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v StorageClass) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
func (o StorageClassOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func (v StorageClass) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
func (o StorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func (v StorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Provisioner indicates the type of the provisioner.
func (o StorageClassOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClass) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
func (o StorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassOutput) VolumeBindingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClass) *string { return v.VolumeBindingMode }).(pulumi.StringPtrOutput)
}

type StorageClassArrayOutput struct { *pulumi.OutputState }

func (StorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageClass)(nil)).Elem()
}

func (o StorageClassArrayOutput) ToStorageClassArrayOutput() StorageClassArrayOutput {
	return o
}

func (o StorageClassArrayOutput) ToStorageClassArrayOutputWithContext(ctx context.Context) StorageClassArrayOutput {
	return o
}

func (o StorageClassArrayOutput) Index(i pulumi.IntInput) StorageClassOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) StorageClass {
		return vs[0].([]StorageClass)[vs[1].(int)]
	}).(StorageClassOutput)
}

// StorageClassList is a collection of storage classes.
type StorageClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of StorageClasses
	Items []StorageClass `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type StorageClassListInput interface {
	pulumi.Input

	ToStorageClassListOutput() StorageClassListOutput
	ToStorageClassListOutputWithContext(context.Context) StorageClassListOutput
}

// StorageClassList is a collection of storage classes.
type StorageClassListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of StorageClasses
	Items StorageClassArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (StorageClassListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassList)(nil)).Elem()
}

func (i StorageClassListArgs) ToStorageClassListOutput() StorageClassListOutput {
	return i.ToStorageClassListOutputWithContext(context.Background())
}

func (i StorageClassListArgs) ToStorageClassListOutputWithContext(ctx context.Context) StorageClassListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassListOutput)
}

// StorageClassList is a collection of storage classes.
type StorageClassListOutput struct { *pulumi.OutputState }

func (StorageClassListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassList)(nil)).Elem()
}

func (o StorageClassListOutput) ToStorageClassListOutput() StorageClassListOutput {
	return o
}

func (o StorageClassListOutput) ToStorageClassListOutputWithContext(ctx context.Context) StorageClassListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageClassListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClassList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of StorageClasses
func (o StorageClassListOutput) Items() StorageClassArrayOutput {
	return o.ApplyT(func (v StorageClassList) []StorageClass { return v.Items }).(StorageClassArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageClassListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v StorageClassList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageClassListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v StorageClassList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec *VolumeAttachmentSpec `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatus `pulumi:"status"`
}

type VolumeAttachmentInput interface {
	pulumi.Input

	ToVolumeAttachmentOutput() VolumeAttachmentOutput
	ToVolumeAttachmentOutputWithContext(context.Context) VolumeAttachmentOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecPtrInput `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPtrInput `pulumi:"status"`
}

func (VolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return i.ToVolumeAttachmentOutputWithContext(context.Background())
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentOutput)
}

type VolumeAttachmentArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput
	ToVolumeAttachmentArrayOutputWithContext(context.Context) VolumeAttachmentArrayOutput
}

type VolumeAttachmentArray []VolumeAttachmentInput

func (VolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return i.ToVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentArrayOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentOutput struct { *pulumi.OutputState }

func (VolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachment) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachment) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v VolumeAttachment) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentOutput) Spec() VolumeAttachmentSpecPtrOutput {
	return o.ApplyT(func (v VolumeAttachment) *VolumeAttachmentSpec { return v.Spec }).(VolumeAttachmentSpecPtrOutput)
}

// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentOutput) Status() VolumeAttachmentStatusPtrOutput {
	return o.ApplyT(func (v VolumeAttachment) *VolumeAttachmentStatus { return v.Status }).(VolumeAttachmentStatusPtrOutput)
}

type VolumeAttachmentArrayOutput struct { *pulumi.OutputState }

func (VolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) VolumeAttachment {
		return vs[0].([]VolumeAttachment)[vs[1].(int)]
	}).(VolumeAttachmentOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items []VolumeAttachment `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type VolumeAttachmentListInput interface {
	pulumi.Input

	ToVolumeAttachmentListOutput() VolumeAttachmentListOutput
	ToVolumeAttachmentListOutputWithContext(context.Context) VolumeAttachmentListOutput
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items VolumeAttachmentArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VolumeAttachmentListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentList)(nil)).Elem()
}

func (i VolumeAttachmentListArgs) ToVolumeAttachmentListOutput() VolumeAttachmentListOutput {
	return i.ToVolumeAttachmentListOutputWithContext(context.Background())
}

func (i VolumeAttachmentListArgs) ToVolumeAttachmentListOutputWithContext(ctx context.Context) VolumeAttachmentListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentListOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListOutput struct { *pulumi.OutputState }

func (VolumeAttachmentListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentList)(nil)).Elem()
}

func (o VolumeAttachmentListOutput) ToVolumeAttachmentListOutput() VolumeAttachmentListOutput {
	return o
}

func (o VolumeAttachmentListOutput) ToVolumeAttachmentListOutputWithContext(ctx context.Context) VolumeAttachmentListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentListOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentList) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of VolumeAttachments
func (o VolumeAttachmentListOutput) Items() VolumeAttachmentArrayOutput {
	return o.ApplyT(func (v VolumeAttachmentList) []VolumeAttachment { return v.Items }).(VolumeAttachmentArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentList) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentListOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentList) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSource struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpec `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

type VolumeAttachmentSourceInput interface {
	pulumi.Input

	ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput
	ToVolumeAttachmentSourceOutputWithContext(context.Context) VolumeAttachmentSourceOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPtrInput `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return i.ToVolumeAttachmentSourceOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput)
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return i.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput).ToVolumeAttachmentSourcePtrOutputWithContext(ctx)
}

type VolumeAttachmentSourcePtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput
	ToVolumeAttachmentSourcePtrOutputWithContext(context.Context) VolumeAttachmentSourcePtrOutput
}

type volumeAttachmentSourcePtrType VolumeAttachmentSourceArgs

func VolumeAttachmentSourcePtr(v *VolumeAttachmentSourceArgs) VolumeAttachmentSourcePtrInput {	return (*volumeAttachmentSourcePtrType)(v)
}

func (*volumeAttachmentSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSource)(nil)).Elem()
}

func (i *volumeAttachmentSourcePtrType) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return i.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSourcePtrType) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceOutput struct { *pulumi.OutputState }

func (VolumeAttachmentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return o.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *VolumeAttachmentSource {
		return &v
	}).(VolumeAttachmentSourcePtrOutput)
}
// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourceOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSource) *corev1.PersistentVolumeSpec { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourceOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSource) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentSourcePtrOutput struct { *pulumi.OutputState }

func (VolumeAttachmentSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourcePtrOutput) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return o
}

func (o VolumeAttachmentSourcePtrOutput) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return o
}

func (o VolumeAttachmentSourcePtrOutput) Elem() VolumeAttachmentSourceOutput {
	return o.ApplyT(func (v *VolumeAttachmentSource) VolumeAttachmentSource { return *v }).(VolumeAttachmentSourceOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePtrOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSource) *corev1.PersistentVolumeSpec { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourcePtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSource) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpec struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher *string `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName *string `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source *VolumeAttachmentSource `pulumi:"source"`
}

type VolumeAttachmentSpecInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput
	ToVolumeAttachmentSpecOutputWithContext(context.Context) VolumeAttachmentSpecOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecArgs struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringPtrInput `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSourcePtrInput `pulumi:"source"`
}

func (VolumeAttachmentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return i.ToVolumeAttachmentSpecOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput)
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return i.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput).ToVolumeAttachmentSpecPtrOutputWithContext(ctx)
}

type VolumeAttachmentSpecPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput
	ToVolumeAttachmentSpecPtrOutputWithContext(context.Context) VolumeAttachmentSpecPtrOutput
}

type volumeAttachmentSpecPtrType VolumeAttachmentSpecArgs

func VolumeAttachmentSpecPtr(v *VolumeAttachmentSpecArgs) VolumeAttachmentSpecPtrInput {	return (*volumeAttachmentSpecPtrType)(v)
}

func (*volumeAttachmentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpec)(nil)).Elem()
}

func (i *volumeAttachmentSpecPtrType) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return i.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSpecPtrType) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecOutput struct { *pulumi.OutputState }

func (VolumeAttachmentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return o.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) *VolumeAttachmentSpec {
		return &v
	}).(VolumeAttachmentSpecPtrOutput)
}
// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *string { return v.Attacher }).(pulumi.StringPtrOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecOutput) Source() VolumeAttachmentSourcePtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *VolumeAttachmentSource { return v.Source }).(VolumeAttachmentSourcePtrOutput)
}

type VolumeAttachmentSpecPtrOutput struct { *pulumi.OutputState }

func (VolumeAttachmentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecPtrOutput) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPtrOutput) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPtrOutput) Elem() VolumeAttachmentSpecOutput {
	return o.ApplyT(func (v *VolumeAttachmentSpec) VolumeAttachmentSpec { return *v }).(VolumeAttachmentSpecOutput)
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPtrOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *string { return v.Attacher }).(pulumi.StringPtrOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecPtrOutput) Source() VolumeAttachmentSourcePtrOutput {
	return o.ApplyT(func (v VolumeAttachmentSpec) *VolumeAttachmentSource { return v.Source }).(VolumeAttachmentSourcePtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatus struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeError `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached *bool `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeError `pulumi:"detachError"`
}

type VolumeAttachmentStatusInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput
	ToVolumeAttachmentStatusOutputWithContext(context.Context) VolumeAttachmentStatusOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusArgs struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPtrInput `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return i.ToVolumeAttachmentStatusOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput)
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput).ToVolumeAttachmentStatusPtrOutputWithContext(ctx)
}

type VolumeAttachmentStatusPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput
	ToVolumeAttachmentStatusPtrOutputWithContext(context.Context) VolumeAttachmentStatusPtrOutput
}

type volumeAttachmentStatusPtrType VolumeAttachmentStatusArgs

func VolumeAttachmentStatusPtr(v *VolumeAttachmentStatusArgs) VolumeAttachmentStatusPtrInput {	return (*volumeAttachmentStatusPtrType)(v)
}

func (*volumeAttachmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusOutput struct { *pulumi.OutputState }

func (VolumeAttachmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeAttachmentStatus {
		return &v
	}).(VolumeAttachmentStatusPtrOutput)
}
// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *VolumeError { return v.AttachError }).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *VolumeError { return v.DetachError }).(VolumeErrorPtrOutput)
}

type VolumeAttachmentStatusPtrOutput struct { *pulumi.OutputState }

func (VolumeAttachmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) Elem() VolumeAttachmentStatusOutput {
	return o.ApplyT(func (v *VolumeAttachmentStatus) VolumeAttachmentStatus { return *v }).(VolumeAttachmentStatusOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *VolumeError { return v.AttachError }).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func (v VolumeAttachmentStatus) *VolumeError { return v.DetachError }).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeError struct {
	// String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// Time the error was encountered.
	Time *string `pulumi:"time"`
}

type VolumeErrorInput interface {
	pulumi.Input

	ToVolumeErrorOutput() VolumeErrorOutput
	ToVolumeErrorOutputWithContext(context.Context) VolumeErrorOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorArgs struct {
	// String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (i VolumeErrorArgs) ToVolumeErrorOutput() VolumeErrorOutput {
	return i.ToVolumeErrorOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput)
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput).ToVolumeErrorPtrOutputWithContext(ctx)
}

type VolumeErrorPtrInput interface {
	pulumi.Input

	ToVolumeErrorPtrOutput() VolumeErrorPtrOutput
	ToVolumeErrorPtrOutputWithContext(context.Context) VolumeErrorPtrOutput
}

type volumeErrorPtrType VolumeErrorArgs

func VolumeErrorPtr(v *VolumeErrorArgs) VolumeErrorPtrInput {	return (*volumeErrorPtrType)(v)
}

func (*volumeErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorOutput struct { *pulumi.OutputState }

func (VolumeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (o VolumeErrorOutput) ToVolumeErrorOutput() VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeError) *VolumeError {
		return &v
	}).(VolumeErrorPtrOutput)
}
// String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeError) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPtrOutput struct { *pulumi.OutputState }

func (VolumeErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) Elem() VolumeErrorOutput {
	return o.ApplyT(func (v *VolumeError) VolumeError { return *v }).(VolumeErrorOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func (v VolumeError) *string { return v.Time }).(pulumi.StringPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResources struct {
	// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.
	Count *int `pulumi:"count"`
}

type VolumeNodeResourcesInput interface {
	pulumi.Input

	ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput
	ToVolumeNodeResourcesOutputWithContext(context.Context) VolumeNodeResourcesOutput
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesArgs struct {
	// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (VolumeNodeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResources)(nil)).Elem()
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput {
	return i.ToVolumeNodeResourcesOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesOutput)
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return i.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesOutput).ToVolumeNodeResourcesPtrOutputWithContext(ctx)
}

type VolumeNodeResourcesPtrInput interface {
	pulumi.Input

	ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput
	ToVolumeNodeResourcesPtrOutputWithContext(context.Context) VolumeNodeResourcesPtrOutput
}

type volumeNodeResourcesPtrType VolumeNodeResourcesArgs

func VolumeNodeResourcesPtr(v *VolumeNodeResourcesArgs) VolumeNodeResourcesPtrInput {	return (*volumeNodeResourcesPtrType)(v)
}

func (*volumeNodeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResources)(nil)).Elem()
}

func (i *volumeNodeResourcesPtrType) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return i.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (i *volumeNodeResourcesPtrType) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesOutput struct { *pulumi.OutputState }

func (VolumeNodeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResources)(nil)).Elem()
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput {
	return o
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput {
	return o
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return o.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return o.ApplyT(func(v VolumeNodeResources) *VolumeNodeResources {
		return &v
	}).(VolumeNodeResourcesPtrOutput)
}
// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func (v VolumeNodeResources) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type VolumeNodeResourcesPtrOutput struct { *pulumi.OutputState }

func (VolumeNodeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResources)(nil)).Elem()
}

func (o VolumeNodeResourcesPtrOutput) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return o
}

func (o VolumeNodeResourcesPtrOutput) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return o
}

func (o VolumeNodeResourcesPtrOutput) Elem() VolumeNodeResourcesOutput {
	return o.ApplyT(func (v *VolumeNodeResources) VolumeNodeResources { return *v }).(VolumeNodeResourcesOutput)
}

// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func (v VolumeNodeResources) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CSIDriverOutput{})
	pulumi.RegisterOutputType(CSIDriverArrayOutput{})
	pulumi.RegisterOutputType(CSIDriverListOutput{})
	pulumi.RegisterOutputType(CSIDriverSpecOutput{})
	pulumi.RegisterOutputType(CSIDriverSpecPtrOutput{})
	pulumi.RegisterOutputType(CSINodeOutput{})
	pulumi.RegisterOutputType(CSINodeArrayOutput{})
	pulumi.RegisterOutputType(CSINodeDriverOutput{})
	pulumi.RegisterOutputType(CSINodeDriverArrayOutput{})
	pulumi.RegisterOutputType(CSINodeListOutput{})
	pulumi.RegisterOutputType(CSINodeSpecOutput{})
	pulumi.RegisterOutputType(CSINodeSpecPtrOutput{})
	pulumi.RegisterOutputType(StorageClassOutput{})
	pulumi.RegisterOutputType(StorageClassArrayOutput{})
	pulumi.RegisterOutputType(StorageClassListOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentListOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourceOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeErrorOutput{})
	pulumi.RegisterOutputType(VolumeErrorPtrOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesPtrOutput{})
}
