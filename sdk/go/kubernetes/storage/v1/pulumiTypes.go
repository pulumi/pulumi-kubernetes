// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec represents the specification of the CSI Driver.
	Spec CSIDriverSpec `pulumi:"spec"`
}

// CSIDriverTypeInput is an input type that accepts CSIDriverTypeArgs and CSIDriverTypeOutput values.
// You can construct a concrete instance of `CSIDriverTypeInput` via:
//
//	CSIDriverTypeArgs{...}
type CSIDriverTypeInput interface {
	pulumi.Input

	ToCSIDriverTypeOutput() CSIDriverTypeOutput
	ToCSIDriverTypeOutputWithContext(context.Context) CSIDriverTypeOutput
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec represents the specification of the CSI Driver.
	Spec CSIDriverSpecInput `pulumi:"spec"`
}

func (CSIDriverTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverType)(nil)).Elem()
}

func (i CSIDriverTypeArgs) ToCSIDriverTypeOutput() CSIDriverTypeOutput {
	return i.ToCSIDriverTypeOutputWithContext(context.Background())
}

func (i CSIDriverTypeArgs) ToCSIDriverTypeOutputWithContext(ctx context.Context) CSIDriverTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverTypeOutput)
}

// CSIDriverTypeArrayInput is an input type that accepts CSIDriverTypeArray and CSIDriverTypeArrayOutput values.
// You can construct a concrete instance of `CSIDriverTypeArrayInput` via:
//
//	CSIDriverTypeArray{ CSIDriverTypeArgs{...} }
type CSIDriverTypeArrayInput interface {
	pulumi.Input

	ToCSIDriverTypeArrayOutput() CSIDriverTypeArrayOutput
	ToCSIDriverTypeArrayOutputWithContext(context.Context) CSIDriverTypeArrayOutput
}

type CSIDriverTypeArray []CSIDriverTypeInput

func (CSIDriverTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIDriverType)(nil)).Elem()
}

func (i CSIDriverTypeArray) ToCSIDriverTypeArrayOutput() CSIDriverTypeArrayOutput {
	return i.ToCSIDriverTypeArrayOutputWithContext(context.Background())
}

func (i CSIDriverTypeArray) ToCSIDriverTypeArrayOutputWithContext(ctx context.Context) CSIDriverTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverTypeArrayOutput)
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverTypeOutput struct{ *pulumi.OutputState }

func (CSIDriverTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverType)(nil)).Elem()
}

func (o CSIDriverTypeOutput) ToCSIDriverTypeOutput() CSIDriverTypeOutput {
	return o
}

func (o CSIDriverTypeOutput) ToCSIDriverTypeOutputWithContext(ctx context.Context) CSIDriverTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIDriverTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIDriverTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIDriverTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIDriverType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec represents the specification of the CSI Driver.
func (o CSIDriverTypeOutput) Spec() CSIDriverSpecOutput {
	return o.ApplyT(func(v CSIDriverType) CSIDriverSpec { return v.Spec }).(CSIDriverSpecOutput)
}

type CSIDriverTypeArrayOutput struct{ *pulumi.OutputState }

func (CSIDriverTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIDriverType)(nil)).Elem()
}

func (o CSIDriverTypeArrayOutput) ToCSIDriverTypeArrayOutput() CSIDriverTypeArrayOutput {
	return o
}

func (o CSIDriverTypeArrayOutput) ToCSIDriverTypeArrayOutputWithContext(ctx context.Context) CSIDriverTypeArrayOutput {
	return o
}

func (o CSIDriverTypeArrayOutput) Index(i pulumi.IntInput) CSIDriverTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIDriverType {
		return vs[0].([]CSIDriverType)[vs[1].(int)]
	}).(CSIDriverTypeOutput)
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CSIDriver
	Items []CSIDriverType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CSIDriverListTypeInput is an input type that accepts CSIDriverListTypeArgs and CSIDriverListTypeOutput values.
// You can construct a concrete instance of `CSIDriverListTypeInput` via:
//
//	CSIDriverListTypeArgs{...}
type CSIDriverListTypeInput interface {
	pulumi.Input

	ToCSIDriverListTypeOutput() CSIDriverListTypeOutput
	ToCSIDriverListTypeOutputWithContext(context.Context) CSIDriverListTypeOutput
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CSIDriver
	Items CSIDriverTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSIDriverListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverListType)(nil)).Elem()
}

func (i CSIDriverListTypeArgs) ToCSIDriverListTypeOutput() CSIDriverListTypeOutput {
	return i.ToCSIDriverListTypeOutputWithContext(context.Background())
}

func (i CSIDriverListTypeArgs) ToCSIDriverListTypeOutputWithContext(ctx context.Context) CSIDriverListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverListTypeOutput)
}

// CSIDriverList is a collection of CSIDriver objects.
type CSIDriverListTypeOutput struct{ *pulumi.OutputState }

func (CSIDriverListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverListType)(nil)).Elem()
}

func (o CSIDriverListTypeOutput) ToCSIDriverListTypeOutput() CSIDriverListTypeOutput {
	return o
}

func (o CSIDriverListTypeOutput) ToCSIDriverListTypeOutputWithContext(ctx context.Context) CSIDriverListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIDriverListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CSIDriver
func (o CSIDriverListTypeOutput) Items() CSIDriverTypeArrayOutput {
	return o.ApplyT(func(v CSIDriverListType) []CSIDriverType { return v.Items }).(CSIDriverTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIDriverListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIDriverListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CSIDriverListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec represents the specification of the CSI Driver.
	Spec *CSIDriverSpecPatch `pulumi:"spec"`
}

// CSIDriverPatchTypeInput is an input type that accepts CSIDriverPatchTypeArgs and CSIDriverPatchTypeOutput values.
// You can construct a concrete instance of `CSIDriverPatchTypeInput` via:
//
//	CSIDriverPatchTypeArgs{...}
type CSIDriverPatchTypeInput interface {
	pulumi.Input

	ToCSIDriverPatchTypeOutput() CSIDriverPatchTypeOutput
	ToCSIDriverPatchTypeOutputWithContext(context.Context) CSIDriverPatchTypeOutput
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec represents the specification of the CSI Driver.
	Spec CSIDriverSpecPatchPtrInput `pulumi:"spec"`
}

func (CSIDriverPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverPatchType)(nil)).Elem()
}

func (i CSIDriverPatchTypeArgs) ToCSIDriverPatchTypeOutput() CSIDriverPatchTypeOutput {
	return i.ToCSIDriverPatchTypeOutputWithContext(context.Background())
}

func (i CSIDriverPatchTypeArgs) ToCSIDriverPatchTypeOutputWithContext(ctx context.Context) CSIDriverPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverPatchTypeOutput)
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type CSIDriverPatchTypeOutput struct{ *pulumi.OutputState }

func (CSIDriverPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverPatchType)(nil)).Elem()
}

func (o CSIDriverPatchTypeOutput) ToCSIDriverPatchTypeOutput() CSIDriverPatchTypeOutput {
	return o
}

func (o CSIDriverPatchTypeOutput) ToCSIDriverPatchTypeOutputWithContext(ctx context.Context) CSIDriverPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIDriverPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIDriverPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIDriverPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v CSIDriverPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec represents the specification of the CSI Driver.
func (o CSIDriverPatchTypeOutput) Spec() CSIDriverSpecPatchPtrOutput {
	return o.ApplyT(func(v CSIDriverPatchType) *CSIDriverSpecPatch { return v.Spec }).(CSIDriverSpecPatchPtrOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpec struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired *bool `pulumi:"attachRequired"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy *string `pulumi:"fsGroupPolicy"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount *bool `pulumi:"podInfoOnMount"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish *bool `pulumi:"requiresRepublish"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount *bool `pulumi:"seLinuxMount"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity *bool `pulumi:"storageCapacity"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests []TokenRequest `pulumi:"tokenRequests"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes []string `pulumi:"volumeLifecycleModes"`
}

// CSIDriverSpecInput is an input type that accepts CSIDriverSpecArgs and CSIDriverSpecOutput values.
// You can construct a concrete instance of `CSIDriverSpecInput` via:
//
//	CSIDriverSpecArgs{...}
type CSIDriverSpecInput interface {
	pulumi.Input

	ToCSIDriverSpecOutput() CSIDriverSpecOutput
	ToCSIDriverSpecOutputWithContext(context.Context) CSIDriverSpecOutput
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecArgs struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired pulumi.BoolPtrInput `pulumi:"attachRequired"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy pulumi.StringPtrInput `pulumi:"fsGroupPolicy"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount pulumi.BoolPtrInput `pulumi:"podInfoOnMount"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish pulumi.BoolPtrInput `pulumi:"requiresRepublish"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount pulumi.BoolPtrInput `pulumi:"seLinuxMount"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity pulumi.BoolPtrInput `pulumi:"storageCapacity"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests TokenRequestArrayInput `pulumi:"tokenRequests"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes pulumi.StringArrayInput `pulumi:"volumeLifecycleModes"`
}

func (CSIDriverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpec)(nil)).Elem()
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecOutput() CSIDriverSpecOutput {
	return i.ToCSIDriverSpecOutputWithContext(context.Background())
}

func (i CSIDriverSpecArgs) ToCSIDriverSpecOutputWithContext(ctx context.Context) CSIDriverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecOutput struct{ *pulumi.OutputState }

func (CSIDriverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpec)(nil)).Elem()
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecOutput() CSIDriverSpecOutput {
	return o
}

func (o CSIDriverSpecOutput) ToCSIDriverSpecOutputWithContext(ctx context.Context) CSIDriverSpecOutput {
	return o
}

// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
//
// This field is immutable.
func (o CSIDriverSpecOutput) AttachRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *bool { return v.AttachRequired }).(pulumi.BoolPtrOutput)
}

// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
//
// This field is immutable.
//
// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
func (o CSIDriverSpecOutput) FsGroupPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *string { return v.FsGroupPolicy }).(pulumi.StringPtrOutput)
}

// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
//
// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
//
// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
//
//	defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
//
// This field is immutable.
func (o CSIDriverSpecOutput) PodInfoOnMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *bool { return v.PodInfoOnMount }).(pulumi.BoolPtrOutput)
}

// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
//
// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
func (o CSIDriverSpecOutput) RequiresRepublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *bool { return v.RequiresRepublish }).(pulumi.BoolPtrOutput)
}

// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
//
// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
//
// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
//
// Default is "false".
func (o CSIDriverSpecOutput) SeLinuxMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *bool { return v.SeLinuxMount }).(pulumi.BoolPtrOutput)
}

// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
//
// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
//
// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
//
// This field was immutable in Kubernetes <= 1.22 and now is mutable.
func (o CSIDriverSpecOutput) StorageCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpec) *bool { return v.StorageCapacity }).(pulumi.BoolPtrOutput)
}

//	tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
//	  "<audience>": {
//	    "token": <token>,
//	    "expirationTimestamp": <expiration timestamp in RFC3339>,
//	  },
//	  ...
//	}
//
// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
func (o CSIDriverSpecOutput) TokenRequests() TokenRequestArrayOutput {
	return o.ApplyT(func(v CSIDriverSpec) []TokenRequest { return v.TokenRequests }).(TokenRequestArrayOutput)
}

// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
//
// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
//
// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
//
// This field is beta. This field is immutable.
func (o CSIDriverSpecOutput) VolumeLifecycleModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIDriverSpec) []string { return v.VolumeLifecycleModes }).(pulumi.StringArrayOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecPatch struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired *bool `pulumi:"attachRequired"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy *string `pulumi:"fsGroupPolicy"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount *bool `pulumi:"podInfoOnMount"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish *bool `pulumi:"requiresRepublish"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount *bool `pulumi:"seLinuxMount"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity *bool `pulumi:"storageCapacity"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests []TokenRequestPatch `pulumi:"tokenRequests"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes []string `pulumi:"volumeLifecycleModes"`
}

// CSIDriverSpecPatchInput is an input type that accepts CSIDriverSpecPatchArgs and CSIDriverSpecPatchOutput values.
// You can construct a concrete instance of `CSIDriverSpecPatchInput` via:
//
//	CSIDriverSpecPatchArgs{...}
type CSIDriverSpecPatchInput interface {
	pulumi.Input

	ToCSIDriverSpecPatchOutput() CSIDriverSpecPatchOutput
	ToCSIDriverSpecPatchOutputWithContext(context.Context) CSIDriverSpecPatchOutput
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecPatchArgs struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired pulumi.BoolPtrInput `pulumi:"attachRequired"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy pulumi.StringPtrInput `pulumi:"fsGroupPolicy"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount pulumi.BoolPtrInput `pulumi:"podInfoOnMount"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish pulumi.BoolPtrInput `pulumi:"requiresRepublish"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount pulumi.BoolPtrInput `pulumi:"seLinuxMount"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity pulumi.BoolPtrInput `pulumi:"storageCapacity"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests TokenRequestPatchArrayInput `pulumi:"tokenRequests"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes pulumi.StringArrayInput `pulumi:"volumeLifecycleModes"`
}

func (CSIDriverSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpecPatch)(nil)).Elem()
}

func (i CSIDriverSpecPatchArgs) ToCSIDriverSpecPatchOutput() CSIDriverSpecPatchOutput {
	return i.ToCSIDriverSpecPatchOutputWithContext(context.Background())
}

func (i CSIDriverSpecPatchArgs) ToCSIDriverSpecPatchOutputWithContext(ctx context.Context) CSIDriverSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecPatchOutput)
}

func (i CSIDriverSpecPatchArgs) ToCSIDriverSpecPatchPtrOutput() CSIDriverSpecPatchPtrOutput {
	return i.ToCSIDriverSpecPatchPtrOutputWithContext(context.Background())
}

func (i CSIDriverSpecPatchArgs) ToCSIDriverSpecPatchPtrOutputWithContext(ctx context.Context) CSIDriverSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecPatchOutput).ToCSIDriverSpecPatchPtrOutputWithContext(ctx)
}

// CSIDriverSpecPatchPtrInput is an input type that accepts CSIDriverSpecPatchArgs, CSIDriverSpecPatchPtr and CSIDriverSpecPatchPtrOutput values.
// You can construct a concrete instance of `CSIDriverSpecPatchPtrInput` via:
//
//	        CSIDriverSpecPatchArgs{...}
//
//	or:
//
//	        nil
type CSIDriverSpecPatchPtrInput interface {
	pulumi.Input

	ToCSIDriverSpecPatchPtrOutput() CSIDriverSpecPatchPtrOutput
	ToCSIDriverSpecPatchPtrOutputWithContext(context.Context) CSIDriverSpecPatchPtrOutput
}

type csidriverSpecPatchPtrType CSIDriverSpecPatchArgs

func CSIDriverSpecPatchPtr(v *CSIDriverSpecPatchArgs) CSIDriverSpecPatchPtrInput {
	return (*csidriverSpecPatchPtrType)(v)
}

func (*csidriverSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIDriverSpecPatch)(nil)).Elem()
}

func (i *csidriverSpecPatchPtrType) ToCSIDriverSpecPatchPtrOutput() CSIDriverSpecPatchPtrOutput {
	return i.ToCSIDriverSpecPatchPtrOutputWithContext(context.Background())
}

func (i *csidriverSpecPatchPtrType) ToCSIDriverSpecPatchPtrOutputWithContext(ctx context.Context) CSIDriverSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIDriverSpecPatchPtrOutput)
}

// CSIDriverSpec is the specification of a CSIDriver.
type CSIDriverSpecPatchOutput struct{ *pulumi.OutputState }

func (CSIDriverSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIDriverSpecPatch)(nil)).Elem()
}

func (o CSIDriverSpecPatchOutput) ToCSIDriverSpecPatchOutput() CSIDriverSpecPatchOutput {
	return o
}

func (o CSIDriverSpecPatchOutput) ToCSIDriverSpecPatchOutputWithContext(ctx context.Context) CSIDriverSpecPatchOutput {
	return o
}

func (o CSIDriverSpecPatchOutput) ToCSIDriverSpecPatchPtrOutput() CSIDriverSpecPatchPtrOutput {
	return o.ToCSIDriverSpecPatchPtrOutputWithContext(context.Background())
}

func (o CSIDriverSpecPatchOutput) ToCSIDriverSpecPatchPtrOutputWithContext(ctx context.Context) CSIDriverSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSIDriverSpecPatch) *CSIDriverSpecPatch {
		return &v
	}).(CSIDriverSpecPatchPtrOutput)
}

// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
//
// This field is immutable.
func (o CSIDriverSpecPatchOutput) AttachRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *bool { return v.AttachRequired }).(pulumi.BoolPtrOutput)
}

// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
//
// This field is immutable.
//
// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
func (o CSIDriverSpecPatchOutput) FsGroupPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *string { return v.FsGroupPolicy }).(pulumi.StringPtrOutput)
}

// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
//
// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
//
// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
//
//	defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
//
// This field is immutable.
func (o CSIDriverSpecPatchOutput) PodInfoOnMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *bool { return v.PodInfoOnMount }).(pulumi.BoolPtrOutput)
}

// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
//
// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
func (o CSIDriverSpecPatchOutput) RequiresRepublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *bool { return v.RequiresRepublish }).(pulumi.BoolPtrOutput)
}

// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
//
// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
//
// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
//
// Default is "false".
func (o CSIDriverSpecPatchOutput) SeLinuxMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *bool { return v.SeLinuxMount }).(pulumi.BoolPtrOutput)
}

// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
//
// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
//
// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
//
// This field was immutable in Kubernetes <= 1.22 and now is mutable.
func (o CSIDriverSpecPatchOutput) StorageCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) *bool { return v.StorageCapacity }).(pulumi.BoolPtrOutput)
}

//	tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
//	  "<audience>": {
//	    "token": <token>,
//	    "expirationTimestamp": <expiration timestamp in RFC3339>,
//	  },
//	  ...
//	}
//
// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
func (o CSIDriverSpecPatchOutput) TokenRequests() TokenRequestPatchArrayOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) []TokenRequestPatch { return v.TokenRequests }).(TokenRequestPatchArrayOutput)
}

// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
//
// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
//
// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
//
// This field is beta. This field is immutable.
func (o CSIDriverSpecPatchOutput) VolumeLifecycleModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIDriverSpecPatch) []string { return v.VolumeLifecycleModes }).(pulumi.StringArrayOutput)
}

type CSIDriverSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (CSIDriverSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIDriverSpecPatch)(nil)).Elem()
}

func (o CSIDriverSpecPatchPtrOutput) ToCSIDriverSpecPatchPtrOutput() CSIDriverSpecPatchPtrOutput {
	return o
}

func (o CSIDriverSpecPatchPtrOutput) ToCSIDriverSpecPatchPtrOutputWithContext(ctx context.Context) CSIDriverSpecPatchPtrOutput {
	return o
}

func (o CSIDriverSpecPatchPtrOutput) Elem() CSIDriverSpecPatchOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) CSIDriverSpecPatch {
		if v != nil {
			return *v
		}
		var ret CSIDriverSpecPatch
		return ret
	}).(CSIDriverSpecPatchOutput)
}

// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
//
// This field is immutable.
func (o CSIDriverSpecPatchPtrOutput) AttachRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AttachRequired
	}).(pulumi.BoolPtrOutput)
}

// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
//
// This field is immutable.
//
// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
func (o CSIDriverSpecPatchPtrOutput) FsGroupPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupPolicy
	}).(pulumi.StringPtrOutput)
}

// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
//
// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
//
// The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
//
//	defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
//
// This field is immutable.
func (o CSIDriverSpecPatchPtrOutput) PodInfoOnMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PodInfoOnMount
	}).(pulumi.BoolPtrOutput)
}

// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
//
// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
func (o CSIDriverSpecPatchPtrOutput) RequiresRepublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresRepublish
	}).(pulumi.BoolPtrOutput)
}

// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
//
// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
//
// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
//
// Default is "false".
func (o CSIDriverSpecPatchPtrOutput) SeLinuxMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.SeLinuxMount
	}).(pulumi.BoolPtrOutput)
}

// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
//
// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
//
// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
//
// This field was immutable in Kubernetes <= 1.22 and now is mutable.
func (o CSIDriverSpecPatchPtrOutput) StorageCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.StorageCapacity
	}).(pulumi.BoolPtrOutput)
}

//	tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
//	  "<audience>": {
//	    "token": <token>,
//	    "expirationTimestamp": <expiration timestamp in RFC3339>,
//	  },
//	  ...
//	}
//
// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
func (o CSIDriverSpecPatchPtrOutput) TokenRequests() TokenRequestPatchArrayOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) []TokenRequestPatch {
		if v == nil {
			return nil
		}
		return v.TokenRequests
	}).(TokenRequestPatchArrayOutput)
}

// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
//
// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
//
// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
//
// This field is beta. This field is immutable.
func (o CSIDriverSpecPatchPtrOutput) VolumeLifecycleModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIDriverSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.VolumeLifecycleModes
	}).(pulumi.StringArrayOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodeType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. metadata.name must be the Kubernetes node name.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec CSINodeSpec `pulumi:"spec"`
}

// CSINodeTypeInput is an input type that accepts CSINodeTypeArgs and CSINodeTypeOutput values.
// You can construct a concrete instance of `CSINodeTypeInput` via:
//
//	CSINodeTypeArgs{...}
type CSINodeTypeInput interface {
	pulumi.Input

	ToCSINodeTypeOutput() CSINodeTypeOutput
	ToCSINodeTypeOutputWithContext(context.Context) CSINodeTypeOutput
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodeTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. metadata.name must be the Kubernetes node name.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec CSINodeSpecInput `pulumi:"spec"`
}

func (CSINodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeType)(nil)).Elem()
}

func (i CSINodeTypeArgs) ToCSINodeTypeOutput() CSINodeTypeOutput {
	return i.ToCSINodeTypeOutputWithContext(context.Background())
}

func (i CSINodeTypeArgs) ToCSINodeTypeOutputWithContext(ctx context.Context) CSINodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeTypeOutput)
}

// CSINodeTypeArrayInput is an input type that accepts CSINodeTypeArray and CSINodeTypeArrayOutput values.
// You can construct a concrete instance of `CSINodeTypeArrayInput` via:
//
//	CSINodeTypeArray{ CSINodeTypeArgs{...} }
type CSINodeTypeArrayInput interface {
	pulumi.Input

	ToCSINodeTypeArrayOutput() CSINodeTypeArrayOutput
	ToCSINodeTypeArrayOutputWithContext(context.Context) CSINodeTypeArrayOutput
}

type CSINodeTypeArray []CSINodeTypeInput

func (CSINodeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeType)(nil)).Elem()
}

func (i CSINodeTypeArray) ToCSINodeTypeArrayOutput() CSINodeTypeArrayOutput {
	return i.ToCSINodeTypeArrayOutputWithContext(context.Background())
}

func (i CSINodeTypeArray) ToCSINodeTypeArrayOutputWithContext(ctx context.Context) CSINodeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeTypeArrayOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodeTypeOutput struct{ *pulumi.OutputState }

func (CSINodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeType)(nil)).Elem()
}

func (o CSINodeTypeOutput) ToCSINodeTypeOutput() CSINodeTypeOutput {
	return o
}

func (o CSINodeTypeOutput) ToCSINodeTypeOutputWithContext(ctx context.Context) CSINodeTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSINodeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSINodeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. metadata.name must be the Kubernetes node name.
func (o CSINodeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSINodeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec is the specification of CSINode
func (o CSINodeTypeOutput) Spec() CSINodeSpecOutput {
	return o.ApplyT(func(v CSINodeType) CSINodeSpec { return v.Spec }).(CSINodeSpecOutput)
}

type CSINodeTypeArrayOutput struct{ *pulumi.OutputState }

func (CSINodeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeType)(nil)).Elem()
}

func (o CSINodeTypeArrayOutput) ToCSINodeTypeArrayOutput() CSINodeTypeArrayOutput {
	return o
}

func (o CSINodeTypeArrayOutput) ToCSINodeTypeArrayOutputWithContext(ctx context.Context) CSINodeTypeArrayOutput {
	return o
}

func (o CSINodeTypeArrayOutput) Index(i pulumi.IntInput) CSINodeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSINodeType {
		return vs[0].([]CSINodeType)[vs[1].(int)]
	}).(CSINodeTypeOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriver struct {
	// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
	Allocatable *VolumeNodeResources `pulumi:"allocatable"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name string `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID string `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []string `pulumi:"topologyKeys"`
}

// CSINodeDriverInput is an input type that accepts CSINodeDriverArgs and CSINodeDriverOutput values.
// You can construct a concrete instance of `CSINodeDriverInput` via:
//
//	CSINodeDriverArgs{...}
type CSINodeDriverInput interface {
	pulumi.Input

	ToCSINodeDriverOutput() CSINodeDriverOutput
	ToCSINodeDriverOutputWithContext(context.Context) CSINodeDriverOutput
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverArgs struct {
	// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
	Allocatable VolumeNodeResourcesPtrInput `pulumi:"allocatable"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name pulumi.StringInput `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID pulumi.StringInput `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
}

func (CSINodeDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriver)(nil)).Elem()
}

func (i CSINodeDriverArgs) ToCSINodeDriverOutput() CSINodeDriverOutput {
	return i.ToCSINodeDriverOutputWithContext(context.Background())
}

func (i CSINodeDriverArgs) ToCSINodeDriverOutputWithContext(ctx context.Context) CSINodeDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverOutput)
}

// CSINodeDriverArrayInput is an input type that accepts CSINodeDriverArray and CSINodeDriverArrayOutput values.
// You can construct a concrete instance of `CSINodeDriverArrayInput` via:
//
//	CSINodeDriverArray{ CSINodeDriverArgs{...} }
type CSINodeDriverArrayInput interface {
	pulumi.Input

	ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput
	ToCSINodeDriverArrayOutputWithContext(context.Context) CSINodeDriverArrayOutput
}

type CSINodeDriverArray []CSINodeDriverInput

func (CSINodeDriverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriver)(nil)).Elem()
}

func (i CSINodeDriverArray) ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput {
	return i.ToCSINodeDriverArrayOutputWithContext(context.Background())
}

func (i CSINodeDriverArray) ToCSINodeDriverArrayOutputWithContext(ctx context.Context) CSINodeDriverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverArrayOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverOutput struct{ *pulumi.OutputState }

func (CSINodeDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriver)(nil)).Elem()
}

func (o CSINodeDriverOutput) ToCSINodeDriverOutput() CSINodeDriverOutput {
	return o
}

func (o CSINodeDriverOutput) ToCSINodeDriverOutputWithContext(ctx context.Context) CSINodeDriverOutput {
	return o
}

// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
func (o CSINodeDriverOutput) Allocatable() VolumeNodeResourcesPtrOutput {
	return o.ApplyT(func(v CSINodeDriver) *VolumeNodeResources { return v.Allocatable }).(VolumeNodeResourcesPtrOutput)
}

// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
func (o CSINodeDriverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSINodeDriver) string { return v.Name }).(pulumi.StringOutput)
}

// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
func (o CSINodeDriverOutput) NodeID() pulumi.StringOutput {
	return o.ApplyT(func(v CSINodeDriver) string { return v.NodeID }).(pulumi.StringOutput)
}

// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
func (o CSINodeDriverOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSINodeDriver) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

type CSINodeDriverArrayOutput struct{ *pulumi.OutputState }

func (CSINodeDriverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriver)(nil)).Elem()
}

func (o CSINodeDriverArrayOutput) ToCSINodeDriverArrayOutput() CSINodeDriverArrayOutput {
	return o
}

func (o CSINodeDriverArrayOutput) ToCSINodeDriverArrayOutputWithContext(ctx context.Context) CSINodeDriverArrayOutput {
	return o
}

func (o CSINodeDriverArrayOutput) Index(i pulumi.IntInput) CSINodeDriverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSINodeDriver {
		return vs[0].([]CSINodeDriver)[vs[1].(int)]
	}).(CSINodeDriverOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverPatch struct {
	// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
	Allocatable *VolumeNodeResourcesPatch `pulumi:"allocatable"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name *string `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID *string `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []string `pulumi:"topologyKeys"`
}

// CSINodeDriverPatchInput is an input type that accepts CSINodeDriverPatchArgs and CSINodeDriverPatchOutput values.
// You can construct a concrete instance of `CSINodeDriverPatchInput` via:
//
//	CSINodeDriverPatchArgs{...}
type CSINodeDriverPatchInput interface {
	pulumi.Input

	ToCSINodeDriverPatchOutput() CSINodeDriverPatchOutput
	ToCSINodeDriverPatchOutputWithContext(context.Context) CSINodeDriverPatchOutput
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverPatchArgs struct {
	// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
	Allocatable VolumeNodeResourcesPatchPtrInput `pulumi:"allocatable"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID pulumi.StringPtrInput `pulumi:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
}

func (CSINodeDriverPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriverPatch)(nil)).Elem()
}

func (i CSINodeDriverPatchArgs) ToCSINodeDriverPatchOutput() CSINodeDriverPatchOutput {
	return i.ToCSINodeDriverPatchOutputWithContext(context.Background())
}

func (i CSINodeDriverPatchArgs) ToCSINodeDriverPatchOutputWithContext(ctx context.Context) CSINodeDriverPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverPatchOutput)
}

// CSINodeDriverPatchArrayInput is an input type that accepts CSINodeDriverPatchArray and CSINodeDriverPatchArrayOutput values.
// You can construct a concrete instance of `CSINodeDriverPatchArrayInput` via:
//
//	CSINodeDriverPatchArray{ CSINodeDriverPatchArgs{...} }
type CSINodeDriverPatchArrayInput interface {
	pulumi.Input

	ToCSINodeDriverPatchArrayOutput() CSINodeDriverPatchArrayOutput
	ToCSINodeDriverPatchArrayOutputWithContext(context.Context) CSINodeDriverPatchArrayOutput
}

type CSINodeDriverPatchArray []CSINodeDriverPatchInput

func (CSINodeDriverPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriverPatch)(nil)).Elem()
}

func (i CSINodeDriverPatchArray) ToCSINodeDriverPatchArrayOutput() CSINodeDriverPatchArrayOutput {
	return i.ToCSINodeDriverPatchArrayOutputWithContext(context.Background())
}

func (i CSINodeDriverPatchArray) ToCSINodeDriverPatchArrayOutputWithContext(ctx context.Context) CSINodeDriverPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeDriverPatchArrayOutput)
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type CSINodeDriverPatchOutput struct{ *pulumi.OutputState }

func (CSINodeDriverPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeDriverPatch)(nil)).Elem()
}

func (o CSINodeDriverPatchOutput) ToCSINodeDriverPatchOutput() CSINodeDriverPatchOutput {
	return o
}

func (o CSINodeDriverPatchOutput) ToCSINodeDriverPatchOutputWithContext(ctx context.Context) CSINodeDriverPatchOutput {
	return o
}

// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
func (o CSINodeDriverPatchOutput) Allocatable() VolumeNodeResourcesPatchPtrOutput {
	return o.ApplyT(func(v CSINodeDriverPatch) *VolumeNodeResourcesPatch { return v.Allocatable }).(VolumeNodeResourcesPatchPtrOutput)
}

// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
func (o CSINodeDriverPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeDriverPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
func (o CSINodeDriverPatchOutput) NodeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeDriverPatch) *string { return v.NodeID }).(pulumi.StringPtrOutput)
}

// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
func (o CSINodeDriverPatchOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSINodeDriverPatch) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

type CSINodeDriverPatchArrayOutput struct{ *pulumi.OutputState }

func (CSINodeDriverPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSINodeDriverPatch)(nil)).Elem()
}

func (o CSINodeDriverPatchArrayOutput) ToCSINodeDriverPatchArrayOutput() CSINodeDriverPatchArrayOutput {
	return o
}

func (o CSINodeDriverPatchArrayOutput) ToCSINodeDriverPatchArrayOutputWithContext(ctx context.Context) CSINodeDriverPatchArrayOutput {
	return o
}

func (o CSINodeDriverPatchArrayOutput) Index(i pulumi.IntInput) CSINodeDriverPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSINodeDriverPatch {
		return vs[0].([]CSINodeDriverPatch)[vs[1].(int)]
	}).(CSINodeDriverPatchOutput)
}

// CSINodeList is a collection of CSINode objects.
type CSINodeListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CSINode
	Items []CSINodeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CSINodeListTypeInput is an input type that accepts CSINodeListTypeArgs and CSINodeListTypeOutput values.
// You can construct a concrete instance of `CSINodeListTypeInput` via:
//
//	CSINodeListTypeArgs{...}
type CSINodeListTypeInput interface {
	pulumi.Input

	ToCSINodeListTypeOutput() CSINodeListTypeOutput
	ToCSINodeListTypeOutputWithContext(context.Context) CSINodeListTypeOutput
}

// CSINodeList is a collection of CSINode objects.
type CSINodeListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CSINode
	Items CSINodeTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSINodeListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeListType)(nil)).Elem()
}

func (i CSINodeListTypeArgs) ToCSINodeListTypeOutput() CSINodeListTypeOutput {
	return i.ToCSINodeListTypeOutputWithContext(context.Background())
}

func (i CSINodeListTypeArgs) ToCSINodeListTypeOutputWithContext(ctx context.Context) CSINodeListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeListTypeOutput)
}

// CSINodeList is a collection of CSINode objects.
type CSINodeListTypeOutput struct{ *pulumi.OutputState }

func (CSINodeListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeListType)(nil)).Elem()
}

func (o CSINodeListTypeOutput) ToCSINodeListTypeOutput() CSINodeListTypeOutput {
	return o
}

func (o CSINodeListTypeOutput) ToCSINodeListTypeOutputWithContext(ctx context.Context) CSINodeListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSINodeListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CSINode
func (o CSINodeListTypeOutput) Items() CSINodeTypeArrayOutput {
	return o.ApplyT(func(v CSINodeListType) []CSINodeType { return v.Items }).(CSINodeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSINodeListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodeListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSINodeListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CSINodeListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. metadata.name must be the Kubernetes node name.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec *CSINodeSpecPatch `pulumi:"spec"`
}

// CSINodePatchTypeInput is an input type that accepts CSINodePatchTypeArgs and CSINodePatchTypeOutput values.
// You can construct a concrete instance of `CSINodePatchTypeInput` via:
//
//	CSINodePatchTypeArgs{...}
type CSINodePatchTypeInput interface {
	pulumi.Input

	ToCSINodePatchTypeOutput() CSINodePatchTypeOutput
	ToCSINodePatchTypeOutputWithContext(context.Context) CSINodePatchTypeOutput
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. metadata.name must be the Kubernetes node name.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec is the specification of CSINode
	Spec CSINodeSpecPatchPtrInput `pulumi:"spec"`
}

func (CSINodePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodePatchType)(nil)).Elem()
}

func (i CSINodePatchTypeArgs) ToCSINodePatchTypeOutput() CSINodePatchTypeOutput {
	return i.ToCSINodePatchTypeOutputWithContext(context.Background())
}

func (i CSINodePatchTypeArgs) ToCSINodePatchTypeOutputWithContext(ctx context.Context) CSINodePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodePatchTypeOutput)
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type CSINodePatchTypeOutput struct{ *pulumi.OutputState }

func (CSINodePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodePatchType)(nil)).Elem()
}

func (o CSINodePatchTypeOutput) ToCSINodePatchTypeOutput() CSINodePatchTypeOutput {
	return o
}

func (o CSINodePatchTypeOutput) ToCSINodePatchTypeOutputWithContext(ctx context.Context) CSINodePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSINodePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSINodePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSINodePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. metadata.name must be the Kubernetes node name.
func (o CSINodePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v CSINodePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec is the specification of CSINode
func (o CSINodePatchTypeOutput) Spec() CSINodeSpecPatchPtrOutput {
	return o.ApplyT(func(v CSINodePatchType) *CSINodeSpecPatch { return v.Spec }).(CSINodeSpecPatchPtrOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpec struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers []CSINodeDriver `pulumi:"drivers"`
}

// CSINodeSpecInput is an input type that accepts CSINodeSpecArgs and CSINodeSpecOutput values.
// You can construct a concrete instance of `CSINodeSpecInput` via:
//
//	CSINodeSpecArgs{...}
type CSINodeSpecInput interface {
	pulumi.Input

	ToCSINodeSpecOutput() CSINodeSpecOutput
	ToCSINodeSpecOutputWithContext(context.Context) CSINodeSpecOutput
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecArgs struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers CSINodeDriverArrayInput `pulumi:"drivers"`
}

func (CSINodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpec)(nil)).Elem()
}

func (i CSINodeSpecArgs) ToCSINodeSpecOutput() CSINodeSpecOutput {
	return i.ToCSINodeSpecOutputWithContext(context.Background())
}

func (i CSINodeSpecArgs) ToCSINodeSpecOutputWithContext(ctx context.Context) CSINodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecOutput struct{ *pulumi.OutputState }

func (CSINodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpec)(nil)).Elem()
}

func (o CSINodeSpecOutput) ToCSINodeSpecOutput() CSINodeSpecOutput {
	return o
}

func (o CSINodeSpecOutput) ToCSINodeSpecOutputWithContext(ctx context.Context) CSINodeSpecOutput {
	return o
}

// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (o CSINodeSpecOutput) Drivers() CSINodeDriverArrayOutput {
	return o.ApplyT(func(v CSINodeSpec) []CSINodeDriver { return v.Drivers }).(CSINodeDriverArrayOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecPatch struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers []CSINodeDriverPatch `pulumi:"drivers"`
}

// CSINodeSpecPatchInput is an input type that accepts CSINodeSpecPatchArgs and CSINodeSpecPatchOutput values.
// You can construct a concrete instance of `CSINodeSpecPatchInput` via:
//
//	CSINodeSpecPatchArgs{...}
type CSINodeSpecPatchInput interface {
	pulumi.Input

	ToCSINodeSpecPatchOutput() CSINodeSpecPatchOutput
	ToCSINodeSpecPatchOutputWithContext(context.Context) CSINodeSpecPatchOutput
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecPatchArgs struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers CSINodeDriverPatchArrayInput `pulumi:"drivers"`
}

func (CSINodeSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpecPatch)(nil)).Elem()
}

func (i CSINodeSpecPatchArgs) ToCSINodeSpecPatchOutput() CSINodeSpecPatchOutput {
	return i.ToCSINodeSpecPatchOutputWithContext(context.Background())
}

func (i CSINodeSpecPatchArgs) ToCSINodeSpecPatchOutputWithContext(ctx context.Context) CSINodeSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecPatchOutput)
}

func (i CSINodeSpecPatchArgs) ToCSINodeSpecPatchPtrOutput() CSINodeSpecPatchPtrOutput {
	return i.ToCSINodeSpecPatchPtrOutputWithContext(context.Background())
}

func (i CSINodeSpecPatchArgs) ToCSINodeSpecPatchPtrOutputWithContext(ctx context.Context) CSINodeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecPatchOutput).ToCSINodeSpecPatchPtrOutputWithContext(ctx)
}

// CSINodeSpecPatchPtrInput is an input type that accepts CSINodeSpecPatchArgs, CSINodeSpecPatchPtr and CSINodeSpecPatchPtrOutput values.
// You can construct a concrete instance of `CSINodeSpecPatchPtrInput` via:
//
//	        CSINodeSpecPatchArgs{...}
//
//	or:
//
//	        nil
type CSINodeSpecPatchPtrInput interface {
	pulumi.Input

	ToCSINodeSpecPatchPtrOutput() CSINodeSpecPatchPtrOutput
	ToCSINodeSpecPatchPtrOutputWithContext(context.Context) CSINodeSpecPatchPtrOutput
}

type csinodeSpecPatchPtrType CSINodeSpecPatchArgs

func CSINodeSpecPatchPtr(v *CSINodeSpecPatchArgs) CSINodeSpecPatchPtrInput {
	return (*csinodeSpecPatchPtrType)(v)
}

func (*csinodeSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSINodeSpecPatch)(nil)).Elem()
}

func (i *csinodeSpecPatchPtrType) ToCSINodeSpecPatchPtrOutput() CSINodeSpecPatchPtrOutput {
	return i.ToCSINodeSpecPatchPtrOutputWithContext(context.Background())
}

func (i *csinodeSpecPatchPtrType) ToCSINodeSpecPatchPtrOutputWithContext(ctx context.Context) CSINodeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSINodeSpecPatchPtrOutput)
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type CSINodeSpecPatchOutput struct{ *pulumi.OutputState }

func (CSINodeSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSINodeSpecPatch)(nil)).Elem()
}

func (o CSINodeSpecPatchOutput) ToCSINodeSpecPatchOutput() CSINodeSpecPatchOutput {
	return o
}

func (o CSINodeSpecPatchOutput) ToCSINodeSpecPatchOutputWithContext(ctx context.Context) CSINodeSpecPatchOutput {
	return o
}

func (o CSINodeSpecPatchOutput) ToCSINodeSpecPatchPtrOutput() CSINodeSpecPatchPtrOutput {
	return o.ToCSINodeSpecPatchPtrOutputWithContext(context.Background())
}

func (o CSINodeSpecPatchOutput) ToCSINodeSpecPatchPtrOutputWithContext(ctx context.Context) CSINodeSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CSINodeSpecPatch) *CSINodeSpecPatch {
		return &v
	}).(CSINodeSpecPatchPtrOutput)
}

// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (o CSINodeSpecPatchOutput) Drivers() CSINodeDriverPatchArrayOutput {
	return o.ApplyT(func(v CSINodeSpecPatch) []CSINodeDriverPatch { return v.Drivers }).(CSINodeDriverPatchArrayOutput)
}

type CSINodeSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (CSINodeSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSINodeSpecPatch)(nil)).Elem()
}

func (o CSINodeSpecPatchPtrOutput) ToCSINodeSpecPatchPtrOutput() CSINodeSpecPatchPtrOutput {
	return o
}

func (o CSINodeSpecPatchPtrOutput) ToCSINodeSpecPatchPtrOutputWithContext(ctx context.Context) CSINodeSpecPatchPtrOutput {
	return o
}

func (o CSINodeSpecPatchPtrOutput) Elem() CSINodeSpecPatchOutput {
	return o.ApplyT(func(v *CSINodeSpecPatch) CSINodeSpecPatch {
		if v != nil {
			return *v
		}
		var ret CSINodeSpecPatch
		return ret
	}).(CSINodeSpecPatchOutput)
}

// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (o CSINodeSpecPatchPtrOutput) Drivers() CSINodeDriverPatchArrayOutput {
	return o.ApplyT(func(v *CSINodeSpecPatch) []CSINodeDriverPatch {
		if v == nil {
			return nil
		}
		return v.Drivers
	}).(CSINodeDriverPatchArrayOutput)
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
	Capacity *string `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize *string `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology *metav1.LabelSelector `pulumi:"nodeTopology"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName string `pulumi:"storageClassName"`
}

// CSIStorageCapacityTypeInput is an input type that accepts CSIStorageCapacityTypeArgs and CSIStorageCapacityTypeOutput values.
// You can construct a concrete instance of `CSIStorageCapacityTypeInput` via:
//
//	CSIStorageCapacityTypeArgs{...}
type CSIStorageCapacityTypeInput interface {
	pulumi.Input

	ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput
	ToCSIStorageCapacityTypeOutputWithContext(context.Context) CSIStorageCapacityTypeOutput
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
	Capacity pulumi.StringPtrInput `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize pulumi.StringPtrInput `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology metav1.LabelSelectorPtrInput `pulumi:"nodeTopology"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName pulumi.StringInput `pulumi:"storageClassName"`
}

func (CSIStorageCapacityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityType)(nil)).Elem()
}

func (i CSIStorageCapacityTypeArgs) ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput {
	return i.ToCSIStorageCapacityTypeOutputWithContext(context.Background())
}

func (i CSIStorageCapacityTypeArgs) ToCSIStorageCapacityTypeOutputWithContext(ctx context.Context) CSIStorageCapacityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityTypeOutput)
}

// CSIStorageCapacityTypeArrayInput is an input type that accepts CSIStorageCapacityTypeArray and CSIStorageCapacityTypeArrayOutput values.
// You can construct a concrete instance of `CSIStorageCapacityTypeArrayInput` via:
//
//	CSIStorageCapacityTypeArray{ CSIStorageCapacityTypeArgs{...} }
type CSIStorageCapacityTypeArrayInput interface {
	pulumi.Input

	ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput
	ToCSIStorageCapacityTypeArrayOutputWithContext(context.Context) CSIStorageCapacityTypeArrayOutput
}

type CSIStorageCapacityTypeArray []CSIStorageCapacityTypeInput

func (CSIStorageCapacityTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIStorageCapacityType)(nil)).Elem()
}

func (i CSIStorageCapacityTypeArray) ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput {
	return i.ToCSIStorageCapacityTypeArrayOutputWithContext(context.Background())
}

func (i CSIStorageCapacityTypeArray) ToCSIStorageCapacityTypeArrayOutputWithContext(ctx context.Context) CSIStorageCapacityTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityTypeArrayOutput)
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityTypeOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityType)(nil)).Elem()
}

func (o CSIStorageCapacityTypeOutput) ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput {
	return o
}

func (o CSIStorageCapacityTypeOutput) ToCSIStorageCapacityTypeOutputWithContext(ctx context.Context) CSIStorageCapacityTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIStorageCapacityTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
func (o CSIStorageCapacityTypeOutput) Capacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.Capacity }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIStorageCapacityTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
func (o CSIStorageCapacityTypeOutput) MaximumVolumeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.MaximumVolumeSize }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
//
// Objects are namespaced.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIStorageCapacityTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
func (o CSIStorageCapacityTypeOutput) NodeTopology() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *metav1.LabelSelector { return v.NodeTopology }).(metav1.LabelSelectorPtrOutput)
}

// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
func (o CSIStorageCapacityTypeOutput) StorageClassName() pulumi.StringOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) string { return v.StorageClassName }).(pulumi.StringOutput)
}

type CSIStorageCapacityTypeArrayOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIStorageCapacityType)(nil)).Elem()
}

func (o CSIStorageCapacityTypeArrayOutput) ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput {
	return o
}

func (o CSIStorageCapacityTypeArrayOutput) ToCSIStorageCapacityTypeArrayOutputWithContext(ctx context.Context) CSIStorageCapacityTypeArrayOutput {
	return o
}

func (o CSIStorageCapacityTypeArrayOutput) Index(i pulumi.IntInput) CSIStorageCapacityTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIStorageCapacityType {
		return vs[0].([]CSIStorageCapacityType)[vs[1].(int)]
	}).(CSIStorageCapacityTypeOutput)
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of CSIStorageCapacity objects.
	Items []CSIStorageCapacityType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CSIStorageCapacityListTypeInput is an input type that accepts CSIStorageCapacityListTypeArgs and CSIStorageCapacityListTypeOutput values.
// You can construct a concrete instance of `CSIStorageCapacityListTypeInput` via:
//
//	CSIStorageCapacityListTypeArgs{...}
type CSIStorageCapacityListTypeInput interface {
	pulumi.Input

	ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput
	ToCSIStorageCapacityListTypeOutputWithContext(context.Context) CSIStorageCapacityListTypeOutput
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of CSIStorageCapacity objects.
	Items CSIStorageCapacityTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSIStorageCapacityListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityListType)(nil)).Elem()
}

func (i CSIStorageCapacityListTypeArgs) ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput {
	return i.ToCSIStorageCapacityListTypeOutputWithContext(context.Background())
}

func (i CSIStorageCapacityListTypeArgs) ToCSIStorageCapacityListTypeOutputWithContext(ctx context.Context) CSIStorageCapacityListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityListTypeOutput)
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListTypeOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityListType)(nil)).Elem()
}

func (o CSIStorageCapacityListTypeOutput) ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput {
	return o
}

func (o CSIStorageCapacityListTypeOutput) ToCSIStorageCapacityListTypeOutputWithContext(ctx context.Context) CSIStorageCapacityListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIStorageCapacityListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of CSIStorageCapacity objects.
func (o CSIStorageCapacityListTypeOutput) Items() CSIStorageCapacityTypeArrayOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) []CSIStorageCapacityType { return v.Items }).(CSIStorageCapacityTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIStorageCapacityListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIStorageCapacityListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
	Capacity *string `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize *string `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology *metav1.LabelSelectorPatch `pulumi:"nodeTopology"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName *string `pulumi:"storageClassName"`
}

// CSIStorageCapacityPatchTypeInput is an input type that accepts CSIStorageCapacityPatchTypeArgs and CSIStorageCapacityPatchTypeOutput values.
// You can construct a concrete instance of `CSIStorageCapacityPatchTypeInput` via:
//
//	CSIStorageCapacityPatchTypeArgs{...}
type CSIStorageCapacityPatchTypeInput interface {
	pulumi.Input

	ToCSIStorageCapacityPatchTypeOutput() CSIStorageCapacityPatchTypeOutput
	ToCSIStorageCapacityPatchTypeOutputWithContext(context.Context) CSIStorageCapacityPatchTypeOutput
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
	Capacity pulumi.StringPtrInput `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize pulumi.StringPtrInput `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology metav1.LabelSelectorPatchPtrInput `pulumi:"nodeTopology"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
}

func (CSIStorageCapacityPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityPatchType)(nil)).Elem()
}

func (i CSIStorageCapacityPatchTypeArgs) ToCSIStorageCapacityPatchTypeOutput() CSIStorageCapacityPatchTypeOutput {
	return i.ToCSIStorageCapacityPatchTypeOutputWithContext(context.Background())
}

func (i CSIStorageCapacityPatchTypeArgs) ToCSIStorageCapacityPatchTypeOutputWithContext(ctx context.Context) CSIStorageCapacityPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityPatchTypeOutput)
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type CSIStorageCapacityPatchTypeOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityPatchType)(nil)).Elem()
}

func (o CSIStorageCapacityPatchTypeOutput) ToCSIStorageCapacityPatchTypeOutput() CSIStorageCapacityPatchTypeOutput {
	return o
}

func (o CSIStorageCapacityPatchTypeOutput) ToCSIStorageCapacityPatchTypeOutputWithContext(ctx context.Context) CSIStorageCapacityPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIStorageCapacityPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
func (o CSIStorageCapacityPatchTypeOutput) Capacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *string { return v.Capacity }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIStorageCapacityPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
func (o CSIStorageCapacityPatchTypeOutput) MaximumVolumeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *string { return v.MaximumVolumeSize }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
//
// Objects are namespaced.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIStorageCapacityPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
func (o CSIStorageCapacityPatchTypeOutput) NodeTopology() metav1.LabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *metav1.LabelSelectorPatch { return v.NodeTopology }).(metav1.LabelSelectorPatchPtrOutput)
}

// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
func (o CSIStorageCapacityPatchTypeOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityPatchType) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassType struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies []corev1.TopologySelectorTerm `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions []string `pulumi:"mountOptions"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters map[string]string `pulumi:"parameters"`
	// provisioner indicates the type of the provisioner.
	Provisioner string `pulumi:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode *string `pulumi:"volumeBindingMode"`
}

// StorageClassTypeInput is an input type that accepts StorageClassTypeArgs and StorageClassTypeOutput values.
// You can construct a concrete instance of `StorageClassTypeInput` via:
//
//	StorageClassTypeArgs{...}
type StorageClassTypeInput interface {
	pulumi.Input

	ToStorageClassTypeOutput() StorageClassTypeOutput
	ToStorageClassTypeOutputWithContext(context.Context) StorageClassTypeOutput
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassTypeArgs struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies corev1.TopologySelectorTermArrayInput `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringInput `pulumi:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode pulumi.StringPtrInput `pulumi:"volumeBindingMode"`
}

func (StorageClassTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassType)(nil)).Elem()
}

func (i StorageClassTypeArgs) ToStorageClassTypeOutput() StorageClassTypeOutput {
	return i.ToStorageClassTypeOutputWithContext(context.Background())
}

func (i StorageClassTypeArgs) ToStorageClassTypeOutputWithContext(ctx context.Context) StorageClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassTypeOutput)
}

// StorageClassTypeArrayInput is an input type that accepts StorageClassTypeArray and StorageClassTypeArrayOutput values.
// You can construct a concrete instance of `StorageClassTypeArrayInput` via:
//
//	StorageClassTypeArray{ StorageClassTypeArgs{...} }
type StorageClassTypeArrayInput interface {
	pulumi.Input

	ToStorageClassTypeArrayOutput() StorageClassTypeArrayOutput
	ToStorageClassTypeArrayOutputWithContext(context.Context) StorageClassTypeArrayOutput
}

type StorageClassTypeArray []StorageClassTypeInput

func (StorageClassTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageClassType)(nil)).Elem()
}

func (i StorageClassTypeArray) ToStorageClassTypeArrayOutput() StorageClassTypeArrayOutput {
	return i.ToStorageClassTypeArrayOutputWithContext(context.Background())
}

func (i StorageClassTypeArray) ToStorageClassTypeArrayOutputWithContext(ctx context.Context) StorageClassTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassTypeArrayOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassTypeOutput struct{ *pulumi.OutputState }

func (StorageClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassType)(nil)).Elem()
}

func (o StorageClassTypeOutput) ToStorageClassTypeOutput() StorageClassTypeOutput {
	return o
}

func (o StorageClassTypeOutput) ToStorageClassTypeOutputWithContext(ctx context.Context) StorageClassTypeOutput {
	return o
}

// allowVolumeExpansion shows whether the storage class allow volume expand.
func (o StorageClassTypeOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageClassType) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassTypeOutput) AllowedTopologies() corev1.TopologySelectorTermArrayOutput {
	return o.ApplyT(func(v StorageClassType) []corev1.TopologySelectorTerm { return v.AllowedTopologies }).(corev1.TopologySelectorTermArrayOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageClassTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageClassTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageClassTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v StorageClassType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
func (o StorageClassTypeOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageClassType) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// parameters holds the parameters for the provisioner that should create volumes of this storage class.
func (o StorageClassTypeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v StorageClassType) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// provisioner indicates the type of the provisioner.
func (o StorageClassTypeOutput) Provisioner() pulumi.StringOutput {
	return o.ApplyT(func(v StorageClassType) string { return v.Provisioner }).(pulumi.StringOutput)
}

// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
func (o StorageClassTypeOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassType) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassTypeOutput) VolumeBindingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassType) *string { return v.VolumeBindingMode }).(pulumi.StringPtrOutput)
}

type StorageClassTypeArrayOutput struct{ *pulumi.OutputState }

func (StorageClassTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageClassType)(nil)).Elem()
}

func (o StorageClassTypeArrayOutput) ToStorageClassTypeArrayOutput() StorageClassTypeArrayOutput {
	return o
}

func (o StorageClassTypeArrayOutput) ToStorageClassTypeArrayOutputWithContext(ctx context.Context) StorageClassTypeArrayOutput {
	return o
}

func (o StorageClassTypeArrayOutput) Index(i pulumi.IntInput) StorageClassTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageClassType {
		return vs[0].([]StorageClassType)[vs[1].(int)]
	}).(StorageClassTypeOutput)
}

// StorageClassList is a collection of storage classes.
type StorageClassListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of StorageClasses
	Items []StorageClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// StorageClassListTypeInput is an input type that accepts StorageClassListTypeArgs and StorageClassListTypeOutput values.
// You can construct a concrete instance of `StorageClassListTypeInput` via:
//
//	StorageClassListTypeArgs{...}
type StorageClassListTypeInput interface {
	pulumi.Input

	ToStorageClassListTypeOutput() StorageClassListTypeOutput
	ToStorageClassListTypeOutputWithContext(context.Context) StorageClassListTypeOutput
}

// StorageClassList is a collection of storage classes.
type StorageClassListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of StorageClasses
	Items StorageClassTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (StorageClassListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassListType)(nil)).Elem()
}

func (i StorageClassListTypeArgs) ToStorageClassListTypeOutput() StorageClassListTypeOutput {
	return i.ToStorageClassListTypeOutputWithContext(context.Background())
}

func (i StorageClassListTypeArgs) ToStorageClassListTypeOutputWithContext(ctx context.Context) StorageClassListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassListTypeOutput)
}

// StorageClassList is a collection of storage classes.
type StorageClassListTypeOutput struct{ *pulumi.OutputState }

func (StorageClassListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassListType)(nil)).Elem()
}

func (o StorageClassListTypeOutput) ToStorageClassListTypeOutput() StorageClassListTypeOutput {
	return o
}

func (o StorageClassListTypeOutput) ToStorageClassListTypeOutputWithContext(ctx context.Context) StorageClassListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageClassListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of StorageClasses
func (o StorageClassListTypeOutput) Items() StorageClassTypeArrayOutput {
	return o.ApplyT(func(v StorageClassListType) []StorageClassType { return v.Items }).(StorageClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageClassListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageClassListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v StorageClassListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassPatchType struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies []corev1.TopologySelectorTermPatch `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions []string `pulumi:"mountOptions"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters map[string]string `pulumi:"parameters"`
	// provisioner indicates the type of the provisioner.
	Provisioner *string `pulumi:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode *string `pulumi:"volumeBindingMode"`
}

// StorageClassPatchTypeInput is an input type that accepts StorageClassPatchTypeArgs and StorageClassPatchTypeOutput values.
// You can construct a concrete instance of `StorageClassPatchTypeInput` via:
//
//	StorageClassPatchTypeArgs{...}
type StorageClassPatchTypeInput interface {
	pulumi.Input

	ToStorageClassPatchTypeOutput() StorageClassPatchTypeOutput
	ToStorageClassPatchTypeOutputWithContext(context.Context) StorageClassPatchTypeOutput
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassPatchTypeArgs struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies corev1.TopologySelectorTermPatchArrayInput `pulumi:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// provisioner indicates the type of the provisioner.
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode pulumi.StringPtrInput `pulumi:"volumeBindingMode"`
}

func (StorageClassPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassPatchType)(nil)).Elem()
}

func (i StorageClassPatchTypeArgs) ToStorageClassPatchTypeOutput() StorageClassPatchTypeOutput {
	return i.ToStorageClassPatchTypeOutputWithContext(context.Background())
}

func (i StorageClassPatchTypeArgs) ToStorageClassPatchTypeOutputWithContext(ctx context.Context) StorageClassPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageClassPatchTypeOutput)
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClassPatchTypeOutput struct{ *pulumi.OutputState }

func (StorageClassPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageClassPatchType)(nil)).Elem()
}

func (o StorageClassPatchTypeOutput) ToStorageClassPatchTypeOutput() StorageClassPatchTypeOutput {
	return o
}

func (o StorageClassPatchTypeOutput) ToStorageClassPatchTypeOutputWithContext(ctx context.Context) StorageClassPatchTypeOutput {
	return o
}

// allowVolumeExpansion shows whether the storage class allow volume expand.
func (o StorageClassPatchTypeOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassPatchTypeOutput) AllowedTopologies() corev1.TopologySelectorTermPatchArrayOutput {
	return o.ApplyT(func(v StorageClassPatchType) []corev1.TopologySelectorTermPatch { return v.AllowedTopologies }).(corev1.TopologySelectorTermPatchArrayOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StorageClassPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StorageClassPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StorageClassPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
func (o StorageClassPatchTypeOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageClassPatchType) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// parameters holds the parameters for the provisioner that should create volumes of this storage class.
func (o StorageClassPatchTypeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v StorageClassPatchType) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// provisioner indicates the type of the provisioner.
func (o StorageClassPatchTypeOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
func (o StorageClassPatchTypeOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
func (o StorageClassPatchTypeOutput) VolumeBindingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageClassPatchType) *string { return v.VolumeBindingMode }).(pulumi.StringPtrOutput)
}

// TokenRequest contains parameters of a service account token.
type TokenRequest struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience string `pulumi:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

// TokenRequestInput is an input type that accepts TokenRequestArgs and TokenRequestOutput values.
// You can construct a concrete instance of `TokenRequestInput` via:
//
//	TokenRequestArgs{...}
type TokenRequestInput interface {
	pulumi.Input

	ToTokenRequestOutput() TokenRequestOutput
	ToTokenRequestOutputWithContext(context.Context) TokenRequestOutput
}

// TokenRequest contains parameters of a service account token.
type TokenRequestArgs struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience pulumi.StringInput `pulumi:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequest)(nil)).Elem()
}

func (i TokenRequestArgs) ToTokenRequestOutput() TokenRequestOutput {
	return i.ToTokenRequestOutputWithContext(context.Background())
}

func (i TokenRequestArgs) ToTokenRequestOutputWithContext(ctx context.Context) TokenRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestOutput)
}

// TokenRequestArrayInput is an input type that accepts TokenRequestArray and TokenRequestArrayOutput values.
// You can construct a concrete instance of `TokenRequestArrayInput` via:
//
//	TokenRequestArray{ TokenRequestArgs{...} }
type TokenRequestArrayInput interface {
	pulumi.Input

	ToTokenRequestArrayOutput() TokenRequestArrayOutput
	ToTokenRequestArrayOutputWithContext(context.Context) TokenRequestArrayOutput
}

type TokenRequestArray []TokenRequestInput

func (TokenRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenRequest)(nil)).Elem()
}

func (i TokenRequestArray) ToTokenRequestArrayOutput() TokenRequestArrayOutput {
	return i.ToTokenRequestArrayOutputWithContext(context.Background())
}

func (i TokenRequestArray) ToTokenRequestArrayOutputWithContext(ctx context.Context) TokenRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestArrayOutput)
}

// TokenRequest contains parameters of a service account token.
type TokenRequestOutput struct{ *pulumi.OutputState }

func (TokenRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequest)(nil)).Elem()
}

func (o TokenRequestOutput) ToTokenRequestOutput() TokenRequestOutput {
	return o
}

func (o TokenRequestOutput) ToTokenRequestOutputWithContext(ctx context.Context) TokenRequestOutput {
	return o
}

// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
func (o TokenRequestOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v TokenRequest) string { return v.Audience }).(pulumi.StringOutput)
}

// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
func (o TokenRequestOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TokenRequest) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

type TokenRequestArrayOutput struct{ *pulumi.OutputState }

func (TokenRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenRequest)(nil)).Elem()
}

func (o TokenRequestArrayOutput) ToTokenRequestArrayOutput() TokenRequestArrayOutput {
	return o
}

func (o TokenRequestArrayOutput) ToTokenRequestArrayOutputWithContext(ctx context.Context) TokenRequestArrayOutput {
	return o
}

func (o TokenRequestArrayOutput) Index(i pulumi.IntInput) TokenRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenRequest {
		return vs[0].([]TokenRequest)[vs[1].(int)]
	}).(TokenRequestOutput)
}

// TokenRequest contains parameters of a service account token.
type TokenRequestPatch struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
}

// TokenRequestPatchInput is an input type that accepts TokenRequestPatchArgs and TokenRequestPatchOutput values.
// You can construct a concrete instance of `TokenRequestPatchInput` via:
//
//	TokenRequestPatchArgs{...}
type TokenRequestPatchInput interface {
	pulumi.Input

	ToTokenRequestPatchOutput() TokenRequestPatchOutput
	ToTokenRequestPatchOutputWithContext(context.Context) TokenRequestPatchOutput
}

// TokenRequest contains parameters of a service account token.
type TokenRequestPatchArgs struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
}

func (TokenRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestPatch)(nil)).Elem()
}

func (i TokenRequestPatchArgs) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return i.ToTokenRequestPatchOutputWithContext(context.Background())
}

func (i TokenRequestPatchArgs) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchOutput)
}

// TokenRequestPatchArrayInput is an input type that accepts TokenRequestPatchArray and TokenRequestPatchArrayOutput values.
// You can construct a concrete instance of `TokenRequestPatchArrayInput` via:
//
//	TokenRequestPatchArray{ TokenRequestPatchArgs{...} }
type TokenRequestPatchArrayInput interface {
	pulumi.Input

	ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput
	ToTokenRequestPatchArrayOutputWithContext(context.Context) TokenRequestPatchArrayOutput
}

type TokenRequestPatchArray []TokenRequestPatchInput

func (TokenRequestPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenRequestPatch)(nil)).Elem()
}

func (i TokenRequestPatchArray) ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput {
	return i.ToTokenRequestPatchArrayOutputWithContext(context.Background())
}

func (i TokenRequestPatchArray) ToTokenRequestPatchArrayOutputWithContext(ctx context.Context) TokenRequestPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenRequestPatchArrayOutput)
}

// TokenRequest contains parameters of a service account token.
type TokenRequestPatchOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutput() TokenRequestPatchOutput {
	return o
}

func (o TokenRequestPatchOutput) ToTokenRequestPatchOutputWithContext(ctx context.Context) TokenRequestPatchOutput {
	return o
}

// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
func (o TokenRequestPatchOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
func (o TokenRequestPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TokenRequestPatch) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

type TokenRequestPatchArrayOutput struct{ *pulumi.OutputState }

func (TokenRequestPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TokenRequestPatch)(nil)).Elem()
}

func (o TokenRequestPatchArrayOutput) ToTokenRequestPatchArrayOutput() TokenRequestPatchArrayOutput {
	return o
}

func (o TokenRequestPatchArrayOutput) ToTokenRequestPatchArrayOutputWithContext(ctx context.Context) TokenRequestPatchArrayOutput {
	return o
}

func (o TokenRequestPatchArrayOutput) Index(i pulumi.IntInput) TokenRequestPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TokenRequestPatch {
		return vs[0].([]TokenRequestPatch)[vs[1].(int)]
	}).(TokenRequestPatchOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpec `pulumi:"spec"`
	// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatus `pulumi:"status"`
}

// VolumeAttachmentTypeInput is an input type that accepts VolumeAttachmentTypeArgs and VolumeAttachmentTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeInput` via:
//
//	VolumeAttachmentTypeArgs{...}
type VolumeAttachmentTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput
	ToVolumeAttachmentTypeOutputWithContext(context.Context) VolumeAttachmentTypeOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecInput `pulumi:"spec"`
	// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPtrInput `pulumi:"status"`
}

func (VolumeAttachmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return i.ToVolumeAttachmentTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentTypeArrayInput is an input type that accepts VolumeAttachmentTypeArray and VolumeAttachmentTypeArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeArrayInput` via:
//
//	VolumeAttachmentTypeArray{ VolumeAttachmentTypeArgs{...} }
type VolumeAttachmentTypeArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput
	ToVolumeAttachmentTypeArrayOutputWithContext(context.Context) VolumeAttachmentTypeArrayOutput
}

type VolumeAttachmentTypeArray []VolumeAttachmentTypeInput

func (VolumeAttachmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return i.ToVolumeAttachmentTypeArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeArrayOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return o
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentTypeOutput) Spec() VolumeAttachmentSpecOutput {
	return o.ApplyT(func(v VolumeAttachmentType) VolumeAttachmentSpec { return v.Spec }).(VolumeAttachmentSpecOutput)
}

// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentTypeOutput) Status() VolumeAttachmentStatusPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *VolumeAttachmentStatus { return v.Status }).(VolumeAttachmentStatusPtrOutput)
}

type VolumeAttachmentTypeArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachmentType {
		return vs[0].([]VolumeAttachmentType)[vs[1].(int)]
	}).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of VolumeAttachments
	Items []VolumeAttachmentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// VolumeAttachmentListTypeInput is an input type that accepts VolumeAttachmentListTypeArgs and VolumeAttachmentListTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentListTypeInput` via:
//
//	VolumeAttachmentListTypeArgs{...}
type VolumeAttachmentListTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput
	ToVolumeAttachmentListTypeOutputWithContext(context.Context) VolumeAttachmentListTypeOutput
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of VolumeAttachments
	Items VolumeAttachmentTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VolumeAttachmentListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return i.ToVolumeAttachmentListTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentListTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return o
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of VolumeAttachments
func (o VolumeAttachmentListTypeOutput) Items() VolumeAttachmentTypeArrayOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) []VolumeAttachmentType { return v.Items }).(VolumeAttachmentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec *VolumeAttachmentSpecPatch `pulumi:"spec"`
	// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatusPatch `pulumi:"status"`
}

// VolumeAttachmentPatchTypeInput is an input type that accepts VolumeAttachmentPatchTypeArgs and VolumeAttachmentPatchTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentPatchTypeInput` via:
//
//	VolumeAttachmentPatchTypeArgs{...}
type VolumeAttachmentPatchTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput
	ToVolumeAttachmentPatchTypeOutputWithContext(context.Context) VolumeAttachmentPatchTypeOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecPatchPtrInput `pulumi:"spec"`
	// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPatchPtrInput `pulumi:"status"`
}

func (VolumeAttachmentPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentPatchType)(nil)).Elem()
}

func (i VolumeAttachmentPatchTypeArgs) ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput {
	return i.ToVolumeAttachmentPatchTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentPatchTypeArgs) ToVolumeAttachmentPatchTypeOutputWithContext(ctx context.Context) VolumeAttachmentPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentPatchTypeOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentPatchType)(nil)).Elem()
}

func (o VolumeAttachmentPatchTypeOutput) ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput {
	return o
}

func (o VolumeAttachmentPatchTypeOutput) ToVolumeAttachmentPatchTypeOutputWithContext(ctx context.Context) VolumeAttachmentPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentPatchTypeOutput) Spec() VolumeAttachmentSpecPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *VolumeAttachmentSpecPatch { return v.Spec }).(VolumeAttachmentSpecPatchPtrOutput)
}

// status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentPatchTypeOutput) Status() VolumeAttachmentStatusPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *VolumeAttachmentStatusPatch { return v.Status }).(VolumeAttachmentStatusPatchPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSource struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpec `pulumi:"inlineVolumeSpec"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

// VolumeAttachmentSourceInput is an input type that accepts VolumeAttachmentSourceArgs and VolumeAttachmentSourceOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourceInput` via:
//
//	VolumeAttachmentSourceArgs{...}
type VolumeAttachmentSourceInput interface {
	pulumi.Input

	ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput
	ToVolumeAttachmentSourceOutputWithContext(context.Context) VolumeAttachmentSourceOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPtrInput `pulumi:"inlineVolumeSpec"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return i.ToVolumeAttachmentSourceOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return o
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourceOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *corev1.PersistentVolumeSpec { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPtrOutput)
}

// persistentVolumeName represents the name of the persistent volume to attach.
func (o VolumeAttachmentSourceOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatch struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpecPatch `pulumi:"inlineVolumeSpec"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

// VolumeAttachmentSourcePatchInput is an input type that accepts VolumeAttachmentSourcePatchArgs and VolumeAttachmentSourcePatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourcePatchInput` via:
//
//	VolumeAttachmentSourcePatchArgs{...}
type VolumeAttachmentSourcePatchInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput
	ToVolumeAttachmentSourcePatchOutputWithContext(context.Context) VolumeAttachmentSourcePatchOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatchArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPatchPtrInput `pulumi:"inlineVolumeSpec"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput {
	return i.ToVolumeAttachmentSourcePatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchOutput)
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return i.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchOutput).ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentSourcePatchPtrInput is an input type that accepts VolumeAttachmentSourcePatchArgs, VolumeAttachmentSourcePatchPtr and VolumeAttachmentSourcePatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourcePatchPtrInput` via:
//
//	        VolumeAttachmentSourcePatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentSourcePatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput
	ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Context) VolumeAttachmentSourcePatchPtrOutput
}

type volumeAttachmentSourcePatchPtrType VolumeAttachmentSourcePatchArgs

func VolumeAttachmentSourcePatchPtr(v *VolumeAttachmentSourcePatchArgs) VolumeAttachmentSourcePatchPtrInput {
	return (*volumeAttachmentSourcePatchPtrType)(v)
}

func (*volumeAttachmentSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (i *volumeAttachmentSourcePatchPtrType) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return i.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSourcePatchPtrType) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput {
	return o
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchOutput {
	return o
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return o.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSourcePatch) *VolumeAttachmentSourcePatch {
		return &v
	}).(VolumeAttachmentSourcePatchPtrOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePatchOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSourcePatch) *corev1.PersistentVolumeSpecPatch { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPatchPtrOutput)
}

// persistentVolumeName represents the name of the persistent volume to attach.
func (o VolumeAttachmentSourcePatchOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSourcePatch) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (o VolumeAttachmentSourcePatchPtrOutput) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return o
}

func (o VolumeAttachmentSourcePatchPtrOutput) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return o
}

func (o VolumeAttachmentSourcePatchPtrOutput) Elem() VolumeAttachmentSourcePatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) VolumeAttachmentSourcePatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSourcePatch
		return ret
	}).(VolumeAttachmentSourcePatchOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePatchPtrOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) *corev1.PersistentVolumeSpecPatch {
		if v == nil {
			return nil
		}
		return v.InlineVolumeSpec
	}).(corev1.PersistentVolumeSpecPatchPtrOutput)
}

// persistentVolumeName represents the name of the persistent volume to attach.
func (o VolumeAttachmentSourcePatchPtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpec struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher string `pulumi:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName string `pulumi:"nodeName"`
	// source represents the volume that should be attached.
	Source VolumeAttachmentSource `pulumi:"source"`
}

// VolumeAttachmentSpecInput is an input type that accepts VolumeAttachmentSpecArgs and VolumeAttachmentSpecOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecInput` via:
//
//	VolumeAttachmentSpecArgs{...}
type VolumeAttachmentSpecInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput
	ToVolumeAttachmentSpecOutputWithContext(context.Context) VolumeAttachmentSpecOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecArgs struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringInput `pulumi:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// source represents the volume that should be attached.
	Source VolumeAttachmentSourceInput `pulumi:"source"`
}

func (VolumeAttachmentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return i.ToVolumeAttachmentSpecOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return o
}

// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecOutput) Attacher() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.Attacher }).(pulumi.StringOutput)
}

// nodeName represents the node that the volume should be attached to.
func (o VolumeAttachmentSpecOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.NodeName }).(pulumi.StringOutput)
}

// source represents the volume that should be attached.
func (o VolumeAttachmentSpecOutput) Source() VolumeAttachmentSourceOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) VolumeAttachmentSource { return v.Source }).(VolumeAttachmentSourceOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatch struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher *string `pulumi:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName *string `pulumi:"nodeName"`
	// source represents the volume that should be attached.
	Source *VolumeAttachmentSourcePatch `pulumi:"source"`
}

// VolumeAttachmentSpecPatchInput is an input type that accepts VolumeAttachmentSpecPatchArgs and VolumeAttachmentSpecPatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecPatchInput` via:
//
//	VolumeAttachmentSpecPatchArgs{...}
type VolumeAttachmentSpecPatchInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput
	ToVolumeAttachmentSpecPatchOutputWithContext(context.Context) VolumeAttachmentSpecPatchOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatchArgs struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringPtrInput `pulumi:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// source represents the volume that should be attached.
	Source VolumeAttachmentSourcePatchPtrInput `pulumi:"source"`
}

func (VolumeAttachmentSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput {
	return i.ToVolumeAttachmentSpecPatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchOutput)
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return i.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchOutput).ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentSpecPatchPtrInput is an input type that accepts VolumeAttachmentSpecPatchArgs, VolumeAttachmentSpecPatchPtr and VolumeAttachmentSpecPatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecPatchPtrInput` via:
//
//	        VolumeAttachmentSpecPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentSpecPatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput
	ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Context) VolumeAttachmentSpecPatchPtrOutput
}

type volumeAttachmentSpecPatchPtrType VolumeAttachmentSpecPatchArgs

func VolumeAttachmentSpecPatchPtr(v *VolumeAttachmentSpecPatchArgs) VolumeAttachmentSpecPatchPtrInput {
	return (*volumeAttachmentSpecPatchPtrType)(v)
}

func (*volumeAttachmentSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (i *volumeAttachmentSpecPatchPtrType) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return i.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSpecPatchPtrType) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput {
	return o
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchOutput {
	return o
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return o.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSpecPatch) *VolumeAttachmentSpecPatch {
		return &v
	}).(VolumeAttachmentSpecPatchPtrOutput)
}

// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPatchOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *string { return v.Attacher }).(pulumi.StringPtrOutput)
}

// nodeName represents the node that the volume should be attached to.
func (o VolumeAttachmentSpecPatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// source represents the volume that should be attached.
func (o VolumeAttachmentSpecPatchOutput) Source() VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *VolumeAttachmentSourcePatch { return v.Source }).(VolumeAttachmentSourcePatchPtrOutput)
}

type VolumeAttachmentSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (o VolumeAttachmentSpecPatchPtrOutput) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPatchPtrOutput) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPatchPtrOutput) Elem() VolumeAttachmentSpecPatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) VolumeAttachmentSpecPatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSpecPatch
		return ret
	}).(VolumeAttachmentSpecPatchOutput)
}

// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPatchPtrOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Attacher
	}).(pulumi.StringPtrOutput)
}

// nodeName represents the node that the volume should be attached to.
func (o VolumeAttachmentSpecPatchPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// source represents the volume that should be attached.
func (o VolumeAttachmentSpecPatchPtrOutput) Source() VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *VolumeAttachmentSourcePatch {
		if v == nil {
			return nil
		}
		return v.Source
	}).(VolumeAttachmentSourcePatchPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatus struct {
	// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeError `pulumi:"attachError"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached bool `pulumi:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeError `pulumi:"detachError"`
}

// VolumeAttachmentStatusInput is an input type that accepts VolumeAttachmentStatusArgs and VolumeAttachmentStatusOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusInput` via:
//
//	VolumeAttachmentStatusArgs{...}
type VolumeAttachmentStatusInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput
	ToVolumeAttachmentStatusOutputWithContext(context.Context) VolumeAttachmentStatusOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusArgs struct {
	// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPtrInput `pulumi:"attachError"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolInput `pulumi:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return i.ToVolumeAttachmentStatusOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput)
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput).ToVolumeAttachmentStatusPtrOutputWithContext(ctx)
}

// VolumeAttachmentStatusPtrInput is an input type that accepts VolumeAttachmentStatusArgs, VolumeAttachmentStatusPtr and VolumeAttachmentStatusPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPtrInput` via:
//
//	        VolumeAttachmentStatusArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentStatusPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput
	ToVolumeAttachmentStatusPtrOutputWithContext(context.Context) VolumeAttachmentStatusPtrOutput
}

type volumeAttachmentStatusPtrType VolumeAttachmentStatusArgs

func VolumeAttachmentStatusPtr(v *VolumeAttachmentStatusArgs) VolumeAttachmentStatusPtrInput {
	return (*volumeAttachmentStatusPtrType)(v)
}

func (*volumeAttachmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentStatus) *VolumeAttachmentStatus {
		return &v
	}).(VolumeAttachmentStatusPtrOutput)
}

// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.AttachError }).(VolumeErrorPtrOutput)
}

// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) bool { return v.Attached }).(pulumi.BoolOutput)
}

// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.DetachError }).(VolumeErrorPtrOutput)
}

type VolumeAttachmentStatusPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) Elem() VolumeAttachmentStatusOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) VolumeAttachmentStatus {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentStatus
		return ret
	}).(VolumeAttachmentStatusOutput)
}

// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.AttachError
	}).(VolumeErrorPtrOutput)
}

// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Attached
	}).(pulumi.BoolPtrOutput)
}

// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AttachmentMetadata
	}).(pulumi.StringMapOutput)
}

// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.DetachError
	}).(VolumeErrorPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatch struct {
	// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeErrorPatch `pulumi:"attachError"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached *bool `pulumi:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeErrorPatch `pulumi:"detachError"`
}

// VolumeAttachmentStatusPatchInput is an input type that accepts VolumeAttachmentStatusPatchArgs and VolumeAttachmentStatusPatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPatchInput` via:
//
//	VolumeAttachmentStatusPatchArgs{...}
type VolumeAttachmentStatusPatchInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput
	ToVolumeAttachmentStatusPatchOutputWithContext(context.Context) VolumeAttachmentStatusPatchOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatchArgs struct {
	// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPatchPtrInput `pulumi:"attachError"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPatchPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput {
	return i.ToVolumeAttachmentStatusPatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchOutput)
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return i.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchOutput).ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentStatusPatchPtrInput is an input type that accepts VolumeAttachmentStatusPatchArgs, VolumeAttachmentStatusPatchPtr and VolumeAttachmentStatusPatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPatchPtrInput` via:
//
//	        VolumeAttachmentStatusPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentStatusPatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput
	ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Context) VolumeAttachmentStatusPatchPtrOutput
}

type volumeAttachmentStatusPatchPtrType VolumeAttachmentStatusPatchArgs

func VolumeAttachmentStatusPatchPtr(v *VolumeAttachmentStatusPatchArgs) VolumeAttachmentStatusPatchPtrInput {
	return (*volumeAttachmentStatusPatchPtrType)(v)
}

func (*volumeAttachmentStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (i *volumeAttachmentStatusPatchPtrType) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return i.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPatchPtrType) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput {
	return o
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchOutput {
	return o
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return o.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentStatusPatch) *VolumeAttachmentStatusPatch {
		return &v
	}).(VolumeAttachmentStatusPatchPtrOutput)
}

// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) AttachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *VolumeErrorPatch { return v.AttachError }).(VolumeErrorPatchPtrOutput)
}

// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) DetachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *VolumeErrorPatch { return v.DetachError }).(VolumeErrorPatchPtrOutput)
}

type VolumeAttachmentStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (o VolumeAttachmentStatusPatchPtrOutput) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPatchPtrOutput) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPatchPtrOutput) Elem() VolumeAttachmentStatusPatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) VolumeAttachmentStatusPatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentStatusPatch
		return ret
	}).(VolumeAttachmentStatusPatchOutput)
}

// attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) AttachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *VolumeErrorPatch {
		if v == nil {
			return nil
		}
		return v.AttachError
	}).(VolumeErrorPatchPtrOutput)
}

// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Attached
	}).(pulumi.BoolPtrOutput)
}

// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.AttachmentMetadata
	}).(pulumi.StringMapOutput)
}

// detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) DetachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *VolumeErrorPatch {
		if v == nil {
			return nil
		}
		return v.DetachError
	}).(VolumeErrorPatchPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeError struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// time represents the time the error was encountered.
	Time *string `pulumi:"time"`
}

// VolumeErrorInput is an input type that accepts VolumeErrorArgs and VolumeErrorOutput values.
// You can construct a concrete instance of `VolumeErrorInput` via:
//
//	VolumeErrorArgs{...}
type VolumeErrorInput interface {
	pulumi.Input

	ToVolumeErrorOutput() VolumeErrorOutput
	ToVolumeErrorOutputWithContext(context.Context) VolumeErrorOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorArgs struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// time represents the time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (i VolumeErrorArgs) ToVolumeErrorOutput() VolumeErrorOutput {
	return i.ToVolumeErrorOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput)
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput).ToVolumeErrorPtrOutputWithContext(ctx)
}

// VolumeErrorPtrInput is an input type that accepts VolumeErrorArgs, VolumeErrorPtr and VolumeErrorPtrOutput values.
// You can construct a concrete instance of `VolumeErrorPtrInput` via:
//
//	        VolumeErrorArgs{...}
//
//	or:
//
//	        nil
type VolumeErrorPtrInput interface {
	pulumi.Input

	ToVolumeErrorPtrOutput() VolumeErrorPtrOutput
	ToVolumeErrorPtrOutputWithContext(context.Context) VolumeErrorPtrOutput
}

type volumeErrorPtrType VolumeErrorArgs

func VolumeErrorPtr(v *VolumeErrorArgs) VolumeErrorPtrInput {
	return (*volumeErrorPtrType)(v)
}

func (*volumeErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorOutput struct{ *pulumi.OutputState }

func (VolumeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (o VolumeErrorOutput) ToVolumeErrorOutput() VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeError) *VolumeError {
		return &v
	}).(VolumeErrorPtrOutput)
}

// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// time represents the time the error was encountered.
func (o VolumeErrorOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPtrOutput struct{ *pulumi.OutputState }

func (VolumeErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) Elem() VolumeErrorOutput {
	return o.ApplyT(func(v *VolumeError) VolumeError {
		if v != nil {
			return *v
		}
		var ret VolumeError
		return ret
	}).(VolumeErrorOutput)
}

// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// time represents the time the error was encountered.
func (o VolumeErrorPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatch struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// time represents the time the error was encountered.
	Time *string `pulumi:"time"`
}

// VolumeErrorPatchInput is an input type that accepts VolumeErrorPatchArgs and VolumeErrorPatchOutput values.
// You can construct a concrete instance of `VolumeErrorPatchInput` via:
//
//	VolumeErrorPatchArgs{...}
type VolumeErrorPatchInput interface {
	pulumi.Input

	ToVolumeErrorPatchOutput() VolumeErrorPatchOutput
	ToVolumeErrorPatchOutputWithContext(context.Context) VolumeErrorPatchOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatchArgs struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// time represents the time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeErrorPatch)(nil)).Elem()
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchOutput() VolumeErrorPatchOutput {
	return i.ToVolumeErrorPatchOutputWithContext(context.Background())
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchOutputWithContext(ctx context.Context) VolumeErrorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchOutput)
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return i.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchOutput).ToVolumeErrorPatchPtrOutputWithContext(ctx)
}

// VolumeErrorPatchPtrInput is an input type that accepts VolumeErrorPatchArgs, VolumeErrorPatchPtr and VolumeErrorPatchPtrOutput values.
// You can construct a concrete instance of `VolumeErrorPatchPtrInput` via:
//
//	        VolumeErrorPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeErrorPatchPtrInput interface {
	pulumi.Input

	ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput
	ToVolumeErrorPatchPtrOutputWithContext(context.Context) VolumeErrorPatchPtrOutput
}

type volumeErrorPatchPtrType VolumeErrorPatchArgs

func VolumeErrorPatchPtr(v *VolumeErrorPatchArgs) VolumeErrorPatchPtrInput {
	return (*volumeErrorPatchPtrType)(v)
}

func (*volumeErrorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeErrorPatch)(nil)).Elem()
}

func (i *volumeErrorPatchPtrType) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return i.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPatchPtrType) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatchOutput struct{ *pulumi.OutputState }

func (VolumeErrorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeErrorPatch)(nil)).Elem()
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchOutput() VolumeErrorPatchOutput {
	return o
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchOutputWithContext(ctx context.Context) VolumeErrorPatchOutput {
	return o
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return o.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeErrorPatch) *VolumeErrorPatch {
		return &v
	}).(VolumeErrorPatchPtrOutput)
}

// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeErrorPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// time represents the time the error was encountered.
func (o VolumeErrorPatchOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeErrorPatch) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeErrorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeErrorPatch)(nil)).Elem()
}

func (o VolumeErrorPatchPtrOutput) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return o
}

func (o VolumeErrorPatchPtrOutput) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return o
}

func (o VolumeErrorPatchPtrOutput) Elem() VolumeErrorPatchOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) VolumeErrorPatch {
		if v != nil {
			return *v
		}
		var ret VolumeErrorPatch
		return ret
	}).(VolumeErrorPatchOutput)
}

// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (o VolumeErrorPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// time represents the time the error was encountered.
func (o VolumeErrorPatchPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResources struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count *int `pulumi:"count"`
}

// VolumeNodeResourcesInput is an input type that accepts VolumeNodeResourcesArgs and VolumeNodeResourcesOutput values.
// You can construct a concrete instance of `VolumeNodeResourcesInput` via:
//
//	VolumeNodeResourcesArgs{...}
type VolumeNodeResourcesInput interface {
	pulumi.Input

	ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput
	ToVolumeNodeResourcesOutputWithContext(context.Context) VolumeNodeResourcesOutput
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesArgs struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (VolumeNodeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResources)(nil)).Elem()
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput {
	return i.ToVolumeNodeResourcesOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesOutput)
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return i.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesArgs) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesOutput).ToVolumeNodeResourcesPtrOutputWithContext(ctx)
}

// VolumeNodeResourcesPtrInput is an input type that accepts VolumeNodeResourcesArgs, VolumeNodeResourcesPtr and VolumeNodeResourcesPtrOutput values.
// You can construct a concrete instance of `VolumeNodeResourcesPtrInput` via:
//
//	        VolumeNodeResourcesArgs{...}
//
//	or:
//
//	        nil
type VolumeNodeResourcesPtrInput interface {
	pulumi.Input

	ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput
	ToVolumeNodeResourcesPtrOutputWithContext(context.Context) VolumeNodeResourcesPtrOutput
}

type volumeNodeResourcesPtrType VolumeNodeResourcesArgs

func VolumeNodeResourcesPtr(v *VolumeNodeResourcesArgs) VolumeNodeResourcesPtrInput {
	return (*volumeNodeResourcesPtrType)(v)
}

func (*volumeNodeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResources)(nil)).Elem()
}

func (i *volumeNodeResourcesPtrType) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return i.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (i *volumeNodeResourcesPtrType) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesOutput struct{ *pulumi.OutputState }

func (VolumeNodeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResources)(nil)).Elem()
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesOutput() VolumeNodeResourcesOutput {
	return o
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesOutputWithContext(ctx context.Context) VolumeNodeResourcesOutput {
	return o
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return o.ToVolumeNodeResourcesPtrOutputWithContext(context.Background())
}

func (o VolumeNodeResourcesOutput) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeNodeResources) *VolumeNodeResources {
		return &v
	}).(VolumeNodeResourcesPtrOutput)
}

// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeNodeResources) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type VolumeNodeResourcesPtrOutput struct{ *pulumi.OutputState }

func (VolumeNodeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResources)(nil)).Elem()
}

func (o VolumeNodeResourcesPtrOutput) ToVolumeNodeResourcesPtrOutput() VolumeNodeResourcesPtrOutput {
	return o
}

func (o VolumeNodeResourcesPtrOutput) ToVolumeNodeResourcesPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPtrOutput {
	return o
}

func (o VolumeNodeResourcesPtrOutput) Elem() VolumeNodeResourcesOutput {
	return o.ApplyT(func(v *VolumeNodeResources) VolumeNodeResources {
		if v != nil {
			return *v
		}
		var ret VolumeNodeResources
		return ret
	}).(VolumeNodeResourcesOutput)
}

// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeNodeResources) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesPatch struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count *int `pulumi:"count"`
}

// VolumeNodeResourcesPatchInput is an input type that accepts VolumeNodeResourcesPatchArgs and VolumeNodeResourcesPatchOutput values.
// You can construct a concrete instance of `VolumeNodeResourcesPatchInput` via:
//
//	VolumeNodeResourcesPatchArgs{...}
type VolumeNodeResourcesPatchInput interface {
	pulumi.Input

	ToVolumeNodeResourcesPatchOutput() VolumeNodeResourcesPatchOutput
	ToVolumeNodeResourcesPatchOutputWithContext(context.Context) VolumeNodeResourcesPatchOutput
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesPatchArgs struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (VolumeNodeResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResourcesPatch)(nil)).Elem()
}

func (i VolumeNodeResourcesPatchArgs) ToVolumeNodeResourcesPatchOutput() VolumeNodeResourcesPatchOutput {
	return i.ToVolumeNodeResourcesPatchOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesPatchArgs) ToVolumeNodeResourcesPatchOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesPatchOutput)
}

func (i VolumeNodeResourcesPatchArgs) ToVolumeNodeResourcesPatchPtrOutput() VolumeNodeResourcesPatchPtrOutput {
	return i.ToVolumeNodeResourcesPatchPtrOutputWithContext(context.Background())
}

func (i VolumeNodeResourcesPatchArgs) ToVolumeNodeResourcesPatchPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesPatchOutput).ToVolumeNodeResourcesPatchPtrOutputWithContext(ctx)
}

// VolumeNodeResourcesPatchPtrInput is an input type that accepts VolumeNodeResourcesPatchArgs, VolumeNodeResourcesPatchPtr and VolumeNodeResourcesPatchPtrOutput values.
// You can construct a concrete instance of `VolumeNodeResourcesPatchPtrInput` via:
//
//	        VolumeNodeResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeNodeResourcesPatchPtrInput interface {
	pulumi.Input

	ToVolumeNodeResourcesPatchPtrOutput() VolumeNodeResourcesPatchPtrOutput
	ToVolumeNodeResourcesPatchPtrOutputWithContext(context.Context) VolumeNodeResourcesPatchPtrOutput
}

type volumeNodeResourcesPatchPtrType VolumeNodeResourcesPatchArgs

func VolumeNodeResourcesPatchPtr(v *VolumeNodeResourcesPatchArgs) VolumeNodeResourcesPatchPtrInput {
	return (*volumeNodeResourcesPatchPtrType)(v)
}

func (*volumeNodeResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResourcesPatch)(nil)).Elem()
}

func (i *volumeNodeResourcesPatchPtrType) ToVolumeNodeResourcesPatchPtrOutput() VolumeNodeResourcesPatchPtrOutput {
	return i.ToVolumeNodeResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *volumeNodeResourcesPatchPtrType) ToVolumeNodeResourcesPatchPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeNodeResourcesPatchPtrOutput)
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type VolumeNodeResourcesPatchOutput struct{ *pulumi.OutputState }

func (VolumeNodeResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeNodeResourcesPatch)(nil)).Elem()
}

func (o VolumeNodeResourcesPatchOutput) ToVolumeNodeResourcesPatchOutput() VolumeNodeResourcesPatchOutput {
	return o
}

func (o VolumeNodeResourcesPatchOutput) ToVolumeNodeResourcesPatchOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchOutput {
	return o
}

func (o VolumeNodeResourcesPatchOutput) ToVolumeNodeResourcesPatchPtrOutput() VolumeNodeResourcesPatchPtrOutput {
	return o.ToVolumeNodeResourcesPatchPtrOutputWithContext(context.Background())
}

func (o VolumeNodeResourcesPatchOutput) ToVolumeNodeResourcesPatchPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeNodeResourcesPatch) *VolumeNodeResourcesPatch {
		return &v
	}).(VolumeNodeResourcesPatchPtrOutput)
}

// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesPatchOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeNodeResourcesPatch) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type VolumeNodeResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeNodeResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeNodeResourcesPatch)(nil)).Elem()
}

func (o VolumeNodeResourcesPatchPtrOutput) ToVolumeNodeResourcesPatchPtrOutput() VolumeNodeResourcesPatchPtrOutput {
	return o
}

func (o VolumeNodeResourcesPatchPtrOutput) ToVolumeNodeResourcesPatchPtrOutputWithContext(ctx context.Context) VolumeNodeResourcesPatchPtrOutput {
	return o
}

func (o VolumeNodeResourcesPatchPtrOutput) Elem() VolumeNodeResourcesPatchOutput {
	return o.ApplyT(func(v *VolumeNodeResourcesPatch) VolumeNodeResourcesPatch {
		if v != nil {
			return *v
		}
		var ret VolumeNodeResourcesPatch
		return ret
	}).(VolumeNodeResourcesPatchOutput)
}

// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
func (o VolumeNodeResourcesPatchPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeNodeResourcesPatch) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverTypeInput)(nil)).Elem(), CSIDriverTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverTypeArrayInput)(nil)).Elem(), CSIDriverTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverListTypeInput)(nil)).Elem(), CSIDriverListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverPatchTypeInput)(nil)).Elem(), CSIDriverPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverSpecInput)(nil)).Elem(), CSIDriverSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverSpecPatchInput)(nil)).Elem(), CSIDriverSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIDriverSpecPatchPtrInput)(nil)).Elem(), CSIDriverSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeTypeInput)(nil)).Elem(), CSINodeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeTypeArrayInput)(nil)).Elem(), CSINodeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeDriverInput)(nil)).Elem(), CSINodeDriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeDriverArrayInput)(nil)).Elem(), CSINodeDriverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeDriverPatchInput)(nil)).Elem(), CSINodeDriverPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeDriverPatchArrayInput)(nil)).Elem(), CSINodeDriverPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeListTypeInput)(nil)).Elem(), CSINodeListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodePatchTypeInput)(nil)).Elem(), CSINodePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeSpecInput)(nil)).Elem(), CSINodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeSpecPatchInput)(nil)).Elem(), CSINodeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSINodeSpecPatchPtrInput)(nil)).Elem(), CSINodeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityTypeInput)(nil)).Elem(), CSIStorageCapacityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityTypeArrayInput)(nil)).Elem(), CSIStorageCapacityTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityListTypeInput)(nil)).Elem(), CSIStorageCapacityListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityPatchTypeInput)(nil)).Elem(), CSIStorageCapacityPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageClassTypeInput)(nil)).Elem(), StorageClassTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageClassTypeArrayInput)(nil)).Elem(), StorageClassTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageClassListTypeInput)(nil)).Elem(), StorageClassListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageClassPatchTypeInput)(nil)).Elem(), StorageClassPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestInput)(nil)).Elem(), TokenRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestArrayInput)(nil)).Elem(), TokenRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchInput)(nil)).Elem(), TokenRequestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenRequestPatchArrayInput)(nil)).Elem(), TokenRequestPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeInput)(nil)).Elem(), VolumeAttachmentTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeArrayInput)(nil)).Elem(), VolumeAttachmentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentListTypeInput)(nil)).Elem(), VolumeAttachmentListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentPatchTypeInput)(nil)).Elem(), VolumeAttachmentPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourceInput)(nil)).Elem(), VolumeAttachmentSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourcePatchInput)(nil)).Elem(), VolumeAttachmentSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourcePatchPtrInput)(nil)).Elem(), VolumeAttachmentSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecInput)(nil)).Elem(), VolumeAttachmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecPatchInput)(nil)).Elem(), VolumeAttachmentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecPatchPtrInput)(nil)).Elem(), VolumeAttachmentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPtrInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPatchInput)(nil)).Elem(), VolumeAttachmentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPatchPtrInput)(nil)).Elem(), VolumeAttachmentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPtrInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPatchInput)(nil)).Elem(), VolumeErrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPatchPtrInput)(nil)).Elem(), VolumeErrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeResourcesInput)(nil)).Elem(), VolumeNodeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeResourcesPtrInput)(nil)).Elem(), VolumeNodeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeResourcesPatchInput)(nil)).Elem(), VolumeNodeResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeNodeResourcesPatchPtrInput)(nil)).Elem(), VolumeNodeResourcesPatchArgs{})
	pulumi.RegisterOutputType(CSIDriverTypeOutput{})
	pulumi.RegisterOutputType(CSIDriverTypeArrayOutput{})
	pulumi.RegisterOutputType(CSIDriverListTypeOutput{})
	pulumi.RegisterOutputType(CSIDriverPatchTypeOutput{})
	pulumi.RegisterOutputType(CSIDriverSpecOutput{})
	pulumi.RegisterOutputType(CSIDriverSpecPatchOutput{})
	pulumi.RegisterOutputType(CSIDriverSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(CSINodeTypeOutput{})
	pulumi.RegisterOutputType(CSINodeTypeArrayOutput{})
	pulumi.RegisterOutputType(CSINodeDriverOutput{})
	pulumi.RegisterOutputType(CSINodeDriverArrayOutput{})
	pulumi.RegisterOutputType(CSINodeDriverPatchOutput{})
	pulumi.RegisterOutputType(CSINodeDriverPatchArrayOutput{})
	pulumi.RegisterOutputType(CSINodeListTypeOutput{})
	pulumi.RegisterOutputType(CSINodePatchTypeOutput{})
	pulumi.RegisterOutputType(CSINodeSpecOutput{})
	pulumi.RegisterOutputType(CSINodeSpecPatchOutput{})
	pulumi.RegisterOutputType(CSINodeSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityTypeOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityTypeArrayOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityListTypeOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityPatchTypeOutput{})
	pulumi.RegisterOutputType(StorageClassTypeOutput{})
	pulumi.RegisterOutputType(StorageClassTypeArrayOutput{})
	pulumi.RegisterOutputType(StorageClassListTypeOutput{})
	pulumi.RegisterOutputType(StorageClassPatchTypeOutput{})
	pulumi.RegisterOutputType(TokenRequestOutput{})
	pulumi.RegisterOutputType(TokenRequestArrayOutput{})
	pulumi.RegisterOutputType(TokenRequestPatchOutput{})
	pulumi.RegisterOutputType(TokenRequestPatchArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentListTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentPatchTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourceOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeErrorOutput{})
	pulumi.RegisterOutputType(VolumeErrorPtrOutput{})
	pulumi.RegisterOutputType(VolumeErrorPatchOutput{})
	pulumi.RegisterOutputType(VolumeErrorPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesPtrOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesPatchOutput{})
	pulumi.RegisterOutputType(VolumeNodeResourcesPatchPtrOutput{})
}
