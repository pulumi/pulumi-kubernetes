// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName pulumi.StringPtrOutput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
}

// NewVolumeAttributesClassPatch registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttributesClassPatch(ctx *pulumi.Context,
	name string, args *VolumeAttributesClassPatchArgs, opts ...pulumi.ResourceOption) (*VolumeAttributesClassPatch, error) {
	if args == nil {
		args = &VolumeAttributesClassPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("storage.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("VolumeAttributesClass")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VolumeAttributesClassPatch
	err := ctx.RegisterResource("kubernetes:storage.k8s.io/v1alpha1:VolumeAttributesClassPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAttributesClassPatch gets an existing VolumeAttributesClassPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttributesClassPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeAttributesClassPatchState, opts ...pulumi.ResourceOption) (*VolumeAttributesClassPatch, error) {
	var resource VolumeAttributesClassPatch
	err := ctx.ReadResource("kubernetes:storage.k8s.io/v1alpha1:VolumeAttributesClassPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeAttributesClassPatch resources.
type volumeAttributesClassPatchState struct {
}

type VolumeAttributesClassPatchState struct {
}

func (VolumeAttributesClassPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttributesClassPatchState)(nil)).Elem()
}

type volumeAttributesClassPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName *string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters map[string]string `pulumi:"parameters"`
}

// The set of arguments for constructing a VolumeAttributesClassPatch resource.
type VolumeAttributesClassPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Name of the CSI driver This field is immutable.
	DriverName pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters pulumi.StringMapInput
}

func (VolumeAttributesClassPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttributesClassPatchArgs)(nil)).Elem()
}

type VolumeAttributesClassPatchInput interface {
	pulumi.Input

	ToVolumeAttributesClassPatchOutput() VolumeAttributesClassPatchOutput
	ToVolumeAttributesClassPatchOutputWithContext(ctx context.Context) VolumeAttributesClassPatchOutput
}

func (*VolumeAttributesClassPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttributesClassPatch)(nil)).Elem()
}

func (i *VolumeAttributesClassPatch) ToVolumeAttributesClassPatchOutput() VolumeAttributesClassPatchOutput {
	return i.ToVolumeAttributesClassPatchOutputWithContext(context.Background())
}

func (i *VolumeAttributesClassPatch) ToVolumeAttributesClassPatchOutputWithContext(ctx context.Context) VolumeAttributesClassPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassPatchOutput)
}

// VolumeAttributesClassPatchArrayInput is an input type that accepts VolumeAttributesClassPatchArray and VolumeAttributesClassPatchArrayOutput values.
// You can construct a concrete instance of `VolumeAttributesClassPatchArrayInput` via:
//
//	VolumeAttributesClassPatchArray{ VolumeAttributesClassPatchArgs{...} }
type VolumeAttributesClassPatchArrayInput interface {
	pulumi.Input

	ToVolumeAttributesClassPatchArrayOutput() VolumeAttributesClassPatchArrayOutput
	ToVolumeAttributesClassPatchArrayOutputWithContext(context.Context) VolumeAttributesClassPatchArrayOutput
}

type VolumeAttributesClassPatchArray []VolumeAttributesClassPatchInput

func (VolumeAttributesClassPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttributesClassPatch)(nil)).Elem()
}

func (i VolumeAttributesClassPatchArray) ToVolumeAttributesClassPatchArrayOutput() VolumeAttributesClassPatchArrayOutput {
	return i.ToVolumeAttributesClassPatchArrayOutputWithContext(context.Background())
}

func (i VolumeAttributesClassPatchArray) ToVolumeAttributesClassPatchArrayOutputWithContext(ctx context.Context) VolumeAttributesClassPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassPatchArrayOutput)
}

// VolumeAttributesClassPatchMapInput is an input type that accepts VolumeAttributesClassPatchMap and VolumeAttributesClassPatchMapOutput values.
// You can construct a concrete instance of `VolumeAttributesClassPatchMapInput` via:
//
//	VolumeAttributesClassPatchMap{ "key": VolumeAttributesClassPatchArgs{...} }
type VolumeAttributesClassPatchMapInput interface {
	pulumi.Input

	ToVolumeAttributesClassPatchMapOutput() VolumeAttributesClassPatchMapOutput
	ToVolumeAttributesClassPatchMapOutputWithContext(context.Context) VolumeAttributesClassPatchMapOutput
}

type VolumeAttributesClassPatchMap map[string]VolumeAttributesClassPatchInput

func (VolumeAttributesClassPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttributesClassPatch)(nil)).Elem()
}

func (i VolumeAttributesClassPatchMap) ToVolumeAttributesClassPatchMapOutput() VolumeAttributesClassPatchMapOutput {
	return i.ToVolumeAttributesClassPatchMapOutputWithContext(context.Background())
}

func (i VolumeAttributesClassPatchMap) ToVolumeAttributesClassPatchMapOutputWithContext(ctx context.Context) VolumeAttributesClassPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassPatchMapOutput)
}

type VolumeAttributesClassPatchOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttributesClassPatch)(nil)).Elem()
}

func (o VolumeAttributesClassPatchOutput) ToVolumeAttributesClassPatchOutput() VolumeAttributesClassPatchOutput {
	return o
}

func (o VolumeAttributesClassPatchOutput) ToVolumeAttributesClassPatchOutputWithContext(ctx context.Context) VolumeAttributesClassPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttributesClassPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttributesClassPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Name of the CSI driver This field is immutable.
func (o VolumeAttributesClassPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttributesClassPatch) pulumi.StringPtrOutput { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttributesClassPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttributesClassPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttributesClassPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttributesClassPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
//
// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
func (o VolumeAttributesClassPatchOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttributesClassPatch) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

type VolumeAttributesClassPatchArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttributesClassPatch)(nil)).Elem()
}

func (o VolumeAttributesClassPatchArrayOutput) ToVolumeAttributesClassPatchArrayOutput() VolumeAttributesClassPatchArrayOutput {
	return o
}

func (o VolumeAttributesClassPatchArrayOutput) ToVolumeAttributesClassPatchArrayOutputWithContext(ctx context.Context) VolumeAttributesClassPatchArrayOutput {
	return o
}

func (o VolumeAttributesClassPatchArrayOutput) Index(i pulumi.IntInput) VolumeAttributesClassPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeAttributesClassPatch {
		return vs[0].([]*VolumeAttributesClassPatch)[vs[1].(int)]
	}).(VolumeAttributesClassPatchOutput)
}

type VolumeAttributesClassPatchMapOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttributesClassPatch)(nil)).Elem()
}

func (o VolumeAttributesClassPatchMapOutput) ToVolumeAttributesClassPatchMapOutput() VolumeAttributesClassPatchMapOutput {
	return o
}

func (o VolumeAttributesClassPatchMapOutput) ToVolumeAttributesClassPatchMapOutputWithContext(ctx context.Context) VolumeAttributesClassPatchMapOutput {
	return o
}

func (o VolumeAttributesClassPatchMapOutput) MapIndex(k pulumi.StringInput) VolumeAttributesClassPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeAttributesClassPatch {
		return vs[0].(map[string]*VolumeAttributesClassPatch)[vs[1].(string)]
	}).(VolumeAttributesClassPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassPatchInput)(nil)).Elem(), &VolumeAttributesClassPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassPatchArrayInput)(nil)).Elem(), VolumeAttributesClassPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassPatchMapInput)(nil)).Elem(), VolumeAttributesClassPatchMap{})
	pulumi.RegisterOutputType(VolumeAttributesClassPatchOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassPatchArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassPatchMapOutput{})
}
