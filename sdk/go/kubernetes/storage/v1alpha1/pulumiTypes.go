// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
type CSIStorageCapacityType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable and treated like zero capacity.
	Capacity *string `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize *string `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// NodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology *metav1.LabelSelector `pulumi:"nodeTopology"`
	// The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName string `pulumi:"storageClassName"`
}

// CSIStorageCapacityTypeInput is an input type that accepts CSIStorageCapacityTypeArgs and CSIStorageCapacityTypeOutput values.
// You can construct a concrete instance of `CSIStorageCapacityTypeInput` via:
//
//          CSIStorageCapacityTypeArgs{...}
type CSIStorageCapacityTypeInput interface {
	pulumi.Input

	ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput
	ToCSIStorageCapacityTypeOutputWithContext(context.Context) CSIStorageCapacityTypeOutput
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
type CSIStorageCapacityTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable and treated like zero capacity.
	Capacity pulumi.StringPtrInput `pulumi:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize pulumi.StringPtrInput `pulumi:"maximumVolumeSize"`
	// Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// NodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology metav1.LabelSelectorPtrInput `pulumi:"nodeTopology"`
	// The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName pulumi.StringInput `pulumi:"storageClassName"`
}

func (CSIStorageCapacityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityType)(nil)).Elem()
}

func (i CSIStorageCapacityTypeArgs) ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput {
	return i.ToCSIStorageCapacityTypeOutputWithContext(context.Background())
}

func (i CSIStorageCapacityTypeArgs) ToCSIStorageCapacityTypeOutputWithContext(ctx context.Context) CSIStorageCapacityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityTypeOutput)
}

// CSIStorageCapacityTypeArrayInput is an input type that accepts CSIStorageCapacityTypeArray and CSIStorageCapacityTypeArrayOutput values.
// You can construct a concrete instance of `CSIStorageCapacityTypeArrayInput` via:
//
//          CSIStorageCapacityTypeArray{ CSIStorageCapacityTypeArgs{...} }
type CSIStorageCapacityTypeArrayInput interface {
	pulumi.Input

	ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput
	ToCSIStorageCapacityTypeArrayOutputWithContext(context.Context) CSIStorageCapacityTypeArrayOutput
}

type CSIStorageCapacityTypeArray []CSIStorageCapacityTypeInput

func (CSIStorageCapacityTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIStorageCapacityType)(nil)).Elem()
}

func (i CSIStorageCapacityTypeArray) ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput {
	return i.ToCSIStorageCapacityTypeArrayOutputWithContext(context.Background())
}

func (i CSIStorageCapacityTypeArray) ToCSIStorageCapacityTypeArrayOutputWithContext(ctx context.Context) CSIStorageCapacityTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityTypeArrayOutput)
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
type CSIStorageCapacityTypeOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityType)(nil)).Elem()
}

func (o CSIStorageCapacityTypeOutput) ToCSIStorageCapacityTypeOutput() CSIStorageCapacityTypeOutput {
	return o
}

func (o CSIStorageCapacityTypeOutput) ToCSIStorageCapacityTypeOutputWithContext(ctx context.Context) CSIStorageCapacityTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIStorageCapacityTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable and treated like zero capacity.
func (o CSIStorageCapacityTypeOutput) Capacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.Capacity }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIStorageCapacityTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
//
// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
func (o CSIStorageCapacityTypeOutput) MaximumVolumeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *string { return v.MaximumVolumeSize }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
//
// Objects are namespaced.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIStorageCapacityTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// NodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
func (o CSIStorageCapacityTypeOutput) NodeTopology() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) *metav1.LabelSelector { return v.NodeTopology }).(metav1.LabelSelectorPtrOutput)
}

// The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
func (o CSIStorageCapacityTypeOutput) StorageClassName() pulumi.StringOutput {
	return o.ApplyT(func(v CSIStorageCapacityType) string { return v.StorageClassName }).(pulumi.StringOutput)
}

type CSIStorageCapacityTypeArrayOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIStorageCapacityType)(nil)).Elem()
}

func (o CSIStorageCapacityTypeArrayOutput) ToCSIStorageCapacityTypeArrayOutput() CSIStorageCapacityTypeArrayOutput {
	return o
}

func (o CSIStorageCapacityTypeArrayOutput) ToCSIStorageCapacityTypeArrayOutputWithContext(ctx context.Context) CSIStorageCapacityTypeArrayOutput {
	return o
}

func (o CSIStorageCapacityTypeArrayOutput) Index(i pulumi.IntInput) CSIStorageCapacityTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIStorageCapacityType {
		return vs[0].([]CSIStorageCapacityType)[vs[1].(int)]
	}).(CSIStorageCapacityTypeOutput)
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of CSIStorageCapacity objects.
	Items []CSIStorageCapacityType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// CSIStorageCapacityListTypeInput is an input type that accepts CSIStorageCapacityListTypeArgs and CSIStorageCapacityListTypeOutput values.
// You can construct a concrete instance of `CSIStorageCapacityListTypeInput` via:
//
//          CSIStorageCapacityListTypeArgs{...}
type CSIStorageCapacityListTypeInput interface {
	pulumi.Input

	ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput
	ToCSIStorageCapacityListTypeOutputWithContext(context.Context) CSIStorageCapacityListTypeOutput
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of CSIStorageCapacity objects.
	Items CSIStorageCapacityTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (CSIStorageCapacityListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityListType)(nil)).Elem()
}

func (i CSIStorageCapacityListTypeArgs) ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput {
	return i.ToCSIStorageCapacityListTypeOutputWithContext(context.Background())
}

func (i CSIStorageCapacityListTypeArgs) ToCSIStorageCapacityListTypeOutputWithContext(ctx context.Context) CSIStorageCapacityListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIStorageCapacityListTypeOutput)
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type CSIStorageCapacityListTypeOutput struct{ *pulumi.OutputState }

func (CSIStorageCapacityListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIStorageCapacityListType)(nil)).Elem()
}

func (o CSIStorageCapacityListTypeOutput) ToCSIStorageCapacityListTypeOutput() CSIStorageCapacityListTypeOutput {
	return o
}

func (o CSIStorageCapacityListTypeOutput) ToCSIStorageCapacityListTypeOutputWithContext(ctx context.Context) CSIStorageCapacityListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CSIStorageCapacityListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of CSIStorageCapacity objects.
func (o CSIStorageCapacityListTypeOutput) Items() CSIStorageCapacityTypeArrayOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) []CSIStorageCapacityType { return v.Items }).(CSIStorageCapacityTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CSIStorageCapacityListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CSIStorageCapacityListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v CSIStorageCapacityListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpec `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatus `pulumi:"status"`
}

// VolumeAttachmentTypeInput is an input type that accepts VolumeAttachmentTypeArgs and VolumeAttachmentTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeInput` via:
//
//          VolumeAttachmentTypeArgs{...}
type VolumeAttachmentTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput
	ToVolumeAttachmentTypeOutputWithContext(context.Context) VolumeAttachmentTypeOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecInput `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPtrInput `pulumi:"status"`
}

func (VolumeAttachmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return i.ToVolumeAttachmentTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentTypeArrayInput is an input type that accepts VolumeAttachmentTypeArray and VolumeAttachmentTypeArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeArrayInput` via:
//
//          VolumeAttachmentTypeArray{ VolumeAttachmentTypeArgs{...} }
type VolumeAttachmentTypeArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput
	ToVolumeAttachmentTypeArrayOutputWithContext(context.Context) VolumeAttachmentTypeArrayOutput
}

type VolumeAttachmentTypeArray []VolumeAttachmentTypeInput

func (VolumeAttachmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return i.ToVolumeAttachmentTypeArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeArrayOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return o
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentTypeOutput) Spec() VolumeAttachmentSpecOutput {
	return o.ApplyT(func(v VolumeAttachmentType) VolumeAttachmentSpec { return v.Spec }).(VolumeAttachmentSpecOutput)
}

// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentTypeOutput) Status() VolumeAttachmentStatusPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *VolumeAttachmentStatus { return v.Status }).(VolumeAttachmentStatusPtrOutput)
}

type VolumeAttachmentTypeArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachmentType {
		return vs[0].([]VolumeAttachmentType)[vs[1].(int)]
	}).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items []VolumeAttachmentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// VolumeAttachmentListTypeInput is an input type that accepts VolumeAttachmentListTypeArgs and VolumeAttachmentListTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentListTypeInput` via:
//
//          VolumeAttachmentListTypeArgs{...}
type VolumeAttachmentListTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput
	ToVolumeAttachmentListTypeOutputWithContext(context.Context) VolumeAttachmentListTypeOutput
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items VolumeAttachmentTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VolumeAttachmentListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return i.ToVolumeAttachmentListTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentListTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return o
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of VolumeAttachments
func (o VolumeAttachmentListTypeOutput) Items() VolumeAttachmentTypeArrayOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) []VolumeAttachmentType { return v.Items }).(VolumeAttachmentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSource struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpec `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

// VolumeAttachmentSourceInput is an input type that accepts VolumeAttachmentSourceArgs and VolumeAttachmentSourceOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourceInput` via:
//
//          VolumeAttachmentSourceArgs{...}
type VolumeAttachmentSourceInput interface {
	pulumi.Input

	ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput
	ToVolumeAttachmentSourceOutputWithContext(context.Context) VolumeAttachmentSourceOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPtrInput `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return i.ToVolumeAttachmentSourceOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput)
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return i.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput).ToVolumeAttachmentSourcePtrOutputWithContext(ctx)
}

// VolumeAttachmentSourcePtrInput is an input type that accepts VolumeAttachmentSourceArgs, VolumeAttachmentSourcePtr and VolumeAttachmentSourcePtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourcePtrInput` via:
//
//          VolumeAttachmentSourceArgs{...}
//
//  or:
//
//          nil
type VolumeAttachmentSourcePtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput
	ToVolumeAttachmentSourcePtrOutputWithContext(context.Context) VolumeAttachmentSourcePtrOutput
}

type volumeAttachmentSourcePtrType VolumeAttachmentSourceArgs

func VolumeAttachmentSourcePtr(v *VolumeAttachmentSourceArgs) VolumeAttachmentSourcePtrInput {
	return (*volumeAttachmentSourcePtrType)(v)
}

func (*volumeAttachmentSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSource)(nil)).Elem()
}

func (i *volumeAttachmentSourcePtrType) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return i.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSourcePtrType) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return o.ToVolumeAttachmentSourcePtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSource) *VolumeAttachmentSource {
		return &v
	}).(VolumeAttachmentSourcePtrOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourceOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *corev1.PersistentVolumeSpec { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourceOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentSourcePtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourcePtrOutput) ToVolumeAttachmentSourcePtrOutput() VolumeAttachmentSourcePtrOutput {
	return o
}

func (o VolumeAttachmentSourcePtrOutput) ToVolumeAttachmentSourcePtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePtrOutput {
	return o
}

func (o VolumeAttachmentSourcePtrOutput) Elem() VolumeAttachmentSourceOutput {
	return o.ApplyT(func(v *VolumeAttachmentSource) VolumeAttachmentSource {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSource
		return ret
	}).(VolumeAttachmentSourceOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePtrOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSource) *corev1.PersistentVolumeSpec {
		if v == nil {
			return nil
		}
		return v.InlineVolumeSpec
	}).(corev1.PersistentVolumeSpecPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourcePtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSource) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpec struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher string `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName string `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSource `pulumi:"source"`
}

// VolumeAttachmentSpecInput is an input type that accepts VolumeAttachmentSpecArgs and VolumeAttachmentSpecOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecInput` via:
//
//          VolumeAttachmentSpecArgs{...}
type VolumeAttachmentSpecInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput
	ToVolumeAttachmentSpecOutputWithContext(context.Context) VolumeAttachmentSpecOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecArgs struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringInput `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSourceInput `pulumi:"source"`
}

func (VolumeAttachmentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return i.ToVolumeAttachmentSpecOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput)
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return i.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput).ToVolumeAttachmentSpecPtrOutputWithContext(ctx)
}

// VolumeAttachmentSpecPtrInput is an input type that accepts VolumeAttachmentSpecArgs, VolumeAttachmentSpecPtr and VolumeAttachmentSpecPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecPtrInput` via:
//
//          VolumeAttachmentSpecArgs{...}
//
//  or:
//
//          nil
type VolumeAttachmentSpecPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput
	ToVolumeAttachmentSpecPtrOutputWithContext(context.Context) VolumeAttachmentSpecPtrOutput
}

type volumeAttachmentSpecPtrType VolumeAttachmentSpecArgs

func VolumeAttachmentSpecPtr(v *VolumeAttachmentSpecArgs) VolumeAttachmentSpecPtrInput {
	return (*volumeAttachmentSpecPtrType)(v)
}

func (*volumeAttachmentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpec)(nil)).Elem()
}

func (i *volumeAttachmentSpecPtrType) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return i.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSpecPtrType) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return o.ToVolumeAttachmentSpecPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSpec) *VolumeAttachmentSpec {
		return &v
	}).(VolumeAttachmentSpecPtrOutput)
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecOutput) Attacher() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.Attacher }).(pulumi.StringOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.NodeName }).(pulumi.StringOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecOutput) Source() VolumeAttachmentSourceOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) VolumeAttachmentSource { return v.Source }).(VolumeAttachmentSourceOutput)
}

type VolumeAttachmentSpecPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecPtrOutput) ToVolumeAttachmentSpecPtrOutput() VolumeAttachmentSpecPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPtrOutput) ToVolumeAttachmentSpecPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPtrOutput) Elem() VolumeAttachmentSpecOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpec) VolumeAttachmentSpec {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSpec
		return ret
	}).(VolumeAttachmentSpecOutput)
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPtrOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Attacher
	}).(pulumi.StringPtrOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpec) *string {
		if v == nil {
			return nil
		}
		return &v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecPtrOutput) Source() VolumeAttachmentSourcePtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpec) *VolumeAttachmentSource {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(VolumeAttachmentSourcePtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatus struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeError `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached bool `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeError `pulumi:"detachError"`
}

// VolumeAttachmentStatusInput is an input type that accepts VolumeAttachmentStatusArgs and VolumeAttachmentStatusOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusInput` via:
//
//          VolumeAttachmentStatusArgs{...}
type VolumeAttachmentStatusInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput
	ToVolumeAttachmentStatusOutputWithContext(context.Context) VolumeAttachmentStatusOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusArgs struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPtrInput `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolInput `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return i.ToVolumeAttachmentStatusOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput)
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput).ToVolumeAttachmentStatusPtrOutputWithContext(ctx)
}

// VolumeAttachmentStatusPtrInput is an input type that accepts VolumeAttachmentStatusArgs, VolumeAttachmentStatusPtr and VolumeAttachmentStatusPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPtrInput` via:
//
//          VolumeAttachmentStatusArgs{...}
//
//  or:
//
//          nil
type VolumeAttachmentStatusPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput
	ToVolumeAttachmentStatusPtrOutputWithContext(context.Context) VolumeAttachmentStatusPtrOutput
}

type volumeAttachmentStatusPtrType VolumeAttachmentStatusArgs

func VolumeAttachmentStatusPtr(v *VolumeAttachmentStatusArgs) VolumeAttachmentStatusPtrInput {
	return (*volumeAttachmentStatusPtrType)(v)
}

func (*volumeAttachmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentStatus) *VolumeAttachmentStatus {
		return &v
	}).(VolumeAttachmentStatusPtrOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.AttachError }).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) bool { return v.Attached }).(pulumi.BoolOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.DetachError }).(VolumeErrorPtrOutput)
}

type VolumeAttachmentStatusPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) Elem() VolumeAttachmentStatusOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) VolumeAttachmentStatus {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentStatus
		return ret
	}).(VolumeAttachmentStatusOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.AttachError
	}).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Attached
	}).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AttachmentMetadata
	}).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.DetachError
	}).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeError struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// Time the error was encountered.
	Time *string `pulumi:"time"`
}

// VolumeErrorInput is an input type that accepts VolumeErrorArgs and VolumeErrorOutput values.
// You can construct a concrete instance of `VolumeErrorInput` via:
//
//          VolumeErrorArgs{...}
type VolumeErrorInput interface {
	pulumi.Input

	ToVolumeErrorOutput() VolumeErrorOutput
	ToVolumeErrorOutputWithContext(context.Context) VolumeErrorOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorArgs struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (i VolumeErrorArgs) ToVolumeErrorOutput() VolumeErrorOutput {
	return i.ToVolumeErrorOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput)
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput).ToVolumeErrorPtrOutputWithContext(ctx)
}

// VolumeErrorPtrInput is an input type that accepts VolumeErrorArgs, VolumeErrorPtr and VolumeErrorPtrOutput values.
// You can construct a concrete instance of `VolumeErrorPtrInput` via:
//
//          VolumeErrorArgs{...}
//
//  or:
//
//          nil
type VolumeErrorPtrInput interface {
	pulumi.Input

	ToVolumeErrorPtrOutput() VolumeErrorPtrOutput
	ToVolumeErrorPtrOutputWithContext(context.Context) VolumeErrorPtrOutput
}

type volumeErrorPtrType VolumeErrorArgs

func VolumeErrorPtr(v *VolumeErrorArgs) VolumeErrorPtrInput {
	return (*volumeErrorPtrType)(v)
}

func (*volumeErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorOutput struct{ *pulumi.OutputState }

func (VolumeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (o VolumeErrorOutput) ToVolumeErrorOutput() VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeError) *VolumeError {
		return &v
	}).(VolumeErrorPtrOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPtrOutput struct{ *pulumi.OutputState }

func (VolumeErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) Elem() VolumeErrorOutput {
	return o.ApplyT(func(v *VolumeError) VolumeError {
		if v != nil {
			return *v
		}
		var ret VolumeError
		return ret
	}).(VolumeErrorOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityTypeInput)(nil)).Elem(), CSIStorageCapacityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityTypeArrayInput)(nil)).Elem(), CSIStorageCapacityTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CSIStorageCapacityListTypeInput)(nil)).Elem(), CSIStorageCapacityListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeInput)(nil)).Elem(), VolumeAttachmentTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeArrayInput)(nil)).Elem(), VolumeAttachmentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentListTypeInput)(nil)).Elem(), VolumeAttachmentListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourceInput)(nil)).Elem(), VolumeAttachmentSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourcePtrInput)(nil)).Elem(), VolumeAttachmentSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecInput)(nil)).Elem(), VolumeAttachmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecPtrInput)(nil)).Elem(), VolumeAttachmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPtrInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPtrInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterOutputType(CSIStorageCapacityTypeOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityTypeArrayOutput{})
	pulumi.RegisterOutputType(CSIStorageCapacityListTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentListTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourceOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeErrorOutput{})
	pulumi.RegisterOutputType(VolumeErrorPtrOutput{})
}
