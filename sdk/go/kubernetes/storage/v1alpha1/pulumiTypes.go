// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpec `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatus `pulumi:"status"`
}

// VolumeAttachmentTypeInput is an input type that accepts VolumeAttachmentTypeArgs and VolumeAttachmentTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeInput` via:
//
//	VolumeAttachmentTypeArgs{...}
type VolumeAttachmentTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput
	ToVolumeAttachmentTypeOutputWithContext(context.Context) VolumeAttachmentTypeOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecInput `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPtrInput `pulumi:"status"`
}

func (VolumeAttachmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return i.ToVolumeAttachmentTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArgs) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentTypeArrayInput is an input type that accepts VolumeAttachmentTypeArray and VolumeAttachmentTypeArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentTypeArrayInput` via:
//
//	VolumeAttachmentTypeArray{ VolumeAttachmentTypeArgs{...} }
type VolumeAttachmentTypeArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput
	ToVolumeAttachmentTypeArrayOutputWithContext(context.Context) VolumeAttachmentTypeArrayOutput
}

type VolumeAttachmentTypeArray []VolumeAttachmentTypeInput

func (VolumeAttachmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return i.ToVolumeAttachmentTypeArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentTypeArray) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentTypeArrayOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutput() VolumeAttachmentTypeOutput {
	return o
}

func (o VolumeAttachmentTypeOutput) ToVolumeAttachmentTypeOutputWithContext(ctx context.Context) VolumeAttachmentTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentTypeOutput) Spec() VolumeAttachmentSpecOutput {
	return o.ApplyT(func(v VolumeAttachmentType) VolumeAttachmentSpec { return v.Spec }).(VolumeAttachmentSpecOutput)
}

// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentTypeOutput) Status() VolumeAttachmentStatusPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentType) *VolumeAttachmentStatus { return v.Status }).(VolumeAttachmentStatusPtrOutput)
}

type VolumeAttachmentTypeArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachmentType)(nil)).Elem()
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutput() VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) ToVolumeAttachmentTypeArrayOutputWithContext(ctx context.Context) VolumeAttachmentTypeArrayOutput {
	return o
}

func (o VolumeAttachmentTypeArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachmentType {
		return vs[0].([]VolumeAttachmentType)[vs[1].(int)]
	}).(VolumeAttachmentTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items []VolumeAttachmentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// VolumeAttachmentListTypeInput is an input type that accepts VolumeAttachmentListTypeArgs and VolumeAttachmentListTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentListTypeInput` via:
//
//	VolumeAttachmentListTypeArgs{...}
type VolumeAttachmentListTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput
	ToVolumeAttachmentListTypeOutputWithContext(context.Context) VolumeAttachmentListTypeOutput
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of VolumeAttachments
	Items VolumeAttachmentTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VolumeAttachmentListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return i.ToVolumeAttachmentListTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentListTypeArgs) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentListTypeOutput)
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type VolumeAttachmentListTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentListType)(nil)).Elem()
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutput() VolumeAttachmentListTypeOutput {
	return o
}

func (o VolumeAttachmentListTypeOutput) ToVolumeAttachmentListTypeOutputWithContext(ctx context.Context) VolumeAttachmentListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of VolumeAttachments
func (o VolumeAttachmentListTypeOutput) Items() VolumeAttachmentTypeArrayOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) []VolumeAttachmentType { return v.Items }).(VolumeAttachmentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec *VolumeAttachmentSpecPatch `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status *VolumeAttachmentStatusPatch `pulumi:"status"`
}

// VolumeAttachmentPatchTypeInput is an input type that accepts VolumeAttachmentPatchTypeArgs and VolumeAttachmentPatchTypeOutput values.
// You can construct a concrete instance of `VolumeAttachmentPatchTypeInput` via:
//
//	VolumeAttachmentPatchTypeArgs{...}
type VolumeAttachmentPatchTypeInput interface {
	pulumi.Input

	ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput
	ToVolumeAttachmentPatchTypeOutputWithContext(context.Context) VolumeAttachmentPatchTypeOutput
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
	Spec VolumeAttachmentSpecPatchPtrInput `pulumi:"spec"`
	// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
	Status VolumeAttachmentStatusPatchPtrInput `pulumi:"status"`
}

func (VolumeAttachmentPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentPatchType)(nil)).Elem()
}

func (i VolumeAttachmentPatchTypeArgs) ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput {
	return i.ToVolumeAttachmentPatchTypeOutputWithContext(context.Background())
}

func (i VolumeAttachmentPatchTypeArgs) ToVolumeAttachmentPatchTypeOutputWithContext(ctx context.Context) VolumeAttachmentPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentPatchTypeOutput)
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type VolumeAttachmentPatchTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentPatchType)(nil)).Elem()
}

func (o VolumeAttachmentPatchTypeOutput) ToVolumeAttachmentPatchTypeOutput() VolumeAttachmentPatchTypeOutput {
	return o
}

func (o VolumeAttachmentPatchTypeOutput) ToVolumeAttachmentPatchTypeOutputWithContext(ctx context.Context) VolumeAttachmentPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttachmentPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttachmentPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttachmentPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (o VolumeAttachmentPatchTypeOutput) Spec() VolumeAttachmentSpecPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *VolumeAttachmentSpecPatch { return v.Spec }).(VolumeAttachmentSpecPatchPtrOutput)
}

// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (o VolumeAttachmentPatchTypeOutput) Status() VolumeAttachmentStatusPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentPatchType) *VolumeAttachmentStatusPatch { return v.Status }).(VolumeAttachmentStatusPatchPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSource struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpec `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

// VolumeAttachmentSourceInput is an input type that accepts VolumeAttachmentSourceArgs and VolumeAttachmentSourceOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourceInput` via:
//
//	VolumeAttachmentSourceArgs{...}
type VolumeAttachmentSourceInput interface {
	pulumi.Input

	ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput
	ToVolumeAttachmentSourceOutputWithContext(context.Context) VolumeAttachmentSourceOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPtrInput `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return i.ToVolumeAttachmentSourceOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourceArgs) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourceOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourceOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSource)(nil)).Elem()
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutput() VolumeAttachmentSourceOutput {
	return o
}

func (o VolumeAttachmentSourceOutput) ToVolumeAttachmentSourceOutputWithContext(ctx context.Context) VolumeAttachmentSourceOutput {
	return o
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourceOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *corev1.PersistentVolumeSpec { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourceOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSource) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatch struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec *corev1.PersistentVolumeSpecPatch `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName *string `pulumi:"persistentVolumeName"`
}

// VolumeAttachmentSourcePatchInput is an input type that accepts VolumeAttachmentSourcePatchArgs and VolumeAttachmentSourcePatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourcePatchInput` via:
//
//	VolumeAttachmentSourcePatchArgs{...}
type VolumeAttachmentSourcePatchInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput
	ToVolumeAttachmentSourcePatchOutputWithContext(context.Context) VolumeAttachmentSourcePatchOutput
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatchArgs struct {
	// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
	InlineVolumeSpec corev1.PersistentVolumeSpecPatchPtrInput `pulumi:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName pulumi.StringPtrInput `pulumi:"persistentVolumeName"`
}

func (VolumeAttachmentSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput {
	return i.ToVolumeAttachmentSourcePatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchOutput)
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return i.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSourcePatchArgs) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchOutput).ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentSourcePatchPtrInput is an input type that accepts VolumeAttachmentSourcePatchArgs, VolumeAttachmentSourcePatchPtr and VolumeAttachmentSourcePatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSourcePatchPtrInput` via:
//
//	        VolumeAttachmentSourcePatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentSourcePatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput
	ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Context) VolumeAttachmentSourcePatchPtrOutput
}

type volumeAttachmentSourcePatchPtrType VolumeAttachmentSourcePatchArgs

func VolumeAttachmentSourcePatchPtr(v *VolumeAttachmentSourcePatchArgs) VolumeAttachmentSourcePatchPtrInput {
	return (*volumeAttachmentSourcePatchPtrType)(v)
}

func (*volumeAttachmentSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (i *volumeAttachmentSourcePatchPtrType) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return i.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSourcePatchPtrType) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSourcePatchPtrOutput)
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type VolumeAttachmentSourcePatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchOutput() VolumeAttachmentSourcePatchOutput {
	return o
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchOutput {
	return o
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return o.ToVolumeAttachmentSourcePatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSourcePatchOutput) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSourcePatch) *VolumeAttachmentSourcePatch {
		return &v
	}).(VolumeAttachmentSourcePatchPtrOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePatchOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSourcePatch) *corev1.PersistentVolumeSpecPatch { return v.InlineVolumeSpec }).(corev1.PersistentVolumeSpecPatchPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourcePatchOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSourcePatch) *string { return v.PersistentVolumeName }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSourcePatch)(nil)).Elem()
}

func (o VolumeAttachmentSourcePatchPtrOutput) ToVolumeAttachmentSourcePatchPtrOutput() VolumeAttachmentSourcePatchPtrOutput {
	return o
}

func (o VolumeAttachmentSourcePatchPtrOutput) ToVolumeAttachmentSourcePatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSourcePatchPtrOutput {
	return o
}

func (o VolumeAttachmentSourcePatchPtrOutput) Elem() VolumeAttachmentSourcePatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) VolumeAttachmentSourcePatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSourcePatch
		return ret
	}).(VolumeAttachmentSourcePatchOutput)
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
func (o VolumeAttachmentSourcePatchPtrOutput) InlineVolumeSpec() corev1.PersistentVolumeSpecPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) *corev1.PersistentVolumeSpecPatch {
		if v == nil {
			return nil
		}
		return v.InlineVolumeSpec
	}).(corev1.PersistentVolumeSpecPatchPtrOutput)
}

// Name of the persistent volume to attach.
func (o VolumeAttachmentSourcePatchPtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpec struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher string `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName string `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSource `pulumi:"source"`
}

// VolumeAttachmentSpecInput is an input type that accepts VolumeAttachmentSpecArgs and VolumeAttachmentSpecOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecInput` via:
//
//	VolumeAttachmentSpecArgs{...}
type VolumeAttachmentSpecInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput
	ToVolumeAttachmentSpecOutputWithContext(context.Context) VolumeAttachmentSpecOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecArgs struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringInput `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSourceInput `pulumi:"source"`
}

func (VolumeAttachmentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return i.ToVolumeAttachmentSpecOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecArgs) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpec)(nil)).Elem()
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutput() VolumeAttachmentSpecOutput {
	return o
}

func (o VolumeAttachmentSpecOutput) ToVolumeAttachmentSpecOutputWithContext(ctx context.Context) VolumeAttachmentSpecOutput {
	return o
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecOutput) Attacher() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.Attacher }).(pulumi.StringOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) string { return v.NodeName }).(pulumi.StringOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecOutput) Source() VolumeAttachmentSourceOutput {
	return o.ApplyT(func(v VolumeAttachmentSpec) VolumeAttachmentSource { return v.Source }).(VolumeAttachmentSourceOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatch struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher *string `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName *string `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source *VolumeAttachmentSourcePatch `pulumi:"source"`
}

// VolumeAttachmentSpecPatchInput is an input type that accepts VolumeAttachmentSpecPatchArgs and VolumeAttachmentSpecPatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecPatchInput` via:
//
//	VolumeAttachmentSpecPatchArgs{...}
type VolumeAttachmentSpecPatchInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput
	ToVolumeAttachmentSpecPatchOutputWithContext(context.Context) VolumeAttachmentSpecPatchOutput
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatchArgs struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher pulumi.StringPtrInput `pulumi:"attacher"`
	// The node that the volume should be attached to.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Source represents the volume that should be attached.
	Source VolumeAttachmentSourcePatchPtrInput `pulumi:"source"`
}

func (VolumeAttachmentSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput {
	return i.ToVolumeAttachmentSpecPatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchOutput)
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return i.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentSpecPatchArgs) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchOutput).ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentSpecPatchPtrInput is an input type that accepts VolumeAttachmentSpecPatchArgs, VolumeAttachmentSpecPatchPtr and VolumeAttachmentSpecPatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentSpecPatchPtrInput` via:
//
//	        VolumeAttachmentSpecPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentSpecPatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput
	ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Context) VolumeAttachmentSpecPatchPtrOutput
}

type volumeAttachmentSpecPatchPtrType VolumeAttachmentSpecPatchArgs

func VolumeAttachmentSpecPatchPtr(v *VolumeAttachmentSpecPatchArgs) VolumeAttachmentSpecPatchPtrInput {
	return (*volumeAttachmentSpecPatchPtrType)(v)
}

func (*volumeAttachmentSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (i *volumeAttachmentSpecPatchPtrType) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return i.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentSpecPatchPtrType) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentSpecPatchPtrOutput)
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type VolumeAttachmentSpecPatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchOutput() VolumeAttachmentSpecPatchOutput {
	return o
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchOutput {
	return o
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return o.ToVolumeAttachmentSpecPatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentSpecPatchOutput) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentSpecPatch) *VolumeAttachmentSpecPatch {
		return &v
	}).(VolumeAttachmentSpecPatchPtrOutput)
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPatchOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *string { return v.Attacher }).(pulumi.StringPtrOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecPatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecPatchOutput) Source() VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentSpecPatch) *VolumeAttachmentSourcePatch { return v.Source }).(VolumeAttachmentSourcePatchPtrOutput)
}

type VolumeAttachmentSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentSpecPatch)(nil)).Elem()
}

func (o VolumeAttachmentSpecPatchPtrOutput) ToVolumeAttachmentSpecPatchPtrOutput() VolumeAttachmentSpecPatchPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPatchPtrOutput) ToVolumeAttachmentSpecPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentSpecPatchPtrOutput {
	return o
}

func (o VolumeAttachmentSpecPatchPtrOutput) Elem() VolumeAttachmentSpecPatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) VolumeAttachmentSpecPatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentSpecPatch
		return ret
	}).(VolumeAttachmentSpecPatchOutput)
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (o VolumeAttachmentSpecPatchPtrOutput) Attacher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Attacher
	}).(pulumi.StringPtrOutput)
}

// The node that the volume should be attached to.
func (o VolumeAttachmentSpecPatchPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Source represents the volume that should be attached.
func (o VolumeAttachmentSpecPatchPtrOutput) Source() VolumeAttachmentSourcePatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentSpecPatch) *VolumeAttachmentSourcePatch {
		if v == nil {
			return nil
		}
		return v.Source
	}).(VolumeAttachmentSourcePatchPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatus struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeError `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached bool `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeError `pulumi:"detachError"`
}

// VolumeAttachmentStatusInput is an input type that accepts VolumeAttachmentStatusArgs and VolumeAttachmentStatusOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusInput` via:
//
//	VolumeAttachmentStatusArgs{...}
type VolumeAttachmentStatusInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput
	ToVolumeAttachmentStatusOutputWithContext(context.Context) VolumeAttachmentStatusOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusArgs struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPtrInput `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolInput `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return i.ToVolumeAttachmentStatusOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput)
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusArgs) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusOutput).ToVolumeAttachmentStatusPtrOutputWithContext(ctx)
}

// VolumeAttachmentStatusPtrInput is an input type that accepts VolumeAttachmentStatusArgs, VolumeAttachmentStatusPtr and VolumeAttachmentStatusPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPtrInput` via:
//
//	        VolumeAttachmentStatusArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentStatusPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput
	ToVolumeAttachmentStatusPtrOutputWithContext(context.Context) VolumeAttachmentStatusPtrOutput
}

type volumeAttachmentStatusPtrType VolumeAttachmentStatusArgs

func VolumeAttachmentStatusPtr(v *VolumeAttachmentStatusArgs) VolumeAttachmentStatusPtrInput {
	return (*volumeAttachmentStatusPtrType)(v)
}

func (*volumeAttachmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return i.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPtrType) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutput() VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusOutputWithContext(ctx context.Context) VolumeAttachmentStatusOutput {
	return o
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o.ToVolumeAttachmentStatusPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentStatus) *VolumeAttachmentStatus {
		return &v
	}).(VolumeAttachmentStatusPtrOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.AttachError }).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) bool { return v.Attached }).(pulumi.BoolOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatus) *VolumeError { return v.DetachError }).(VolumeErrorPtrOutput)
}

type VolumeAttachmentStatusPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatus)(nil)).Elem()
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutput() VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) ToVolumeAttachmentStatusPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPtrOutput) Elem() VolumeAttachmentStatusOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) VolumeAttachmentStatus {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentStatus
		return ret
	}).(VolumeAttachmentStatusOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.AttachError
	}).(VolumeErrorPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Attached
	}).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AttachmentMetadata
	}).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPtrOutput) DetachError() VolumeErrorPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatus) *VolumeError {
		if v == nil {
			return nil
		}
		return v.DetachError
	}).(VolumeErrorPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatch struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError *VolumeErrorPatch `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached *bool `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata map[string]string `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError *VolumeErrorPatch `pulumi:"detachError"`
}

// VolumeAttachmentStatusPatchInput is an input type that accepts VolumeAttachmentStatusPatchArgs and VolumeAttachmentStatusPatchOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPatchInput` via:
//
//	VolumeAttachmentStatusPatchArgs{...}
type VolumeAttachmentStatusPatchInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput
	ToVolumeAttachmentStatusPatchOutputWithContext(context.Context) VolumeAttachmentStatusPatchOutput
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatchArgs struct {
	// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachError VolumeErrorPatchPtrInput `pulumi:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata pulumi.StringMapInput `pulumi:"attachmentMetadata"`
	// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
	DetachError VolumeErrorPatchPtrInput `pulumi:"detachError"`
}

func (VolumeAttachmentStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput {
	return i.ToVolumeAttachmentStatusPatchOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchOutput)
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return i.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (i VolumeAttachmentStatusPatchArgs) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchOutput).ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx)
}

// VolumeAttachmentStatusPatchPtrInput is an input type that accepts VolumeAttachmentStatusPatchArgs, VolumeAttachmentStatusPatchPtr and VolumeAttachmentStatusPatchPtrOutput values.
// You can construct a concrete instance of `VolumeAttachmentStatusPatchPtrInput` via:
//
//	        VolumeAttachmentStatusPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeAttachmentStatusPatchPtrInput interface {
	pulumi.Input

	ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput
	ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Context) VolumeAttachmentStatusPatchPtrOutput
}

type volumeAttachmentStatusPatchPtrType VolumeAttachmentStatusPatchArgs

func VolumeAttachmentStatusPatchPtr(v *VolumeAttachmentStatusPatchArgs) VolumeAttachmentStatusPatchPtrInput {
	return (*volumeAttachmentStatusPatchPtrType)(v)
}

func (*volumeAttachmentStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (i *volumeAttachmentStatusPatchPtrType) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return i.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (i *volumeAttachmentStatusPatchPtrType) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentStatusPatchPtrOutput)
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type VolumeAttachmentStatusPatchOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchOutput() VolumeAttachmentStatusPatchOutput {
	return o
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchOutput {
	return o
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return o.ToVolumeAttachmentStatusPatchPtrOutputWithContext(context.Background())
}

func (o VolumeAttachmentStatusPatchOutput) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeAttachmentStatusPatch) *VolumeAttachmentStatusPatch {
		return &v
	}).(VolumeAttachmentStatusPatchPtrOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) AttachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *VolumeErrorPatch { return v.AttachError }).(VolumeErrorPatchPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) map[string]string { return v.AttachmentMetadata }).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchOutput) DetachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttachmentStatusPatch) *VolumeErrorPatch { return v.DetachError }).(VolumeErrorPatchPtrOutput)
}

type VolumeAttachmentStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachmentStatusPatch)(nil)).Elem()
}

func (o VolumeAttachmentStatusPatchPtrOutput) ToVolumeAttachmentStatusPatchPtrOutput() VolumeAttachmentStatusPatchPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPatchPtrOutput) ToVolumeAttachmentStatusPatchPtrOutputWithContext(ctx context.Context) VolumeAttachmentStatusPatchPtrOutput {
	return o
}

func (o VolumeAttachmentStatusPatchPtrOutput) Elem() VolumeAttachmentStatusPatchOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) VolumeAttachmentStatusPatch {
		if v != nil {
			return *v
		}
		var ret VolumeAttachmentStatusPatch
		return ret
	}).(VolumeAttachmentStatusPatchOutput)
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) AttachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *VolumeErrorPatch {
		if v == nil {
			return nil
		}
		return v.AttachError
	}).(VolumeErrorPatchPtrOutput)
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Attached
	}).(pulumi.BoolPtrOutput)
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) AttachmentMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.AttachmentMetadata
	}).(pulumi.StringMapOutput)
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (o VolumeAttachmentStatusPatchPtrOutput) DetachError() VolumeErrorPatchPtrOutput {
	return o.ApplyT(func(v *VolumeAttachmentStatusPatch) *VolumeErrorPatch {
		if v == nil {
			return nil
		}
		return v.DetachError
	}).(VolumeErrorPatchPtrOutput)
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters map[string]string `pulumi:"parameters"`
}

// VolumeAttributesClassTypeInput is an input type that accepts VolumeAttributesClassTypeArgs and VolumeAttributesClassTypeOutput values.
// You can construct a concrete instance of `VolumeAttributesClassTypeInput` via:
//
//	VolumeAttributesClassTypeArgs{...}
type VolumeAttributesClassTypeInput interface {
	pulumi.Input

	ToVolumeAttributesClassTypeOutput() VolumeAttributesClassTypeOutput
	ToVolumeAttributesClassTypeOutputWithContext(context.Context) VolumeAttributesClassTypeOutput
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName pulumi.StringInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (VolumeAttributesClassTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassType)(nil)).Elem()
}

func (i VolumeAttributesClassTypeArgs) ToVolumeAttributesClassTypeOutput() VolumeAttributesClassTypeOutput {
	return i.ToVolumeAttributesClassTypeOutputWithContext(context.Background())
}

func (i VolumeAttributesClassTypeArgs) ToVolumeAttributesClassTypeOutputWithContext(ctx context.Context) VolumeAttributesClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassTypeOutput)
}

// VolumeAttributesClassTypeArrayInput is an input type that accepts VolumeAttributesClassTypeArray and VolumeAttributesClassTypeArrayOutput values.
// You can construct a concrete instance of `VolumeAttributesClassTypeArrayInput` via:
//
//	VolumeAttributesClassTypeArray{ VolumeAttributesClassTypeArgs{...} }
type VolumeAttributesClassTypeArrayInput interface {
	pulumi.Input

	ToVolumeAttributesClassTypeArrayOutput() VolumeAttributesClassTypeArrayOutput
	ToVolumeAttributesClassTypeArrayOutputWithContext(context.Context) VolumeAttributesClassTypeArrayOutput
}

type VolumeAttributesClassTypeArray []VolumeAttributesClassTypeInput

func (VolumeAttributesClassTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttributesClassType)(nil)).Elem()
}

func (i VolumeAttributesClassTypeArray) ToVolumeAttributesClassTypeArrayOutput() VolumeAttributesClassTypeArrayOutput {
	return i.ToVolumeAttributesClassTypeArrayOutputWithContext(context.Background())
}

func (i VolumeAttributesClassTypeArray) ToVolumeAttributesClassTypeArrayOutputWithContext(ctx context.Context) VolumeAttributesClassTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassTypeArrayOutput)
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassType)(nil)).Elem()
}

func (o VolumeAttributesClassTypeOutput) ToVolumeAttributesClassTypeOutput() VolumeAttributesClassTypeOutput {
	return o
}

func (o VolumeAttributesClassTypeOutput) ToVolumeAttributesClassTypeOutputWithContext(ctx context.Context) VolumeAttributesClassTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttributesClassTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Name of the CSI driver This field is immutable.
func (o VolumeAttributesClassTypeOutput) DriverName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeAttributesClassType) string { return v.DriverName }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttributesClassTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttributesClassTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
//
// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
func (o VolumeAttributesClassTypeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttributesClassType) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type VolumeAttributesClassTypeArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttributesClassType)(nil)).Elem()
}

func (o VolumeAttributesClassTypeArrayOutput) ToVolumeAttributesClassTypeArrayOutput() VolumeAttributesClassTypeArrayOutput {
	return o
}

func (o VolumeAttributesClassTypeArrayOutput) ToVolumeAttributesClassTypeArrayOutputWithContext(ctx context.Context) VolumeAttributesClassTypeArrayOutput {
	return o
}

func (o VolumeAttributesClassTypeArrayOutput) Index(i pulumi.IntInput) VolumeAttributesClassTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttributesClassType {
		return vs[0].([]VolumeAttributesClassType)[vs[1].(int)]
	}).(VolumeAttributesClassTypeOutput)
}

// VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
type VolumeAttributesClassListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of VolumeAttributesClass objects.
	Items []VolumeAttributesClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// VolumeAttributesClassListTypeInput is an input type that accepts VolumeAttributesClassListTypeArgs and VolumeAttributesClassListTypeOutput values.
// You can construct a concrete instance of `VolumeAttributesClassListTypeInput` via:
//
//	VolumeAttributesClassListTypeArgs{...}
type VolumeAttributesClassListTypeInput interface {
	pulumi.Input

	ToVolumeAttributesClassListTypeOutput() VolumeAttributesClassListTypeOutput
	ToVolumeAttributesClassListTypeOutputWithContext(context.Context) VolumeAttributesClassListTypeOutput
}

// VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
type VolumeAttributesClassListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of VolumeAttributesClass objects.
	Items VolumeAttributesClassTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VolumeAttributesClassListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassListType)(nil)).Elem()
}

func (i VolumeAttributesClassListTypeArgs) ToVolumeAttributesClassListTypeOutput() VolumeAttributesClassListTypeOutput {
	return i.ToVolumeAttributesClassListTypeOutputWithContext(context.Background())
}

func (i VolumeAttributesClassListTypeArgs) ToVolumeAttributesClassListTypeOutputWithContext(ctx context.Context) VolumeAttributesClassListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassListTypeOutput)
}

// VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
type VolumeAttributesClassListTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassListType)(nil)).Elem()
}

func (o VolumeAttributesClassListTypeOutput) ToVolumeAttributesClassListTypeOutput() VolumeAttributesClassListTypeOutput {
	return o
}

func (o VolumeAttributesClassListTypeOutput) ToVolumeAttributesClassListTypeOutputWithContext(ctx context.Context) VolumeAttributesClassListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttributesClassListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of VolumeAttributesClass objects.
func (o VolumeAttributesClassListTypeOutput) Items() VolumeAttributesClassTypeArrayOutput {
	return o.ApplyT(func(v VolumeAttributesClassListType) []VolumeAttributesClassType { return v.Items }).(VolumeAttributesClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttributesClassListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttributesClassListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName *string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters map[string]string `pulumi:"parameters"`
}

// VolumeAttributesClassPatchTypeInput is an input type that accepts VolumeAttributesClassPatchTypeArgs and VolumeAttributesClassPatchTypeOutput values.
// You can construct a concrete instance of `VolumeAttributesClassPatchTypeInput` via:
//
//	VolumeAttributesClassPatchTypeArgs{...}
type VolumeAttributesClassPatchTypeInput interface {
	pulumi.Input

	ToVolumeAttributesClassPatchTypeOutput() VolumeAttributesClassPatchTypeOutput
	ToVolumeAttributesClassPatchTypeOutputWithContext(context.Context) VolumeAttributesClassPatchTypeOutput
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Name of the CSI driver This field is immutable.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
	//
	// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (VolumeAttributesClassPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassPatchType)(nil)).Elem()
}

func (i VolumeAttributesClassPatchTypeArgs) ToVolumeAttributesClassPatchTypeOutput() VolumeAttributesClassPatchTypeOutput {
	return i.ToVolumeAttributesClassPatchTypeOutputWithContext(context.Background())
}

func (i VolumeAttributesClassPatchTypeArgs) ToVolumeAttributesClassPatchTypeOutputWithContext(ctx context.Context) VolumeAttributesClassPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttributesClassPatchTypeOutput)
}

// VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
type VolumeAttributesClassPatchTypeOutput struct{ *pulumi.OutputState }

func (VolumeAttributesClassPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttributesClassPatchType)(nil)).Elem()
}

func (o VolumeAttributesClassPatchTypeOutput) ToVolumeAttributesClassPatchTypeOutput() VolumeAttributesClassPatchTypeOutput {
	return o
}

func (o VolumeAttributesClassPatchTypeOutput) ToVolumeAttributesClassPatchTypeOutputWithContext(ctx context.Context) VolumeAttributesClassPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VolumeAttributesClassPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Name of the CSI driver This field is immutable.
func (o VolumeAttributesClassPatchTypeOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassPatchType) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VolumeAttributesClassPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VolumeAttributesClassPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v VolumeAttributesClassPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
//
// This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
func (o VolumeAttributesClassPatchTypeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeAttributesClassPatchType) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeError struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// Time the error was encountered.
	Time *string `pulumi:"time"`
}

// VolumeErrorInput is an input type that accepts VolumeErrorArgs and VolumeErrorOutput values.
// You can construct a concrete instance of `VolumeErrorInput` via:
//
//	VolumeErrorArgs{...}
type VolumeErrorInput interface {
	pulumi.Input

	ToVolumeErrorOutput() VolumeErrorOutput
	ToVolumeErrorOutputWithContext(context.Context) VolumeErrorOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorArgs struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (i VolumeErrorArgs) ToVolumeErrorOutput() VolumeErrorOutput {
	return i.ToVolumeErrorOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput)
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i VolumeErrorArgs) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorOutput).ToVolumeErrorPtrOutputWithContext(ctx)
}

// VolumeErrorPtrInput is an input type that accepts VolumeErrorArgs, VolumeErrorPtr and VolumeErrorPtrOutput values.
// You can construct a concrete instance of `VolumeErrorPtrInput` via:
//
//	        VolumeErrorArgs{...}
//
//	or:
//
//	        nil
type VolumeErrorPtrInput interface {
	pulumi.Input

	ToVolumeErrorPtrOutput() VolumeErrorPtrOutput
	ToVolumeErrorPtrOutputWithContext(context.Context) VolumeErrorPtrOutput
}

type volumeErrorPtrType VolumeErrorArgs

func VolumeErrorPtr(v *VolumeErrorArgs) VolumeErrorPtrInput {
	return (*volumeErrorPtrType)(v)
}

func (*volumeErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return i.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPtrType) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorOutput struct{ *pulumi.OutputState }

func (VolumeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeError)(nil)).Elem()
}

func (o VolumeErrorOutput) ToVolumeErrorOutput() VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorOutputWithContext(ctx context.Context) VolumeErrorOutput {
	return o
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o.ToVolumeErrorPtrOutputWithContext(context.Background())
}

func (o VolumeErrorOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeError) *VolumeError {
		return &v
	}).(VolumeErrorPtrOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeError) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPtrOutput struct{ *pulumi.OutputState }

func (VolumeErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeError)(nil)).Elem()
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutput() VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) ToVolumeErrorPtrOutputWithContext(ctx context.Context) VolumeErrorPtrOutput {
	return o
}

func (o VolumeErrorPtrOutput) Elem() VolumeErrorOutput {
	return o.ApplyT(func(v *VolumeError) VolumeError {
		if v != nil {
			return *v
		}
		var ret VolumeError
		return ret
	}).(VolumeErrorOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeError) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatch struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message *string `pulumi:"message"`
	// Time the error was encountered.
	Time *string `pulumi:"time"`
}

// VolumeErrorPatchInput is an input type that accepts VolumeErrorPatchArgs and VolumeErrorPatchOutput values.
// You can construct a concrete instance of `VolumeErrorPatchInput` via:
//
//	VolumeErrorPatchArgs{...}
type VolumeErrorPatchInput interface {
	pulumi.Input

	ToVolumeErrorPatchOutput() VolumeErrorPatchOutput
	ToVolumeErrorPatchOutputWithContext(context.Context) VolumeErrorPatchOutput
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatchArgs struct {
	// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Time the error was encountered.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (VolumeErrorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeErrorPatch)(nil)).Elem()
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchOutput() VolumeErrorPatchOutput {
	return i.ToVolumeErrorPatchOutputWithContext(context.Background())
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchOutputWithContext(ctx context.Context) VolumeErrorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchOutput)
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return i.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (i VolumeErrorPatchArgs) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchOutput).ToVolumeErrorPatchPtrOutputWithContext(ctx)
}

// VolumeErrorPatchPtrInput is an input type that accepts VolumeErrorPatchArgs, VolumeErrorPatchPtr and VolumeErrorPatchPtrOutput values.
// You can construct a concrete instance of `VolumeErrorPatchPtrInput` via:
//
//	        VolumeErrorPatchArgs{...}
//
//	or:
//
//	        nil
type VolumeErrorPatchPtrInput interface {
	pulumi.Input

	ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput
	ToVolumeErrorPatchPtrOutputWithContext(context.Context) VolumeErrorPatchPtrOutput
}

type volumeErrorPatchPtrType VolumeErrorPatchArgs

func VolumeErrorPatchPtr(v *VolumeErrorPatchArgs) VolumeErrorPatchPtrInput {
	return (*volumeErrorPatchPtrType)(v)
}

func (*volumeErrorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeErrorPatch)(nil)).Elem()
}

func (i *volumeErrorPatchPtrType) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return i.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (i *volumeErrorPatchPtrType) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeErrorPatchPtrOutput)
}

// VolumeError captures an error encountered during a volume operation.
type VolumeErrorPatchOutput struct{ *pulumi.OutputState }

func (VolumeErrorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeErrorPatch)(nil)).Elem()
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchOutput() VolumeErrorPatchOutput {
	return o
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchOutputWithContext(ctx context.Context) VolumeErrorPatchOutput {
	return o
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return o.ToVolumeErrorPatchPtrOutputWithContext(context.Background())
}

func (o VolumeErrorPatchOutput) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeErrorPatch) *VolumeErrorPatch {
		return &v
	}).(VolumeErrorPatchPtrOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeErrorPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorPatchOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeErrorPatch) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type VolumeErrorPatchPtrOutput struct{ *pulumi.OutputState }

func (VolumeErrorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeErrorPatch)(nil)).Elem()
}

func (o VolumeErrorPatchPtrOutput) ToVolumeErrorPatchPtrOutput() VolumeErrorPatchPtrOutput {
	return o
}

func (o VolumeErrorPatchPtrOutput) ToVolumeErrorPatchPtrOutputWithContext(ctx context.Context) VolumeErrorPatchPtrOutput {
	return o
}

func (o VolumeErrorPatchPtrOutput) Elem() VolumeErrorPatchOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) VolumeErrorPatch {
		if v != nil {
			return *v
		}
		var ret VolumeErrorPatch
		return ret
	}).(VolumeErrorPatchOutput)
}

// String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
func (o VolumeErrorPatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Time the error was encountered.
func (o VolumeErrorPatchPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeErrorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeInput)(nil)).Elem(), VolumeAttachmentTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentTypeArrayInput)(nil)).Elem(), VolumeAttachmentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentListTypeInput)(nil)).Elem(), VolumeAttachmentListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentPatchTypeInput)(nil)).Elem(), VolumeAttachmentPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourceInput)(nil)).Elem(), VolumeAttachmentSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourcePatchInput)(nil)).Elem(), VolumeAttachmentSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSourcePatchPtrInput)(nil)).Elem(), VolumeAttachmentSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecInput)(nil)).Elem(), VolumeAttachmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecPatchInput)(nil)).Elem(), VolumeAttachmentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentSpecPatchPtrInput)(nil)).Elem(), VolumeAttachmentSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPtrInput)(nil)).Elem(), VolumeAttachmentStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPatchInput)(nil)).Elem(), VolumeAttachmentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentStatusPatchPtrInput)(nil)).Elem(), VolumeAttachmentStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassTypeInput)(nil)).Elem(), VolumeAttributesClassTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassTypeArrayInput)(nil)).Elem(), VolumeAttributesClassTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassListTypeInput)(nil)).Elem(), VolumeAttributesClassListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttributesClassPatchTypeInput)(nil)).Elem(), VolumeAttributesClassPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPtrInput)(nil)).Elem(), VolumeErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPatchInput)(nil)).Elem(), VolumeErrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeErrorPatchPtrInput)(nil)).Elem(), VolumeErrorPatchArgs{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentTypeArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentListTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentPatchTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourceOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPatchOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassTypeArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassListTypeOutput{})
	pulumi.RegisterOutputType(VolumeAttributesClassPatchTypeOutput{})
	pulumi.RegisterOutputType(VolumeErrorOutput{})
	pulumi.RegisterOutputType(VolumeErrorPtrOutput{})
	pulumi.RegisterOutputType(VolumeErrorPatchOutput{})
	pulumi.RegisterOutputType(VolumeErrorPatchPtrOutput{})
}
