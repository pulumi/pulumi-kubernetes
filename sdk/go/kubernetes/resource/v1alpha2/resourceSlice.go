// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSlice struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName pulumi.StringOutput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources NamedResourcesResourcesOutput `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
}

// NewResourceSlice registers a new resource with the given unique name, arguments, and options.
func NewResourceSlice(ctx *pulumi.Context,
	name string, args *ResourceSliceArgs, opts ...pulumi.ResourceOption) (*ResourceSlice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DriverName == nil {
		return nil, errors.New("invalid value for required argument 'DriverName'")
	}
	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("ResourceSlice")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ResourceSlice
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceSlice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSlice gets an existing ResourceSlice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSlice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSliceState, opts ...pulumi.ResourceOption) (*ResourceSlice, error) {
	var resource ResourceSlice
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha2:ResourceSlice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSlice resources.
type resourceSliceState struct {
}

type ResourceSliceState struct {
}

func (ResourceSliceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSliceState)(nil)).Elem()
}

type resourceSliceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources *NamedResourcesResources `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName *string `pulumi:"nodeName"`
}

// The set of arguments for constructing a ResourceSlice resource.
type ResourceSliceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName pulumi.StringInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput
	// NamedResources describes available resources using the named resources model.
	NamedResources NamedResourcesResourcesPtrInput
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName pulumi.StringPtrInput
}

func (ResourceSliceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSliceArgs)(nil)).Elem()
}

type ResourceSliceInput interface {
	pulumi.Input

	ToResourceSliceOutput() ResourceSliceOutput
	ToResourceSliceOutputWithContext(ctx context.Context) ResourceSliceOutput
}

func (*ResourceSlice) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSlice)(nil)).Elem()
}

func (i *ResourceSlice) ToResourceSliceOutput() ResourceSliceOutput {
	return i.ToResourceSliceOutputWithContext(context.Background())
}

func (i *ResourceSlice) ToResourceSliceOutputWithContext(ctx context.Context) ResourceSliceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceOutput)
}

// ResourceSliceArrayInput is an input type that accepts ResourceSliceArray and ResourceSliceArrayOutput values.
// You can construct a concrete instance of `ResourceSliceArrayInput` via:
//
//	ResourceSliceArray{ ResourceSliceArgs{...} }
type ResourceSliceArrayInput interface {
	pulumi.Input

	ToResourceSliceArrayOutput() ResourceSliceArrayOutput
	ToResourceSliceArrayOutputWithContext(context.Context) ResourceSliceArrayOutput
}

type ResourceSliceArray []ResourceSliceInput

func (ResourceSliceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSlice)(nil)).Elem()
}

func (i ResourceSliceArray) ToResourceSliceArrayOutput() ResourceSliceArrayOutput {
	return i.ToResourceSliceArrayOutputWithContext(context.Background())
}

func (i ResourceSliceArray) ToResourceSliceArrayOutputWithContext(ctx context.Context) ResourceSliceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceArrayOutput)
}

// ResourceSliceMapInput is an input type that accepts ResourceSliceMap and ResourceSliceMapOutput values.
// You can construct a concrete instance of `ResourceSliceMapInput` via:
//
//	ResourceSliceMap{ "key": ResourceSliceArgs{...} }
type ResourceSliceMapInput interface {
	pulumi.Input

	ToResourceSliceMapOutput() ResourceSliceMapOutput
	ToResourceSliceMapOutputWithContext(context.Context) ResourceSliceMapOutput
}

type ResourceSliceMap map[string]ResourceSliceInput

func (ResourceSliceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSlice)(nil)).Elem()
}

func (i ResourceSliceMap) ToResourceSliceMapOutput() ResourceSliceMapOutput {
	return i.ToResourceSliceMapOutputWithContext(context.Background())
}

func (i ResourceSliceMap) ToResourceSliceMapOutputWithContext(ctx context.Context) ResourceSliceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceMapOutput)
}

type ResourceSliceOutput struct{ *pulumi.OutputState }

func (ResourceSliceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSlice)(nil)).Elem()
}

func (o ResourceSliceOutput) ToResourceSliceOutput() ResourceSliceOutput {
	return o
}

func (o ResourceSliceOutput) ToResourceSliceOutputWithContext(ctx context.Context) ResourceSliceOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceSliceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSlice) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
func (o ResourceSliceOutput) DriverName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSlice) pulumi.StringOutput { return v.DriverName }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceSliceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSlice) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object metadata
func (o ResourceSliceOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ResourceSlice) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// NamedResources describes available resources using the named resources model.
func (o ResourceSliceOutput) NamedResources() NamedResourcesResourcesOutput {
	return o.ApplyT(func(v *ResourceSlice) NamedResourcesResourcesOutput { return v.NamedResources }).(NamedResourcesResourcesOutput)
}

// NodeName identifies the node which provides the resources if they are local to a node.
//
// A field selector can be used to list only ResourceSlice objects with a certain node name.
func (o ResourceSliceOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSlice) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

type ResourceSliceArrayOutput struct{ *pulumi.OutputState }

func (ResourceSliceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSlice)(nil)).Elem()
}

func (o ResourceSliceArrayOutput) ToResourceSliceArrayOutput() ResourceSliceArrayOutput {
	return o
}

func (o ResourceSliceArrayOutput) ToResourceSliceArrayOutputWithContext(ctx context.Context) ResourceSliceArrayOutput {
	return o
}

func (o ResourceSliceArrayOutput) Index(i pulumi.IntInput) ResourceSliceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSlice {
		return vs[0].([]*ResourceSlice)[vs[1].(int)]
	}).(ResourceSliceOutput)
}

type ResourceSliceMapOutput struct{ *pulumi.OutputState }

func (ResourceSliceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSlice)(nil)).Elem()
}

func (o ResourceSliceMapOutput) ToResourceSliceMapOutput() ResourceSliceMapOutput {
	return o
}

func (o ResourceSliceMapOutput) ToResourceSliceMapOutputWithContext(ctx context.Context) ResourceSliceMapOutput {
	return o
}

func (o ResourceSliceMapOutput) MapIndex(k pulumi.StringInput) ResourceSliceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSlice {
		return vs[0].(map[string]*ResourceSlice)[vs[1].(string)]
	}).(ResourceSliceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceInput)(nil)).Elem(), &ResourceSlice{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceArrayInput)(nil)).Elem(), ResourceSliceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceMapInput)(nil)).Elem(), ResourceSliceMap{})
	pulumi.RegisterOutputType(ResourceSliceOutput{})
	pulumi.RegisterOutputType(ResourceSliceArrayOutput{})
	pulumi.RegisterOutputType(ResourceSliceMapOutput{})
}
