// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// AllocationResult contains attributes of an allocated resource.
type AllocationResult struct {
	// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes *corev1.NodeSelector `pulumi:"availableOnNodes"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles []ResourceHandle `pulumi:"resourceHandles"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `pulumi:"shareable"`
}

// AllocationResultInput is an input type that accepts AllocationResultArgs and AllocationResultOutput values.
// You can construct a concrete instance of `AllocationResultInput` via:
//
//	AllocationResultArgs{...}
type AllocationResultInput interface {
	pulumi.Input

	ToAllocationResultOutput() AllocationResultOutput
	ToAllocationResultOutputWithContext(context.Context) AllocationResultOutput
}

// AllocationResult contains attributes of an allocated resource.
type AllocationResultArgs struct {
	// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes corev1.NodeSelectorPtrInput `pulumi:"availableOnNodes"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles ResourceHandleArrayInput `pulumi:"resourceHandles"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (AllocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResult)(nil)).Elem()
}

func (i AllocationResultArgs) ToAllocationResultOutput() AllocationResultOutput {
	return i.ToAllocationResultOutputWithContext(context.Background())
}

func (i AllocationResultArgs) ToAllocationResultOutputWithContext(ctx context.Context) AllocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultOutput)
}

func (i AllocationResultArgs) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return i.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (i AllocationResultArgs) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultOutput).ToAllocationResultPtrOutputWithContext(ctx)
}

// AllocationResultPtrInput is an input type that accepts AllocationResultArgs, AllocationResultPtr and AllocationResultPtrOutput values.
// You can construct a concrete instance of `AllocationResultPtrInput` via:
//
//	        AllocationResultArgs{...}
//
//	or:
//
//	        nil
type AllocationResultPtrInput interface {
	pulumi.Input

	ToAllocationResultPtrOutput() AllocationResultPtrOutput
	ToAllocationResultPtrOutputWithContext(context.Context) AllocationResultPtrOutput
}

type allocationResultPtrType AllocationResultArgs

func AllocationResultPtr(v *AllocationResultArgs) AllocationResultPtrInput {
	return (*allocationResultPtrType)(v)
}

func (*allocationResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResult)(nil)).Elem()
}

func (i *allocationResultPtrType) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return i.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (i *allocationResultPtrType) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPtrOutput)
}

// AllocationResult contains attributes of an allocated resource.
type AllocationResultOutput struct{ *pulumi.OutputState }

func (AllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResult)(nil)).Elem()
}

func (o AllocationResultOutput) ToAllocationResultOutput() AllocationResultOutput {
	return o
}

func (o AllocationResultOutput) ToAllocationResultOutputWithContext(ctx context.Context) AllocationResultOutput {
	return o
}

func (o AllocationResultOutput) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return o.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (o AllocationResultOutput) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllocationResult) *AllocationResult {
		return &v
	}).(AllocationResultPtrOutput)
}

// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultOutput) AvailableOnNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v AllocationResult) *corev1.NodeSelector { return v.AvailableOnNodes }).(corev1.NodeSelectorPtrOutput)
}

// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
func (o AllocationResultOutput) ResourceHandles() ResourceHandleArrayOutput {
	return o.ApplyT(func(v AllocationResult) []ResourceHandle { return v.ResourceHandles }).(ResourceHandleArrayOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllocationResult) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type AllocationResultPtrOutput struct{ *pulumi.OutputState }

func (AllocationResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResult)(nil)).Elem()
}

func (o AllocationResultPtrOutput) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return o
}

func (o AllocationResultPtrOutput) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return o
}

func (o AllocationResultPtrOutput) Elem() AllocationResultOutput {
	return o.ApplyT(func(v *AllocationResult) AllocationResult {
		if v != nil {
			return *v
		}
		var ret AllocationResult
		return ret
	}).(AllocationResultOutput)
}

// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPtrOutput) AvailableOnNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v *AllocationResult) *corev1.NodeSelector {
		if v == nil {
			return nil
		}
		return v.AvailableOnNodes
	}).(corev1.NodeSelectorPtrOutput)
}

// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
func (o AllocationResultPtrOutput) ResourceHandles() ResourceHandleArrayOutput {
	return o.ApplyT(func(v *AllocationResult) []ResourceHandle {
		if v == nil {
			return nil
		}
		return v.ResourceHandles
	}).(ResourceHandleArrayOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPtrOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllocationResult) *bool {
		if v == nil {
			return nil
		}
		return v.Shareable
	}).(pulumi.BoolPtrOutput)
}

// AllocationResult contains attributes of an allocated resource.
type AllocationResultPatch struct {
	// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes *corev1.NodeSelectorPatch `pulumi:"availableOnNodes"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles []ResourceHandlePatch `pulumi:"resourceHandles"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `pulumi:"shareable"`
}

// AllocationResultPatchInput is an input type that accepts AllocationResultPatchArgs and AllocationResultPatchOutput values.
// You can construct a concrete instance of `AllocationResultPatchInput` via:
//
//	AllocationResultPatchArgs{...}
type AllocationResultPatchInput interface {
	pulumi.Input

	ToAllocationResultPatchOutput() AllocationResultPatchOutput
	ToAllocationResultPatchOutputWithContext(context.Context) AllocationResultPatchOutput
}

// AllocationResult contains attributes of an allocated resource.
type AllocationResultPatchArgs struct {
	// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes corev1.NodeSelectorPatchPtrInput `pulumi:"availableOnNodes"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles ResourceHandlePatchArrayInput `pulumi:"resourceHandles"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (AllocationResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResultPatch)(nil)).Elem()
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchOutput() AllocationResultPatchOutput {
	return i.ToAllocationResultPatchOutputWithContext(context.Background())
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchOutputWithContext(ctx context.Context) AllocationResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchOutput)
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return i.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchOutput).ToAllocationResultPatchPtrOutputWithContext(ctx)
}

// AllocationResultPatchPtrInput is an input type that accepts AllocationResultPatchArgs, AllocationResultPatchPtr and AllocationResultPatchPtrOutput values.
// You can construct a concrete instance of `AllocationResultPatchPtrInput` via:
//
//	        AllocationResultPatchArgs{...}
//
//	or:
//
//	        nil
type AllocationResultPatchPtrInput interface {
	pulumi.Input

	ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput
	ToAllocationResultPatchPtrOutputWithContext(context.Context) AllocationResultPatchPtrOutput
}

type allocationResultPatchPtrType AllocationResultPatchArgs

func AllocationResultPatchPtr(v *AllocationResultPatchArgs) AllocationResultPatchPtrInput {
	return (*allocationResultPatchPtrType)(v)
}

func (*allocationResultPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResultPatch)(nil)).Elem()
}

func (i *allocationResultPatchPtrType) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return i.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i *allocationResultPatchPtrType) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchPtrOutput)
}

// AllocationResult contains attributes of an allocated resource.
type AllocationResultPatchOutput struct{ *pulumi.OutputState }

func (AllocationResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResultPatch)(nil)).Elem()
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchOutput() AllocationResultPatchOutput {
	return o
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchOutputWithContext(ctx context.Context) AllocationResultPatchOutput {
	return o
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return o.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllocationResultPatch) *AllocationResultPatch {
		return &v
	}).(AllocationResultPatchPtrOutput)
}

// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPatchOutput) AvailableOnNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v AllocationResultPatch) *corev1.NodeSelectorPatch { return v.AvailableOnNodes }).(corev1.NodeSelectorPatchPtrOutput)
}

// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
func (o AllocationResultPatchOutput) ResourceHandles() ResourceHandlePatchArrayOutput {
	return o.ApplyT(func(v AllocationResultPatch) []ResourceHandlePatch { return v.ResourceHandles }).(ResourceHandlePatchArrayOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPatchOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllocationResultPatch) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type AllocationResultPatchPtrOutput struct{ *pulumi.OutputState }

func (AllocationResultPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResultPatch)(nil)).Elem()
}

func (o AllocationResultPatchPtrOutput) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return o
}

func (o AllocationResultPatchPtrOutput) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return o
}

func (o AllocationResultPatchPtrOutput) Elem() AllocationResultPatchOutput {
	return o.ApplyT(func(v *AllocationResultPatch) AllocationResultPatch {
		if v != nil {
			return *v
		}
		var ret AllocationResultPatch
		return ret
	}).(AllocationResultPatchOutput)
}

// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPatchPtrOutput) AvailableOnNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *AllocationResultPatch) *corev1.NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.AvailableOnNodes
	}).(corev1.NodeSelectorPatchPtrOutput)
}

// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
func (o AllocationResultPatchPtrOutput) ResourceHandles() ResourceHandlePatchArrayOutput {
	return o.ApplyT(func(v *AllocationResultPatch) []ResourceHandlePatch {
		if v == nil {
			return nil
		}
		return v.ResourceHandles
	}).(ResourceHandlePatchArrayOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPatchPtrOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllocationResultPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Shareable
	}).(pulumi.BoolPtrOutput)
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResult struct {
	// NamedResources describes the allocation result when using the named resources model.
	NamedResources *NamedResourcesAllocationResult `pulumi:"namedResources"`
	// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
	VendorRequestParameters interface{} `pulumi:"vendorRequestParameters"`
}

// DriverAllocationResultInput is an input type that accepts DriverAllocationResultArgs and DriverAllocationResultOutput values.
// You can construct a concrete instance of `DriverAllocationResultInput` via:
//
//	DriverAllocationResultArgs{...}
type DriverAllocationResultInput interface {
	pulumi.Input

	ToDriverAllocationResultOutput() DriverAllocationResultOutput
	ToDriverAllocationResultOutputWithContext(context.Context) DriverAllocationResultOutput
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResultArgs struct {
	// NamedResources describes the allocation result when using the named resources model.
	NamedResources NamedResourcesAllocationResultPtrInput `pulumi:"namedResources"`
	// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
	VendorRequestParameters pulumi.Input `pulumi:"vendorRequestParameters"`
}

func (DriverAllocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverAllocationResult)(nil)).Elem()
}

func (i DriverAllocationResultArgs) ToDriverAllocationResultOutput() DriverAllocationResultOutput {
	return i.ToDriverAllocationResultOutputWithContext(context.Background())
}

func (i DriverAllocationResultArgs) ToDriverAllocationResultOutputWithContext(ctx context.Context) DriverAllocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverAllocationResultOutput)
}

// DriverAllocationResultArrayInput is an input type that accepts DriverAllocationResultArray and DriverAllocationResultArrayOutput values.
// You can construct a concrete instance of `DriverAllocationResultArrayInput` via:
//
//	DriverAllocationResultArray{ DriverAllocationResultArgs{...} }
type DriverAllocationResultArrayInput interface {
	pulumi.Input

	ToDriverAllocationResultArrayOutput() DriverAllocationResultArrayOutput
	ToDriverAllocationResultArrayOutputWithContext(context.Context) DriverAllocationResultArrayOutput
}

type DriverAllocationResultArray []DriverAllocationResultInput

func (DriverAllocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverAllocationResult)(nil)).Elem()
}

func (i DriverAllocationResultArray) ToDriverAllocationResultArrayOutput() DriverAllocationResultArrayOutput {
	return i.ToDriverAllocationResultArrayOutputWithContext(context.Background())
}

func (i DriverAllocationResultArray) ToDriverAllocationResultArrayOutputWithContext(ctx context.Context) DriverAllocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverAllocationResultArrayOutput)
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResultOutput struct{ *pulumi.OutputState }

func (DriverAllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverAllocationResult)(nil)).Elem()
}

func (o DriverAllocationResultOutput) ToDriverAllocationResultOutput() DriverAllocationResultOutput {
	return o
}

func (o DriverAllocationResultOutput) ToDriverAllocationResultOutputWithContext(ctx context.Context) DriverAllocationResultOutput {
	return o
}

// NamedResources describes the allocation result when using the named resources model.
func (o DriverAllocationResultOutput) NamedResources() NamedResourcesAllocationResultPtrOutput {
	return o.ApplyT(func(v DriverAllocationResult) *NamedResourcesAllocationResult { return v.NamedResources }).(NamedResourcesAllocationResultPtrOutput)
}

// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
func (o DriverAllocationResultOutput) VendorRequestParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DriverAllocationResult) interface{} { return v.VendorRequestParameters }).(pulumi.AnyOutput)
}

type DriverAllocationResultArrayOutput struct{ *pulumi.OutputState }

func (DriverAllocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverAllocationResult)(nil)).Elem()
}

func (o DriverAllocationResultArrayOutput) ToDriverAllocationResultArrayOutput() DriverAllocationResultArrayOutput {
	return o
}

func (o DriverAllocationResultArrayOutput) ToDriverAllocationResultArrayOutputWithContext(ctx context.Context) DriverAllocationResultArrayOutput {
	return o
}

func (o DriverAllocationResultArrayOutput) Index(i pulumi.IntInput) DriverAllocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DriverAllocationResult {
		return vs[0].([]DriverAllocationResult)[vs[1].(int)]
	}).(DriverAllocationResultOutput)
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResultPatch struct {
	// NamedResources describes the allocation result when using the named resources model.
	NamedResources *NamedResourcesAllocationResultPatch `pulumi:"namedResources"`
	// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
	VendorRequestParameters interface{} `pulumi:"vendorRequestParameters"`
}

// DriverAllocationResultPatchInput is an input type that accepts DriverAllocationResultPatchArgs and DriverAllocationResultPatchOutput values.
// You can construct a concrete instance of `DriverAllocationResultPatchInput` via:
//
//	DriverAllocationResultPatchArgs{...}
type DriverAllocationResultPatchInput interface {
	pulumi.Input

	ToDriverAllocationResultPatchOutput() DriverAllocationResultPatchOutput
	ToDriverAllocationResultPatchOutputWithContext(context.Context) DriverAllocationResultPatchOutput
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResultPatchArgs struct {
	// NamedResources describes the allocation result when using the named resources model.
	NamedResources NamedResourcesAllocationResultPatchPtrInput `pulumi:"namedResources"`
	// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
	VendorRequestParameters pulumi.Input `pulumi:"vendorRequestParameters"`
}

func (DriverAllocationResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverAllocationResultPatch)(nil)).Elem()
}

func (i DriverAllocationResultPatchArgs) ToDriverAllocationResultPatchOutput() DriverAllocationResultPatchOutput {
	return i.ToDriverAllocationResultPatchOutputWithContext(context.Background())
}

func (i DriverAllocationResultPatchArgs) ToDriverAllocationResultPatchOutputWithContext(ctx context.Context) DriverAllocationResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverAllocationResultPatchOutput)
}

// DriverAllocationResultPatchArrayInput is an input type that accepts DriverAllocationResultPatchArray and DriverAllocationResultPatchArrayOutput values.
// You can construct a concrete instance of `DriverAllocationResultPatchArrayInput` via:
//
//	DriverAllocationResultPatchArray{ DriverAllocationResultPatchArgs{...} }
type DriverAllocationResultPatchArrayInput interface {
	pulumi.Input

	ToDriverAllocationResultPatchArrayOutput() DriverAllocationResultPatchArrayOutput
	ToDriverAllocationResultPatchArrayOutputWithContext(context.Context) DriverAllocationResultPatchArrayOutput
}

type DriverAllocationResultPatchArray []DriverAllocationResultPatchInput

func (DriverAllocationResultPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverAllocationResultPatch)(nil)).Elem()
}

func (i DriverAllocationResultPatchArray) ToDriverAllocationResultPatchArrayOutput() DriverAllocationResultPatchArrayOutput {
	return i.ToDriverAllocationResultPatchArrayOutputWithContext(context.Background())
}

func (i DriverAllocationResultPatchArray) ToDriverAllocationResultPatchArrayOutputWithContext(ctx context.Context) DriverAllocationResultPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverAllocationResultPatchArrayOutput)
}

// DriverAllocationResult contains vendor parameters and the allocation result for one request.
type DriverAllocationResultPatchOutput struct{ *pulumi.OutputState }

func (DriverAllocationResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverAllocationResultPatch)(nil)).Elem()
}

func (o DriverAllocationResultPatchOutput) ToDriverAllocationResultPatchOutput() DriverAllocationResultPatchOutput {
	return o
}

func (o DriverAllocationResultPatchOutput) ToDriverAllocationResultPatchOutputWithContext(ctx context.Context) DriverAllocationResultPatchOutput {
	return o
}

// NamedResources describes the allocation result when using the named resources model.
func (o DriverAllocationResultPatchOutput) NamedResources() NamedResourcesAllocationResultPatchPtrOutput {
	return o.ApplyT(func(v DriverAllocationResultPatch) *NamedResourcesAllocationResultPatch { return v.NamedResources }).(NamedResourcesAllocationResultPatchPtrOutput)
}

// VendorRequestParameters are the per-request configuration parameters from the time that the claim was allocated.
func (o DriverAllocationResultPatchOutput) VendorRequestParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DriverAllocationResultPatch) interface{} { return v.VendorRequestParameters }).(pulumi.AnyOutput)
}

type DriverAllocationResultPatchArrayOutput struct{ *pulumi.OutputState }

func (DriverAllocationResultPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverAllocationResultPatch)(nil)).Elem()
}

func (o DriverAllocationResultPatchArrayOutput) ToDriverAllocationResultPatchArrayOutput() DriverAllocationResultPatchArrayOutput {
	return o
}

func (o DriverAllocationResultPatchArrayOutput) ToDriverAllocationResultPatchArrayOutputWithContext(ctx context.Context) DriverAllocationResultPatchArrayOutput {
	return o
}

func (o DriverAllocationResultPatchArrayOutput) Index(i pulumi.IntInput) DriverAllocationResultPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DriverAllocationResultPatch {
		return vs[0].([]DriverAllocationResultPatch)[vs[1].(int)]
	}).(DriverAllocationResultPatchOutput)
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequests struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// Requests describes all resources that are needed from the driver.
	Requests []ResourceRequest `pulumi:"requests"`
	// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
	VendorParameters interface{} `pulumi:"vendorParameters"`
}

// DriverRequestsInput is an input type that accepts DriverRequestsArgs and DriverRequestsOutput values.
// You can construct a concrete instance of `DriverRequestsInput` via:
//
//	DriverRequestsArgs{...}
type DriverRequestsInput interface {
	pulumi.Input

	ToDriverRequestsOutput() DriverRequestsOutput
	ToDriverRequestsOutputWithContext(context.Context) DriverRequestsOutput
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequestsArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Requests describes all resources that are needed from the driver.
	Requests ResourceRequestArrayInput `pulumi:"requests"`
	// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
	VendorParameters pulumi.Input `pulumi:"vendorParameters"`
}

func (DriverRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverRequests)(nil)).Elem()
}

func (i DriverRequestsArgs) ToDriverRequestsOutput() DriverRequestsOutput {
	return i.ToDriverRequestsOutputWithContext(context.Background())
}

func (i DriverRequestsArgs) ToDriverRequestsOutputWithContext(ctx context.Context) DriverRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverRequestsOutput)
}

// DriverRequestsArrayInput is an input type that accepts DriverRequestsArray and DriverRequestsArrayOutput values.
// You can construct a concrete instance of `DriverRequestsArrayInput` via:
//
//	DriverRequestsArray{ DriverRequestsArgs{...} }
type DriverRequestsArrayInput interface {
	pulumi.Input

	ToDriverRequestsArrayOutput() DriverRequestsArrayOutput
	ToDriverRequestsArrayOutputWithContext(context.Context) DriverRequestsArrayOutput
}

type DriverRequestsArray []DriverRequestsInput

func (DriverRequestsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverRequests)(nil)).Elem()
}

func (i DriverRequestsArray) ToDriverRequestsArrayOutput() DriverRequestsArrayOutput {
	return i.ToDriverRequestsArrayOutputWithContext(context.Background())
}

func (i DriverRequestsArray) ToDriverRequestsArrayOutputWithContext(ctx context.Context) DriverRequestsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverRequestsArrayOutput)
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequestsOutput struct{ *pulumi.OutputState }

func (DriverRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverRequests)(nil)).Elem()
}

func (o DriverRequestsOutput) ToDriverRequestsOutput() DriverRequestsOutput {
	return o
}

func (o DriverRequestsOutput) ToDriverRequestsOutputWithContext(ctx context.Context) DriverRequestsOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o DriverRequestsOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DriverRequests) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Requests describes all resources that are needed from the driver.
func (o DriverRequestsOutput) Requests() ResourceRequestArrayOutput {
	return o.ApplyT(func(v DriverRequests) []ResourceRequest { return v.Requests }).(ResourceRequestArrayOutput)
}

// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
func (o DriverRequestsOutput) VendorParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DriverRequests) interface{} { return v.VendorParameters }).(pulumi.AnyOutput)
}

type DriverRequestsArrayOutput struct{ *pulumi.OutputState }

func (DriverRequestsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverRequests)(nil)).Elem()
}

func (o DriverRequestsArrayOutput) ToDriverRequestsArrayOutput() DriverRequestsArrayOutput {
	return o
}

func (o DriverRequestsArrayOutput) ToDriverRequestsArrayOutputWithContext(ctx context.Context) DriverRequestsArrayOutput {
	return o
}

func (o DriverRequestsArrayOutput) Index(i pulumi.IntInput) DriverRequestsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DriverRequests {
		return vs[0].([]DriverRequests)[vs[1].(int)]
	}).(DriverRequestsOutput)
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequestsPatch struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// Requests describes all resources that are needed from the driver.
	Requests []ResourceRequestPatch `pulumi:"requests"`
	// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
	VendorParameters interface{} `pulumi:"vendorParameters"`
}

// DriverRequestsPatchInput is an input type that accepts DriverRequestsPatchArgs and DriverRequestsPatchOutput values.
// You can construct a concrete instance of `DriverRequestsPatchInput` via:
//
//	DriverRequestsPatchArgs{...}
type DriverRequestsPatchInput interface {
	pulumi.Input

	ToDriverRequestsPatchOutput() DriverRequestsPatchOutput
	ToDriverRequestsPatchOutputWithContext(context.Context) DriverRequestsPatchOutput
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequestsPatchArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Requests describes all resources that are needed from the driver.
	Requests ResourceRequestPatchArrayInput `pulumi:"requests"`
	// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
	VendorParameters pulumi.Input `pulumi:"vendorParameters"`
}

func (DriverRequestsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverRequestsPatch)(nil)).Elem()
}

func (i DriverRequestsPatchArgs) ToDriverRequestsPatchOutput() DriverRequestsPatchOutput {
	return i.ToDriverRequestsPatchOutputWithContext(context.Background())
}

func (i DriverRequestsPatchArgs) ToDriverRequestsPatchOutputWithContext(ctx context.Context) DriverRequestsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverRequestsPatchOutput)
}

// DriverRequestsPatchArrayInput is an input type that accepts DriverRequestsPatchArray and DriverRequestsPatchArrayOutput values.
// You can construct a concrete instance of `DriverRequestsPatchArrayInput` via:
//
//	DriverRequestsPatchArray{ DriverRequestsPatchArgs{...} }
type DriverRequestsPatchArrayInput interface {
	pulumi.Input

	ToDriverRequestsPatchArrayOutput() DriverRequestsPatchArrayOutput
	ToDriverRequestsPatchArrayOutputWithContext(context.Context) DriverRequestsPatchArrayOutput
}

type DriverRequestsPatchArray []DriverRequestsPatchInput

func (DriverRequestsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverRequestsPatch)(nil)).Elem()
}

func (i DriverRequestsPatchArray) ToDriverRequestsPatchArrayOutput() DriverRequestsPatchArrayOutput {
	return i.ToDriverRequestsPatchArrayOutputWithContext(context.Background())
}

func (i DriverRequestsPatchArray) ToDriverRequestsPatchArrayOutputWithContext(ctx context.Context) DriverRequestsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverRequestsPatchArrayOutput)
}

// DriverRequests describes all resources that are needed from one particular driver.
type DriverRequestsPatchOutput struct{ *pulumi.OutputState }

func (DriverRequestsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DriverRequestsPatch)(nil)).Elem()
}

func (o DriverRequestsPatchOutput) ToDriverRequestsPatchOutput() DriverRequestsPatchOutput {
	return o
}

func (o DriverRequestsPatchOutput) ToDriverRequestsPatchOutputWithContext(ctx context.Context) DriverRequestsPatchOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o DriverRequestsPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DriverRequestsPatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Requests describes all resources that are needed from the driver.
func (o DriverRequestsPatchOutput) Requests() ResourceRequestPatchArrayOutput {
	return o.ApplyT(func(v DriverRequestsPatch) []ResourceRequestPatch { return v.Requests }).(ResourceRequestPatchArrayOutput)
}

// VendorParameters are arbitrary setup parameters for all requests of the claim. They are ignored while allocating the claim.
func (o DriverRequestsPatchOutput) VendorParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DriverRequestsPatch) interface{} { return v.VendorParameters }).(pulumi.AnyOutput)
}

type DriverRequestsPatchArrayOutput struct{ *pulumi.OutputState }

func (DriverRequestsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DriverRequestsPatch)(nil)).Elem()
}

func (o DriverRequestsPatchArrayOutput) ToDriverRequestsPatchArrayOutput() DriverRequestsPatchArrayOutput {
	return o
}

func (o DriverRequestsPatchArrayOutput) ToDriverRequestsPatchArrayOutputWithContext(ctx context.Context) DriverRequestsPatchArrayOutput {
	return o
}

func (o DriverRequestsPatchArrayOutput) Index(i pulumi.IntInput) DriverRequestsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DriverRequestsPatch {
		return vs[0].([]DriverRequestsPatch)[vs[1].(int)]
	}).(DriverRequestsPatchOutput)
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResult struct {
	// Name is the name of the selected resource instance.
	Name string `pulumi:"name"`
}

// NamedResourcesAllocationResultInput is an input type that accepts NamedResourcesAllocationResultArgs and NamedResourcesAllocationResultOutput values.
// You can construct a concrete instance of `NamedResourcesAllocationResultInput` via:
//
//	NamedResourcesAllocationResultArgs{...}
type NamedResourcesAllocationResultInput interface {
	pulumi.Input

	ToNamedResourcesAllocationResultOutput() NamedResourcesAllocationResultOutput
	ToNamedResourcesAllocationResultOutputWithContext(context.Context) NamedResourcesAllocationResultOutput
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResultArgs struct {
	// Name is the name of the selected resource instance.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NamedResourcesAllocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAllocationResult)(nil)).Elem()
}

func (i NamedResourcesAllocationResultArgs) ToNamedResourcesAllocationResultOutput() NamedResourcesAllocationResultOutput {
	return i.ToNamedResourcesAllocationResultOutputWithContext(context.Background())
}

func (i NamedResourcesAllocationResultArgs) ToNamedResourcesAllocationResultOutputWithContext(ctx context.Context) NamedResourcesAllocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultOutput)
}

func (i NamedResourcesAllocationResultArgs) ToNamedResourcesAllocationResultPtrOutput() NamedResourcesAllocationResultPtrOutput {
	return i.ToNamedResourcesAllocationResultPtrOutputWithContext(context.Background())
}

func (i NamedResourcesAllocationResultArgs) ToNamedResourcesAllocationResultPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultOutput).ToNamedResourcesAllocationResultPtrOutputWithContext(ctx)
}

// NamedResourcesAllocationResultPtrInput is an input type that accepts NamedResourcesAllocationResultArgs, NamedResourcesAllocationResultPtr and NamedResourcesAllocationResultPtrOutput values.
// You can construct a concrete instance of `NamedResourcesAllocationResultPtrInput` via:
//
//	        NamedResourcesAllocationResultArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesAllocationResultPtrInput interface {
	pulumi.Input

	ToNamedResourcesAllocationResultPtrOutput() NamedResourcesAllocationResultPtrOutput
	ToNamedResourcesAllocationResultPtrOutputWithContext(context.Context) NamedResourcesAllocationResultPtrOutput
}

type namedResourcesAllocationResultPtrType NamedResourcesAllocationResultArgs

func NamedResourcesAllocationResultPtr(v *NamedResourcesAllocationResultArgs) NamedResourcesAllocationResultPtrInput {
	return (*namedResourcesAllocationResultPtrType)(v)
}

func (*namedResourcesAllocationResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesAllocationResult)(nil)).Elem()
}

func (i *namedResourcesAllocationResultPtrType) ToNamedResourcesAllocationResultPtrOutput() NamedResourcesAllocationResultPtrOutput {
	return i.ToNamedResourcesAllocationResultPtrOutputWithContext(context.Background())
}

func (i *namedResourcesAllocationResultPtrType) ToNamedResourcesAllocationResultPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultPtrOutput)
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResultOutput struct{ *pulumi.OutputState }

func (NamedResourcesAllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAllocationResult)(nil)).Elem()
}

func (o NamedResourcesAllocationResultOutput) ToNamedResourcesAllocationResultOutput() NamedResourcesAllocationResultOutput {
	return o
}

func (o NamedResourcesAllocationResultOutput) ToNamedResourcesAllocationResultOutputWithContext(ctx context.Context) NamedResourcesAllocationResultOutput {
	return o
}

func (o NamedResourcesAllocationResultOutput) ToNamedResourcesAllocationResultPtrOutput() NamedResourcesAllocationResultPtrOutput {
	return o.ToNamedResourcesAllocationResultPtrOutputWithContext(context.Background())
}

func (o NamedResourcesAllocationResultOutput) ToNamedResourcesAllocationResultPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesAllocationResult) *NamedResourcesAllocationResult {
		return &v
	}).(NamedResourcesAllocationResultPtrOutput)
}

// Name is the name of the selected resource instance.
func (o NamedResourcesAllocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamedResourcesAllocationResult) string { return v.Name }).(pulumi.StringOutput)
}

type NamedResourcesAllocationResultPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesAllocationResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesAllocationResult)(nil)).Elem()
}

func (o NamedResourcesAllocationResultPtrOutput) ToNamedResourcesAllocationResultPtrOutput() NamedResourcesAllocationResultPtrOutput {
	return o
}

func (o NamedResourcesAllocationResultPtrOutput) ToNamedResourcesAllocationResultPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPtrOutput {
	return o
}

func (o NamedResourcesAllocationResultPtrOutput) Elem() NamedResourcesAllocationResultOutput {
	return o.ApplyT(func(v *NamedResourcesAllocationResult) NamedResourcesAllocationResult {
		if v != nil {
			return *v
		}
		var ret NamedResourcesAllocationResult
		return ret
	}).(NamedResourcesAllocationResultOutput)
}

// Name is the name of the selected resource instance.
func (o NamedResourcesAllocationResultPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesAllocationResult) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResultPatch struct {
	// Name is the name of the selected resource instance.
	Name *string `pulumi:"name"`
}

// NamedResourcesAllocationResultPatchInput is an input type that accepts NamedResourcesAllocationResultPatchArgs and NamedResourcesAllocationResultPatchOutput values.
// You can construct a concrete instance of `NamedResourcesAllocationResultPatchInput` via:
//
//	NamedResourcesAllocationResultPatchArgs{...}
type NamedResourcesAllocationResultPatchInput interface {
	pulumi.Input

	ToNamedResourcesAllocationResultPatchOutput() NamedResourcesAllocationResultPatchOutput
	ToNamedResourcesAllocationResultPatchOutputWithContext(context.Context) NamedResourcesAllocationResultPatchOutput
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResultPatchArgs struct {
	// Name is the name of the selected resource instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NamedResourcesAllocationResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAllocationResultPatch)(nil)).Elem()
}

func (i NamedResourcesAllocationResultPatchArgs) ToNamedResourcesAllocationResultPatchOutput() NamedResourcesAllocationResultPatchOutput {
	return i.ToNamedResourcesAllocationResultPatchOutputWithContext(context.Background())
}

func (i NamedResourcesAllocationResultPatchArgs) ToNamedResourcesAllocationResultPatchOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultPatchOutput)
}

func (i NamedResourcesAllocationResultPatchArgs) ToNamedResourcesAllocationResultPatchPtrOutput() NamedResourcesAllocationResultPatchPtrOutput {
	return i.ToNamedResourcesAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesAllocationResultPatchArgs) ToNamedResourcesAllocationResultPatchPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultPatchOutput).ToNamedResourcesAllocationResultPatchPtrOutputWithContext(ctx)
}

// NamedResourcesAllocationResultPatchPtrInput is an input type that accepts NamedResourcesAllocationResultPatchArgs, NamedResourcesAllocationResultPatchPtr and NamedResourcesAllocationResultPatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesAllocationResultPatchPtrInput` via:
//
//	        NamedResourcesAllocationResultPatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesAllocationResultPatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesAllocationResultPatchPtrOutput() NamedResourcesAllocationResultPatchPtrOutput
	ToNamedResourcesAllocationResultPatchPtrOutputWithContext(context.Context) NamedResourcesAllocationResultPatchPtrOutput
}

type namedResourcesAllocationResultPatchPtrType NamedResourcesAllocationResultPatchArgs

func NamedResourcesAllocationResultPatchPtr(v *NamedResourcesAllocationResultPatchArgs) NamedResourcesAllocationResultPatchPtrInput {
	return (*namedResourcesAllocationResultPatchPtrType)(v)
}

func (*namedResourcesAllocationResultPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesAllocationResultPatch)(nil)).Elem()
}

func (i *namedResourcesAllocationResultPatchPtrType) ToNamedResourcesAllocationResultPatchPtrOutput() NamedResourcesAllocationResultPatchPtrOutput {
	return i.ToNamedResourcesAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesAllocationResultPatchPtrType) ToNamedResourcesAllocationResultPatchPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAllocationResultPatchPtrOutput)
}

// NamedResourcesAllocationResult is used in AllocationResultModel.
type NamedResourcesAllocationResultPatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesAllocationResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAllocationResultPatch)(nil)).Elem()
}

func (o NamedResourcesAllocationResultPatchOutput) ToNamedResourcesAllocationResultPatchOutput() NamedResourcesAllocationResultPatchOutput {
	return o
}

func (o NamedResourcesAllocationResultPatchOutput) ToNamedResourcesAllocationResultPatchOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchOutput {
	return o
}

func (o NamedResourcesAllocationResultPatchOutput) ToNamedResourcesAllocationResultPatchPtrOutput() NamedResourcesAllocationResultPatchPtrOutput {
	return o.ToNamedResourcesAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesAllocationResultPatchOutput) ToNamedResourcesAllocationResultPatchPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesAllocationResultPatch) *NamedResourcesAllocationResultPatch {
		return &v
	}).(NamedResourcesAllocationResultPatchPtrOutput)
}

// Name is the name of the selected resource instance.
func (o NamedResourcesAllocationResultPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAllocationResultPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NamedResourcesAllocationResultPatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesAllocationResultPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesAllocationResultPatch)(nil)).Elem()
}

func (o NamedResourcesAllocationResultPatchPtrOutput) ToNamedResourcesAllocationResultPatchPtrOutput() NamedResourcesAllocationResultPatchPtrOutput {
	return o
}

func (o NamedResourcesAllocationResultPatchPtrOutput) ToNamedResourcesAllocationResultPatchPtrOutputWithContext(ctx context.Context) NamedResourcesAllocationResultPatchPtrOutput {
	return o
}

func (o NamedResourcesAllocationResultPatchPtrOutput) Elem() NamedResourcesAllocationResultPatchOutput {
	return o.ApplyT(func(v *NamedResourcesAllocationResultPatch) NamedResourcesAllocationResultPatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesAllocationResultPatch
		return ret
	}).(NamedResourcesAllocationResultPatchOutput)
}

// Name is the name of the selected resource instance.
func (o NamedResourcesAllocationResultPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesAllocationResultPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttribute struct {
	// BoolValue is a true/false value.
	Bool *bool `pulumi:"bool"`
	// IntValue is a 64-bit integer.
	Int *int `pulumi:"int"`
	// IntSliceValue is an array of 64-bit integers.
	IntSlice *NamedResourcesIntSlice `pulumi:"intSlice"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name string `pulumi:"name"`
	// QuantityValue is a quantity.
	Quantity *string `pulumi:"quantity"`
	// StringValue is a string.
	String *string `pulumi:"string"`
	// StringSliceValue is an array of strings.
	StringSlice *NamedResourcesStringSlice `pulumi:"stringSlice"`
	// VersionValue is a semantic version according to semver.org spec 2.0.0.
	Version *string `pulumi:"version"`
}

// NamedResourcesAttributeInput is an input type that accepts NamedResourcesAttributeArgs and NamedResourcesAttributeOutput values.
// You can construct a concrete instance of `NamedResourcesAttributeInput` via:
//
//	NamedResourcesAttributeArgs{...}
type NamedResourcesAttributeInput interface {
	pulumi.Input

	ToNamedResourcesAttributeOutput() NamedResourcesAttributeOutput
	ToNamedResourcesAttributeOutputWithContext(context.Context) NamedResourcesAttributeOutput
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttributeArgs struct {
	// BoolValue is a true/false value.
	Bool pulumi.BoolPtrInput `pulumi:"bool"`
	// IntValue is a 64-bit integer.
	Int pulumi.IntPtrInput `pulumi:"int"`
	// IntSliceValue is an array of 64-bit integers.
	IntSlice NamedResourcesIntSlicePtrInput `pulumi:"intSlice"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name pulumi.StringInput `pulumi:"name"`
	// QuantityValue is a quantity.
	Quantity pulumi.StringPtrInput `pulumi:"quantity"`
	// StringValue is a string.
	String pulumi.StringPtrInput `pulumi:"string"`
	// StringSliceValue is an array of strings.
	StringSlice NamedResourcesStringSlicePtrInput `pulumi:"stringSlice"`
	// VersionValue is a semantic version according to semver.org spec 2.0.0.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NamedResourcesAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAttribute)(nil)).Elem()
}

func (i NamedResourcesAttributeArgs) ToNamedResourcesAttributeOutput() NamedResourcesAttributeOutput {
	return i.ToNamedResourcesAttributeOutputWithContext(context.Background())
}

func (i NamedResourcesAttributeArgs) ToNamedResourcesAttributeOutputWithContext(ctx context.Context) NamedResourcesAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAttributeOutput)
}

// NamedResourcesAttributeArrayInput is an input type that accepts NamedResourcesAttributeArray and NamedResourcesAttributeArrayOutput values.
// You can construct a concrete instance of `NamedResourcesAttributeArrayInput` via:
//
//	NamedResourcesAttributeArray{ NamedResourcesAttributeArgs{...} }
type NamedResourcesAttributeArrayInput interface {
	pulumi.Input

	ToNamedResourcesAttributeArrayOutput() NamedResourcesAttributeArrayOutput
	ToNamedResourcesAttributeArrayOutputWithContext(context.Context) NamedResourcesAttributeArrayOutput
}

type NamedResourcesAttributeArray []NamedResourcesAttributeInput

func (NamedResourcesAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesAttribute)(nil)).Elem()
}

func (i NamedResourcesAttributeArray) ToNamedResourcesAttributeArrayOutput() NamedResourcesAttributeArrayOutput {
	return i.ToNamedResourcesAttributeArrayOutputWithContext(context.Background())
}

func (i NamedResourcesAttributeArray) ToNamedResourcesAttributeArrayOutputWithContext(ctx context.Context) NamedResourcesAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAttributeArrayOutput)
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttributeOutput struct{ *pulumi.OutputState }

func (NamedResourcesAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAttribute)(nil)).Elem()
}

func (o NamedResourcesAttributeOutput) ToNamedResourcesAttributeOutput() NamedResourcesAttributeOutput {
	return o
}

func (o NamedResourcesAttributeOutput) ToNamedResourcesAttributeOutputWithContext(ctx context.Context) NamedResourcesAttributeOutput {
	return o
}

// BoolValue is a true/false value.
func (o NamedResourcesAttributeOutput) Bool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *bool { return v.Bool }).(pulumi.BoolPtrOutput)
}

// IntValue is a 64-bit integer.
func (o NamedResourcesAttributeOutput) Int() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *int { return v.Int }).(pulumi.IntPtrOutput)
}

// IntSliceValue is an array of 64-bit integers.
func (o NamedResourcesAttributeOutput) IntSlice() NamedResourcesIntSlicePtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *NamedResourcesIntSlice { return v.IntSlice }).(NamedResourcesIntSlicePtrOutput)
}

// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
func (o NamedResourcesAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// QuantityValue is a quantity.
func (o NamedResourcesAttributeOutput) Quantity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *string { return v.Quantity }).(pulumi.StringPtrOutput)
}

// StringValue is a string.
func (o NamedResourcesAttributeOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *string { return v.String }).(pulumi.StringPtrOutput)
}

// StringSliceValue is an array of strings.
func (o NamedResourcesAttributeOutput) StringSlice() NamedResourcesStringSlicePtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *NamedResourcesStringSlice { return v.StringSlice }).(NamedResourcesStringSlicePtrOutput)
}

// VersionValue is a semantic version according to semver.org spec 2.0.0.
func (o NamedResourcesAttributeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttribute) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NamedResourcesAttributeArrayOutput struct{ *pulumi.OutputState }

func (NamedResourcesAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesAttribute)(nil)).Elem()
}

func (o NamedResourcesAttributeArrayOutput) ToNamedResourcesAttributeArrayOutput() NamedResourcesAttributeArrayOutput {
	return o
}

func (o NamedResourcesAttributeArrayOutput) ToNamedResourcesAttributeArrayOutputWithContext(ctx context.Context) NamedResourcesAttributeArrayOutput {
	return o
}

func (o NamedResourcesAttributeArrayOutput) Index(i pulumi.IntInput) NamedResourcesAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedResourcesAttribute {
		return vs[0].([]NamedResourcesAttribute)[vs[1].(int)]
	}).(NamedResourcesAttributeOutput)
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttributePatch struct {
	// BoolValue is a true/false value.
	Bool *bool `pulumi:"bool"`
	// IntValue is a 64-bit integer.
	Int *int `pulumi:"int"`
	// IntSliceValue is an array of 64-bit integers.
	IntSlice *NamedResourcesIntSlicePatch `pulumi:"intSlice"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name *string `pulumi:"name"`
	// QuantityValue is a quantity.
	Quantity *string `pulumi:"quantity"`
	// StringValue is a string.
	String *string `pulumi:"string"`
	// StringSliceValue is an array of strings.
	StringSlice *NamedResourcesStringSlicePatch `pulumi:"stringSlice"`
	// VersionValue is a semantic version according to semver.org spec 2.0.0.
	Version *string `pulumi:"version"`
}

// NamedResourcesAttributePatchInput is an input type that accepts NamedResourcesAttributePatchArgs and NamedResourcesAttributePatchOutput values.
// You can construct a concrete instance of `NamedResourcesAttributePatchInput` via:
//
//	NamedResourcesAttributePatchArgs{...}
type NamedResourcesAttributePatchInput interface {
	pulumi.Input

	ToNamedResourcesAttributePatchOutput() NamedResourcesAttributePatchOutput
	ToNamedResourcesAttributePatchOutputWithContext(context.Context) NamedResourcesAttributePatchOutput
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttributePatchArgs struct {
	// BoolValue is a true/false value.
	Bool pulumi.BoolPtrInput `pulumi:"bool"`
	// IntValue is a 64-bit integer.
	Int pulumi.IntPtrInput `pulumi:"int"`
	// IntSliceValue is an array of 64-bit integers.
	IntSlice NamedResourcesIntSlicePatchPtrInput `pulumi:"intSlice"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// QuantityValue is a quantity.
	Quantity pulumi.StringPtrInput `pulumi:"quantity"`
	// StringValue is a string.
	String pulumi.StringPtrInput `pulumi:"string"`
	// StringSliceValue is an array of strings.
	StringSlice NamedResourcesStringSlicePatchPtrInput `pulumi:"stringSlice"`
	// VersionValue is a semantic version according to semver.org spec 2.0.0.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NamedResourcesAttributePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAttributePatch)(nil)).Elem()
}

func (i NamedResourcesAttributePatchArgs) ToNamedResourcesAttributePatchOutput() NamedResourcesAttributePatchOutput {
	return i.ToNamedResourcesAttributePatchOutputWithContext(context.Background())
}

func (i NamedResourcesAttributePatchArgs) ToNamedResourcesAttributePatchOutputWithContext(ctx context.Context) NamedResourcesAttributePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAttributePatchOutput)
}

// NamedResourcesAttributePatchArrayInput is an input type that accepts NamedResourcesAttributePatchArray and NamedResourcesAttributePatchArrayOutput values.
// You can construct a concrete instance of `NamedResourcesAttributePatchArrayInput` via:
//
//	NamedResourcesAttributePatchArray{ NamedResourcesAttributePatchArgs{...} }
type NamedResourcesAttributePatchArrayInput interface {
	pulumi.Input

	ToNamedResourcesAttributePatchArrayOutput() NamedResourcesAttributePatchArrayOutput
	ToNamedResourcesAttributePatchArrayOutputWithContext(context.Context) NamedResourcesAttributePatchArrayOutput
}

type NamedResourcesAttributePatchArray []NamedResourcesAttributePatchInput

func (NamedResourcesAttributePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesAttributePatch)(nil)).Elem()
}

func (i NamedResourcesAttributePatchArray) ToNamedResourcesAttributePatchArrayOutput() NamedResourcesAttributePatchArrayOutput {
	return i.ToNamedResourcesAttributePatchArrayOutputWithContext(context.Background())
}

func (i NamedResourcesAttributePatchArray) ToNamedResourcesAttributePatchArrayOutputWithContext(ctx context.Context) NamedResourcesAttributePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesAttributePatchArrayOutput)
}

// NamedResourcesAttribute is a combination of an attribute name and its value.
type NamedResourcesAttributePatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesAttributePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesAttributePatch)(nil)).Elem()
}

func (o NamedResourcesAttributePatchOutput) ToNamedResourcesAttributePatchOutput() NamedResourcesAttributePatchOutput {
	return o
}

func (o NamedResourcesAttributePatchOutput) ToNamedResourcesAttributePatchOutputWithContext(ctx context.Context) NamedResourcesAttributePatchOutput {
	return o
}

// BoolValue is a true/false value.
func (o NamedResourcesAttributePatchOutput) Bool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *bool { return v.Bool }).(pulumi.BoolPtrOutput)
}

// IntValue is a 64-bit integer.
func (o NamedResourcesAttributePatchOutput) Int() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *int { return v.Int }).(pulumi.IntPtrOutput)
}

// IntSliceValue is an array of 64-bit integers.
func (o NamedResourcesAttributePatchOutput) IntSlice() NamedResourcesIntSlicePatchPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *NamedResourcesIntSlicePatch { return v.IntSlice }).(NamedResourcesIntSlicePatchPtrOutput)
}

// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
func (o NamedResourcesAttributePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// QuantityValue is a quantity.
func (o NamedResourcesAttributePatchOutput) Quantity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *string { return v.Quantity }).(pulumi.StringPtrOutput)
}

// StringValue is a string.
func (o NamedResourcesAttributePatchOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *string { return v.String }).(pulumi.StringPtrOutput)
}

// StringSliceValue is an array of strings.
func (o NamedResourcesAttributePatchOutput) StringSlice() NamedResourcesStringSlicePatchPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *NamedResourcesStringSlicePatch { return v.StringSlice }).(NamedResourcesStringSlicePatchPtrOutput)
}

// VersionValue is a semantic version according to semver.org spec 2.0.0.
func (o NamedResourcesAttributePatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesAttributePatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NamedResourcesAttributePatchArrayOutput struct{ *pulumi.OutputState }

func (NamedResourcesAttributePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesAttributePatch)(nil)).Elem()
}

func (o NamedResourcesAttributePatchArrayOutput) ToNamedResourcesAttributePatchArrayOutput() NamedResourcesAttributePatchArrayOutput {
	return o
}

func (o NamedResourcesAttributePatchArrayOutput) ToNamedResourcesAttributePatchArrayOutputWithContext(ctx context.Context) NamedResourcesAttributePatchArrayOutput {
	return o
}

func (o NamedResourcesAttributePatchArrayOutput) Index(i pulumi.IntInput) NamedResourcesAttributePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedResourcesAttributePatch {
		return vs[0].([]NamedResourcesAttributePatch)[vs[1].(int)]
	}).(NamedResourcesAttributePatchOutput)
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilter struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector string `pulumi:"selector"`
}

// NamedResourcesFilterInput is an input type that accepts NamedResourcesFilterArgs and NamedResourcesFilterOutput values.
// You can construct a concrete instance of `NamedResourcesFilterInput` via:
//
//	NamedResourcesFilterArgs{...}
type NamedResourcesFilterInput interface {
	pulumi.Input

	ToNamedResourcesFilterOutput() NamedResourcesFilterOutput
	ToNamedResourcesFilterOutputWithContext(context.Context) NamedResourcesFilterOutput
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilterArgs struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (NamedResourcesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesFilter)(nil)).Elem()
}

func (i NamedResourcesFilterArgs) ToNamedResourcesFilterOutput() NamedResourcesFilterOutput {
	return i.ToNamedResourcesFilterOutputWithContext(context.Background())
}

func (i NamedResourcesFilterArgs) ToNamedResourcesFilterOutputWithContext(ctx context.Context) NamedResourcesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterOutput)
}

func (i NamedResourcesFilterArgs) ToNamedResourcesFilterPtrOutput() NamedResourcesFilterPtrOutput {
	return i.ToNamedResourcesFilterPtrOutputWithContext(context.Background())
}

func (i NamedResourcesFilterArgs) ToNamedResourcesFilterPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterOutput).ToNamedResourcesFilterPtrOutputWithContext(ctx)
}

// NamedResourcesFilterPtrInput is an input type that accepts NamedResourcesFilterArgs, NamedResourcesFilterPtr and NamedResourcesFilterPtrOutput values.
// You can construct a concrete instance of `NamedResourcesFilterPtrInput` via:
//
//	        NamedResourcesFilterArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesFilterPtrInput interface {
	pulumi.Input

	ToNamedResourcesFilterPtrOutput() NamedResourcesFilterPtrOutput
	ToNamedResourcesFilterPtrOutputWithContext(context.Context) NamedResourcesFilterPtrOutput
}

type namedResourcesFilterPtrType NamedResourcesFilterArgs

func NamedResourcesFilterPtr(v *NamedResourcesFilterArgs) NamedResourcesFilterPtrInput {
	return (*namedResourcesFilterPtrType)(v)
}

func (*namedResourcesFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesFilter)(nil)).Elem()
}

func (i *namedResourcesFilterPtrType) ToNamedResourcesFilterPtrOutput() NamedResourcesFilterPtrOutput {
	return i.ToNamedResourcesFilterPtrOutputWithContext(context.Background())
}

func (i *namedResourcesFilterPtrType) ToNamedResourcesFilterPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterPtrOutput)
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilterOutput struct{ *pulumi.OutputState }

func (NamedResourcesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesFilter)(nil)).Elem()
}

func (o NamedResourcesFilterOutput) ToNamedResourcesFilterOutput() NamedResourcesFilterOutput {
	return o
}

func (o NamedResourcesFilterOutput) ToNamedResourcesFilterOutputWithContext(ctx context.Context) NamedResourcesFilterOutput {
	return o
}

func (o NamedResourcesFilterOutput) ToNamedResourcesFilterPtrOutput() NamedResourcesFilterPtrOutput {
	return o.ToNamedResourcesFilterPtrOutputWithContext(context.Background())
}

func (o NamedResourcesFilterOutput) ToNamedResourcesFilterPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesFilter) *NamedResourcesFilter {
		return &v
	}).(NamedResourcesFilterPtrOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesFilterOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v NamedResourcesFilter) string { return v.Selector }).(pulumi.StringOutput)
}

type NamedResourcesFilterPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesFilter)(nil)).Elem()
}

func (o NamedResourcesFilterPtrOutput) ToNamedResourcesFilterPtrOutput() NamedResourcesFilterPtrOutput {
	return o
}

func (o NamedResourcesFilterPtrOutput) ToNamedResourcesFilterPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPtrOutput {
	return o
}

func (o NamedResourcesFilterPtrOutput) Elem() NamedResourcesFilterOutput {
	return o.ApplyT(func(v *NamedResourcesFilter) NamedResourcesFilter {
		if v != nil {
			return *v
		}
		var ret NamedResourcesFilter
		return ret
	}).(NamedResourcesFilterOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesFilterPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilterPatch struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector *string `pulumi:"selector"`
}

// NamedResourcesFilterPatchInput is an input type that accepts NamedResourcesFilterPatchArgs and NamedResourcesFilterPatchOutput values.
// You can construct a concrete instance of `NamedResourcesFilterPatchInput` via:
//
//	NamedResourcesFilterPatchArgs{...}
type NamedResourcesFilterPatchInput interface {
	pulumi.Input

	ToNamedResourcesFilterPatchOutput() NamedResourcesFilterPatchOutput
	ToNamedResourcesFilterPatchOutputWithContext(context.Context) NamedResourcesFilterPatchOutput
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilterPatchArgs struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (NamedResourcesFilterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesFilterPatch)(nil)).Elem()
}

func (i NamedResourcesFilterPatchArgs) ToNamedResourcesFilterPatchOutput() NamedResourcesFilterPatchOutput {
	return i.ToNamedResourcesFilterPatchOutputWithContext(context.Background())
}

func (i NamedResourcesFilterPatchArgs) ToNamedResourcesFilterPatchOutputWithContext(ctx context.Context) NamedResourcesFilterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterPatchOutput)
}

func (i NamedResourcesFilterPatchArgs) ToNamedResourcesFilterPatchPtrOutput() NamedResourcesFilterPatchPtrOutput {
	return i.ToNamedResourcesFilterPatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesFilterPatchArgs) ToNamedResourcesFilterPatchPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterPatchOutput).ToNamedResourcesFilterPatchPtrOutputWithContext(ctx)
}

// NamedResourcesFilterPatchPtrInput is an input type that accepts NamedResourcesFilterPatchArgs, NamedResourcesFilterPatchPtr and NamedResourcesFilterPatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesFilterPatchPtrInput` via:
//
//	        NamedResourcesFilterPatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesFilterPatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesFilterPatchPtrOutput() NamedResourcesFilterPatchPtrOutput
	ToNamedResourcesFilterPatchPtrOutputWithContext(context.Context) NamedResourcesFilterPatchPtrOutput
}

type namedResourcesFilterPatchPtrType NamedResourcesFilterPatchArgs

func NamedResourcesFilterPatchPtr(v *NamedResourcesFilterPatchArgs) NamedResourcesFilterPatchPtrInput {
	return (*namedResourcesFilterPatchPtrType)(v)
}

func (*namedResourcesFilterPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesFilterPatch)(nil)).Elem()
}

func (i *namedResourcesFilterPatchPtrType) ToNamedResourcesFilterPatchPtrOutput() NamedResourcesFilterPatchPtrOutput {
	return i.ToNamedResourcesFilterPatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesFilterPatchPtrType) ToNamedResourcesFilterPatchPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesFilterPatchPtrOutput)
}

// NamedResourcesFilter is used in ResourceFilterModel.
type NamedResourcesFilterPatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesFilterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesFilterPatch)(nil)).Elem()
}

func (o NamedResourcesFilterPatchOutput) ToNamedResourcesFilterPatchOutput() NamedResourcesFilterPatchOutput {
	return o
}

func (o NamedResourcesFilterPatchOutput) ToNamedResourcesFilterPatchOutputWithContext(ctx context.Context) NamedResourcesFilterPatchOutput {
	return o
}

func (o NamedResourcesFilterPatchOutput) ToNamedResourcesFilterPatchPtrOutput() NamedResourcesFilterPatchPtrOutput {
	return o.ToNamedResourcesFilterPatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesFilterPatchOutput) ToNamedResourcesFilterPatchPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesFilterPatch) *NamedResourcesFilterPatch {
		return &v
	}).(NamedResourcesFilterPatchPtrOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesFilterPatchOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesFilterPatch) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type NamedResourcesFilterPatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesFilterPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesFilterPatch)(nil)).Elem()
}

func (o NamedResourcesFilterPatchPtrOutput) ToNamedResourcesFilterPatchPtrOutput() NamedResourcesFilterPatchPtrOutput {
	return o
}

func (o NamedResourcesFilterPatchPtrOutput) ToNamedResourcesFilterPatchPtrOutputWithContext(ctx context.Context) NamedResourcesFilterPatchPtrOutput {
	return o
}

func (o NamedResourcesFilterPatchPtrOutput) Elem() NamedResourcesFilterPatchOutput {
	return o.ApplyT(func(v *NamedResourcesFilterPatch) NamedResourcesFilterPatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesFilterPatch
		return ret
	}).(NamedResourcesFilterPatchOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesFilterPatchPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesFilterPatch) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstance struct {
	// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
	Attributes []NamedResourcesAttribute `pulumi:"attributes"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name string `pulumi:"name"`
}

// NamedResourcesInstanceInput is an input type that accepts NamedResourcesInstanceArgs and NamedResourcesInstanceOutput values.
// You can construct a concrete instance of `NamedResourcesInstanceInput` via:
//
//	NamedResourcesInstanceArgs{...}
type NamedResourcesInstanceInput interface {
	pulumi.Input

	ToNamedResourcesInstanceOutput() NamedResourcesInstanceOutput
	ToNamedResourcesInstanceOutputWithContext(context.Context) NamedResourcesInstanceOutput
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstanceArgs struct {
	// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
	Attributes NamedResourcesAttributeArrayInput `pulumi:"attributes"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NamedResourcesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesInstance)(nil)).Elem()
}

func (i NamedResourcesInstanceArgs) ToNamedResourcesInstanceOutput() NamedResourcesInstanceOutput {
	return i.ToNamedResourcesInstanceOutputWithContext(context.Background())
}

func (i NamedResourcesInstanceArgs) ToNamedResourcesInstanceOutputWithContext(ctx context.Context) NamedResourcesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesInstanceOutput)
}

// NamedResourcesInstanceArrayInput is an input type that accepts NamedResourcesInstanceArray and NamedResourcesInstanceArrayOutput values.
// You can construct a concrete instance of `NamedResourcesInstanceArrayInput` via:
//
//	NamedResourcesInstanceArray{ NamedResourcesInstanceArgs{...} }
type NamedResourcesInstanceArrayInput interface {
	pulumi.Input

	ToNamedResourcesInstanceArrayOutput() NamedResourcesInstanceArrayOutput
	ToNamedResourcesInstanceArrayOutputWithContext(context.Context) NamedResourcesInstanceArrayOutput
}

type NamedResourcesInstanceArray []NamedResourcesInstanceInput

func (NamedResourcesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesInstance)(nil)).Elem()
}

func (i NamedResourcesInstanceArray) ToNamedResourcesInstanceArrayOutput() NamedResourcesInstanceArrayOutput {
	return i.ToNamedResourcesInstanceArrayOutputWithContext(context.Background())
}

func (i NamedResourcesInstanceArray) ToNamedResourcesInstanceArrayOutputWithContext(ctx context.Context) NamedResourcesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesInstanceArrayOutput)
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstanceOutput struct{ *pulumi.OutputState }

func (NamedResourcesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesInstance)(nil)).Elem()
}

func (o NamedResourcesInstanceOutput) ToNamedResourcesInstanceOutput() NamedResourcesInstanceOutput {
	return o
}

func (o NamedResourcesInstanceOutput) ToNamedResourcesInstanceOutputWithContext(ctx context.Context) NamedResourcesInstanceOutput {
	return o
}

// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
func (o NamedResourcesInstanceOutput) Attributes() NamedResourcesAttributeArrayOutput {
	return o.ApplyT(func(v NamedResourcesInstance) []NamedResourcesAttribute { return v.Attributes }).(NamedResourcesAttributeArrayOutput)
}

// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
func (o NamedResourcesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamedResourcesInstance) string { return v.Name }).(pulumi.StringOutput)
}

type NamedResourcesInstanceArrayOutput struct{ *pulumi.OutputState }

func (NamedResourcesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesInstance)(nil)).Elem()
}

func (o NamedResourcesInstanceArrayOutput) ToNamedResourcesInstanceArrayOutput() NamedResourcesInstanceArrayOutput {
	return o
}

func (o NamedResourcesInstanceArrayOutput) ToNamedResourcesInstanceArrayOutputWithContext(ctx context.Context) NamedResourcesInstanceArrayOutput {
	return o
}

func (o NamedResourcesInstanceArrayOutput) Index(i pulumi.IntInput) NamedResourcesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedResourcesInstance {
		return vs[0].([]NamedResourcesInstance)[vs[1].(int)]
	}).(NamedResourcesInstanceOutput)
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstancePatch struct {
	// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
	Attributes []NamedResourcesAttributePatch `pulumi:"attributes"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name *string `pulumi:"name"`
}

// NamedResourcesInstancePatchInput is an input type that accepts NamedResourcesInstancePatchArgs and NamedResourcesInstancePatchOutput values.
// You can construct a concrete instance of `NamedResourcesInstancePatchInput` via:
//
//	NamedResourcesInstancePatchArgs{...}
type NamedResourcesInstancePatchInput interface {
	pulumi.Input

	ToNamedResourcesInstancePatchOutput() NamedResourcesInstancePatchOutput
	ToNamedResourcesInstancePatchOutputWithContext(context.Context) NamedResourcesInstancePatchOutput
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstancePatchArgs struct {
	// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
	Attributes NamedResourcesAttributePatchArrayInput `pulumi:"attributes"`
	// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NamedResourcesInstancePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesInstancePatch)(nil)).Elem()
}

func (i NamedResourcesInstancePatchArgs) ToNamedResourcesInstancePatchOutput() NamedResourcesInstancePatchOutput {
	return i.ToNamedResourcesInstancePatchOutputWithContext(context.Background())
}

func (i NamedResourcesInstancePatchArgs) ToNamedResourcesInstancePatchOutputWithContext(ctx context.Context) NamedResourcesInstancePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesInstancePatchOutput)
}

// NamedResourcesInstancePatchArrayInput is an input type that accepts NamedResourcesInstancePatchArray and NamedResourcesInstancePatchArrayOutput values.
// You can construct a concrete instance of `NamedResourcesInstancePatchArrayInput` via:
//
//	NamedResourcesInstancePatchArray{ NamedResourcesInstancePatchArgs{...} }
type NamedResourcesInstancePatchArrayInput interface {
	pulumi.Input

	ToNamedResourcesInstancePatchArrayOutput() NamedResourcesInstancePatchArrayOutput
	ToNamedResourcesInstancePatchArrayOutputWithContext(context.Context) NamedResourcesInstancePatchArrayOutput
}

type NamedResourcesInstancePatchArray []NamedResourcesInstancePatchInput

func (NamedResourcesInstancePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesInstancePatch)(nil)).Elem()
}

func (i NamedResourcesInstancePatchArray) ToNamedResourcesInstancePatchArrayOutput() NamedResourcesInstancePatchArrayOutput {
	return i.ToNamedResourcesInstancePatchArrayOutputWithContext(context.Background())
}

func (i NamedResourcesInstancePatchArray) ToNamedResourcesInstancePatchArrayOutputWithContext(ctx context.Context) NamedResourcesInstancePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesInstancePatchArrayOutput)
}

// NamedResourcesInstance represents one individual hardware instance that can be selected based on its attributes.
type NamedResourcesInstancePatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesInstancePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesInstancePatch)(nil)).Elem()
}

func (o NamedResourcesInstancePatchOutput) ToNamedResourcesInstancePatchOutput() NamedResourcesInstancePatchOutput {
	return o
}

func (o NamedResourcesInstancePatchOutput) ToNamedResourcesInstancePatchOutputWithContext(ctx context.Context) NamedResourcesInstancePatchOutput {
	return o
}

// Attributes defines the attributes of this resource instance. The name of each attribute must be unique.
func (o NamedResourcesInstancePatchOutput) Attributes() NamedResourcesAttributePatchArrayOutput {
	return o.ApplyT(func(v NamedResourcesInstancePatch) []NamedResourcesAttributePatch { return v.Attributes }).(NamedResourcesAttributePatchArrayOutput)
}

// Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.
func (o NamedResourcesInstancePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesInstancePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NamedResourcesInstancePatchArrayOutput struct{ *pulumi.OutputState }

func (NamedResourcesInstancePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedResourcesInstancePatch)(nil)).Elem()
}

func (o NamedResourcesInstancePatchArrayOutput) ToNamedResourcesInstancePatchArrayOutput() NamedResourcesInstancePatchArrayOutput {
	return o
}

func (o NamedResourcesInstancePatchArrayOutput) ToNamedResourcesInstancePatchArrayOutputWithContext(ctx context.Context) NamedResourcesInstancePatchArrayOutput {
	return o
}

func (o NamedResourcesInstancePatchArrayOutput) Index(i pulumi.IntInput) NamedResourcesInstancePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedResourcesInstancePatch {
		return vs[0].([]NamedResourcesInstancePatch)[vs[1].(int)]
	}).(NamedResourcesInstancePatchOutput)
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSlice struct {
	// Ints is the slice of 64-bit integers.
	Ints []int `pulumi:"ints"`
}

// NamedResourcesIntSliceInput is an input type that accepts NamedResourcesIntSliceArgs and NamedResourcesIntSliceOutput values.
// You can construct a concrete instance of `NamedResourcesIntSliceInput` via:
//
//	NamedResourcesIntSliceArgs{...}
type NamedResourcesIntSliceInput interface {
	pulumi.Input

	ToNamedResourcesIntSliceOutput() NamedResourcesIntSliceOutput
	ToNamedResourcesIntSliceOutputWithContext(context.Context) NamedResourcesIntSliceOutput
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSliceArgs struct {
	// Ints is the slice of 64-bit integers.
	Ints pulumi.IntArrayInput `pulumi:"ints"`
}

func (NamedResourcesIntSliceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesIntSlice)(nil)).Elem()
}

func (i NamedResourcesIntSliceArgs) ToNamedResourcesIntSliceOutput() NamedResourcesIntSliceOutput {
	return i.ToNamedResourcesIntSliceOutputWithContext(context.Background())
}

func (i NamedResourcesIntSliceArgs) ToNamedResourcesIntSliceOutputWithContext(ctx context.Context) NamedResourcesIntSliceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSliceOutput)
}

func (i NamedResourcesIntSliceArgs) ToNamedResourcesIntSlicePtrOutput() NamedResourcesIntSlicePtrOutput {
	return i.ToNamedResourcesIntSlicePtrOutputWithContext(context.Background())
}

func (i NamedResourcesIntSliceArgs) ToNamedResourcesIntSlicePtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSliceOutput).ToNamedResourcesIntSlicePtrOutputWithContext(ctx)
}

// NamedResourcesIntSlicePtrInput is an input type that accepts NamedResourcesIntSliceArgs, NamedResourcesIntSlicePtr and NamedResourcesIntSlicePtrOutput values.
// You can construct a concrete instance of `NamedResourcesIntSlicePtrInput` via:
//
//	        NamedResourcesIntSliceArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesIntSlicePtrInput interface {
	pulumi.Input

	ToNamedResourcesIntSlicePtrOutput() NamedResourcesIntSlicePtrOutput
	ToNamedResourcesIntSlicePtrOutputWithContext(context.Context) NamedResourcesIntSlicePtrOutput
}

type namedResourcesIntSlicePtrType NamedResourcesIntSliceArgs

func NamedResourcesIntSlicePtr(v *NamedResourcesIntSliceArgs) NamedResourcesIntSlicePtrInput {
	return (*namedResourcesIntSlicePtrType)(v)
}

func (*namedResourcesIntSlicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesIntSlice)(nil)).Elem()
}

func (i *namedResourcesIntSlicePtrType) ToNamedResourcesIntSlicePtrOutput() NamedResourcesIntSlicePtrOutput {
	return i.ToNamedResourcesIntSlicePtrOutputWithContext(context.Background())
}

func (i *namedResourcesIntSlicePtrType) ToNamedResourcesIntSlicePtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSlicePtrOutput)
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSliceOutput struct{ *pulumi.OutputState }

func (NamedResourcesIntSliceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesIntSlice)(nil)).Elem()
}

func (o NamedResourcesIntSliceOutput) ToNamedResourcesIntSliceOutput() NamedResourcesIntSliceOutput {
	return o
}

func (o NamedResourcesIntSliceOutput) ToNamedResourcesIntSliceOutputWithContext(ctx context.Context) NamedResourcesIntSliceOutput {
	return o
}

func (o NamedResourcesIntSliceOutput) ToNamedResourcesIntSlicePtrOutput() NamedResourcesIntSlicePtrOutput {
	return o.ToNamedResourcesIntSlicePtrOutputWithContext(context.Background())
}

func (o NamedResourcesIntSliceOutput) ToNamedResourcesIntSlicePtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesIntSlice) *NamedResourcesIntSlice {
		return &v
	}).(NamedResourcesIntSlicePtrOutput)
}

// Ints is the slice of 64-bit integers.
func (o NamedResourcesIntSliceOutput) Ints() pulumi.IntArrayOutput {
	return o.ApplyT(func(v NamedResourcesIntSlice) []int { return v.Ints }).(pulumi.IntArrayOutput)
}

type NamedResourcesIntSlicePtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesIntSlicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesIntSlice)(nil)).Elem()
}

func (o NamedResourcesIntSlicePtrOutput) ToNamedResourcesIntSlicePtrOutput() NamedResourcesIntSlicePtrOutput {
	return o
}

func (o NamedResourcesIntSlicePtrOutput) ToNamedResourcesIntSlicePtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePtrOutput {
	return o
}

func (o NamedResourcesIntSlicePtrOutput) Elem() NamedResourcesIntSliceOutput {
	return o.ApplyT(func(v *NamedResourcesIntSlice) NamedResourcesIntSlice {
		if v != nil {
			return *v
		}
		var ret NamedResourcesIntSlice
		return ret
	}).(NamedResourcesIntSliceOutput)
}

// Ints is the slice of 64-bit integers.
func (o NamedResourcesIntSlicePtrOutput) Ints() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *NamedResourcesIntSlice) []int {
		if v == nil {
			return nil
		}
		return v.Ints
	}).(pulumi.IntArrayOutput)
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSlicePatch struct {
	// Ints is the slice of 64-bit integers.
	Ints []int `pulumi:"ints"`
}

// NamedResourcesIntSlicePatchInput is an input type that accepts NamedResourcesIntSlicePatchArgs and NamedResourcesIntSlicePatchOutput values.
// You can construct a concrete instance of `NamedResourcesIntSlicePatchInput` via:
//
//	NamedResourcesIntSlicePatchArgs{...}
type NamedResourcesIntSlicePatchInput interface {
	pulumi.Input

	ToNamedResourcesIntSlicePatchOutput() NamedResourcesIntSlicePatchOutput
	ToNamedResourcesIntSlicePatchOutputWithContext(context.Context) NamedResourcesIntSlicePatchOutput
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSlicePatchArgs struct {
	// Ints is the slice of 64-bit integers.
	Ints pulumi.IntArrayInput `pulumi:"ints"`
}

func (NamedResourcesIntSlicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesIntSlicePatch)(nil)).Elem()
}

func (i NamedResourcesIntSlicePatchArgs) ToNamedResourcesIntSlicePatchOutput() NamedResourcesIntSlicePatchOutput {
	return i.ToNamedResourcesIntSlicePatchOutputWithContext(context.Background())
}

func (i NamedResourcesIntSlicePatchArgs) ToNamedResourcesIntSlicePatchOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSlicePatchOutput)
}

func (i NamedResourcesIntSlicePatchArgs) ToNamedResourcesIntSlicePatchPtrOutput() NamedResourcesIntSlicePatchPtrOutput {
	return i.ToNamedResourcesIntSlicePatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesIntSlicePatchArgs) ToNamedResourcesIntSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSlicePatchOutput).ToNamedResourcesIntSlicePatchPtrOutputWithContext(ctx)
}

// NamedResourcesIntSlicePatchPtrInput is an input type that accepts NamedResourcesIntSlicePatchArgs, NamedResourcesIntSlicePatchPtr and NamedResourcesIntSlicePatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesIntSlicePatchPtrInput` via:
//
//	        NamedResourcesIntSlicePatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesIntSlicePatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesIntSlicePatchPtrOutput() NamedResourcesIntSlicePatchPtrOutput
	ToNamedResourcesIntSlicePatchPtrOutputWithContext(context.Context) NamedResourcesIntSlicePatchPtrOutput
}

type namedResourcesIntSlicePatchPtrType NamedResourcesIntSlicePatchArgs

func NamedResourcesIntSlicePatchPtr(v *NamedResourcesIntSlicePatchArgs) NamedResourcesIntSlicePatchPtrInput {
	return (*namedResourcesIntSlicePatchPtrType)(v)
}

func (*namedResourcesIntSlicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesIntSlicePatch)(nil)).Elem()
}

func (i *namedResourcesIntSlicePatchPtrType) ToNamedResourcesIntSlicePatchPtrOutput() NamedResourcesIntSlicePatchPtrOutput {
	return i.ToNamedResourcesIntSlicePatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesIntSlicePatchPtrType) ToNamedResourcesIntSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesIntSlicePatchPtrOutput)
}

// NamedResourcesIntSlice contains a slice of 64-bit integers.
type NamedResourcesIntSlicePatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesIntSlicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesIntSlicePatch)(nil)).Elem()
}

func (o NamedResourcesIntSlicePatchOutput) ToNamedResourcesIntSlicePatchOutput() NamedResourcesIntSlicePatchOutput {
	return o
}

func (o NamedResourcesIntSlicePatchOutput) ToNamedResourcesIntSlicePatchOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchOutput {
	return o
}

func (o NamedResourcesIntSlicePatchOutput) ToNamedResourcesIntSlicePatchPtrOutput() NamedResourcesIntSlicePatchPtrOutput {
	return o.ToNamedResourcesIntSlicePatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesIntSlicePatchOutput) ToNamedResourcesIntSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesIntSlicePatch) *NamedResourcesIntSlicePatch {
		return &v
	}).(NamedResourcesIntSlicePatchPtrOutput)
}

// Ints is the slice of 64-bit integers.
func (o NamedResourcesIntSlicePatchOutput) Ints() pulumi.IntArrayOutput {
	return o.ApplyT(func(v NamedResourcesIntSlicePatch) []int { return v.Ints }).(pulumi.IntArrayOutput)
}

type NamedResourcesIntSlicePatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesIntSlicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesIntSlicePatch)(nil)).Elem()
}

func (o NamedResourcesIntSlicePatchPtrOutput) ToNamedResourcesIntSlicePatchPtrOutput() NamedResourcesIntSlicePatchPtrOutput {
	return o
}

func (o NamedResourcesIntSlicePatchPtrOutput) ToNamedResourcesIntSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesIntSlicePatchPtrOutput {
	return o
}

func (o NamedResourcesIntSlicePatchPtrOutput) Elem() NamedResourcesIntSlicePatchOutput {
	return o.ApplyT(func(v *NamedResourcesIntSlicePatch) NamedResourcesIntSlicePatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesIntSlicePatch
		return ret
	}).(NamedResourcesIntSlicePatchOutput)
}

// Ints is the slice of 64-bit integers.
func (o NamedResourcesIntSlicePatchPtrOutput) Ints() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *NamedResourcesIntSlicePatch) []int {
		if v == nil {
			return nil
		}
		return v.Ints
	}).(pulumi.IntArrayOutput)
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequest struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector string `pulumi:"selector"`
}

// NamedResourcesRequestInput is an input type that accepts NamedResourcesRequestArgs and NamedResourcesRequestOutput values.
// You can construct a concrete instance of `NamedResourcesRequestInput` via:
//
//	NamedResourcesRequestArgs{...}
type NamedResourcesRequestInput interface {
	pulumi.Input

	ToNamedResourcesRequestOutput() NamedResourcesRequestOutput
	ToNamedResourcesRequestOutputWithContext(context.Context) NamedResourcesRequestOutput
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequestArgs struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (NamedResourcesRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesRequest)(nil)).Elem()
}

func (i NamedResourcesRequestArgs) ToNamedResourcesRequestOutput() NamedResourcesRequestOutput {
	return i.ToNamedResourcesRequestOutputWithContext(context.Background())
}

func (i NamedResourcesRequestArgs) ToNamedResourcesRequestOutputWithContext(ctx context.Context) NamedResourcesRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestOutput)
}

func (i NamedResourcesRequestArgs) ToNamedResourcesRequestPtrOutput() NamedResourcesRequestPtrOutput {
	return i.ToNamedResourcesRequestPtrOutputWithContext(context.Background())
}

func (i NamedResourcesRequestArgs) ToNamedResourcesRequestPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestOutput).ToNamedResourcesRequestPtrOutputWithContext(ctx)
}

// NamedResourcesRequestPtrInput is an input type that accepts NamedResourcesRequestArgs, NamedResourcesRequestPtr and NamedResourcesRequestPtrOutput values.
// You can construct a concrete instance of `NamedResourcesRequestPtrInput` via:
//
//	        NamedResourcesRequestArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesRequestPtrInput interface {
	pulumi.Input

	ToNamedResourcesRequestPtrOutput() NamedResourcesRequestPtrOutput
	ToNamedResourcesRequestPtrOutputWithContext(context.Context) NamedResourcesRequestPtrOutput
}

type namedResourcesRequestPtrType NamedResourcesRequestArgs

func NamedResourcesRequestPtr(v *NamedResourcesRequestArgs) NamedResourcesRequestPtrInput {
	return (*namedResourcesRequestPtrType)(v)
}

func (*namedResourcesRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesRequest)(nil)).Elem()
}

func (i *namedResourcesRequestPtrType) ToNamedResourcesRequestPtrOutput() NamedResourcesRequestPtrOutput {
	return i.ToNamedResourcesRequestPtrOutputWithContext(context.Background())
}

func (i *namedResourcesRequestPtrType) ToNamedResourcesRequestPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestPtrOutput)
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequestOutput struct{ *pulumi.OutputState }

func (NamedResourcesRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesRequest)(nil)).Elem()
}

func (o NamedResourcesRequestOutput) ToNamedResourcesRequestOutput() NamedResourcesRequestOutput {
	return o
}

func (o NamedResourcesRequestOutput) ToNamedResourcesRequestOutputWithContext(ctx context.Context) NamedResourcesRequestOutput {
	return o
}

func (o NamedResourcesRequestOutput) ToNamedResourcesRequestPtrOutput() NamedResourcesRequestPtrOutput {
	return o.ToNamedResourcesRequestPtrOutputWithContext(context.Background())
}

func (o NamedResourcesRequestOutput) ToNamedResourcesRequestPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesRequest) *NamedResourcesRequest {
		return &v
	}).(NamedResourcesRequestPtrOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesRequestOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v NamedResourcesRequest) string { return v.Selector }).(pulumi.StringOutput)
}

type NamedResourcesRequestPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesRequest)(nil)).Elem()
}

func (o NamedResourcesRequestPtrOutput) ToNamedResourcesRequestPtrOutput() NamedResourcesRequestPtrOutput {
	return o
}

func (o NamedResourcesRequestPtrOutput) ToNamedResourcesRequestPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPtrOutput {
	return o
}

func (o NamedResourcesRequestPtrOutput) Elem() NamedResourcesRequestOutput {
	return o.ApplyT(func(v *NamedResourcesRequest) NamedResourcesRequest {
		if v != nil {
			return *v
		}
		var ret NamedResourcesRequest
		return ret
	}).(NamedResourcesRequestOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesRequestPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequestPatch struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector *string `pulumi:"selector"`
}

// NamedResourcesRequestPatchInput is an input type that accepts NamedResourcesRequestPatchArgs and NamedResourcesRequestPatchOutput values.
// You can construct a concrete instance of `NamedResourcesRequestPatchInput` via:
//
//	NamedResourcesRequestPatchArgs{...}
type NamedResourcesRequestPatchInput interface {
	pulumi.Input

	ToNamedResourcesRequestPatchOutput() NamedResourcesRequestPatchOutput
	ToNamedResourcesRequestPatchOutputWithContext(context.Context) NamedResourcesRequestPatchOutput
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequestPatchArgs struct {
	// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
	//
	// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
	//
	//    attributes.quantity["a"].isGreaterThan(quantity("0")) &&
	//    attributes.stringslice["b"].isSorted()
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (NamedResourcesRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesRequestPatch)(nil)).Elem()
}

func (i NamedResourcesRequestPatchArgs) ToNamedResourcesRequestPatchOutput() NamedResourcesRequestPatchOutput {
	return i.ToNamedResourcesRequestPatchOutputWithContext(context.Background())
}

func (i NamedResourcesRequestPatchArgs) ToNamedResourcesRequestPatchOutputWithContext(ctx context.Context) NamedResourcesRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestPatchOutput)
}

func (i NamedResourcesRequestPatchArgs) ToNamedResourcesRequestPatchPtrOutput() NamedResourcesRequestPatchPtrOutput {
	return i.ToNamedResourcesRequestPatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesRequestPatchArgs) ToNamedResourcesRequestPatchPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestPatchOutput).ToNamedResourcesRequestPatchPtrOutputWithContext(ctx)
}

// NamedResourcesRequestPatchPtrInput is an input type that accepts NamedResourcesRequestPatchArgs, NamedResourcesRequestPatchPtr and NamedResourcesRequestPatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesRequestPatchPtrInput` via:
//
//	        NamedResourcesRequestPatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesRequestPatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesRequestPatchPtrOutput() NamedResourcesRequestPatchPtrOutput
	ToNamedResourcesRequestPatchPtrOutputWithContext(context.Context) NamedResourcesRequestPatchPtrOutput
}

type namedResourcesRequestPatchPtrType NamedResourcesRequestPatchArgs

func NamedResourcesRequestPatchPtr(v *NamedResourcesRequestPatchArgs) NamedResourcesRequestPatchPtrInput {
	return (*namedResourcesRequestPatchPtrType)(v)
}

func (*namedResourcesRequestPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesRequestPatch)(nil)).Elem()
}

func (i *namedResourcesRequestPatchPtrType) ToNamedResourcesRequestPatchPtrOutput() NamedResourcesRequestPatchPtrOutput {
	return i.ToNamedResourcesRequestPatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesRequestPatchPtrType) ToNamedResourcesRequestPatchPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesRequestPatchPtrOutput)
}

// NamedResourcesRequest is used in ResourceRequestModel.
type NamedResourcesRequestPatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesRequestPatch)(nil)).Elem()
}

func (o NamedResourcesRequestPatchOutput) ToNamedResourcesRequestPatchOutput() NamedResourcesRequestPatchOutput {
	return o
}

func (o NamedResourcesRequestPatchOutput) ToNamedResourcesRequestPatchOutputWithContext(ctx context.Context) NamedResourcesRequestPatchOutput {
	return o
}

func (o NamedResourcesRequestPatchOutput) ToNamedResourcesRequestPatchPtrOutput() NamedResourcesRequestPatchPtrOutput {
	return o.ToNamedResourcesRequestPatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesRequestPatchOutput) ToNamedResourcesRequestPatchPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesRequestPatch) *NamedResourcesRequestPatch {
		return &v
	}).(NamedResourcesRequestPatchPtrOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesRequestPatchOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedResourcesRequestPatch) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type NamedResourcesRequestPatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesRequestPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesRequestPatch)(nil)).Elem()
}

func (o NamedResourcesRequestPatchPtrOutput) ToNamedResourcesRequestPatchPtrOutput() NamedResourcesRequestPatchPtrOutput {
	return o
}

func (o NamedResourcesRequestPatchPtrOutput) ToNamedResourcesRequestPatchPtrOutputWithContext(ctx context.Context) NamedResourcesRequestPatchPtrOutput {
	return o
}

func (o NamedResourcesRequestPatchPtrOutput) Elem() NamedResourcesRequestPatchOutput {
	return o.ApplyT(func(v *NamedResourcesRequestPatch) NamedResourcesRequestPatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesRequestPatch
		return ret
	}).(NamedResourcesRequestPatchOutput)
}

// Selector is a CEL expression which must evaluate to true if a resource instance is suitable. The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/
//
// In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of the instance under evaluation. For example:
//
//	attributes.quantity["a"].isGreaterThan(quantity("0")) &&
//	attributes.stringslice["b"].isSorted()
func (o NamedResourcesRequestPatchPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedResourcesRequestPatch) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResources struct {
	// The list of all individual resources instances currently available.
	Instances []NamedResourcesInstance `pulumi:"instances"`
}

// NamedResourcesResourcesInput is an input type that accepts NamedResourcesResourcesArgs and NamedResourcesResourcesOutput values.
// You can construct a concrete instance of `NamedResourcesResourcesInput` via:
//
//	NamedResourcesResourcesArgs{...}
type NamedResourcesResourcesInput interface {
	pulumi.Input

	ToNamedResourcesResourcesOutput() NamedResourcesResourcesOutput
	ToNamedResourcesResourcesOutputWithContext(context.Context) NamedResourcesResourcesOutput
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResourcesArgs struct {
	// The list of all individual resources instances currently available.
	Instances NamedResourcesInstanceArrayInput `pulumi:"instances"`
}

func (NamedResourcesResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesResources)(nil)).Elem()
}

func (i NamedResourcesResourcesArgs) ToNamedResourcesResourcesOutput() NamedResourcesResourcesOutput {
	return i.ToNamedResourcesResourcesOutputWithContext(context.Background())
}

func (i NamedResourcesResourcesArgs) ToNamedResourcesResourcesOutputWithContext(ctx context.Context) NamedResourcesResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesOutput)
}

func (i NamedResourcesResourcesArgs) ToNamedResourcesResourcesPtrOutput() NamedResourcesResourcesPtrOutput {
	return i.ToNamedResourcesResourcesPtrOutputWithContext(context.Background())
}

func (i NamedResourcesResourcesArgs) ToNamedResourcesResourcesPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesOutput).ToNamedResourcesResourcesPtrOutputWithContext(ctx)
}

// NamedResourcesResourcesPtrInput is an input type that accepts NamedResourcesResourcesArgs, NamedResourcesResourcesPtr and NamedResourcesResourcesPtrOutput values.
// You can construct a concrete instance of `NamedResourcesResourcesPtrInput` via:
//
//	        NamedResourcesResourcesArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesResourcesPtrInput interface {
	pulumi.Input

	ToNamedResourcesResourcesPtrOutput() NamedResourcesResourcesPtrOutput
	ToNamedResourcesResourcesPtrOutputWithContext(context.Context) NamedResourcesResourcesPtrOutput
}

type namedResourcesResourcesPtrType NamedResourcesResourcesArgs

func NamedResourcesResourcesPtr(v *NamedResourcesResourcesArgs) NamedResourcesResourcesPtrInput {
	return (*namedResourcesResourcesPtrType)(v)
}

func (*namedResourcesResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesResources)(nil)).Elem()
}

func (i *namedResourcesResourcesPtrType) ToNamedResourcesResourcesPtrOutput() NamedResourcesResourcesPtrOutput {
	return i.ToNamedResourcesResourcesPtrOutputWithContext(context.Background())
}

func (i *namedResourcesResourcesPtrType) ToNamedResourcesResourcesPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesPtrOutput)
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResourcesOutput struct{ *pulumi.OutputState }

func (NamedResourcesResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesResources)(nil)).Elem()
}

func (o NamedResourcesResourcesOutput) ToNamedResourcesResourcesOutput() NamedResourcesResourcesOutput {
	return o
}

func (o NamedResourcesResourcesOutput) ToNamedResourcesResourcesOutputWithContext(ctx context.Context) NamedResourcesResourcesOutput {
	return o
}

func (o NamedResourcesResourcesOutput) ToNamedResourcesResourcesPtrOutput() NamedResourcesResourcesPtrOutput {
	return o.ToNamedResourcesResourcesPtrOutputWithContext(context.Background())
}

func (o NamedResourcesResourcesOutput) ToNamedResourcesResourcesPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesResources) *NamedResourcesResources {
		return &v
	}).(NamedResourcesResourcesPtrOutput)
}

// The list of all individual resources instances currently available.
func (o NamedResourcesResourcesOutput) Instances() NamedResourcesInstanceArrayOutput {
	return o.ApplyT(func(v NamedResourcesResources) []NamedResourcesInstance { return v.Instances }).(NamedResourcesInstanceArrayOutput)
}

type NamedResourcesResourcesPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesResources)(nil)).Elem()
}

func (o NamedResourcesResourcesPtrOutput) ToNamedResourcesResourcesPtrOutput() NamedResourcesResourcesPtrOutput {
	return o
}

func (o NamedResourcesResourcesPtrOutput) ToNamedResourcesResourcesPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPtrOutput {
	return o
}

func (o NamedResourcesResourcesPtrOutput) Elem() NamedResourcesResourcesOutput {
	return o.ApplyT(func(v *NamedResourcesResources) NamedResourcesResources {
		if v != nil {
			return *v
		}
		var ret NamedResourcesResources
		return ret
	}).(NamedResourcesResourcesOutput)
}

// The list of all individual resources instances currently available.
func (o NamedResourcesResourcesPtrOutput) Instances() NamedResourcesInstanceArrayOutput {
	return o.ApplyT(func(v *NamedResourcesResources) []NamedResourcesInstance {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(NamedResourcesInstanceArrayOutput)
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResourcesPatch struct {
	// The list of all individual resources instances currently available.
	Instances []NamedResourcesInstancePatch `pulumi:"instances"`
}

// NamedResourcesResourcesPatchInput is an input type that accepts NamedResourcesResourcesPatchArgs and NamedResourcesResourcesPatchOutput values.
// You can construct a concrete instance of `NamedResourcesResourcesPatchInput` via:
//
//	NamedResourcesResourcesPatchArgs{...}
type NamedResourcesResourcesPatchInput interface {
	pulumi.Input

	ToNamedResourcesResourcesPatchOutput() NamedResourcesResourcesPatchOutput
	ToNamedResourcesResourcesPatchOutputWithContext(context.Context) NamedResourcesResourcesPatchOutput
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResourcesPatchArgs struct {
	// The list of all individual resources instances currently available.
	Instances NamedResourcesInstancePatchArrayInput `pulumi:"instances"`
}

func (NamedResourcesResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesResourcesPatch)(nil)).Elem()
}

func (i NamedResourcesResourcesPatchArgs) ToNamedResourcesResourcesPatchOutput() NamedResourcesResourcesPatchOutput {
	return i.ToNamedResourcesResourcesPatchOutputWithContext(context.Background())
}

func (i NamedResourcesResourcesPatchArgs) ToNamedResourcesResourcesPatchOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesPatchOutput)
}

func (i NamedResourcesResourcesPatchArgs) ToNamedResourcesResourcesPatchPtrOutput() NamedResourcesResourcesPatchPtrOutput {
	return i.ToNamedResourcesResourcesPatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesResourcesPatchArgs) ToNamedResourcesResourcesPatchPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesPatchOutput).ToNamedResourcesResourcesPatchPtrOutputWithContext(ctx)
}

// NamedResourcesResourcesPatchPtrInput is an input type that accepts NamedResourcesResourcesPatchArgs, NamedResourcesResourcesPatchPtr and NamedResourcesResourcesPatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesResourcesPatchPtrInput` via:
//
//	        NamedResourcesResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesResourcesPatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesResourcesPatchPtrOutput() NamedResourcesResourcesPatchPtrOutput
	ToNamedResourcesResourcesPatchPtrOutputWithContext(context.Context) NamedResourcesResourcesPatchPtrOutput
}

type namedResourcesResourcesPatchPtrType NamedResourcesResourcesPatchArgs

func NamedResourcesResourcesPatchPtr(v *NamedResourcesResourcesPatchArgs) NamedResourcesResourcesPatchPtrInput {
	return (*namedResourcesResourcesPatchPtrType)(v)
}

func (*namedResourcesResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesResourcesPatch)(nil)).Elem()
}

func (i *namedResourcesResourcesPatchPtrType) ToNamedResourcesResourcesPatchPtrOutput() NamedResourcesResourcesPatchPtrOutput {
	return i.ToNamedResourcesResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesResourcesPatchPtrType) ToNamedResourcesResourcesPatchPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesResourcesPatchPtrOutput)
}

// NamedResourcesResources is used in ResourceModel.
type NamedResourcesResourcesPatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesResourcesPatch)(nil)).Elem()
}

func (o NamedResourcesResourcesPatchOutput) ToNamedResourcesResourcesPatchOutput() NamedResourcesResourcesPatchOutput {
	return o
}

func (o NamedResourcesResourcesPatchOutput) ToNamedResourcesResourcesPatchOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchOutput {
	return o
}

func (o NamedResourcesResourcesPatchOutput) ToNamedResourcesResourcesPatchPtrOutput() NamedResourcesResourcesPatchPtrOutput {
	return o.ToNamedResourcesResourcesPatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesResourcesPatchOutput) ToNamedResourcesResourcesPatchPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesResourcesPatch) *NamedResourcesResourcesPatch {
		return &v
	}).(NamedResourcesResourcesPatchPtrOutput)
}

// The list of all individual resources instances currently available.
func (o NamedResourcesResourcesPatchOutput) Instances() NamedResourcesInstancePatchArrayOutput {
	return o.ApplyT(func(v NamedResourcesResourcesPatch) []NamedResourcesInstancePatch { return v.Instances }).(NamedResourcesInstancePatchArrayOutput)
}

type NamedResourcesResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesResourcesPatch)(nil)).Elem()
}

func (o NamedResourcesResourcesPatchPtrOutput) ToNamedResourcesResourcesPatchPtrOutput() NamedResourcesResourcesPatchPtrOutput {
	return o
}

func (o NamedResourcesResourcesPatchPtrOutput) ToNamedResourcesResourcesPatchPtrOutputWithContext(ctx context.Context) NamedResourcesResourcesPatchPtrOutput {
	return o
}

func (o NamedResourcesResourcesPatchPtrOutput) Elem() NamedResourcesResourcesPatchOutput {
	return o.ApplyT(func(v *NamedResourcesResourcesPatch) NamedResourcesResourcesPatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesResourcesPatch
		return ret
	}).(NamedResourcesResourcesPatchOutput)
}

// The list of all individual resources instances currently available.
func (o NamedResourcesResourcesPatchPtrOutput) Instances() NamedResourcesInstancePatchArrayOutput {
	return o.ApplyT(func(v *NamedResourcesResourcesPatch) []NamedResourcesInstancePatch {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(NamedResourcesInstancePatchArrayOutput)
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSlice struct {
	// Strings is the slice of strings.
	Strings []string `pulumi:"strings"`
}

// NamedResourcesStringSliceInput is an input type that accepts NamedResourcesStringSliceArgs and NamedResourcesStringSliceOutput values.
// You can construct a concrete instance of `NamedResourcesStringSliceInput` via:
//
//	NamedResourcesStringSliceArgs{...}
type NamedResourcesStringSliceInput interface {
	pulumi.Input

	ToNamedResourcesStringSliceOutput() NamedResourcesStringSliceOutput
	ToNamedResourcesStringSliceOutputWithContext(context.Context) NamedResourcesStringSliceOutput
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSliceArgs struct {
	// Strings is the slice of strings.
	Strings pulumi.StringArrayInput `pulumi:"strings"`
}

func (NamedResourcesStringSliceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesStringSlice)(nil)).Elem()
}

func (i NamedResourcesStringSliceArgs) ToNamedResourcesStringSliceOutput() NamedResourcesStringSliceOutput {
	return i.ToNamedResourcesStringSliceOutputWithContext(context.Background())
}

func (i NamedResourcesStringSliceArgs) ToNamedResourcesStringSliceOutputWithContext(ctx context.Context) NamedResourcesStringSliceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSliceOutput)
}

func (i NamedResourcesStringSliceArgs) ToNamedResourcesStringSlicePtrOutput() NamedResourcesStringSlicePtrOutput {
	return i.ToNamedResourcesStringSlicePtrOutputWithContext(context.Background())
}

func (i NamedResourcesStringSliceArgs) ToNamedResourcesStringSlicePtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSliceOutput).ToNamedResourcesStringSlicePtrOutputWithContext(ctx)
}

// NamedResourcesStringSlicePtrInput is an input type that accepts NamedResourcesStringSliceArgs, NamedResourcesStringSlicePtr and NamedResourcesStringSlicePtrOutput values.
// You can construct a concrete instance of `NamedResourcesStringSlicePtrInput` via:
//
//	        NamedResourcesStringSliceArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesStringSlicePtrInput interface {
	pulumi.Input

	ToNamedResourcesStringSlicePtrOutput() NamedResourcesStringSlicePtrOutput
	ToNamedResourcesStringSlicePtrOutputWithContext(context.Context) NamedResourcesStringSlicePtrOutput
}

type namedResourcesStringSlicePtrType NamedResourcesStringSliceArgs

func NamedResourcesStringSlicePtr(v *NamedResourcesStringSliceArgs) NamedResourcesStringSlicePtrInput {
	return (*namedResourcesStringSlicePtrType)(v)
}

func (*namedResourcesStringSlicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesStringSlice)(nil)).Elem()
}

func (i *namedResourcesStringSlicePtrType) ToNamedResourcesStringSlicePtrOutput() NamedResourcesStringSlicePtrOutput {
	return i.ToNamedResourcesStringSlicePtrOutputWithContext(context.Background())
}

func (i *namedResourcesStringSlicePtrType) ToNamedResourcesStringSlicePtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSlicePtrOutput)
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSliceOutput struct{ *pulumi.OutputState }

func (NamedResourcesStringSliceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesStringSlice)(nil)).Elem()
}

func (o NamedResourcesStringSliceOutput) ToNamedResourcesStringSliceOutput() NamedResourcesStringSliceOutput {
	return o
}

func (o NamedResourcesStringSliceOutput) ToNamedResourcesStringSliceOutputWithContext(ctx context.Context) NamedResourcesStringSliceOutput {
	return o
}

func (o NamedResourcesStringSliceOutput) ToNamedResourcesStringSlicePtrOutput() NamedResourcesStringSlicePtrOutput {
	return o.ToNamedResourcesStringSlicePtrOutputWithContext(context.Background())
}

func (o NamedResourcesStringSliceOutput) ToNamedResourcesStringSlicePtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesStringSlice) *NamedResourcesStringSlice {
		return &v
	}).(NamedResourcesStringSlicePtrOutput)
}

// Strings is the slice of strings.
func (o NamedResourcesStringSliceOutput) Strings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedResourcesStringSlice) []string { return v.Strings }).(pulumi.StringArrayOutput)
}

type NamedResourcesStringSlicePtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesStringSlicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesStringSlice)(nil)).Elem()
}

func (o NamedResourcesStringSlicePtrOutput) ToNamedResourcesStringSlicePtrOutput() NamedResourcesStringSlicePtrOutput {
	return o
}

func (o NamedResourcesStringSlicePtrOutput) ToNamedResourcesStringSlicePtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePtrOutput {
	return o
}

func (o NamedResourcesStringSlicePtrOutput) Elem() NamedResourcesStringSliceOutput {
	return o.ApplyT(func(v *NamedResourcesStringSlice) NamedResourcesStringSlice {
		if v != nil {
			return *v
		}
		var ret NamedResourcesStringSlice
		return ret
	}).(NamedResourcesStringSliceOutput)
}

// Strings is the slice of strings.
func (o NamedResourcesStringSlicePtrOutput) Strings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamedResourcesStringSlice) []string {
		if v == nil {
			return nil
		}
		return v.Strings
	}).(pulumi.StringArrayOutput)
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSlicePatch struct {
	// Strings is the slice of strings.
	Strings []string `pulumi:"strings"`
}

// NamedResourcesStringSlicePatchInput is an input type that accepts NamedResourcesStringSlicePatchArgs and NamedResourcesStringSlicePatchOutput values.
// You can construct a concrete instance of `NamedResourcesStringSlicePatchInput` via:
//
//	NamedResourcesStringSlicePatchArgs{...}
type NamedResourcesStringSlicePatchInput interface {
	pulumi.Input

	ToNamedResourcesStringSlicePatchOutput() NamedResourcesStringSlicePatchOutput
	ToNamedResourcesStringSlicePatchOutputWithContext(context.Context) NamedResourcesStringSlicePatchOutput
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSlicePatchArgs struct {
	// Strings is the slice of strings.
	Strings pulumi.StringArrayInput `pulumi:"strings"`
}

func (NamedResourcesStringSlicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesStringSlicePatch)(nil)).Elem()
}

func (i NamedResourcesStringSlicePatchArgs) ToNamedResourcesStringSlicePatchOutput() NamedResourcesStringSlicePatchOutput {
	return i.ToNamedResourcesStringSlicePatchOutputWithContext(context.Background())
}

func (i NamedResourcesStringSlicePatchArgs) ToNamedResourcesStringSlicePatchOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSlicePatchOutput)
}

func (i NamedResourcesStringSlicePatchArgs) ToNamedResourcesStringSlicePatchPtrOutput() NamedResourcesStringSlicePatchPtrOutput {
	return i.ToNamedResourcesStringSlicePatchPtrOutputWithContext(context.Background())
}

func (i NamedResourcesStringSlicePatchArgs) ToNamedResourcesStringSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSlicePatchOutput).ToNamedResourcesStringSlicePatchPtrOutputWithContext(ctx)
}

// NamedResourcesStringSlicePatchPtrInput is an input type that accepts NamedResourcesStringSlicePatchArgs, NamedResourcesStringSlicePatchPtr and NamedResourcesStringSlicePatchPtrOutput values.
// You can construct a concrete instance of `NamedResourcesStringSlicePatchPtrInput` via:
//
//	        NamedResourcesStringSlicePatchArgs{...}
//
//	or:
//
//	        nil
type NamedResourcesStringSlicePatchPtrInput interface {
	pulumi.Input

	ToNamedResourcesStringSlicePatchPtrOutput() NamedResourcesStringSlicePatchPtrOutput
	ToNamedResourcesStringSlicePatchPtrOutputWithContext(context.Context) NamedResourcesStringSlicePatchPtrOutput
}

type namedResourcesStringSlicePatchPtrType NamedResourcesStringSlicePatchArgs

func NamedResourcesStringSlicePatchPtr(v *NamedResourcesStringSlicePatchArgs) NamedResourcesStringSlicePatchPtrInput {
	return (*namedResourcesStringSlicePatchPtrType)(v)
}

func (*namedResourcesStringSlicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesStringSlicePatch)(nil)).Elem()
}

func (i *namedResourcesStringSlicePatchPtrType) ToNamedResourcesStringSlicePatchPtrOutput() NamedResourcesStringSlicePatchPtrOutput {
	return i.ToNamedResourcesStringSlicePatchPtrOutputWithContext(context.Background())
}

func (i *namedResourcesStringSlicePatchPtrType) ToNamedResourcesStringSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedResourcesStringSlicePatchPtrOutput)
}

// NamedResourcesStringSlice contains a slice of strings.
type NamedResourcesStringSlicePatchOutput struct{ *pulumi.OutputState }

func (NamedResourcesStringSlicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedResourcesStringSlicePatch)(nil)).Elem()
}

func (o NamedResourcesStringSlicePatchOutput) ToNamedResourcesStringSlicePatchOutput() NamedResourcesStringSlicePatchOutput {
	return o
}

func (o NamedResourcesStringSlicePatchOutput) ToNamedResourcesStringSlicePatchOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchOutput {
	return o
}

func (o NamedResourcesStringSlicePatchOutput) ToNamedResourcesStringSlicePatchPtrOutput() NamedResourcesStringSlicePatchPtrOutput {
	return o.ToNamedResourcesStringSlicePatchPtrOutputWithContext(context.Background())
}

func (o NamedResourcesStringSlicePatchOutput) ToNamedResourcesStringSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamedResourcesStringSlicePatch) *NamedResourcesStringSlicePatch {
		return &v
	}).(NamedResourcesStringSlicePatchPtrOutput)
}

// Strings is the slice of strings.
func (o NamedResourcesStringSlicePatchOutput) Strings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedResourcesStringSlicePatch) []string { return v.Strings }).(pulumi.StringArrayOutput)
}

type NamedResourcesStringSlicePatchPtrOutput struct{ *pulumi.OutputState }

func (NamedResourcesStringSlicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedResourcesStringSlicePatch)(nil)).Elem()
}

func (o NamedResourcesStringSlicePatchPtrOutput) ToNamedResourcesStringSlicePatchPtrOutput() NamedResourcesStringSlicePatchPtrOutput {
	return o
}

func (o NamedResourcesStringSlicePatchPtrOutput) ToNamedResourcesStringSlicePatchPtrOutputWithContext(ctx context.Context) NamedResourcesStringSlicePatchPtrOutput {
	return o
}

func (o NamedResourcesStringSlicePatchPtrOutput) Elem() NamedResourcesStringSlicePatchOutput {
	return o.ApplyT(func(v *NamedResourcesStringSlicePatch) NamedResourcesStringSlicePatch {
		if v != nil {
			return *v
		}
		var ret NamedResourcesStringSlicePatch
		return ret
	}).(NamedResourcesStringSlicePatchOutput)
}

// Strings is the slice of strings.
func (o NamedResourcesStringSlicePatchPtrOutput) Strings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamedResourcesStringSlicePatch) []string {
		if v == nil {
			return nil
		}
		return v.Strings
	}).(pulumi.StringArrayOutput)
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingContextSpec `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status *PodSchedulingContextStatus `pulumi:"status"`
}

// PodSchedulingContextTypeInput is an input type that accepts PodSchedulingContextTypeArgs and PodSchedulingContextTypeOutput values.
// You can construct a concrete instance of `PodSchedulingContextTypeInput` via:
//
//	PodSchedulingContextTypeArgs{...}
type PodSchedulingContextTypeInput interface {
	pulumi.Input

	ToPodSchedulingContextTypeOutput() PodSchedulingContextTypeOutput
	ToPodSchedulingContextTypeOutputWithContext(context.Context) PodSchedulingContextTypeOutput
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingContextSpecInput `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status PodSchedulingContextStatusPtrInput `pulumi:"status"`
}

func (PodSchedulingContextTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextType)(nil)).Elem()
}

func (i PodSchedulingContextTypeArgs) ToPodSchedulingContextTypeOutput() PodSchedulingContextTypeOutput {
	return i.ToPodSchedulingContextTypeOutputWithContext(context.Background())
}

func (i PodSchedulingContextTypeArgs) ToPodSchedulingContextTypeOutputWithContext(ctx context.Context) PodSchedulingContextTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextTypeOutput)
}

// PodSchedulingContextTypeArrayInput is an input type that accepts PodSchedulingContextTypeArray and PodSchedulingContextTypeArrayOutput values.
// You can construct a concrete instance of `PodSchedulingContextTypeArrayInput` via:
//
//	PodSchedulingContextTypeArray{ PodSchedulingContextTypeArgs{...} }
type PodSchedulingContextTypeArrayInput interface {
	pulumi.Input

	ToPodSchedulingContextTypeArrayOutput() PodSchedulingContextTypeArrayOutput
	ToPodSchedulingContextTypeArrayOutputWithContext(context.Context) PodSchedulingContextTypeArrayOutput
}

type PodSchedulingContextTypeArray []PodSchedulingContextTypeInput

func (PodSchedulingContextTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingContextType)(nil)).Elem()
}

func (i PodSchedulingContextTypeArray) ToPodSchedulingContextTypeArrayOutput() PodSchedulingContextTypeArrayOutput {
	return i.ToPodSchedulingContextTypeArrayOutputWithContext(context.Background())
}

func (i PodSchedulingContextTypeArray) ToPodSchedulingContextTypeArrayOutputWithContext(ctx context.Context) PodSchedulingContextTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextTypeArrayOutput)
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextType)(nil)).Elem()
}

func (o PodSchedulingContextTypeOutput) ToPodSchedulingContextTypeOutput() PodSchedulingContextTypeOutput {
	return o
}

func (o PodSchedulingContextTypeOutput) ToPodSchedulingContextTypeOutputWithContext(ctx context.Context) PodSchedulingContextTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingContextTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingContextTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o PodSchedulingContextTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec describes where resources for the Pod are needed.
func (o PodSchedulingContextTypeOutput) Spec() PodSchedulingContextSpecOutput {
	return o.ApplyT(func(v PodSchedulingContextType) PodSchedulingContextSpec { return v.Spec }).(PodSchedulingContextSpecOutput)
}

// Status describes where resources for the Pod can be allocated.
func (o PodSchedulingContextTypeOutput) Status() PodSchedulingContextStatusPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextType) *PodSchedulingContextStatus { return v.Status }).(PodSchedulingContextStatusPtrOutput)
}

type PodSchedulingContextTypeArrayOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingContextType)(nil)).Elem()
}

func (o PodSchedulingContextTypeArrayOutput) ToPodSchedulingContextTypeArrayOutput() PodSchedulingContextTypeArrayOutput {
	return o
}

func (o PodSchedulingContextTypeArrayOutput) ToPodSchedulingContextTypeArrayOutputWithContext(ctx context.Context) PodSchedulingContextTypeArrayOutput {
	return o
}

func (o PodSchedulingContextTypeArrayOutput) Index(i pulumi.IntInput) PodSchedulingContextTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSchedulingContextType {
		return vs[0].([]PodSchedulingContextType)[vs[1].(int)]
	}).(PodSchedulingContextTypeOutput)
}

// PodSchedulingContextList is a collection of Pod scheduling objects.
type PodSchedulingContextListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of PodSchedulingContext objects.
	Items []PodSchedulingContextType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodSchedulingContextListTypeInput is an input type that accepts PodSchedulingContextListTypeArgs and PodSchedulingContextListTypeOutput values.
// You can construct a concrete instance of `PodSchedulingContextListTypeInput` via:
//
//	PodSchedulingContextListTypeArgs{...}
type PodSchedulingContextListTypeInput interface {
	pulumi.Input

	ToPodSchedulingContextListTypeOutput() PodSchedulingContextListTypeOutput
	ToPodSchedulingContextListTypeOutputWithContext(context.Context) PodSchedulingContextListTypeOutput
}

// PodSchedulingContextList is a collection of Pod scheduling objects.
type PodSchedulingContextListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of PodSchedulingContext objects.
	Items PodSchedulingContextTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodSchedulingContextListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextListType)(nil)).Elem()
}

func (i PodSchedulingContextListTypeArgs) ToPodSchedulingContextListTypeOutput() PodSchedulingContextListTypeOutput {
	return i.ToPodSchedulingContextListTypeOutputWithContext(context.Background())
}

func (i PodSchedulingContextListTypeArgs) ToPodSchedulingContextListTypeOutputWithContext(ctx context.Context) PodSchedulingContextListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextListTypeOutput)
}

// PodSchedulingContextList is a collection of Pod scheduling objects.
type PodSchedulingContextListTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextListType)(nil)).Elem()
}

func (o PodSchedulingContextListTypeOutput) ToPodSchedulingContextListTypeOutput() PodSchedulingContextListTypeOutput {
	return o
}

func (o PodSchedulingContextListTypeOutput) ToPodSchedulingContextListTypeOutputWithContext(ctx context.Context) PodSchedulingContextListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingContextListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of PodSchedulingContext objects.
func (o PodSchedulingContextListTypeOutput) Items() PodSchedulingContextTypeArrayOutput {
	return o.ApplyT(func(v PodSchedulingContextListType) []PodSchedulingContextType { return v.Items }).(PodSchedulingContextTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingContextListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o PodSchedulingContextListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec *PodSchedulingContextSpecPatch `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status *PodSchedulingContextStatusPatch `pulumi:"status"`
}

// PodSchedulingContextPatchTypeInput is an input type that accepts PodSchedulingContextPatchTypeArgs and PodSchedulingContextPatchTypeOutput values.
// You can construct a concrete instance of `PodSchedulingContextPatchTypeInput` via:
//
//	PodSchedulingContextPatchTypeArgs{...}
type PodSchedulingContextPatchTypeInput interface {
	pulumi.Input

	ToPodSchedulingContextPatchTypeOutput() PodSchedulingContextPatchTypeOutput
	ToPodSchedulingContextPatchTypeOutputWithContext(context.Context) PodSchedulingContextPatchTypeOutput
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingContextSpecPatchPtrInput `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status PodSchedulingContextStatusPatchPtrInput `pulumi:"status"`
}

func (PodSchedulingContextPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextPatchType)(nil)).Elem()
}

func (i PodSchedulingContextPatchTypeArgs) ToPodSchedulingContextPatchTypeOutput() PodSchedulingContextPatchTypeOutput {
	return i.ToPodSchedulingContextPatchTypeOutputWithContext(context.Background())
}

func (i PodSchedulingContextPatchTypeArgs) ToPodSchedulingContextPatchTypeOutputWithContext(ctx context.Context) PodSchedulingContextPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextPatchTypeOutput)
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingContextPatchTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextPatchType)(nil)).Elem()
}

func (o PodSchedulingContextPatchTypeOutput) ToPodSchedulingContextPatchTypeOutput() PodSchedulingContextPatchTypeOutput {
	return o
}

func (o PodSchedulingContextPatchTypeOutput) ToPodSchedulingContextPatchTypeOutputWithContext(ctx context.Context) PodSchedulingContextPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingContextPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingContextPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o PodSchedulingContextPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec describes where resources for the Pod are needed.
func (o PodSchedulingContextPatchTypeOutput) Spec() PodSchedulingContextSpecPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextPatchType) *PodSchedulingContextSpecPatch { return v.Spec }).(PodSchedulingContextSpecPatchPtrOutput)
}

// Status describes where resources for the Pod can be allocated.
func (o PodSchedulingContextPatchTypeOutput) Status() PodSchedulingContextStatusPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextPatchType) *PodSchedulingContextStatusPatch { return v.Status }).(PodSchedulingContextStatusPatchPtrOutput)
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpec struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []string `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `pulumi:"selectedNode"`
}

// PodSchedulingContextSpecInput is an input type that accepts PodSchedulingContextSpecArgs and PodSchedulingContextSpecOutput values.
// You can construct a concrete instance of `PodSchedulingContextSpecInput` via:
//
//	PodSchedulingContextSpecArgs{...}
type PodSchedulingContextSpecInput interface {
	pulumi.Input

	ToPodSchedulingContextSpecOutput() PodSchedulingContextSpecOutput
	ToPodSchedulingContextSpecOutputWithContext(context.Context) PodSchedulingContextSpecOutput
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpecArgs struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes pulumi.StringArrayInput `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode pulumi.StringPtrInput `pulumi:"selectedNode"`
}

func (PodSchedulingContextSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextSpec)(nil)).Elem()
}

func (i PodSchedulingContextSpecArgs) ToPodSchedulingContextSpecOutput() PodSchedulingContextSpecOutput {
	return i.ToPodSchedulingContextSpecOutputWithContext(context.Background())
}

func (i PodSchedulingContextSpecArgs) ToPodSchedulingContextSpecOutputWithContext(ctx context.Context) PodSchedulingContextSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextSpecOutput)
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpecOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextSpec)(nil)).Elem()
}

func (o PodSchedulingContextSpecOutput) ToPodSchedulingContextSpecOutput() PodSchedulingContextSpecOutput {
	return o
}

func (o PodSchedulingContextSpecOutput) ToPodSchedulingContextSpecOutputWithContext(ctx context.Context) PodSchedulingContextSpecOutput {
	return o
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingContextSpecOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSchedulingContextSpec) []string { return v.PotentialNodes }).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingContextSpecOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextSpec) *string { return v.SelectedNode }).(pulumi.StringPtrOutput)
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpecPatch struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []string `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `pulumi:"selectedNode"`
}

// PodSchedulingContextSpecPatchInput is an input type that accepts PodSchedulingContextSpecPatchArgs and PodSchedulingContextSpecPatchOutput values.
// You can construct a concrete instance of `PodSchedulingContextSpecPatchInput` via:
//
//	PodSchedulingContextSpecPatchArgs{...}
type PodSchedulingContextSpecPatchInput interface {
	pulumi.Input

	ToPodSchedulingContextSpecPatchOutput() PodSchedulingContextSpecPatchOutput
	ToPodSchedulingContextSpecPatchOutputWithContext(context.Context) PodSchedulingContextSpecPatchOutput
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpecPatchArgs struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes pulumi.StringArrayInput `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode pulumi.StringPtrInput `pulumi:"selectedNode"`
}

func (PodSchedulingContextSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextSpecPatch)(nil)).Elem()
}

func (i PodSchedulingContextSpecPatchArgs) ToPodSchedulingContextSpecPatchOutput() PodSchedulingContextSpecPatchOutput {
	return i.ToPodSchedulingContextSpecPatchOutputWithContext(context.Background())
}

func (i PodSchedulingContextSpecPatchArgs) ToPodSchedulingContextSpecPatchOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextSpecPatchOutput)
}

func (i PodSchedulingContextSpecPatchArgs) ToPodSchedulingContextSpecPatchPtrOutput() PodSchedulingContextSpecPatchPtrOutput {
	return i.ToPodSchedulingContextSpecPatchPtrOutputWithContext(context.Background())
}

func (i PodSchedulingContextSpecPatchArgs) ToPodSchedulingContextSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextSpecPatchOutput).ToPodSchedulingContextSpecPatchPtrOutputWithContext(ctx)
}

// PodSchedulingContextSpecPatchPtrInput is an input type that accepts PodSchedulingContextSpecPatchArgs, PodSchedulingContextSpecPatchPtr and PodSchedulingContextSpecPatchPtrOutput values.
// You can construct a concrete instance of `PodSchedulingContextSpecPatchPtrInput` via:
//
//	        PodSchedulingContextSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingContextSpecPatchPtrInput interface {
	pulumi.Input

	ToPodSchedulingContextSpecPatchPtrOutput() PodSchedulingContextSpecPatchPtrOutput
	ToPodSchedulingContextSpecPatchPtrOutputWithContext(context.Context) PodSchedulingContextSpecPatchPtrOutput
}

type podSchedulingContextSpecPatchPtrType PodSchedulingContextSpecPatchArgs

func PodSchedulingContextSpecPatchPtr(v *PodSchedulingContextSpecPatchArgs) PodSchedulingContextSpecPatchPtrInput {
	return (*podSchedulingContextSpecPatchPtrType)(v)
}

func (*podSchedulingContextSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextSpecPatch)(nil)).Elem()
}

func (i *podSchedulingContextSpecPatchPtrType) ToPodSchedulingContextSpecPatchPtrOutput() PodSchedulingContextSpecPatchPtrOutput {
	return i.ToPodSchedulingContextSpecPatchPtrOutputWithContext(context.Background())
}

func (i *podSchedulingContextSpecPatchPtrType) ToPodSchedulingContextSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextSpecPatchPtrOutput)
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type PodSchedulingContextSpecPatchOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextSpecPatch)(nil)).Elem()
}

func (o PodSchedulingContextSpecPatchOutput) ToPodSchedulingContextSpecPatchOutput() PodSchedulingContextSpecPatchOutput {
	return o
}

func (o PodSchedulingContextSpecPatchOutput) ToPodSchedulingContextSpecPatchOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchOutput {
	return o
}

func (o PodSchedulingContextSpecPatchOutput) ToPodSchedulingContextSpecPatchPtrOutput() PodSchedulingContextSpecPatchPtrOutput {
	return o.ToPodSchedulingContextSpecPatchPtrOutputWithContext(context.Background())
}

func (o PodSchedulingContextSpecPatchOutput) ToPodSchedulingContextSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingContextSpecPatch) *PodSchedulingContextSpecPatch {
		return &v
	}).(PodSchedulingContextSpecPatchPtrOutput)
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingContextSpecPatchOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSchedulingContextSpecPatch) []string { return v.PotentialNodes }).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingContextSpecPatchOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingContextSpecPatch) *string { return v.SelectedNode }).(pulumi.StringPtrOutput)
}

type PodSchedulingContextSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextSpecPatch)(nil)).Elem()
}

func (o PodSchedulingContextSpecPatchPtrOutput) ToPodSchedulingContextSpecPatchPtrOutput() PodSchedulingContextSpecPatchPtrOutput {
	return o
}

func (o PodSchedulingContextSpecPatchPtrOutput) ToPodSchedulingContextSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextSpecPatchPtrOutput {
	return o
}

func (o PodSchedulingContextSpecPatchPtrOutput) Elem() PodSchedulingContextSpecPatchOutput {
	return o.ApplyT(func(v *PodSchedulingContextSpecPatch) PodSchedulingContextSpecPatch {
		if v != nil {
			return *v
		}
		var ret PodSchedulingContextSpecPatch
		return ret
	}).(PodSchedulingContextSpecPatchOutput)
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingContextSpecPatchPtrOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSchedulingContextSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.PotentialNodes
	}).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingContextSpecPatchPtrOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSchedulingContextSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SelectedNode
	}).(pulumi.StringPtrOutput)
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatus struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []ResourceClaimSchedulingStatus `pulumi:"resourceClaims"`
}

// PodSchedulingContextStatusInput is an input type that accepts PodSchedulingContextStatusArgs and PodSchedulingContextStatusOutput values.
// You can construct a concrete instance of `PodSchedulingContextStatusInput` via:
//
//	PodSchedulingContextStatusArgs{...}
type PodSchedulingContextStatusInput interface {
	pulumi.Input

	ToPodSchedulingContextStatusOutput() PodSchedulingContextStatusOutput
	ToPodSchedulingContextStatusOutputWithContext(context.Context) PodSchedulingContextStatusOutput
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatusArgs struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims ResourceClaimSchedulingStatusArrayInput `pulumi:"resourceClaims"`
}

func (PodSchedulingContextStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextStatus)(nil)).Elem()
}

func (i PodSchedulingContextStatusArgs) ToPodSchedulingContextStatusOutput() PodSchedulingContextStatusOutput {
	return i.ToPodSchedulingContextStatusOutputWithContext(context.Background())
}

func (i PodSchedulingContextStatusArgs) ToPodSchedulingContextStatusOutputWithContext(ctx context.Context) PodSchedulingContextStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusOutput)
}

func (i PodSchedulingContextStatusArgs) ToPodSchedulingContextStatusPtrOutput() PodSchedulingContextStatusPtrOutput {
	return i.ToPodSchedulingContextStatusPtrOutputWithContext(context.Background())
}

func (i PodSchedulingContextStatusArgs) ToPodSchedulingContextStatusPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusOutput).ToPodSchedulingContextStatusPtrOutputWithContext(ctx)
}

// PodSchedulingContextStatusPtrInput is an input type that accepts PodSchedulingContextStatusArgs, PodSchedulingContextStatusPtr and PodSchedulingContextStatusPtrOutput values.
// You can construct a concrete instance of `PodSchedulingContextStatusPtrInput` via:
//
//	        PodSchedulingContextStatusArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingContextStatusPtrInput interface {
	pulumi.Input

	ToPodSchedulingContextStatusPtrOutput() PodSchedulingContextStatusPtrOutput
	ToPodSchedulingContextStatusPtrOutputWithContext(context.Context) PodSchedulingContextStatusPtrOutput
}

type podSchedulingContextStatusPtrType PodSchedulingContextStatusArgs

func PodSchedulingContextStatusPtr(v *PodSchedulingContextStatusArgs) PodSchedulingContextStatusPtrInput {
	return (*podSchedulingContextStatusPtrType)(v)
}

func (*podSchedulingContextStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextStatus)(nil)).Elem()
}

func (i *podSchedulingContextStatusPtrType) ToPodSchedulingContextStatusPtrOutput() PodSchedulingContextStatusPtrOutput {
	return i.ToPodSchedulingContextStatusPtrOutputWithContext(context.Background())
}

func (i *podSchedulingContextStatusPtrType) ToPodSchedulingContextStatusPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusPtrOutput)
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatusOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextStatus)(nil)).Elem()
}

func (o PodSchedulingContextStatusOutput) ToPodSchedulingContextStatusOutput() PodSchedulingContextStatusOutput {
	return o
}

func (o PodSchedulingContextStatusOutput) ToPodSchedulingContextStatusOutputWithContext(ctx context.Context) PodSchedulingContextStatusOutput {
	return o
}

func (o PodSchedulingContextStatusOutput) ToPodSchedulingContextStatusPtrOutput() PodSchedulingContextStatusPtrOutput {
	return o.ToPodSchedulingContextStatusPtrOutputWithContext(context.Background())
}

func (o PodSchedulingContextStatusOutput) ToPodSchedulingContextStatusPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingContextStatus) *PodSchedulingContextStatus {
		return &v
	}).(PodSchedulingContextStatusPtrOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingContextStatusOutput) ResourceClaims() ResourceClaimSchedulingStatusArrayOutput {
	return o.ApplyT(func(v PodSchedulingContextStatus) []ResourceClaimSchedulingStatus { return v.ResourceClaims }).(ResourceClaimSchedulingStatusArrayOutput)
}

type PodSchedulingContextStatusPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextStatus)(nil)).Elem()
}

func (o PodSchedulingContextStatusPtrOutput) ToPodSchedulingContextStatusPtrOutput() PodSchedulingContextStatusPtrOutput {
	return o
}

func (o PodSchedulingContextStatusPtrOutput) ToPodSchedulingContextStatusPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPtrOutput {
	return o
}

func (o PodSchedulingContextStatusPtrOutput) Elem() PodSchedulingContextStatusOutput {
	return o.ApplyT(func(v *PodSchedulingContextStatus) PodSchedulingContextStatus {
		if v != nil {
			return *v
		}
		var ret PodSchedulingContextStatus
		return ret
	}).(PodSchedulingContextStatusOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingContextStatusPtrOutput) ResourceClaims() ResourceClaimSchedulingStatusArrayOutput {
	return o.ApplyT(func(v *PodSchedulingContextStatus) []ResourceClaimSchedulingStatus {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(ResourceClaimSchedulingStatusArrayOutput)
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatusPatch struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []ResourceClaimSchedulingStatusPatch `pulumi:"resourceClaims"`
}

// PodSchedulingContextStatusPatchInput is an input type that accepts PodSchedulingContextStatusPatchArgs and PodSchedulingContextStatusPatchOutput values.
// You can construct a concrete instance of `PodSchedulingContextStatusPatchInput` via:
//
//	PodSchedulingContextStatusPatchArgs{...}
type PodSchedulingContextStatusPatchInput interface {
	pulumi.Input

	ToPodSchedulingContextStatusPatchOutput() PodSchedulingContextStatusPatchOutput
	ToPodSchedulingContextStatusPatchOutputWithContext(context.Context) PodSchedulingContextStatusPatchOutput
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatusPatchArgs struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims ResourceClaimSchedulingStatusPatchArrayInput `pulumi:"resourceClaims"`
}

func (PodSchedulingContextStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextStatusPatch)(nil)).Elem()
}

func (i PodSchedulingContextStatusPatchArgs) ToPodSchedulingContextStatusPatchOutput() PodSchedulingContextStatusPatchOutput {
	return i.ToPodSchedulingContextStatusPatchOutputWithContext(context.Background())
}

func (i PodSchedulingContextStatusPatchArgs) ToPodSchedulingContextStatusPatchOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusPatchOutput)
}

func (i PodSchedulingContextStatusPatchArgs) ToPodSchedulingContextStatusPatchPtrOutput() PodSchedulingContextStatusPatchPtrOutput {
	return i.ToPodSchedulingContextStatusPatchPtrOutputWithContext(context.Background())
}

func (i PodSchedulingContextStatusPatchArgs) ToPodSchedulingContextStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusPatchOutput).ToPodSchedulingContextStatusPatchPtrOutputWithContext(ctx)
}

// PodSchedulingContextStatusPatchPtrInput is an input type that accepts PodSchedulingContextStatusPatchArgs, PodSchedulingContextStatusPatchPtr and PodSchedulingContextStatusPatchPtrOutput values.
// You can construct a concrete instance of `PodSchedulingContextStatusPatchPtrInput` via:
//
//	        PodSchedulingContextStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingContextStatusPatchPtrInput interface {
	pulumi.Input

	ToPodSchedulingContextStatusPatchPtrOutput() PodSchedulingContextStatusPatchPtrOutput
	ToPodSchedulingContextStatusPatchPtrOutputWithContext(context.Context) PodSchedulingContextStatusPatchPtrOutput
}

type podSchedulingContextStatusPatchPtrType PodSchedulingContextStatusPatchArgs

func PodSchedulingContextStatusPatchPtr(v *PodSchedulingContextStatusPatchArgs) PodSchedulingContextStatusPatchPtrInput {
	return (*podSchedulingContextStatusPatchPtrType)(v)
}

func (*podSchedulingContextStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextStatusPatch)(nil)).Elem()
}

func (i *podSchedulingContextStatusPatchPtrType) ToPodSchedulingContextStatusPatchPtrOutput() PodSchedulingContextStatusPatchPtrOutput {
	return i.ToPodSchedulingContextStatusPatchPtrOutputWithContext(context.Background())
}

func (i *podSchedulingContextStatusPatchPtrType) ToPodSchedulingContextStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingContextStatusPatchPtrOutput)
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type PodSchedulingContextStatusPatchOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingContextStatusPatch)(nil)).Elem()
}

func (o PodSchedulingContextStatusPatchOutput) ToPodSchedulingContextStatusPatchOutput() PodSchedulingContextStatusPatchOutput {
	return o
}

func (o PodSchedulingContextStatusPatchOutput) ToPodSchedulingContextStatusPatchOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchOutput {
	return o
}

func (o PodSchedulingContextStatusPatchOutput) ToPodSchedulingContextStatusPatchPtrOutput() PodSchedulingContextStatusPatchPtrOutput {
	return o.ToPodSchedulingContextStatusPatchPtrOutputWithContext(context.Background())
}

func (o PodSchedulingContextStatusPatchOutput) ToPodSchedulingContextStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingContextStatusPatch) *PodSchedulingContextStatusPatch {
		return &v
	}).(PodSchedulingContextStatusPatchPtrOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingContextStatusPatchOutput) ResourceClaims() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o.ApplyT(func(v PodSchedulingContextStatusPatch) []ResourceClaimSchedulingStatusPatch { return v.ResourceClaims }).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

type PodSchedulingContextStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingContextStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingContextStatusPatch)(nil)).Elem()
}

func (o PodSchedulingContextStatusPatchPtrOutput) ToPodSchedulingContextStatusPatchPtrOutput() PodSchedulingContextStatusPatchPtrOutput {
	return o
}

func (o PodSchedulingContextStatusPatchPtrOutput) ToPodSchedulingContextStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingContextStatusPatchPtrOutput {
	return o
}

func (o PodSchedulingContextStatusPatchPtrOutput) Elem() PodSchedulingContextStatusPatchOutput {
	return o.ApplyT(func(v *PodSchedulingContextStatusPatch) PodSchedulingContextStatusPatch {
		if v != nil {
			return *v
		}
		var ret PodSchedulingContextStatusPatch
		return ret
	}).(PodSchedulingContextStatusPatchOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingContextStatusPatchPtrOutput) ResourceClaims() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o.ApplyT(func(v *PodSchedulingContextStatusPatch) []ResourceClaimSchedulingStatusPatch {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpec `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status *ResourceClaimStatus `pulumi:"status"`
}

// ResourceClaimTypeInput is an input type that accepts ResourceClaimTypeArgs and ResourceClaimTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTypeInput` via:
//
//	ResourceClaimTypeArgs{...}
type ResourceClaimTypeInput interface {
	pulumi.Input

	ToResourceClaimTypeOutput() ResourceClaimTypeOutput
	ToResourceClaimTypeOutputWithContext(context.Context) ResourceClaimTypeOutput
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpecInput `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status ResourceClaimStatusPtrInput `pulumi:"status"`
}

func (ResourceClaimTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimType)(nil)).Elem()
}

func (i ResourceClaimTypeArgs) ToResourceClaimTypeOutput() ResourceClaimTypeOutput {
	return i.ToResourceClaimTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTypeArgs) ToResourceClaimTypeOutputWithContext(ctx context.Context) ResourceClaimTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTypeOutput)
}

// ResourceClaimTypeArrayInput is an input type that accepts ResourceClaimTypeArray and ResourceClaimTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClaimTypeArrayInput` via:
//
//	ResourceClaimTypeArray{ ResourceClaimTypeArgs{...} }
type ResourceClaimTypeArrayInput interface {
	pulumi.Input

	ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput
	ToResourceClaimTypeArrayOutputWithContext(context.Context) ResourceClaimTypeArrayOutput
}

type ResourceClaimTypeArray []ResourceClaimTypeInput

func (ResourceClaimTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimType)(nil)).Elem()
}

func (i ResourceClaimTypeArray) ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput {
	return i.ToResourceClaimTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClaimTypeArray) ToResourceClaimTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTypeArrayOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimType)(nil)).Elem()
}

func (o ResourceClaimTypeOutput) ToResourceClaimTypeOutput() ResourceClaimTypeOutput {
	return o
}

func (o ResourceClaimTypeOutput) ToResourceClaimTypeOutputWithContext(ctx context.Context) ResourceClaimTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
func (o ResourceClaimTypeOutput) Spec() ResourceClaimSpecOutput {
	return o.ApplyT(func(v ResourceClaimType) ResourceClaimSpec { return v.Spec }).(ResourceClaimSpecOutput)
}

// Status describes whether the resource is available and with which attributes.
func (o ResourceClaimTypeOutput) Status() ResourceClaimStatusPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *ResourceClaimStatus { return v.Status }).(ResourceClaimStatusPtrOutput)
}

type ResourceClaimTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimType)(nil)).Elem()
}

func (o ResourceClaimTypeArrayOutput) ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput {
	return o
}

func (o ResourceClaimTypeArrayOutput) ToResourceClaimTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTypeArrayOutput {
	return o
}

func (o ResourceClaimTypeArrayOutput) Index(i pulumi.IntInput) ResourceClaimTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimType {
		return vs[0].([]ResourceClaimType)[vs[1].(int)]
	}).(ResourceClaimTypeOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource string `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid string `pulumi:"uid"`
}

// ResourceClaimConsumerReferenceInput is an input type that accepts ResourceClaimConsumerReferenceArgs and ResourceClaimConsumerReferenceOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferenceInput` via:
//
//	ResourceClaimConsumerReferenceArgs{...}
type ResourceClaimConsumerReferenceInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput
	ToResourceClaimConsumerReferenceOutputWithContext(context.Context) ResourceClaimConsumerReferenceOutput
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource pulumi.StringInput `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (ResourceClaimConsumerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReference)(nil)).Elem()
}

func (i ResourceClaimConsumerReferenceArgs) ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput {
	return i.ToResourceClaimConsumerReferenceOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferenceArgs) ToResourceClaimConsumerReferenceOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferenceOutput)
}

// ResourceClaimConsumerReferenceArrayInput is an input type that accepts ResourceClaimConsumerReferenceArray and ResourceClaimConsumerReferenceArrayOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferenceArrayInput` via:
//
//	ResourceClaimConsumerReferenceArray{ ResourceClaimConsumerReferenceArgs{...} }
type ResourceClaimConsumerReferenceArrayInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput
	ToResourceClaimConsumerReferenceArrayOutputWithContext(context.Context) ResourceClaimConsumerReferenceArrayOutput
}

type ResourceClaimConsumerReferenceArray []ResourceClaimConsumerReferenceInput

func (ResourceClaimConsumerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReference)(nil)).Elem()
}

func (i ResourceClaimConsumerReferenceArray) ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput {
	return i.ToResourceClaimConsumerReferenceArrayOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferenceArray) ToResourceClaimConsumerReferenceArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferenceArrayOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReference)(nil)).Elem()
}

func (o ResourceClaimConsumerReferenceOutput) ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput {
	return o
}

func (o ResourceClaimConsumerReferenceOutput) ToResourceClaimConsumerReferenceOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceOutput {
	return o
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimConsumerReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimConsumerReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Name }).(pulumi.StringOutput)
}

// Resource is the type of resource being referenced, for example "pods".
func (o ResourceClaimConsumerReferenceOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Resource }).(pulumi.StringOutput)
}

// UID identifies exactly one incarnation of the resource.
func (o ResourceClaimConsumerReferenceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Uid }).(pulumi.StringOutput)
}

type ResourceClaimConsumerReferenceArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReference)(nil)).Elem()
}

func (o ResourceClaimConsumerReferenceArrayOutput) ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferenceArrayOutput) ToResourceClaimConsumerReferenceArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferenceArrayOutput) Index(i pulumi.IntInput) ResourceClaimConsumerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimConsumerReference {
		return vs[0].([]ResourceClaimConsumerReference)[vs[1].(int)]
	}).(ResourceClaimConsumerReferenceOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource *string `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid *string `pulumi:"uid"`
}

// ResourceClaimConsumerReferencePatchInput is an input type that accepts ResourceClaimConsumerReferencePatchArgs and ResourceClaimConsumerReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferencePatchInput` via:
//
//	ResourceClaimConsumerReferencePatchArgs{...}
type ResourceClaimConsumerReferencePatchInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput
	ToResourceClaimConsumerReferencePatchOutputWithContext(context.Context) ResourceClaimConsumerReferencePatchOutput
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ResourceClaimConsumerReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (i ResourceClaimConsumerReferencePatchArgs) ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput {
	return i.ToResourceClaimConsumerReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferencePatchArgs) ToResourceClaimConsumerReferencePatchOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferencePatchOutput)
}

// ResourceClaimConsumerReferencePatchArrayInput is an input type that accepts ResourceClaimConsumerReferencePatchArray and ResourceClaimConsumerReferencePatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferencePatchArrayInput` via:
//
//	ResourceClaimConsumerReferencePatchArray{ ResourceClaimConsumerReferencePatchArgs{...} }
type ResourceClaimConsumerReferencePatchArrayInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput
	ToResourceClaimConsumerReferencePatchArrayOutputWithContext(context.Context) ResourceClaimConsumerReferencePatchArrayOutput
}

type ResourceClaimConsumerReferencePatchArray []ResourceClaimConsumerReferencePatchInput

func (ResourceClaimConsumerReferencePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (i ResourceClaimConsumerReferencePatchArray) ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput {
	return i.ToResourceClaimConsumerReferencePatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferencePatchArray) ToResourceClaimConsumerReferencePatchArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferencePatchArrayOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (o ResourceClaimConsumerReferencePatchOutput) ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchOutput) ToResourceClaimConsumerReferencePatchOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchOutput {
	return o
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimConsumerReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimConsumerReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource is the type of resource being referenced, for example "pods".
func (o ResourceClaimConsumerReferencePatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// UID identifies exactly one incarnation of the resource.
func (o ResourceClaimConsumerReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ResourceClaimConsumerReferencePatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferencePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) ToResourceClaimConsumerReferencePatchArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimConsumerReferencePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimConsumerReferencePatch {
		return vs[0].([]ResourceClaimConsumerReferencePatch)[vs[1].(int)]
	}).(ResourceClaimConsumerReferencePatchOutput)
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource claims.
	Items []ResourceClaimType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClaimListTypeInput is an input type that accepts ResourceClaimListTypeArgs and ResourceClaimListTypeOutput values.
// You can construct a concrete instance of `ResourceClaimListTypeInput` via:
//
//	ResourceClaimListTypeArgs{...}
type ResourceClaimListTypeInput interface {
	pulumi.Input

	ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput
	ToResourceClaimListTypeOutputWithContext(context.Context) ResourceClaimListTypeOutput
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource claims.
	Items ResourceClaimTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClaimListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimListType)(nil)).Elem()
}

func (i ResourceClaimListTypeArgs) ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput {
	return i.ToResourceClaimListTypeOutputWithContext(context.Background())
}

func (i ResourceClaimListTypeArgs) ToResourceClaimListTypeOutputWithContext(ctx context.Context) ResourceClaimListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimListTypeOutput)
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimListType)(nil)).Elem()
}

func (o ResourceClaimListTypeOutput) ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput {
	return o
}

func (o ResourceClaimListTypeOutput) ToResourceClaimListTypeOutputWithContext(ctx context.Context) ResourceClaimListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource claims.
func (o ResourceClaimListTypeOutput) Items() ResourceClaimTypeArrayOutput {
	return o.ApplyT(func(v ResourceClaimListType) []ResourceClaimType { return v.Items }).(ResourceClaimTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClaimListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests []DriverRequests `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom *ResourceClaimParametersReference `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable *bool `pulumi:"shareable"`
}

// ResourceClaimParametersTypeInput is an input type that accepts ResourceClaimParametersTypeArgs and ResourceClaimParametersTypeOutput values.
// You can construct a concrete instance of `ResourceClaimParametersTypeInput` via:
//
//	ResourceClaimParametersTypeArgs{...}
type ResourceClaimParametersTypeInput interface {
	pulumi.Input

	ToResourceClaimParametersTypeOutput() ResourceClaimParametersTypeOutput
	ToResourceClaimParametersTypeOutputWithContext(context.Context) ResourceClaimParametersTypeOutput
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsArrayInput `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferencePtrInput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (ResourceClaimParametersTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersType)(nil)).Elem()
}

func (i ResourceClaimParametersTypeArgs) ToResourceClaimParametersTypeOutput() ResourceClaimParametersTypeOutput {
	return i.ToResourceClaimParametersTypeOutputWithContext(context.Background())
}

func (i ResourceClaimParametersTypeArgs) ToResourceClaimParametersTypeOutputWithContext(ctx context.Context) ResourceClaimParametersTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersTypeOutput)
}

// ResourceClaimParametersTypeArrayInput is an input type that accepts ResourceClaimParametersTypeArray and ResourceClaimParametersTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClaimParametersTypeArrayInput` via:
//
//	ResourceClaimParametersTypeArray{ ResourceClaimParametersTypeArgs{...} }
type ResourceClaimParametersTypeArrayInput interface {
	pulumi.Input

	ToResourceClaimParametersTypeArrayOutput() ResourceClaimParametersTypeArrayOutput
	ToResourceClaimParametersTypeArrayOutputWithContext(context.Context) ResourceClaimParametersTypeArrayOutput
}

type ResourceClaimParametersTypeArray []ResourceClaimParametersTypeInput

func (ResourceClaimParametersTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimParametersType)(nil)).Elem()
}

func (i ResourceClaimParametersTypeArray) ToResourceClaimParametersTypeArrayOutput() ResourceClaimParametersTypeArrayOutput {
	return i.ToResourceClaimParametersTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClaimParametersTypeArray) ToResourceClaimParametersTypeArrayOutputWithContext(ctx context.Context) ResourceClaimParametersTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersTypeArrayOutput)
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersType)(nil)).Elem()
}

func (o ResourceClaimParametersTypeOutput) ToResourceClaimParametersTypeOutput() ResourceClaimParametersTypeOutput {
	return o
}

func (o ResourceClaimParametersTypeOutput) ToResourceClaimParametersTypeOutputWithContext(ctx context.Context) ResourceClaimParametersTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimParametersTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
//
// May be empty, in which case the claim can always be allocated.
func (o ResourceClaimParametersTypeOutput) DriverRequests() DriverRequestsArrayOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) []DriverRequests { return v.DriverRequests }).(DriverRequestsArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
func (o ResourceClaimParametersTypeOutput) GeneratedFrom() ResourceClaimParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) *ResourceClaimParametersReference { return v.GeneratedFrom }).(ResourceClaimParametersReferencePtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimParametersTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimParametersTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
func (o ResourceClaimParametersTypeOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersType) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type ResourceClaimParametersTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimParametersType)(nil)).Elem()
}

func (o ResourceClaimParametersTypeArrayOutput) ToResourceClaimParametersTypeArrayOutput() ResourceClaimParametersTypeArrayOutput {
	return o
}

func (o ResourceClaimParametersTypeArrayOutput) ToResourceClaimParametersTypeArrayOutputWithContext(ctx context.Context) ResourceClaimParametersTypeArrayOutput {
	return o
}

func (o ResourceClaimParametersTypeArrayOutput) Index(i pulumi.IntInput) ResourceClaimParametersTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimParametersType {
		return vs[0].([]ResourceClaimParametersType)[vs[1].(int)]
	}).(ResourceClaimParametersTypeOutput)
}

// ResourceClaimParametersList is a collection of ResourceClaimParameters.
type ResourceClaimParametersListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items []ResourceClaimParametersType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClaimParametersListTypeInput is an input type that accepts ResourceClaimParametersListTypeArgs and ResourceClaimParametersListTypeOutput values.
// You can construct a concrete instance of `ResourceClaimParametersListTypeInput` via:
//
//	ResourceClaimParametersListTypeArgs{...}
type ResourceClaimParametersListTypeInput interface {
	pulumi.Input

	ToResourceClaimParametersListTypeOutput() ResourceClaimParametersListTypeOutput
	ToResourceClaimParametersListTypeOutputWithContext(context.Context) ResourceClaimParametersListTypeOutput
}

// ResourceClaimParametersList is a collection of ResourceClaimParameters.
type ResourceClaimParametersListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items ResourceClaimParametersTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClaimParametersListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersListType)(nil)).Elem()
}

func (i ResourceClaimParametersListTypeArgs) ToResourceClaimParametersListTypeOutput() ResourceClaimParametersListTypeOutput {
	return i.ToResourceClaimParametersListTypeOutputWithContext(context.Background())
}

func (i ResourceClaimParametersListTypeArgs) ToResourceClaimParametersListTypeOutputWithContext(ctx context.Context) ResourceClaimParametersListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersListTypeOutput)
}

// ResourceClaimParametersList is a collection of ResourceClaimParameters.
type ResourceClaimParametersListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersListType)(nil)).Elem()
}

func (o ResourceClaimParametersListTypeOutput) ToResourceClaimParametersListTypeOutput() ResourceClaimParametersListTypeOutput {
	return o
}

func (o ResourceClaimParametersListTypeOutput) ToResourceClaimParametersListTypeOutputWithContext(ctx context.Context) ResourceClaimParametersListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimParametersListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of node resource capacity objects.
func (o ResourceClaimParametersListTypeOutput) Items() ResourceClaimParametersTypeArrayOutput {
	return o.ApplyT(func(v ResourceClaimParametersListType) []ResourceClaimParametersType { return v.Items }).(ResourceClaimParametersTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimParametersListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClaimParametersListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests []DriverRequestsPatch `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom *ResourceClaimParametersReferencePatch `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable *bool `pulumi:"shareable"`
}

// ResourceClaimParametersPatchTypeInput is an input type that accepts ResourceClaimParametersPatchTypeArgs and ResourceClaimParametersPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClaimParametersPatchTypeInput` via:
//
//	ResourceClaimParametersPatchTypeArgs{...}
type ResourceClaimParametersPatchTypeInput interface {
	pulumi.Input

	ToResourceClaimParametersPatchTypeOutput() ResourceClaimParametersPatchTypeOutput
	ToResourceClaimParametersPatchTypeOutputWithContext(context.Context) ResourceClaimParametersPatchTypeOutput
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsPatchArrayInput `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferencePatchPtrInput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (ResourceClaimParametersPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersPatchType)(nil)).Elem()
}

func (i ResourceClaimParametersPatchTypeArgs) ToResourceClaimParametersPatchTypeOutput() ResourceClaimParametersPatchTypeOutput {
	return i.ToResourceClaimParametersPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClaimParametersPatchTypeArgs) ToResourceClaimParametersPatchTypeOutputWithContext(ctx context.Context) ResourceClaimParametersPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersPatchTypeOutput)
}

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersPatchType)(nil)).Elem()
}

func (o ResourceClaimParametersPatchTypeOutput) ToResourceClaimParametersPatchTypeOutput() ResourceClaimParametersPatchTypeOutput {
	return o
}

func (o ResourceClaimParametersPatchTypeOutput) ToResourceClaimParametersPatchTypeOutputWithContext(ctx context.Context) ResourceClaimParametersPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimParametersPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
//
// May be empty, in which case the claim can always be allocated.
func (o ResourceClaimParametersPatchTypeOutput) DriverRequests() DriverRequestsPatchArrayOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) []DriverRequestsPatch { return v.DriverRequests }).(DriverRequestsPatchArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
func (o ResourceClaimParametersPatchTypeOutput) GeneratedFrom() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) *ResourceClaimParametersReferencePatch {
		return v.GeneratedFrom
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimParametersPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimParametersPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
func (o ResourceClaimParametersPatchTypeOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersPatchType) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
}

// ResourceClaimParametersReferenceInput is an input type that accepts ResourceClaimParametersReferenceArgs and ResourceClaimParametersReferenceOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferenceInput` via:
//
//	ResourceClaimParametersReferenceArgs{...}
type ResourceClaimParametersReferenceInput interface {
	pulumi.Input

	ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput
	ToResourceClaimParametersReferenceOutputWithContext(context.Context) ResourceClaimParametersReferenceOutput
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ResourceClaimParametersReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReference)(nil)).Elem()
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput {
	return i.ToResourceClaimParametersReferenceOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferenceOutputWithContext(ctx context.Context) ResourceClaimParametersReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferenceOutput)
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return i.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferenceOutput).ToResourceClaimParametersReferencePtrOutputWithContext(ctx)
}

// ResourceClaimParametersReferencePtrInput is an input type that accepts ResourceClaimParametersReferenceArgs, ResourceClaimParametersReferencePtr and ResourceClaimParametersReferencePtrOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePtrInput` via:
//
//	        ResourceClaimParametersReferenceArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimParametersReferencePtrInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput
	ToResourceClaimParametersReferencePtrOutputWithContext(context.Context) ResourceClaimParametersReferencePtrOutput
}

type resourceClaimParametersReferencePtrType ResourceClaimParametersReferenceArgs

func ResourceClaimParametersReferencePtr(v *ResourceClaimParametersReferenceArgs) ResourceClaimParametersReferencePtrInput {
	return (*resourceClaimParametersReferencePtrType)(v)
}

func (*resourceClaimParametersReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReference)(nil)).Elem()
}

func (i *resourceClaimParametersReferencePtrType) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return i.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (i *resourceClaimParametersReferencePtrType) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReference)(nil)).Elem()
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput {
	return o
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferenceOutputWithContext(ctx context.Context) ResourceClaimParametersReferenceOutput {
	return o
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return o.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimParametersReference) *ResourceClaimParametersReference {
		return &v
	}).(ResourceClaimParametersReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceClaimParametersReferencePtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReference)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePtrOutput) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePtrOutput) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePtrOutput) Elem() ResourceClaimParametersReferenceOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) ResourceClaimParametersReference {
		if v != nil {
			return *v
		}
		var ret ResourceClaimParametersReference
		return ret
	}).(ResourceClaimParametersReferenceOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
}

// ResourceClaimParametersReferencePatchInput is an input type that accepts ResourceClaimParametersReferencePatchArgs and ResourceClaimParametersReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePatchInput` via:
//
//	ResourceClaimParametersReferencePatchArgs{...}
type ResourceClaimParametersReferencePatchInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput
	ToResourceClaimParametersReferencePatchOutputWithContext(context.Context) ResourceClaimParametersReferencePatchOutput
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceClaimParametersReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput {
	return i.ToResourceClaimParametersReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchOutput)
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return i.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchOutput).ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx)
}

// ResourceClaimParametersReferencePatchPtrInput is an input type that accepts ResourceClaimParametersReferencePatchArgs, ResourceClaimParametersReferencePatchPtr and ResourceClaimParametersReferencePatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePatchPtrInput` via:
//
//	        ResourceClaimParametersReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimParametersReferencePatchPtrInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput
	ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Context) ResourceClaimParametersReferencePatchPtrOutput
}

type resourceClaimParametersReferencePatchPtrType ResourceClaimParametersReferencePatchArgs

func ResourceClaimParametersReferencePatchPtr(v *ResourceClaimParametersReferencePatchArgs) ResourceClaimParametersReferencePatchPtrInput {
	return (*resourceClaimParametersReferencePatchPtrType)(v)
}

func (*resourceClaimParametersReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (i *resourceClaimParametersReferencePatchPtrType) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return i.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimParametersReferencePatchPtrType) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimParametersReferencePatch) *ResourceClaimParametersReferencePatch {
		return &v
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceClaimParametersReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePatchPtrOutput) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchPtrOutput) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchPtrOutput) Elem() ResourceClaimParametersReferencePatchOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) ResourceClaimParametersReferencePatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimParametersReferencePatch
		return ret
	}).(ResourceClaimParametersReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec *ResourceClaimSpecPatch `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status *ResourceClaimStatusPatch `pulumi:"status"`
}

// ResourceClaimPatchTypeInput is an input type that accepts ResourceClaimPatchTypeArgs and ResourceClaimPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClaimPatchTypeInput` via:
//
//	ResourceClaimPatchTypeArgs{...}
type ResourceClaimPatchTypeInput interface {
	pulumi.Input

	ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput
	ToResourceClaimPatchTypeOutputWithContext(context.Context) ResourceClaimPatchTypeOutput
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpecPatchPtrInput `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status ResourceClaimStatusPatchPtrInput `pulumi:"status"`
}

func (ResourceClaimPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatchType)(nil)).Elem()
}

func (i ResourceClaimPatchTypeArgs) ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput {
	return i.ToResourceClaimPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClaimPatchTypeArgs) ToResourceClaimPatchTypeOutputWithContext(ctx context.Context) ResourceClaimPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimPatchTypeOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatchType)(nil)).Elem()
}

func (o ResourceClaimPatchTypeOutput) ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput {
	return o
}

func (o ResourceClaimPatchTypeOutput) ToResourceClaimPatchTypeOutputWithContext(ctx context.Context) ResourceClaimPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
func (o ResourceClaimPatchTypeOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *ResourceClaimSpecPatch { return v.Spec }).(ResourceClaimSpecPatchPtrOutput)
}

// Status describes whether the resource is available and with which attributes.
func (o ResourceClaimPatchTypeOutput) Status() ResourceClaimStatusPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *ResourceClaimStatusPatch { return v.Status }).(ResourceClaimStatusPatchPtrOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatus struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []string `pulumi:"unsuitableNodes"`
}

// ResourceClaimSchedulingStatusInput is an input type that accepts ResourceClaimSchedulingStatusArgs and ResourceClaimSchedulingStatusOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusInput` via:
//
//	ResourceClaimSchedulingStatusArgs{...}
type ResourceClaimSchedulingStatusInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput
	ToResourceClaimSchedulingStatusOutputWithContext(context.Context) ResourceClaimSchedulingStatusOutput
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusArgs struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes pulumi.StringArrayInput `pulumi:"unsuitableNodes"`
}

func (ResourceClaimSchedulingStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusArgs) ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput {
	return i.ToResourceClaimSchedulingStatusOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusArgs) ToResourceClaimSchedulingStatusOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusOutput)
}

// ResourceClaimSchedulingStatusArrayInput is an input type that accepts ResourceClaimSchedulingStatusArray and ResourceClaimSchedulingStatusArrayOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusArrayInput` via:
//
//	ResourceClaimSchedulingStatusArray{ ResourceClaimSchedulingStatusArgs{...} }
type ResourceClaimSchedulingStatusArrayInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput
	ToResourceClaimSchedulingStatusArrayOutputWithContext(context.Context) ResourceClaimSchedulingStatusArrayOutput
}

type ResourceClaimSchedulingStatusArray []ResourceClaimSchedulingStatusInput

func (ResourceClaimSchedulingStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusArray) ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput {
	return i.ToResourceClaimSchedulingStatusArrayOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusArray) ToResourceClaimSchedulingStatusArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusArrayOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusOutput) ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput {
	return o
}

func (o ResourceClaimSchedulingStatusOutput) ToResourceClaimSchedulingStatusOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusOutput {
	return o
}

// Name matches the pod.spec.resourceClaims[*].Name field.
func (o ResourceClaimSchedulingStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
//
// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
func (o ResourceClaimSchedulingStatusOutput) UnsuitableNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatus) []string { return v.UnsuitableNodes }).(pulumi.StringArrayOutput)
}

type ResourceClaimSchedulingStatusArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusArrayOutput) ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusArrayOutput) ToResourceClaimSchedulingStatusArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusArrayOutput) Index(i pulumi.IntInput) ResourceClaimSchedulingStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimSchedulingStatus {
		return vs[0].([]ResourceClaimSchedulingStatus)[vs[1].(int)]
	}).(ResourceClaimSchedulingStatusOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatch struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []string `pulumi:"unsuitableNodes"`
}

// ResourceClaimSchedulingStatusPatchInput is an input type that accepts ResourceClaimSchedulingStatusPatchArgs and ResourceClaimSchedulingStatusPatchOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusPatchInput` via:
//
//	ResourceClaimSchedulingStatusPatchArgs{...}
type ResourceClaimSchedulingStatusPatchInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput
	ToResourceClaimSchedulingStatusPatchOutputWithContext(context.Context) ResourceClaimSchedulingStatusPatchOutput
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatchArgs struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes pulumi.StringArrayInput `pulumi:"unsuitableNodes"`
}

func (ResourceClaimSchedulingStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusPatchArgs) ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput {
	return i.ToResourceClaimSchedulingStatusPatchOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusPatchArgs) ToResourceClaimSchedulingStatusPatchOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusPatchOutput)
}

// ResourceClaimSchedulingStatusPatchArrayInput is an input type that accepts ResourceClaimSchedulingStatusPatchArray and ResourceClaimSchedulingStatusPatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusPatchArrayInput` via:
//
//	ResourceClaimSchedulingStatusPatchArray{ ResourceClaimSchedulingStatusPatchArgs{...} }
type ResourceClaimSchedulingStatusPatchArrayInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput
	ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(context.Context) ResourceClaimSchedulingStatusPatchArrayOutput
}

type ResourceClaimSchedulingStatusPatchArray []ResourceClaimSchedulingStatusPatchInput

func (ResourceClaimSchedulingStatusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusPatchArray) ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput {
	return i.ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusPatchArray) ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusPatchOutput) ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchOutput) ToResourceClaimSchedulingStatusPatchOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchOutput {
	return o
}

// Name matches the pod.spec.resourceClaims[*].Name field.
func (o ResourceClaimSchedulingStatusPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatusPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
//
// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
func (o ResourceClaimSchedulingStatusPatchOutput) UnsuitableNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatusPatch) []string { return v.UnsuitableNodes }).(pulumi.StringArrayOutput)
}

type ResourceClaimSchedulingStatusPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimSchedulingStatusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimSchedulingStatusPatch {
		return vs[0].([]ResourceClaimSchedulingStatusPatch)[vs[1].(int)]
	}).(ResourceClaimSchedulingStatusPatchOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpec struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef *ResourceClaimParametersReference `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName string `pulumi:"resourceClassName"`
}

// ResourceClaimSpecInput is an input type that accepts ResourceClaimSpecArgs and ResourceClaimSpecOutput values.
// You can construct a concrete instance of `ResourceClaimSpecInput` via:
//
//	ResourceClaimSpecArgs{...}
type ResourceClaimSpecInput interface {
	pulumi.Input

	ToResourceClaimSpecOutput() ResourceClaimSpecOutput
	ToResourceClaimSpecOutputWithContext(context.Context) ResourceClaimSpecOutput
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecArgs struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode pulumi.StringPtrInput `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef ResourceClaimParametersReferencePtrInput `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName pulumi.StringInput `pulumi:"resourceClassName"`
}

func (ResourceClaimSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpec)(nil)).Elem()
}

func (i ResourceClaimSpecArgs) ToResourceClaimSpecOutput() ResourceClaimSpecOutput {
	return i.ToResourceClaimSpecOutputWithContext(context.Background())
}

func (i ResourceClaimSpecArgs) ToResourceClaimSpecOutputWithContext(ctx context.Context) ResourceClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpec)(nil)).Elem()
}

func (o ResourceClaimSpecOutput) ToResourceClaimSpecOutput() ResourceClaimSpecOutput {
	return o
}

func (o ResourceClaimSpecOutput) ToResourceClaimSpecOutputWithContext(ctx context.Context) ResourceClaimSpecOutput {
	return o
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpec) *string { return v.AllocationMode }).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecOutput) ParametersRef() ResourceClaimParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClaimSpec) *ResourceClaimParametersReference { return v.ParametersRef }).(ResourceClaimParametersReferencePtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecOutput) ResourceClassName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimSpec) string { return v.ResourceClassName }).(pulumi.StringOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatch struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef *ResourceClaimParametersReferencePatch `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName *string `pulumi:"resourceClassName"`
}

// ResourceClaimSpecPatchInput is an input type that accepts ResourceClaimSpecPatchArgs and ResourceClaimSpecPatchOutput values.
// You can construct a concrete instance of `ResourceClaimSpecPatchInput` via:
//
//	ResourceClaimSpecPatchArgs{...}
type ResourceClaimSpecPatchInput interface {
	pulumi.Input

	ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput
	ToResourceClaimSpecPatchOutputWithContext(context.Context) ResourceClaimSpecPatchOutput
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatchArgs struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode pulumi.StringPtrInput `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef ResourceClaimParametersReferencePatchPtrInput `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName pulumi.StringPtrInput `pulumi:"resourceClassName"`
}

func (ResourceClaimSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpecPatch)(nil)).Elem()
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput {
	return i.ToResourceClaimSpecPatchOutputWithContext(context.Background())
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchOutputWithContext(ctx context.Context) ResourceClaimSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchOutput)
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return i.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchOutput).ToResourceClaimSpecPatchPtrOutputWithContext(ctx)
}

// ResourceClaimSpecPatchPtrInput is an input type that accepts ResourceClaimSpecPatchArgs, ResourceClaimSpecPatchPtr and ResourceClaimSpecPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimSpecPatchPtrInput` via:
//
//	        ResourceClaimSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimSpecPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput
	ToResourceClaimSpecPatchPtrOutputWithContext(context.Context) ResourceClaimSpecPatchPtrOutput
}

type resourceClaimSpecPatchPtrType ResourceClaimSpecPatchArgs

func ResourceClaimSpecPatchPtr(v *ResourceClaimSpecPatchArgs) ResourceClaimSpecPatchPtrInput {
	return (*resourceClaimSpecPatchPtrType)(v)
}

func (*resourceClaimSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimSpecPatch)(nil)).Elem()
}

func (i *resourceClaimSpecPatchPtrType) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return i.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimSpecPatchPtrType) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchPtrOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpecPatch)(nil)).Elem()
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput {
	return o
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchOutputWithContext(ctx context.Context) ResourceClaimSpecPatchOutput {
	return o
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return o.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimSpecPatch) *ResourceClaimSpecPatch {
		return &v
	}).(ResourceClaimSpecPatchPtrOutput)
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecPatchOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *string { return v.AllocationMode }).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecPatchOutput) ParametersRef() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *ResourceClaimParametersReferencePatch { return v.ParametersRef }).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecPatchOutput) ResourceClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *string { return v.ResourceClassName }).(pulumi.StringPtrOutput)
}

type ResourceClaimSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimSpecPatch)(nil)).Elem()
}

func (o ResourceClaimSpecPatchPtrOutput) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimSpecPatchPtrOutput) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimSpecPatchPtrOutput) Elem() ResourceClaimSpecPatchOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) ResourceClaimSpecPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimSpecPatch
		return ret
	}).(ResourceClaimSpecPatchOutput)
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecPatchPtrOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AllocationMode
	}).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecPatchPtrOutput) ParametersRef() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *ResourceClaimParametersReferencePatch {
		if v == nil {
			return nil
		}
		return v.ParametersRef
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecPatchPtrOutput) ResourceClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClassName
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatus struct {
	// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
	Allocation *AllocationResult `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []ResourceClaimConsumerReference `pulumi:"reservedFor"`
}

// ResourceClaimStatusInput is an input type that accepts ResourceClaimStatusArgs and ResourceClaimStatusOutput values.
// You can construct a concrete instance of `ResourceClaimStatusInput` via:
//
//	ResourceClaimStatusArgs{...}
type ResourceClaimStatusInput interface {
	pulumi.Input

	ToResourceClaimStatusOutput() ResourceClaimStatusOutput
	ToResourceClaimStatusOutputWithContext(context.Context) ResourceClaimStatusOutput
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusArgs struct {
	// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
	Allocation AllocationResultPtrInput `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested pulumi.BoolPtrInput `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor ResourceClaimConsumerReferenceArrayInput `pulumi:"reservedFor"`
}

func (ResourceClaimStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatus)(nil)).Elem()
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusOutput() ResourceClaimStatusOutput {
	return i.ToResourceClaimStatusOutputWithContext(context.Background())
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusOutputWithContext(ctx context.Context) ResourceClaimStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusOutput)
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return i.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusOutput).ToResourceClaimStatusPtrOutputWithContext(ctx)
}

// ResourceClaimStatusPtrInput is an input type that accepts ResourceClaimStatusArgs, ResourceClaimStatusPtr and ResourceClaimStatusPtrOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPtrInput` via:
//
//	        ResourceClaimStatusArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimStatusPtrInput interface {
	pulumi.Input

	ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput
	ToResourceClaimStatusPtrOutputWithContext(context.Context) ResourceClaimStatusPtrOutput
}

type resourceClaimStatusPtrType ResourceClaimStatusArgs

func ResourceClaimStatusPtr(v *ResourceClaimStatusArgs) ResourceClaimStatusPtrInput {
	return (*resourceClaimStatusPtrType)(v)
}

func (*resourceClaimStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatus)(nil)).Elem()
}

func (i *resourceClaimStatusPtrType) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return i.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (i *resourceClaimStatusPtrType) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatus)(nil)).Elem()
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusOutput() ResourceClaimStatusOutput {
	return o
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusOutputWithContext(ctx context.Context) ResourceClaimStatusOutput {
	return o
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return o.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimStatus) *ResourceClaimStatus {
		return &v
	}).(ResourceClaimStatusPtrOutput)
}

// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
func (o ResourceClaimStatusOutput) Allocation() AllocationResultPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *AllocationResult { return v.Allocation }).(AllocationResultPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *bool { return v.DeallocationRequested }).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusOutput) ReservedFor() ResourceClaimConsumerReferenceArrayOutput {
	return o.ApplyT(func(v ResourceClaimStatus) []ResourceClaimConsumerReference { return v.ReservedFor }).(ResourceClaimConsumerReferenceArrayOutput)
}

type ResourceClaimStatusPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatus)(nil)).Elem()
}

func (o ResourceClaimStatusPtrOutput) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return o
}

func (o ResourceClaimStatusPtrOutput) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return o
}

func (o ResourceClaimStatusPtrOutput) Elem() ResourceClaimStatusOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) ResourceClaimStatus {
		if v != nil {
			return *v
		}
		var ret ResourceClaimStatus
		return ret
	}).(ResourceClaimStatusOutput)
}

// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
func (o ResourceClaimStatusPtrOutput) Allocation() AllocationResultPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *AllocationResult {
		if v == nil {
			return nil
		}
		return v.Allocation
	}).(AllocationResultPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPtrOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *bool {
		if v == nil {
			return nil
		}
		return v.DeallocationRequested
	}).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPtrOutput) ReservedFor() ResourceClaimConsumerReferenceArrayOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) []ResourceClaimConsumerReference {
		if v == nil {
			return nil
		}
		return v.ReservedFor
	}).(ResourceClaimConsumerReferenceArrayOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatch struct {
	// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
	Allocation *AllocationResultPatch `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []ResourceClaimConsumerReferencePatch `pulumi:"reservedFor"`
}

// ResourceClaimStatusPatchInput is an input type that accepts ResourceClaimStatusPatchArgs and ResourceClaimStatusPatchOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPatchInput` via:
//
//	ResourceClaimStatusPatchArgs{...}
type ResourceClaimStatusPatchInput interface {
	pulumi.Input

	ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput
	ToResourceClaimStatusPatchOutputWithContext(context.Context) ResourceClaimStatusPatchOutput
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatchArgs struct {
	// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
	Allocation AllocationResultPatchPtrInput `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested pulumi.BoolPtrInput `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor ResourceClaimConsumerReferencePatchArrayInput `pulumi:"reservedFor"`
}

func (ResourceClaimStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatusPatch)(nil)).Elem()
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput {
	return i.ToResourceClaimStatusPatchOutputWithContext(context.Background())
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchOutputWithContext(ctx context.Context) ResourceClaimStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchOutput)
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return i.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchOutput).ToResourceClaimStatusPatchPtrOutputWithContext(ctx)
}

// ResourceClaimStatusPatchPtrInput is an input type that accepts ResourceClaimStatusPatchArgs, ResourceClaimStatusPatchPtr and ResourceClaimStatusPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPatchPtrInput` via:
//
//	        ResourceClaimStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimStatusPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput
	ToResourceClaimStatusPatchPtrOutputWithContext(context.Context) ResourceClaimStatusPatchPtrOutput
}

type resourceClaimStatusPatchPtrType ResourceClaimStatusPatchArgs

func ResourceClaimStatusPatchPtr(v *ResourceClaimStatusPatchArgs) ResourceClaimStatusPatchPtrInput {
	return (*resourceClaimStatusPatchPtrType)(v)
}

func (*resourceClaimStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatusPatch)(nil)).Elem()
}

func (i *resourceClaimStatusPatchPtrType) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return i.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimStatusPatchPtrType) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatusPatch)(nil)).Elem()
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput {
	return o
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchOutputWithContext(ctx context.Context) ResourceClaimStatusPatchOutput {
	return o
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return o.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimStatusPatch) *ResourceClaimStatusPatch {
		return &v
	}).(ResourceClaimStatusPatchPtrOutput)
}

// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
func (o ResourceClaimStatusPatchOutput) Allocation() AllocationResultPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *AllocationResultPatch { return v.Allocation }).(AllocationResultPatchPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPatchOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *bool { return v.DeallocationRequested }).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPatchOutput) ReservedFor() ResourceClaimConsumerReferencePatchArrayOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) []ResourceClaimConsumerReferencePatch { return v.ReservedFor }).(ResourceClaimConsumerReferencePatchArrayOutput)
}

type ResourceClaimStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatusPatch)(nil)).Elem()
}

func (o ResourceClaimStatusPatchPtrOutput) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return o
}

func (o ResourceClaimStatusPatchPtrOutput) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return o
}

func (o ResourceClaimStatusPatchPtrOutput) Elem() ResourceClaimStatusPatchOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) ResourceClaimStatusPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimStatusPatch
		return ret
	}).(ResourceClaimStatusPatchOutput)
}

// Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
func (o ResourceClaimStatusPatchPtrOutput) Allocation() AllocationResultPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *AllocationResultPatch {
		if v == nil {
			return nil
		}
		return v.Allocation
	}).(AllocationResultPatchPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPatchPtrOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DeallocationRequested
	}).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPatchPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPatchPtrOutput) ReservedFor() ResourceClaimConsumerReferencePatchArrayOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) []ResourceClaimConsumerReferencePatch {
		if v == nil {
			return nil
		}
		return v.ReservedFor
	}).(ResourceClaimConsumerReferencePatchArrayOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpec `pulumi:"spec"`
}

// ResourceClaimTemplateTypeInput is an input type that accepts ResourceClaimTemplateTypeArgs and ResourceClaimTemplateTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateTypeInput` via:
//
//	ResourceClaimTemplateTypeArgs{...}
type ResourceClaimTemplateTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput
	ToResourceClaimTemplateTypeOutputWithContext(context.Context) ResourceClaimTemplateTypeOutput
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpecInput `pulumi:"spec"`
}

func (ResourceClaimTemplateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateType)(nil)).Elem()
}

func (i ResourceClaimTemplateTypeArgs) ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput {
	return i.ToResourceClaimTemplateTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateTypeArgs) ToResourceClaimTemplateTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateTypeOutput)
}

// ResourceClaimTemplateTypeArrayInput is an input type that accepts ResourceClaimTemplateTypeArray and ResourceClaimTemplateTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateTypeArrayInput` via:
//
//	ResourceClaimTemplateTypeArray{ ResourceClaimTemplateTypeArgs{...} }
type ResourceClaimTemplateTypeArrayInput interface {
	pulumi.Input

	ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput
	ToResourceClaimTemplateTypeArrayOutputWithContext(context.Context) ResourceClaimTemplateTypeArrayOutput
}

type ResourceClaimTemplateTypeArray []ResourceClaimTemplateTypeInput

func (ResourceClaimTemplateTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimTemplateType)(nil)).Elem()
}

func (i ResourceClaimTemplateTypeArray) ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput {
	return i.ToResourceClaimTemplateTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateTypeArray) ToResourceClaimTemplateTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateTypeArrayOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateType)(nil)).Elem()
}

func (o ResourceClaimTemplateTypeOutput) ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput {
	return o
}

func (o ResourceClaimTemplateTypeOutput) ToResourceClaimTemplateTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTemplateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Describes the ResourceClaim that is to be generated.
//
// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
func (o ResourceClaimTemplateTypeOutput) Spec() ResourceClaimTemplateSpecOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) ResourceClaimTemplateSpec { return v.Spec }).(ResourceClaimTemplateSpecOutput)
}

type ResourceClaimTemplateTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimTemplateType)(nil)).Elem()
}

func (o ResourceClaimTemplateTypeArrayOutput) ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput {
	return o
}

func (o ResourceClaimTemplateTypeArrayOutput) ToResourceClaimTemplateTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeArrayOutput {
	return o
}

func (o ResourceClaimTemplateTypeArrayOutput) Index(i pulumi.IntInput) ResourceClaimTemplateTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimTemplateType {
		return vs[0].([]ResourceClaimTemplateType)[vs[1].(int)]
	}).(ResourceClaimTemplateTypeOutput)
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource claim templates.
	Items []ResourceClaimTemplateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClaimTemplateListTypeInput is an input type that accepts ResourceClaimTemplateListTypeArgs and ResourceClaimTemplateListTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateListTypeInput` via:
//
//	ResourceClaimTemplateListTypeArgs{...}
type ResourceClaimTemplateListTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput
	ToResourceClaimTemplateListTypeOutputWithContext(context.Context) ResourceClaimTemplateListTypeOutput
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource claim templates.
	Items ResourceClaimTemplateTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClaimTemplateListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateListType)(nil)).Elem()
}

func (i ResourceClaimTemplateListTypeArgs) ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput {
	return i.ToResourceClaimTemplateListTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateListTypeArgs) ToResourceClaimTemplateListTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateListTypeOutput)
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateListType)(nil)).Elem()
}

func (o ResourceClaimTemplateListTypeOutput) ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput {
	return o
}

func (o ResourceClaimTemplateListTypeOutput) ToResourceClaimTemplateListTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplateListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource claim templates.
func (o ResourceClaimTemplateListTypeOutput) Items() ResourceClaimTemplateTypeArrayOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) []ResourceClaimTemplateType { return v.Items }).(ResourceClaimTemplateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplateListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClaimTemplateListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec *ResourceClaimTemplateSpecPatch `pulumi:"spec"`
}

// ResourceClaimTemplatePatchTypeInput is an input type that accepts ResourceClaimTemplatePatchTypeArgs and ResourceClaimTemplatePatchTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplatePatchTypeInput` via:
//
//	ResourceClaimTemplatePatchTypeArgs{...}
type ResourceClaimTemplatePatchTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput
	ToResourceClaimTemplatePatchTypeOutputWithContext(context.Context) ResourceClaimTemplatePatchTypeOutput
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpecPatchPtrInput `pulumi:"spec"`
}

func (ResourceClaimTemplatePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplatePatchType)(nil)).Elem()
}

func (i ResourceClaimTemplatePatchTypeArgs) ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput {
	return i.ToResourceClaimTemplatePatchTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplatePatchTypeArgs) ToResourceClaimTemplatePatchTypeOutputWithContext(ctx context.Context) ResourceClaimTemplatePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplatePatchTypeOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplatePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplatePatchType)(nil)).Elem()
}

func (o ResourceClaimTemplatePatchTypeOutput) ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput {
	return o
}

func (o ResourceClaimTemplatePatchTypeOutput) ToResourceClaimTemplatePatchTypeOutputWithContext(ctx context.Context) ResourceClaimTemplatePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplatePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplatePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTemplatePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Describes the ResourceClaim that is to be generated.
//
// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
func (o ResourceClaimTemplatePatchTypeOutput) Spec() ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *ResourceClaimTemplateSpecPatch { return v.Spec }).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpec struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpec `pulumi:"spec"`
}

// ResourceClaimTemplateSpecInput is an input type that accepts ResourceClaimTemplateSpecArgs and ResourceClaimTemplateSpecOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecInput` via:
//
//	ResourceClaimTemplateSpecArgs{...}
type ResourceClaimTemplateSpecInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput
	ToResourceClaimTemplateSpecOutputWithContext(context.Context) ResourceClaimTemplateSpecOutput
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecArgs struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpecInput `pulumi:"spec"`
}

func (ResourceClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpec)(nil)).Elem()
}

func (i ResourceClaimTemplateSpecArgs) ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput {
	return i.ToResourceClaimTemplateSpecOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecArgs) ToResourceClaimTemplateSpecOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpec)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecOutput) ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput {
	return o
}

func (o ResourceClaimTemplateSpecOutput) ToResourceClaimTemplateSpecOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecOutput {
	return o
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpec) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecOutput) Spec() ResourceClaimSpecOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpec) ResourceClaimSpec { return v.Spec }).(ResourceClaimSpecOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatch struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec *ResourceClaimSpecPatch `pulumi:"spec"`
}

// ResourceClaimTemplateSpecPatchInput is an input type that accepts ResourceClaimTemplateSpecPatchArgs and ResourceClaimTemplateSpecPatchOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecPatchInput` via:
//
//	ResourceClaimTemplateSpecPatchArgs{...}
type ResourceClaimTemplateSpecPatchInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput
	ToResourceClaimTemplateSpecPatchOutputWithContext(context.Context) ResourceClaimTemplateSpecPatchOutput
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatchArgs struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpecPatchPtrInput `pulumi:"spec"`
}

func (ResourceClaimTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput {
	return i.ToResourceClaimTemplateSpecPatchOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchOutput)
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return i.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchOutput).ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx)
}

// ResourceClaimTemplateSpecPatchPtrInput is an input type that accepts ResourceClaimTemplateSpecPatchArgs, ResourceClaimTemplateSpecPatchPtr and ResourceClaimTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecPatchPtrInput` via:
//
//	        ResourceClaimTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput
	ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Context) ResourceClaimTemplateSpecPatchPtrOutput
}

type resourceClaimTemplateSpecPatchPtrType ResourceClaimTemplateSpecPatchArgs

func ResourceClaimTemplateSpecPatchPtr(v *ResourceClaimTemplateSpecPatchArgs) ResourceClaimTemplateSpecPatchPtrInput {
	return (*resourceClaimTemplateSpecPatchPtrType)(v)
}

func (*resourceClaimTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (i *resourceClaimTemplateSpecPatchPtrType) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return i.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimTemplateSpecPatchPtrType) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimTemplateSpecPatch) *ResourceClaimTemplateSpecPatch {
		return &v
	}).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpecPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecPatchOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpecPatch) *ResourceClaimSpecPatch { return v.Spec }).(ResourceClaimSpecPatchPtrOutput)
}

type ResourceClaimTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) Elem() ResourceClaimTemplateSpecPatchOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) ResourceClaimTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimTemplateSpecPatch
		return ret
	}).(ResourceClaimTemplateSpecPatchOutput)
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecPatchPtrOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) *metav1.ObjectMetaPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecPatchPtrOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) *ResourceClaimSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ResourceClaimSpecPatchPtrOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef *ResourceClassParametersReference `pulumi:"parametersRef"`
	// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
	StructuredParameters *bool `pulumi:"structuredParameters"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes *corev1.NodeSelector `pulumi:"suitableNodes"`
}

// ResourceClassTypeInput is an input type that accepts ResourceClassTypeArgs and ResourceClassTypeOutput values.
// You can construct a concrete instance of `ResourceClassTypeInput` via:
//
//	ResourceClassTypeArgs{...}
type ResourceClassTypeInput interface {
	pulumi.Input

	ToResourceClassTypeOutput() ResourceClassTypeOutput
	ToResourceClassTypeOutputWithContext(context.Context) ResourceClassTypeOutput
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName pulumi.StringInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef ResourceClassParametersReferencePtrInput `pulumi:"parametersRef"`
	// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
	StructuredParameters pulumi.BoolPtrInput `pulumi:"structuredParameters"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes corev1.NodeSelectorPtrInput `pulumi:"suitableNodes"`
}

func (ResourceClassTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassType)(nil)).Elem()
}

func (i ResourceClassTypeArgs) ToResourceClassTypeOutput() ResourceClassTypeOutput {
	return i.ToResourceClassTypeOutputWithContext(context.Background())
}

func (i ResourceClassTypeArgs) ToResourceClassTypeOutputWithContext(ctx context.Context) ResourceClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassTypeOutput)
}

// ResourceClassTypeArrayInput is an input type that accepts ResourceClassTypeArray and ResourceClassTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClassTypeArrayInput` via:
//
//	ResourceClassTypeArray{ ResourceClassTypeArgs{...} }
type ResourceClassTypeArrayInput interface {
	pulumi.Input

	ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput
	ToResourceClassTypeArrayOutputWithContext(context.Context) ResourceClassTypeArrayOutput
}

type ResourceClassTypeArray []ResourceClassTypeInput

func (ResourceClassTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassType)(nil)).Elem()
}

func (i ResourceClassTypeArray) ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput {
	return i.ToResourceClassTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClassTypeArray) ToResourceClassTypeArrayOutputWithContext(ctx context.Context) ResourceClassTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassTypeArrayOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassType)(nil)).Elem()
}

func (o ResourceClassTypeOutput) ToResourceClassTypeOutput() ResourceClassTypeOutput {
	return o
}

func (o ResourceClassTypeOutput) ToResourceClassTypeOutputWithContext(ctx context.Context) ResourceClassTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
//
// Resource drivers have a unique name in forward domain order (acme.example.com).
func (o ResourceClassTypeOutput) DriverName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassType) string { return v.DriverName }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
func (o ResourceClassTypeOutput) ParametersRef() ResourceClassParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClassType) *ResourceClassParametersReference { return v.ParametersRef }).(ResourceClassParametersReferencePtrOutput)
}

// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
func (o ResourceClassTypeOutput) StructuredParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *bool { return v.StructuredParameters }).(pulumi.BoolPtrOutput)
}

// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
//
// Setting this field is optional. If null, all nodes are candidates.
func (o ResourceClassTypeOutput) SuitableNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *corev1.NodeSelector { return v.SuitableNodes }).(corev1.NodeSelectorPtrOutput)
}

type ResourceClassTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClassTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassType)(nil)).Elem()
}

func (o ResourceClassTypeArrayOutput) ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput {
	return o
}

func (o ResourceClassTypeArrayOutput) ToResourceClassTypeArrayOutputWithContext(ctx context.Context) ResourceClassTypeArrayOutput {
	return o
}

func (o ResourceClassTypeArrayOutput) Index(i pulumi.IntInput) ResourceClassTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClassType {
		return vs[0].([]ResourceClassType)[vs[1].(int)]
	}).(ResourceClassTypeOutput)
}

// ResourceClassList is a collection of classes.
type ResourceClassListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items []ResourceClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClassListTypeInput is an input type that accepts ResourceClassListTypeArgs and ResourceClassListTypeOutput values.
// You can construct a concrete instance of `ResourceClassListTypeInput` via:
//
//	ResourceClassListTypeArgs{...}
type ResourceClassListTypeInput interface {
	pulumi.Input

	ToResourceClassListTypeOutput() ResourceClassListTypeOutput
	ToResourceClassListTypeOutputWithContext(context.Context) ResourceClassListTypeOutput
}

// ResourceClassList is a collection of classes.
type ResourceClassListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items ResourceClassTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClassListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassListType)(nil)).Elem()
}

func (i ResourceClassListTypeArgs) ToResourceClassListTypeOutput() ResourceClassListTypeOutput {
	return i.ToResourceClassListTypeOutputWithContext(context.Background())
}

func (i ResourceClassListTypeArgs) ToResourceClassListTypeOutputWithContext(ctx context.Context) ResourceClassListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassListTypeOutput)
}

// ResourceClassList is a collection of classes.
type ResourceClassListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassListType)(nil)).Elem()
}

func (o ResourceClassListTypeOutput) ToResourceClassListTypeOutput() ResourceClassListTypeOutput {
	return o
}

func (o ResourceClassListTypeOutput) ToResourceClassListTypeOutputWithContext(ctx context.Context) ResourceClassListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource classes.
func (o ResourceClassListTypeOutput) Items() ResourceClassTypeArrayOutput {
	return o.ApplyT(func(v ResourceClassListType) []ResourceClassType { return v.Items }).(ResourceClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClassListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Filters describes additional contraints that must be met when using the class.
	Filters []ResourceFilter `pulumi:"filters"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
	GeneratedFrom *ResourceClassParametersReference `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
	VendorParameters []VendorParameters `pulumi:"vendorParameters"`
}

// ResourceClassParametersTypeInput is an input type that accepts ResourceClassParametersTypeArgs and ResourceClassParametersTypeOutput values.
// You can construct a concrete instance of `ResourceClassParametersTypeInput` via:
//
//	ResourceClassParametersTypeArgs{...}
type ResourceClassParametersTypeInput interface {
	pulumi.Input

	ToResourceClassParametersTypeOutput() ResourceClassParametersTypeOutput
	ToResourceClassParametersTypeOutputWithContext(context.Context) ResourceClassParametersTypeOutput
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Filters describes additional contraints that must be met when using the class.
	Filters ResourceFilterArrayInput `pulumi:"filters"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
	GeneratedFrom ResourceClassParametersReferencePtrInput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
	VendorParameters VendorParametersArrayInput `pulumi:"vendorParameters"`
}

func (ResourceClassParametersTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersType)(nil)).Elem()
}

func (i ResourceClassParametersTypeArgs) ToResourceClassParametersTypeOutput() ResourceClassParametersTypeOutput {
	return i.ToResourceClassParametersTypeOutputWithContext(context.Background())
}

func (i ResourceClassParametersTypeArgs) ToResourceClassParametersTypeOutputWithContext(ctx context.Context) ResourceClassParametersTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersTypeOutput)
}

// ResourceClassParametersTypeArrayInput is an input type that accepts ResourceClassParametersTypeArray and ResourceClassParametersTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClassParametersTypeArrayInput` via:
//
//	ResourceClassParametersTypeArray{ ResourceClassParametersTypeArgs{...} }
type ResourceClassParametersTypeArrayInput interface {
	pulumi.Input

	ToResourceClassParametersTypeArrayOutput() ResourceClassParametersTypeArrayOutput
	ToResourceClassParametersTypeArrayOutputWithContext(context.Context) ResourceClassParametersTypeArrayOutput
}

type ResourceClassParametersTypeArray []ResourceClassParametersTypeInput

func (ResourceClassParametersTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassParametersType)(nil)).Elem()
}

func (i ResourceClassParametersTypeArray) ToResourceClassParametersTypeArrayOutput() ResourceClassParametersTypeArrayOutput {
	return i.ToResourceClassParametersTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClassParametersTypeArray) ToResourceClassParametersTypeArrayOutputWithContext(ctx context.Context) ResourceClassParametersTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersTypeArrayOutput)
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersType)(nil)).Elem()
}

func (o ResourceClassParametersTypeOutput) ToResourceClassParametersTypeOutput() ResourceClassParametersTypeOutput {
	return o
}

func (o ResourceClassParametersTypeOutput) ToResourceClassParametersTypeOutputWithContext(ctx context.Context) ResourceClassParametersTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassParametersTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Filters describes additional contraints that must be met when using the class.
func (o ResourceClassParametersTypeOutput) Filters() ResourceFilterArrayOutput {
	return o.ApplyT(func(v ResourceClassParametersType) []ResourceFilter { return v.Filters }).(ResourceFilterArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
func (o ResourceClassParametersTypeOutput) GeneratedFrom() ResourceClassParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClassParametersType) *ResourceClassParametersReference { return v.GeneratedFrom }).(ResourceClassParametersReferencePtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassParametersTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassParametersTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
func (o ResourceClassParametersTypeOutput) VendorParameters() VendorParametersArrayOutput {
	return o.ApplyT(func(v ResourceClassParametersType) []VendorParameters { return v.VendorParameters }).(VendorParametersArrayOutput)
}

type ResourceClassParametersTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassParametersType)(nil)).Elem()
}

func (o ResourceClassParametersTypeArrayOutput) ToResourceClassParametersTypeArrayOutput() ResourceClassParametersTypeArrayOutput {
	return o
}

func (o ResourceClassParametersTypeArrayOutput) ToResourceClassParametersTypeArrayOutputWithContext(ctx context.Context) ResourceClassParametersTypeArrayOutput {
	return o
}

func (o ResourceClassParametersTypeArrayOutput) Index(i pulumi.IntInput) ResourceClassParametersTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClassParametersType {
		return vs[0].([]ResourceClassParametersType)[vs[1].(int)]
	}).(ResourceClassParametersTypeOutput)
}

// ResourceClassParametersList is a collection of ResourceClassParameters.
type ResourceClassParametersListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items []ResourceClassParametersType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClassParametersListTypeInput is an input type that accepts ResourceClassParametersListTypeArgs and ResourceClassParametersListTypeOutput values.
// You can construct a concrete instance of `ResourceClassParametersListTypeInput` via:
//
//	ResourceClassParametersListTypeArgs{...}
type ResourceClassParametersListTypeInput interface {
	pulumi.Input

	ToResourceClassParametersListTypeOutput() ResourceClassParametersListTypeOutput
	ToResourceClassParametersListTypeOutputWithContext(context.Context) ResourceClassParametersListTypeOutput
}

// ResourceClassParametersList is a collection of ResourceClassParameters.
type ResourceClassParametersListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items ResourceClassParametersTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClassParametersListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersListType)(nil)).Elem()
}

func (i ResourceClassParametersListTypeArgs) ToResourceClassParametersListTypeOutput() ResourceClassParametersListTypeOutput {
	return i.ToResourceClassParametersListTypeOutputWithContext(context.Background())
}

func (i ResourceClassParametersListTypeArgs) ToResourceClassParametersListTypeOutputWithContext(ctx context.Context) ResourceClassParametersListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersListTypeOutput)
}

// ResourceClassParametersList is a collection of ResourceClassParameters.
type ResourceClassParametersListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersListType)(nil)).Elem()
}

func (o ResourceClassParametersListTypeOutput) ToResourceClassParametersListTypeOutput() ResourceClassParametersListTypeOutput {
	return o
}

func (o ResourceClassParametersListTypeOutput) ToResourceClassParametersListTypeOutputWithContext(ctx context.Context) ResourceClassParametersListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassParametersListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of node resource capacity objects.
func (o ResourceClassParametersListTypeOutput) Items() ResourceClassParametersTypeArrayOutput {
	return o.ApplyT(func(v ResourceClassParametersListType) []ResourceClassParametersType { return v.Items }).(ResourceClassParametersTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassParametersListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClassParametersListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Filters describes additional contraints that must be met when using the class.
	Filters []ResourceFilterPatch `pulumi:"filters"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
	GeneratedFrom *ResourceClassParametersReferencePatch `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
	VendorParameters []VendorParametersPatch `pulumi:"vendorParameters"`
}

// ResourceClassParametersPatchTypeInput is an input type that accepts ResourceClassParametersPatchTypeArgs and ResourceClassParametersPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClassParametersPatchTypeInput` via:
//
//	ResourceClassParametersPatchTypeArgs{...}
type ResourceClassParametersPatchTypeInput interface {
	pulumi.Input

	ToResourceClassParametersPatchTypeOutput() ResourceClassParametersPatchTypeOutput
	ToResourceClassParametersPatchTypeOutputWithContext(context.Context) ResourceClassParametersPatchTypeOutput
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Filters describes additional contraints that must be met when using the class.
	Filters ResourceFilterPatchArrayInput `pulumi:"filters"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
	GeneratedFrom ResourceClassParametersReferencePatchPtrInput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
	VendorParameters VendorParametersPatchArrayInput `pulumi:"vendorParameters"`
}

func (ResourceClassParametersPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersPatchType)(nil)).Elem()
}

func (i ResourceClassParametersPatchTypeArgs) ToResourceClassParametersPatchTypeOutput() ResourceClassParametersPatchTypeOutput {
	return i.ToResourceClassParametersPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClassParametersPatchTypeArgs) ToResourceClassParametersPatchTypeOutputWithContext(ctx context.Context) ResourceClassParametersPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersPatchTypeOutput)
}

// ResourceClassParameters defines resource requests for a ResourceClass in an in-tree format understood by Kubernetes.
type ResourceClassParametersPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersPatchType)(nil)).Elem()
}

func (o ResourceClassParametersPatchTypeOutput) ToResourceClassParametersPatchTypeOutput() ResourceClassParametersPatchTypeOutput {
	return o
}

func (o ResourceClassParametersPatchTypeOutput) ToResourceClassParametersPatchTypeOutputWithContext(ctx context.Context) ResourceClassParametersPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassParametersPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Filters describes additional contraints that must be met when using the class.
func (o ResourceClassParametersPatchTypeOutput) Filters() ResourceFilterPatchArrayOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) []ResourceFilterPatch { return v.Filters }).(ResourceFilterPatchArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the class parameters when the parameter reference of the class refers to some unknown type.
func (o ResourceClassParametersPatchTypeOutput) GeneratedFrom() ResourceClassParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) *ResourceClassParametersReferencePatch {
		return v.GeneratedFrom
	}).(ResourceClassParametersReferencePatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassParametersPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassParametersPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// VendorParameters are arbitrary setup parameters for all claims using this class. They are ignored while allocating the claim. There must not be more than one entry per driver.
func (o ResourceClassParametersPatchTypeOutput) VendorParameters() VendorParametersPatchArrayOutput {
	return o.ApplyT(func(v ResourceClassParametersPatchType) []VendorParametersPatch { return v.VendorParameters }).(VendorParametersPatchArrayOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `pulumi:"namespace"`
}

// ResourceClassParametersReferenceInput is an input type that accepts ResourceClassParametersReferenceArgs and ResourceClassParametersReferenceOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferenceInput` via:
//
//	ResourceClassParametersReferenceArgs{...}
type ResourceClassParametersReferenceInput interface {
	pulumi.Input

	ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput
	ToResourceClassParametersReferenceOutputWithContext(context.Context) ResourceClassParametersReferenceOutput
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ResourceClassParametersReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReference)(nil)).Elem()
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput {
	return i.ToResourceClassParametersReferenceOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferenceOutputWithContext(ctx context.Context) ResourceClassParametersReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferenceOutput)
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return i.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferenceOutput).ToResourceClassParametersReferencePtrOutputWithContext(ctx)
}

// ResourceClassParametersReferencePtrInput is an input type that accepts ResourceClassParametersReferenceArgs, ResourceClassParametersReferencePtr and ResourceClassParametersReferencePtrOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePtrInput` via:
//
//	        ResourceClassParametersReferenceArgs{...}
//
//	or:
//
//	        nil
type ResourceClassParametersReferencePtrInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput
	ToResourceClassParametersReferencePtrOutputWithContext(context.Context) ResourceClassParametersReferencePtrOutput
}

type resourceClassParametersReferencePtrType ResourceClassParametersReferenceArgs

func ResourceClassParametersReferencePtr(v *ResourceClassParametersReferenceArgs) ResourceClassParametersReferencePtrInput {
	return (*resourceClassParametersReferencePtrType)(v)
}

func (*resourceClassParametersReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReference)(nil)).Elem()
}

func (i *resourceClassParametersReferencePtrType) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return i.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i *resourceClassParametersReferencePtrType) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReference)(nil)).Elem()
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput {
	return o
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferenceOutputWithContext(ctx context.Context) ResourceClassParametersReferenceOutput {
	return o
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return o.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClassParametersReference) *ResourceClassParametersReference {
		return &v
	}).(ResourceClassParametersReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ResourceClassParametersReferencePtrOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReference)(nil)).Elem()
}

func (o ResourceClassParametersReferencePtrOutput) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return o
}

func (o ResourceClassParametersReferencePtrOutput) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return o
}

func (o ResourceClassParametersReferencePtrOutput) Elem() ResourceClassParametersReferenceOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) ResourceClassParametersReference {
		if v != nil {
			return *v
		}
		var ret ResourceClassParametersReference
		return ret
	}).(ResourceClassParametersReferenceOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `pulumi:"namespace"`
}

// ResourceClassParametersReferencePatchInput is an input type that accepts ResourceClassParametersReferencePatchArgs and ResourceClassParametersReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePatchInput` via:
//
//	ResourceClassParametersReferencePatchArgs{...}
type ResourceClassParametersReferencePatchInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput
	ToResourceClassParametersReferencePatchOutputWithContext(context.Context) ResourceClassParametersReferencePatchOutput
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ResourceClassParametersReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput {
	return i.ToResourceClassParametersReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchOutput)
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return i.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchOutput).ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx)
}

// ResourceClassParametersReferencePatchPtrInput is an input type that accepts ResourceClassParametersReferencePatchArgs, ResourceClassParametersReferencePatchPtr and ResourceClassParametersReferencePatchPtrOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePatchPtrInput` via:
//
//	        ResourceClassParametersReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClassParametersReferencePatchPtrInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput
	ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Context) ResourceClassParametersReferencePatchPtrOutput
}

type resourceClassParametersReferencePatchPtrType ResourceClassParametersReferencePatchArgs

func ResourceClassParametersReferencePatchPtr(v *ResourceClassParametersReferencePatchArgs) ResourceClassParametersReferencePatchPtrInput {
	return (*resourceClassParametersReferencePatchPtrType)(v)
}

func (*resourceClassParametersReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (i *resourceClassParametersReferencePatchPtrType) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return i.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i *resourceClassParametersReferencePatchPtrType) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchPtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput {
	return o
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchOutput {
	return o
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return o.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClassParametersReferencePatch) *ResourceClassParametersReferencePatch {
		return &v
	}).(ResourceClassParametersReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ResourceClassParametersReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClassParametersReferencePatchPtrOutput) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClassParametersReferencePatchPtrOutput) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClassParametersReferencePatchPtrOutput) Elem() ResourceClassParametersReferencePatchOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) ResourceClassParametersReferencePatch {
		if v != nil {
			return *v
		}
		var ret ResourceClassParametersReferencePatch
		return ret
	}).(ResourceClassParametersReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName *string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef *ResourceClassParametersReferencePatch `pulumi:"parametersRef"`
	// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
	StructuredParameters *bool `pulumi:"structuredParameters"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes *corev1.NodeSelectorPatch `pulumi:"suitableNodes"`
}

// ResourceClassPatchTypeInput is an input type that accepts ResourceClassPatchTypeArgs and ResourceClassPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClassPatchTypeInput` via:
//
//	ResourceClassPatchTypeArgs{...}
type ResourceClassPatchTypeInput interface {
	pulumi.Input

	ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput
	ToResourceClassPatchTypeOutputWithContext(context.Context) ResourceClassPatchTypeOutput
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef ResourceClassParametersReferencePatchPtrInput `pulumi:"parametersRef"`
	// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
	StructuredParameters pulumi.BoolPtrInput `pulumi:"structuredParameters"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes corev1.NodeSelectorPatchPtrInput `pulumi:"suitableNodes"`
}

func (ResourceClassPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassPatchType)(nil)).Elem()
}

func (i ResourceClassPatchTypeArgs) ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput {
	return i.ToResourceClassPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClassPatchTypeArgs) ToResourceClassPatchTypeOutputWithContext(ctx context.Context) ResourceClassPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassPatchTypeOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassPatchType)(nil)).Elem()
}

func (o ResourceClassPatchTypeOutput) ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput {
	return o
}

func (o ResourceClassPatchTypeOutput) ToResourceClassPatchTypeOutputWithContext(ctx context.Context) ResourceClassPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
//
// Resource drivers have a unique name in forward domain order (acme.example.com).
func (o ResourceClassPatchTypeOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
func (o ResourceClassPatchTypeOutput) ParametersRef() ResourceClassParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *ResourceClassParametersReferencePatch { return v.ParametersRef }).(ResourceClassParametersReferencePatchPtrOutput)
}

// If and only if allocation of claims using this class is handled via structured parameters, then StructuredParameters must be set to true.
func (o ResourceClassPatchTypeOutput) StructuredParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *bool { return v.StructuredParameters }).(pulumi.BoolPtrOutput)
}

// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
//
// Setting this field is optional. If null, all nodes are candidates.
func (o ResourceClassPatchTypeOutput) SuitableNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *corev1.NodeSelectorPatch { return v.SuitableNodes }).(corev1.NodeSelectorPatchPtrOutput)
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilter struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// NamedResources describes a resource filter using the named resources model.
	NamedResources *NamedResourcesFilter `pulumi:"namedResources"`
}

// ResourceFilterInput is an input type that accepts ResourceFilterArgs and ResourceFilterOutput values.
// You can construct a concrete instance of `ResourceFilterInput` via:
//
//	ResourceFilterArgs{...}
type ResourceFilterInput interface {
	pulumi.Input

	ToResourceFilterOutput() ResourceFilterOutput
	ToResourceFilterOutputWithContext(context.Context) ResourceFilterOutput
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilterArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// NamedResources describes a resource filter using the named resources model.
	NamedResources NamedResourcesFilterPtrInput `pulumi:"namedResources"`
}

func (ResourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFilter)(nil)).Elem()
}

func (i ResourceFilterArgs) ToResourceFilterOutput() ResourceFilterOutput {
	return i.ToResourceFilterOutputWithContext(context.Background())
}

func (i ResourceFilterArgs) ToResourceFilterOutputWithContext(ctx context.Context) ResourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFilterOutput)
}

// ResourceFilterArrayInput is an input type that accepts ResourceFilterArray and ResourceFilterArrayOutput values.
// You can construct a concrete instance of `ResourceFilterArrayInput` via:
//
//	ResourceFilterArray{ ResourceFilterArgs{...} }
type ResourceFilterArrayInput interface {
	pulumi.Input

	ToResourceFilterArrayOutput() ResourceFilterArrayOutput
	ToResourceFilterArrayOutputWithContext(context.Context) ResourceFilterArrayOutput
}

type ResourceFilterArray []ResourceFilterInput

func (ResourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFilter)(nil)).Elem()
}

func (i ResourceFilterArray) ToResourceFilterArrayOutput() ResourceFilterArrayOutput {
	return i.ToResourceFilterArrayOutputWithContext(context.Background())
}

func (i ResourceFilterArray) ToResourceFilterArrayOutputWithContext(ctx context.Context) ResourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFilterArrayOutput)
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilterOutput struct{ *pulumi.OutputState }

func (ResourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFilter)(nil)).Elem()
}

func (o ResourceFilterOutput) ToResourceFilterOutput() ResourceFilterOutput {
	return o
}

func (o ResourceFilterOutput) ToResourceFilterOutputWithContext(ctx context.Context) ResourceFilterOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o ResourceFilterOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFilter) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// NamedResources describes a resource filter using the named resources model.
func (o ResourceFilterOutput) NamedResources() NamedResourcesFilterPtrOutput {
	return o.ApplyT(func(v ResourceFilter) *NamedResourcesFilter { return v.NamedResources }).(NamedResourcesFilterPtrOutput)
}

type ResourceFilterArrayOutput struct{ *pulumi.OutputState }

func (ResourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFilter)(nil)).Elem()
}

func (o ResourceFilterArrayOutput) ToResourceFilterArrayOutput() ResourceFilterArrayOutput {
	return o
}

func (o ResourceFilterArrayOutput) ToResourceFilterArrayOutputWithContext(ctx context.Context) ResourceFilterArrayOutput {
	return o
}

func (o ResourceFilterArrayOutput) Index(i pulumi.IntInput) ResourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceFilter {
		return vs[0].([]ResourceFilter)[vs[1].(int)]
	}).(ResourceFilterOutput)
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilterPatch struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// NamedResources describes a resource filter using the named resources model.
	NamedResources *NamedResourcesFilterPatch `pulumi:"namedResources"`
}

// ResourceFilterPatchInput is an input type that accepts ResourceFilterPatchArgs and ResourceFilterPatchOutput values.
// You can construct a concrete instance of `ResourceFilterPatchInput` via:
//
//	ResourceFilterPatchArgs{...}
type ResourceFilterPatchInput interface {
	pulumi.Input

	ToResourceFilterPatchOutput() ResourceFilterPatchOutput
	ToResourceFilterPatchOutputWithContext(context.Context) ResourceFilterPatchOutput
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilterPatchArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// NamedResources describes a resource filter using the named resources model.
	NamedResources NamedResourcesFilterPatchPtrInput `pulumi:"namedResources"`
}

func (ResourceFilterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFilterPatch)(nil)).Elem()
}

func (i ResourceFilterPatchArgs) ToResourceFilterPatchOutput() ResourceFilterPatchOutput {
	return i.ToResourceFilterPatchOutputWithContext(context.Background())
}

func (i ResourceFilterPatchArgs) ToResourceFilterPatchOutputWithContext(ctx context.Context) ResourceFilterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFilterPatchOutput)
}

// ResourceFilterPatchArrayInput is an input type that accepts ResourceFilterPatchArray and ResourceFilterPatchArrayOutput values.
// You can construct a concrete instance of `ResourceFilterPatchArrayInput` via:
//
//	ResourceFilterPatchArray{ ResourceFilterPatchArgs{...} }
type ResourceFilterPatchArrayInput interface {
	pulumi.Input

	ToResourceFilterPatchArrayOutput() ResourceFilterPatchArrayOutput
	ToResourceFilterPatchArrayOutputWithContext(context.Context) ResourceFilterPatchArrayOutput
}

type ResourceFilterPatchArray []ResourceFilterPatchInput

func (ResourceFilterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFilterPatch)(nil)).Elem()
}

func (i ResourceFilterPatchArray) ToResourceFilterPatchArrayOutput() ResourceFilterPatchArrayOutput {
	return i.ToResourceFilterPatchArrayOutputWithContext(context.Background())
}

func (i ResourceFilterPatchArray) ToResourceFilterPatchArrayOutputWithContext(ctx context.Context) ResourceFilterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFilterPatchArrayOutput)
}

// ResourceFilter is a filter for resources from one particular driver.
type ResourceFilterPatchOutput struct{ *pulumi.OutputState }

func (ResourceFilterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFilterPatch)(nil)).Elem()
}

func (o ResourceFilterPatchOutput) ToResourceFilterPatchOutput() ResourceFilterPatchOutput {
	return o
}

func (o ResourceFilterPatchOutput) ToResourceFilterPatchOutputWithContext(ctx context.Context) ResourceFilterPatchOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o ResourceFilterPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFilterPatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// NamedResources describes a resource filter using the named resources model.
func (o ResourceFilterPatchOutput) NamedResources() NamedResourcesFilterPatchPtrOutput {
	return o.ApplyT(func(v ResourceFilterPatch) *NamedResourcesFilterPatch { return v.NamedResources }).(NamedResourcesFilterPatchPtrOutput)
}

type ResourceFilterPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceFilterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFilterPatch)(nil)).Elem()
}

func (o ResourceFilterPatchArrayOutput) ToResourceFilterPatchArrayOutput() ResourceFilterPatchArrayOutput {
	return o
}

func (o ResourceFilterPatchArrayOutput) ToResourceFilterPatchArrayOutputWithContext(ctx context.Context) ResourceFilterPatchArrayOutput {
	return o
}

func (o ResourceFilterPatchArrayOutput) Index(i pulumi.IntInput) ResourceFilterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceFilterPatch {
		return vs[0].([]ResourceFilterPatch)[vs[1].(int)]
	}).(ResourceFilterPatchOutput)
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandle struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data *string `pulumi:"data"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName *string `pulumi:"driverName"`
	// If StructuredData is set, then it needs to be used instead of Data.
	StructuredData *StructuredResourceHandle `pulumi:"structuredData"`
}

// ResourceHandleInput is an input type that accepts ResourceHandleArgs and ResourceHandleOutput values.
// You can construct a concrete instance of `ResourceHandleInput` via:
//
//	ResourceHandleArgs{...}
type ResourceHandleInput interface {
	pulumi.Input

	ToResourceHandleOutput() ResourceHandleOutput
	ToResourceHandleOutputWithContext(context.Context) ResourceHandleOutput
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandleArgs struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// If StructuredData is set, then it needs to be used instead of Data.
	StructuredData StructuredResourceHandlePtrInput `pulumi:"structuredData"`
}

func (ResourceHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHandle)(nil)).Elem()
}

func (i ResourceHandleArgs) ToResourceHandleOutput() ResourceHandleOutput {
	return i.ToResourceHandleOutputWithContext(context.Background())
}

func (i ResourceHandleArgs) ToResourceHandleOutputWithContext(ctx context.Context) ResourceHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHandleOutput)
}

// ResourceHandleArrayInput is an input type that accepts ResourceHandleArray and ResourceHandleArrayOutput values.
// You can construct a concrete instance of `ResourceHandleArrayInput` via:
//
//	ResourceHandleArray{ ResourceHandleArgs{...} }
type ResourceHandleArrayInput interface {
	pulumi.Input

	ToResourceHandleArrayOutput() ResourceHandleArrayOutput
	ToResourceHandleArrayOutputWithContext(context.Context) ResourceHandleArrayOutput
}

type ResourceHandleArray []ResourceHandleInput

func (ResourceHandleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceHandle)(nil)).Elem()
}

func (i ResourceHandleArray) ToResourceHandleArrayOutput() ResourceHandleArrayOutput {
	return i.ToResourceHandleArrayOutputWithContext(context.Background())
}

func (i ResourceHandleArray) ToResourceHandleArrayOutputWithContext(ctx context.Context) ResourceHandleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHandleArrayOutput)
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandleOutput struct{ *pulumi.OutputState }

func (ResourceHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHandle)(nil)).Elem()
}

func (o ResourceHandleOutput) ToResourceHandleOutput() ResourceHandleOutput {
	return o
}

func (o ResourceHandleOutput) ToResourceHandleOutputWithContext(ctx context.Context) ResourceHandleOutput {
	return o
}

// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o ResourceHandleOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHandle) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
func (o ResourceHandleOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHandle) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// If StructuredData is set, then it needs to be used instead of Data.
func (o ResourceHandleOutput) StructuredData() StructuredResourceHandlePtrOutput {
	return o.ApplyT(func(v ResourceHandle) *StructuredResourceHandle { return v.StructuredData }).(StructuredResourceHandlePtrOutput)
}

type ResourceHandleArrayOutput struct{ *pulumi.OutputState }

func (ResourceHandleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceHandle)(nil)).Elem()
}

func (o ResourceHandleArrayOutput) ToResourceHandleArrayOutput() ResourceHandleArrayOutput {
	return o
}

func (o ResourceHandleArrayOutput) ToResourceHandleArrayOutputWithContext(ctx context.Context) ResourceHandleArrayOutput {
	return o
}

func (o ResourceHandleArrayOutput) Index(i pulumi.IntInput) ResourceHandleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceHandle {
		return vs[0].([]ResourceHandle)[vs[1].(int)]
	}).(ResourceHandleOutput)
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandlePatch struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data *string `pulumi:"data"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName *string `pulumi:"driverName"`
	// If StructuredData is set, then it needs to be used instead of Data.
	StructuredData *StructuredResourceHandlePatch `pulumi:"structuredData"`
}

// ResourceHandlePatchInput is an input type that accepts ResourceHandlePatchArgs and ResourceHandlePatchOutput values.
// You can construct a concrete instance of `ResourceHandlePatchInput` via:
//
//	ResourceHandlePatchArgs{...}
type ResourceHandlePatchInput interface {
	pulumi.Input

	ToResourceHandlePatchOutput() ResourceHandlePatchOutput
	ToResourceHandlePatchOutputWithContext(context.Context) ResourceHandlePatchOutput
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandlePatchArgs struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// If StructuredData is set, then it needs to be used instead of Data.
	StructuredData StructuredResourceHandlePatchPtrInput `pulumi:"structuredData"`
}

func (ResourceHandlePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHandlePatch)(nil)).Elem()
}

func (i ResourceHandlePatchArgs) ToResourceHandlePatchOutput() ResourceHandlePatchOutput {
	return i.ToResourceHandlePatchOutputWithContext(context.Background())
}

func (i ResourceHandlePatchArgs) ToResourceHandlePatchOutputWithContext(ctx context.Context) ResourceHandlePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHandlePatchOutput)
}

// ResourceHandlePatchArrayInput is an input type that accepts ResourceHandlePatchArray and ResourceHandlePatchArrayOutput values.
// You can construct a concrete instance of `ResourceHandlePatchArrayInput` via:
//
//	ResourceHandlePatchArray{ ResourceHandlePatchArgs{...} }
type ResourceHandlePatchArrayInput interface {
	pulumi.Input

	ToResourceHandlePatchArrayOutput() ResourceHandlePatchArrayOutput
	ToResourceHandlePatchArrayOutputWithContext(context.Context) ResourceHandlePatchArrayOutput
}

type ResourceHandlePatchArray []ResourceHandlePatchInput

func (ResourceHandlePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceHandlePatch)(nil)).Elem()
}

func (i ResourceHandlePatchArray) ToResourceHandlePatchArrayOutput() ResourceHandlePatchArrayOutput {
	return i.ToResourceHandlePatchArrayOutputWithContext(context.Background())
}

func (i ResourceHandlePatchArray) ToResourceHandlePatchArrayOutputWithContext(ctx context.Context) ResourceHandlePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHandlePatchArrayOutput)
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type ResourceHandlePatchOutput struct{ *pulumi.OutputState }

func (ResourceHandlePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHandlePatch)(nil)).Elem()
}

func (o ResourceHandlePatchOutput) ToResourceHandlePatchOutput() ResourceHandlePatchOutput {
	return o
}

func (o ResourceHandlePatchOutput) ToResourceHandlePatchOutputWithContext(ctx context.Context) ResourceHandlePatchOutput {
	return o
}

// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o ResourceHandlePatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHandlePatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
func (o ResourceHandlePatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHandlePatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// If StructuredData is set, then it needs to be used instead of Data.
func (o ResourceHandlePatchOutput) StructuredData() StructuredResourceHandlePatchPtrOutput {
	return o.ApplyT(func(v ResourceHandlePatch) *StructuredResourceHandlePatch { return v.StructuredData }).(StructuredResourceHandlePatchPtrOutput)
}

type ResourceHandlePatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceHandlePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceHandlePatch)(nil)).Elem()
}

func (o ResourceHandlePatchArrayOutput) ToResourceHandlePatchArrayOutput() ResourceHandlePatchArrayOutput {
	return o
}

func (o ResourceHandlePatchArrayOutput) ToResourceHandlePatchArrayOutputWithContext(ctx context.Context) ResourceHandlePatchArrayOutput {
	return o
}

func (o ResourceHandlePatchArrayOutput) Index(i pulumi.IntInput) ResourceHandlePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceHandlePatch {
		return vs[0].([]ResourceHandlePatch)[vs[1].(int)]
	}).(ResourceHandlePatchOutput)
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequest struct {
	// NamedResources describes a request for resources with the named resources model.
	NamedResources *NamedResourcesRequest `pulumi:"namedResources"`
	// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
	VendorParameters interface{} `pulumi:"vendorParameters"`
}

// ResourceRequestInput is an input type that accepts ResourceRequestArgs and ResourceRequestOutput values.
// You can construct a concrete instance of `ResourceRequestInput` via:
//
//	ResourceRequestArgs{...}
type ResourceRequestInput interface {
	pulumi.Input

	ToResourceRequestOutput() ResourceRequestOutput
	ToResourceRequestOutputWithContext(context.Context) ResourceRequestOutput
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequestArgs struct {
	// NamedResources describes a request for resources with the named resources model.
	NamedResources NamedResourcesRequestPtrInput `pulumi:"namedResources"`
	// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
	VendorParameters pulumi.Input `pulumi:"vendorParameters"`
}

func (ResourceRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequest)(nil)).Elem()
}

func (i ResourceRequestArgs) ToResourceRequestOutput() ResourceRequestOutput {
	return i.ToResourceRequestOutputWithContext(context.Background())
}

func (i ResourceRequestArgs) ToResourceRequestOutputWithContext(ctx context.Context) ResourceRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestOutput)
}

// ResourceRequestArrayInput is an input type that accepts ResourceRequestArray and ResourceRequestArrayOutput values.
// You can construct a concrete instance of `ResourceRequestArrayInput` via:
//
//	ResourceRequestArray{ ResourceRequestArgs{...} }
type ResourceRequestArrayInput interface {
	pulumi.Input

	ToResourceRequestArrayOutput() ResourceRequestArrayOutput
	ToResourceRequestArrayOutputWithContext(context.Context) ResourceRequestArrayOutput
}

type ResourceRequestArray []ResourceRequestInput

func (ResourceRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRequest)(nil)).Elem()
}

func (i ResourceRequestArray) ToResourceRequestArrayOutput() ResourceRequestArrayOutput {
	return i.ToResourceRequestArrayOutputWithContext(context.Background())
}

func (i ResourceRequestArray) ToResourceRequestArrayOutputWithContext(ctx context.Context) ResourceRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestArrayOutput)
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequestOutput struct{ *pulumi.OutputState }

func (ResourceRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequest)(nil)).Elem()
}

func (o ResourceRequestOutput) ToResourceRequestOutput() ResourceRequestOutput {
	return o
}

func (o ResourceRequestOutput) ToResourceRequestOutputWithContext(ctx context.Context) ResourceRequestOutput {
	return o
}

// NamedResources describes a request for resources with the named resources model.
func (o ResourceRequestOutput) NamedResources() NamedResourcesRequestPtrOutput {
	return o.ApplyT(func(v ResourceRequest) *NamedResourcesRequest { return v.NamedResources }).(NamedResourcesRequestPtrOutput)
}

// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
func (o ResourceRequestOutput) VendorParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ResourceRequest) interface{} { return v.VendorParameters }).(pulumi.AnyOutput)
}

type ResourceRequestArrayOutput struct{ *pulumi.OutputState }

func (ResourceRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRequest)(nil)).Elem()
}

func (o ResourceRequestArrayOutput) ToResourceRequestArrayOutput() ResourceRequestArrayOutput {
	return o
}

func (o ResourceRequestArrayOutput) ToResourceRequestArrayOutputWithContext(ctx context.Context) ResourceRequestArrayOutput {
	return o
}

func (o ResourceRequestArrayOutput) Index(i pulumi.IntInput) ResourceRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRequest {
		return vs[0].([]ResourceRequest)[vs[1].(int)]
	}).(ResourceRequestOutput)
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequestPatch struct {
	// NamedResources describes a request for resources with the named resources model.
	NamedResources *NamedResourcesRequestPatch `pulumi:"namedResources"`
	// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
	VendorParameters interface{} `pulumi:"vendorParameters"`
}

// ResourceRequestPatchInput is an input type that accepts ResourceRequestPatchArgs and ResourceRequestPatchOutput values.
// You can construct a concrete instance of `ResourceRequestPatchInput` via:
//
//	ResourceRequestPatchArgs{...}
type ResourceRequestPatchInput interface {
	pulumi.Input

	ToResourceRequestPatchOutput() ResourceRequestPatchOutput
	ToResourceRequestPatchOutputWithContext(context.Context) ResourceRequestPatchOutput
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequestPatchArgs struct {
	// NamedResources describes a request for resources with the named resources model.
	NamedResources NamedResourcesRequestPatchPtrInput `pulumi:"namedResources"`
	// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
	VendorParameters pulumi.Input `pulumi:"vendorParameters"`
}

func (ResourceRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestPatch)(nil)).Elem()
}

func (i ResourceRequestPatchArgs) ToResourceRequestPatchOutput() ResourceRequestPatchOutput {
	return i.ToResourceRequestPatchOutputWithContext(context.Background())
}

func (i ResourceRequestPatchArgs) ToResourceRequestPatchOutputWithContext(ctx context.Context) ResourceRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestPatchOutput)
}

// ResourceRequestPatchArrayInput is an input type that accepts ResourceRequestPatchArray and ResourceRequestPatchArrayOutput values.
// You can construct a concrete instance of `ResourceRequestPatchArrayInput` via:
//
//	ResourceRequestPatchArray{ ResourceRequestPatchArgs{...} }
type ResourceRequestPatchArrayInput interface {
	pulumi.Input

	ToResourceRequestPatchArrayOutput() ResourceRequestPatchArrayOutput
	ToResourceRequestPatchArrayOutputWithContext(context.Context) ResourceRequestPatchArrayOutput
}

type ResourceRequestPatchArray []ResourceRequestPatchInput

func (ResourceRequestPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRequestPatch)(nil)).Elem()
}

func (i ResourceRequestPatchArray) ToResourceRequestPatchArrayOutput() ResourceRequestPatchArrayOutput {
	return i.ToResourceRequestPatchArrayOutputWithContext(context.Background())
}

func (i ResourceRequestPatchArray) ToResourceRequestPatchArrayOutputWithContext(ctx context.Context) ResourceRequestPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestPatchArrayOutput)
}

// ResourceRequest is a request for resources from one particular driver.
type ResourceRequestPatchOutput struct{ *pulumi.OutputState }

func (ResourceRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestPatch)(nil)).Elem()
}

func (o ResourceRequestPatchOutput) ToResourceRequestPatchOutput() ResourceRequestPatchOutput {
	return o
}

func (o ResourceRequestPatchOutput) ToResourceRequestPatchOutputWithContext(ctx context.Context) ResourceRequestPatchOutput {
	return o
}

// NamedResources describes a request for resources with the named resources model.
func (o ResourceRequestPatchOutput) NamedResources() NamedResourcesRequestPatchPtrOutput {
	return o.ApplyT(func(v ResourceRequestPatch) *NamedResourcesRequestPatch { return v.NamedResources }).(NamedResourcesRequestPatchPtrOutput)
}

// VendorParameters are arbitrary setup parameters for the requested resource. They are ignored while allocating a claim.
func (o ResourceRequestPatchOutput) VendorParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ResourceRequestPatch) interface{} { return v.VendorParameters }).(pulumi.AnyOutput)
}

type ResourceRequestPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceRequestPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRequestPatch)(nil)).Elem()
}

func (o ResourceRequestPatchArrayOutput) ToResourceRequestPatchArrayOutput() ResourceRequestPatchArrayOutput {
	return o
}

func (o ResourceRequestPatchArrayOutput) ToResourceRequestPatchArrayOutputWithContext(ctx context.Context) ResourceRequestPatchArrayOutput {
	return o
}

func (o ResourceRequestPatchArrayOutput) Index(i pulumi.IntInput) ResourceRequestPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRequestPatch {
		return vs[0].([]ResourceRequestPatch)[vs[1].(int)]
	}).(ResourceRequestPatchOutput)
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSliceType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources *NamedResourcesResources `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName *string `pulumi:"nodeName"`
}

// ResourceSliceTypeInput is an input type that accepts ResourceSliceTypeArgs and ResourceSliceTypeOutput values.
// You can construct a concrete instance of `ResourceSliceTypeInput` via:
//
//	ResourceSliceTypeArgs{...}
type ResourceSliceTypeInput interface {
	pulumi.Input

	ToResourceSliceTypeOutput() ResourceSliceTypeOutput
	ToResourceSliceTypeOutputWithContext(context.Context) ResourceSliceTypeOutput
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSliceTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName pulumi.StringInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources NamedResourcesResourcesPtrInput `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
}

func (ResourceSliceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSliceType)(nil)).Elem()
}

func (i ResourceSliceTypeArgs) ToResourceSliceTypeOutput() ResourceSliceTypeOutput {
	return i.ToResourceSliceTypeOutputWithContext(context.Background())
}

func (i ResourceSliceTypeArgs) ToResourceSliceTypeOutputWithContext(ctx context.Context) ResourceSliceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceTypeOutput)
}

// ResourceSliceTypeArrayInput is an input type that accepts ResourceSliceTypeArray and ResourceSliceTypeArrayOutput values.
// You can construct a concrete instance of `ResourceSliceTypeArrayInput` via:
//
//	ResourceSliceTypeArray{ ResourceSliceTypeArgs{...} }
type ResourceSliceTypeArrayInput interface {
	pulumi.Input

	ToResourceSliceTypeArrayOutput() ResourceSliceTypeArrayOutput
	ToResourceSliceTypeArrayOutputWithContext(context.Context) ResourceSliceTypeArrayOutput
}

type ResourceSliceTypeArray []ResourceSliceTypeInput

func (ResourceSliceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSliceType)(nil)).Elem()
}

func (i ResourceSliceTypeArray) ToResourceSliceTypeArrayOutput() ResourceSliceTypeArrayOutput {
	return i.ToResourceSliceTypeArrayOutputWithContext(context.Background())
}

func (i ResourceSliceTypeArray) ToResourceSliceTypeArrayOutputWithContext(ctx context.Context) ResourceSliceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceTypeArrayOutput)
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSliceTypeOutput struct{ *pulumi.OutputState }

func (ResourceSliceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSliceType)(nil)).Elem()
}

func (o ResourceSliceTypeOutput) ToResourceSliceTypeOutput() ResourceSliceTypeOutput {
	return o
}

func (o ResourceSliceTypeOutput) ToResourceSliceTypeOutputWithContext(ctx context.Context) ResourceSliceTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceSliceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSliceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
func (o ResourceSliceTypeOutput) DriverName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSliceType) string { return v.DriverName }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceSliceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSliceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceSliceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceSliceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// NamedResources describes available resources using the named resources model.
func (o ResourceSliceTypeOutput) NamedResources() NamedResourcesResourcesPtrOutput {
	return o.ApplyT(func(v ResourceSliceType) *NamedResourcesResources { return v.NamedResources }).(NamedResourcesResourcesPtrOutput)
}

// NodeName identifies the node which provides the resources if they are local to a node.
//
// A field selector can be used to list only ResourceSlice objects with a certain node name.
func (o ResourceSliceTypeOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSliceType) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

type ResourceSliceTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceSliceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSliceType)(nil)).Elem()
}

func (o ResourceSliceTypeArrayOutput) ToResourceSliceTypeArrayOutput() ResourceSliceTypeArrayOutput {
	return o
}

func (o ResourceSliceTypeArrayOutput) ToResourceSliceTypeArrayOutputWithContext(ctx context.Context) ResourceSliceTypeArrayOutput {
	return o
}

func (o ResourceSliceTypeArrayOutput) Index(i pulumi.IntInput) ResourceSliceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceSliceType {
		return vs[0].([]ResourceSliceType)[vs[1].(int)]
	}).(ResourceSliceTypeOutput)
}

// ResourceSliceList is a collection of ResourceSlices.
type ResourceSliceListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items []ResourceSliceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceSliceListTypeInput is an input type that accepts ResourceSliceListTypeArgs and ResourceSliceListTypeOutput values.
// You can construct a concrete instance of `ResourceSliceListTypeInput` via:
//
//	ResourceSliceListTypeArgs{...}
type ResourceSliceListTypeInput interface {
	pulumi.Input

	ToResourceSliceListTypeOutput() ResourceSliceListTypeOutput
	ToResourceSliceListTypeOutputWithContext(context.Context) ResourceSliceListTypeOutput
}

// ResourceSliceList is a collection of ResourceSlices.
type ResourceSliceListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items ResourceSliceTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceSliceListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSliceListType)(nil)).Elem()
}

func (i ResourceSliceListTypeArgs) ToResourceSliceListTypeOutput() ResourceSliceListTypeOutput {
	return i.ToResourceSliceListTypeOutputWithContext(context.Background())
}

func (i ResourceSliceListTypeArgs) ToResourceSliceListTypeOutputWithContext(ctx context.Context) ResourceSliceListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceListTypeOutput)
}

// ResourceSliceList is a collection of ResourceSlices.
type ResourceSliceListTypeOutput struct{ *pulumi.OutputState }

func (ResourceSliceListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSliceListType)(nil)).Elem()
}

func (o ResourceSliceListTypeOutput) ToResourceSliceListTypeOutput() ResourceSliceListTypeOutput {
	return o
}

func (o ResourceSliceListTypeOutput) ToResourceSliceListTypeOutputWithContext(ctx context.Context) ResourceSliceListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceSliceListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSliceListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of node resource capacity objects.
func (o ResourceSliceListTypeOutput) Items() ResourceSliceTypeArrayOutput {
	return o.ApplyT(func(v ResourceSliceListType) []ResourceSliceType { return v.Items }).(ResourceSliceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceSliceListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSliceListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceSliceListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceSliceListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSlicePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName *string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources *NamedResourcesResourcesPatch `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName *string `pulumi:"nodeName"`
}

// ResourceSlicePatchTypeInput is an input type that accepts ResourceSlicePatchTypeArgs and ResourceSlicePatchTypeOutput values.
// You can construct a concrete instance of `ResourceSlicePatchTypeInput` via:
//
//	ResourceSlicePatchTypeArgs{...}
type ResourceSlicePatchTypeInput interface {
	pulumi.Input

	ToResourceSlicePatchTypeOutput() ResourceSlicePatchTypeOutput
	ToResourceSlicePatchTypeOutputWithContext(context.Context) ResourceSlicePatchTypeOutput
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSlicePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// NamedResources describes available resources using the named resources model.
	NamedResources NamedResourcesResourcesPatchPtrInput `pulumi:"namedResources"`
	// NodeName identifies the node which provides the resources if they are local to a node.
	//
	// A field selector can be used to list only ResourceSlice objects with a certain node name.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
}

func (ResourceSlicePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSlicePatchType)(nil)).Elem()
}

func (i ResourceSlicePatchTypeArgs) ToResourceSlicePatchTypeOutput() ResourceSlicePatchTypeOutput {
	return i.ToResourceSlicePatchTypeOutputWithContext(context.Background())
}

func (i ResourceSlicePatchTypeArgs) ToResourceSlicePatchTypeOutputWithContext(ctx context.Context) ResourceSlicePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSlicePatchTypeOutput)
}

// ResourceSlice provides information about available resources on individual nodes.
type ResourceSlicePatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceSlicePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSlicePatchType)(nil)).Elem()
}

func (o ResourceSlicePatchTypeOutput) ToResourceSlicePatchTypeOutput() ResourceSlicePatchTypeOutput {
	return o
}

func (o ResourceSlicePatchTypeOutput) ToResourceSlicePatchTypeOutputWithContext(ctx context.Context) ResourceSlicePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceSlicePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
func (o ResourceSlicePatchTypeOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceSlicePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceSlicePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// NamedResources describes available resources using the named resources model.
func (o ResourceSlicePatchTypeOutput) NamedResources() NamedResourcesResourcesPatchPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *NamedResourcesResourcesPatch { return v.NamedResources }).(NamedResourcesResourcesPatchPtrOutput)
}

// NodeName identifies the node which provides the resources if they are local to a node.
//
// A field selector can be used to list only ResourceSlice objects with a certain node name.
func (o ResourceSlicePatchTypeOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSlicePatchType) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandle struct {
	// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
	NodeName *string `pulumi:"nodeName"`
	// Results lists all allocated driver resources.
	Results []DriverAllocationResult `pulumi:"results"`
	// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
	VendorClaimParameters interface{} `pulumi:"vendorClaimParameters"`
	// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
	VendorClassParameters interface{} `pulumi:"vendorClassParameters"`
}

// StructuredResourceHandleInput is an input type that accepts StructuredResourceHandleArgs and StructuredResourceHandleOutput values.
// You can construct a concrete instance of `StructuredResourceHandleInput` via:
//
//	StructuredResourceHandleArgs{...}
type StructuredResourceHandleInput interface {
	pulumi.Input

	ToStructuredResourceHandleOutput() StructuredResourceHandleOutput
	ToStructuredResourceHandleOutputWithContext(context.Context) StructuredResourceHandleOutput
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandleArgs struct {
	// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Results lists all allocated driver resources.
	Results DriverAllocationResultArrayInput `pulumi:"results"`
	// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
	VendorClaimParameters pulumi.Input `pulumi:"vendorClaimParameters"`
	// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
	VendorClassParameters pulumi.Input `pulumi:"vendorClassParameters"`
}

func (StructuredResourceHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StructuredResourceHandle)(nil)).Elem()
}

func (i StructuredResourceHandleArgs) ToStructuredResourceHandleOutput() StructuredResourceHandleOutput {
	return i.ToStructuredResourceHandleOutputWithContext(context.Background())
}

func (i StructuredResourceHandleArgs) ToStructuredResourceHandleOutputWithContext(ctx context.Context) StructuredResourceHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandleOutput)
}

func (i StructuredResourceHandleArgs) ToStructuredResourceHandlePtrOutput() StructuredResourceHandlePtrOutput {
	return i.ToStructuredResourceHandlePtrOutputWithContext(context.Background())
}

func (i StructuredResourceHandleArgs) ToStructuredResourceHandlePtrOutputWithContext(ctx context.Context) StructuredResourceHandlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandleOutput).ToStructuredResourceHandlePtrOutputWithContext(ctx)
}

// StructuredResourceHandlePtrInput is an input type that accepts StructuredResourceHandleArgs, StructuredResourceHandlePtr and StructuredResourceHandlePtrOutput values.
// You can construct a concrete instance of `StructuredResourceHandlePtrInput` via:
//
//	        StructuredResourceHandleArgs{...}
//
//	or:
//
//	        nil
type StructuredResourceHandlePtrInput interface {
	pulumi.Input

	ToStructuredResourceHandlePtrOutput() StructuredResourceHandlePtrOutput
	ToStructuredResourceHandlePtrOutputWithContext(context.Context) StructuredResourceHandlePtrOutput
}

type structuredResourceHandlePtrType StructuredResourceHandleArgs

func StructuredResourceHandlePtr(v *StructuredResourceHandleArgs) StructuredResourceHandlePtrInput {
	return (*structuredResourceHandlePtrType)(v)
}

func (*structuredResourceHandlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StructuredResourceHandle)(nil)).Elem()
}

func (i *structuredResourceHandlePtrType) ToStructuredResourceHandlePtrOutput() StructuredResourceHandlePtrOutput {
	return i.ToStructuredResourceHandlePtrOutputWithContext(context.Background())
}

func (i *structuredResourceHandlePtrType) ToStructuredResourceHandlePtrOutputWithContext(ctx context.Context) StructuredResourceHandlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandlePtrOutput)
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandleOutput struct{ *pulumi.OutputState }

func (StructuredResourceHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StructuredResourceHandle)(nil)).Elem()
}

func (o StructuredResourceHandleOutput) ToStructuredResourceHandleOutput() StructuredResourceHandleOutput {
	return o
}

func (o StructuredResourceHandleOutput) ToStructuredResourceHandleOutputWithContext(ctx context.Context) StructuredResourceHandleOutput {
	return o
}

func (o StructuredResourceHandleOutput) ToStructuredResourceHandlePtrOutput() StructuredResourceHandlePtrOutput {
	return o.ToStructuredResourceHandlePtrOutputWithContext(context.Background())
}

func (o StructuredResourceHandleOutput) ToStructuredResourceHandlePtrOutputWithContext(ctx context.Context) StructuredResourceHandlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StructuredResourceHandle) *StructuredResourceHandle {
		return &v
	}).(StructuredResourceHandlePtrOutput)
}

// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
func (o StructuredResourceHandleOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StructuredResourceHandle) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Results lists all allocated driver resources.
func (o StructuredResourceHandleOutput) Results() DriverAllocationResultArrayOutput {
	return o.ApplyT(func(v StructuredResourceHandle) []DriverAllocationResult { return v.Results }).(DriverAllocationResultArrayOutput)
}

// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
func (o StructuredResourceHandleOutput) VendorClaimParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v StructuredResourceHandle) interface{} { return v.VendorClaimParameters }).(pulumi.AnyOutput)
}

// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
func (o StructuredResourceHandleOutput) VendorClassParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v StructuredResourceHandle) interface{} { return v.VendorClassParameters }).(pulumi.AnyOutput)
}

type StructuredResourceHandlePtrOutput struct{ *pulumi.OutputState }

func (StructuredResourceHandlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StructuredResourceHandle)(nil)).Elem()
}

func (o StructuredResourceHandlePtrOutput) ToStructuredResourceHandlePtrOutput() StructuredResourceHandlePtrOutput {
	return o
}

func (o StructuredResourceHandlePtrOutput) ToStructuredResourceHandlePtrOutputWithContext(ctx context.Context) StructuredResourceHandlePtrOutput {
	return o
}

func (o StructuredResourceHandlePtrOutput) Elem() StructuredResourceHandleOutput {
	return o.ApplyT(func(v *StructuredResourceHandle) StructuredResourceHandle {
		if v != nil {
			return *v
		}
		var ret StructuredResourceHandle
		return ret
	}).(StructuredResourceHandleOutput)
}

// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
func (o StructuredResourceHandlePtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StructuredResourceHandle) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Results lists all allocated driver resources.
func (o StructuredResourceHandlePtrOutput) Results() DriverAllocationResultArrayOutput {
	return o.ApplyT(func(v *StructuredResourceHandle) []DriverAllocationResult {
		if v == nil {
			return nil
		}
		return v.Results
	}).(DriverAllocationResultArrayOutput)
}

// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
func (o StructuredResourceHandlePtrOutput) VendorClaimParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *StructuredResourceHandle) interface{} {
		if v == nil {
			return nil
		}
		return v.VendorClaimParameters
	}).(pulumi.AnyOutput)
}

// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
func (o StructuredResourceHandlePtrOutput) VendorClassParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *StructuredResourceHandle) interface{} {
		if v == nil {
			return nil
		}
		return v.VendorClassParameters
	}).(pulumi.AnyOutput)
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandlePatch struct {
	// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
	NodeName *string `pulumi:"nodeName"`
	// Results lists all allocated driver resources.
	Results []DriverAllocationResultPatch `pulumi:"results"`
	// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
	VendorClaimParameters interface{} `pulumi:"vendorClaimParameters"`
	// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
	VendorClassParameters interface{} `pulumi:"vendorClassParameters"`
}

// StructuredResourceHandlePatchInput is an input type that accepts StructuredResourceHandlePatchArgs and StructuredResourceHandlePatchOutput values.
// You can construct a concrete instance of `StructuredResourceHandlePatchInput` via:
//
//	StructuredResourceHandlePatchArgs{...}
type StructuredResourceHandlePatchInput interface {
	pulumi.Input

	ToStructuredResourceHandlePatchOutput() StructuredResourceHandlePatchOutput
	ToStructuredResourceHandlePatchOutputWithContext(context.Context) StructuredResourceHandlePatchOutput
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandlePatchArgs struct {
	// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Results lists all allocated driver resources.
	Results DriverAllocationResultPatchArrayInput `pulumi:"results"`
	// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
	VendorClaimParameters pulumi.Input `pulumi:"vendorClaimParameters"`
	// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
	VendorClassParameters pulumi.Input `pulumi:"vendorClassParameters"`
}

func (StructuredResourceHandlePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StructuredResourceHandlePatch)(nil)).Elem()
}

func (i StructuredResourceHandlePatchArgs) ToStructuredResourceHandlePatchOutput() StructuredResourceHandlePatchOutput {
	return i.ToStructuredResourceHandlePatchOutputWithContext(context.Background())
}

func (i StructuredResourceHandlePatchArgs) ToStructuredResourceHandlePatchOutputWithContext(ctx context.Context) StructuredResourceHandlePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandlePatchOutput)
}

func (i StructuredResourceHandlePatchArgs) ToStructuredResourceHandlePatchPtrOutput() StructuredResourceHandlePatchPtrOutput {
	return i.ToStructuredResourceHandlePatchPtrOutputWithContext(context.Background())
}

func (i StructuredResourceHandlePatchArgs) ToStructuredResourceHandlePatchPtrOutputWithContext(ctx context.Context) StructuredResourceHandlePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandlePatchOutput).ToStructuredResourceHandlePatchPtrOutputWithContext(ctx)
}

// StructuredResourceHandlePatchPtrInput is an input type that accepts StructuredResourceHandlePatchArgs, StructuredResourceHandlePatchPtr and StructuredResourceHandlePatchPtrOutput values.
// You can construct a concrete instance of `StructuredResourceHandlePatchPtrInput` via:
//
//	        StructuredResourceHandlePatchArgs{...}
//
//	or:
//
//	        nil
type StructuredResourceHandlePatchPtrInput interface {
	pulumi.Input

	ToStructuredResourceHandlePatchPtrOutput() StructuredResourceHandlePatchPtrOutput
	ToStructuredResourceHandlePatchPtrOutputWithContext(context.Context) StructuredResourceHandlePatchPtrOutput
}

type structuredResourceHandlePatchPtrType StructuredResourceHandlePatchArgs

func StructuredResourceHandlePatchPtr(v *StructuredResourceHandlePatchArgs) StructuredResourceHandlePatchPtrInput {
	return (*structuredResourceHandlePatchPtrType)(v)
}

func (*structuredResourceHandlePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StructuredResourceHandlePatch)(nil)).Elem()
}

func (i *structuredResourceHandlePatchPtrType) ToStructuredResourceHandlePatchPtrOutput() StructuredResourceHandlePatchPtrOutput {
	return i.ToStructuredResourceHandlePatchPtrOutputWithContext(context.Background())
}

func (i *structuredResourceHandlePatchPtrType) ToStructuredResourceHandlePatchPtrOutputWithContext(ctx context.Context) StructuredResourceHandlePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StructuredResourceHandlePatchPtrOutput)
}

// StructuredResourceHandle is the in-tree representation of the allocation result.
type StructuredResourceHandlePatchOutput struct{ *pulumi.OutputState }

func (StructuredResourceHandlePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StructuredResourceHandlePatch)(nil)).Elem()
}

func (o StructuredResourceHandlePatchOutput) ToStructuredResourceHandlePatchOutput() StructuredResourceHandlePatchOutput {
	return o
}

func (o StructuredResourceHandlePatchOutput) ToStructuredResourceHandlePatchOutputWithContext(ctx context.Context) StructuredResourceHandlePatchOutput {
	return o
}

func (o StructuredResourceHandlePatchOutput) ToStructuredResourceHandlePatchPtrOutput() StructuredResourceHandlePatchPtrOutput {
	return o.ToStructuredResourceHandlePatchPtrOutputWithContext(context.Background())
}

func (o StructuredResourceHandlePatchOutput) ToStructuredResourceHandlePatchPtrOutputWithContext(ctx context.Context) StructuredResourceHandlePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StructuredResourceHandlePatch) *StructuredResourceHandlePatch {
		return &v
	}).(StructuredResourceHandlePatchPtrOutput)
}

// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
func (o StructuredResourceHandlePatchOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StructuredResourceHandlePatch) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Results lists all allocated driver resources.
func (o StructuredResourceHandlePatchOutput) Results() DriverAllocationResultPatchArrayOutput {
	return o.ApplyT(func(v StructuredResourceHandlePatch) []DriverAllocationResultPatch { return v.Results }).(DriverAllocationResultPatchArrayOutput)
}

// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
func (o StructuredResourceHandlePatchOutput) VendorClaimParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v StructuredResourceHandlePatch) interface{} { return v.VendorClaimParameters }).(pulumi.AnyOutput)
}

// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
func (o StructuredResourceHandlePatchOutput) VendorClassParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v StructuredResourceHandlePatch) interface{} { return v.VendorClassParameters }).(pulumi.AnyOutput)
}

type StructuredResourceHandlePatchPtrOutput struct{ *pulumi.OutputState }

func (StructuredResourceHandlePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StructuredResourceHandlePatch)(nil)).Elem()
}

func (o StructuredResourceHandlePatchPtrOutput) ToStructuredResourceHandlePatchPtrOutput() StructuredResourceHandlePatchPtrOutput {
	return o
}

func (o StructuredResourceHandlePatchPtrOutput) ToStructuredResourceHandlePatchPtrOutputWithContext(ctx context.Context) StructuredResourceHandlePatchPtrOutput {
	return o
}

func (o StructuredResourceHandlePatchPtrOutput) Elem() StructuredResourceHandlePatchOutput {
	return o.ApplyT(func(v *StructuredResourceHandlePatch) StructuredResourceHandlePatch {
		if v != nil {
			return *v
		}
		var ret StructuredResourceHandlePatch
		return ret
	}).(StructuredResourceHandlePatchOutput)
}

// NodeName is the name of the node providing the necessary resources if the resources are local to a node.
func (o StructuredResourceHandlePatchPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StructuredResourceHandlePatch) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Results lists all allocated driver resources.
func (o StructuredResourceHandlePatchPtrOutput) Results() DriverAllocationResultPatchArrayOutput {
	return o.ApplyT(func(v *StructuredResourceHandlePatch) []DriverAllocationResultPatch {
		if v == nil {
			return nil
		}
		return v.Results
	}).(DriverAllocationResultPatchArrayOutput)
}

// VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
func (o StructuredResourceHandlePatchPtrOutput) VendorClaimParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *StructuredResourceHandlePatch) interface{} {
		if v == nil {
			return nil
		}
		return v.VendorClaimParameters
	}).(pulumi.AnyOutput)
}

// VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
func (o StructuredResourceHandlePatchPtrOutput) VendorClassParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *StructuredResourceHandlePatch) interface{} {
		if v == nil {
			return nil
		}
		return v.VendorClassParameters
	}).(pulumi.AnyOutput)
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParameters struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
	Parameters interface{} `pulumi:"parameters"`
}

// VendorParametersInput is an input type that accepts VendorParametersArgs and VendorParametersOutput values.
// You can construct a concrete instance of `VendorParametersInput` via:
//
//	VendorParametersArgs{...}
type VendorParametersInput interface {
	pulumi.Input

	ToVendorParametersOutput() VendorParametersOutput
	ToVendorParametersOutputWithContext(context.Context) VendorParametersOutput
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParametersArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
	Parameters pulumi.Input `pulumi:"parameters"`
}

func (VendorParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VendorParameters)(nil)).Elem()
}

func (i VendorParametersArgs) ToVendorParametersOutput() VendorParametersOutput {
	return i.ToVendorParametersOutputWithContext(context.Background())
}

func (i VendorParametersArgs) ToVendorParametersOutputWithContext(ctx context.Context) VendorParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VendorParametersOutput)
}

// VendorParametersArrayInput is an input type that accepts VendorParametersArray and VendorParametersArrayOutput values.
// You can construct a concrete instance of `VendorParametersArrayInput` via:
//
//	VendorParametersArray{ VendorParametersArgs{...} }
type VendorParametersArrayInput interface {
	pulumi.Input

	ToVendorParametersArrayOutput() VendorParametersArrayOutput
	ToVendorParametersArrayOutputWithContext(context.Context) VendorParametersArrayOutput
}

type VendorParametersArray []VendorParametersInput

func (VendorParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VendorParameters)(nil)).Elem()
}

func (i VendorParametersArray) ToVendorParametersArrayOutput() VendorParametersArrayOutput {
	return i.ToVendorParametersArrayOutputWithContext(context.Background())
}

func (i VendorParametersArray) ToVendorParametersArrayOutputWithContext(ctx context.Context) VendorParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VendorParametersArrayOutput)
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParametersOutput struct{ *pulumi.OutputState }

func (VendorParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VendorParameters)(nil)).Elem()
}

func (o VendorParametersOutput) ToVendorParametersOutput() VendorParametersOutput {
	return o
}

func (o VendorParametersOutput) ToVendorParametersOutputWithContext(ctx context.Context) VendorParametersOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o VendorParametersOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VendorParameters) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
func (o VendorParametersOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v VendorParameters) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type VendorParametersArrayOutput struct{ *pulumi.OutputState }

func (VendorParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VendorParameters)(nil)).Elem()
}

func (o VendorParametersArrayOutput) ToVendorParametersArrayOutput() VendorParametersArrayOutput {
	return o
}

func (o VendorParametersArrayOutput) ToVendorParametersArrayOutputWithContext(ctx context.Context) VendorParametersArrayOutput {
	return o
}

func (o VendorParametersArrayOutput) Index(i pulumi.IntInput) VendorParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VendorParameters {
		return vs[0].([]VendorParameters)[vs[1].(int)]
	}).(VendorParametersOutput)
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParametersPatch struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName *string `pulumi:"driverName"`
	// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
	Parameters interface{} `pulumi:"parameters"`
}

// VendorParametersPatchInput is an input type that accepts VendorParametersPatchArgs and VendorParametersPatchOutput values.
// You can construct a concrete instance of `VendorParametersPatchInput` via:
//
//	VendorParametersPatchArgs{...}
type VendorParametersPatchInput interface {
	pulumi.Input

	ToVendorParametersPatchOutput() VendorParametersPatchOutput
	ToVendorParametersPatchOutputWithContext(context.Context) VendorParametersPatchOutput
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParametersPatchArgs struct {
	// DriverName is the name used by the DRA driver kubelet plugin.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
	Parameters pulumi.Input `pulumi:"parameters"`
}

func (VendorParametersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VendorParametersPatch)(nil)).Elem()
}

func (i VendorParametersPatchArgs) ToVendorParametersPatchOutput() VendorParametersPatchOutput {
	return i.ToVendorParametersPatchOutputWithContext(context.Background())
}

func (i VendorParametersPatchArgs) ToVendorParametersPatchOutputWithContext(ctx context.Context) VendorParametersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VendorParametersPatchOutput)
}

// VendorParametersPatchArrayInput is an input type that accepts VendorParametersPatchArray and VendorParametersPatchArrayOutput values.
// You can construct a concrete instance of `VendorParametersPatchArrayInput` via:
//
//	VendorParametersPatchArray{ VendorParametersPatchArgs{...} }
type VendorParametersPatchArrayInput interface {
	pulumi.Input

	ToVendorParametersPatchArrayOutput() VendorParametersPatchArrayOutput
	ToVendorParametersPatchArrayOutputWithContext(context.Context) VendorParametersPatchArrayOutput
}

type VendorParametersPatchArray []VendorParametersPatchInput

func (VendorParametersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VendorParametersPatch)(nil)).Elem()
}

func (i VendorParametersPatchArray) ToVendorParametersPatchArrayOutput() VendorParametersPatchArrayOutput {
	return i.ToVendorParametersPatchArrayOutputWithContext(context.Background())
}

func (i VendorParametersPatchArray) ToVendorParametersPatchArrayOutputWithContext(ctx context.Context) VendorParametersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VendorParametersPatchArrayOutput)
}

// VendorParameters are opaque parameters for one particular driver.
type VendorParametersPatchOutput struct{ *pulumi.OutputState }

func (VendorParametersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VendorParametersPatch)(nil)).Elem()
}

func (o VendorParametersPatchOutput) ToVendorParametersPatchOutput() VendorParametersPatchOutput {
	return o
}

func (o VendorParametersPatchOutput) ToVendorParametersPatchOutputWithContext(ctx context.Context) VendorParametersPatchOutput {
	return o
}

// DriverName is the name used by the DRA driver kubelet plugin.
func (o VendorParametersPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VendorParametersPatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Parameters can be arbitrary setup parameters. They are ignored while allocating a claim.
func (o VendorParametersPatchOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v VendorParametersPatch) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type VendorParametersPatchArrayOutput struct{ *pulumi.OutputState }

func (VendorParametersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VendorParametersPatch)(nil)).Elem()
}

func (o VendorParametersPatchArrayOutput) ToVendorParametersPatchArrayOutput() VendorParametersPatchArrayOutput {
	return o
}

func (o VendorParametersPatchArrayOutput) ToVendorParametersPatchArrayOutputWithContext(ctx context.Context) VendorParametersPatchArrayOutput {
	return o
}

func (o VendorParametersPatchArrayOutput) Index(i pulumi.IntInput) VendorParametersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VendorParametersPatch {
		return vs[0].([]VendorParametersPatch)[vs[1].(int)]
	}).(VendorParametersPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultInput)(nil)).Elem(), AllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPtrInput)(nil)).Elem(), AllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPatchInput)(nil)).Elem(), AllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPatchPtrInput)(nil)).Elem(), AllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverAllocationResultInput)(nil)).Elem(), DriverAllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverAllocationResultArrayInput)(nil)).Elem(), DriverAllocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverAllocationResultPatchInput)(nil)).Elem(), DriverAllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverAllocationResultPatchArrayInput)(nil)).Elem(), DriverAllocationResultPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverRequestsInput)(nil)).Elem(), DriverRequestsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverRequestsArrayInput)(nil)).Elem(), DriverRequestsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverRequestsPatchInput)(nil)).Elem(), DriverRequestsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverRequestsPatchArrayInput)(nil)).Elem(), DriverRequestsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAllocationResultInput)(nil)).Elem(), NamedResourcesAllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAllocationResultPtrInput)(nil)).Elem(), NamedResourcesAllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAllocationResultPatchInput)(nil)).Elem(), NamedResourcesAllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAllocationResultPatchPtrInput)(nil)).Elem(), NamedResourcesAllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAttributeInput)(nil)).Elem(), NamedResourcesAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAttributeArrayInput)(nil)).Elem(), NamedResourcesAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAttributePatchInput)(nil)).Elem(), NamedResourcesAttributePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesAttributePatchArrayInput)(nil)).Elem(), NamedResourcesAttributePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesFilterInput)(nil)).Elem(), NamedResourcesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesFilterPtrInput)(nil)).Elem(), NamedResourcesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesFilterPatchInput)(nil)).Elem(), NamedResourcesFilterPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesFilterPatchPtrInput)(nil)).Elem(), NamedResourcesFilterPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesInstanceInput)(nil)).Elem(), NamedResourcesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesInstanceArrayInput)(nil)).Elem(), NamedResourcesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesInstancePatchInput)(nil)).Elem(), NamedResourcesInstancePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesInstancePatchArrayInput)(nil)).Elem(), NamedResourcesInstancePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesIntSliceInput)(nil)).Elem(), NamedResourcesIntSliceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesIntSlicePtrInput)(nil)).Elem(), NamedResourcesIntSliceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesIntSlicePatchInput)(nil)).Elem(), NamedResourcesIntSlicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesIntSlicePatchPtrInput)(nil)).Elem(), NamedResourcesIntSlicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesRequestInput)(nil)).Elem(), NamedResourcesRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesRequestPtrInput)(nil)).Elem(), NamedResourcesRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesRequestPatchInput)(nil)).Elem(), NamedResourcesRequestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesRequestPatchPtrInput)(nil)).Elem(), NamedResourcesRequestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesResourcesInput)(nil)).Elem(), NamedResourcesResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesResourcesPtrInput)(nil)).Elem(), NamedResourcesResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesResourcesPatchInput)(nil)).Elem(), NamedResourcesResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesResourcesPatchPtrInput)(nil)).Elem(), NamedResourcesResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesStringSliceInput)(nil)).Elem(), NamedResourcesStringSliceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesStringSlicePtrInput)(nil)).Elem(), NamedResourcesStringSliceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesStringSlicePatchInput)(nil)).Elem(), NamedResourcesStringSlicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedResourcesStringSlicePatchPtrInput)(nil)).Elem(), NamedResourcesStringSlicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextTypeInput)(nil)).Elem(), PodSchedulingContextTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextTypeArrayInput)(nil)).Elem(), PodSchedulingContextTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextListTypeInput)(nil)).Elem(), PodSchedulingContextListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextPatchTypeInput)(nil)).Elem(), PodSchedulingContextPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextSpecInput)(nil)).Elem(), PodSchedulingContextSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextSpecPatchInput)(nil)).Elem(), PodSchedulingContextSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextSpecPatchPtrInput)(nil)).Elem(), PodSchedulingContextSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextStatusInput)(nil)).Elem(), PodSchedulingContextStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextStatusPtrInput)(nil)).Elem(), PodSchedulingContextStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextStatusPatchInput)(nil)).Elem(), PodSchedulingContextStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingContextStatusPatchPtrInput)(nil)).Elem(), PodSchedulingContextStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTypeInput)(nil)).Elem(), ResourceClaimTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTypeArrayInput)(nil)).Elem(), ResourceClaimTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferenceInput)(nil)).Elem(), ResourceClaimConsumerReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferenceArrayInput)(nil)).Elem(), ResourceClaimConsumerReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferencePatchInput)(nil)).Elem(), ResourceClaimConsumerReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferencePatchArrayInput)(nil)).Elem(), ResourceClaimConsumerReferencePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimListTypeInput)(nil)).Elem(), ResourceClaimListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersTypeInput)(nil)).Elem(), ResourceClaimParametersTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersTypeArrayInput)(nil)).Elem(), ResourceClaimParametersTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersListTypeInput)(nil)).Elem(), ResourceClaimParametersListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersPatchTypeInput)(nil)).Elem(), ResourceClaimParametersPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferenceInput)(nil)).Elem(), ResourceClaimParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePtrInput)(nil)).Elem(), ResourceClaimParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePatchInput)(nil)).Elem(), ResourceClaimParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePatchPtrInput)(nil)).Elem(), ResourceClaimParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimPatchTypeInput)(nil)).Elem(), ResourceClaimPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusInput)(nil)).Elem(), ResourceClaimSchedulingStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusArrayInput)(nil)).Elem(), ResourceClaimSchedulingStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusPatchInput)(nil)).Elem(), ResourceClaimSchedulingStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusPatchArrayInput)(nil)).Elem(), ResourceClaimSchedulingStatusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecInput)(nil)).Elem(), ResourceClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecPatchInput)(nil)).Elem(), ResourceClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecPatchPtrInput)(nil)).Elem(), ResourceClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusInput)(nil)).Elem(), ResourceClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPtrInput)(nil)).Elem(), ResourceClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPatchInput)(nil)).Elem(), ResourceClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPatchPtrInput)(nil)).Elem(), ResourceClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateTypeInput)(nil)).Elem(), ResourceClaimTemplateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateTypeArrayInput)(nil)).Elem(), ResourceClaimTemplateTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateListTypeInput)(nil)).Elem(), ResourceClaimTemplateListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplatePatchTypeInput)(nil)).Elem(), ResourceClaimTemplatePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecInput)(nil)).Elem(), ResourceClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecPatchInput)(nil)).Elem(), ResourceClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecPatchPtrInput)(nil)).Elem(), ResourceClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassTypeInput)(nil)).Elem(), ResourceClassTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassTypeArrayInput)(nil)).Elem(), ResourceClassTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassListTypeInput)(nil)).Elem(), ResourceClassListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersTypeInput)(nil)).Elem(), ResourceClassParametersTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersTypeArrayInput)(nil)).Elem(), ResourceClassParametersTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersListTypeInput)(nil)).Elem(), ResourceClassParametersListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersPatchTypeInput)(nil)).Elem(), ResourceClassParametersPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferenceInput)(nil)).Elem(), ResourceClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePtrInput)(nil)).Elem(), ResourceClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePatchInput)(nil)).Elem(), ResourceClassParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePatchPtrInput)(nil)).Elem(), ResourceClassParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassPatchTypeInput)(nil)).Elem(), ResourceClassPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFilterInput)(nil)).Elem(), ResourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFilterArrayInput)(nil)).Elem(), ResourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFilterPatchInput)(nil)).Elem(), ResourceFilterPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceFilterPatchArrayInput)(nil)).Elem(), ResourceFilterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHandleInput)(nil)).Elem(), ResourceHandleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHandleArrayInput)(nil)).Elem(), ResourceHandleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHandlePatchInput)(nil)).Elem(), ResourceHandlePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHandlePatchArrayInput)(nil)).Elem(), ResourceHandlePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequestInput)(nil)).Elem(), ResourceRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequestArrayInput)(nil)).Elem(), ResourceRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequestPatchInput)(nil)).Elem(), ResourceRequestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequestPatchArrayInput)(nil)).Elem(), ResourceRequestPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceTypeInput)(nil)).Elem(), ResourceSliceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceTypeArrayInput)(nil)).Elem(), ResourceSliceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceListTypeInput)(nil)).Elem(), ResourceSliceListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSlicePatchTypeInput)(nil)).Elem(), ResourceSlicePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StructuredResourceHandleInput)(nil)).Elem(), StructuredResourceHandleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StructuredResourceHandlePtrInput)(nil)).Elem(), StructuredResourceHandleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StructuredResourceHandlePatchInput)(nil)).Elem(), StructuredResourceHandlePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StructuredResourceHandlePatchPtrInput)(nil)).Elem(), StructuredResourceHandlePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VendorParametersInput)(nil)).Elem(), VendorParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VendorParametersArrayInput)(nil)).Elem(), VendorParametersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VendorParametersPatchInput)(nil)).Elem(), VendorParametersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VendorParametersPatchArrayInput)(nil)).Elem(), VendorParametersPatchArray{})
	pulumi.RegisterOutputType(AllocationResultOutput{})
	pulumi.RegisterOutputType(AllocationResultPtrOutput{})
	pulumi.RegisterOutputType(AllocationResultPatchOutput{})
	pulumi.RegisterOutputType(AllocationResultPatchPtrOutput{})
	pulumi.RegisterOutputType(DriverAllocationResultOutput{})
	pulumi.RegisterOutputType(DriverAllocationResultArrayOutput{})
	pulumi.RegisterOutputType(DriverAllocationResultPatchOutput{})
	pulumi.RegisterOutputType(DriverAllocationResultPatchArrayOutput{})
	pulumi.RegisterOutputType(DriverRequestsOutput{})
	pulumi.RegisterOutputType(DriverRequestsArrayOutput{})
	pulumi.RegisterOutputType(DriverRequestsPatchOutput{})
	pulumi.RegisterOutputType(DriverRequestsPatchArrayOutput{})
	pulumi.RegisterOutputType(NamedResourcesAllocationResultOutput{})
	pulumi.RegisterOutputType(NamedResourcesAllocationResultPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesAllocationResultPatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesAllocationResultPatchPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesAttributeOutput{})
	pulumi.RegisterOutputType(NamedResourcesAttributeArrayOutput{})
	pulumi.RegisterOutputType(NamedResourcesAttributePatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesAttributePatchArrayOutput{})
	pulumi.RegisterOutputType(NamedResourcesFilterOutput{})
	pulumi.RegisterOutputType(NamedResourcesFilterPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesFilterPatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesFilterPatchPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesInstanceOutput{})
	pulumi.RegisterOutputType(NamedResourcesInstanceArrayOutput{})
	pulumi.RegisterOutputType(NamedResourcesInstancePatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesInstancePatchArrayOutput{})
	pulumi.RegisterOutputType(NamedResourcesIntSliceOutput{})
	pulumi.RegisterOutputType(NamedResourcesIntSlicePtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesIntSlicePatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesIntSlicePatchPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesRequestOutput{})
	pulumi.RegisterOutputType(NamedResourcesRequestPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesRequestPatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesRequestPatchPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesResourcesOutput{})
	pulumi.RegisterOutputType(NamedResourcesResourcesPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesResourcesPatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesStringSliceOutput{})
	pulumi.RegisterOutputType(NamedResourcesStringSlicePtrOutput{})
	pulumi.RegisterOutputType(NamedResourcesStringSlicePatchOutput{})
	pulumi.RegisterOutputType(NamedResourcesStringSlicePatchPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextTypeArrayOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextListTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextPatchTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextSpecOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextSpecPatchOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextStatusOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextStatusPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextStatusPatchOutput{})
	pulumi.RegisterOutputType(PodSchedulingContextStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferenceArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferencePatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplatePatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClassTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClassListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClassPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceFilterOutput{})
	pulumi.RegisterOutputType(ResourceFilterArrayOutput{})
	pulumi.RegisterOutputType(ResourceFilterPatchOutput{})
	pulumi.RegisterOutputType(ResourceFilterPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceHandleOutput{})
	pulumi.RegisterOutputType(ResourceHandleArrayOutput{})
	pulumi.RegisterOutputType(ResourceHandlePatchOutput{})
	pulumi.RegisterOutputType(ResourceHandlePatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceRequestOutput{})
	pulumi.RegisterOutputType(ResourceRequestArrayOutput{})
	pulumi.RegisterOutputType(ResourceRequestPatchOutput{})
	pulumi.RegisterOutputType(ResourceRequestPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceSliceTypeOutput{})
	pulumi.RegisterOutputType(ResourceSliceTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceSliceListTypeOutput{})
	pulumi.RegisterOutputType(ResourceSlicePatchTypeOutput{})
	pulumi.RegisterOutputType(StructuredResourceHandleOutput{})
	pulumi.RegisterOutputType(StructuredResourceHandlePtrOutput{})
	pulumi.RegisterOutputType(StructuredResourceHandlePatchOutput{})
	pulumi.RegisterOutputType(StructuredResourceHandlePatchPtrOutput{})
	pulumi.RegisterOutputType(VendorParametersOutput{})
	pulumi.RegisterOutputType(VendorParametersArrayOutput{})
	pulumi.RegisterOutputType(VendorParametersPatchOutput{})
	pulumi.RegisterOutputType(VendorParametersPatchArrayOutput{})
}
