// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParameters struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsArrayOutput `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferenceOutput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolOutput `pulumi:"shareable"`
}

// NewResourceClaimParameters registers a new resource with the given unique name, arguments, and options.
func NewResourceClaimParameters(ctx *pulumi.Context,
	name string, args *ResourceClaimParametersArgs, opts ...pulumi.ResourceOption) (*ResourceClaimParameters, error) {
	if args == nil {
		args = &ResourceClaimParametersArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("ResourceClaimParameters")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ResourceClaimParameters
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaimParameters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceClaimParameters gets an existing ResourceClaimParameters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceClaimParameters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceClaimParametersState, opts ...pulumi.ResourceOption) (*ResourceClaimParameters, error) {
	var resource ResourceClaimParameters
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaimParameters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceClaimParameters resources.
type resourceClaimParametersState struct {
}

type ResourceClaimParametersState struct {
}

func (ResourceClaimParametersState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClaimParametersState)(nil)).Elem()
}

type resourceClaimParametersArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests []DriverRequests `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom *ResourceClaimParametersReference `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable *bool `pulumi:"shareable"`
}

// The set of arguments for constructing a ResourceClaimParameters resource.
type ResourceClaimParametersArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsArrayInput
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferencePtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolPtrInput
}

func (ResourceClaimParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClaimParametersArgs)(nil)).Elem()
}

type ResourceClaimParametersInput interface {
	pulumi.Input

	ToResourceClaimParametersOutput() ResourceClaimParametersOutput
	ToResourceClaimParametersOutputWithContext(ctx context.Context) ResourceClaimParametersOutput
}

func (*ResourceClaimParameters) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParameters)(nil)).Elem()
}

func (i *ResourceClaimParameters) ToResourceClaimParametersOutput() ResourceClaimParametersOutput {
	return i.ToResourceClaimParametersOutputWithContext(context.Background())
}

func (i *ResourceClaimParameters) ToResourceClaimParametersOutputWithContext(ctx context.Context) ResourceClaimParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersOutput)
}

// ResourceClaimParametersArrayInput is an input type that accepts ResourceClaimParametersArray and ResourceClaimParametersArrayOutput values.
// You can construct a concrete instance of `ResourceClaimParametersArrayInput` via:
//
//	ResourceClaimParametersArray{ ResourceClaimParametersArgs{...} }
type ResourceClaimParametersArrayInput interface {
	pulumi.Input

	ToResourceClaimParametersArrayOutput() ResourceClaimParametersArrayOutput
	ToResourceClaimParametersArrayOutputWithContext(context.Context) ResourceClaimParametersArrayOutput
}

type ResourceClaimParametersArray []ResourceClaimParametersInput

func (ResourceClaimParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClaimParameters)(nil)).Elem()
}

func (i ResourceClaimParametersArray) ToResourceClaimParametersArrayOutput() ResourceClaimParametersArrayOutput {
	return i.ToResourceClaimParametersArrayOutputWithContext(context.Background())
}

func (i ResourceClaimParametersArray) ToResourceClaimParametersArrayOutputWithContext(ctx context.Context) ResourceClaimParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersArrayOutput)
}

// ResourceClaimParametersMapInput is an input type that accepts ResourceClaimParametersMap and ResourceClaimParametersMapOutput values.
// You can construct a concrete instance of `ResourceClaimParametersMapInput` via:
//
//	ResourceClaimParametersMap{ "key": ResourceClaimParametersArgs{...} }
type ResourceClaimParametersMapInput interface {
	pulumi.Input

	ToResourceClaimParametersMapOutput() ResourceClaimParametersMapOutput
	ToResourceClaimParametersMapOutputWithContext(context.Context) ResourceClaimParametersMapOutput
}

type ResourceClaimParametersMap map[string]ResourceClaimParametersInput

func (ResourceClaimParametersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClaimParameters)(nil)).Elem()
}

func (i ResourceClaimParametersMap) ToResourceClaimParametersMapOutput() ResourceClaimParametersMapOutput {
	return i.ToResourceClaimParametersMapOutputWithContext(context.Background())
}

func (i ResourceClaimParametersMap) ToResourceClaimParametersMapOutputWithContext(ctx context.Context) ResourceClaimParametersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersMapOutput)
}

type ResourceClaimParametersOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParameters)(nil)).Elem()
}

func (o ResourceClaimParametersOutput) ToResourceClaimParametersOutput() ResourceClaimParametersOutput {
	return o
}

func (o ResourceClaimParametersOutput) ToResourceClaimParametersOutputWithContext(ctx context.Context) ResourceClaimParametersOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimParametersOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
//
// May be empty, in which case the claim can always be allocated.
func (o ResourceClaimParametersOutput) DriverRequests() DriverRequestsArrayOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) DriverRequestsArrayOutput { return v.DriverRequests }).(DriverRequestsArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
func (o ResourceClaimParametersOutput) GeneratedFrom() ResourceClaimParametersReferenceOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) ResourceClaimParametersReferenceOutput { return v.GeneratedFrom }).(ResourceClaimParametersReferenceOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimParametersOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object metadata
func (o ResourceClaimParametersOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
func (o ResourceClaimParametersOutput) Shareable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceClaimParameters) pulumi.BoolOutput { return v.Shareable }).(pulumi.BoolOutput)
}

type ResourceClaimParametersArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClaimParameters)(nil)).Elem()
}

func (o ResourceClaimParametersArrayOutput) ToResourceClaimParametersArrayOutput() ResourceClaimParametersArrayOutput {
	return o
}

func (o ResourceClaimParametersArrayOutput) ToResourceClaimParametersArrayOutputWithContext(ctx context.Context) ResourceClaimParametersArrayOutput {
	return o
}

func (o ResourceClaimParametersArrayOutput) Index(i pulumi.IntInput) ResourceClaimParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceClaimParameters {
		return vs[0].([]*ResourceClaimParameters)[vs[1].(int)]
	}).(ResourceClaimParametersOutput)
}

type ResourceClaimParametersMapOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClaimParameters)(nil)).Elem()
}

func (o ResourceClaimParametersMapOutput) ToResourceClaimParametersMapOutput() ResourceClaimParametersMapOutput {
	return o
}

func (o ResourceClaimParametersMapOutput) ToResourceClaimParametersMapOutputWithContext(ctx context.Context) ResourceClaimParametersMapOutput {
	return o
}

func (o ResourceClaimParametersMapOutput) MapIndex(k pulumi.StringInput) ResourceClaimParametersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceClaimParameters {
		return vs[0].(map[string]*ResourceClaimParameters)[vs[1].(string)]
	}).(ResourceClaimParametersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersInput)(nil)).Elem(), &ResourceClaimParameters{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersArrayInput)(nil)).Elem(), ResourceClaimParametersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersMapInput)(nil)).Elem(), ResourceClaimParametersMap{})
	pulumi.RegisterOutputType(ResourceClaimParametersOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersMapOutput{})
}
