// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ResourceSliceList is a collection of ResourceSlices.
type ResourceSliceList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items ResourceSliceTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewResourceSliceList registers a new resource with the given unique name, arguments, and options.
func NewResourceSliceList(ctx *pulumi.Context,
	name string, args *ResourceSliceListArgs, opts ...pulumi.ResourceOption) (*ResourceSliceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("ResourceSliceList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ResourceSliceList
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceSliceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSliceList gets an existing ResourceSliceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSliceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSliceListState, opts ...pulumi.ResourceOption) (*ResourceSliceList, error) {
	var resource ResourceSliceList
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha2:ResourceSliceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSliceList resources.
type resourceSliceListState struct {
}

type ResourceSliceListState struct {
}

func (ResourceSliceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSliceListState)(nil)).Elem()
}

type resourceSliceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of node resource capacity objects.
	Items []ResourceSliceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ResourceSliceList resource.
type ResourceSliceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Items is the list of node resource capacity objects.
	Items ResourceSliceTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput
}

func (ResourceSliceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSliceListArgs)(nil)).Elem()
}

type ResourceSliceListInput interface {
	pulumi.Input

	ToResourceSliceListOutput() ResourceSliceListOutput
	ToResourceSliceListOutputWithContext(ctx context.Context) ResourceSliceListOutput
}

func (*ResourceSliceList) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSliceList)(nil)).Elem()
}

func (i *ResourceSliceList) ToResourceSliceListOutput() ResourceSliceListOutput {
	return i.ToResourceSliceListOutputWithContext(context.Background())
}

func (i *ResourceSliceList) ToResourceSliceListOutputWithContext(ctx context.Context) ResourceSliceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceListOutput)
}

// ResourceSliceListArrayInput is an input type that accepts ResourceSliceListArray and ResourceSliceListArrayOutput values.
// You can construct a concrete instance of `ResourceSliceListArrayInput` via:
//
//	ResourceSliceListArray{ ResourceSliceListArgs{...} }
type ResourceSliceListArrayInput interface {
	pulumi.Input

	ToResourceSliceListArrayOutput() ResourceSliceListArrayOutput
	ToResourceSliceListArrayOutputWithContext(context.Context) ResourceSliceListArrayOutput
}

type ResourceSliceListArray []ResourceSliceListInput

func (ResourceSliceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSliceList)(nil)).Elem()
}

func (i ResourceSliceListArray) ToResourceSliceListArrayOutput() ResourceSliceListArrayOutput {
	return i.ToResourceSliceListArrayOutputWithContext(context.Background())
}

func (i ResourceSliceListArray) ToResourceSliceListArrayOutputWithContext(ctx context.Context) ResourceSliceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceListArrayOutput)
}

// ResourceSliceListMapInput is an input type that accepts ResourceSliceListMap and ResourceSliceListMapOutput values.
// You can construct a concrete instance of `ResourceSliceListMapInput` via:
//
//	ResourceSliceListMap{ "key": ResourceSliceListArgs{...} }
type ResourceSliceListMapInput interface {
	pulumi.Input

	ToResourceSliceListMapOutput() ResourceSliceListMapOutput
	ToResourceSliceListMapOutputWithContext(context.Context) ResourceSliceListMapOutput
}

type ResourceSliceListMap map[string]ResourceSliceListInput

func (ResourceSliceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSliceList)(nil)).Elem()
}

func (i ResourceSliceListMap) ToResourceSliceListMapOutput() ResourceSliceListMapOutput {
	return i.ToResourceSliceListMapOutputWithContext(context.Background())
}

func (i ResourceSliceListMap) ToResourceSliceListMapOutputWithContext(ctx context.Context) ResourceSliceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSliceListMapOutput)
}

type ResourceSliceListOutput struct{ *pulumi.OutputState }

func (ResourceSliceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSliceList)(nil)).Elem()
}

func (o ResourceSliceListOutput) ToResourceSliceListOutput() ResourceSliceListOutput {
	return o
}

func (o ResourceSliceListOutput) ToResourceSliceListOutputWithContext(ctx context.Context) ResourceSliceListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceSliceListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSliceList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Items is the list of node resource capacity objects.
func (o ResourceSliceListOutput) Items() ResourceSliceTypeArrayOutput {
	return o.ApplyT(func(v *ResourceSliceList) ResourceSliceTypeArrayOutput { return v.Items }).(ResourceSliceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceSliceListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSliceList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata
func (o ResourceSliceListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ResourceSliceList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ResourceSliceListArrayOutput struct{ *pulumi.OutputState }

func (ResourceSliceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSliceList)(nil)).Elem()
}

func (o ResourceSliceListArrayOutput) ToResourceSliceListArrayOutput() ResourceSliceListArrayOutput {
	return o
}

func (o ResourceSliceListArrayOutput) ToResourceSliceListArrayOutputWithContext(ctx context.Context) ResourceSliceListArrayOutput {
	return o
}

func (o ResourceSliceListArrayOutput) Index(i pulumi.IntInput) ResourceSliceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSliceList {
		return vs[0].([]*ResourceSliceList)[vs[1].(int)]
	}).(ResourceSliceListOutput)
}

type ResourceSliceListMapOutput struct{ *pulumi.OutputState }

func (ResourceSliceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSliceList)(nil)).Elem()
}

func (o ResourceSliceListMapOutput) ToResourceSliceListMapOutput() ResourceSliceListMapOutput {
	return o
}

func (o ResourceSliceListMapOutput) ToResourceSliceListMapOutputWithContext(ctx context.Context) ResourceSliceListMapOutput {
	return o
}

func (o ResourceSliceListMapOutput) MapIndex(k pulumi.StringInput) ResourceSliceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSliceList {
		return vs[0].(map[string]*ResourceSliceList)[vs[1].(string)]
	}).(ResourceSliceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceListInput)(nil)).Elem(), &ResourceSliceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceListArrayInput)(nil)).Elem(), ResourceSliceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSliceListMapInput)(nil)).Elem(), ResourceSliceListMap{})
	pulumi.RegisterOutputType(ResourceSliceListOutput{})
	pulumi.RegisterOutputType(ResourceSliceListArrayOutput{})
	pulumi.RegisterOutputType(ResourceSliceListMapOutput{})
}
