// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
type ResourceClaimParametersPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsPatchArrayOutput `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferencePatchPtrOutput `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolPtrOutput `pulumi:"shareable"`
}

// NewResourceClaimParametersPatch registers a new resource with the given unique name, arguments, and options.
func NewResourceClaimParametersPatch(ctx *pulumi.Context,
	name string, args *ResourceClaimParametersPatchArgs, opts ...pulumi.ResourceOption) (*ResourceClaimParametersPatch, error) {
	if args == nil {
		args = &ResourceClaimParametersPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("ResourceClaimParameters")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ResourceClaimParametersPatch
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaimParametersPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceClaimParametersPatch gets an existing ResourceClaimParametersPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceClaimParametersPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceClaimParametersPatchState, opts ...pulumi.ResourceOption) (*ResourceClaimParametersPatch, error) {
	var resource ResourceClaimParametersPatch
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha2:ResourceClaimParametersPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceClaimParametersPatch resources.
type resourceClaimParametersPatchState struct {
}

type ResourceClaimParametersPatchState struct {
}

func (ResourceClaimParametersPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClaimParametersPatchState)(nil)).Elem()
}

type resourceClaimParametersPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests []DriverRequestsPatch `pulumi:"driverRequests"`
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom *ResourceClaimParametersReferencePatch `pulumi:"generatedFrom"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable *bool `pulumi:"shareable"`
}

// The set of arguments for constructing a ResourceClaimParametersPatch resource.
type ResourceClaimParametersPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
	//
	// May be empty, in which case the claim can always be allocated.
	DriverRequests DriverRequestsPatchArrayInput
	// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
	GeneratedFrom ResourceClaimParametersReferencePatchPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
	Shareable pulumi.BoolPtrInput
}

func (ResourceClaimParametersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClaimParametersPatchArgs)(nil)).Elem()
}

type ResourceClaimParametersPatchInput interface {
	pulumi.Input

	ToResourceClaimParametersPatchOutput() ResourceClaimParametersPatchOutput
	ToResourceClaimParametersPatchOutputWithContext(ctx context.Context) ResourceClaimParametersPatchOutput
}

func (*ResourceClaimParametersPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersPatch)(nil)).Elem()
}

func (i *ResourceClaimParametersPatch) ToResourceClaimParametersPatchOutput() ResourceClaimParametersPatchOutput {
	return i.ToResourceClaimParametersPatchOutputWithContext(context.Background())
}

func (i *ResourceClaimParametersPatch) ToResourceClaimParametersPatchOutputWithContext(ctx context.Context) ResourceClaimParametersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersPatchOutput)
}

// ResourceClaimParametersPatchArrayInput is an input type that accepts ResourceClaimParametersPatchArray and ResourceClaimParametersPatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimParametersPatchArrayInput` via:
//
//	ResourceClaimParametersPatchArray{ ResourceClaimParametersPatchArgs{...} }
type ResourceClaimParametersPatchArrayInput interface {
	pulumi.Input

	ToResourceClaimParametersPatchArrayOutput() ResourceClaimParametersPatchArrayOutput
	ToResourceClaimParametersPatchArrayOutputWithContext(context.Context) ResourceClaimParametersPatchArrayOutput
}

type ResourceClaimParametersPatchArray []ResourceClaimParametersPatchInput

func (ResourceClaimParametersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClaimParametersPatch)(nil)).Elem()
}

func (i ResourceClaimParametersPatchArray) ToResourceClaimParametersPatchArrayOutput() ResourceClaimParametersPatchArrayOutput {
	return i.ToResourceClaimParametersPatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimParametersPatchArray) ToResourceClaimParametersPatchArrayOutputWithContext(ctx context.Context) ResourceClaimParametersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersPatchArrayOutput)
}

// ResourceClaimParametersPatchMapInput is an input type that accepts ResourceClaimParametersPatchMap and ResourceClaimParametersPatchMapOutput values.
// You can construct a concrete instance of `ResourceClaimParametersPatchMapInput` via:
//
//	ResourceClaimParametersPatchMap{ "key": ResourceClaimParametersPatchArgs{...} }
type ResourceClaimParametersPatchMapInput interface {
	pulumi.Input

	ToResourceClaimParametersPatchMapOutput() ResourceClaimParametersPatchMapOutput
	ToResourceClaimParametersPatchMapOutputWithContext(context.Context) ResourceClaimParametersPatchMapOutput
}

type ResourceClaimParametersPatchMap map[string]ResourceClaimParametersPatchInput

func (ResourceClaimParametersPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClaimParametersPatch)(nil)).Elem()
}

func (i ResourceClaimParametersPatchMap) ToResourceClaimParametersPatchMapOutput() ResourceClaimParametersPatchMapOutput {
	return i.ToResourceClaimParametersPatchMapOutputWithContext(context.Background())
}

func (i ResourceClaimParametersPatchMap) ToResourceClaimParametersPatchMapOutputWithContext(ctx context.Context) ResourceClaimParametersPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersPatchMapOutput)
}

type ResourceClaimParametersPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersPatch)(nil)).Elem()
}

func (o ResourceClaimParametersPatchOutput) ToResourceClaimParametersPatchOutput() ResourceClaimParametersPatchOutput {
	return o
}

func (o ResourceClaimParametersPatchOutput) ToResourceClaimParametersPatchOutputWithContext(ctx context.Context) ResourceClaimParametersPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimParametersPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
//
// May be empty, in which case the claim can always be allocated.
func (o ResourceClaimParametersPatchOutput) DriverRequests() DriverRequestsPatchArrayOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) DriverRequestsPatchArrayOutput { return v.DriverRequests }).(DriverRequestsPatchArrayOutput)
}

// If this object was created from some other resource, then this links back to that resource. This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to some unknown type.
func (o ResourceClaimParametersPatchOutput) GeneratedFrom() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) ResourceClaimParametersReferencePatchPtrOutput {
		return v.GeneratedFrom
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimParametersPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimParametersPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
func (o ResourceClaimParametersPatchOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersPatch) pulumi.BoolPtrOutput { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type ResourceClaimParametersPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClaimParametersPatch)(nil)).Elem()
}

func (o ResourceClaimParametersPatchArrayOutput) ToResourceClaimParametersPatchArrayOutput() ResourceClaimParametersPatchArrayOutput {
	return o
}

func (o ResourceClaimParametersPatchArrayOutput) ToResourceClaimParametersPatchArrayOutputWithContext(ctx context.Context) ResourceClaimParametersPatchArrayOutput {
	return o
}

func (o ResourceClaimParametersPatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimParametersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceClaimParametersPatch {
		return vs[0].([]*ResourceClaimParametersPatch)[vs[1].(int)]
	}).(ResourceClaimParametersPatchOutput)
}

type ResourceClaimParametersPatchMapOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClaimParametersPatch)(nil)).Elem()
}

func (o ResourceClaimParametersPatchMapOutput) ToResourceClaimParametersPatchMapOutput() ResourceClaimParametersPatchMapOutput {
	return o
}

func (o ResourceClaimParametersPatchMapOutput) ToResourceClaimParametersPatchMapOutputWithContext(ctx context.Context) ResourceClaimParametersPatchMapOutput {
	return o
}

func (o ResourceClaimParametersPatchMapOutput) MapIndex(k pulumi.StringInput) ResourceClaimParametersPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceClaimParametersPatch {
		return vs[0].(map[string]*ResourceClaimParametersPatch)[vs[1].(string)]
	}).(ResourceClaimParametersPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersPatchInput)(nil)).Elem(), &ResourceClaimParametersPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersPatchArrayInput)(nil)).Elem(), ResourceClaimParametersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersPatchMapInput)(nil)).Elem(), ResourceClaimParametersPatchMap{})
	pulumi.RegisterOutputType(ResourceClaimParametersPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersPatchMapOutput{})
}
