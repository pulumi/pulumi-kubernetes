// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DeviceTaintRule adds one taint to all devices which match the selector. This has the same effect as if the taint was specified directly in the ResourceSlice by the DRA driver.
type DeviceTaintRule struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Spec specifies the selector and one taint.
	//
	// Changing the spec automatically increments the metadata.generation number.
	Spec DeviceTaintRuleSpecOutput `pulumi:"spec"`
}

// NewDeviceTaintRule registers a new resource with the given unique name, arguments, and options.
func NewDeviceTaintRule(ctx *pulumi.Context,
	name string, args *DeviceTaintRuleArgs, opts ...pulumi.ResourceOption) (*DeviceTaintRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha3")
	args.Kind = pulumi.StringPtr("DeviceTaintRule")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DeviceTaintRule
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha3:DeviceTaintRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceTaintRule gets an existing DeviceTaintRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceTaintRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceTaintRuleState, opts ...pulumi.ResourceOption) (*DeviceTaintRule, error) {
	var resource DeviceTaintRule
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha3:DeviceTaintRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceTaintRule resources.
type deviceTaintRuleState struct {
}

type DeviceTaintRuleState struct {
}

func (DeviceTaintRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTaintRuleState)(nil)).Elem()
}

type deviceTaintRuleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec specifies the selector and one taint.
	//
	// Changing the spec automatically increments the metadata.generation number.
	Spec DeviceTaintRuleSpec `pulumi:"spec"`
}

// The set of arguments for constructing a DeviceTaintRule resource.
type DeviceTaintRuleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput
	// Spec specifies the selector and one taint.
	//
	// Changing the spec automatically increments the metadata.generation number.
	Spec DeviceTaintRuleSpecInput
}

func (DeviceTaintRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTaintRuleArgs)(nil)).Elem()
}

type DeviceTaintRuleInput interface {
	pulumi.Input

	ToDeviceTaintRuleOutput() DeviceTaintRuleOutput
	ToDeviceTaintRuleOutputWithContext(ctx context.Context) DeviceTaintRuleOutput
}

func (*DeviceTaintRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceTaintRule)(nil)).Elem()
}

func (i *DeviceTaintRule) ToDeviceTaintRuleOutput() DeviceTaintRuleOutput {
	return i.ToDeviceTaintRuleOutputWithContext(context.Background())
}

func (i *DeviceTaintRule) ToDeviceTaintRuleOutputWithContext(ctx context.Context) DeviceTaintRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaintRuleOutput)
}

// DeviceTaintRuleArrayInput is an input type that accepts DeviceTaintRuleArray and DeviceTaintRuleArrayOutput values.
// You can construct a concrete instance of `DeviceTaintRuleArrayInput` via:
//
//	DeviceTaintRuleArray{ DeviceTaintRuleArgs{...} }
type DeviceTaintRuleArrayInput interface {
	pulumi.Input

	ToDeviceTaintRuleArrayOutput() DeviceTaintRuleArrayOutput
	ToDeviceTaintRuleArrayOutputWithContext(context.Context) DeviceTaintRuleArrayOutput
}

type DeviceTaintRuleArray []DeviceTaintRuleInput

func (DeviceTaintRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceTaintRule)(nil)).Elem()
}

func (i DeviceTaintRuleArray) ToDeviceTaintRuleArrayOutput() DeviceTaintRuleArrayOutput {
	return i.ToDeviceTaintRuleArrayOutputWithContext(context.Background())
}

func (i DeviceTaintRuleArray) ToDeviceTaintRuleArrayOutputWithContext(ctx context.Context) DeviceTaintRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaintRuleArrayOutput)
}

// DeviceTaintRuleMapInput is an input type that accepts DeviceTaintRuleMap and DeviceTaintRuleMapOutput values.
// You can construct a concrete instance of `DeviceTaintRuleMapInput` via:
//
//	DeviceTaintRuleMap{ "key": DeviceTaintRuleArgs{...} }
type DeviceTaintRuleMapInput interface {
	pulumi.Input

	ToDeviceTaintRuleMapOutput() DeviceTaintRuleMapOutput
	ToDeviceTaintRuleMapOutputWithContext(context.Context) DeviceTaintRuleMapOutput
}

type DeviceTaintRuleMap map[string]DeviceTaintRuleInput

func (DeviceTaintRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceTaintRule)(nil)).Elem()
}

func (i DeviceTaintRuleMap) ToDeviceTaintRuleMapOutput() DeviceTaintRuleMapOutput {
	return i.ToDeviceTaintRuleMapOutputWithContext(context.Background())
}

func (i DeviceTaintRuleMap) ToDeviceTaintRuleMapOutputWithContext(ctx context.Context) DeviceTaintRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaintRuleMapOutput)
}

type DeviceTaintRuleOutput struct{ *pulumi.OutputState }

func (DeviceTaintRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceTaintRule)(nil)).Elem()
}

func (o DeviceTaintRuleOutput) ToDeviceTaintRuleOutput() DeviceTaintRuleOutput {
	return o
}

func (o DeviceTaintRuleOutput) ToDeviceTaintRuleOutputWithContext(ctx context.Context) DeviceTaintRuleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeviceTaintRuleOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceTaintRule) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeviceTaintRuleOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceTaintRule) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object metadata
func (o DeviceTaintRuleOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *DeviceTaintRule) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Spec specifies the selector and one taint.
//
// Changing the spec automatically increments the metadata.generation number.
func (o DeviceTaintRuleOutput) Spec() DeviceTaintRuleSpecOutput {
	return o.ApplyT(func(v *DeviceTaintRule) DeviceTaintRuleSpecOutput { return v.Spec }).(DeviceTaintRuleSpecOutput)
}

type DeviceTaintRuleArrayOutput struct{ *pulumi.OutputState }

func (DeviceTaintRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceTaintRule)(nil)).Elem()
}

func (o DeviceTaintRuleArrayOutput) ToDeviceTaintRuleArrayOutput() DeviceTaintRuleArrayOutput {
	return o
}

func (o DeviceTaintRuleArrayOutput) ToDeviceTaintRuleArrayOutputWithContext(ctx context.Context) DeviceTaintRuleArrayOutput {
	return o
}

func (o DeviceTaintRuleArrayOutput) Index(i pulumi.IntInput) DeviceTaintRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceTaintRule {
		return vs[0].([]*DeviceTaintRule)[vs[1].(int)]
	}).(DeviceTaintRuleOutput)
}

type DeviceTaintRuleMapOutput struct{ *pulumi.OutputState }

func (DeviceTaintRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceTaintRule)(nil)).Elem()
}

func (o DeviceTaintRuleMapOutput) ToDeviceTaintRuleMapOutput() DeviceTaintRuleMapOutput {
	return o
}

func (o DeviceTaintRuleMapOutput) ToDeviceTaintRuleMapOutputWithContext(ctx context.Context) DeviceTaintRuleMapOutput {
	return o
}

func (o DeviceTaintRuleMapOutput) MapIndex(k pulumi.StringInput) DeviceTaintRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceTaintRule {
		return vs[0].(map[string]*DeviceTaintRule)[vs[1].(string)]
	}).(DeviceTaintRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaintRuleInput)(nil)).Elem(), &DeviceTaintRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaintRuleArrayInput)(nil)).Elem(), DeviceTaintRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaintRuleMapInput)(nil)).Elem(), DeviceTaintRuleMap{})
	pulumi.RegisterOutputType(DeviceTaintRuleOutput{})
	pulumi.RegisterOutputType(DeviceTaintRuleArrayOutput{})
	pulumi.RegisterOutputType(DeviceTaintRuleMapOutput{})
}
