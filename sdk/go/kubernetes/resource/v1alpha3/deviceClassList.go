// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DeviceClassList is a collection of classes.
type DeviceClassList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items DeviceClassTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewDeviceClassList registers a new resource with the given unique name, arguments, and options.
func NewDeviceClassList(ctx *pulumi.Context,
	name string, args *DeviceClassListArgs, opts ...pulumi.ResourceOption) (*DeviceClassList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("resource.k8s.io/v1alpha3")
	args.Kind = pulumi.StringPtr("DeviceClassList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DeviceClassList
	err := ctx.RegisterResource("kubernetes:resource.k8s.io/v1alpha3:DeviceClassList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceClassList gets an existing DeviceClassList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceClassList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceClassListState, opts ...pulumi.ResourceOption) (*DeviceClassList, error) {
	var resource DeviceClassList
	err := ctx.ReadResource("kubernetes:resource.k8s.io/v1alpha3:DeviceClassList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceClassList resources.
type deviceClassListState struct {
}

type DeviceClassListState struct {
}

func (DeviceClassListState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceClassListState)(nil)).Elem()
}

type deviceClassListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items []DeviceClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a DeviceClassList resource.
type DeviceClassListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Items is the list of resource classes.
	Items DeviceClassTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput
}

func (DeviceClassListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceClassListArgs)(nil)).Elem()
}

type DeviceClassListInput interface {
	pulumi.Input

	ToDeviceClassListOutput() DeviceClassListOutput
	ToDeviceClassListOutputWithContext(ctx context.Context) DeviceClassListOutput
}

func (*DeviceClassList) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClassList)(nil)).Elem()
}

func (i *DeviceClassList) ToDeviceClassListOutput() DeviceClassListOutput {
	return i.ToDeviceClassListOutputWithContext(context.Background())
}

func (i *DeviceClassList) ToDeviceClassListOutputWithContext(ctx context.Context) DeviceClassListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClassListOutput)
}

// DeviceClassListArrayInput is an input type that accepts DeviceClassListArray and DeviceClassListArrayOutput values.
// You can construct a concrete instance of `DeviceClassListArrayInput` via:
//
//	DeviceClassListArray{ DeviceClassListArgs{...} }
type DeviceClassListArrayInput interface {
	pulumi.Input

	ToDeviceClassListArrayOutput() DeviceClassListArrayOutput
	ToDeviceClassListArrayOutputWithContext(context.Context) DeviceClassListArrayOutput
}

type DeviceClassListArray []DeviceClassListInput

func (DeviceClassListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceClassList)(nil)).Elem()
}

func (i DeviceClassListArray) ToDeviceClassListArrayOutput() DeviceClassListArrayOutput {
	return i.ToDeviceClassListArrayOutputWithContext(context.Background())
}

func (i DeviceClassListArray) ToDeviceClassListArrayOutputWithContext(ctx context.Context) DeviceClassListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClassListArrayOutput)
}

// DeviceClassListMapInput is an input type that accepts DeviceClassListMap and DeviceClassListMapOutput values.
// You can construct a concrete instance of `DeviceClassListMapInput` via:
//
//	DeviceClassListMap{ "key": DeviceClassListArgs{...} }
type DeviceClassListMapInput interface {
	pulumi.Input

	ToDeviceClassListMapOutput() DeviceClassListMapOutput
	ToDeviceClassListMapOutputWithContext(context.Context) DeviceClassListMapOutput
}

type DeviceClassListMap map[string]DeviceClassListInput

func (DeviceClassListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceClassList)(nil)).Elem()
}

func (i DeviceClassListMap) ToDeviceClassListMapOutput() DeviceClassListMapOutput {
	return i.ToDeviceClassListMapOutputWithContext(context.Background())
}

func (i DeviceClassListMap) ToDeviceClassListMapOutputWithContext(ctx context.Context) DeviceClassListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClassListMapOutput)
}

type DeviceClassListOutput struct{ *pulumi.OutputState }

func (DeviceClassListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClassList)(nil)).Elem()
}

func (o DeviceClassListOutput) ToDeviceClassListOutput() DeviceClassListOutput {
	return o
}

func (o DeviceClassListOutput) ToDeviceClassListOutputWithContext(ctx context.Context) DeviceClassListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeviceClassListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceClassList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Items is the list of resource classes.
func (o DeviceClassListOutput) Items() DeviceClassTypeArrayOutput {
	return o.ApplyT(func(v *DeviceClassList) DeviceClassTypeArrayOutput { return v.Items }).(DeviceClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeviceClassListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceClassList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata
func (o DeviceClassListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *DeviceClassList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type DeviceClassListArrayOutput struct{ *pulumi.OutputState }

func (DeviceClassListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceClassList)(nil)).Elem()
}

func (o DeviceClassListArrayOutput) ToDeviceClassListArrayOutput() DeviceClassListArrayOutput {
	return o
}

func (o DeviceClassListArrayOutput) ToDeviceClassListArrayOutputWithContext(ctx context.Context) DeviceClassListArrayOutput {
	return o
}

func (o DeviceClassListArrayOutput) Index(i pulumi.IntInput) DeviceClassListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceClassList {
		return vs[0].([]*DeviceClassList)[vs[1].(int)]
	}).(DeviceClassListOutput)
}

type DeviceClassListMapOutput struct{ *pulumi.OutputState }

func (DeviceClassListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceClassList)(nil)).Elem()
}

func (o DeviceClassListMapOutput) ToDeviceClassListMapOutput() DeviceClassListMapOutput {
	return o
}

func (o DeviceClassListMapOutput) ToDeviceClassListMapOutputWithContext(ctx context.Context) DeviceClassListMapOutput {
	return o
}

func (o DeviceClassListMapOutput) MapIndex(k pulumi.StringInput) DeviceClassListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceClassList {
		return vs[0].(map[string]*DeviceClassList)[vs[1].(string)]
	}).(DeviceClassListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClassListInput)(nil)).Elem(), &DeviceClassList{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClassListArrayInput)(nil)).Elem(), DeviceClassListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClassListMapInput)(nil)).Elem(), DeviceClassListMap{})
	pulumi.RegisterOutputType(DeviceClassListOutput{})
	pulumi.RegisterOutputType(DeviceClassListArrayOutput{})
	pulumi.RegisterOutputType(DeviceClassListMapOutput{})
}
