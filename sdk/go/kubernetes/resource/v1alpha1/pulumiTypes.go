// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// AllocationResult contains attributed of an allocated resource.
type AllocationResult struct {
	// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes *corev1.NodeSelector `pulumi:"availableOnNodes"`
	// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	ResourceHandle *string `pulumi:"resourceHandle"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `pulumi:"shareable"`
}

// AllocationResultInput is an input type that accepts AllocationResultArgs and AllocationResultOutput values.
// You can construct a concrete instance of `AllocationResultInput` via:
//
//	AllocationResultArgs{...}
type AllocationResultInput interface {
	pulumi.Input

	ToAllocationResultOutput() AllocationResultOutput
	ToAllocationResultOutputWithContext(context.Context) AllocationResultOutput
}

// AllocationResult contains attributed of an allocated resource.
type AllocationResultArgs struct {
	// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes corev1.NodeSelectorPtrInput `pulumi:"availableOnNodes"`
	// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	ResourceHandle pulumi.StringPtrInput `pulumi:"resourceHandle"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (AllocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResult)(nil)).Elem()
}

func (i AllocationResultArgs) ToAllocationResultOutput() AllocationResultOutput {
	return i.ToAllocationResultOutputWithContext(context.Background())
}

func (i AllocationResultArgs) ToAllocationResultOutputWithContext(ctx context.Context) AllocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultOutput)
}

func (i AllocationResultArgs) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return i.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (i AllocationResultArgs) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultOutput).ToAllocationResultPtrOutputWithContext(ctx)
}

// AllocationResultPtrInput is an input type that accepts AllocationResultArgs, AllocationResultPtr and AllocationResultPtrOutput values.
// You can construct a concrete instance of `AllocationResultPtrInput` via:
//
//	        AllocationResultArgs{...}
//
//	or:
//
//	        nil
type AllocationResultPtrInput interface {
	pulumi.Input

	ToAllocationResultPtrOutput() AllocationResultPtrOutput
	ToAllocationResultPtrOutputWithContext(context.Context) AllocationResultPtrOutput
}

type allocationResultPtrType AllocationResultArgs

func AllocationResultPtr(v *AllocationResultArgs) AllocationResultPtrInput {
	return (*allocationResultPtrType)(v)
}

func (*allocationResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResult)(nil)).Elem()
}

func (i *allocationResultPtrType) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return i.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (i *allocationResultPtrType) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPtrOutput)
}

// AllocationResult contains attributed of an allocated resource.
type AllocationResultOutput struct{ *pulumi.OutputState }

func (AllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResult)(nil)).Elem()
}

func (o AllocationResultOutput) ToAllocationResultOutput() AllocationResultOutput {
	return o
}

func (o AllocationResultOutput) ToAllocationResultOutputWithContext(ctx context.Context) AllocationResultOutput {
	return o
}

func (o AllocationResultOutput) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return o.ToAllocationResultPtrOutputWithContext(context.Background())
}

func (o AllocationResultOutput) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllocationResult) *AllocationResult {
		return &v
	}).(AllocationResultPtrOutput)
}

// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultOutput) AvailableOnNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v AllocationResult) *corev1.NodeSelector { return v.AvailableOnNodes }).(corev1.NodeSelectorPtrOutput)
}

// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o AllocationResultOutput) ResourceHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationResult) *string { return v.ResourceHandle }).(pulumi.StringPtrOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllocationResult) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type AllocationResultPtrOutput struct{ *pulumi.OutputState }

func (AllocationResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResult)(nil)).Elem()
}

func (o AllocationResultPtrOutput) ToAllocationResultPtrOutput() AllocationResultPtrOutput {
	return o
}

func (o AllocationResultPtrOutput) ToAllocationResultPtrOutputWithContext(ctx context.Context) AllocationResultPtrOutput {
	return o
}

func (o AllocationResultPtrOutput) Elem() AllocationResultOutput {
	return o.ApplyT(func(v *AllocationResult) AllocationResult {
		if v != nil {
			return *v
		}
		var ret AllocationResult
		return ret
	}).(AllocationResultOutput)
}

// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPtrOutput) AvailableOnNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v *AllocationResult) *corev1.NodeSelector {
		if v == nil {
			return nil
		}
		return v.AvailableOnNodes
	}).(corev1.NodeSelectorPtrOutput)
}

// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o AllocationResultPtrOutput) ResourceHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationResult) *string {
		if v == nil {
			return nil
		}
		return v.ResourceHandle
	}).(pulumi.StringPtrOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPtrOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllocationResult) *bool {
		if v == nil {
			return nil
		}
		return v.Shareable
	}).(pulumi.BoolPtrOutput)
}

// AllocationResult contains attributed of an allocated resource.
type AllocationResultPatch struct {
	// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes *corev1.NodeSelectorPatch `pulumi:"availableOnNodes"`
	// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	ResourceHandle *string `pulumi:"resourceHandle"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `pulumi:"shareable"`
}

// AllocationResultPatchInput is an input type that accepts AllocationResultPatchArgs and AllocationResultPatchOutput values.
// You can construct a concrete instance of `AllocationResultPatchInput` via:
//
//	AllocationResultPatchArgs{...}
type AllocationResultPatchInput interface {
	pulumi.Input

	ToAllocationResultPatchOutput() AllocationResultPatchOutput
	ToAllocationResultPatchOutputWithContext(context.Context) AllocationResultPatchOutput
}

// AllocationResult contains attributed of an allocated resource.
type AllocationResultPatchArgs struct {
	// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available everywhere.
	AvailableOnNodes corev1.NodeSelectorPatchPtrInput `pulumi:"availableOnNodes"`
	// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	ResourceHandle pulumi.StringPtrInput `pulumi:"resourceHandle"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
}

func (AllocationResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResultPatch)(nil)).Elem()
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchOutput() AllocationResultPatchOutput {
	return i.ToAllocationResultPatchOutputWithContext(context.Background())
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchOutputWithContext(ctx context.Context) AllocationResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchOutput)
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return i.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i AllocationResultPatchArgs) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchOutput).ToAllocationResultPatchPtrOutputWithContext(ctx)
}

// AllocationResultPatchPtrInput is an input type that accepts AllocationResultPatchArgs, AllocationResultPatchPtr and AllocationResultPatchPtrOutput values.
// You can construct a concrete instance of `AllocationResultPatchPtrInput` via:
//
//	        AllocationResultPatchArgs{...}
//
//	or:
//
//	        nil
type AllocationResultPatchPtrInput interface {
	pulumi.Input

	ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput
	ToAllocationResultPatchPtrOutputWithContext(context.Context) AllocationResultPatchPtrOutput
}

type allocationResultPatchPtrType AllocationResultPatchArgs

func AllocationResultPatchPtr(v *AllocationResultPatchArgs) AllocationResultPatchPtrInput {
	return (*allocationResultPatchPtrType)(v)
}

func (*allocationResultPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResultPatch)(nil)).Elem()
}

func (i *allocationResultPatchPtrType) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return i.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (i *allocationResultPatchPtrType) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationResultPatchPtrOutput)
}

// AllocationResult contains attributed of an allocated resource.
type AllocationResultPatchOutput struct{ *pulumi.OutputState }

func (AllocationResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationResultPatch)(nil)).Elem()
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchOutput() AllocationResultPatchOutput {
	return o
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchOutputWithContext(ctx context.Context) AllocationResultPatchOutput {
	return o
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return o.ToAllocationResultPatchPtrOutputWithContext(context.Background())
}

func (o AllocationResultPatchOutput) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllocationResultPatch) *AllocationResultPatch {
		return &v
	}).(AllocationResultPatchPtrOutput)
}

// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPatchOutput) AvailableOnNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v AllocationResultPatch) *corev1.NodeSelectorPatch { return v.AvailableOnNodes }).(corev1.NodeSelectorPatchPtrOutput)
}

// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o AllocationResultPatchOutput) ResourceHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationResultPatch) *string { return v.ResourceHandle }).(pulumi.StringPtrOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPatchOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllocationResultPatch) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

type AllocationResultPatchPtrOutput struct{ *pulumi.OutputState }

func (AllocationResultPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationResultPatch)(nil)).Elem()
}

func (o AllocationResultPatchPtrOutput) ToAllocationResultPatchPtrOutput() AllocationResultPatchPtrOutput {
	return o
}

func (o AllocationResultPatchPtrOutput) ToAllocationResultPatchPtrOutputWithContext(ctx context.Context) AllocationResultPatchPtrOutput {
	return o
}

func (o AllocationResultPatchPtrOutput) Elem() AllocationResultPatchOutput {
	return o.ApplyT(func(v *AllocationResultPatch) AllocationResultPatch {
		if v != nil {
			return *v
		}
		var ret AllocationResultPatch
		return ret
	}).(AllocationResultPatchOutput)
}

// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
//
// Setting this field is optional. If null, the resource is available everywhere.
func (o AllocationResultPatchPtrOutput) AvailableOnNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *AllocationResultPatch) *corev1.NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.AvailableOnNodes
	}).(corev1.NodeSelectorPatchPtrOutput)
}

// ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
//
// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
func (o AllocationResultPatchPtrOutput) ResourceHandle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationResultPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceHandle
	}).(pulumi.StringPtrOutput)
}

// Shareable determines whether the resource supports more than one consumer at a time.
func (o AllocationResultPatchPtrOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllocationResultPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Shareable
	}).(pulumi.BoolPtrOutput)
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingSpec `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status *PodSchedulingStatus `pulumi:"status"`
}

// PodSchedulingTypeInput is an input type that accepts PodSchedulingTypeArgs and PodSchedulingTypeOutput values.
// You can construct a concrete instance of `PodSchedulingTypeInput` via:
//
//	PodSchedulingTypeArgs{...}
type PodSchedulingTypeInput interface {
	pulumi.Input

	ToPodSchedulingTypeOutput() PodSchedulingTypeOutput
	ToPodSchedulingTypeOutputWithContext(context.Context) PodSchedulingTypeOutput
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingSpecInput `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status PodSchedulingStatusPtrInput `pulumi:"status"`
}

func (PodSchedulingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingType)(nil)).Elem()
}

func (i PodSchedulingTypeArgs) ToPodSchedulingTypeOutput() PodSchedulingTypeOutput {
	return i.ToPodSchedulingTypeOutputWithContext(context.Background())
}

func (i PodSchedulingTypeArgs) ToPodSchedulingTypeOutputWithContext(ctx context.Context) PodSchedulingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingTypeOutput)
}

// PodSchedulingTypeArrayInput is an input type that accepts PodSchedulingTypeArray and PodSchedulingTypeArrayOutput values.
// You can construct a concrete instance of `PodSchedulingTypeArrayInput` via:
//
//	PodSchedulingTypeArray{ PodSchedulingTypeArgs{...} }
type PodSchedulingTypeArrayInput interface {
	pulumi.Input

	ToPodSchedulingTypeArrayOutput() PodSchedulingTypeArrayOutput
	ToPodSchedulingTypeArrayOutputWithContext(context.Context) PodSchedulingTypeArrayOutput
}

type PodSchedulingTypeArray []PodSchedulingTypeInput

func (PodSchedulingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingType)(nil)).Elem()
}

func (i PodSchedulingTypeArray) ToPodSchedulingTypeArrayOutput() PodSchedulingTypeArrayOutput {
	return i.ToPodSchedulingTypeArrayOutputWithContext(context.Background())
}

func (i PodSchedulingTypeArray) ToPodSchedulingTypeArrayOutputWithContext(ctx context.Context) PodSchedulingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingTypeArrayOutput)
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingType)(nil)).Elem()
}

func (o PodSchedulingTypeOutput) ToPodSchedulingTypeOutput() PodSchedulingTypeOutput {
	return o
}

func (o PodSchedulingTypeOutput) ToPodSchedulingTypeOutputWithContext(ctx context.Context) PodSchedulingTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o PodSchedulingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodSchedulingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec describes where resources for the Pod are needed.
func (o PodSchedulingTypeOutput) Spec() PodSchedulingSpecOutput {
	return o.ApplyT(func(v PodSchedulingType) PodSchedulingSpec { return v.Spec }).(PodSchedulingSpecOutput)
}

// Status describes where resources for the Pod can be allocated.
func (o PodSchedulingTypeOutput) Status() PodSchedulingStatusPtrOutput {
	return o.ApplyT(func(v PodSchedulingType) *PodSchedulingStatus { return v.Status }).(PodSchedulingStatusPtrOutput)
}

type PodSchedulingTypeArrayOutput struct{ *pulumi.OutputState }

func (PodSchedulingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PodSchedulingType)(nil)).Elem()
}

func (o PodSchedulingTypeArrayOutput) ToPodSchedulingTypeArrayOutput() PodSchedulingTypeArrayOutput {
	return o
}

func (o PodSchedulingTypeArrayOutput) ToPodSchedulingTypeArrayOutputWithContext(ctx context.Context) PodSchedulingTypeArrayOutput {
	return o
}

func (o PodSchedulingTypeArrayOutput) Index(i pulumi.IntInput) PodSchedulingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PodSchedulingType {
		return vs[0].([]PodSchedulingType)[vs[1].(int)]
	}).(PodSchedulingTypeOutput)
}

// PodSchedulingList is a collection of Pod scheduling objects.
type PodSchedulingListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of PodScheduling objects.
	Items []PodSchedulingType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PodSchedulingListTypeInput is an input type that accepts PodSchedulingListTypeArgs and PodSchedulingListTypeOutput values.
// You can construct a concrete instance of `PodSchedulingListTypeInput` via:
//
//	PodSchedulingListTypeArgs{...}
type PodSchedulingListTypeInput interface {
	pulumi.Input

	ToPodSchedulingListTypeOutput() PodSchedulingListTypeOutput
	ToPodSchedulingListTypeOutputWithContext(context.Context) PodSchedulingListTypeOutput
}

// PodSchedulingList is a collection of Pod scheduling objects.
type PodSchedulingListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of PodScheduling objects.
	Items PodSchedulingTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PodSchedulingListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingListType)(nil)).Elem()
}

func (i PodSchedulingListTypeArgs) ToPodSchedulingListTypeOutput() PodSchedulingListTypeOutput {
	return i.ToPodSchedulingListTypeOutputWithContext(context.Background())
}

func (i PodSchedulingListTypeArgs) ToPodSchedulingListTypeOutputWithContext(ctx context.Context) PodSchedulingListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingListTypeOutput)
}

// PodSchedulingList is a collection of Pod scheduling objects.
type PodSchedulingListTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingListType)(nil)).Elem()
}

func (o PodSchedulingListTypeOutput) ToPodSchedulingListTypeOutput() PodSchedulingListTypeOutput {
	return o
}

func (o PodSchedulingListTypeOutput) ToPodSchedulingListTypeOutputWithContext(ctx context.Context) PodSchedulingListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of PodScheduling objects.
func (o PodSchedulingListTypeOutput) Items() PodSchedulingTypeArrayOutput {
	return o.ApplyT(func(v PodSchedulingListType) []PodSchedulingType { return v.Items }).(PodSchedulingTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o PodSchedulingListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PodSchedulingListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec *PodSchedulingSpecPatch `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status *PodSchedulingStatusPatch `pulumi:"status"`
}

// PodSchedulingPatchTypeInput is an input type that accepts PodSchedulingPatchTypeArgs and PodSchedulingPatchTypeOutput values.
// You can construct a concrete instance of `PodSchedulingPatchTypeInput` via:
//
//	PodSchedulingPatchTypeArgs{...}
type PodSchedulingPatchTypeInput interface {
	pulumi.Input

	ToPodSchedulingPatchTypeOutput() PodSchedulingPatchTypeOutput
	ToPodSchedulingPatchTypeOutputWithContext(context.Context) PodSchedulingPatchTypeOutput
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec describes where resources for the Pod are needed.
	Spec PodSchedulingSpecPatchPtrInput `pulumi:"spec"`
	// Status describes where resources for the Pod can be allocated.
	Status PodSchedulingStatusPatchPtrInput `pulumi:"status"`
}

func (PodSchedulingPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingPatchType)(nil)).Elem()
}

func (i PodSchedulingPatchTypeArgs) ToPodSchedulingPatchTypeOutput() PodSchedulingPatchTypeOutput {
	return i.ToPodSchedulingPatchTypeOutputWithContext(context.Background())
}

func (i PodSchedulingPatchTypeArgs) ToPodSchedulingPatchTypeOutputWithContext(ctx context.Context) PodSchedulingPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingPatchTypeOutput)
}

// PodScheduling objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type PodSchedulingPatchTypeOutput struct{ *pulumi.OutputState }

func (PodSchedulingPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingPatchType)(nil)).Elem()
}

func (o PodSchedulingPatchTypeOutput) ToPodSchedulingPatchTypeOutput() PodSchedulingPatchTypeOutput {
	return o
}

func (o PodSchedulingPatchTypeOutput) ToPodSchedulingPatchTypeOutputWithContext(ctx context.Context) PodSchedulingPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodSchedulingPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodSchedulingPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o PodSchedulingPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec describes where resources for the Pod are needed.
func (o PodSchedulingPatchTypeOutput) Spec() PodSchedulingSpecPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingPatchType) *PodSchedulingSpecPatch { return v.Spec }).(PodSchedulingSpecPatchPtrOutput)
}

// Status describes where resources for the Pod can be allocated.
func (o PodSchedulingPatchTypeOutput) Status() PodSchedulingStatusPatchPtrOutput {
	return o.ApplyT(func(v PodSchedulingPatchType) *PodSchedulingStatusPatch { return v.Status }).(PodSchedulingStatusPatchPtrOutput)
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpec struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []string `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `pulumi:"selectedNode"`
}

// PodSchedulingSpecInput is an input type that accepts PodSchedulingSpecArgs and PodSchedulingSpecOutput values.
// You can construct a concrete instance of `PodSchedulingSpecInput` via:
//
//	PodSchedulingSpecArgs{...}
type PodSchedulingSpecInput interface {
	pulumi.Input

	ToPodSchedulingSpecOutput() PodSchedulingSpecOutput
	ToPodSchedulingSpecOutputWithContext(context.Context) PodSchedulingSpecOutput
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpecArgs struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes pulumi.StringArrayInput `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode pulumi.StringPtrInput `pulumi:"selectedNode"`
}

func (PodSchedulingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingSpec)(nil)).Elem()
}

func (i PodSchedulingSpecArgs) ToPodSchedulingSpecOutput() PodSchedulingSpecOutput {
	return i.ToPodSchedulingSpecOutputWithContext(context.Background())
}

func (i PodSchedulingSpecArgs) ToPodSchedulingSpecOutputWithContext(ctx context.Context) PodSchedulingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingSpecOutput)
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpecOutput struct{ *pulumi.OutputState }

func (PodSchedulingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingSpec)(nil)).Elem()
}

func (o PodSchedulingSpecOutput) ToPodSchedulingSpecOutput() PodSchedulingSpecOutput {
	return o
}

func (o PodSchedulingSpecOutput) ToPodSchedulingSpecOutputWithContext(ctx context.Context) PodSchedulingSpecOutput {
	return o
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingSpecOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSchedulingSpec) []string { return v.PotentialNodes }).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingSpecOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingSpec) *string { return v.SelectedNode }).(pulumi.StringPtrOutput)
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpecPatch struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []string `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `pulumi:"selectedNode"`
}

// PodSchedulingSpecPatchInput is an input type that accepts PodSchedulingSpecPatchArgs and PodSchedulingSpecPatchOutput values.
// You can construct a concrete instance of `PodSchedulingSpecPatchInput` via:
//
//	PodSchedulingSpecPatchArgs{...}
type PodSchedulingSpecPatchInput interface {
	pulumi.Input

	ToPodSchedulingSpecPatchOutput() PodSchedulingSpecPatchOutput
	ToPodSchedulingSpecPatchOutputWithContext(context.Context) PodSchedulingSpecPatchOutput
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpecPatchArgs struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes pulumi.StringArrayInput `pulumi:"potentialNodes"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode pulumi.StringPtrInput `pulumi:"selectedNode"`
}

func (PodSchedulingSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingSpecPatch)(nil)).Elem()
}

func (i PodSchedulingSpecPatchArgs) ToPodSchedulingSpecPatchOutput() PodSchedulingSpecPatchOutput {
	return i.ToPodSchedulingSpecPatchOutputWithContext(context.Background())
}

func (i PodSchedulingSpecPatchArgs) ToPodSchedulingSpecPatchOutputWithContext(ctx context.Context) PodSchedulingSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingSpecPatchOutput)
}

func (i PodSchedulingSpecPatchArgs) ToPodSchedulingSpecPatchPtrOutput() PodSchedulingSpecPatchPtrOutput {
	return i.ToPodSchedulingSpecPatchPtrOutputWithContext(context.Background())
}

func (i PodSchedulingSpecPatchArgs) ToPodSchedulingSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingSpecPatchOutput).ToPodSchedulingSpecPatchPtrOutputWithContext(ctx)
}

// PodSchedulingSpecPatchPtrInput is an input type that accepts PodSchedulingSpecPatchArgs, PodSchedulingSpecPatchPtr and PodSchedulingSpecPatchPtrOutput values.
// You can construct a concrete instance of `PodSchedulingSpecPatchPtrInput` via:
//
//	        PodSchedulingSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingSpecPatchPtrInput interface {
	pulumi.Input

	ToPodSchedulingSpecPatchPtrOutput() PodSchedulingSpecPatchPtrOutput
	ToPodSchedulingSpecPatchPtrOutputWithContext(context.Context) PodSchedulingSpecPatchPtrOutput
}

type podSchedulingSpecPatchPtrType PodSchedulingSpecPatchArgs

func PodSchedulingSpecPatchPtr(v *PodSchedulingSpecPatchArgs) PodSchedulingSpecPatchPtrInput {
	return (*podSchedulingSpecPatchPtrType)(v)
}

func (*podSchedulingSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingSpecPatch)(nil)).Elem()
}

func (i *podSchedulingSpecPatchPtrType) ToPodSchedulingSpecPatchPtrOutput() PodSchedulingSpecPatchPtrOutput {
	return i.ToPodSchedulingSpecPatchPtrOutputWithContext(context.Background())
}

func (i *podSchedulingSpecPatchPtrType) ToPodSchedulingSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingSpecPatchPtrOutput)
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpecPatchOutput struct{ *pulumi.OutputState }

func (PodSchedulingSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingSpecPatch)(nil)).Elem()
}

func (o PodSchedulingSpecPatchOutput) ToPodSchedulingSpecPatchOutput() PodSchedulingSpecPatchOutput {
	return o
}

func (o PodSchedulingSpecPatchOutput) ToPodSchedulingSpecPatchOutputWithContext(ctx context.Context) PodSchedulingSpecPatchOutput {
	return o
}

func (o PodSchedulingSpecPatchOutput) ToPodSchedulingSpecPatchPtrOutput() PodSchedulingSpecPatchPtrOutput {
	return o.ToPodSchedulingSpecPatchPtrOutputWithContext(context.Background())
}

func (o PodSchedulingSpecPatchOutput) ToPodSchedulingSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingSpecPatch) *PodSchedulingSpecPatch {
		return &v
	}).(PodSchedulingSpecPatchPtrOutput)
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingSpecPatchOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PodSchedulingSpecPatch) []string { return v.PotentialNodes }).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingSpecPatchOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodSchedulingSpecPatch) *string { return v.SelectedNode }).(pulumi.StringPtrOutput)
}

type PodSchedulingSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingSpecPatch)(nil)).Elem()
}

func (o PodSchedulingSpecPatchPtrOutput) ToPodSchedulingSpecPatchPtrOutput() PodSchedulingSpecPatchPtrOutput {
	return o
}

func (o PodSchedulingSpecPatchPtrOutput) ToPodSchedulingSpecPatchPtrOutputWithContext(ctx context.Context) PodSchedulingSpecPatchPtrOutput {
	return o
}

func (o PodSchedulingSpecPatchPtrOutput) Elem() PodSchedulingSpecPatchOutput {
	return o.ApplyT(func(v *PodSchedulingSpecPatch) PodSchedulingSpecPatch {
		if v != nil {
			return *v
		}
		var ret PodSchedulingSpecPatch
		return ret
	}).(PodSchedulingSpecPatchOutput)
}

// PotentialNodes lists nodes where the Pod might be able to run.
//
// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
func (o PodSchedulingSpecPatchPtrOutput) PotentialNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PodSchedulingSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.PotentialNodes
	}).(pulumi.StringArrayOutput)
}

// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
func (o PodSchedulingSpecPatchPtrOutput) SelectedNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodSchedulingSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SelectedNode
	}).(pulumi.StringPtrOutput)
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatus struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []ResourceClaimSchedulingStatus `pulumi:"resourceClaims"`
}

// PodSchedulingStatusInput is an input type that accepts PodSchedulingStatusArgs and PodSchedulingStatusOutput values.
// You can construct a concrete instance of `PodSchedulingStatusInput` via:
//
//	PodSchedulingStatusArgs{...}
type PodSchedulingStatusInput interface {
	pulumi.Input

	ToPodSchedulingStatusOutput() PodSchedulingStatusOutput
	ToPodSchedulingStatusOutputWithContext(context.Context) PodSchedulingStatusOutput
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatusArgs struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims ResourceClaimSchedulingStatusArrayInput `pulumi:"resourceClaims"`
}

func (PodSchedulingStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingStatus)(nil)).Elem()
}

func (i PodSchedulingStatusArgs) ToPodSchedulingStatusOutput() PodSchedulingStatusOutput {
	return i.ToPodSchedulingStatusOutputWithContext(context.Background())
}

func (i PodSchedulingStatusArgs) ToPodSchedulingStatusOutputWithContext(ctx context.Context) PodSchedulingStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusOutput)
}

func (i PodSchedulingStatusArgs) ToPodSchedulingStatusPtrOutput() PodSchedulingStatusPtrOutput {
	return i.ToPodSchedulingStatusPtrOutputWithContext(context.Background())
}

func (i PodSchedulingStatusArgs) ToPodSchedulingStatusPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusOutput).ToPodSchedulingStatusPtrOutputWithContext(ctx)
}

// PodSchedulingStatusPtrInput is an input type that accepts PodSchedulingStatusArgs, PodSchedulingStatusPtr and PodSchedulingStatusPtrOutput values.
// You can construct a concrete instance of `PodSchedulingStatusPtrInput` via:
//
//	        PodSchedulingStatusArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingStatusPtrInput interface {
	pulumi.Input

	ToPodSchedulingStatusPtrOutput() PodSchedulingStatusPtrOutput
	ToPodSchedulingStatusPtrOutputWithContext(context.Context) PodSchedulingStatusPtrOutput
}

type podSchedulingStatusPtrType PodSchedulingStatusArgs

func PodSchedulingStatusPtr(v *PodSchedulingStatusArgs) PodSchedulingStatusPtrInput {
	return (*podSchedulingStatusPtrType)(v)
}

func (*podSchedulingStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingStatus)(nil)).Elem()
}

func (i *podSchedulingStatusPtrType) ToPodSchedulingStatusPtrOutput() PodSchedulingStatusPtrOutput {
	return i.ToPodSchedulingStatusPtrOutputWithContext(context.Background())
}

func (i *podSchedulingStatusPtrType) ToPodSchedulingStatusPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusPtrOutput)
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatusOutput struct{ *pulumi.OutputState }

func (PodSchedulingStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingStatus)(nil)).Elem()
}

func (o PodSchedulingStatusOutput) ToPodSchedulingStatusOutput() PodSchedulingStatusOutput {
	return o
}

func (o PodSchedulingStatusOutput) ToPodSchedulingStatusOutputWithContext(ctx context.Context) PodSchedulingStatusOutput {
	return o
}

func (o PodSchedulingStatusOutput) ToPodSchedulingStatusPtrOutput() PodSchedulingStatusPtrOutput {
	return o.ToPodSchedulingStatusPtrOutputWithContext(context.Background())
}

func (o PodSchedulingStatusOutput) ToPodSchedulingStatusPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingStatus) *PodSchedulingStatus {
		return &v
	}).(PodSchedulingStatusPtrOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingStatusOutput) ResourceClaims() ResourceClaimSchedulingStatusArrayOutput {
	return o.ApplyT(func(v PodSchedulingStatus) []ResourceClaimSchedulingStatus { return v.ResourceClaims }).(ResourceClaimSchedulingStatusArrayOutput)
}

type PodSchedulingStatusPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingStatus)(nil)).Elem()
}

func (o PodSchedulingStatusPtrOutput) ToPodSchedulingStatusPtrOutput() PodSchedulingStatusPtrOutput {
	return o
}

func (o PodSchedulingStatusPtrOutput) ToPodSchedulingStatusPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPtrOutput {
	return o
}

func (o PodSchedulingStatusPtrOutput) Elem() PodSchedulingStatusOutput {
	return o.ApplyT(func(v *PodSchedulingStatus) PodSchedulingStatus {
		if v != nil {
			return *v
		}
		var ret PodSchedulingStatus
		return ret
	}).(PodSchedulingStatusOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingStatusPtrOutput) ResourceClaims() ResourceClaimSchedulingStatusArrayOutput {
	return o.ApplyT(func(v *PodSchedulingStatus) []ResourceClaimSchedulingStatus {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(ResourceClaimSchedulingStatusArrayOutput)
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatusPatch struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []ResourceClaimSchedulingStatusPatch `pulumi:"resourceClaims"`
}

// PodSchedulingStatusPatchInput is an input type that accepts PodSchedulingStatusPatchArgs and PodSchedulingStatusPatchOutput values.
// You can construct a concrete instance of `PodSchedulingStatusPatchInput` via:
//
//	PodSchedulingStatusPatchArgs{...}
type PodSchedulingStatusPatchInput interface {
	pulumi.Input

	ToPodSchedulingStatusPatchOutput() PodSchedulingStatusPatchOutput
	ToPodSchedulingStatusPatchOutputWithContext(context.Context) PodSchedulingStatusPatchOutput
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatusPatchArgs struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims ResourceClaimSchedulingStatusPatchArrayInput `pulumi:"resourceClaims"`
}

func (PodSchedulingStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingStatusPatch)(nil)).Elem()
}

func (i PodSchedulingStatusPatchArgs) ToPodSchedulingStatusPatchOutput() PodSchedulingStatusPatchOutput {
	return i.ToPodSchedulingStatusPatchOutputWithContext(context.Background())
}

func (i PodSchedulingStatusPatchArgs) ToPodSchedulingStatusPatchOutputWithContext(ctx context.Context) PodSchedulingStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusPatchOutput)
}

func (i PodSchedulingStatusPatchArgs) ToPodSchedulingStatusPatchPtrOutput() PodSchedulingStatusPatchPtrOutput {
	return i.ToPodSchedulingStatusPatchPtrOutputWithContext(context.Background())
}

func (i PodSchedulingStatusPatchArgs) ToPodSchedulingStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusPatchOutput).ToPodSchedulingStatusPatchPtrOutputWithContext(ctx)
}

// PodSchedulingStatusPatchPtrInput is an input type that accepts PodSchedulingStatusPatchArgs, PodSchedulingStatusPatchPtr and PodSchedulingStatusPatchPtrOutput values.
// You can construct a concrete instance of `PodSchedulingStatusPatchPtrInput` via:
//
//	        PodSchedulingStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PodSchedulingStatusPatchPtrInput interface {
	pulumi.Input

	ToPodSchedulingStatusPatchPtrOutput() PodSchedulingStatusPatchPtrOutput
	ToPodSchedulingStatusPatchPtrOutputWithContext(context.Context) PodSchedulingStatusPatchPtrOutput
}

type podSchedulingStatusPatchPtrType PodSchedulingStatusPatchArgs

func PodSchedulingStatusPatchPtr(v *PodSchedulingStatusPatchArgs) PodSchedulingStatusPatchPtrInput {
	return (*podSchedulingStatusPatchPtrType)(v)
}

func (*podSchedulingStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingStatusPatch)(nil)).Elem()
}

func (i *podSchedulingStatusPatchPtrType) ToPodSchedulingStatusPatchPtrOutput() PodSchedulingStatusPatchPtrOutput {
	return i.ToPodSchedulingStatusPatchPtrOutputWithContext(context.Background())
}

func (i *podSchedulingStatusPatchPtrType) ToPodSchedulingStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodSchedulingStatusPatchPtrOutput)
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatusPatchOutput struct{ *pulumi.OutputState }

func (PodSchedulingStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodSchedulingStatusPatch)(nil)).Elem()
}

func (o PodSchedulingStatusPatchOutput) ToPodSchedulingStatusPatchOutput() PodSchedulingStatusPatchOutput {
	return o
}

func (o PodSchedulingStatusPatchOutput) ToPodSchedulingStatusPatchOutputWithContext(ctx context.Context) PodSchedulingStatusPatchOutput {
	return o
}

func (o PodSchedulingStatusPatchOutput) ToPodSchedulingStatusPatchPtrOutput() PodSchedulingStatusPatchPtrOutput {
	return o.ToPodSchedulingStatusPatchPtrOutputWithContext(context.Background())
}

func (o PodSchedulingStatusPatchOutput) ToPodSchedulingStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodSchedulingStatusPatch) *PodSchedulingStatusPatch {
		return &v
	}).(PodSchedulingStatusPatchPtrOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingStatusPatchOutput) ResourceClaims() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o.ApplyT(func(v PodSchedulingStatusPatch) []ResourceClaimSchedulingStatusPatch { return v.ResourceClaims }).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

type PodSchedulingStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PodSchedulingStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodSchedulingStatusPatch)(nil)).Elem()
}

func (o PodSchedulingStatusPatchPtrOutput) ToPodSchedulingStatusPatchPtrOutput() PodSchedulingStatusPatchPtrOutput {
	return o
}

func (o PodSchedulingStatusPatchPtrOutput) ToPodSchedulingStatusPatchPtrOutputWithContext(ctx context.Context) PodSchedulingStatusPatchPtrOutput {
	return o
}

func (o PodSchedulingStatusPatchPtrOutput) Elem() PodSchedulingStatusPatchOutput {
	return o.ApplyT(func(v *PodSchedulingStatusPatch) PodSchedulingStatusPatch {
		if v != nil {
			return *v
		}
		var ret PodSchedulingStatusPatch
		return ret
	}).(PodSchedulingStatusPatchOutput)
}

// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
func (o PodSchedulingStatusPatchPtrOutput) ResourceClaims() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o.ApplyT(func(v *PodSchedulingStatusPatch) []ResourceClaimSchedulingStatusPatch {
		if v == nil {
			return nil
		}
		return v.ResourceClaims
	}).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpec `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status *ResourceClaimStatus `pulumi:"status"`
}

// ResourceClaimTypeInput is an input type that accepts ResourceClaimTypeArgs and ResourceClaimTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTypeInput` via:
//
//	ResourceClaimTypeArgs{...}
type ResourceClaimTypeInput interface {
	pulumi.Input

	ToResourceClaimTypeOutput() ResourceClaimTypeOutput
	ToResourceClaimTypeOutputWithContext(context.Context) ResourceClaimTypeOutput
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpecInput `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status ResourceClaimStatusPtrInput `pulumi:"status"`
}

func (ResourceClaimTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimType)(nil)).Elem()
}

func (i ResourceClaimTypeArgs) ToResourceClaimTypeOutput() ResourceClaimTypeOutput {
	return i.ToResourceClaimTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTypeArgs) ToResourceClaimTypeOutputWithContext(ctx context.Context) ResourceClaimTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTypeOutput)
}

// ResourceClaimTypeArrayInput is an input type that accepts ResourceClaimTypeArray and ResourceClaimTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClaimTypeArrayInput` via:
//
//	ResourceClaimTypeArray{ ResourceClaimTypeArgs{...} }
type ResourceClaimTypeArrayInput interface {
	pulumi.Input

	ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput
	ToResourceClaimTypeArrayOutputWithContext(context.Context) ResourceClaimTypeArrayOutput
}

type ResourceClaimTypeArray []ResourceClaimTypeInput

func (ResourceClaimTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimType)(nil)).Elem()
}

func (i ResourceClaimTypeArray) ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput {
	return i.ToResourceClaimTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClaimTypeArray) ToResourceClaimTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTypeArrayOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimType)(nil)).Elem()
}

func (o ResourceClaimTypeOutput) ToResourceClaimTypeOutput() ResourceClaimTypeOutput {
	return o
}

func (o ResourceClaimTypeOutput) ToResourceClaimTypeOutputWithContext(ctx context.Context) ResourceClaimTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
func (o ResourceClaimTypeOutput) Spec() ResourceClaimSpecOutput {
	return o.ApplyT(func(v ResourceClaimType) ResourceClaimSpec { return v.Spec }).(ResourceClaimSpecOutput)
}

// Status describes whether the resource is available and with which attributes.
func (o ResourceClaimTypeOutput) Status() ResourceClaimStatusPtrOutput {
	return o.ApplyT(func(v ResourceClaimType) *ResourceClaimStatus { return v.Status }).(ResourceClaimStatusPtrOutput)
}

type ResourceClaimTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimType)(nil)).Elem()
}

func (o ResourceClaimTypeArrayOutput) ToResourceClaimTypeArrayOutput() ResourceClaimTypeArrayOutput {
	return o
}

func (o ResourceClaimTypeArrayOutput) ToResourceClaimTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTypeArrayOutput {
	return o
}

func (o ResourceClaimTypeArrayOutput) Index(i pulumi.IntInput) ResourceClaimTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimType {
		return vs[0].([]ResourceClaimType)[vs[1].(int)]
	}).(ResourceClaimTypeOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource string `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid string `pulumi:"uid"`
}

// ResourceClaimConsumerReferenceInput is an input type that accepts ResourceClaimConsumerReferenceArgs and ResourceClaimConsumerReferenceOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferenceInput` via:
//
//	ResourceClaimConsumerReferenceArgs{...}
type ResourceClaimConsumerReferenceInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput
	ToResourceClaimConsumerReferenceOutputWithContext(context.Context) ResourceClaimConsumerReferenceOutput
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource pulumi.StringInput `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (ResourceClaimConsumerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReference)(nil)).Elem()
}

func (i ResourceClaimConsumerReferenceArgs) ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput {
	return i.ToResourceClaimConsumerReferenceOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferenceArgs) ToResourceClaimConsumerReferenceOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferenceOutput)
}

// ResourceClaimConsumerReferenceArrayInput is an input type that accepts ResourceClaimConsumerReferenceArray and ResourceClaimConsumerReferenceArrayOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferenceArrayInput` via:
//
//	ResourceClaimConsumerReferenceArray{ ResourceClaimConsumerReferenceArgs{...} }
type ResourceClaimConsumerReferenceArrayInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput
	ToResourceClaimConsumerReferenceArrayOutputWithContext(context.Context) ResourceClaimConsumerReferenceArrayOutput
}

type ResourceClaimConsumerReferenceArray []ResourceClaimConsumerReferenceInput

func (ResourceClaimConsumerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReference)(nil)).Elem()
}

func (i ResourceClaimConsumerReferenceArray) ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput {
	return i.ToResourceClaimConsumerReferenceArrayOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferenceArray) ToResourceClaimConsumerReferenceArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferenceArrayOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReference)(nil)).Elem()
}

func (o ResourceClaimConsumerReferenceOutput) ToResourceClaimConsumerReferenceOutput() ResourceClaimConsumerReferenceOutput {
	return o
}

func (o ResourceClaimConsumerReferenceOutput) ToResourceClaimConsumerReferenceOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceOutput {
	return o
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimConsumerReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimConsumerReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Name }).(pulumi.StringOutput)
}

// Resource is the type of resource being referenced, for example "pods".
func (o ResourceClaimConsumerReferenceOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Resource }).(pulumi.StringOutput)
}

// UID identifies exactly one incarnation of the resource.
func (o ResourceClaimConsumerReferenceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReference) string { return v.Uid }).(pulumi.StringOutput)
}

type ResourceClaimConsumerReferenceArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReference)(nil)).Elem()
}

func (o ResourceClaimConsumerReferenceArrayOutput) ToResourceClaimConsumerReferenceArrayOutput() ResourceClaimConsumerReferenceArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferenceArrayOutput) ToResourceClaimConsumerReferenceArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferenceArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferenceArrayOutput) Index(i pulumi.IntInput) ResourceClaimConsumerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimConsumerReference {
		return vs[0].([]ResourceClaimConsumerReference)[vs[1].(int)]
	}).(ResourceClaimConsumerReferenceOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource *string `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid *string `pulumi:"uid"`
}

// ResourceClaimConsumerReferencePatchInput is an input type that accepts ResourceClaimConsumerReferencePatchArgs and ResourceClaimConsumerReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferencePatchInput` via:
//
//	ResourceClaimConsumerReferencePatchArgs{...}
type ResourceClaimConsumerReferencePatchInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput
	ToResourceClaimConsumerReferencePatchOutputWithContext(context.Context) ResourceClaimConsumerReferencePatchOutput
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// UID identifies exactly one incarnation of the resource.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ResourceClaimConsumerReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (i ResourceClaimConsumerReferencePatchArgs) ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput {
	return i.ToResourceClaimConsumerReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferencePatchArgs) ToResourceClaimConsumerReferencePatchOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferencePatchOutput)
}

// ResourceClaimConsumerReferencePatchArrayInput is an input type that accepts ResourceClaimConsumerReferencePatchArray and ResourceClaimConsumerReferencePatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimConsumerReferencePatchArrayInput` via:
//
//	ResourceClaimConsumerReferencePatchArray{ ResourceClaimConsumerReferencePatchArgs{...} }
type ResourceClaimConsumerReferencePatchArrayInput interface {
	pulumi.Input

	ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput
	ToResourceClaimConsumerReferencePatchArrayOutputWithContext(context.Context) ResourceClaimConsumerReferencePatchArrayOutput
}

type ResourceClaimConsumerReferencePatchArray []ResourceClaimConsumerReferencePatchInput

func (ResourceClaimConsumerReferencePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (i ResourceClaimConsumerReferencePatchArray) ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput {
	return i.ToResourceClaimConsumerReferencePatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimConsumerReferencePatchArray) ToResourceClaimConsumerReferencePatchArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimConsumerReferencePatchArrayOutput)
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type ResourceClaimConsumerReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (o ResourceClaimConsumerReferencePatchOutput) ToResourceClaimConsumerReferencePatchOutput() ResourceClaimConsumerReferencePatchOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchOutput) ToResourceClaimConsumerReferencePatchOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchOutput {
	return o
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimConsumerReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimConsumerReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource is the type of resource being referenced, for example "pods".
func (o ResourceClaimConsumerReferencePatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// UID identifies exactly one incarnation of the resource.
func (o ResourceClaimConsumerReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimConsumerReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ResourceClaimConsumerReferencePatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimConsumerReferencePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimConsumerReferencePatch)(nil)).Elem()
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) ToResourceClaimConsumerReferencePatchArrayOutput() ResourceClaimConsumerReferencePatchArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) ToResourceClaimConsumerReferencePatchArrayOutputWithContext(ctx context.Context) ResourceClaimConsumerReferencePatchArrayOutput {
	return o
}

func (o ResourceClaimConsumerReferencePatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimConsumerReferencePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimConsumerReferencePatch {
		return vs[0].([]ResourceClaimConsumerReferencePatch)[vs[1].(int)]
	}).(ResourceClaimConsumerReferencePatchOutput)
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource claims.
	Items []ResourceClaimType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClaimListTypeInput is an input type that accepts ResourceClaimListTypeArgs and ResourceClaimListTypeOutput values.
// You can construct a concrete instance of `ResourceClaimListTypeInput` via:
//
//	ResourceClaimListTypeArgs{...}
type ResourceClaimListTypeInput interface {
	pulumi.Input

	ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput
	ToResourceClaimListTypeOutputWithContext(context.Context) ResourceClaimListTypeOutput
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource claims.
	Items ResourceClaimTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClaimListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimListType)(nil)).Elem()
}

func (i ResourceClaimListTypeArgs) ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput {
	return i.ToResourceClaimListTypeOutputWithContext(context.Background())
}

func (i ResourceClaimListTypeArgs) ToResourceClaimListTypeOutputWithContext(ctx context.Context) ResourceClaimListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimListTypeOutput)
}

// ResourceClaimList is a collection of claims.
type ResourceClaimListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimListType)(nil)).Elem()
}

func (o ResourceClaimListTypeOutput) ToResourceClaimListTypeOutput() ResourceClaimListTypeOutput {
	return o
}

func (o ResourceClaimListTypeOutput) ToResourceClaimListTypeOutputWithContext(ctx context.Context) ResourceClaimListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource claims.
func (o ResourceClaimListTypeOutput) Items() ResourceClaimTypeArrayOutput {
	return o.ApplyT(func(v ResourceClaimListType) []ResourceClaimType { return v.Items }).(ResourceClaimTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClaimListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
}

// ResourceClaimParametersReferenceInput is an input type that accepts ResourceClaimParametersReferenceArgs and ResourceClaimParametersReferenceOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferenceInput` via:
//
//	ResourceClaimParametersReferenceArgs{...}
type ResourceClaimParametersReferenceInput interface {
	pulumi.Input

	ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput
	ToResourceClaimParametersReferenceOutputWithContext(context.Context) ResourceClaimParametersReferenceOutput
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ResourceClaimParametersReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReference)(nil)).Elem()
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput {
	return i.ToResourceClaimParametersReferenceOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferenceOutputWithContext(ctx context.Context) ResourceClaimParametersReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferenceOutput)
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return i.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferenceArgs) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferenceOutput).ToResourceClaimParametersReferencePtrOutputWithContext(ctx)
}

// ResourceClaimParametersReferencePtrInput is an input type that accepts ResourceClaimParametersReferenceArgs, ResourceClaimParametersReferencePtr and ResourceClaimParametersReferencePtrOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePtrInput` via:
//
//	        ResourceClaimParametersReferenceArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimParametersReferencePtrInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput
	ToResourceClaimParametersReferencePtrOutputWithContext(context.Context) ResourceClaimParametersReferencePtrOutput
}

type resourceClaimParametersReferencePtrType ResourceClaimParametersReferenceArgs

func ResourceClaimParametersReferencePtr(v *ResourceClaimParametersReferenceArgs) ResourceClaimParametersReferencePtrInput {
	return (*resourceClaimParametersReferencePtrType)(v)
}

func (*resourceClaimParametersReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReference)(nil)).Elem()
}

func (i *resourceClaimParametersReferencePtrType) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return i.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (i *resourceClaimParametersReferencePtrType) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReference)(nil)).Elem()
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferenceOutput() ResourceClaimParametersReferenceOutput {
	return o
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferenceOutputWithContext(ctx context.Context) ResourceClaimParametersReferenceOutput {
	return o
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return o.ToResourceClaimParametersReferencePtrOutputWithContext(context.Background())
}

func (o ResourceClaimParametersReferenceOutput) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimParametersReference) *ResourceClaimParametersReference {
		return &v
	}).(ResourceClaimParametersReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimParametersReference) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceClaimParametersReferencePtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReference)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePtrOutput) ToResourceClaimParametersReferencePtrOutput() ResourceClaimParametersReferencePtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePtrOutput) ToResourceClaimParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePtrOutput) Elem() ResourceClaimParametersReferenceOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) ResourceClaimParametersReference {
		if v != nil {
			return *v
		}
		var ret ResourceClaimParametersReference
		return ret
	}).(ResourceClaimParametersReferenceOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
}

// ResourceClaimParametersReferencePatchInput is an input type that accepts ResourceClaimParametersReferencePatchArgs and ResourceClaimParametersReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePatchInput` via:
//
//	ResourceClaimParametersReferencePatchArgs{...}
type ResourceClaimParametersReferencePatchInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput
	ToResourceClaimParametersReferencePatchOutputWithContext(context.Context) ResourceClaimParametersReferencePatchOutput
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceClaimParametersReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput {
	return i.ToResourceClaimParametersReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchOutput)
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return i.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimParametersReferencePatchArgs) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchOutput).ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx)
}

// ResourceClaimParametersReferencePatchPtrInput is an input type that accepts ResourceClaimParametersReferencePatchArgs, ResourceClaimParametersReferencePatchPtr and ResourceClaimParametersReferencePatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimParametersReferencePatchPtrInput` via:
//
//	        ResourceClaimParametersReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimParametersReferencePatchPtrInput interface {
	pulumi.Input

	ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput
	ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Context) ResourceClaimParametersReferencePatchPtrOutput
}

type resourceClaimParametersReferencePatchPtrType ResourceClaimParametersReferencePatchArgs

func ResourceClaimParametersReferencePatchPtr(v *ResourceClaimParametersReferencePatchArgs) ResourceClaimParametersReferencePatchPtrInput {
	return (*resourceClaimParametersReferencePatchPtrType)(v)
}

func (*resourceClaimParametersReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (i *resourceClaimParametersReferencePatchPtrType) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return i.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimParametersReferencePatchPtrType) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type ResourceClaimParametersReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchOutput() ResourceClaimParametersReferencePatchOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ToResourceClaimParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimParametersReferencePatchOutput) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimParametersReferencePatch) *ResourceClaimParametersReferencePatch {
		return &v
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimParametersReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceClaimParametersReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimParametersReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClaimParametersReferencePatchPtrOutput) ToResourceClaimParametersReferencePatchPtrOutput() ResourceClaimParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchPtrOutput) ToResourceClaimParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClaimParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClaimParametersReferencePatchPtrOutput) Elem() ResourceClaimParametersReferencePatchOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) ResourceClaimParametersReferencePatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimParametersReferencePatch
		return ret
	}).(ResourceClaimParametersReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClaimParametersReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
func (o ResourceClaimParametersReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClaimParametersReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec *ResourceClaimSpecPatch `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status *ResourceClaimStatusPatch `pulumi:"status"`
}

// ResourceClaimPatchTypeInput is an input type that accepts ResourceClaimPatchTypeArgs and ResourceClaimPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClaimPatchTypeInput` via:
//
//	ResourceClaimPatchTypeArgs{...}
type ResourceClaimPatchTypeInput interface {
	pulumi.Input

	ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput
	ToResourceClaimPatchTypeOutputWithContext(context.Context) ResourceClaimPatchTypeOutput
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
	Spec ResourceClaimSpecPatchPtrInput `pulumi:"spec"`
	// Status describes whether the resource is available and with which attributes.
	Status ResourceClaimStatusPatchPtrInput `pulumi:"status"`
}

func (ResourceClaimPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatchType)(nil)).Elem()
}

func (i ResourceClaimPatchTypeArgs) ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput {
	return i.ToResourceClaimPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClaimPatchTypeArgs) ToResourceClaimPatchTypeOutputWithContext(ctx context.Context) ResourceClaimPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimPatchTypeOutput)
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClaimPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimPatchType)(nil)).Elem()
}

func (o ResourceClaimPatchTypeOutput) ToResourceClaimPatchTypeOutput() ResourceClaimPatchTypeOutput {
	return o
}

func (o ResourceClaimPatchTypeOutput) ToResourceClaimPatchTypeOutputWithContext(ctx context.Context) ResourceClaimPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
func (o ResourceClaimPatchTypeOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *ResourceClaimSpecPatch { return v.Spec }).(ResourceClaimSpecPatchPtrOutput)
}

// Status describes whether the resource is available and with which attributes.
func (o ResourceClaimPatchTypeOutput) Status() ResourceClaimStatusPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimPatchType) *ResourceClaimStatusPatch { return v.Status }).(ResourceClaimStatusPatchPtrOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatus struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []string `pulumi:"unsuitableNodes"`
}

// ResourceClaimSchedulingStatusInput is an input type that accepts ResourceClaimSchedulingStatusArgs and ResourceClaimSchedulingStatusOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusInput` via:
//
//	ResourceClaimSchedulingStatusArgs{...}
type ResourceClaimSchedulingStatusInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput
	ToResourceClaimSchedulingStatusOutputWithContext(context.Context) ResourceClaimSchedulingStatusOutput
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusArgs struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes pulumi.StringArrayInput `pulumi:"unsuitableNodes"`
}

func (ResourceClaimSchedulingStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusArgs) ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput {
	return i.ToResourceClaimSchedulingStatusOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusArgs) ToResourceClaimSchedulingStatusOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusOutput)
}

// ResourceClaimSchedulingStatusArrayInput is an input type that accepts ResourceClaimSchedulingStatusArray and ResourceClaimSchedulingStatusArrayOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusArrayInput` via:
//
//	ResourceClaimSchedulingStatusArray{ ResourceClaimSchedulingStatusArgs{...} }
type ResourceClaimSchedulingStatusArrayInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput
	ToResourceClaimSchedulingStatusArrayOutputWithContext(context.Context) ResourceClaimSchedulingStatusArrayOutput
}

type ResourceClaimSchedulingStatusArray []ResourceClaimSchedulingStatusInput

func (ResourceClaimSchedulingStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusArray) ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput {
	return i.ToResourceClaimSchedulingStatusArrayOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusArray) ToResourceClaimSchedulingStatusArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusArrayOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusOutput) ToResourceClaimSchedulingStatusOutput() ResourceClaimSchedulingStatusOutput {
	return o
}

func (o ResourceClaimSchedulingStatusOutput) ToResourceClaimSchedulingStatusOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusOutput {
	return o
}

// Name matches the pod.spec.resourceClaims[*].Name field.
func (o ResourceClaimSchedulingStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
//
// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
func (o ResourceClaimSchedulingStatusOutput) UnsuitableNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatus) []string { return v.UnsuitableNodes }).(pulumi.StringArrayOutput)
}

type ResourceClaimSchedulingStatusArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatus)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusArrayOutput) ToResourceClaimSchedulingStatusArrayOutput() ResourceClaimSchedulingStatusArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusArrayOutput) ToResourceClaimSchedulingStatusArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusArrayOutput) Index(i pulumi.IntInput) ResourceClaimSchedulingStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimSchedulingStatus {
		return vs[0].([]ResourceClaimSchedulingStatus)[vs[1].(int)]
	}).(ResourceClaimSchedulingStatusOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatch struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []string `pulumi:"unsuitableNodes"`
}

// ResourceClaimSchedulingStatusPatchInput is an input type that accepts ResourceClaimSchedulingStatusPatchArgs and ResourceClaimSchedulingStatusPatchOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusPatchInput` via:
//
//	ResourceClaimSchedulingStatusPatchArgs{...}
type ResourceClaimSchedulingStatusPatchInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput
	ToResourceClaimSchedulingStatusPatchOutputWithContext(context.Context) ResourceClaimSchedulingStatusPatchOutput
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatchArgs struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes pulumi.StringArrayInput `pulumi:"unsuitableNodes"`
}

func (ResourceClaimSchedulingStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusPatchArgs) ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput {
	return i.ToResourceClaimSchedulingStatusPatchOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusPatchArgs) ToResourceClaimSchedulingStatusPatchOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusPatchOutput)
}

// ResourceClaimSchedulingStatusPatchArrayInput is an input type that accepts ResourceClaimSchedulingStatusPatchArray and ResourceClaimSchedulingStatusPatchArrayOutput values.
// You can construct a concrete instance of `ResourceClaimSchedulingStatusPatchArrayInput` via:
//
//	ResourceClaimSchedulingStatusPatchArray{ ResourceClaimSchedulingStatusPatchArgs{...} }
type ResourceClaimSchedulingStatusPatchArrayInput interface {
	pulumi.Input

	ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput
	ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(context.Context) ResourceClaimSchedulingStatusPatchArrayOutput
}

type ResourceClaimSchedulingStatusPatchArray []ResourceClaimSchedulingStatusPatchInput

func (ResourceClaimSchedulingStatusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (i ResourceClaimSchedulingStatusPatchArray) ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput {
	return i.ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(context.Background())
}

func (i ResourceClaimSchedulingStatusPatchArray) ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSchedulingStatusPatchArrayOutput)
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatusPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusPatchOutput) ToResourceClaimSchedulingStatusPatchOutput() ResourceClaimSchedulingStatusPatchOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchOutput) ToResourceClaimSchedulingStatusPatchOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchOutput {
	return o
}

// Name matches the pod.spec.resourceClaims[*].Name field.
func (o ResourceClaimSchedulingStatusPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatusPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
//
// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
func (o ResourceClaimSchedulingStatusPatchOutput) UnsuitableNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceClaimSchedulingStatusPatch) []string { return v.UnsuitableNodes }).(pulumi.StringArrayOutput)
}

type ResourceClaimSchedulingStatusPatchArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimSchedulingStatusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimSchedulingStatusPatch)(nil)).Elem()
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) ToResourceClaimSchedulingStatusPatchArrayOutput() ResourceClaimSchedulingStatusPatchArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) ToResourceClaimSchedulingStatusPatchArrayOutputWithContext(ctx context.Context) ResourceClaimSchedulingStatusPatchArrayOutput {
	return o
}

func (o ResourceClaimSchedulingStatusPatchArrayOutput) Index(i pulumi.IntInput) ResourceClaimSchedulingStatusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimSchedulingStatusPatch {
		return vs[0].([]ResourceClaimSchedulingStatusPatch)[vs[1].(int)]
	}).(ResourceClaimSchedulingStatusPatchOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpec struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef *ResourceClaimParametersReference `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName string `pulumi:"resourceClassName"`
}

// ResourceClaimSpecInput is an input type that accepts ResourceClaimSpecArgs and ResourceClaimSpecOutput values.
// You can construct a concrete instance of `ResourceClaimSpecInput` via:
//
//	ResourceClaimSpecArgs{...}
type ResourceClaimSpecInput interface {
	pulumi.Input

	ToResourceClaimSpecOutput() ResourceClaimSpecOutput
	ToResourceClaimSpecOutputWithContext(context.Context) ResourceClaimSpecOutput
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecArgs struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode pulumi.StringPtrInput `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef ResourceClaimParametersReferencePtrInput `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName pulumi.StringInput `pulumi:"resourceClassName"`
}

func (ResourceClaimSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpec)(nil)).Elem()
}

func (i ResourceClaimSpecArgs) ToResourceClaimSpecOutput() ResourceClaimSpecOutput {
	return i.ToResourceClaimSpecOutputWithContext(context.Background())
}

func (i ResourceClaimSpecArgs) ToResourceClaimSpecOutputWithContext(ctx context.Context) ResourceClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpec)(nil)).Elem()
}

func (o ResourceClaimSpecOutput) ToResourceClaimSpecOutput() ResourceClaimSpecOutput {
	return o
}

func (o ResourceClaimSpecOutput) ToResourceClaimSpecOutputWithContext(ctx context.Context) ResourceClaimSpecOutput {
	return o
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpec) *string { return v.AllocationMode }).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecOutput) ParametersRef() ResourceClaimParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClaimSpec) *ResourceClaimParametersReference { return v.ParametersRef }).(ResourceClaimParametersReferencePtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecOutput) ResourceClassName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClaimSpec) string { return v.ResourceClassName }).(pulumi.StringOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatch struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef *ResourceClaimParametersReferencePatch `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName *string `pulumi:"resourceClassName"`
}

// ResourceClaimSpecPatchInput is an input type that accepts ResourceClaimSpecPatchArgs and ResourceClaimSpecPatchOutput values.
// You can construct a concrete instance of `ResourceClaimSpecPatchInput` via:
//
//	ResourceClaimSpecPatchArgs{...}
type ResourceClaimSpecPatchInput interface {
	pulumi.Input

	ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput
	ToResourceClaimSpecPatchOutputWithContext(context.Context) ResourceClaimSpecPatchOutput
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatchArgs struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode pulumi.StringPtrInput `pulumi:"allocationMode"`
	// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	ParametersRef ResourceClaimParametersReferencePatchPtrInput `pulumi:"parametersRef"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName pulumi.StringPtrInput `pulumi:"resourceClassName"`
}

func (ResourceClaimSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpecPatch)(nil)).Elem()
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput {
	return i.ToResourceClaimSpecPatchOutputWithContext(context.Background())
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchOutputWithContext(ctx context.Context) ResourceClaimSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchOutput)
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return i.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimSpecPatchArgs) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchOutput).ToResourceClaimSpecPatchPtrOutputWithContext(ctx)
}

// ResourceClaimSpecPatchPtrInput is an input type that accepts ResourceClaimSpecPatchArgs, ResourceClaimSpecPatchPtr and ResourceClaimSpecPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimSpecPatchPtrInput` via:
//
//	        ResourceClaimSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimSpecPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput
	ToResourceClaimSpecPatchPtrOutputWithContext(context.Context) ResourceClaimSpecPatchPtrOutput
}

type resourceClaimSpecPatchPtrType ResourceClaimSpecPatchArgs

func ResourceClaimSpecPatchPtr(v *ResourceClaimSpecPatchArgs) ResourceClaimSpecPatchPtrInput {
	return (*resourceClaimSpecPatchPtrType)(v)
}

func (*resourceClaimSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimSpecPatch)(nil)).Elem()
}

func (i *resourceClaimSpecPatchPtrType) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return i.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimSpecPatchPtrType) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimSpecPatchPtrOutput)
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpecPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimSpecPatch)(nil)).Elem()
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchOutput() ResourceClaimSpecPatchOutput {
	return o
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchOutputWithContext(ctx context.Context) ResourceClaimSpecPatchOutput {
	return o
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return o.ToResourceClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimSpecPatchOutput) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimSpecPatch) *ResourceClaimSpecPatch {
		return &v
	}).(ResourceClaimSpecPatchPtrOutput)
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecPatchOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *string { return v.AllocationMode }).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecPatchOutput) ParametersRef() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *ResourceClaimParametersReferencePatch { return v.ParametersRef }).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecPatchOutput) ResourceClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimSpecPatch) *string { return v.ResourceClassName }).(pulumi.StringPtrOutput)
}

type ResourceClaimSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimSpecPatch)(nil)).Elem()
}

func (o ResourceClaimSpecPatchPtrOutput) ToResourceClaimSpecPatchPtrOutput() ResourceClaimSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimSpecPatchPtrOutput) ToResourceClaimSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimSpecPatchPtrOutput) Elem() ResourceClaimSpecPatchOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) ResourceClaimSpecPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimSpecPatch
		return ret
	}).(ResourceClaimSpecPatchOutput)
}

// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
func (o ResourceClaimSpecPatchPtrOutput) AllocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AllocationMode
	}).(pulumi.StringPtrOutput)
}

// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
//
// The object must be in the same namespace as the ResourceClaim.
func (o ResourceClaimSpecPatchPtrOutput) ParametersRef() ResourceClaimParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *ResourceClaimParametersReferencePatch {
		if v == nil {
			return nil
		}
		return v.ParametersRef
	}).(ResourceClaimParametersReferencePatchPtrOutput)
}

// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
func (o ResourceClaimSpecPatchPtrOutput) ResourceClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceClassName
	}).(pulumi.StringPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatus struct {
	// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
	Allocation *AllocationResult `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []ResourceClaimConsumerReference `pulumi:"reservedFor"`
}

// ResourceClaimStatusInput is an input type that accepts ResourceClaimStatusArgs and ResourceClaimStatusOutput values.
// You can construct a concrete instance of `ResourceClaimStatusInput` via:
//
//	ResourceClaimStatusArgs{...}
type ResourceClaimStatusInput interface {
	pulumi.Input

	ToResourceClaimStatusOutput() ResourceClaimStatusOutput
	ToResourceClaimStatusOutputWithContext(context.Context) ResourceClaimStatusOutput
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusArgs struct {
	// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
	Allocation AllocationResultPtrInput `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested pulumi.BoolPtrInput `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor ResourceClaimConsumerReferenceArrayInput `pulumi:"reservedFor"`
}

func (ResourceClaimStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatus)(nil)).Elem()
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusOutput() ResourceClaimStatusOutput {
	return i.ToResourceClaimStatusOutputWithContext(context.Background())
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusOutputWithContext(ctx context.Context) ResourceClaimStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusOutput)
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return i.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (i ResourceClaimStatusArgs) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusOutput).ToResourceClaimStatusPtrOutputWithContext(ctx)
}

// ResourceClaimStatusPtrInput is an input type that accepts ResourceClaimStatusArgs, ResourceClaimStatusPtr and ResourceClaimStatusPtrOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPtrInput` via:
//
//	        ResourceClaimStatusArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimStatusPtrInput interface {
	pulumi.Input

	ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput
	ToResourceClaimStatusPtrOutputWithContext(context.Context) ResourceClaimStatusPtrOutput
}

type resourceClaimStatusPtrType ResourceClaimStatusArgs

func ResourceClaimStatusPtr(v *ResourceClaimStatusArgs) ResourceClaimStatusPtrInput {
	return (*resourceClaimStatusPtrType)(v)
}

func (*resourceClaimStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatus)(nil)).Elem()
}

func (i *resourceClaimStatusPtrType) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return i.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (i *resourceClaimStatusPtrType) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatus)(nil)).Elem()
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusOutput() ResourceClaimStatusOutput {
	return o
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusOutputWithContext(ctx context.Context) ResourceClaimStatusOutput {
	return o
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return o.ToResourceClaimStatusPtrOutputWithContext(context.Background())
}

func (o ResourceClaimStatusOutput) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimStatus) *ResourceClaimStatus {
		return &v
	}).(ResourceClaimStatusPtrOutput)
}

// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
func (o ResourceClaimStatusOutput) Allocation() AllocationResultPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *AllocationResult { return v.Allocation }).(AllocationResultPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *bool { return v.DeallocationRequested }).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatus) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusOutput) ReservedFor() ResourceClaimConsumerReferenceArrayOutput {
	return o.ApplyT(func(v ResourceClaimStatus) []ResourceClaimConsumerReference { return v.ReservedFor }).(ResourceClaimConsumerReferenceArrayOutput)
}

type ResourceClaimStatusPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatus)(nil)).Elem()
}

func (o ResourceClaimStatusPtrOutput) ToResourceClaimStatusPtrOutput() ResourceClaimStatusPtrOutput {
	return o
}

func (o ResourceClaimStatusPtrOutput) ToResourceClaimStatusPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPtrOutput {
	return o
}

func (o ResourceClaimStatusPtrOutput) Elem() ResourceClaimStatusOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) ResourceClaimStatus {
		if v != nil {
			return *v
		}
		var ret ResourceClaimStatus
		return ret
	}).(ResourceClaimStatusOutput)
}

// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
func (o ResourceClaimStatusPtrOutput) Allocation() AllocationResultPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *AllocationResult {
		if v == nil {
			return nil
		}
		return v.Allocation
	}).(AllocationResultPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPtrOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *bool {
		if v == nil {
			return nil
		}
		return v.DeallocationRequested
	}).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPtrOutput) ReservedFor() ResourceClaimConsumerReferenceArrayOutput {
	return o.ApplyT(func(v *ResourceClaimStatus) []ResourceClaimConsumerReference {
		if v == nil {
			return nil
		}
		return v.ReservedFor
	}).(ResourceClaimConsumerReferenceArrayOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatch struct {
	// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
	Allocation *AllocationResultPatch `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []ResourceClaimConsumerReferencePatch `pulumi:"reservedFor"`
}

// ResourceClaimStatusPatchInput is an input type that accepts ResourceClaimStatusPatchArgs and ResourceClaimStatusPatchOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPatchInput` via:
//
//	ResourceClaimStatusPatchArgs{...}
type ResourceClaimStatusPatchInput interface {
	pulumi.Input

	ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput
	ToResourceClaimStatusPatchOutputWithContext(context.Context) ResourceClaimStatusPatchOutput
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatchArgs struct {
	// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
	Allocation AllocationResultPatchPtrInput `pulumi:"allocation"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested pulumi.BoolPtrInput `pulumi:"deallocationRequested"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor ResourceClaimConsumerReferencePatchArrayInput `pulumi:"reservedFor"`
}

func (ResourceClaimStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatusPatch)(nil)).Elem()
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput {
	return i.ToResourceClaimStatusPatchOutputWithContext(context.Background())
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchOutputWithContext(ctx context.Context) ResourceClaimStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchOutput)
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return i.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimStatusPatchArgs) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchOutput).ToResourceClaimStatusPatchPtrOutputWithContext(ctx)
}

// ResourceClaimStatusPatchPtrInput is an input type that accepts ResourceClaimStatusPatchArgs, ResourceClaimStatusPatchPtr and ResourceClaimStatusPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimStatusPatchPtrInput` via:
//
//	        ResourceClaimStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimStatusPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput
	ToResourceClaimStatusPatchPtrOutputWithContext(context.Context) ResourceClaimStatusPatchPtrOutput
}

type resourceClaimStatusPatchPtrType ResourceClaimStatusPatchArgs

func ResourceClaimStatusPatchPtr(v *ResourceClaimStatusPatchArgs) ResourceClaimStatusPatchPtrInput {
	return (*resourceClaimStatusPatchPtrType)(v)
}

func (*resourceClaimStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatusPatch)(nil)).Elem()
}

func (i *resourceClaimStatusPatchPtrType) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return i.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimStatusPatchPtrType) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimStatusPatchPtrOutput)
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type ResourceClaimStatusPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimStatusPatch)(nil)).Elem()
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchOutput() ResourceClaimStatusPatchOutput {
	return o
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchOutputWithContext(ctx context.Context) ResourceClaimStatusPatchOutput {
	return o
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return o.ToResourceClaimStatusPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimStatusPatchOutput) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimStatusPatch) *ResourceClaimStatusPatch {
		return &v
	}).(ResourceClaimStatusPatchPtrOutput)
}

// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
func (o ResourceClaimStatusPatchOutput) Allocation() AllocationResultPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *AllocationResultPatch { return v.Allocation }).(AllocationResultPatchPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPatchOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *bool { return v.DeallocationRequested }).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPatchOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPatchOutput) ReservedFor() ResourceClaimConsumerReferencePatchArrayOutput {
	return o.ApplyT(func(v ResourceClaimStatusPatch) []ResourceClaimConsumerReferencePatch { return v.ReservedFor }).(ResourceClaimConsumerReferencePatchArrayOutput)
}

type ResourceClaimStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimStatusPatch)(nil)).Elem()
}

func (o ResourceClaimStatusPatchPtrOutput) ToResourceClaimStatusPatchPtrOutput() ResourceClaimStatusPatchPtrOutput {
	return o
}

func (o ResourceClaimStatusPatchPtrOutput) ToResourceClaimStatusPatchPtrOutputWithContext(ctx context.Context) ResourceClaimStatusPatchPtrOutput {
	return o
}

func (o ResourceClaimStatusPatchPtrOutput) Elem() ResourceClaimStatusPatchOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) ResourceClaimStatusPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimStatusPatch
		return ret
	}).(ResourceClaimStatusPatchOutput)
}

// Allocation is set by the resource driver once a resource has been allocated successfully. If this is not specified, the resource is not yet allocated.
func (o ResourceClaimStatusPatchPtrOutput) Allocation() AllocationResultPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *AllocationResultPatch {
		if v == nil {
			return nil
		}
		return v.Allocation
	}).(AllocationResultPatchPtrOutput)
}

// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
//
// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
//
// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
func (o ResourceClaimStatusPatchPtrOutput) DeallocationRequested() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DeallocationRequested
	}).(pulumi.BoolPtrOutput)
}

// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
func (o ResourceClaimStatusPatchPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
//
// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
func (o ResourceClaimStatusPatchPtrOutput) ReservedFor() ResourceClaimConsumerReferencePatchArrayOutput {
	return o.ApplyT(func(v *ResourceClaimStatusPatch) []ResourceClaimConsumerReferencePatch {
		if v == nil {
			return nil
		}
		return v.ReservedFor
	}).(ResourceClaimConsumerReferencePatchArrayOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpec `pulumi:"spec"`
}

// ResourceClaimTemplateTypeInput is an input type that accepts ResourceClaimTemplateTypeArgs and ResourceClaimTemplateTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateTypeInput` via:
//
//	ResourceClaimTemplateTypeArgs{...}
type ResourceClaimTemplateTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput
	ToResourceClaimTemplateTypeOutputWithContext(context.Context) ResourceClaimTemplateTypeOutput
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpecInput `pulumi:"spec"`
}

func (ResourceClaimTemplateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateType)(nil)).Elem()
}

func (i ResourceClaimTemplateTypeArgs) ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput {
	return i.ToResourceClaimTemplateTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateTypeArgs) ToResourceClaimTemplateTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateTypeOutput)
}

// ResourceClaimTemplateTypeArrayInput is an input type that accepts ResourceClaimTemplateTypeArray and ResourceClaimTemplateTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateTypeArrayInput` via:
//
//	ResourceClaimTemplateTypeArray{ ResourceClaimTemplateTypeArgs{...} }
type ResourceClaimTemplateTypeArrayInput interface {
	pulumi.Input

	ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput
	ToResourceClaimTemplateTypeArrayOutputWithContext(context.Context) ResourceClaimTemplateTypeArrayOutput
}

type ResourceClaimTemplateTypeArray []ResourceClaimTemplateTypeInput

func (ResourceClaimTemplateTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimTemplateType)(nil)).Elem()
}

func (i ResourceClaimTemplateTypeArray) ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput {
	return i.ToResourceClaimTemplateTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateTypeArray) ToResourceClaimTemplateTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateTypeArrayOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplateTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateType)(nil)).Elem()
}

func (o ResourceClaimTemplateTypeOutput) ToResourceClaimTemplateTypeOutput() ResourceClaimTemplateTypeOutput {
	return o
}

func (o ResourceClaimTemplateTypeOutput) ToResourceClaimTemplateTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTemplateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Describes the ResourceClaim that is to be generated.
//
// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
func (o ResourceClaimTemplateTypeOutput) Spec() ResourceClaimTemplateSpecOutput {
	return o.ApplyT(func(v ResourceClaimTemplateType) ResourceClaimTemplateSpec { return v.Spec }).(ResourceClaimTemplateSpecOutput)
}

type ResourceClaimTemplateTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClaimTemplateType)(nil)).Elem()
}

func (o ResourceClaimTemplateTypeArrayOutput) ToResourceClaimTemplateTypeArrayOutput() ResourceClaimTemplateTypeArrayOutput {
	return o
}

func (o ResourceClaimTemplateTypeArrayOutput) ToResourceClaimTemplateTypeArrayOutputWithContext(ctx context.Context) ResourceClaimTemplateTypeArrayOutput {
	return o
}

func (o ResourceClaimTemplateTypeArrayOutput) Index(i pulumi.IntInput) ResourceClaimTemplateTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClaimTemplateType {
		return vs[0].([]ResourceClaimTemplateType)[vs[1].(int)]
	}).(ResourceClaimTemplateTypeOutput)
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource claim templates.
	Items []ResourceClaimTemplateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClaimTemplateListTypeInput is an input type that accepts ResourceClaimTemplateListTypeArgs and ResourceClaimTemplateListTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateListTypeInput` via:
//
//	ResourceClaimTemplateListTypeArgs{...}
type ResourceClaimTemplateListTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput
	ToResourceClaimTemplateListTypeOutputWithContext(context.Context) ResourceClaimTemplateListTypeOutput
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource claim templates.
	Items ResourceClaimTemplateTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClaimTemplateListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateListType)(nil)).Elem()
}

func (i ResourceClaimTemplateListTypeArgs) ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput {
	return i.ToResourceClaimTemplateListTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateListTypeArgs) ToResourceClaimTemplateListTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateListTypeOutput)
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateListType)(nil)).Elem()
}

func (o ResourceClaimTemplateListTypeOutput) ToResourceClaimTemplateListTypeOutput() ResourceClaimTemplateListTypeOutput {
	return o
}

func (o ResourceClaimTemplateListTypeOutput) ToResourceClaimTemplateListTypeOutputWithContext(ctx context.Context) ResourceClaimTemplateListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplateListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource claim templates.
func (o ResourceClaimTemplateListTypeOutput) Items() ResourceClaimTemplateTypeArrayOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) []ResourceClaimTemplateType { return v.Items }).(ResourceClaimTemplateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplateListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClaimTemplateListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec *ResourceClaimTemplateSpecPatch `pulumi:"spec"`
}

// ResourceClaimTemplatePatchTypeInput is an input type that accepts ResourceClaimTemplatePatchTypeArgs and ResourceClaimTemplatePatchTypeOutput values.
// You can construct a concrete instance of `ResourceClaimTemplatePatchTypeInput` via:
//
//	ResourceClaimTemplatePatchTypeArgs{...}
type ResourceClaimTemplatePatchTypeInput interface {
	pulumi.Input

	ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput
	ToResourceClaimTemplatePatchTypeOutputWithContext(context.Context) ResourceClaimTemplatePatchTypeOutput
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
	Spec ResourceClaimTemplateSpecPatchPtrInput `pulumi:"spec"`
}

func (ResourceClaimTemplatePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplatePatchType)(nil)).Elem()
}

func (i ResourceClaimTemplatePatchTypeArgs) ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput {
	return i.ToResourceClaimTemplatePatchTypeOutputWithContext(context.Background())
}

func (i ResourceClaimTemplatePatchTypeArgs) ToResourceClaimTemplatePatchTypeOutputWithContext(ctx context.Context) ResourceClaimTemplatePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplatePatchTypeOutput)
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplatePatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplatePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplatePatchType)(nil)).Elem()
}

func (o ResourceClaimTemplatePatchTypeOutput) ToResourceClaimTemplatePatchTypeOutput() ResourceClaimTemplatePatchTypeOutput {
	return o
}

func (o ResourceClaimTemplatePatchTypeOutput) ToResourceClaimTemplatePatchTypeOutputWithContext(ctx context.Context) ResourceClaimTemplatePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClaimTemplatePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClaimTemplatePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClaimTemplatePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Describes the ResourceClaim that is to be generated.
//
// This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
func (o ResourceClaimTemplatePatchTypeOutput) Spec() ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplatePatchType) *ResourceClaimTemplateSpecPatch { return v.Spec }).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpec struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpec `pulumi:"spec"`
}

// ResourceClaimTemplateSpecInput is an input type that accepts ResourceClaimTemplateSpecArgs and ResourceClaimTemplateSpecOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecInput` via:
//
//	ResourceClaimTemplateSpecArgs{...}
type ResourceClaimTemplateSpecInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput
	ToResourceClaimTemplateSpecOutputWithContext(context.Context) ResourceClaimTemplateSpecOutput
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecArgs struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpecInput `pulumi:"spec"`
}

func (ResourceClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpec)(nil)).Elem()
}

func (i ResourceClaimTemplateSpecArgs) ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput {
	return i.ToResourceClaimTemplateSpecOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecArgs) ToResourceClaimTemplateSpecOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpec)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecOutput) ToResourceClaimTemplateSpecOutput() ResourceClaimTemplateSpecOutput {
	return o
}

func (o ResourceClaimTemplateSpecOutput) ToResourceClaimTemplateSpecOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecOutput {
	return o
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpec) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecOutput) Spec() ResourceClaimSpecOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpec) ResourceClaimSpec { return v.Spec }).(ResourceClaimSpecOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatch struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec *ResourceClaimSpecPatch `pulumi:"spec"`
}

// ResourceClaimTemplateSpecPatchInput is an input type that accepts ResourceClaimTemplateSpecPatchArgs and ResourceClaimTemplateSpecPatchOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecPatchInput` via:
//
//	ResourceClaimTemplateSpecPatchArgs{...}
type ResourceClaimTemplateSpecPatchInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput
	ToResourceClaimTemplateSpecPatchOutputWithContext(context.Context) ResourceClaimTemplateSpecPatchOutput
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatchArgs struct {
	// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
	Spec ResourceClaimSpecPatchPtrInput `pulumi:"spec"`
}

func (ResourceClaimTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput {
	return i.ToResourceClaimTemplateSpecPatchOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchOutput)
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return i.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i ResourceClaimTemplateSpecPatchArgs) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchOutput).ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx)
}

// ResourceClaimTemplateSpecPatchPtrInput is an input type that accepts ResourceClaimTemplateSpecPatchArgs, ResourceClaimTemplateSpecPatchPtr and ResourceClaimTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `ResourceClaimTemplateSpecPatchPtrInput` via:
//
//	        ResourceClaimTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClaimTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput
	ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Context) ResourceClaimTemplateSpecPatchPtrOutput
}

type resourceClaimTemplateSpecPatchPtrType ResourceClaimTemplateSpecPatchArgs

func ResourceClaimTemplateSpecPatchPtr(v *ResourceClaimTemplateSpecPatchArgs) ResourceClaimTemplateSpecPatchPtrInput {
	return (*resourceClaimTemplateSpecPatchPtrType)(v)
}

func (*resourceClaimTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (i *resourceClaimTemplateSpecPatchPtrType) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return i.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *resourceClaimTemplateSpecPatchPtrType) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchOutput() ResourceClaimTemplateSpecPatchOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ToResourceClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o ResourceClaimTemplateSpecPatchOutput) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClaimTemplateSpecPatch) *ResourceClaimTemplateSpecPatch {
		return &v
	}).(ResourceClaimTemplateSpecPatchPtrOutput)
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpecPatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecPatchOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v ResourceClaimTemplateSpecPatch) *ResourceClaimSpecPatch { return v.Spec }).(ResourceClaimSpecPatchPtrOutput)
}

type ResourceClaimTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClaimTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) ToResourceClaimTemplateSpecPatchPtrOutput() ResourceClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) ToResourceClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ResourceClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ResourceClaimTemplateSpecPatchPtrOutput) Elem() ResourceClaimTemplateSpecPatchOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) ResourceClaimTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret ResourceClaimTemplateSpecPatch
		return ret
	}).(ResourceClaimTemplateSpecPatchOutput)
}

// ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o ResourceClaimTemplateSpecPatchPtrOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) *metav1.ObjectMetaPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
func (o ResourceClaimTemplateSpecPatchPtrOutput) Spec() ResourceClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v *ResourceClaimTemplateSpecPatch) *ResourceClaimSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ResourceClaimSpecPatchPtrOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef *ResourceClassParametersReference `pulumi:"parametersRef"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes *corev1.NodeSelector `pulumi:"suitableNodes"`
}

// ResourceClassTypeInput is an input type that accepts ResourceClassTypeArgs and ResourceClassTypeOutput values.
// You can construct a concrete instance of `ResourceClassTypeInput` via:
//
//	ResourceClassTypeArgs{...}
type ResourceClassTypeInput interface {
	pulumi.Input

	ToResourceClassTypeOutput() ResourceClassTypeOutput
	ToResourceClassTypeOutputWithContext(context.Context) ResourceClassTypeOutput
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName pulumi.StringInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef ResourceClassParametersReferencePtrInput `pulumi:"parametersRef"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes corev1.NodeSelectorPtrInput `pulumi:"suitableNodes"`
}

func (ResourceClassTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassType)(nil)).Elem()
}

func (i ResourceClassTypeArgs) ToResourceClassTypeOutput() ResourceClassTypeOutput {
	return i.ToResourceClassTypeOutputWithContext(context.Background())
}

func (i ResourceClassTypeArgs) ToResourceClassTypeOutputWithContext(ctx context.Context) ResourceClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassTypeOutput)
}

// ResourceClassTypeArrayInput is an input type that accepts ResourceClassTypeArray and ResourceClassTypeArrayOutput values.
// You can construct a concrete instance of `ResourceClassTypeArrayInput` via:
//
//	ResourceClassTypeArray{ ResourceClassTypeArgs{...} }
type ResourceClassTypeArrayInput interface {
	pulumi.Input

	ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput
	ToResourceClassTypeArrayOutputWithContext(context.Context) ResourceClassTypeArrayOutput
}

type ResourceClassTypeArray []ResourceClassTypeInput

func (ResourceClassTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassType)(nil)).Elem()
}

func (i ResourceClassTypeArray) ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput {
	return i.ToResourceClassTypeArrayOutputWithContext(context.Background())
}

func (i ResourceClassTypeArray) ToResourceClassTypeArrayOutputWithContext(ctx context.Context) ResourceClassTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassTypeArrayOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassType)(nil)).Elem()
}

func (o ResourceClassTypeOutput) ToResourceClassTypeOutput() ResourceClassTypeOutput {
	return o
}

func (o ResourceClassTypeOutput) ToResourceClassTypeOutputWithContext(ctx context.Context) ResourceClassTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
//
// Resource drivers have a unique name in forward domain order (acme.example.com).
func (o ResourceClassTypeOutput) DriverName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassType) string { return v.DriverName }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
func (o ResourceClassTypeOutput) ParametersRef() ResourceClassParametersReferencePtrOutput {
	return o.ApplyT(func(v ResourceClassType) *ResourceClassParametersReference { return v.ParametersRef }).(ResourceClassParametersReferencePtrOutput)
}

// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
//
// Setting this field is optional. If null, all nodes are candidates.
func (o ResourceClassTypeOutput) SuitableNodes() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v ResourceClassType) *corev1.NodeSelector { return v.SuitableNodes }).(corev1.NodeSelectorPtrOutput)
}

type ResourceClassTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceClassTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceClassType)(nil)).Elem()
}

func (o ResourceClassTypeArrayOutput) ToResourceClassTypeArrayOutput() ResourceClassTypeArrayOutput {
	return o
}

func (o ResourceClassTypeArrayOutput) ToResourceClassTypeArrayOutputWithContext(ctx context.Context) ResourceClassTypeArrayOutput {
	return o
}

func (o ResourceClassTypeArrayOutput) Index(i pulumi.IntInput) ResourceClassTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceClassType {
		return vs[0].([]ResourceClassType)[vs[1].(int)]
	}).(ResourceClassTypeOutput)
}

// ResourceClassList is a collection of classes.
type ResourceClassListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items []ResourceClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ResourceClassListTypeInput is an input type that accepts ResourceClassListTypeArgs and ResourceClassListTypeOutput values.
// You can construct a concrete instance of `ResourceClassListTypeInput` via:
//
//	ResourceClassListTypeArgs{...}
type ResourceClassListTypeInput interface {
	pulumi.Input

	ToResourceClassListTypeOutput() ResourceClassListTypeOutput
	ToResourceClassListTypeOutputWithContext(context.Context) ResourceClassListTypeOutput
}

// ResourceClassList is a collection of classes.
type ResourceClassListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of resource classes.
	Items ResourceClassTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ResourceClassListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassListType)(nil)).Elem()
}

func (i ResourceClassListTypeArgs) ToResourceClassListTypeOutput() ResourceClassListTypeOutput {
	return i.ToResourceClassListTypeOutputWithContext(context.Background())
}

func (i ResourceClassListTypeArgs) ToResourceClassListTypeOutputWithContext(ctx context.Context) ResourceClassListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassListTypeOutput)
}

// ResourceClassList is a collection of classes.
type ResourceClassListTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassListType)(nil)).Elem()
}

func (o ResourceClassListTypeOutput) ToResourceClassListTypeOutput() ResourceClassListTypeOutput {
	return o
}

func (o ResourceClassListTypeOutput) ToResourceClassListTypeOutputWithContext(ctx context.Context) ResourceClassListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of resource classes.
func (o ResourceClassListTypeOutput) Items() ResourceClassTypeArrayOutput {
	return o.ApplyT(func(v ResourceClassListType) []ResourceClassType { return v.Items }).(ResourceClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata
func (o ResourceClassListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ResourceClassListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `pulumi:"namespace"`
}

// ResourceClassParametersReferenceInput is an input type that accepts ResourceClassParametersReferenceArgs and ResourceClassParametersReferenceOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferenceInput` via:
//
//	ResourceClassParametersReferenceArgs{...}
type ResourceClassParametersReferenceInput interface {
	pulumi.Input

	ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput
	ToResourceClassParametersReferenceOutputWithContext(context.Context) ResourceClassParametersReferenceOutput
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ResourceClassParametersReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReference)(nil)).Elem()
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput {
	return i.ToResourceClassParametersReferenceOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferenceOutputWithContext(ctx context.Context) ResourceClassParametersReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferenceOutput)
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return i.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferenceArgs) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferenceOutput).ToResourceClassParametersReferencePtrOutputWithContext(ctx)
}

// ResourceClassParametersReferencePtrInput is an input type that accepts ResourceClassParametersReferenceArgs, ResourceClassParametersReferencePtr and ResourceClassParametersReferencePtrOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePtrInput` via:
//
//	        ResourceClassParametersReferenceArgs{...}
//
//	or:
//
//	        nil
type ResourceClassParametersReferencePtrInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput
	ToResourceClassParametersReferencePtrOutputWithContext(context.Context) ResourceClassParametersReferencePtrOutput
}

type resourceClassParametersReferencePtrType ResourceClassParametersReferenceArgs

func ResourceClassParametersReferencePtr(v *ResourceClassParametersReferenceArgs) ResourceClassParametersReferencePtrInput {
	return (*resourceClassParametersReferencePtrType)(v)
}

func (*resourceClassParametersReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReference)(nil)).Elem()
}

func (i *resourceClassParametersReferencePtrType) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return i.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i *resourceClassParametersReferencePtrType) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferenceOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReference)(nil)).Elem()
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferenceOutput() ResourceClassParametersReferenceOutput {
	return o
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferenceOutputWithContext(ctx context.Context) ResourceClassParametersReferenceOutput {
	return o
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return o.ToResourceClassParametersReferencePtrOutputWithContext(context.Background())
}

func (o ResourceClassParametersReferenceOutput) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClassParametersReference) *ResourceClassParametersReference {
		return &v
	}).(ResourceClassParametersReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ResourceClassParametersReferencePtrOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReference)(nil)).Elem()
}

func (o ResourceClassParametersReferencePtrOutput) ToResourceClassParametersReferencePtrOutput() ResourceClassParametersReferencePtrOutput {
	return o
}

func (o ResourceClassParametersReferencePtrOutput) ToResourceClassParametersReferencePtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePtrOutput {
	return o
}

func (o ResourceClassParametersReferencePtrOutput) Elem() ResourceClassParametersReferenceOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) ResourceClassParametersReference {
		if v != nil {
			return *v
		}
		var ret ResourceClassParametersReference
		return ret
	}).(ResourceClassParametersReferenceOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatch struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name *string `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `pulumi:"namespace"`
}

// ResourceClassParametersReferencePatchInput is an input type that accepts ResourceClassParametersReferencePatchArgs and ResourceClassParametersReferencePatchOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePatchInput` via:
//
//	ResourceClassParametersReferencePatchArgs{...}
type ResourceClassParametersReferencePatchInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput
	ToResourceClassParametersReferencePatchOutputWithContext(context.Context) ResourceClassParametersReferencePatchOutput
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatchArgs struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ResourceClassParametersReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput {
	return i.ToResourceClassParametersReferencePatchOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchOutput)
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return i.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i ResourceClassParametersReferencePatchArgs) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchOutput).ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx)
}

// ResourceClassParametersReferencePatchPtrInput is an input type that accepts ResourceClassParametersReferencePatchArgs, ResourceClassParametersReferencePatchPtr and ResourceClassParametersReferencePatchPtrOutput values.
// You can construct a concrete instance of `ResourceClassParametersReferencePatchPtrInput` via:
//
//	        ResourceClassParametersReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ResourceClassParametersReferencePatchPtrInput interface {
	pulumi.Input

	ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput
	ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Context) ResourceClassParametersReferencePatchPtrOutput
}

type resourceClassParametersReferencePatchPtrType ResourceClassParametersReferencePatchArgs

func ResourceClassParametersReferencePatchPtr(v *ResourceClassParametersReferencePatchArgs) ResourceClassParametersReferencePatchPtrInput {
	return (*resourceClassParametersReferencePatchPtrType)(v)
}

func (*resourceClassParametersReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (i *resourceClassParametersReferencePatchPtrType) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return i.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (i *resourceClassParametersReferencePatchPtrType) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassParametersReferencePatchPtrOutput)
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type ResourceClassParametersReferencePatchOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchOutput() ResourceClassParametersReferencePatchOutput {
	return o
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchOutput {
	return o
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return o.ToResourceClassParametersReferencePatchPtrOutputWithContext(context.Background())
}

func (o ResourceClassParametersReferencePatchOutput) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClassParametersReferencePatch) *ResourceClassParametersReferencePatch {
		return &v
	}).(ResourceClassParametersReferencePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassParametersReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ResourceClassParametersReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ResourceClassParametersReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassParametersReferencePatch)(nil)).Elem()
}

func (o ResourceClassParametersReferencePatchPtrOutput) ToResourceClassParametersReferencePatchPtrOutput() ResourceClassParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClassParametersReferencePatchPtrOutput) ToResourceClassParametersReferencePatchPtrOutputWithContext(ctx context.Context) ResourceClassParametersReferencePatchPtrOutput {
	return o
}

func (o ResourceClassParametersReferencePatchPtrOutput) Elem() ResourceClassParametersReferencePatchOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) ResourceClassParametersReferencePatch {
		if v != nil {
			return *v
		}
		var ret ResourceClassParametersReferencePatch
		return ret
	}).(ResourceClassParametersReferencePatchOutput)
}

// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
func (o ResourceClassParametersReferencePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
func (o ResourceClassParametersReferencePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o ResourceClassParametersReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
func (o ResourceClassParametersReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClassParametersReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName *string `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef *ResourceClassParametersReferencePatch `pulumi:"parametersRef"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes *corev1.NodeSelectorPatch `pulumi:"suitableNodes"`
}

// ResourceClassPatchTypeInput is an input type that accepts ResourceClassPatchTypeArgs and ResourceClassPatchTypeOutput values.
// You can construct a concrete instance of `ResourceClassPatchTypeInput` via:
//
//	ResourceClassPatchTypeArgs{...}
type ResourceClassPatchTypeInput interface {
	pulumi.Input

	ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput
	ToResourceClassPatchTypeOutputWithContext(context.Context) ResourceClassPatchTypeOutput
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName pulumi.StringPtrInput `pulumi:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
	ParametersRef ResourceClassParametersReferencePatchPtrInput `pulumi:"parametersRef"`
	// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	SuitableNodes corev1.NodeSelectorPatchPtrInput `pulumi:"suitableNodes"`
}

func (ResourceClassPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassPatchType)(nil)).Elem()
}

func (i ResourceClassPatchTypeArgs) ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput {
	return i.ToResourceClassPatchTypeOutputWithContext(context.Background())
}

func (i ResourceClassPatchTypeArgs) ToResourceClassPatchTypeOutputWithContext(ctx context.Context) ResourceClassPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassPatchTypeOutput)
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type ResourceClassPatchTypeOutput struct{ *pulumi.OutputState }

func (ResourceClassPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClassPatchType)(nil)).Elem()
}

func (o ResourceClassPatchTypeOutput) ToResourceClassPatchTypeOutput() ResourceClassPatchTypeOutput {
	return o
}

func (o ResourceClassPatchTypeOutput) ToResourceClassPatchTypeOutputWithContext(ctx context.Context) ResourceClassPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ResourceClassPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
//
// Resource drivers have a unique name in forward domain order (acme.example.com).
func (o ResourceClassPatchTypeOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceClassPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata
func (o ResourceClassPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
func (o ResourceClassPatchTypeOutput) ParametersRef() ResourceClassParametersReferencePatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *ResourceClassParametersReferencePatch { return v.ParametersRef }).(ResourceClassParametersReferencePatchPtrOutput)
}

// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
//
// Setting this field is optional. If null, all nodes are candidates.
func (o ResourceClassPatchTypeOutput) SuitableNodes() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v ResourceClassPatchType) *corev1.NodeSelectorPatch { return v.SuitableNodes }).(corev1.NodeSelectorPatchPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultInput)(nil)).Elem(), AllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPtrInput)(nil)).Elem(), AllocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPatchInput)(nil)).Elem(), AllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationResultPatchPtrInput)(nil)).Elem(), AllocationResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingTypeInput)(nil)).Elem(), PodSchedulingTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingTypeArrayInput)(nil)).Elem(), PodSchedulingTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingListTypeInput)(nil)).Elem(), PodSchedulingListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingPatchTypeInput)(nil)).Elem(), PodSchedulingPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingSpecInput)(nil)).Elem(), PodSchedulingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingSpecPatchInput)(nil)).Elem(), PodSchedulingSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingSpecPatchPtrInput)(nil)).Elem(), PodSchedulingSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingStatusInput)(nil)).Elem(), PodSchedulingStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingStatusPtrInput)(nil)).Elem(), PodSchedulingStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingStatusPatchInput)(nil)).Elem(), PodSchedulingStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodSchedulingStatusPatchPtrInput)(nil)).Elem(), PodSchedulingStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTypeInput)(nil)).Elem(), ResourceClaimTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTypeArrayInput)(nil)).Elem(), ResourceClaimTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferenceInput)(nil)).Elem(), ResourceClaimConsumerReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferenceArrayInput)(nil)).Elem(), ResourceClaimConsumerReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferencePatchInput)(nil)).Elem(), ResourceClaimConsumerReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimConsumerReferencePatchArrayInput)(nil)).Elem(), ResourceClaimConsumerReferencePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimListTypeInput)(nil)).Elem(), ResourceClaimListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferenceInput)(nil)).Elem(), ResourceClaimParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePtrInput)(nil)).Elem(), ResourceClaimParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePatchInput)(nil)).Elem(), ResourceClaimParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimParametersReferencePatchPtrInput)(nil)).Elem(), ResourceClaimParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimPatchTypeInput)(nil)).Elem(), ResourceClaimPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusInput)(nil)).Elem(), ResourceClaimSchedulingStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusArrayInput)(nil)).Elem(), ResourceClaimSchedulingStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusPatchInput)(nil)).Elem(), ResourceClaimSchedulingStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSchedulingStatusPatchArrayInput)(nil)).Elem(), ResourceClaimSchedulingStatusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecInput)(nil)).Elem(), ResourceClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecPatchInput)(nil)).Elem(), ResourceClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimSpecPatchPtrInput)(nil)).Elem(), ResourceClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusInput)(nil)).Elem(), ResourceClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPtrInput)(nil)).Elem(), ResourceClaimStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPatchInput)(nil)).Elem(), ResourceClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimStatusPatchPtrInput)(nil)).Elem(), ResourceClaimStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateTypeInput)(nil)).Elem(), ResourceClaimTemplateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateTypeArrayInput)(nil)).Elem(), ResourceClaimTemplateTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateListTypeInput)(nil)).Elem(), ResourceClaimTemplateListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplatePatchTypeInput)(nil)).Elem(), ResourceClaimTemplatePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecInput)(nil)).Elem(), ResourceClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecPatchInput)(nil)).Elem(), ResourceClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClaimTemplateSpecPatchPtrInput)(nil)).Elem(), ResourceClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassTypeInput)(nil)).Elem(), ResourceClassTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassTypeArrayInput)(nil)).Elem(), ResourceClassTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassListTypeInput)(nil)).Elem(), ResourceClassListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferenceInput)(nil)).Elem(), ResourceClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePtrInput)(nil)).Elem(), ResourceClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePatchInput)(nil)).Elem(), ResourceClassParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassParametersReferencePatchPtrInput)(nil)).Elem(), ResourceClassParametersReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassPatchTypeInput)(nil)).Elem(), ResourceClassPatchTypeArgs{})
	pulumi.RegisterOutputType(AllocationResultOutput{})
	pulumi.RegisterOutputType(AllocationResultPtrOutput{})
	pulumi.RegisterOutputType(AllocationResultPatchOutput{})
	pulumi.RegisterOutputType(AllocationResultPatchPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingTypeArrayOutput{})
	pulumi.RegisterOutputType(PodSchedulingListTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingPatchTypeOutput{})
	pulumi.RegisterOutputType(PodSchedulingSpecOutput{})
	pulumi.RegisterOutputType(PodSchedulingSpecPatchOutput{})
	pulumi.RegisterOutputType(PodSchedulingSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingStatusOutput{})
	pulumi.RegisterOutputType(PodSchedulingStatusPtrOutput{})
	pulumi.RegisterOutputType(PodSchedulingStatusPatchOutput{})
	pulumi.RegisterOutputType(PodSchedulingStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferenceArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimConsumerReferencePatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimParametersReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimPatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimSchedulingStatusPatchArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplatePatchTypeOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(ResourceClaimTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClassTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceClassListTypeOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferenceOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePatchOutput{})
	pulumi.RegisterOutputType(ResourceClassParametersReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ResourceClassPatchTypeOutput{})
}
