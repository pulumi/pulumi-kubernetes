// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPath struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend IngressBackend `pulumi:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
	Path *string `pulumi:"path"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	//   Implementations are required to support all path types.
	PathType string `pulumi:"pathType"`
}

// HTTPIngressPathInput is an input type that accepts HTTPIngressPathArgs and HTTPIngressPathOutput values.
// You can construct a concrete instance of `HTTPIngressPathInput` via:
//
//          HTTPIngressPathArgs{...}
type HTTPIngressPathInput interface {
	pulumi.Input

	ToHTTPIngressPathOutput() HTTPIngressPathOutput
	ToHTTPIngressPathOutputWithContext(context.Context) HTTPIngressPathOutput
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPathArgs struct {
	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	Backend IngressBackendInput `pulumi:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
	Path pulumi.StringPtrInput `pulumi:"path"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	//   Implementations are required to support all path types.
	PathType pulumi.StringInput `pulumi:"pathType"`
}

func (HTTPIngressPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressPath)(nil)).Elem()
}

func (i HTTPIngressPathArgs) ToHTTPIngressPathOutput() HTTPIngressPathOutput {
	return i.ToHTTPIngressPathOutputWithContext(context.Background())
}

func (i HTTPIngressPathArgs) ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressPathOutput)
}

// HTTPIngressPathArrayInput is an input type that accepts HTTPIngressPathArray and HTTPIngressPathArrayOutput values.
// You can construct a concrete instance of `HTTPIngressPathArrayInput` via:
//
//          HTTPIngressPathArray{ HTTPIngressPathArgs{...} }
type HTTPIngressPathArrayInput interface {
	pulumi.Input

	ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput
	ToHTTPIngressPathArrayOutputWithContext(context.Context) HTTPIngressPathArrayOutput
}

type HTTPIngressPathArray []HTTPIngressPathInput

func (HTTPIngressPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPIngressPath)(nil)).Elem()
}

func (i HTTPIngressPathArray) ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput {
	return i.ToHTTPIngressPathArrayOutputWithContext(context.Background())
}

func (i HTTPIngressPathArray) ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressPathArrayOutput)
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type HTTPIngressPathOutput struct{ *pulumi.OutputState }

func (HTTPIngressPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressPath)(nil)).Elem()
}

func (o HTTPIngressPathOutput) ToHTTPIngressPathOutput() HTTPIngressPathOutput {
	return o
}

func (o HTTPIngressPathOutput) ToHTTPIngressPathOutputWithContext(ctx context.Context) HTTPIngressPathOutput {
	return o
}

// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
func (o HTTPIngressPathOutput) Backend() IngressBackendOutput {
	return o.ApplyT(func(v HTTPIngressPath) IngressBackend { return v.Backend }).(IngressBackendOutput)
}

// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
func (o HTTPIngressPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPIngressPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
//   done on a path element by element basis. A path element refers is the
//   list of labels in the path split by the '/' separator. A request is a
//   match for path p if every p is an element-wise prefix of p of the
//   request path. Note that if the last element of the path is a substring
//   of the last element in request path, it is not a match (e.g. /foo/bar
//   matches /foo/bar/baz, but does not match /foo/barbaz).
// * ImplementationSpecific: Interpretation of the Path matching is up to
//   the IngressClass. Implementations can treat this as a separate PathType
//   or treat it identically to Prefix or Exact path types.
//   Implementations are required to support all path types.
func (o HTTPIngressPathOutput) PathType() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPIngressPath) string { return v.PathType }).(pulumi.StringOutput)
}

type HTTPIngressPathArrayOutput struct{ *pulumi.OutputState }

func (HTTPIngressPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPIngressPath)(nil)).Elem()
}

func (o HTTPIngressPathArrayOutput) ToHTTPIngressPathArrayOutput() HTTPIngressPathArrayOutput {
	return o
}

func (o HTTPIngressPathArrayOutput) ToHTTPIngressPathArrayOutputWithContext(ctx context.Context) HTTPIngressPathArrayOutput {
	return o
}

func (o HTTPIngressPathArrayOutput) Index(i pulumi.IntInput) HTTPIngressPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPIngressPath {
		return vs[0].([]HTTPIngressPath)[vs[1].(int)]
	}).(HTTPIngressPathOutput)
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValue struct {
	// A collection of paths that map requests to backends.
	Paths []HTTPIngressPath `pulumi:"paths"`
}

// HTTPIngressRuleValueInput is an input type that accepts HTTPIngressRuleValueArgs and HTTPIngressRuleValueOutput values.
// You can construct a concrete instance of `HTTPIngressRuleValueInput` via:
//
//          HTTPIngressRuleValueArgs{...}
type HTTPIngressRuleValueInput interface {
	pulumi.Input

	ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput
	ToHTTPIngressRuleValueOutputWithContext(context.Context) HTTPIngressRuleValueOutput
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValueArgs struct {
	// A collection of paths that map requests to backends.
	Paths HTTPIngressPathArrayInput `pulumi:"paths"`
}

func (HTTPIngressRuleValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressRuleValue)(nil)).Elem()
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput {
	return i.ToHTTPIngressRuleValueOutputWithContext(context.Background())
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValueOutputWithContext(ctx context.Context) HTTPIngressRuleValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValueOutput)
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return i.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (i HTTPIngressRuleValueArgs) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValueOutput).ToHTTPIngressRuleValuePtrOutputWithContext(ctx)
}

// HTTPIngressRuleValuePtrInput is an input type that accepts HTTPIngressRuleValueArgs, HTTPIngressRuleValuePtr and HTTPIngressRuleValuePtrOutput values.
// You can construct a concrete instance of `HTTPIngressRuleValuePtrInput` via:
//
//          HTTPIngressRuleValueArgs{...}
//
//  or:
//
//          nil
type HTTPIngressRuleValuePtrInput interface {
	pulumi.Input

	ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput
	ToHTTPIngressRuleValuePtrOutputWithContext(context.Context) HTTPIngressRuleValuePtrOutput
}

type httpingressRuleValuePtrType HTTPIngressRuleValueArgs

func HTTPIngressRuleValuePtr(v *HTTPIngressRuleValueArgs) HTTPIngressRuleValuePtrInput {
	return (*httpingressRuleValuePtrType)(v)
}

func (*httpingressRuleValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPIngressRuleValue)(nil)).Elem()
}

func (i *httpingressRuleValuePtrType) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return i.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (i *httpingressRuleValuePtrType) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPIngressRuleValuePtrOutput)
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type HTTPIngressRuleValueOutput struct{ *pulumi.OutputState }

func (HTTPIngressRuleValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPIngressRuleValue)(nil)).Elem()
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValueOutput() HTTPIngressRuleValueOutput {
	return o
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValueOutputWithContext(ctx context.Context) HTTPIngressRuleValueOutput {
	return o
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return o.ToHTTPIngressRuleValuePtrOutputWithContext(context.Background())
}

func (o HTTPIngressRuleValueOutput) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HTTPIngressRuleValue) *HTTPIngressRuleValue {
		return &v
	}).(HTTPIngressRuleValuePtrOutput)
}

// A collection of paths that map requests to backends.
func (o HTTPIngressRuleValueOutput) Paths() HTTPIngressPathArrayOutput {
	return o.ApplyT(func(v HTTPIngressRuleValue) []HTTPIngressPath { return v.Paths }).(HTTPIngressPathArrayOutput)
}

type HTTPIngressRuleValuePtrOutput struct{ *pulumi.OutputState }

func (HTTPIngressRuleValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPIngressRuleValue)(nil)).Elem()
}

func (o HTTPIngressRuleValuePtrOutput) ToHTTPIngressRuleValuePtrOutput() HTTPIngressRuleValuePtrOutput {
	return o
}

func (o HTTPIngressRuleValuePtrOutput) ToHTTPIngressRuleValuePtrOutputWithContext(ctx context.Context) HTTPIngressRuleValuePtrOutput {
	return o
}

func (o HTTPIngressRuleValuePtrOutput) Elem() HTTPIngressRuleValueOutput {
	return o.ApplyT(func(v *HTTPIngressRuleValue) HTTPIngressRuleValue {
		if v != nil {
			return *v
		}
		var ret HTTPIngressRuleValue
		return ret
	}).(HTTPIngressRuleValueOutput)
}

// A collection of paths that map requests to backends.
func (o HTTPIngressRuleValuePtrOutput) Paths() HTTPIngressPathArrayOutput {
	return o.ApplyT(func(v *HTTPIngressRuleValue) []HTTPIngressPath {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(HTTPIngressPathArrayOutput)
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlock struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	Cidr string `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	Except []string `pulumi:"except"`
}

// IPBlockInput is an input type that accepts IPBlockArgs and IPBlockOutput values.
// You can construct a concrete instance of `IPBlockInput` via:
//
//          IPBlockArgs{...}
type IPBlockInput interface {
	pulumi.Input

	ToIPBlockOutput() IPBlockOutput
	ToIPBlockOutputWithContext(context.Context) IPBlockOutput
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockArgs struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	Except pulumi.StringArrayInput `pulumi:"except"`
}

func (IPBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (i IPBlockArgs) ToIPBlockOutput() IPBlockOutput {
	return i.ToIPBlockOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput)
}

func (i IPBlockArgs) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput).ToIPBlockPtrOutputWithContext(ctx)
}

// IPBlockPtrInput is an input type that accepts IPBlockArgs, IPBlockPtr and IPBlockPtrOutput values.
// You can construct a concrete instance of `IPBlockPtrInput` via:
//
//          IPBlockArgs{...}
//
//  or:
//
//          nil
type IPBlockPtrInput interface {
	pulumi.Input

	ToIPBlockPtrOutput() IPBlockPtrOutput
	ToIPBlockPtrOutputWithContext(context.Context) IPBlockPtrOutput
}

type ipblockPtrType IPBlockArgs

func IPBlockPtr(v *IPBlockArgs) IPBlockPtrInput {
	return (*ipblockPtrType)(v)
}

func (*ipblockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (i *ipblockPtrType) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i *ipblockPtrType) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockPtrOutput)
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockOutput struct{ *pulumi.OutputState }

func (IPBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (o IPBlockOutput) ToIPBlockOutput() IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o.ToIPBlockPtrOutputWithContext(context.Background())
}

func (o IPBlockOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPBlock) *IPBlock {
		return &v
	}).(IPBlockPtrOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
func (o IPBlockOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v IPBlock) string { return v.Cidr }).(pulumi.StringOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
func (o IPBlockOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IPBlock) []string { return v.Except }).(pulumi.StringArrayOutput)
}

type IPBlockPtrOutput struct{ *pulumi.OutputState }

func (IPBlockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) Elem() IPBlockOutput {
	return o.ApplyT(func(v *IPBlock) IPBlock {
		if v != nil {
			return *v
		}
		var ret IPBlock
		return ret
	}).(IPBlockOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
func (o IPBlockPtrOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPBlock) *string {
		if v == nil {
			return nil
		}
		return &v.Cidr
	}).(pulumi.StringPtrOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
func (o IPBlockPtrOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPBlock) []string {
		if v == nil {
			return nil
		}
		return v.Except
	}).(pulumi.StringArrayOutput)
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IngressSpec `pulumi:"spec"`
	// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *IngressStatus `pulumi:"status"`
}

// IngressTypeInput is an input type that accepts IngressTypeArgs and IngressTypeOutput values.
// You can construct a concrete instance of `IngressTypeInput` via:
//
//          IngressTypeArgs{...}
type IngressTypeInput interface {
	pulumi.Input

	ToIngressTypeOutput() IngressTypeOutput
	ToIngressTypeOutputWithContext(context.Context) IngressTypeOutput
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressSpecPtrInput `pulumi:"spec"`
	// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status IngressStatusPtrInput `pulumi:"status"`
}

func (IngressTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressType)(nil)).Elem()
}

func (i IngressTypeArgs) ToIngressTypeOutput() IngressTypeOutput {
	return i.ToIngressTypeOutputWithContext(context.Background())
}

func (i IngressTypeArgs) ToIngressTypeOutputWithContext(ctx context.Context) IngressTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTypeOutput)
}

// IngressTypeArrayInput is an input type that accepts IngressTypeArray and IngressTypeArrayOutput values.
// You can construct a concrete instance of `IngressTypeArrayInput` via:
//
//          IngressTypeArray{ IngressTypeArgs{...} }
type IngressTypeArrayInput interface {
	pulumi.Input

	ToIngressTypeArrayOutput() IngressTypeArrayOutput
	ToIngressTypeArrayOutputWithContext(context.Context) IngressTypeArrayOutput
}

type IngressTypeArray []IngressTypeInput

func (IngressTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressType)(nil)).Elem()
}

func (i IngressTypeArray) ToIngressTypeArrayOutput() IngressTypeArrayOutput {
	return i.ToIngressTypeArrayOutputWithContext(context.Background())
}

func (i IngressTypeArray) ToIngressTypeArrayOutputWithContext(ctx context.Context) IngressTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTypeArrayOutput)
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
// 1.  Ingress object exists.
// 2.  Endpoint objects exist with matching names for each Ingress path (except when Service
//     type is ExternalName).
// 3.  Ingress entry exists for '.status.loadBalancer.ingress'.
//
// If the Ingress has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
type IngressTypeOutput struct{ *pulumi.OutputState }

func (IngressTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressType)(nil)).Elem()
}

func (o IngressTypeOutput) ToIngressTypeOutput() IngressTypeOutput {
	return o
}

func (o IngressTypeOutput) ToIngressTypeOutputWithContext(ctx context.Context) IngressTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IngressTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v IngressType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IngressTypeOutput) Spec() IngressSpecPtrOutput {
	return o.ApplyT(func(v IngressType) *IngressSpec { return v.Spec }).(IngressSpecPtrOutput)
}

// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IngressTypeOutput) Status() IngressStatusPtrOutput {
	return o.ApplyT(func(v IngressType) *IngressStatus { return v.Status }).(IngressStatusPtrOutput)
}

type IngressTypeArrayOutput struct{ *pulumi.OutputState }

func (IngressTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressType)(nil)).Elem()
}

func (o IngressTypeArrayOutput) ToIngressTypeArrayOutput() IngressTypeArrayOutput {
	return o
}

func (o IngressTypeArrayOutput) ToIngressTypeArrayOutputWithContext(ctx context.Context) IngressTypeArrayOutput {
	return o
}

func (o IngressTypeArrayOutput) Index(i pulumi.IntInput) IngressTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressType {
		return vs[0].([]IngressType)[vs[1].(int)]
	}).(IngressTypeOutput)
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackend struct {
	// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
	Resource *corev1.TypedLocalObjectReference `pulumi:"resource"`
	// Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
	Service *IngressServiceBackend `pulumi:"service"`
}

// IngressBackendInput is an input type that accepts IngressBackendArgs and IngressBackendOutput values.
// You can construct a concrete instance of `IngressBackendInput` via:
//
//          IngressBackendArgs{...}
type IngressBackendInput interface {
	pulumi.Input

	ToIngressBackendOutput() IngressBackendOutput
	ToIngressBackendOutputWithContext(context.Context) IngressBackendOutput
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackendArgs struct {
	// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
	Resource corev1.TypedLocalObjectReferencePtrInput `pulumi:"resource"`
	// Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
	Service IngressServiceBackendPtrInput `pulumi:"service"`
}

func (IngressBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressBackend)(nil)).Elem()
}

func (i IngressBackendArgs) ToIngressBackendOutput() IngressBackendOutput {
	return i.ToIngressBackendOutputWithContext(context.Background())
}

func (i IngressBackendArgs) ToIngressBackendOutputWithContext(ctx context.Context) IngressBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendOutput)
}

func (i IngressBackendArgs) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return i.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (i IngressBackendArgs) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendOutput).ToIngressBackendPtrOutputWithContext(ctx)
}

// IngressBackendPtrInput is an input type that accepts IngressBackendArgs, IngressBackendPtr and IngressBackendPtrOutput values.
// You can construct a concrete instance of `IngressBackendPtrInput` via:
//
//          IngressBackendArgs{...}
//
//  or:
//
//          nil
type IngressBackendPtrInput interface {
	pulumi.Input

	ToIngressBackendPtrOutput() IngressBackendPtrOutput
	ToIngressBackendPtrOutputWithContext(context.Context) IngressBackendPtrOutput
}

type ingressBackendPtrType IngressBackendArgs

func IngressBackendPtr(v *IngressBackendArgs) IngressBackendPtrInput {
	return (*ingressBackendPtrType)(v)
}

func (*ingressBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressBackend)(nil)).Elem()
}

func (i *ingressBackendPtrType) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return i.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (i *ingressBackendPtrType) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressBackendPtrOutput)
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackendOutput struct{ *pulumi.OutputState }

func (IngressBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressBackend)(nil)).Elem()
}

func (o IngressBackendOutput) ToIngressBackendOutput() IngressBackendOutput {
	return o
}

func (o IngressBackendOutput) ToIngressBackendOutputWithContext(ctx context.Context) IngressBackendOutput {
	return o
}

func (o IngressBackendOutput) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return o.ToIngressBackendPtrOutputWithContext(context.Background())
}

func (o IngressBackendOutput) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressBackend) *IngressBackend {
		return &v
	}).(IngressBackendPtrOutput)
}

// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
func (o IngressBackendOutput) Resource() corev1.TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v IngressBackend) *corev1.TypedLocalObjectReference { return v.Resource }).(corev1.TypedLocalObjectReferencePtrOutput)
}

// Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
func (o IngressBackendOutput) Service() IngressServiceBackendPtrOutput {
	return o.ApplyT(func(v IngressBackend) *IngressServiceBackend { return v.Service }).(IngressServiceBackendPtrOutput)
}

type IngressBackendPtrOutput struct{ *pulumi.OutputState }

func (IngressBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressBackend)(nil)).Elem()
}

func (o IngressBackendPtrOutput) ToIngressBackendPtrOutput() IngressBackendPtrOutput {
	return o
}

func (o IngressBackendPtrOutput) ToIngressBackendPtrOutputWithContext(ctx context.Context) IngressBackendPtrOutput {
	return o
}

func (o IngressBackendPtrOutput) Elem() IngressBackendOutput {
	return o.ApplyT(func(v *IngressBackend) IngressBackend {
		if v != nil {
			return *v
		}
		var ret IngressBackend
		return ret
	}).(IngressBackendOutput)
}

// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
func (o IngressBackendPtrOutput) Resource() corev1.TypedLocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *IngressBackend) *corev1.TypedLocalObjectReference {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(corev1.TypedLocalObjectReferencePtrOutput)
}

// Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
func (o IngressBackendPtrOutput) Service() IngressServiceBackendPtrOutput {
	return o.ApplyT(func(v *IngressBackend) *IngressServiceBackend {
		if v == nil {
			return nil
		}
		return v.Service
	}).(IngressServiceBackendPtrOutput)
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
type IngressClassType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IngressClassSpec `pulumi:"spec"`
}

// IngressClassTypeInput is an input type that accepts IngressClassTypeArgs and IngressClassTypeOutput values.
// You can construct a concrete instance of `IngressClassTypeInput` via:
//
//          IngressClassTypeArgs{...}
type IngressClassTypeInput interface {
	pulumi.Input

	ToIngressClassTypeOutput() IngressClassTypeOutput
	ToIngressClassTypeOutputWithContext(context.Context) IngressClassTypeOutput
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
type IngressClassTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IngressClassSpecPtrInput `pulumi:"spec"`
}

func (IngressClassTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassType)(nil)).Elem()
}

func (i IngressClassTypeArgs) ToIngressClassTypeOutput() IngressClassTypeOutput {
	return i.ToIngressClassTypeOutputWithContext(context.Background())
}

func (i IngressClassTypeArgs) ToIngressClassTypeOutputWithContext(ctx context.Context) IngressClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassTypeOutput)
}

// IngressClassTypeArrayInput is an input type that accepts IngressClassTypeArray and IngressClassTypeArrayOutput values.
// You can construct a concrete instance of `IngressClassTypeArrayInput` via:
//
//          IngressClassTypeArray{ IngressClassTypeArgs{...} }
type IngressClassTypeArrayInput interface {
	pulumi.Input

	ToIngressClassTypeArrayOutput() IngressClassTypeArrayOutput
	ToIngressClassTypeArrayOutputWithContext(context.Context) IngressClassTypeArrayOutput
}

type IngressClassTypeArray []IngressClassTypeInput

func (IngressClassTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressClassType)(nil)).Elem()
}

func (i IngressClassTypeArray) ToIngressClassTypeArrayOutput() IngressClassTypeArrayOutput {
	return i.ToIngressClassTypeArrayOutputWithContext(context.Background())
}

func (i IngressClassTypeArray) ToIngressClassTypeArrayOutputWithContext(ctx context.Context) IngressClassTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassTypeArrayOutput)
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
type IngressClassTypeOutput struct{ *pulumi.OutputState }

func (IngressClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassType)(nil)).Elem()
}

func (o IngressClassTypeOutput) ToIngressClassTypeOutput() IngressClassTypeOutput {
	return o
}

func (o IngressClassTypeOutput) ToIngressClassTypeOutputWithContext(ctx context.Context) IngressClassTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressClassTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressClassTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IngressClassTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v IngressClassType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IngressClassTypeOutput) Spec() IngressClassSpecPtrOutput {
	return o.ApplyT(func(v IngressClassType) *IngressClassSpec { return v.Spec }).(IngressClassSpecPtrOutput)
}

type IngressClassTypeArrayOutput struct{ *pulumi.OutputState }

func (IngressClassTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressClassType)(nil)).Elem()
}

func (o IngressClassTypeArrayOutput) ToIngressClassTypeArrayOutput() IngressClassTypeArrayOutput {
	return o
}

func (o IngressClassTypeArrayOutput) ToIngressClassTypeArrayOutputWithContext(ctx context.Context) IngressClassTypeArrayOutput {
	return o
}

func (o IngressClassTypeArrayOutput) Index(i pulumi.IntInput) IngressClassTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressClassType {
		return vs[0].([]IngressClassType)[vs[1].(int)]
	}).(IngressClassTypeOutput)
}

// IngressClassList is a collection of IngressClasses.
type IngressClassListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of IngressClasses.
	Items []IngressClassType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata.
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// IngressClassListTypeInput is an input type that accepts IngressClassListTypeArgs and IngressClassListTypeOutput values.
// You can construct a concrete instance of `IngressClassListTypeInput` via:
//
//          IngressClassListTypeArgs{...}
type IngressClassListTypeInput interface {
	pulumi.Input

	ToIngressClassListTypeOutput() IngressClassListTypeOutput
	ToIngressClassListTypeOutputWithContext(context.Context) IngressClassListTypeOutput
}

// IngressClassList is a collection of IngressClasses.
type IngressClassListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of IngressClasses.
	Items IngressClassTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata.
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (IngressClassListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassListType)(nil)).Elem()
}

func (i IngressClassListTypeArgs) ToIngressClassListTypeOutput() IngressClassListTypeOutput {
	return i.ToIngressClassListTypeOutputWithContext(context.Background())
}

func (i IngressClassListTypeArgs) ToIngressClassListTypeOutputWithContext(ctx context.Context) IngressClassListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassListTypeOutput)
}

// IngressClassList is a collection of IngressClasses.
type IngressClassListTypeOutput struct{ *pulumi.OutputState }

func (IngressClassListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassListType)(nil)).Elem()
}

func (o IngressClassListTypeOutput) ToIngressClassListTypeOutput() IngressClassListTypeOutput {
	return o
}

func (o IngressClassListTypeOutput) ToIngressClassListTypeOutputWithContext(ctx context.Context) IngressClassListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressClassListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of IngressClasses.
func (o IngressClassListTypeOutput) Items() IngressClassTypeArrayOutput {
	return o.ApplyT(func(v IngressClassListType) []IngressClassType { return v.Items }).(IngressClassTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressClassListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata.
func (o IngressClassListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v IngressClassListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
type IngressClassParametersReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name string `pulumi:"name"`
	// Namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
	Namespace *string `pulumi:"namespace"`
	// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace". Field can be enabled with IngressClassNamespacedParams feature gate.
	Scope *string `pulumi:"scope"`
}

// IngressClassParametersReferenceInput is an input type that accepts IngressClassParametersReferenceArgs and IngressClassParametersReferenceOutput values.
// You can construct a concrete instance of `IngressClassParametersReferenceInput` via:
//
//          IngressClassParametersReferenceArgs{...}
type IngressClassParametersReferenceInput interface {
	pulumi.Input

	ToIngressClassParametersReferenceOutput() IngressClassParametersReferenceOutput
	ToIngressClassParametersReferenceOutputWithContext(context.Context) IngressClassParametersReferenceOutput
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
type IngressClassParametersReferenceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace". Field can be enabled with IngressClassNamespacedParams feature gate.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (IngressClassParametersReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassParametersReference)(nil)).Elem()
}

func (i IngressClassParametersReferenceArgs) ToIngressClassParametersReferenceOutput() IngressClassParametersReferenceOutput {
	return i.ToIngressClassParametersReferenceOutputWithContext(context.Background())
}

func (i IngressClassParametersReferenceArgs) ToIngressClassParametersReferenceOutputWithContext(ctx context.Context) IngressClassParametersReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassParametersReferenceOutput)
}

func (i IngressClassParametersReferenceArgs) ToIngressClassParametersReferencePtrOutput() IngressClassParametersReferencePtrOutput {
	return i.ToIngressClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i IngressClassParametersReferenceArgs) ToIngressClassParametersReferencePtrOutputWithContext(ctx context.Context) IngressClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassParametersReferenceOutput).ToIngressClassParametersReferencePtrOutputWithContext(ctx)
}

// IngressClassParametersReferencePtrInput is an input type that accepts IngressClassParametersReferenceArgs, IngressClassParametersReferencePtr and IngressClassParametersReferencePtrOutput values.
// You can construct a concrete instance of `IngressClassParametersReferencePtrInput` via:
//
//          IngressClassParametersReferenceArgs{...}
//
//  or:
//
//          nil
type IngressClassParametersReferencePtrInput interface {
	pulumi.Input

	ToIngressClassParametersReferencePtrOutput() IngressClassParametersReferencePtrOutput
	ToIngressClassParametersReferencePtrOutputWithContext(context.Context) IngressClassParametersReferencePtrOutput
}

type ingressClassParametersReferencePtrType IngressClassParametersReferenceArgs

func IngressClassParametersReferencePtr(v *IngressClassParametersReferenceArgs) IngressClassParametersReferencePtrInput {
	return (*ingressClassParametersReferencePtrType)(v)
}

func (*ingressClassParametersReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassParametersReference)(nil)).Elem()
}

func (i *ingressClassParametersReferencePtrType) ToIngressClassParametersReferencePtrOutput() IngressClassParametersReferencePtrOutput {
	return i.ToIngressClassParametersReferencePtrOutputWithContext(context.Background())
}

func (i *ingressClassParametersReferencePtrType) ToIngressClassParametersReferencePtrOutputWithContext(ctx context.Context) IngressClassParametersReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassParametersReferencePtrOutput)
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
type IngressClassParametersReferenceOutput struct{ *pulumi.OutputState }

func (IngressClassParametersReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassParametersReference)(nil)).Elem()
}

func (o IngressClassParametersReferenceOutput) ToIngressClassParametersReferenceOutput() IngressClassParametersReferenceOutput {
	return o
}

func (o IngressClassParametersReferenceOutput) ToIngressClassParametersReferenceOutputWithContext(ctx context.Context) IngressClassParametersReferenceOutput {
	return o
}

func (o IngressClassParametersReferenceOutput) ToIngressClassParametersReferencePtrOutput() IngressClassParametersReferencePtrOutput {
	return o.ToIngressClassParametersReferencePtrOutputWithContext(context.Background())
}

func (o IngressClassParametersReferenceOutput) ToIngressClassParametersReferencePtrOutputWithContext(ctx context.Context) IngressClassParametersReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressClassParametersReference) *IngressClassParametersReference {
		return &v
	}).(IngressClassParametersReferencePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o IngressClassParametersReferenceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassParametersReference) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced.
func (o IngressClassParametersReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v IngressClassParametersReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced.
func (o IngressClassParametersReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IngressClassParametersReference) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
func (o IngressClassParametersReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassParametersReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace". Field can be enabled with IngressClassNamespacedParams feature gate.
func (o IngressClassParametersReferenceOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassParametersReference) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type IngressClassParametersReferencePtrOutput struct{ *pulumi.OutputState }

func (IngressClassParametersReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassParametersReference)(nil)).Elem()
}

func (o IngressClassParametersReferencePtrOutput) ToIngressClassParametersReferencePtrOutput() IngressClassParametersReferencePtrOutput {
	return o
}

func (o IngressClassParametersReferencePtrOutput) ToIngressClassParametersReferencePtrOutputWithContext(ctx context.Context) IngressClassParametersReferencePtrOutput {
	return o
}

func (o IngressClassParametersReferencePtrOutput) Elem() IngressClassParametersReferenceOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) IngressClassParametersReference {
		if v != nil {
			return *v
		}
		var ret IngressClassParametersReference
		return ret
	}).(IngressClassParametersReferenceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o IngressClassParametersReferencePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced.
func (o IngressClassParametersReferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced.
func (o IngressClassParametersReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
func (o IngressClassParametersReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace". Field can be enabled with IngressClassNamespacedParams feature gate.
func (o IngressClassParametersReferencePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassParametersReference) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// IngressClassSpec provides information about the class of an Ingress.
type IngressClassSpec struct {
	// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
	Controller *string `pulumi:"controller"`
	// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
	Parameters *IngressClassParametersReference `pulumi:"parameters"`
}

// IngressClassSpecInput is an input type that accepts IngressClassSpecArgs and IngressClassSpecOutput values.
// You can construct a concrete instance of `IngressClassSpecInput` via:
//
//          IngressClassSpecArgs{...}
type IngressClassSpecInput interface {
	pulumi.Input

	ToIngressClassSpecOutput() IngressClassSpecOutput
	ToIngressClassSpecOutputWithContext(context.Context) IngressClassSpecOutput
}

// IngressClassSpec provides information about the class of an Ingress.
type IngressClassSpecArgs struct {
	// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
	Parameters IngressClassParametersReferencePtrInput `pulumi:"parameters"`
}

func (IngressClassSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassSpec)(nil)).Elem()
}

func (i IngressClassSpecArgs) ToIngressClassSpecOutput() IngressClassSpecOutput {
	return i.ToIngressClassSpecOutputWithContext(context.Background())
}

func (i IngressClassSpecArgs) ToIngressClassSpecOutputWithContext(ctx context.Context) IngressClassSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassSpecOutput)
}

func (i IngressClassSpecArgs) ToIngressClassSpecPtrOutput() IngressClassSpecPtrOutput {
	return i.ToIngressClassSpecPtrOutputWithContext(context.Background())
}

func (i IngressClassSpecArgs) ToIngressClassSpecPtrOutputWithContext(ctx context.Context) IngressClassSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassSpecOutput).ToIngressClassSpecPtrOutputWithContext(ctx)
}

// IngressClassSpecPtrInput is an input type that accepts IngressClassSpecArgs, IngressClassSpecPtr and IngressClassSpecPtrOutput values.
// You can construct a concrete instance of `IngressClassSpecPtrInput` via:
//
//          IngressClassSpecArgs{...}
//
//  or:
//
//          nil
type IngressClassSpecPtrInput interface {
	pulumi.Input

	ToIngressClassSpecPtrOutput() IngressClassSpecPtrOutput
	ToIngressClassSpecPtrOutputWithContext(context.Context) IngressClassSpecPtrOutput
}

type ingressClassSpecPtrType IngressClassSpecArgs

func IngressClassSpecPtr(v *IngressClassSpecArgs) IngressClassSpecPtrInput {
	return (*ingressClassSpecPtrType)(v)
}

func (*ingressClassSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassSpec)(nil)).Elem()
}

func (i *ingressClassSpecPtrType) ToIngressClassSpecPtrOutput() IngressClassSpecPtrOutput {
	return i.ToIngressClassSpecPtrOutputWithContext(context.Background())
}

func (i *ingressClassSpecPtrType) ToIngressClassSpecPtrOutputWithContext(ctx context.Context) IngressClassSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassSpecPtrOutput)
}

// IngressClassSpec provides information about the class of an Ingress.
type IngressClassSpecOutput struct{ *pulumi.OutputState }

func (IngressClassSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassSpec)(nil)).Elem()
}

func (o IngressClassSpecOutput) ToIngressClassSpecOutput() IngressClassSpecOutput {
	return o
}

func (o IngressClassSpecOutput) ToIngressClassSpecOutputWithContext(ctx context.Context) IngressClassSpecOutput {
	return o
}

func (o IngressClassSpecOutput) ToIngressClassSpecPtrOutput() IngressClassSpecPtrOutput {
	return o.ToIngressClassSpecPtrOutputWithContext(context.Background())
}

func (o IngressClassSpecOutput) ToIngressClassSpecPtrOutputWithContext(ctx context.Context) IngressClassSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressClassSpec) *IngressClassSpec {
		return &v
	}).(IngressClassSpecPtrOutput)
}

// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
func (o IngressClassSpecOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassSpec) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (o IngressClassSpecOutput) Parameters() IngressClassParametersReferencePtrOutput {
	return o.ApplyT(func(v IngressClassSpec) *IngressClassParametersReference { return v.Parameters }).(IngressClassParametersReferencePtrOutput)
}

type IngressClassSpecPtrOutput struct{ *pulumi.OutputState }

func (IngressClassSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassSpec)(nil)).Elem()
}

func (o IngressClassSpecPtrOutput) ToIngressClassSpecPtrOutput() IngressClassSpecPtrOutput {
	return o
}

func (o IngressClassSpecPtrOutput) ToIngressClassSpecPtrOutputWithContext(ctx context.Context) IngressClassSpecPtrOutput {
	return o
}

func (o IngressClassSpecPtrOutput) Elem() IngressClassSpecOutput {
	return o.ApplyT(func(v *IngressClassSpec) IngressClassSpec {
		if v != nil {
			return *v
		}
		var ret IngressClassSpec
		return ret
	}).(IngressClassSpecOutput)
}

// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
func (o IngressClassSpecPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassSpec) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (o IngressClassSpecPtrOutput) Parameters() IngressClassParametersReferencePtrOutput {
	return o.ApplyT(func(v *IngressClassSpec) *IngressClassParametersReference {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(IngressClassParametersReferencePtrOutput)
}

// IngressList is a collection of Ingress.
type IngressListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of Ingress.
	Items []IngressType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// IngressListTypeInput is an input type that accepts IngressListTypeArgs and IngressListTypeOutput values.
// You can construct a concrete instance of `IngressListTypeInput` via:
//
//          IngressListTypeArgs{...}
type IngressListTypeInput interface {
	pulumi.Input

	ToIngressListTypeOutput() IngressListTypeOutput
	ToIngressListTypeOutputWithContext(context.Context) IngressListTypeOutput
}

// IngressList is a collection of Ingress.
type IngressListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of Ingress.
	Items IngressTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (IngressListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressListType)(nil)).Elem()
}

func (i IngressListTypeArgs) ToIngressListTypeOutput() IngressListTypeOutput {
	return i.ToIngressListTypeOutputWithContext(context.Background())
}

func (i IngressListTypeArgs) ToIngressListTypeOutputWithContext(ctx context.Context) IngressListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressListTypeOutput)
}

// IngressList is a collection of Ingress.
type IngressListTypeOutput struct{ *pulumi.OutputState }

func (IngressListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressListType)(nil)).Elem()
}

func (o IngressListTypeOutput) ToIngressListTypeOutput() IngressListTypeOutput {
	return o
}

func (o IngressListTypeOutput) ToIngressListTypeOutputWithContext(ctx context.Context) IngressListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IngressListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of Ingress.
func (o IngressListTypeOutput) Items() IngressTypeArrayOutput {
	return o.ApplyT(func(v IngressListType) []IngressType { return v.Items }).(IngressTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IngressListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IngressListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v IngressListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRule struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host *string               `pulumi:"host"`
	Http *HTTPIngressRuleValue `pulumi:"http"`
}

// IngressRuleInput is an input type that accepts IngressRuleArgs and IngressRuleOutput values.
// You can construct a concrete instance of `IngressRuleInput` via:
//
//          IngressRuleArgs{...}
type IngressRuleInput interface {
	pulumi.Input

	ToIngressRuleOutput() IngressRuleOutput
	ToIngressRuleOutputWithContext(context.Context) IngressRuleOutput
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRuleArgs struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host pulumi.StringPtrInput        `pulumi:"host"`
	Http HTTPIngressRuleValuePtrInput `pulumi:"http"`
}

func (IngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (i IngressRuleArgs) ToIngressRuleOutput() IngressRuleOutput {
	return i.ToIngressRuleOutputWithContext(context.Background())
}

func (i IngressRuleArgs) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleOutput)
}

// IngressRuleArrayInput is an input type that accepts IngressRuleArray and IngressRuleArrayOutput values.
// You can construct a concrete instance of `IngressRuleArrayInput` via:
//
//          IngressRuleArray{ IngressRuleArgs{...} }
type IngressRuleArrayInput interface {
	pulumi.Input

	ToIngressRuleArrayOutput() IngressRuleArrayOutput
	ToIngressRuleArrayOutputWithContext(context.Context) IngressRuleArrayOutput
}

type IngressRuleArray []IngressRuleInput

func (IngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (i IngressRuleArray) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return i.ToIngressRuleArrayOutputWithContext(context.Background())
}

func (i IngressRuleArray) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleArrayOutput)
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRuleOutput struct{ *pulumi.OutputState }

func (IngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (o IngressRuleOutput) ToIngressRuleOutput() IngressRuleOutput {
	return o
}

func (o IngressRuleOutput) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return o
}

// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
//    the IP in the Spec of the parent Ingress.
// 2. The `:` delimiter is not respected because ports are not allowed.
// 	  Currently the port of an Ingress is implicitly :80 for http and
// 	  :443 for https.
// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
//
// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
func (o IngressRuleOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressRule) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o IngressRuleOutput) Http() HTTPIngressRuleValuePtrOutput {
	return o.ApplyT(func(v IngressRule) *HTTPIngressRuleValue { return v.Http }).(HTTPIngressRuleValuePtrOutput)
}

type IngressRuleArrayOutput struct{ *pulumi.OutputState }

func (IngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) Index(i pulumi.IntInput) IngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressRule {
		return vs[0].([]IngressRule)[vs[1].(int)]
	}).(IngressRuleOutput)
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IngressServiceBackend struct {
	// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
	Name string `pulumi:"name"`
	// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
	Port *ServiceBackendPort `pulumi:"port"`
}

// IngressServiceBackendInput is an input type that accepts IngressServiceBackendArgs and IngressServiceBackendOutput values.
// You can construct a concrete instance of `IngressServiceBackendInput` via:
//
//          IngressServiceBackendArgs{...}
type IngressServiceBackendInput interface {
	pulumi.Input

	ToIngressServiceBackendOutput() IngressServiceBackendOutput
	ToIngressServiceBackendOutputWithContext(context.Context) IngressServiceBackendOutput
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IngressServiceBackendArgs struct {
	// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
	Name pulumi.StringInput `pulumi:"name"`
	// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
	Port ServiceBackendPortPtrInput `pulumi:"port"`
}

func (IngressServiceBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressServiceBackend)(nil)).Elem()
}

func (i IngressServiceBackendArgs) ToIngressServiceBackendOutput() IngressServiceBackendOutput {
	return i.ToIngressServiceBackendOutputWithContext(context.Background())
}

func (i IngressServiceBackendArgs) ToIngressServiceBackendOutputWithContext(ctx context.Context) IngressServiceBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressServiceBackendOutput)
}

func (i IngressServiceBackendArgs) ToIngressServiceBackendPtrOutput() IngressServiceBackendPtrOutput {
	return i.ToIngressServiceBackendPtrOutputWithContext(context.Background())
}

func (i IngressServiceBackendArgs) ToIngressServiceBackendPtrOutputWithContext(ctx context.Context) IngressServiceBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressServiceBackendOutput).ToIngressServiceBackendPtrOutputWithContext(ctx)
}

// IngressServiceBackendPtrInput is an input type that accepts IngressServiceBackendArgs, IngressServiceBackendPtr and IngressServiceBackendPtrOutput values.
// You can construct a concrete instance of `IngressServiceBackendPtrInput` via:
//
//          IngressServiceBackendArgs{...}
//
//  or:
//
//          nil
type IngressServiceBackendPtrInput interface {
	pulumi.Input

	ToIngressServiceBackendPtrOutput() IngressServiceBackendPtrOutput
	ToIngressServiceBackendPtrOutputWithContext(context.Context) IngressServiceBackendPtrOutput
}

type ingressServiceBackendPtrType IngressServiceBackendArgs

func IngressServiceBackendPtr(v *IngressServiceBackendArgs) IngressServiceBackendPtrInput {
	return (*ingressServiceBackendPtrType)(v)
}

func (*ingressServiceBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressServiceBackend)(nil)).Elem()
}

func (i *ingressServiceBackendPtrType) ToIngressServiceBackendPtrOutput() IngressServiceBackendPtrOutput {
	return i.ToIngressServiceBackendPtrOutputWithContext(context.Background())
}

func (i *ingressServiceBackendPtrType) ToIngressServiceBackendPtrOutputWithContext(ctx context.Context) IngressServiceBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressServiceBackendPtrOutput)
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IngressServiceBackendOutput struct{ *pulumi.OutputState }

func (IngressServiceBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressServiceBackend)(nil)).Elem()
}

func (o IngressServiceBackendOutput) ToIngressServiceBackendOutput() IngressServiceBackendOutput {
	return o
}

func (o IngressServiceBackendOutput) ToIngressServiceBackendOutputWithContext(ctx context.Context) IngressServiceBackendOutput {
	return o
}

func (o IngressServiceBackendOutput) ToIngressServiceBackendPtrOutput() IngressServiceBackendPtrOutput {
	return o.ToIngressServiceBackendPtrOutputWithContext(context.Background())
}

func (o IngressServiceBackendOutput) ToIngressServiceBackendPtrOutputWithContext(ctx context.Context) IngressServiceBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressServiceBackend) *IngressServiceBackend {
		return &v
	}).(IngressServiceBackendPtrOutput)
}

// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
func (o IngressServiceBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IngressServiceBackend) string { return v.Name }).(pulumi.StringOutput)
}

// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
func (o IngressServiceBackendOutput) Port() ServiceBackendPortPtrOutput {
	return o.ApplyT(func(v IngressServiceBackend) *ServiceBackendPort { return v.Port }).(ServiceBackendPortPtrOutput)
}

type IngressServiceBackendPtrOutput struct{ *pulumi.OutputState }

func (IngressServiceBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressServiceBackend)(nil)).Elem()
}

func (o IngressServiceBackendPtrOutput) ToIngressServiceBackendPtrOutput() IngressServiceBackendPtrOutput {
	return o
}

func (o IngressServiceBackendPtrOutput) ToIngressServiceBackendPtrOutputWithContext(ctx context.Context) IngressServiceBackendPtrOutput {
	return o
}

func (o IngressServiceBackendPtrOutput) Elem() IngressServiceBackendOutput {
	return o.ApplyT(func(v *IngressServiceBackend) IngressServiceBackend {
		if v != nil {
			return *v
		}
		var ret IngressServiceBackend
		return ret
	}).(IngressServiceBackendOutput)
}

// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
func (o IngressServiceBackendPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressServiceBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
func (o IngressServiceBackendPtrOutput) Port() ServiceBackendPortPtrOutput {
	return o.ApplyT(func(v *IngressServiceBackend) *ServiceBackendPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(ServiceBackendPortPtrOutput)
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpec struct {
	// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
	DefaultBackend *IngressBackend `pulumi:"defaultBackend"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName *string `pulumi:"ingressClassName"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules []IngressRule `pulumi:"rules"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []IngressTLS `pulumi:"tls"`
}

// IngressSpecInput is an input type that accepts IngressSpecArgs and IngressSpecOutput values.
// You can construct a concrete instance of `IngressSpecInput` via:
//
//          IngressSpecArgs{...}
type IngressSpecInput interface {
	pulumi.Input

	ToIngressSpecOutput() IngressSpecOutput
	ToIngressSpecOutputWithContext(context.Context) IngressSpecOutput
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpecArgs struct {
	// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
	DefaultBackend IngressBackendPtrInput `pulumi:"defaultBackend"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName pulumi.StringPtrInput `pulumi:"ingressClassName"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules IngressRuleArrayInput `pulumi:"rules"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls IngressTLSArrayInput `pulumi:"tls"`
}

func (IngressSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressSpec)(nil)).Elem()
}

func (i IngressSpecArgs) ToIngressSpecOutput() IngressSpecOutput {
	return i.ToIngressSpecOutputWithContext(context.Background())
}

func (i IngressSpecArgs) ToIngressSpecOutputWithContext(ctx context.Context) IngressSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecOutput)
}

func (i IngressSpecArgs) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return i.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (i IngressSpecArgs) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecOutput).ToIngressSpecPtrOutputWithContext(ctx)
}

// IngressSpecPtrInput is an input type that accepts IngressSpecArgs, IngressSpecPtr and IngressSpecPtrOutput values.
// You can construct a concrete instance of `IngressSpecPtrInput` via:
//
//          IngressSpecArgs{...}
//
//  or:
//
//          nil
type IngressSpecPtrInput interface {
	pulumi.Input

	ToIngressSpecPtrOutput() IngressSpecPtrOutput
	ToIngressSpecPtrOutputWithContext(context.Context) IngressSpecPtrOutput
}

type ingressSpecPtrType IngressSpecArgs

func IngressSpecPtr(v *IngressSpecArgs) IngressSpecPtrInput {
	return (*ingressSpecPtrType)(v)
}

func (*ingressSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressSpec)(nil)).Elem()
}

func (i *ingressSpecPtrType) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return i.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (i *ingressSpecPtrType) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressSpecPtrOutput)
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpecOutput struct{ *pulumi.OutputState }

func (IngressSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressSpec)(nil)).Elem()
}

func (o IngressSpecOutput) ToIngressSpecOutput() IngressSpecOutput {
	return o
}

func (o IngressSpecOutput) ToIngressSpecOutputWithContext(ctx context.Context) IngressSpecOutput {
	return o
}

func (o IngressSpecOutput) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return o.ToIngressSpecPtrOutputWithContext(context.Background())
}

func (o IngressSpecOutput) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressSpec) *IngressSpec {
		return &v
	}).(IngressSpecPtrOutput)
}

// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
func (o IngressSpecOutput) DefaultBackend() IngressBackendPtrOutput {
	return o.ApplyT(func(v IngressSpec) *IngressBackend { return v.DefaultBackend }).(IngressBackendPtrOutput)
}

// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
func (o IngressSpecOutput) IngressClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressSpec) *string { return v.IngressClassName }).(pulumi.StringPtrOutput)
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (o IngressSpecOutput) Rules() IngressRuleArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressRule { return v.Rules }).(IngressRuleArrayOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o IngressSpecOutput) Tls() IngressTLSArrayOutput {
	return o.ApplyT(func(v IngressSpec) []IngressTLS { return v.Tls }).(IngressTLSArrayOutput)
}

type IngressSpecPtrOutput struct{ *pulumi.OutputState }

func (IngressSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressSpec)(nil)).Elem()
}

func (o IngressSpecPtrOutput) ToIngressSpecPtrOutput() IngressSpecPtrOutput {
	return o
}

func (o IngressSpecPtrOutput) ToIngressSpecPtrOutputWithContext(ctx context.Context) IngressSpecPtrOutput {
	return o
}

func (o IngressSpecPtrOutput) Elem() IngressSpecOutput {
	return o.ApplyT(func(v *IngressSpec) IngressSpec {
		if v != nil {
			return *v
		}
		var ret IngressSpec
		return ret
	}).(IngressSpecOutput)
}

// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
func (o IngressSpecPtrOutput) DefaultBackend() IngressBackendPtrOutput {
	return o.ApplyT(func(v *IngressSpec) *IngressBackend {
		if v == nil {
			return nil
		}
		return v.DefaultBackend
	}).(IngressBackendPtrOutput)
}

// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
func (o IngressSpecPtrOutput) IngressClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressSpec) *string {
		if v == nil {
			return nil
		}
		return v.IngressClassName
	}).(pulumi.StringPtrOutput)
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (o IngressSpecPtrOutput) Rules() IngressRuleArrayOutput {
	return o.ApplyT(func(v *IngressSpec) []IngressRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(IngressRuleArrayOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o IngressSpecPtrOutput) Tls() IngressTLSArrayOutput {
	return o.ApplyT(func(v *IngressSpec) []IngressTLS {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(IngressTLSArrayOutput)
}

// IngressStatus describe the current state of the Ingress.
type IngressStatus struct {
	// LoadBalancer contains the current status of the load-balancer.
	LoadBalancer *corev1.LoadBalancerStatus `pulumi:"loadBalancer"`
}

// IngressStatusInput is an input type that accepts IngressStatusArgs and IngressStatusOutput values.
// You can construct a concrete instance of `IngressStatusInput` via:
//
//          IngressStatusArgs{...}
type IngressStatusInput interface {
	pulumi.Input

	ToIngressStatusOutput() IngressStatusOutput
	ToIngressStatusOutputWithContext(context.Context) IngressStatusOutput
}

// IngressStatus describe the current state of the Ingress.
type IngressStatusArgs struct {
	// LoadBalancer contains the current status of the load-balancer.
	LoadBalancer corev1.LoadBalancerStatusPtrInput `pulumi:"loadBalancer"`
}

func (IngressStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStatus)(nil)).Elem()
}

func (i IngressStatusArgs) ToIngressStatusOutput() IngressStatusOutput {
	return i.ToIngressStatusOutputWithContext(context.Background())
}

func (i IngressStatusArgs) ToIngressStatusOutputWithContext(ctx context.Context) IngressStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusOutput)
}

func (i IngressStatusArgs) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return i.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (i IngressStatusArgs) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusOutput).ToIngressStatusPtrOutputWithContext(ctx)
}

// IngressStatusPtrInput is an input type that accepts IngressStatusArgs, IngressStatusPtr and IngressStatusPtrOutput values.
// You can construct a concrete instance of `IngressStatusPtrInput` via:
//
//          IngressStatusArgs{...}
//
//  or:
//
//          nil
type IngressStatusPtrInput interface {
	pulumi.Input

	ToIngressStatusPtrOutput() IngressStatusPtrOutput
	ToIngressStatusPtrOutputWithContext(context.Context) IngressStatusPtrOutput
}

type ingressStatusPtrType IngressStatusArgs

func IngressStatusPtr(v *IngressStatusArgs) IngressStatusPtrInput {
	return (*ingressStatusPtrType)(v)
}

func (*ingressStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStatus)(nil)).Elem()
}

func (i *ingressStatusPtrType) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return i.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (i *ingressStatusPtrType) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStatusPtrOutput)
}

// IngressStatus describe the current state of the Ingress.
type IngressStatusOutput struct{ *pulumi.OutputState }

func (IngressStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStatus)(nil)).Elem()
}

func (o IngressStatusOutput) ToIngressStatusOutput() IngressStatusOutput {
	return o
}

func (o IngressStatusOutput) ToIngressStatusOutputWithContext(ctx context.Context) IngressStatusOutput {
	return o
}

func (o IngressStatusOutput) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return o.ToIngressStatusPtrOutputWithContext(context.Background())
}

func (o IngressStatusOutput) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressStatus) *IngressStatus {
		return &v
	}).(IngressStatusPtrOutput)
}

// LoadBalancer contains the current status of the load-balancer.
func (o IngressStatusOutput) LoadBalancer() corev1.LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v IngressStatus) *corev1.LoadBalancerStatus { return v.LoadBalancer }).(corev1.LoadBalancerStatusPtrOutput)
}

type IngressStatusPtrOutput struct{ *pulumi.OutputState }

func (IngressStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStatus)(nil)).Elem()
}

func (o IngressStatusPtrOutput) ToIngressStatusPtrOutput() IngressStatusPtrOutput {
	return o
}

func (o IngressStatusPtrOutput) ToIngressStatusPtrOutputWithContext(ctx context.Context) IngressStatusPtrOutput {
	return o
}

func (o IngressStatusPtrOutput) Elem() IngressStatusOutput {
	return o.ApplyT(func(v *IngressStatus) IngressStatus {
		if v != nil {
			return *v
		}
		var ret IngressStatus
		return ret
	}).(IngressStatusOutput)
}

// LoadBalancer contains the current status of the load-balancer.
func (o IngressStatusPtrOutput) LoadBalancer() corev1.LoadBalancerStatusPtrOutput {
	return o.ApplyT(func(v *IngressStatus) *corev1.LoadBalancerStatus {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(corev1.LoadBalancerStatusPtrOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLS struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// IngressTLSInput is an input type that accepts IngressTLSArgs and IngressTLSOutput values.
// You can construct a concrete instance of `IngressTLSInput` via:
//
//          IngressTLSArgs{...}
type IngressTLSInput interface {
	pulumi.Input

	ToIngressTLSOutput() IngressTLSOutput
	ToIngressTLSOutputWithContext(context.Context) IngressTLSOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLSArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (IngressTLSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressTLS)(nil)).Elem()
}

func (i IngressTLSArgs) ToIngressTLSOutput() IngressTLSOutput {
	return i.ToIngressTLSOutputWithContext(context.Background())
}

func (i IngressTLSArgs) ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTLSOutput)
}

// IngressTLSArrayInput is an input type that accepts IngressTLSArray and IngressTLSArrayOutput values.
// You can construct a concrete instance of `IngressTLSArrayInput` via:
//
//          IngressTLSArray{ IngressTLSArgs{...} }
type IngressTLSArrayInput interface {
	pulumi.Input

	ToIngressTLSArrayOutput() IngressTLSArrayOutput
	ToIngressTLSArrayOutputWithContext(context.Context) IngressTLSArrayOutput
}

type IngressTLSArray []IngressTLSInput

func (IngressTLSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressTLS)(nil)).Elem()
}

func (i IngressTLSArray) ToIngressTLSArrayOutput() IngressTLSArrayOutput {
	return i.ToIngressTLSArrayOutputWithContext(context.Background())
}

func (i IngressTLSArray) ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressTLSArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLSOutput struct{ *pulumi.OutputState }

func (IngressTLSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressTLS)(nil)).Elem()
}

func (o IngressTLSOutput) ToIngressTLSOutput() IngressTLSOutput {
	return o
}

func (o IngressTLSOutput) ToIngressTLSOutputWithContext(ctx context.Context) IngressTLSOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o IngressTLSOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IngressTLS) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o IngressTLSOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressTLS) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type IngressTLSArrayOutput struct{ *pulumi.OutputState }

func (IngressTLSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressTLS)(nil)).Elem()
}

func (o IngressTLSArrayOutput) ToIngressTLSArrayOutput() IngressTLSArrayOutput {
	return o
}

func (o IngressTLSArrayOutput) ToIngressTLSArrayOutputWithContext(ctx context.Context) IngressTLSArrayOutput {
	return o
}

func (o IngressTLSArrayOutput) Index(i pulumi.IntInput) IngressTLSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressTLS {
		return vs[0].([]IngressTLS)[vs[1].(int)]
	}).(IngressTLSOutput)
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec *NetworkPolicySpec `pulumi:"spec"`
}

// NetworkPolicyTypeInput is an input type that accepts NetworkPolicyTypeArgs and NetworkPolicyTypeOutput values.
// You can construct a concrete instance of `NetworkPolicyTypeInput` via:
//
//          NetworkPolicyTypeArgs{...}
type NetworkPolicyTypeInput interface {
	pulumi.Input

	ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput
	ToNetworkPolicyTypeOutputWithContext(context.Context) NetworkPolicyTypeOutput
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec NetworkPolicySpecPtrInput `pulumi:"spec"`
}

func (NetworkPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return i.ToNetworkPolicyTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeOutput)
}

// NetworkPolicyTypeArrayInput is an input type that accepts NetworkPolicyTypeArray and NetworkPolicyTypeArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyTypeArrayInput` via:
//
//          NetworkPolicyTypeArray{ NetworkPolicyTypeArgs{...} }
type NetworkPolicyTypeArrayInput interface {
	pulumi.Input

	ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput
	ToNetworkPolicyTypeArrayOutputWithContext(context.Context) NetworkPolicyTypeArrayOutput
}

type NetworkPolicyTypeArray []NetworkPolicyTypeInput

func (NetworkPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return i.ToNetworkPolicyTypeArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeArrayOutput)
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return o
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior for this NetworkPolicy.
func (o NetworkPolicyTypeOutput) Spec() NetworkPolicySpecPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *NetworkPolicySpec { return v.Spec }).(NetworkPolicySpecPtrOutput)
}

type NetworkPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) Index(i pulumi.IntInput) NetworkPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyType {
		return vs[0].([]NetworkPolicyType)[vs[1].(int)]
	}).(NetworkPolicyTypeOutput)
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRule struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To []NetworkPolicyPeer `pulumi:"to"`
}

// NetworkPolicyEgressRuleInput is an input type that accepts NetworkPolicyEgressRuleArgs and NetworkPolicyEgressRuleOutput values.
// You can construct a concrete instance of `NetworkPolicyEgressRuleInput` via:
//
//          NetworkPolicyEgressRuleArgs{...}
type NetworkPolicyEgressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput
	ToNetworkPolicyEgressRuleOutputWithContext(context.Context) NetworkPolicyEgressRuleOutput
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleArgs struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To NetworkPolicyPeerArrayInput `pulumi:"to"`
}

func (NetworkPolicyEgressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return i.ToNetworkPolicyEgressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleOutput)
}

// NetworkPolicyEgressRuleArrayInput is an input type that accepts NetworkPolicyEgressRuleArray and NetworkPolicyEgressRuleArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyEgressRuleArrayInput` via:
//
//          NetworkPolicyEgressRuleArray{ NetworkPolicyEgressRuleArgs{...} }
type NetworkPolicyEgressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput
	ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Context) NetworkPolicyEgressRuleArrayOutput
}

type NetworkPolicyEgressRuleArray []NetworkPolicyEgressRuleInput

func (NetworkPolicyEgressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return i.ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleArrayOutput)
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return o
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return o
}

// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyEgressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
func (o NetworkPolicyEgressRuleOutput) To() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPeer { return v.To }).(NetworkPolicyPeerArrayOutput)
}

type NetworkPolicyEgressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyEgressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyEgressRule {
		return vs[0].([]NetworkPolicyEgressRule)[vs[1].(int)]
	}).(NetworkPolicyEgressRuleOutput)
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRule struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []NetworkPolicyPeer `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
}

// NetworkPolicyIngressRuleInput is an input type that accepts NetworkPolicyIngressRuleArgs and NetworkPolicyIngressRuleOutput values.
// You can construct a concrete instance of `NetworkPolicyIngressRuleInput` via:
//
//          NetworkPolicyIngressRuleArgs{...}
type NetworkPolicyIngressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput
	ToNetworkPolicyIngressRuleOutputWithContext(context.Context) NetworkPolicyIngressRuleOutput
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRuleArgs struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From NetworkPolicyPeerArrayInput `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
}

func (NetworkPolicyIngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return i.ToNetworkPolicyIngressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleOutput)
}

// NetworkPolicyIngressRuleArrayInput is an input type that accepts NetworkPolicyIngressRuleArray and NetworkPolicyIngressRuleArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyIngressRuleArrayInput` via:
//
//          NetworkPolicyIngressRuleArray{ NetworkPolicyIngressRuleArgs{...} }
type NetworkPolicyIngressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput
	ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Context) NetworkPolicyIngressRuleArrayOutput
}

type NetworkPolicyIngressRuleArray []NetworkPolicyIngressRuleInput

func (NetworkPolicyIngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return i.ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleArrayOutput)
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return o
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return o
}

// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
func (o NetworkPolicyIngressRuleOutput) From() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPeer { return v.From }).(NetworkPolicyPeerArrayOutput)
}

// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyIngressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

type NetworkPolicyIngressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyIngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyIngressRule {
		return vs[0].([]NetworkPolicyIngressRule)[vs[1].(int)]
	}).(NetworkPolicyIngressRuleOutput)
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []NetworkPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// NetworkPolicyListTypeInput is an input type that accepts NetworkPolicyListTypeArgs and NetworkPolicyListTypeOutput values.
// You can construct a concrete instance of `NetworkPolicyListTypeInput` via:
//
//          NetworkPolicyListTypeArgs{...}
type NetworkPolicyListTypeInput interface {
	pulumi.Input

	ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput
	ToNetworkPolicyListTypeOutputWithContext(context.Context) NetworkPolicyListTypeOutput
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items NetworkPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (NetworkPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return i.ToNetworkPolicyListTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyListTypeOutput)
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return o
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o NetworkPolicyListTypeOutput) Items() NetworkPolicyTypeArrayOutput {
	return o.ApplyT(func(v NetworkPolicyListType) []NetworkPolicyType { return v.Items }).(NetworkPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type NetworkPolicyPeer struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock *IPBlock `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector *metav1.LabelSelector `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector *metav1.LabelSelector `pulumi:"podSelector"`
}

// NetworkPolicyPeerInput is an input type that accepts NetworkPolicyPeerArgs and NetworkPolicyPeerOutput values.
// You can construct a concrete instance of `NetworkPolicyPeerInput` via:
//
//          NetworkPolicyPeerArgs{...}
type NetworkPolicyPeerInput interface {
	pulumi.Input

	ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput
	ToNetworkPolicyPeerOutputWithContext(context.Context) NetworkPolicyPeerOutput
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type NetworkPolicyPeerArgs struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock IPBlockPtrInput `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector metav1.LabelSelectorPtrInput `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector metav1.LabelSelectorPtrInput `pulumi:"podSelector"`
}

func (NetworkPolicyPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return i.ToNetworkPolicyPeerOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerOutput)
}

// NetworkPolicyPeerArrayInput is an input type that accepts NetworkPolicyPeerArray and NetworkPolicyPeerArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyPeerArrayInput` via:
//
//          NetworkPolicyPeerArray{ NetworkPolicyPeerArgs{...} }
type NetworkPolicyPeerArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput
	ToNetworkPolicyPeerArrayOutputWithContext(context.Context) NetworkPolicyPeerArrayOutput
}

type NetworkPolicyPeerArray []NetworkPolicyPeerInput

func (NetworkPolicyPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return i.ToNetworkPolicyPeerArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerArrayOutput)
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type NetworkPolicyPeerOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return o
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return o
}

// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
func (o NetworkPolicyPeerOutput) IpBlock() IPBlockPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *IPBlock { return v.IpBlock }).(IPBlockPtrOutput)
}

// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
//
// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
func (o NetworkPolicyPeerOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.NamespaceSelector }).(metav1.LabelSelectorPtrOutput)
}

// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
//
// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
func (o NetworkPolicyPeerOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

type NetworkPolicyPeerArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPeer {
		return vs[0].([]NetworkPolicyPeer)[vs[1].(int)]
	}).(NetworkPolicyPeerOutput)
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPort struct {
	// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. This feature is in Beta state and is enabled by default. It can be disabled using the Feature Gate "NetworkPolicyEndPort".
	EndPort *int `pulumi:"endPort"`
	// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
	Port interface{} `pulumi:"port"`
	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol *string `pulumi:"protocol"`
}

// NetworkPolicyPortInput is an input type that accepts NetworkPolicyPortArgs and NetworkPolicyPortOutput values.
// You can construct a concrete instance of `NetworkPolicyPortInput` via:
//
//          NetworkPolicyPortArgs{...}
type NetworkPolicyPortInput interface {
	pulumi.Input

	ToNetworkPolicyPortOutput() NetworkPolicyPortOutput
	ToNetworkPolicyPortOutputWithContext(context.Context) NetworkPolicyPortOutput
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPortArgs struct {
	// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. This feature is in Beta state and is enabled by default. It can be disabled using the Feature Gate "NetworkPolicyEndPort".
	EndPort pulumi.IntPtrInput `pulumi:"endPort"`
	// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
	Port pulumi.Input `pulumi:"port"`
	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkPolicyPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return i.ToNetworkPolicyPortOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortOutput)
}

// NetworkPolicyPortArrayInput is an input type that accepts NetworkPolicyPortArray and NetworkPolicyPortArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyPortArrayInput` via:
//
//          NetworkPolicyPortArray{ NetworkPolicyPortArgs{...} }
type NetworkPolicyPortArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput
	ToNetworkPolicyPortArrayOutputWithContext(context.Context) NetworkPolicyPortArrayOutput
}

type NetworkPolicyPortArray []NetworkPolicyPortInput

func (NetworkPolicyPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return i.ToNetworkPolicyPortArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortArrayOutput)
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPortOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return o
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return o
}

// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. This feature is in Beta state and is enabled by default. It can be disabled using the Feature Gate "NetworkPolicyEndPort".
func (o NetworkPolicyPortOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPort) *int { return v.EndPort }).(pulumi.IntPtrOutput)
}

// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
func (o NetworkPolicyPortOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v NetworkPolicyPort) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
func (o NetworkPolicyPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkPolicyPortArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPort {
		return vs[0].([]NetworkPolicyPort)[vs[1].(int)]
	}).(NetworkPolicyPortOutput)
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpec struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress []NetworkPolicyEgressRule `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress []NetworkPolicyIngressRule `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector metav1.LabelSelector `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes []string `pulumi:"policyTypes"`
}

// NetworkPolicySpecInput is an input type that accepts NetworkPolicySpecArgs and NetworkPolicySpecOutput values.
// You can construct a concrete instance of `NetworkPolicySpecInput` via:
//
//          NetworkPolicySpecArgs{...}
type NetworkPolicySpecInput interface {
	pulumi.Input

	ToNetworkPolicySpecOutput() NetworkPolicySpecOutput
	ToNetworkPolicySpecOutputWithContext(context.Context) NetworkPolicySpecOutput
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpecArgs struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress NetworkPolicyEgressRuleArrayInput `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress NetworkPolicyIngressRuleArrayInput `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector metav1.LabelSelectorInput `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes pulumi.StringArrayInput `pulumi:"policyTypes"`
}

func (NetworkPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return i.ToNetworkPolicySpecOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput)
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput).ToNetworkPolicySpecPtrOutputWithContext(ctx)
}

// NetworkPolicySpecPtrInput is an input type that accepts NetworkPolicySpecArgs, NetworkPolicySpecPtr and NetworkPolicySpecPtrOutput values.
// You can construct a concrete instance of `NetworkPolicySpecPtrInput` via:
//
//          NetworkPolicySpecArgs{...}
//
//  or:
//
//          nil
type NetworkPolicySpecPtrInput interface {
	pulumi.Input

	ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput
	ToNetworkPolicySpecPtrOutputWithContext(context.Context) NetworkPolicySpecPtrOutput
}

type networkPolicySpecPtrType NetworkPolicySpecArgs

func NetworkPolicySpecPtr(v *NetworkPolicySpecArgs) NetworkPolicySpecPtrInput {
	return (*networkPolicySpecPtrType)(v)
}

func (*networkPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecPtrOutput)
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpecOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicySpec) *NetworkPolicySpec {
		return &v
	}).(NetworkPolicySpecPtrOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyEgressRule { return v.Egress }).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (o NetworkPolicySpecOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyIngressRule { return v.Ingress }).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecOutput) PodSelector() metav1.LabelSelectorOutput {
	return o.ApplyT(func(v NetworkPolicySpec) metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []string { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

type NetworkPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) Elem() NetworkPolicySpecOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) NetworkPolicySpec {
		if v != nil {
			return *v
		}
		var ret NetworkPolicySpec
		return ret
	}).(NetworkPolicySpecOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) []NetworkPolicyEgressRule {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (o NetworkPolicySpecPtrOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) []NetworkPolicyIngressRule {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecPtrOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) *metav1.LabelSelector {
		if v == nil {
			return nil
		}
		return &v.PodSelector
	}).(metav1.LabelSelectorPtrOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) []string {
		if v == nil {
			return nil
		}
		return v.PolicyTypes
	}).(pulumi.StringArrayOutput)
}

// ServiceBackendPort is the service port being referenced.
type ServiceBackendPort struct {
	// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
	Name *string `pulumi:"name"`
	// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
	Number *int `pulumi:"number"`
}

// ServiceBackendPortInput is an input type that accepts ServiceBackendPortArgs and ServiceBackendPortOutput values.
// You can construct a concrete instance of `ServiceBackendPortInput` via:
//
//          ServiceBackendPortArgs{...}
type ServiceBackendPortInput interface {
	pulumi.Input

	ToServiceBackendPortOutput() ServiceBackendPortOutput
	ToServiceBackendPortOutputWithContext(context.Context) ServiceBackendPortOutput
}

// ServiceBackendPort is the service port being referenced.
type ServiceBackendPortArgs struct {
	// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (ServiceBackendPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBackendPort)(nil)).Elem()
}

func (i ServiceBackendPortArgs) ToServiceBackendPortOutput() ServiceBackendPortOutput {
	return i.ToServiceBackendPortOutputWithContext(context.Background())
}

func (i ServiceBackendPortArgs) ToServiceBackendPortOutputWithContext(ctx context.Context) ServiceBackendPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBackendPortOutput)
}

func (i ServiceBackendPortArgs) ToServiceBackendPortPtrOutput() ServiceBackendPortPtrOutput {
	return i.ToServiceBackendPortPtrOutputWithContext(context.Background())
}

func (i ServiceBackendPortArgs) ToServiceBackendPortPtrOutputWithContext(ctx context.Context) ServiceBackendPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBackendPortOutput).ToServiceBackendPortPtrOutputWithContext(ctx)
}

// ServiceBackendPortPtrInput is an input type that accepts ServiceBackendPortArgs, ServiceBackendPortPtr and ServiceBackendPortPtrOutput values.
// You can construct a concrete instance of `ServiceBackendPortPtrInput` via:
//
//          ServiceBackendPortArgs{...}
//
//  or:
//
//          nil
type ServiceBackendPortPtrInput interface {
	pulumi.Input

	ToServiceBackendPortPtrOutput() ServiceBackendPortPtrOutput
	ToServiceBackendPortPtrOutputWithContext(context.Context) ServiceBackendPortPtrOutput
}

type serviceBackendPortPtrType ServiceBackendPortArgs

func ServiceBackendPortPtr(v *ServiceBackendPortArgs) ServiceBackendPortPtrInput {
	return (*serviceBackendPortPtrType)(v)
}

func (*serviceBackendPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBackendPort)(nil)).Elem()
}

func (i *serviceBackendPortPtrType) ToServiceBackendPortPtrOutput() ServiceBackendPortPtrOutput {
	return i.ToServiceBackendPortPtrOutputWithContext(context.Background())
}

func (i *serviceBackendPortPtrType) ToServiceBackendPortPtrOutputWithContext(ctx context.Context) ServiceBackendPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBackendPortPtrOutput)
}

// ServiceBackendPort is the service port being referenced.
type ServiceBackendPortOutput struct{ *pulumi.OutputState }

func (ServiceBackendPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBackendPort)(nil)).Elem()
}

func (o ServiceBackendPortOutput) ToServiceBackendPortOutput() ServiceBackendPortOutput {
	return o
}

func (o ServiceBackendPortOutput) ToServiceBackendPortOutputWithContext(ctx context.Context) ServiceBackendPortOutput {
	return o
}

func (o ServiceBackendPortOutput) ToServiceBackendPortPtrOutput() ServiceBackendPortPtrOutput {
	return o.ToServiceBackendPortPtrOutputWithContext(context.Background())
}

func (o ServiceBackendPortOutput) ToServiceBackendPortPtrOutputWithContext(ctx context.Context) ServiceBackendPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceBackendPort) *ServiceBackendPort {
		return &v
	}).(ServiceBackendPortPtrOutput)
}

// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
func (o ServiceBackendPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBackendPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
func (o ServiceBackendPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceBackendPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type ServiceBackendPortPtrOutput struct{ *pulumi.OutputState }

func (ServiceBackendPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBackendPort)(nil)).Elem()
}

func (o ServiceBackendPortPtrOutput) ToServiceBackendPortPtrOutput() ServiceBackendPortPtrOutput {
	return o
}

func (o ServiceBackendPortPtrOutput) ToServiceBackendPortPtrOutputWithContext(ctx context.Context) ServiceBackendPortPtrOutput {
	return o
}

func (o ServiceBackendPortPtrOutput) Elem() ServiceBackendPortOutput {
	return o.ApplyT(func(v *ServiceBackendPort) ServiceBackendPort {
		if v != nil {
			return *v
		}
		var ret ServiceBackendPort
		return ret
	}).(ServiceBackendPortOutput)
}

// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
func (o ServiceBackendPortPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBackendPort) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
func (o ServiceBackendPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceBackendPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPIngressPathInput)(nil)).Elem(), HTTPIngressPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPIngressPathArrayInput)(nil)).Elem(), HTTPIngressPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPIngressRuleValueInput)(nil)).Elem(), HTTPIngressRuleValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPIngressRuleValuePtrInput)(nil)).Elem(), HTTPIngressRuleValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPBlockInput)(nil)).Elem(), IPBlockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPBlockPtrInput)(nil)).Elem(), IPBlockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressTypeInput)(nil)).Elem(), IngressTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressTypeArrayInput)(nil)).Elem(), IngressTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressBackendInput)(nil)).Elem(), IngressBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressBackendPtrInput)(nil)).Elem(), IngressBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassTypeInput)(nil)).Elem(), IngressClassTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassTypeArrayInput)(nil)).Elem(), IngressClassTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassListTypeInput)(nil)).Elem(), IngressClassListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassParametersReferenceInput)(nil)).Elem(), IngressClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassParametersReferencePtrInput)(nil)).Elem(), IngressClassParametersReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassSpecInput)(nil)).Elem(), IngressClassSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassSpecPtrInput)(nil)).Elem(), IngressClassSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressListTypeInput)(nil)).Elem(), IngressListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRuleInput)(nil)).Elem(), IngressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRuleArrayInput)(nil)).Elem(), IngressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressServiceBackendInput)(nil)).Elem(), IngressServiceBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressServiceBackendPtrInput)(nil)).Elem(), IngressServiceBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressSpecInput)(nil)).Elem(), IngressSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressSpecPtrInput)(nil)).Elem(), IngressSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressStatusInput)(nil)).Elem(), IngressStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressStatusPtrInput)(nil)).Elem(), IngressStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressTLSInput)(nil)).Elem(), IngressTLSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressTLSArrayInput)(nil)).Elem(), IngressTLSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyTypeInput)(nil)).Elem(), NetworkPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyTypeArrayInput)(nil)).Elem(), NetworkPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyEgressRuleInput)(nil)).Elem(), NetworkPolicyEgressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyEgressRuleArrayInput)(nil)).Elem(), NetworkPolicyEgressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyIngressRuleInput)(nil)).Elem(), NetworkPolicyIngressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyIngressRuleArrayInput)(nil)).Elem(), NetworkPolicyIngressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyListTypeInput)(nil)).Elem(), NetworkPolicyListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyPeerInput)(nil)).Elem(), NetworkPolicyPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyPeerArrayInput)(nil)).Elem(), NetworkPolicyPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyPortInput)(nil)).Elem(), NetworkPolicyPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyPortArrayInput)(nil)).Elem(), NetworkPolicyPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicySpecInput)(nil)).Elem(), NetworkPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicySpecPtrInput)(nil)).Elem(), NetworkPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceBackendPortInput)(nil)).Elem(), ServiceBackendPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceBackendPortPtrInput)(nil)).Elem(), ServiceBackendPortArgs{})
	pulumi.RegisterOutputType(HTTPIngressPathOutput{})
	pulumi.RegisterOutputType(HTTPIngressPathArrayOutput{})
	pulumi.RegisterOutputType(HTTPIngressRuleValueOutput{})
	pulumi.RegisterOutputType(HTTPIngressRuleValuePtrOutput{})
	pulumi.RegisterOutputType(IPBlockOutput{})
	pulumi.RegisterOutputType(IPBlockPtrOutput{})
	pulumi.RegisterOutputType(IngressTypeOutput{})
	pulumi.RegisterOutputType(IngressTypeArrayOutput{})
	pulumi.RegisterOutputType(IngressBackendOutput{})
	pulumi.RegisterOutputType(IngressBackendPtrOutput{})
	pulumi.RegisterOutputType(IngressClassTypeOutput{})
	pulumi.RegisterOutputType(IngressClassTypeArrayOutput{})
	pulumi.RegisterOutputType(IngressClassListTypeOutput{})
	pulumi.RegisterOutputType(IngressClassParametersReferenceOutput{})
	pulumi.RegisterOutputType(IngressClassParametersReferencePtrOutput{})
	pulumi.RegisterOutputType(IngressClassSpecOutput{})
	pulumi.RegisterOutputType(IngressClassSpecPtrOutput{})
	pulumi.RegisterOutputType(IngressListTypeOutput{})
	pulumi.RegisterOutputType(IngressRuleOutput{})
	pulumi.RegisterOutputType(IngressRuleArrayOutput{})
	pulumi.RegisterOutputType(IngressServiceBackendOutput{})
	pulumi.RegisterOutputType(IngressServiceBackendPtrOutput{})
	pulumi.RegisterOutputType(IngressSpecOutput{})
	pulumi.RegisterOutputType(IngressSpecPtrOutput{})
	pulumi.RegisterOutputType(IngressStatusOutput{})
	pulumi.RegisterOutputType(IngressStatusPtrOutput{})
	pulumi.RegisterOutputType(IngressTLSOutput{})
	pulumi.RegisterOutputType(IngressTLSArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyListTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceBackendPortOutput{})
	pulumi.RegisterOutputType(ServiceBackendPortPtrOutput{})
}
