// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlock struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
	Cidr *string `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
	Except []string `pulumi:"except"`
}

type IPBlockInput interface {
	pulumi.Input

	ToIPBlockOutput() IPBlockOutput
	ToIPBlockOutputWithContext(context.Context) IPBlockOutput
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockArgs struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
	Except pulumi.StringArrayInput `pulumi:"except"`
}

func (IPBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (i IPBlockArgs) ToIPBlockOutput() IPBlockOutput {
	return i.ToIPBlockOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput)
}

func (i IPBlockArgs) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i IPBlockArgs) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockOutput).ToIPBlockPtrOutputWithContext(ctx)
}

type IPBlockPtrInput interface {
	pulumi.Input

	ToIPBlockPtrOutput() IPBlockPtrOutput
	ToIPBlockPtrOutputWithContext(context.Context) IPBlockPtrOutput
}

type ipblockPtrType IPBlockArgs

func IPBlockPtr(v *IPBlockArgs) IPBlockPtrInput {
	return (*ipblockPtrType)(v)
}

func (*ipblockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (i *ipblockPtrType) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return i.ToIPBlockPtrOutputWithContext(context.Background())
}

func (i *ipblockPtrType) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockPtrOutput)
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IPBlockOutput struct{ *pulumi.OutputState }

func (IPBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlock)(nil)).Elem()
}

func (o IPBlockOutput) ToIPBlockOutput() IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockOutputWithContext(ctx context.Context) IPBlockOutput {
	return o
}

func (o IPBlockOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o.ToIPBlockPtrOutputWithContext(context.Background())
}

func (o IPBlockOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o.ApplyT(func(v IPBlock) *IPBlock {
		return &v
	}).(IPBlockPtrOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
func (o IPBlockOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlock) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
func (o IPBlockOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IPBlock) []string { return v.Except }).(pulumi.StringArrayOutput)
}

type IPBlockPtrOutput struct{ *pulumi.OutputState }

func (IPBlockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPBlock)(nil)).Elem()
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutput() IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) ToIPBlockPtrOutputWithContext(ctx context.Context) IPBlockPtrOutput {
	return o
}

func (o IPBlockPtrOutput) Elem() IPBlockOutput {
	return o.ApplyT(func(v *IPBlock) IPBlock { return *v }).(IPBlockOutput)
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
func (o IPBlockPtrOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlock) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
func (o IPBlockPtrOutput) Except() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IPBlock) []string { return v.Except }).(pulumi.StringArrayOutput)
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec *NetworkPolicySpec `pulumi:"spec"`
}

type NetworkPolicyTypeInput interface {
	pulumi.Input

	ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput
	ToNetworkPolicyTypeOutputWithContext(context.Context) NetworkPolicyTypeOutput
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior for this NetworkPolicy.
	Spec NetworkPolicySpecPtrInput `pulumi:"spec"`
}

func (NetworkPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return i.ToNetworkPolicyTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArgs) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeOutput)
}

type NetworkPolicyTypeArrayInput interface {
	pulumi.Input

	ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput
	ToNetworkPolicyTypeArrayOutputWithContext(context.Context) NetworkPolicyTypeArrayOutput
}

type NetworkPolicyTypeArray []NetworkPolicyTypeInput

func (NetworkPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return i.ToNetworkPolicyTypeArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyTypeArray) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyTypeArrayOutput)
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicyTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutput() NetworkPolicyTypeOutput {
	return o
}

func (o NetworkPolicyTypeOutput) ToNetworkPolicyTypeOutputWithContext(ctx context.Context) NetworkPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior for this NetworkPolicy.
func (o NetworkPolicyTypeOutput) Spec() NetworkPolicySpecPtrOutput {
	return o.ApplyT(func(v NetworkPolicyType) *NetworkPolicySpec { return v.Spec }).(NetworkPolicySpecPtrOutput)
}

type NetworkPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyType)(nil)).Elem()
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutput() NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) ToNetworkPolicyTypeArrayOutputWithContext(ctx context.Context) NetworkPolicyTypeArrayOutput {
	return o
}

func (o NetworkPolicyTypeArrayOutput) Index(i pulumi.IntInput) NetworkPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyType {
		return vs[0].([]NetworkPolicyType)[vs[1].(int)]
	}).(NetworkPolicyTypeOutput)
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRule struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To []NetworkPolicyPeer `pulumi:"to"`
}

type NetworkPolicyEgressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput
	ToNetworkPolicyEgressRuleOutputWithContext(context.Context) NetworkPolicyEgressRuleOutput
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleArgs struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To NetworkPolicyPeerArrayInput `pulumi:"to"`
}

func (NetworkPolicyEgressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return i.ToNetworkPolicyEgressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArgs) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleOutput)
}

type NetworkPolicyEgressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput
	ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Context) NetworkPolicyEgressRuleArrayOutput
}

type NetworkPolicyEgressRuleArray []NetworkPolicyEgressRuleInput

func (NetworkPolicyEgressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return i.ToNetworkPolicyEgressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyEgressRuleArray) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyEgressRuleArrayOutput)
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type NetworkPolicyEgressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutput() NetworkPolicyEgressRuleOutput {
	return o
}

func (o NetworkPolicyEgressRuleOutput) ToNetworkPolicyEgressRuleOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleOutput {
	return o
}

// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyEgressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
func (o NetworkPolicyEgressRuleOutput) To() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyEgressRule) []NetworkPolicyPeer { return v.To }).(NetworkPolicyPeerArrayOutput)
}

type NetworkPolicyEgressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyEgressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyEgressRule)(nil)).Elem()
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutput() NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) ToNetworkPolicyEgressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyEgressRuleArrayOutput {
	return o
}

func (o NetworkPolicyEgressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyEgressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyEgressRule {
		return vs[0].([]NetworkPolicyEgressRule)[vs[1].(int)]
	}).(NetworkPolicyEgressRuleOutput)
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRule struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []NetworkPolicyPeer `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []NetworkPolicyPort `pulumi:"ports"`
}

type NetworkPolicyIngressRuleInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput
	ToNetworkPolicyIngressRuleOutputWithContext(context.Context) NetworkPolicyIngressRuleOutput
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRuleArgs struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From NetworkPolicyPeerArrayInput `pulumi:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports NetworkPolicyPortArrayInput `pulumi:"ports"`
}

func (NetworkPolicyIngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return i.ToNetworkPolicyIngressRuleOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArgs) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleOutput)
}

type NetworkPolicyIngressRuleArrayInput interface {
	pulumi.Input

	ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput
	ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Context) NetworkPolicyIngressRuleArrayOutput
}

type NetworkPolicyIngressRuleArray []NetworkPolicyIngressRuleInput

func (NetworkPolicyIngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return i.ToNetworkPolicyIngressRuleArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyIngressRuleArray) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyIngressRuleArrayOutput)
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRuleOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutput() NetworkPolicyIngressRuleOutput {
	return o
}

func (o NetworkPolicyIngressRuleOutput) ToNetworkPolicyIngressRuleOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleOutput {
	return o
}

// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
func (o NetworkPolicyIngressRuleOutput) From() NetworkPolicyPeerArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPeer { return v.From }).(NetworkPolicyPeerArrayOutput)
}

// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (o NetworkPolicyIngressRuleOutput) Ports() NetworkPolicyPortArrayOutput {
	return o.ApplyT(func(v NetworkPolicyIngressRule) []NetworkPolicyPort { return v.Ports }).(NetworkPolicyPortArrayOutput)
}

type NetworkPolicyIngressRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyIngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyIngressRule)(nil)).Elem()
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutput() NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) ToNetworkPolicyIngressRuleArrayOutputWithContext(ctx context.Context) NetworkPolicyIngressRuleArrayOutput {
	return o
}

func (o NetworkPolicyIngressRuleArrayOutput) Index(i pulumi.IntInput) NetworkPolicyIngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyIngressRule {
		return vs[0].([]NetworkPolicyIngressRule)[vs[1].(int)]
	}).(NetworkPolicyIngressRuleOutput)
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items []NetworkPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

type NetworkPolicyListTypeInput interface {
	pulumi.Input

	ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput
	ToNetworkPolicyListTypeOutputWithContext(context.Context) NetworkPolicyListTypeOutput
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is a list of schema objects.
	Items NetworkPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (NetworkPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return i.ToNetworkPolicyListTypeOutputWithContext(context.Background())
}

func (i NetworkPolicyListTypeArgs) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyListTypeOutput)
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyListTypeOutput struct{ *pulumi.OutputState }

func (NetworkPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyListType)(nil)).Elem()
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutput() NetworkPolicyListTypeOutput {
	return o
}

func (o NetworkPolicyListTypeOutput) ToNetworkPolicyListTypeOutputWithContext(ctx context.Context) NetworkPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o NetworkPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is a list of schema objects.
func (o NetworkPolicyListTypeOutput) Items() NetworkPolicyTypeArrayOutput {
	return o.ApplyT(func(v NetworkPolicyListType) []NetworkPolicyType { return v.Items }).(NetworkPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NetworkPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o NetworkPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v NetworkPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
type NetworkPolicyPeer struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock *IPBlock `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector *metav1.LabelSelector `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector *metav1.LabelSelector `pulumi:"podSelector"`
}

type NetworkPolicyPeerInput interface {
	pulumi.Input

	ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput
	ToNetworkPolicyPeerOutputWithContext(context.Context) NetworkPolicyPeerOutput
}

// NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
type NetworkPolicyPeerArgs struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
	IpBlock IPBlockPtrInput `pulumi:"ipBlock"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	NamespaceSelector metav1.LabelSelectorPtrInput `pulumi:"namespaceSelector"`
	// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	PodSelector metav1.LabelSelectorPtrInput `pulumi:"podSelector"`
}

func (NetworkPolicyPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return i.ToNetworkPolicyPeerOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArgs) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerOutput)
}

type NetworkPolicyPeerArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput
	ToNetworkPolicyPeerArrayOutputWithContext(context.Context) NetworkPolicyPeerArrayOutput
}

type NetworkPolicyPeerArray []NetworkPolicyPeerInput

func (NetworkPolicyPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return i.ToNetworkPolicyPeerArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPeerArray) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPeerArrayOutput)
}

// NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
type NetworkPolicyPeerOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutput() NetworkPolicyPeerOutput {
	return o
}

func (o NetworkPolicyPeerOutput) ToNetworkPolicyPeerOutputWithContext(ctx context.Context) NetworkPolicyPeerOutput {
	return o
}

// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
func (o NetworkPolicyPeerOutput) IpBlock() IPBlockPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *IPBlock { return v.IpBlock }).(IPBlockPtrOutput)
}

// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
//
// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
func (o NetworkPolicyPeerOutput) NamespaceSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.NamespaceSelector }).(metav1.LabelSelectorPtrOutput)
}

// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
//
// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
func (o NetworkPolicyPeerOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPeer) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

type NetworkPolicyPeerArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPeer)(nil)).Elem()
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutput() NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) ToNetworkPolicyPeerArrayOutputWithContext(ctx context.Context) NetworkPolicyPeerArrayOutput {
	return o
}

func (o NetworkPolicyPeerArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPeer {
		return vs[0].([]NetworkPolicyPeer)[vs[1].(int)]
	}).(NetworkPolicyPeerOutput)
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPort struct {
	// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
	Port interface{} `pulumi:"port"`
	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol *string `pulumi:"protocol"`
}

type NetworkPolicyPortInput interface {
	pulumi.Input

	ToNetworkPolicyPortOutput() NetworkPolicyPortOutput
	ToNetworkPolicyPortOutputWithContext(context.Context) NetworkPolicyPortOutput
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPortArgs struct {
	// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
	Port pulumi.Input `pulumi:"port"`
	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkPolicyPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return i.ToNetworkPolicyPortOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArgs) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortOutput)
}

type NetworkPolicyPortArrayInput interface {
	pulumi.Input

	ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput
	ToNetworkPolicyPortArrayOutputWithContext(context.Context) NetworkPolicyPortArrayOutput
}

type NetworkPolicyPortArray []NetworkPolicyPortInput

func (NetworkPolicyPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return i.ToNetworkPolicyPortArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyPortArray) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPortArrayOutput)
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPortOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutput() NetworkPolicyPortOutput {
	return o
}

func (o NetworkPolicyPortOutput) ToNetworkPolicyPortOutputWithContext(ctx context.Context) NetworkPolicyPortOutput {
	return o
}

// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
func (o NetworkPolicyPortOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v NetworkPolicyPort) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
func (o NetworkPolicyPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicyPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkPolicyPortArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPolicyPort)(nil)).Elem()
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutput() NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) ToNetworkPolicyPortArrayOutputWithContext(ctx context.Context) NetworkPolicyPortArrayOutput {
	return o
}

func (o NetworkPolicyPortArrayOutput) Index(i pulumi.IntInput) NetworkPolicyPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPolicyPort {
		return vs[0].([]NetworkPolicyPort)[vs[1].(int)]
	}).(NetworkPolicyPortOutput)
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpec struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress []NetworkPolicyEgressRule `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress []NetworkPolicyIngressRule `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector *metav1.LabelSelector `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes []string `pulumi:"policyTypes"`
}

type NetworkPolicySpecInput interface {
	pulumi.Input

	ToNetworkPolicySpecOutput() NetworkPolicySpecOutput
	ToNetworkPolicySpecOutputWithContext(context.Context) NetworkPolicySpecOutput
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpecArgs struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress NetworkPolicyEgressRuleArrayInput `pulumi:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress NetworkPolicyIngressRuleArrayInput `pulumi:"ingress"`
	// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
	PodSelector metav1.LabelSelectorPtrInput `pulumi:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes pulumi.StringArrayInput `pulumi:"policyTypes"`
}

func (NetworkPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return i.ToNetworkPolicySpecOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput)
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i NetworkPolicySpecArgs) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecOutput).ToNetworkPolicySpecPtrOutputWithContext(ctx)
}

type NetworkPolicySpecPtrInput interface {
	pulumi.Input

	ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput
	ToNetworkPolicySpecPtrOutputWithContext(context.Context) NetworkPolicySpecPtrOutput
}

type networkPolicySpecPtrType NetworkPolicySpecArgs

func NetworkPolicySpecPtr(v *NetworkPolicySpecArgs) NetworkPolicySpecPtrInput {
	return (*networkPolicySpecPtrType)(v)
}

func (*networkPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return i.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (i *networkPolicySpecPtrType) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicySpecPtrOutput)
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpecOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutput() NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecOutputWithContext(ctx context.Context) NetworkPolicySpecOutput {
	return o
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o.ToNetworkPolicySpecPtrOutputWithContext(context.Background())
}

func (o NetworkPolicySpecOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *NetworkPolicySpec {
		return &v
	}).(NetworkPolicySpecPtrOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyEgressRule { return v.Egress }).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (o NetworkPolicySpecOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyIngressRule { return v.Ingress }).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []string { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

type NetworkPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicySpec)(nil)).Elem()
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutput() NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) ToNetworkPolicySpecPtrOutputWithContext(ctx context.Context) NetworkPolicySpecPtrOutput {
	return o
}

func (o NetworkPolicySpecPtrOutput) Elem() NetworkPolicySpecOutput {
	return o.ApplyT(func(v *NetworkPolicySpec) NetworkPolicySpec { return *v }).(NetworkPolicySpecOutput)
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) Egress() NetworkPolicyEgressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyEgressRule { return v.Egress }).(NetworkPolicyEgressRuleArrayOutput)
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (o NetworkPolicySpecPtrOutput) Ingress() NetworkPolicyIngressRuleArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []NetworkPolicyIngressRule { return v.Ingress }).(NetworkPolicyIngressRuleArrayOutput)
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (o NetworkPolicySpecPtrOutput) PodSelector() metav1.LabelSelectorPtrOutput {
	return o.ApplyT(func(v NetworkPolicySpec) *metav1.LabelSelector { return v.PodSelector }).(metav1.LabelSelectorPtrOutput)
}

// List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (o NetworkPolicySpecPtrOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkPolicySpec) []string { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(IPBlockOutput{})
	pulumi.RegisterOutputType(IPBlockPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyEgressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleOutput{})
	pulumi.RegisterOutputType(NetworkPolicyIngressRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyListTypeOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPeerArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPortArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecOutput{})
	pulumi.RegisterOutputType(NetworkPolicySpecPtrOutput{})
}
