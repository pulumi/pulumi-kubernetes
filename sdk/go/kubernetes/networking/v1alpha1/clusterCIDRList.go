// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items ClusterCIDRTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewClusterCIDRList registers a new resource with the given unique name, arguments, and options.
func NewClusterCIDRList(ctx *pulumi.Context,
	name string, args *ClusterCIDRListArgs, opts ...pulumi.ResourceOption) (*ClusterCIDRList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("networking.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ClusterCIDRList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterCIDRList
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCIDRList gets an existing ClusterCIDRList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCIDRList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCIDRListState, opts ...pulumi.ResourceOption) (*ClusterCIDRList, error) {
	var resource ClusterCIDRList
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCIDRList resources.
type clusterCIDRListState struct {
}

type ClusterCIDRListState struct {
}

func (ClusterCIDRListState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCIDRListState)(nil)).Elem()
}

type clusterCIDRListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items []ClusterCIDRType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ClusterCIDRList resource.
type ClusterCIDRListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Items is the list of ClusterCIDRs.
	Items ClusterCIDRTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput
}

func (ClusterCIDRListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCIDRListArgs)(nil)).Elem()
}

type ClusterCIDRListInput interface {
	pulumi.Input

	ToClusterCIDRListOutput() ClusterCIDRListOutput
	ToClusterCIDRListOutputWithContext(ctx context.Context) ClusterCIDRListOutput
}

func (*ClusterCIDRList) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRList)(nil)).Elem()
}

func (i *ClusterCIDRList) ToClusterCIDRListOutput() ClusterCIDRListOutput {
	return i.ToClusterCIDRListOutputWithContext(context.Background())
}

func (i *ClusterCIDRList) ToClusterCIDRListOutputWithContext(ctx context.Context) ClusterCIDRListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRListOutput)
}

// ClusterCIDRListArrayInput is an input type that accepts ClusterCIDRListArray and ClusterCIDRListArrayOutput values.
// You can construct a concrete instance of `ClusterCIDRListArrayInput` via:
//
//	ClusterCIDRListArray{ ClusterCIDRListArgs{...} }
type ClusterCIDRListArrayInput interface {
	pulumi.Input

	ToClusterCIDRListArrayOutput() ClusterCIDRListArrayOutput
	ToClusterCIDRListArrayOutputWithContext(context.Context) ClusterCIDRListArrayOutput
}

type ClusterCIDRListArray []ClusterCIDRListInput

func (ClusterCIDRListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCIDRList)(nil)).Elem()
}

func (i ClusterCIDRListArray) ToClusterCIDRListArrayOutput() ClusterCIDRListArrayOutput {
	return i.ToClusterCIDRListArrayOutputWithContext(context.Background())
}

func (i ClusterCIDRListArray) ToClusterCIDRListArrayOutputWithContext(ctx context.Context) ClusterCIDRListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRListArrayOutput)
}

// ClusterCIDRListMapInput is an input type that accepts ClusterCIDRListMap and ClusterCIDRListMapOutput values.
// You can construct a concrete instance of `ClusterCIDRListMapInput` via:
//
//	ClusterCIDRListMap{ "key": ClusterCIDRListArgs{...} }
type ClusterCIDRListMapInput interface {
	pulumi.Input

	ToClusterCIDRListMapOutput() ClusterCIDRListMapOutput
	ToClusterCIDRListMapOutputWithContext(context.Context) ClusterCIDRListMapOutput
}

type ClusterCIDRListMap map[string]ClusterCIDRListInput

func (ClusterCIDRListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCIDRList)(nil)).Elem()
}

func (i ClusterCIDRListMap) ToClusterCIDRListMapOutput() ClusterCIDRListMapOutput {
	return i.ToClusterCIDRListMapOutputWithContext(context.Background())
}

func (i ClusterCIDRListMap) ToClusterCIDRListMapOutputWithContext(ctx context.Context) ClusterCIDRListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRListMapOutput)
}

type ClusterCIDRListOutput struct{ *pulumi.OutputState }

func (ClusterCIDRListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRList)(nil)).Elem()
}

func (o ClusterCIDRListOutput) ToClusterCIDRListOutput() ClusterCIDRListOutput {
	return o
}

func (o ClusterCIDRListOutput) ToClusterCIDRListOutputWithContext(ctx context.Context) ClusterCIDRListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCIDRList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Items is the list of ClusterCIDRs.
func (o ClusterCIDRListOutput) Items() ClusterCIDRTypeArrayOutput {
	return o.ApplyT(func(v *ClusterCIDRList) ClusterCIDRTypeArrayOutput { return v.Items }).(ClusterCIDRTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCIDRList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ClusterCIDRList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ClusterCIDRListArrayOutput struct{ *pulumi.OutputState }

func (ClusterCIDRListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCIDRList)(nil)).Elem()
}

func (o ClusterCIDRListArrayOutput) ToClusterCIDRListArrayOutput() ClusterCIDRListArrayOutput {
	return o
}

func (o ClusterCIDRListArrayOutput) ToClusterCIDRListArrayOutputWithContext(ctx context.Context) ClusterCIDRListArrayOutput {
	return o
}

func (o ClusterCIDRListArrayOutput) Index(i pulumi.IntInput) ClusterCIDRListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterCIDRList {
		return vs[0].([]*ClusterCIDRList)[vs[1].(int)]
	}).(ClusterCIDRListOutput)
}

type ClusterCIDRListMapOutput struct{ *pulumi.OutputState }

func (ClusterCIDRListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCIDRList)(nil)).Elem()
}

func (o ClusterCIDRListMapOutput) ToClusterCIDRListMapOutput() ClusterCIDRListMapOutput {
	return o
}

func (o ClusterCIDRListMapOutput) ToClusterCIDRListMapOutputWithContext(ctx context.Context) ClusterCIDRListMapOutput {
	return o
}

func (o ClusterCIDRListMapOutput) MapIndex(k pulumi.StringInput) ClusterCIDRListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterCIDRList {
		return vs[0].(map[string]*ClusterCIDRList)[vs[1].(string)]
	}).(ClusterCIDRListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRListInput)(nil)).Elem(), &ClusterCIDRList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRListArrayInput)(nil)).Elem(), ClusterCIDRListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRListMapInput)(nil)).Elem(), ClusterCIDRListMap{})
	pulumi.RegisterOutputType(ClusterCIDRListOutput{})
	pulumi.RegisterOutputType(ClusterCIDRListArrayOutput{})
	pulumi.RegisterOutputType(ClusterCIDRListMapOutput{})
}
