// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecPatchPtrOutput `pulumi:"spec"`
}

// NewIPAddressPatch registers a new resource with the given unique name, arguments, and options.
func NewIPAddressPatch(ctx *pulumi.Context,
	name string, args *IPAddressPatchArgs, opts ...pulumi.ResourceOption) (*IPAddressPatch, error) {
	if args == nil {
		args = &IPAddressPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("IPAddress")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IPAddressPatch
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:IPAddressPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAddressPatch gets an existing IPAddressPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAddressPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAddressPatchState, opts ...pulumi.ResourceOption) (*IPAddressPatch, error) {
	var resource IPAddressPatch
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1alpha1:IPAddressPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAddressPatch resources.
type ipaddressPatchState struct {
}

type IPAddressPatchState struct {
}

func (IPAddressPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressPatchState)(nil)).Elem()
}

type ipaddressPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IPAddressSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a IPAddressPatch resource.
type IPAddressPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecPatchPtrInput
}

func (IPAddressPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressPatchArgs)(nil)).Elem()
}

type IPAddressPatchInput interface {
	pulumi.Input

	ToIPAddressPatchOutput() IPAddressPatchOutput
	ToIPAddressPatchOutputWithContext(ctx context.Context) IPAddressPatchOutput
}

func (*IPAddressPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressPatch)(nil)).Elem()
}

func (i *IPAddressPatch) ToIPAddressPatchOutput() IPAddressPatchOutput {
	return i.ToIPAddressPatchOutputWithContext(context.Background())
}

func (i *IPAddressPatch) ToIPAddressPatchOutputWithContext(ctx context.Context) IPAddressPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressPatchOutput)
}

// IPAddressPatchArrayInput is an input type that accepts IPAddressPatchArray and IPAddressPatchArrayOutput values.
// You can construct a concrete instance of `IPAddressPatchArrayInput` via:
//
//	IPAddressPatchArray{ IPAddressPatchArgs{...} }
type IPAddressPatchArrayInput interface {
	pulumi.Input

	ToIPAddressPatchArrayOutput() IPAddressPatchArrayOutput
	ToIPAddressPatchArrayOutputWithContext(context.Context) IPAddressPatchArrayOutput
}

type IPAddressPatchArray []IPAddressPatchInput

func (IPAddressPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPAddressPatch)(nil)).Elem()
}

func (i IPAddressPatchArray) ToIPAddressPatchArrayOutput() IPAddressPatchArrayOutput {
	return i.ToIPAddressPatchArrayOutputWithContext(context.Background())
}

func (i IPAddressPatchArray) ToIPAddressPatchArrayOutputWithContext(ctx context.Context) IPAddressPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressPatchArrayOutput)
}

// IPAddressPatchMapInput is an input type that accepts IPAddressPatchMap and IPAddressPatchMapOutput values.
// You can construct a concrete instance of `IPAddressPatchMapInput` via:
//
//	IPAddressPatchMap{ "key": IPAddressPatchArgs{...} }
type IPAddressPatchMapInput interface {
	pulumi.Input

	ToIPAddressPatchMapOutput() IPAddressPatchMapOutput
	ToIPAddressPatchMapOutputWithContext(context.Context) IPAddressPatchMapOutput
}

type IPAddressPatchMap map[string]IPAddressPatchInput

func (IPAddressPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPAddressPatch)(nil)).Elem()
}

func (i IPAddressPatchMap) ToIPAddressPatchMapOutput() IPAddressPatchMapOutput {
	return i.ToIPAddressPatchMapOutputWithContext(context.Background())
}

func (i IPAddressPatchMap) ToIPAddressPatchMapOutputWithContext(ctx context.Context) IPAddressPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressPatchMapOutput)
}

type IPAddressPatchOutput struct{ *pulumi.OutputState }

func (IPAddressPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressPatch)(nil)).Elem()
}

func (o IPAddressPatchOutput) ToIPAddressPatchOutput() IPAddressPatchOutput {
	return o
}

func (o IPAddressPatchOutput) ToIPAddressPatchOutputWithContext(ctx context.Context) IPAddressPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IPAddressPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAddressPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IPAddressPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAddressPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IPAddressPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *IPAddressPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IPAddressPatchOutput) Spec() IPAddressSpecPatchPtrOutput {
	return o.ApplyT(func(v *IPAddressPatch) IPAddressSpecPatchPtrOutput { return v.Spec }).(IPAddressSpecPatchPtrOutput)
}

type IPAddressPatchArrayOutput struct{ *pulumi.OutputState }

func (IPAddressPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPAddressPatch)(nil)).Elem()
}

func (o IPAddressPatchArrayOutput) ToIPAddressPatchArrayOutput() IPAddressPatchArrayOutput {
	return o
}

func (o IPAddressPatchArrayOutput) ToIPAddressPatchArrayOutputWithContext(ctx context.Context) IPAddressPatchArrayOutput {
	return o
}

func (o IPAddressPatchArrayOutput) Index(i pulumi.IntInput) IPAddressPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPAddressPatch {
		return vs[0].([]*IPAddressPatch)[vs[1].(int)]
	}).(IPAddressPatchOutput)
}

type IPAddressPatchMapOutput struct{ *pulumi.OutputState }

func (IPAddressPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPAddressPatch)(nil)).Elem()
}

func (o IPAddressPatchMapOutput) ToIPAddressPatchMapOutput() IPAddressPatchMapOutput {
	return o
}

func (o IPAddressPatchMapOutput) ToIPAddressPatchMapOutputWithContext(ctx context.Context) IPAddressPatchMapOutput {
	return o
}

func (o IPAddressPatchMapOutput) MapIndex(k pulumi.StringInput) IPAddressPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPAddressPatch {
		return vs[0].(map[string]*IPAddressPatch)[vs[1].(string)]
	}).(IPAddressPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressPatchInput)(nil)).Elem(), &IPAddressPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressPatchArrayInput)(nil)).Elem(), IPAddressPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressPatchMapInput)(nil)).Elem(), IPAddressPatchMap{})
	pulumi.RegisterOutputType(IPAddressPatchOutput{})
	pulumi.RegisterOutputType(IPAddressPatchArrayOutput{})
	pulumi.RegisterOutputType(IPAddressPatchMapOutput{})
}
