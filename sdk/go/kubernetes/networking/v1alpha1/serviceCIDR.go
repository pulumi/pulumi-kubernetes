// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDR struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceCIDRSpecOutput `pulumi:"spec"`
	// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceCIDRStatusPtrOutput `pulumi:"status"`
}

// NewServiceCIDR registers a new resource with the given unique name, arguments, and options.
func NewServiceCIDR(ctx *pulumi.Context,
	name string, args *ServiceCIDRArgs, opts ...pulumi.ResourceOption) (*ServiceCIDR, error) {
	if args == nil {
		args = &ServiceCIDRArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ServiceCIDR")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceCIDR
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:ServiceCIDR", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCIDR gets an existing ServiceCIDR resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCIDR(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceCIDRState, opts ...pulumi.ResourceOption) (*ServiceCIDR, error) {
	var resource ServiceCIDR
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1alpha1:ServiceCIDR", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCIDR resources.
type serviceCIDRState struct {
}

type ServiceCIDRState struct {
}

func (ServiceCIDRState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCIDRState)(nil)).Elem()
}

type serviceCIDRArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceCIDRSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ServiceCIDR resource.
type ServiceCIDRArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceCIDRSpecPtrInput
}

func (ServiceCIDRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCIDRArgs)(nil)).Elem()
}

type ServiceCIDRInput interface {
	pulumi.Input

	ToServiceCIDROutput() ServiceCIDROutput
	ToServiceCIDROutputWithContext(ctx context.Context) ServiceCIDROutput
}

func (*ServiceCIDR) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDR)(nil)).Elem()
}

func (i *ServiceCIDR) ToServiceCIDROutput() ServiceCIDROutput {
	return i.ToServiceCIDROutputWithContext(context.Background())
}

func (i *ServiceCIDR) ToServiceCIDROutputWithContext(ctx context.Context) ServiceCIDROutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDROutput)
}

// ServiceCIDRArrayInput is an input type that accepts ServiceCIDRArray and ServiceCIDRArrayOutput values.
// You can construct a concrete instance of `ServiceCIDRArrayInput` via:
//
//	ServiceCIDRArray{ ServiceCIDRArgs{...} }
type ServiceCIDRArrayInput interface {
	pulumi.Input

	ToServiceCIDRArrayOutput() ServiceCIDRArrayOutput
	ToServiceCIDRArrayOutputWithContext(context.Context) ServiceCIDRArrayOutput
}

type ServiceCIDRArray []ServiceCIDRInput

func (ServiceCIDRArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCIDR)(nil)).Elem()
}

func (i ServiceCIDRArray) ToServiceCIDRArrayOutput() ServiceCIDRArrayOutput {
	return i.ToServiceCIDRArrayOutputWithContext(context.Background())
}

func (i ServiceCIDRArray) ToServiceCIDRArrayOutputWithContext(ctx context.Context) ServiceCIDRArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRArrayOutput)
}

// ServiceCIDRMapInput is an input type that accepts ServiceCIDRMap and ServiceCIDRMapOutput values.
// You can construct a concrete instance of `ServiceCIDRMapInput` via:
//
//	ServiceCIDRMap{ "key": ServiceCIDRArgs{...} }
type ServiceCIDRMapInput interface {
	pulumi.Input

	ToServiceCIDRMapOutput() ServiceCIDRMapOutput
	ToServiceCIDRMapOutputWithContext(context.Context) ServiceCIDRMapOutput
}

type ServiceCIDRMap map[string]ServiceCIDRInput

func (ServiceCIDRMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCIDR)(nil)).Elem()
}

func (i ServiceCIDRMap) ToServiceCIDRMapOutput() ServiceCIDRMapOutput {
	return i.ToServiceCIDRMapOutputWithContext(context.Background())
}

func (i ServiceCIDRMap) ToServiceCIDRMapOutputWithContext(ctx context.Context) ServiceCIDRMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRMapOutput)
}

type ServiceCIDROutput struct{ *pulumi.OutputState }

func (ServiceCIDROutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDR)(nil)).Elem()
}

func (o ServiceCIDROutput) ToServiceCIDROutput() ServiceCIDROutput {
	return o
}

func (o ServiceCIDROutput) ToServiceCIDROutputWithContext(ctx context.Context) ServiceCIDROutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceCIDROutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCIDR) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceCIDROutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCIDR) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceCIDROutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ServiceCIDR) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDROutput) Spec() ServiceCIDRSpecOutput {
	return o.ApplyT(func(v *ServiceCIDR) ServiceCIDRSpecOutput { return v.Spec }).(ServiceCIDRSpecOutput)
}

// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDROutput) Status() ServiceCIDRStatusPtrOutput {
	return o.ApplyT(func(v *ServiceCIDR) ServiceCIDRStatusPtrOutput { return v.Status }).(ServiceCIDRStatusPtrOutput)
}

type ServiceCIDRArrayOutput struct{ *pulumi.OutputState }

func (ServiceCIDRArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCIDR)(nil)).Elem()
}

func (o ServiceCIDRArrayOutput) ToServiceCIDRArrayOutput() ServiceCIDRArrayOutput {
	return o
}

func (o ServiceCIDRArrayOutput) ToServiceCIDRArrayOutputWithContext(ctx context.Context) ServiceCIDRArrayOutput {
	return o
}

func (o ServiceCIDRArrayOutput) Index(i pulumi.IntInput) ServiceCIDROutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceCIDR {
		return vs[0].([]*ServiceCIDR)[vs[1].(int)]
	}).(ServiceCIDROutput)
}

type ServiceCIDRMapOutput struct{ *pulumi.OutputState }

func (ServiceCIDRMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCIDR)(nil)).Elem()
}

func (o ServiceCIDRMapOutput) ToServiceCIDRMapOutput() ServiceCIDRMapOutput {
	return o
}

func (o ServiceCIDRMapOutput) ToServiceCIDRMapOutputWithContext(ctx context.Context) ServiceCIDRMapOutput {
	return o
}

func (o ServiceCIDRMapOutput) MapIndex(k pulumi.StringInput) ServiceCIDROutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceCIDR {
		return vs[0].(map[string]*ServiceCIDR)[vs[1].(string)]
	}).(ServiceCIDROutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRInput)(nil)).Elem(), &ServiceCIDR{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRArrayInput)(nil)).Elem(), ServiceCIDRArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRMapInput)(nil)).Elem(), ServiceCIDRMap{})
	pulumi.RegisterOutputType(ServiceCIDROutput{})
	pulumi.RegisterOutputType(ServiceCIDRArrayOutput{})
	pulumi.RegisterOutputType(ServiceCIDRMapOutput{})
}
