// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddress struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecOutput `pulumi:"spec"`
}

// NewIPAddress registers a new resource with the given unique name, arguments, and options.
func NewIPAddress(ctx *pulumi.Context,
	name string, args *IPAddressArgs, opts ...pulumi.ResourceOption) (*IPAddress, error) {
	if args == nil {
		args = &IPAddressArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("IPAddress")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IPAddress
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:IPAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAddress gets an existing IPAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAddressState, opts ...pulumi.ResourceOption) (*IPAddress, error) {
	var resource IPAddress
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1alpha1:IPAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAddress resources.
type ipaddressState struct {
}

type IPAddressState struct {
}

func (IPAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressState)(nil)).Elem()
}

type ipaddressArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IPAddressSpec `pulumi:"spec"`
}

// The set of arguments for constructing a IPAddress resource.
type IPAddressArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecPtrInput
}

func (IPAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipaddressArgs)(nil)).Elem()
}

type IPAddressInput interface {
	pulumi.Input

	ToIPAddressOutput() IPAddressOutput
	ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput
}

func (*IPAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddress)(nil)).Elem()
}

func (i *IPAddress) ToIPAddressOutput() IPAddressOutput {
	return i.ToIPAddressOutputWithContext(context.Background())
}

func (i *IPAddress) ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressOutput)
}

// IPAddressArrayInput is an input type that accepts IPAddressArray and IPAddressArrayOutput values.
// You can construct a concrete instance of `IPAddressArrayInput` via:
//
//	IPAddressArray{ IPAddressArgs{...} }
type IPAddressArrayInput interface {
	pulumi.Input

	ToIPAddressArrayOutput() IPAddressArrayOutput
	ToIPAddressArrayOutputWithContext(context.Context) IPAddressArrayOutput
}

type IPAddressArray []IPAddressInput

func (IPAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPAddress)(nil)).Elem()
}

func (i IPAddressArray) ToIPAddressArrayOutput() IPAddressArrayOutput {
	return i.ToIPAddressArrayOutputWithContext(context.Background())
}

func (i IPAddressArray) ToIPAddressArrayOutputWithContext(ctx context.Context) IPAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressArrayOutput)
}

// IPAddressMapInput is an input type that accepts IPAddressMap and IPAddressMapOutput values.
// You can construct a concrete instance of `IPAddressMapInput` via:
//
//	IPAddressMap{ "key": IPAddressArgs{...} }
type IPAddressMapInput interface {
	pulumi.Input

	ToIPAddressMapOutput() IPAddressMapOutput
	ToIPAddressMapOutputWithContext(context.Context) IPAddressMapOutput
}

type IPAddressMap map[string]IPAddressInput

func (IPAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPAddress)(nil)).Elem()
}

func (i IPAddressMap) ToIPAddressMapOutput() IPAddressMapOutput {
	return i.ToIPAddressMapOutputWithContext(context.Background())
}

func (i IPAddressMap) ToIPAddressMapOutputWithContext(ctx context.Context) IPAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressMapOutput)
}

type IPAddressOutput struct{ *pulumi.OutputState }

func (IPAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddress)(nil)).Elem()
}

func (o IPAddressOutput) ToIPAddressOutput() IPAddressOutput {
	return o
}

func (o IPAddressOutput) ToIPAddressOutputWithContext(ctx context.Context) IPAddressOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IPAddressOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *IPAddress) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IPAddressOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *IPAddress) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IPAddressOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *IPAddress) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IPAddressOutput) Spec() IPAddressSpecOutput {
	return o.ApplyT(func(v *IPAddress) IPAddressSpecOutput { return v.Spec }).(IPAddressSpecOutput)
}

type IPAddressArrayOutput struct{ *pulumi.OutputState }

func (IPAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPAddress)(nil)).Elem()
}

func (o IPAddressArrayOutput) ToIPAddressArrayOutput() IPAddressArrayOutput {
	return o
}

func (o IPAddressArrayOutput) ToIPAddressArrayOutputWithContext(ctx context.Context) IPAddressArrayOutput {
	return o
}

func (o IPAddressArrayOutput) Index(i pulumi.IntInput) IPAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPAddress {
		return vs[0].([]*IPAddress)[vs[1].(int)]
	}).(IPAddressOutput)
}

type IPAddressMapOutput struct{ *pulumi.OutputState }

func (IPAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPAddress)(nil)).Elem()
}

func (o IPAddressMapOutput) ToIPAddressMapOutput() IPAddressMapOutput {
	return o
}

func (o IPAddressMapOutput) ToIPAddressMapOutputWithContext(ctx context.Context) IPAddressMapOutput {
	return o
}

func (o IPAddressMapOutput) MapIndex(k pulumi.StringInput) IPAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPAddress {
		return vs[0].(map[string]*IPAddress)[vs[1].(string)]
	}).(IPAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressInput)(nil)).Elem(), &IPAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressArrayInput)(nil)).Elem(), IPAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressMapInput)(nil)).Elem(), IPAddressMap{})
	pulumi.RegisterOutputType(IPAddressOutput{})
	pulumi.RegisterOutputType(IPAddressArrayOutput{})
	pulumi.RegisterOutputType(IPAddressMapOutput{})
}
