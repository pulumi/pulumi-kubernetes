// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDR struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecOutput `pulumi:"spec"`
}

// NewClusterCIDR registers a new resource with the given unique name, arguments, and options.
func NewClusterCIDR(ctx *pulumi.Context,
	name string, args *ClusterCIDRArgs, opts ...pulumi.ResourceOption) (*ClusterCIDR, error) {
	if args == nil {
		args = &ClusterCIDRArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ClusterCIDR")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterCIDR
	err := ctx.RegisterResource("kubernetes:networking.k8s.io/v1alpha1:ClusterCIDR", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCIDR gets an existing ClusterCIDR resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCIDR(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCIDRState, opts ...pulumi.ResourceOption) (*ClusterCIDR, error) {
	var resource ClusterCIDR
	err := ctx.ReadResource("kubernetes:networking.k8s.io/v1alpha1:ClusterCIDR", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCIDR resources.
type clusterCIDRState struct {
}

type ClusterCIDRState struct {
}

func (ClusterCIDRState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCIDRState)(nil)).Elem()
}

type clusterCIDRArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterCIDRSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterCIDR resource.
type ClusterCIDRArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecPtrInput
}

func (ClusterCIDRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCIDRArgs)(nil)).Elem()
}

type ClusterCIDRInput interface {
	pulumi.Input

	ToClusterCIDROutput() ClusterCIDROutput
	ToClusterCIDROutputWithContext(ctx context.Context) ClusterCIDROutput
}

func (*ClusterCIDR) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDR)(nil)).Elem()
}

func (i *ClusterCIDR) ToClusterCIDROutput() ClusterCIDROutput {
	return i.ToClusterCIDROutputWithContext(context.Background())
}

func (i *ClusterCIDR) ToClusterCIDROutputWithContext(ctx context.Context) ClusterCIDROutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDROutput)
}

// ClusterCIDRArrayInput is an input type that accepts ClusterCIDRArray and ClusterCIDRArrayOutput values.
// You can construct a concrete instance of `ClusterCIDRArrayInput` via:
//
//	ClusterCIDRArray{ ClusterCIDRArgs{...} }
type ClusterCIDRArrayInput interface {
	pulumi.Input

	ToClusterCIDRArrayOutput() ClusterCIDRArrayOutput
	ToClusterCIDRArrayOutputWithContext(context.Context) ClusterCIDRArrayOutput
}

type ClusterCIDRArray []ClusterCIDRInput

func (ClusterCIDRArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCIDR)(nil)).Elem()
}

func (i ClusterCIDRArray) ToClusterCIDRArrayOutput() ClusterCIDRArrayOutput {
	return i.ToClusterCIDRArrayOutputWithContext(context.Background())
}

func (i ClusterCIDRArray) ToClusterCIDRArrayOutputWithContext(ctx context.Context) ClusterCIDRArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRArrayOutput)
}

// ClusterCIDRMapInput is an input type that accepts ClusterCIDRMap and ClusterCIDRMapOutput values.
// You can construct a concrete instance of `ClusterCIDRMapInput` via:
//
//	ClusterCIDRMap{ "key": ClusterCIDRArgs{...} }
type ClusterCIDRMapInput interface {
	pulumi.Input

	ToClusterCIDRMapOutput() ClusterCIDRMapOutput
	ToClusterCIDRMapOutputWithContext(context.Context) ClusterCIDRMapOutput
}

type ClusterCIDRMap map[string]ClusterCIDRInput

func (ClusterCIDRMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCIDR)(nil)).Elem()
}

func (i ClusterCIDRMap) ToClusterCIDRMapOutput() ClusterCIDRMapOutput {
	return i.ToClusterCIDRMapOutputWithContext(context.Background())
}

func (i ClusterCIDRMap) ToClusterCIDRMapOutputWithContext(ctx context.Context) ClusterCIDRMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRMapOutput)
}

type ClusterCIDROutput struct{ *pulumi.OutputState }

func (ClusterCIDROutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDR)(nil)).Elem()
}

func (o ClusterCIDROutput) ToClusterCIDROutput() ClusterCIDROutput {
	return o
}

func (o ClusterCIDROutput) ToClusterCIDROutputWithContext(ctx context.Context) ClusterCIDROutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDROutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCIDR) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDROutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCIDR) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDROutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ClusterCIDR) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterCIDROutput) Spec() ClusterCIDRSpecOutput {
	return o.ApplyT(func(v *ClusterCIDR) ClusterCIDRSpecOutput { return v.Spec }).(ClusterCIDRSpecOutput)
}

type ClusterCIDRArrayOutput struct{ *pulumi.OutputState }

func (ClusterCIDRArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCIDR)(nil)).Elem()
}

func (o ClusterCIDRArrayOutput) ToClusterCIDRArrayOutput() ClusterCIDRArrayOutput {
	return o
}

func (o ClusterCIDRArrayOutput) ToClusterCIDRArrayOutputWithContext(ctx context.Context) ClusterCIDRArrayOutput {
	return o
}

func (o ClusterCIDRArrayOutput) Index(i pulumi.IntInput) ClusterCIDROutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterCIDR {
		return vs[0].([]*ClusterCIDR)[vs[1].(int)]
	}).(ClusterCIDROutput)
}

type ClusterCIDRMapOutput struct{ *pulumi.OutputState }

func (ClusterCIDRMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCIDR)(nil)).Elem()
}

func (o ClusterCIDRMapOutput) ToClusterCIDRMapOutput() ClusterCIDRMapOutput {
	return o
}

func (o ClusterCIDRMapOutput) ToClusterCIDRMapOutputWithContext(ctx context.Context) ClusterCIDRMapOutput {
	return o
}

func (o ClusterCIDRMapOutput) MapIndex(k pulumi.StringInput) ClusterCIDROutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterCIDR {
		return vs[0].(map[string]*ClusterCIDR)[vs[1].(string)]
	}).(ClusterCIDROutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRInput)(nil)).Elem(), &ClusterCIDR{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRArrayInput)(nil)).Elem(), ClusterCIDRArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRMapInput)(nil)).Elem(), ClusterCIDRMap{})
	pulumi.RegisterOutputType(ClusterCIDROutput{})
	pulumi.RegisterOutputType(ClusterCIDRArrayOutput{})
	pulumi.RegisterOutputType(ClusterCIDRMapOutput{})
}
