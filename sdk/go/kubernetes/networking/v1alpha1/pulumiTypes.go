// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterCIDRSpec `pulumi:"spec"`
}

// ClusterCIDRTypeInput is an input type that accepts ClusterCIDRTypeArgs and ClusterCIDRTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRTypeInput` via:
//
//	ClusterCIDRTypeArgs{...}
type ClusterCIDRTypeInput interface {
	pulumi.Input

	ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput
	ToClusterCIDRTypeOutputWithContext(context.Context) ClusterCIDRTypeOutput
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecPtrInput `pulumi:"spec"`
}

func (ClusterCIDRTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRType)(nil)).Elem()
}

func (i ClusterCIDRTypeArgs) ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput {
	return i.ToClusterCIDRTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRTypeArgs) ToClusterCIDRTypeOutputWithContext(ctx context.Context) ClusterCIDRTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRTypeOutput)
}

// ClusterCIDRTypeArrayInput is an input type that accepts ClusterCIDRTypeArray and ClusterCIDRTypeArrayOutput values.
// You can construct a concrete instance of `ClusterCIDRTypeArrayInput` via:
//
//	ClusterCIDRTypeArray{ ClusterCIDRTypeArgs{...} }
type ClusterCIDRTypeArrayInput interface {
	pulumi.Input

	ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput
	ToClusterCIDRTypeArrayOutputWithContext(context.Context) ClusterCIDRTypeArrayOutput
}

type ClusterCIDRTypeArray []ClusterCIDRTypeInput

func (ClusterCIDRTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCIDRType)(nil)).Elem()
}

func (i ClusterCIDRTypeArray) ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput {
	return i.ToClusterCIDRTypeArrayOutputWithContext(context.Background())
}

func (i ClusterCIDRTypeArray) ToClusterCIDRTypeArrayOutputWithContext(ctx context.Context) ClusterCIDRTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRTypeArrayOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRType)(nil)).Elem()
}

func (o ClusterCIDRTypeOutput) ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput {
	return o
}

func (o ClusterCIDRTypeOutput) ToClusterCIDRTypeOutputWithContext(ctx context.Context) ClusterCIDRTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterCIDRTypeOutput) Spec() ClusterCIDRSpecPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *ClusterCIDRSpec { return v.Spec }).(ClusterCIDRSpecPtrOutput)
}

type ClusterCIDRTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterCIDRTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCIDRType)(nil)).Elem()
}

func (o ClusterCIDRTypeArrayOutput) ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput {
	return o
}

func (o ClusterCIDRTypeArrayOutput) ToClusterCIDRTypeArrayOutputWithContext(ctx context.Context) ClusterCIDRTypeArrayOutput {
	return o
}

func (o ClusterCIDRTypeArrayOutput) Index(i pulumi.IntInput) ClusterCIDRTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCIDRType {
		return vs[0].([]ClusterCIDRType)[vs[1].(int)]
	}).(ClusterCIDRTypeOutput)
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items []ClusterCIDRType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClusterCIDRListTypeInput is an input type that accepts ClusterCIDRListTypeArgs and ClusterCIDRListTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRListTypeInput` via:
//
//	ClusterCIDRListTypeArgs{...}
type ClusterCIDRListTypeInput interface {
	pulumi.Input

	ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput
	ToClusterCIDRListTypeOutputWithContext(context.Context) ClusterCIDRListTypeOutput
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items ClusterCIDRTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterCIDRListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRListType)(nil)).Elem()
}

func (i ClusterCIDRListTypeArgs) ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput {
	return i.ToClusterCIDRListTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRListTypeArgs) ToClusterCIDRListTypeOutputWithContext(ctx context.Context) ClusterCIDRListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRListTypeOutput)
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRListType)(nil)).Elem()
}

func (o ClusterCIDRListTypeOutput) ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput {
	return o
}

func (o ClusterCIDRListTypeOutput) ToClusterCIDRListTypeOutputWithContext(ctx context.Context) ClusterCIDRListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of ClusterCIDRs.
func (o ClusterCIDRListTypeOutput) Items() ClusterCIDRTypeArrayOutput {
	return o.ApplyT(func(v ClusterCIDRListType) []ClusterCIDRType { return v.Items }).(ClusterCIDRTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterCIDRSpecPatch `pulumi:"spec"`
}

// ClusterCIDRPatchTypeInput is an input type that accepts ClusterCIDRPatchTypeArgs and ClusterCIDRPatchTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRPatchTypeInput` via:
//
//	ClusterCIDRPatchTypeArgs{...}
type ClusterCIDRPatchTypeInput interface {
	pulumi.Input

	ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput
	ToClusterCIDRPatchTypeOutputWithContext(context.Context) ClusterCIDRPatchTypeOutput
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecPatchPtrInput `pulumi:"spec"`
}

func (ClusterCIDRPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRPatchType)(nil)).Elem()
}

func (i ClusterCIDRPatchTypeArgs) ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput {
	return i.ToClusterCIDRPatchTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRPatchTypeArgs) ToClusterCIDRPatchTypeOutputWithContext(ctx context.Context) ClusterCIDRPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRPatchTypeOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRPatchType)(nil)).Elem()
}

func (o ClusterCIDRPatchTypeOutput) ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput {
	return o
}

func (o ClusterCIDRPatchTypeOutput) ToClusterCIDRPatchTypeOutputWithContext(ctx context.Context) ClusterCIDRPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterCIDRPatchTypeOutput) Spec() ClusterCIDRSpecPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *ClusterCIDRSpecPatch { return v.Spec }).(ClusterCIDRSpecPatchPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpec struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 *string `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 *string `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector *corev1.NodeSelector `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits int `pulumi:"perNodeHostBits"`
}

// ClusterCIDRSpecInput is an input type that accepts ClusterCIDRSpecArgs and ClusterCIDRSpecOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecInput` via:
//
//	ClusterCIDRSpecArgs{...}
type ClusterCIDRSpecInput interface {
	pulumi.Input

	ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput
	ToClusterCIDRSpecOutputWithContext(context.Context) ClusterCIDRSpecOutput
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecArgs struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 pulumi.StringPtrInput `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector corev1.NodeSelectorPtrInput `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits pulumi.IntInput `pulumi:"perNodeHostBits"`
}

func (ClusterCIDRSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpec)(nil)).Elem()
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput {
	return i.ToClusterCIDRSpecOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecOutputWithContext(ctx context.Context) ClusterCIDRSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecOutput)
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return i.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecOutput).ToClusterCIDRSpecPtrOutputWithContext(ctx)
}

// ClusterCIDRSpecPtrInput is an input type that accepts ClusterCIDRSpecArgs, ClusterCIDRSpecPtr and ClusterCIDRSpecPtrOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPtrInput` via:
//
//	        ClusterCIDRSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterCIDRSpecPtrInput interface {
	pulumi.Input

	ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput
	ToClusterCIDRSpecPtrOutputWithContext(context.Context) ClusterCIDRSpecPtrOutput
}

type clusterCIDRSpecPtrType ClusterCIDRSpecArgs

func ClusterCIDRSpecPtr(v *ClusterCIDRSpecArgs) ClusterCIDRSpecPtrInput {
	return (*clusterCIDRSpecPtrType)(v)
}

func (*clusterCIDRSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpec)(nil)).Elem()
}

func (i *clusterCIDRSpecPtrType) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return i.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (i *clusterCIDRSpecPtrType) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpec)(nil)).Elem()
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput {
	return o
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecOutputWithContext(ctx context.Context) ClusterCIDRSpecOutput {
	return o
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return o.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCIDRSpec) *ClusterCIDRSpec {
		return &v
	}).(ClusterCIDRSpecPtrOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *string { return v.Ipv4 }).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecOutput) NodeSelector() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *corev1.NodeSelector { return v.NodeSelector }).(corev1.NodeSelectorPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecOutput) PerNodeHostBits() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) int { return v.PerNodeHostBits }).(pulumi.IntOutput)
}

type ClusterCIDRSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpec)(nil)).Elem()
}

func (o ClusterCIDRSpecPtrOutput) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return o
}

func (o ClusterCIDRSpecPtrOutput) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return o
}

func (o ClusterCIDRSpecPtrOutput) Elem() ClusterCIDRSpecOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) ClusterCIDRSpec {
		if v != nil {
			return *v
		}
		var ret ClusterCIDRSpec
		return ret
	}).(ClusterCIDRSpecOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ipv4
	}).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6
	}).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) NodeSelector() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *corev1.NodeSelector {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(corev1.NodeSelectorPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPtrOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *int {
		if v == nil {
			return nil
		}
		return &v.PerNodeHostBits
	}).(pulumi.IntPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatch struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 *string `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 *string `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector *corev1.NodeSelectorPatch `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits *int `pulumi:"perNodeHostBits"`
}

// ClusterCIDRSpecPatchInput is an input type that accepts ClusterCIDRSpecPatchArgs and ClusterCIDRSpecPatchOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPatchInput` via:
//
//	ClusterCIDRSpecPatchArgs{...}
type ClusterCIDRSpecPatchInput interface {
	pulumi.Input

	ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput
	ToClusterCIDRSpecPatchOutputWithContext(context.Context) ClusterCIDRSpecPatchOutput
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatchArgs struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 pulumi.StringPtrInput `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector corev1.NodeSelectorPatchPtrInput `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits pulumi.IntPtrInput `pulumi:"perNodeHostBits"`
}

func (ClusterCIDRSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpecPatch)(nil)).Elem()
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput {
	return i.ToClusterCIDRSpecPatchOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchOutput)
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return i.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchOutput).ToClusterCIDRSpecPatchPtrOutputWithContext(ctx)
}

// ClusterCIDRSpecPatchPtrInput is an input type that accepts ClusterCIDRSpecPatchArgs, ClusterCIDRSpecPatchPtr and ClusterCIDRSpecPatchPtrOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPatchPtrInput` via:
//
//	        ClusterCIDRSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ClusterCIDRSpecPatchPtrInput interface {
	pulumi.Input

	ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput
	ToClusterCIDRSpecPatchPtrOutputWithContext(context.Context) ClusterCIDRSpecPatchPtrOutput
}

type clusterCIDRSpecPatchPtrType ClusterCIDRSpecPatchArgs

func ClusterCIDRSpecPatchPtr(v *ClusterCIDRSpecPatchArgs) ClusterCIDRSpecPatchPtrInput {
	return (*clusterCIDRSpecPatchPtrType)(v)
}

func (*clusterCIDRSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpecPatch)(nil)).Elem()
}

func (i *clusterCIDRSpecPatchPtrType) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return i.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i *clusterCIDRSpecPatchPtrType) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatchOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpecPatch)(nil)).Elem()
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput {
	return o
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchOutput {
	return o
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return o.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCIDRSpecPatch) *ClusterCIDRSpecPatch {
		return &v
	}).(ClusterCIDRSpecPatchPtrOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *string { return v.Ipv4 }).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) NodeSelector() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *corev1.NodeSelectorPatch { return v.NodeSelector }).(corev1.NodeSelectorPatchPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPatchOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *int { return v.PerNodeHostBits }).(pulumi.IntPtrOutput)
}

type ClusterCIDRSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpecPatch)(nil)).Elem()
}

func (o ClusterCIDRSpecPatchPtrOutput) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return o
}

func (o ClusterCIDRSpecPatchPtrOutput) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return o
}

func (o ClusterCIDRSpecPatchPtrOutput) Elem() ClusterCIDRSpecPatchOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) ClusterCIDRSpecPatch {
		if v != nil {
			return *v
		}
		var ret ClusterCIDRSpecPatch
		return ret
	}).(ClusterCIDRSpecPatchOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ipv4
	}).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6
	}).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) NodeSelector() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *corev1.NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(corev1.NodeSelectorPatchPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.PerNodeHostBits
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRTypeInput)(nil)).Elem(), ClusterCIDRTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRTypeArrayInput)(nil)).Elem(), ClusterCIDRTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRListTypeInput)(nil)).Elem(), ClusterCIDRListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRPatchTypeInput)(nil)).Elem(), ClusterCIDRPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecInput)(nil)).Elem(), ClusterCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPtrInput)(nil)).Elem(), ClusterCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPatchInput)(nil)).Elem(), ClusterCIDRSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPatchPtrInput)(nil)).Elem(), ClusterCIDRSpecPatchArgs{})
	pulumi.RegisterOutputType(ClusterCIDRTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterCIDRListTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRPatchTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPatchOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPatchPtrOutput{})
}
