// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterCIDRSpec `pulumi:"spec"`
}

// ClusterCIDRTypeInput is an input type that accepts ClusterCIDRTypeArgs and ClusterCIDRTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRTypeInput` via:
//
//	ClusterCIDRTypeArgs{...}
type ClusterCIDRTypeInput interface {
	pulumi.Input

	ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput
	ToClusterCIDRTypeOutputWithContext(context.Context) ClusterCIDRTypeOutput
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecPtrInput `pulumi:"spec"`
}

func (ClusterCIDRTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRType)(nil)).Elem()
}

func (i ClusterCIDRTypeArgs) ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput {
	return i.ToClusterCIDRTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRTypeArgs) ToClusterCIDRTypeOutputWithContext(ctx context.Context) ClusterCIDRTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRTypeOutput)
}

// ClusterCIDRTypeArrayInput is an input type that accepts ClusterCIDRTypeArray and ClusterCIDRTypeArrayOutput values.
// You can construct a concrete instance of `ClusterCIDRTypeArrayInput` via:
//
//	ClusterCIDRTypeArray{ ClusterCIDRTypeArgs{...} }
type ClusterCIDRTypeArrayInput interface {
	pulumi.Input

	ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput
	ToClusterCIDRTypeArrayOutputWithContext(context.Context) ClusterCIDRTypeArrayOutput
}

type ClusterCIDRTypeArray []ClusterCIDRTypeInput

func (ClusterCIDRTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCIDRType)(nil)).Elem()
}

func (i ClusterCIDRTypeArray) ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput {
	return i.ToClusterCIDRTypeArrayOutputWithContext(context.Background())
}

func (i ClusterCIDRTypeArray) ToClusterCIDRTypeArrayOutputWithContext(ctx context.Context) ClusterCIDRTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRTypeArrayOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRType)(nil)).Elem()
}

func (o ClusterCIDRTypeOutput) ToClusterCIDRTypeOutput() ClusterCIDRTypeOutput {
	return o
}

func (o ClusterCIDRTypeOutput) ToClusterCIDRTypeOutputWithContext(ctx context.Context) ClusterCIDRTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterCIDRTypeOutput) Spec() ClusterCIDRSpecPtrOutput {
	return o.ApplyT(func(v ClusterCIDRType) *ClusterCIDRSpec { return v.Spec }).(ClusterCIDRSpecPtrOutput)
}

type ClusterCIDRTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterCIDRTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCIDRType)(nil)).Elem()
}

func (o ClusterCIDRTypeArrayOutput) ToClusterCIDRTypeArrayOutput() ClusterCIDRTypeArrayOutput {
	return o
}

func (o ClusterCIDRTypeArrayOutput) ToClusterCIDRTypeArrayOutputWithContext(ctx context.Context) ClusterCIDRTypeArrayOutput {
	return o
}

func (o ClusterCIDRTypeArrayOutput) Index(i pulumi.IntInput) ClusterCIDRTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCIDRType {
		return vs[0].([]ClusterCIDRType)[vs[1].(int)]
	}).(ClusterCIDRTypeOutput)
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items []ClusterCIDRType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClusterCIDRListTypeInput is an input type that accepts ClusterCIDRListTypeArgs and ClusterCIDRListTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRListTypeInput` via:
//
//	ClusterCIDRListTypeArgs{...}
type ClusterCIDRListTypeInput interface {
	pulumi.Input

	ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput
	ToClusterCIDRListTypeOutputWithContext(context.Context) ClusterCIDRListTypeOutput
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Items is the list of ClusterCIDRs.
	Items ClusterCIDRTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClusterCIDRListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRListType)(nil)).Elem()
}

func (i ClusterCIDRListTypeArgs) ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput {
	return i.ToClusterCIDRListTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRListTypeArgs) ToClusterCIDRListTypeOutputWithContext(ctx context.Context) ClusterCIDRListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRListTypeOutput)
}

// ClusterCIDRList contains a list of ClusterCIDR.
type ClusterCIDRListTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRListType)(nil)).Elem()
}

func (o ClusterCIDRListTypeOutput) ToClusterCIDRListTypeOutput() ClusterCIDRListTypeOutput {
	return o
}

func (o ClusterCIDRListTypeOutput) ToClusterCIDRListTypeOutputWithContext(ctx context.Context) ClusterCIDRListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Items is the list of ClusterCIDRs.
func (o ClusterCIDRListTypeOutput) Items() ClusterCIDRTypeArrayOutput {
	return o.ApplyT(func(v ClusterCIDRListType) []ClusterCIDRType { return v.Items }).(ClusterCIDRTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClusterCIDRListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterCIDRSpecPatch `pulumi:"spec"`
}

// ClusterCIDRPatchTypeInput is an input type that accepts ClusterCIDRPatchTypeArgs and ClusterCIDRPatchTypeOutput values.
// You can construct a concrete instance of `ClusterCIDRPatchTypeInput` via:
//
//	ClusterCIDRPatchTypeArgs{...}
type ClusterCIDRPatchTypeInput interface {
	pulumi.Input

	ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput
	ToClusterCIDRPatchTypeOutputWithContext(context.Context) ClusterCIDRPatchTypeOutput
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterCIDRSpecPatchPtrInput `pulumi:"spec"`
}

func (ClusterCIDRPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRPatchType)(nil)).Elem()
}

func (i ClusterCIDRPatchTypeArgs) ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput {
	return i.ToClusterCIDRPatchTypeOutputWithContext(context.Background())
}

func (i ClusterCIDRPatchTypeArgs) ToClusterCIDRPatchTypeOutputWithContext(ctx context.Context) ClusterCIDRPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRPatchTypeOutput)
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type ClusterCIDRPatchTypeOutput struct{ *pulumi.OutputState }

func (ClusterCIDRPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRPatchType)(nil)).Elem()
}

func (o ClusterCIDRPatchTypeOutput) ToClusterCIDRPatchTypeOutput() ClusterCIDRPatchTypeOutput {
	return o
}

func (o ClusterCIDRPatchTypeOutput) ToClusterCIDRPatchTypeOutputWithContext(ctx context.Context) ClusterCIDRPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterCIDRPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterCIDRPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterCIDRPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// Spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterCIDRPatchTypeOutput) Spec() ClusterCIDRSpecPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRPatchType) *ClusterCIDRSpecPatch { return v.Spec }).(ClusterCIDRSpecPatchPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpec struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 *string `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 *string `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector *corev1.NodeSelector `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits int `pulumi:"perNodeHostBits"`
}

// ClusterCIDRSpecInput is an input type that accepts ClusterCIDRSpecArgs and ClusterCIDRSpecOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecInput` via:
//
//	ClusterCIDRSpecArgs{...}
type ClusterCIDRSpecInput interface {
	pulumi.Input

	ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput
	ToClusterCIDRSpecOutputWithContext(context.Context) ClusterCIDRSpecOutput
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecArgs struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 pulumi.StringPtrInput `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector corev1.NodeSelectorPtrInput `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits pulumi.IntInput `pulumi:"perNodeHostBits"`
}

func (ClusterCIDRSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpec)(nil)).Elem()
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput {
	return i.ToClusterCIDRSpecOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecOutputWithContext(ctx context.Context) ClusterCIDRSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecOutput)
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return i.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecArgs) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecOutput).ToClusterCIDRSpecPtrOutputWithContext(ctx)
}

// ClusterCIDRSpecPtrInput is an input type that accepts ClusterCIDRSpecArgs, ClusterCIDRSpecPtr and ClusterCIDRSpecPtrOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPtrInput` via:
//
//	        ClusterCIDRSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterCIDRSpecPtrInput interface {
	pulumi.Input

	ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput
	ToClusterCIDRSpecPtrOutputWithContext(context.Context) ClusterCIDRSpecPtrOutput
}

type clusterCIDRSpecPtrType ClusterCIDRSpecArgs

func ClusterCIDRSpecPtr(v *ClusterCIDRSpecArgs) ClusterCIDRSpecPtrInput {
	return (*clusterCIDRSpecPtrType)(v)
}

func (*clusterCIDRSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpec)(nil)).Elem()
}

func (i *clusterCIDRSpecPtrType) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return i.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (i *clusterCIDRSpecPtrType) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpec)(nil)).Elem()
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecOutput() ClusterCIDRSpecOutput {
	return o
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecOutputWithContext(ctx context.Context) ClusterCIDRSpecOutput {
	return o
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return o.ToClusterCIDRSpecPtrOutputWithContext(context.Background())
}

func (o ClusterCIDRSpecOutput) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCIDRSpec) *ClusterCIDRSpec {
		return &v
	}).(ClusterCIDRSpecPtrOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *string { return v.Ipv4 }).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecOutput) NodeSelector() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) *corev1.NodeSelector { return v.NodeSelector }).(corev1.NodeSelectorPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecOutput) PerNodeHostBits() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterCIDRSpec) int { return v.PerNodeHostBits }).(pulumi.IntOutput)
}

type ClusterCIDRSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpec)(nil)).Elem()
}

func (o ClusterCIDRSpecPtrOutput) ToClusterCIDRSpecPtrOutput() ClusterCIDRSpecPtrOutput {
	return o
}

func (o ClusterCIDRSpecPtrOutput) ToClusterCIDRSpecPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPtrOutput {
	return o
}

func (o ClusterCIDRSpecPtrOutput) Elem() ClusterCIDRSpecOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) ClusterCIDRSpec {
		if v != nil {
			return *v
		}
		var ret ClusterCIDRSpec
		return ret
	}).(ClusterCIDRSpecOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ipv4
	}).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6
	}).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPtrOutput) NodeSelector() corev1.NodeSelectorPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *corev1.NodeSelector {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(corev1.NodeSelectorPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPtrOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpec) *int {
		if v == nil {
			return nil
		}
		return &v.PerNodeHostBits
	}).(pulumi.IntPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatch struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 *string `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 *string `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector *corev1.NodeSelectorPatch `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits *int `pulumi:"perNodeHostBits"`
}

// ClusterCIDRSpecPatchInput is an input type that accepts ClusterCIDRSpecPatchArgs and ClusterCIDRSpecPatchOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPatchInput` via:
//
//	ClusterCIDRSpecPatchArgs{...}
type ClusterCIDRSpecPatchInput interface {
	pulumi.Input

	ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput
	ToClusterCIDRSpecPatchOutputWithContext(context.Context) ClusterCIDRSpecPatchOutput
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatchArgs struct {
	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv4 pulumi.StringPtrInput `pulumi:"ipv4"`
	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
	NodeSelector corev1.NodeSelectorPatchPtrInput `pulumi:"nodeSelector"`
	// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits pulumi.IntPtrInput `pulumi:"perNodeHostBits"`
}

func (ClusterCIDRSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpecPatch)(nil)).Elem()
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput {
	return i.ToClusterCIDRSpecPatchOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchOutput)
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return i.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i ClusterCIDRSpecPatchArgs) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchOutput).ToClusterCIDRSpecPatchPtrOutputWithContext(ctx)
}

// ClusterCIDRSpecPatchPtrInput is an input type that accepts ClusterCIDRSpecPatchArgs, ClusterCIDRSpecPatchPtr and ClusterCIDRSpecPatchPtrOutput values.
// You can construct a concrete instance of `ClusterCIDRSpecPatchPtrInput` via:
//
//	        ClusterCIDRSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ClusterCIDRSpecPatchPtrInput interface {
	pulumi.Input

	ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput
	ToClusterCIDRSpecPatchPtrOutputWithContext(context.Context) ClusterCIDRSpecPatchPtrOutput
}

type clusterCIDRSpecPatchPtrType ClusterCIDRSpecPatchArgs

func ClusterCIDRSpecPatchPtr(v *ClusterCIDRSpecPatchArgs) ClusterCIDRSpecPatchPtrInput {
	return (*clusterCIDRSpecPatchPtrType)(v)
}

func (*clusterCIDRSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpecPatch)(nil)).Elem()
}

func (i *clusterCIDRSpecPatchPtrType) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return i.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i *clusterCIDRSpecPatchPtrType) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCIDRSpecPatchPtrOutput)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type ClusterCIDRSpecPatchOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCIDRSpecPatch)(nil)).Elem()
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchOutput() ClusterCIDRSpecPatchOutput {
	return o
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchOutput {
	return o
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return o.ToClusterCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (o ClusterCIDRSpecPatchOutput) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCIDRSpecPatch) *ClusterCIDRSpecPatch {
		return &v
	}).(ClusterCIDRSpecPatchPtrOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *string { return v.Ipv4 }).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPatchOutput) NodeSelector() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *corev1.NodeSelectorPatch { return v.NodeSelector }).(corev1.NodeSelectorPatchPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPatchOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCIDRSpecPatch) *int { return v.PerNodeHostBits }).(pulumi.IntPtrOutput)
}

type ClusterCIDRSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ClusterCIDRSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCIDRSpecPatch)(nil)).Elem()
}

func (o ClusterCIDRSpecPatchPtrOutput) ToClusterCIDRSpecPatchPtrOutput() ClusterCIDRSpecPatchPtrOutput {
	return o
}

func (o ClusterCIDRSpecPatchPtrOutput) ToClusterCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ClusterCIDRSpecPatchPtrOutput {
	return o
}

func (o ClusterCIDRSpecPatchPtrOutput) Elem() ClusterCIDRSpecPatchOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) ClusterCIDRSpecPatch {
		if v != nil {
			return *v
		}
		var ret ClusterCIDRSpecPatch
		return ret
	}).(ClusterCIDRSpecPatchOutput)
}

// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ipv4
	}).(pulumi.StringPtrOutput)
}

// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of IPv4 and IPv6 must be specified. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6
	}).(pulumi.StringPtrOutput)
}

// NodeSelector defines which nodes the config is applicable to. An empty or nil NodeSelector selects all nodes. This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) NodeSelector() corev1.NodeSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *corev1.NodeSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(corev1.NodeSelectorPatchPtrOutput)
}

// PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
func (o ClusterCIDRSpecPatchPtrOutput) PerNodeHostBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterCIDRSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.PerNodeHostBits
	}).(pulumi.IntPtrOutput)
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IPAddressSpec `pulumi:"spec"`
}

// IPAddressTypeInput is an input type that accepts IPAddressTypeArgs and IPAddressTypeOutput values.
// You can construct a concrete instance of `IPAddressTypeInput` via:
//
//	IPAddressTypeArgs{...}
type IPAddressTypeInput interface {
	pulumi.Input

	ToIPAddressTypeOutput() IPAddressTypeOutput
	ToIPAddressTypeOutputWithContext(context.Context) IPAddressTypeOutput
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecPtrInput `pulumi:"spec"`
}

func (IPAddressTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressType)(nil)).Elem()
}

func (i IPAddressTypeArgs) ToIPAddressTypeOutput() IPAddressTypeOutput {
	return i.ToIPAddressTypeOutputWithContext(context.Background())
}

func (i IPAddressTypeArgs) ToIPAddressTypeOutputWithContext(ctx context.Context) IPAddressTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressTypeOutput)
}

// IPAddressTypeArrayInput is an input type that accepts IPAddressTypeArray and IPAddressTypeArrayOutput values.
// You can construct a concrete instance of `IPAddressTypeArrayInput` via:
//
//	IPAddressTypeArray{ IPAddressTypeArgs{...} }
type IPAddressTypeArrayInput interface {
	pulumi.Input

	ToIPAddressTypeArrayOutput() IPAddressTypeArrayOutput
	ToIPAddressTypeArrayOutputWithContext(context.Context) IPAddressTypeArrayOutput
}

type IPAddressTypeArray []IPAddressTypeInput

func (IPAddressTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPAddressType)(nil)).Elem()
}

func (i IPAddressTypeArray) ToIPAddressTypeArrayOutput() IPAddressTypeArrayOutput {
	return i.ToIPAddressTypeArrayOutputWithContext(context.Background())
}

func (i IPAddressTypeArray) ToIPAddressTypeArrayOutputWithContext(ctx context.Context) IPAddressTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressTypeArrayOutput)
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressTypeOutput struct{ *pulumi.OutputState }

func (IPAddressTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressType)(nil)).Elem()
}

func (o IPAddressTypeOutput) ToIPAddressTypeOutput() IPAddressTypeOutput {
	return o
}

func (o IPAddressTypeOutput) ToIPAddressTypeOutputWithContext(ctx context.Context) IPAddressTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IPAddressTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IPAddressTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IPAddressTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v IPAddressType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IPAddressTypeOutput) Spec() IPAddressSpecPtrOutput {
	return o.ApplyT(func(v IPAddressType) *IPAddressSpec { return v.Spec }).(IPAddressSpecPtrOutput)
}

type IPAddressTypeArrayOutput struct{ *pulumi.OutputState }

func (IPAddressTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPAddressType)(nil)).Elem()
}

func (o IPAddressTypeArrayOutput) ToIPAddressTypeArrayOutput() IPAddressTypeArrayOutput {
	return o
}

func (o IPAddressTypeArrayOutput) ToIPAddressTypeArrayOutputWithContext(ctx context.Context) IPAddressTypeArrayOutput {
	return o
}

func (o IPAddressTypeArrayOutput) Index(i pulumi.IntInput) IPAddressTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPAddressType {
		return vs[0].([]IPAddressType)[vs[1].(int)]
	}).(IPAddressTypeOutput)
}

// IPAddressList contains a list of IPAddress.
type IPAddressListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of IPAddresses.
	Items []IPAddressType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// IPAddressListTypeInput is an input type that accepts IPAddressListTypeArgs and IPAddressListTypeOutput values.
// You can construct a concrete instance of `IPAddressListTypeInput` via:
//
//	IPAddressListTypeArgs{...}
type IPAddressListTypeInput interface {
	pulumi.Input

	ToIPAddressListTypeOutput() IPAddressListTypeOutput
	ToIPAddressListTypeOutputWithContext(context.Context) IPAddressListTypeOutput
}

// IPAddressList contains a list of IPAddress.
type IPAddressListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of IPAddresses.
	Items IPAddressTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (IPAddressListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressListType)(nil)).Elem()
}

func (i IPAddressListTypeArgs) ToIPAddressListTypeOutput() IPAddressListTypeOutput {
	return i.ToIPAddressListTypeOutputWithContext(context.Background())
}

func (i IPAddressListTypeArgs) ToIPAddressListTypeOutputWithContext(ctx context.Context) IPAddressListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressListTypeOutput)
}

// IPAddressList contains a list of IPAddress.
type IPAddressListTypeOutput struct{ *pulumi.OutputState }

func (IPAddressListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressListType)(nil)).Elem()
}

func (o IPAddressListTypeOutput) ToIPAddressListTypeOutput() IPAddressListTypeOutput {
	return o
}

func (o IPAddressListTypeOutput) ToIPAddressListTypeOutputWithContext(ctx context.Context) IPAddressListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IPAddressListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of IPAddresses.
func (o IPAddressListTypeOutput) Items() IPAddressTypeArrayOutput {
	return o.ApplyT(func(v IPAddressListType) []IPAddressType { return v.Items }).(IPAddressTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IPAddressListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IPAddressListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v IPAddressListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *IPAddressSpecPatch `pulumi:"spec"`
}

// IPAddressPatchTypeInput is an input type that accepts IPAddressPatchTypeArgs and IPAddressPatchTypeOutput values.
// You can construct a concrete instance of `IPAddressPatchTypeInput` via:
//
//	IPAddressPatchTypeArgs{...}
type IPAddressPatchTypeInput interface {
	pulumi.Input

	ToIPAddressPatchTypeOutput() IPAddressPatchTypeOutput
	ToIPAddressPatchTypeOutputWithContext(context.Context) IPAddressPatchTypeOutput
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec IPAddressSpecPatchPtrInput `pulumi:"spec"`
}

func (IPAddressPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressPatchType)(nil)).Elem()
}

func (i IPAddressPatchTypeArgs) ToIPAddressPatchTypeOutput() IPAddressPatchTypeOutput {
	return i.ToIPAddressPatchTypeOutputWithContext(context.Background())
}

func (i IPAddressPatchTypeArgs) ToIPAddressPatchTypeOutputWithContext(ctx context.Context) IPAddressPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressPatchTypeOutput)
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IPAddressPatchTypeOutput struct{ *pulumi.OutputState }

func (IPAddressPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressPatchType)(nil)).Elem()
}

func (o IPAddressPatchTypeOutput) ToIPAddressPatchTypeOutput() IPAddressPatchTypeOutput {
	return o
}

func (o IPAddressPatchTypeOutput) ToIPAddressPatchTypeOutputWithContext(ctx context.Context) IPAddressPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IPAddressPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IPAddressPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAddressPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IPAddressPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v IPAddressPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o IPAddressPatchTypeOutput) Spec() IPAddressSpecPatchPtrOutput {
	return o.ApplyT(func(v IPAddressPatchType) *IPAddressSpecPatch { return v.Spec }).(IPAddressSpecPatchPtrOutput)
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpec struct {
	// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
	ParentRef *ParentReference `pulumi:"parentRef"`
}

// IPAddressSpecInput is an input type that accepts IPAddressSpecArgs and IPAddressSpecOutput values.
// You can construct a concrete instance of `IPAddressSpecInput` via:
//
//	IPAddressSpecArgs{...}
type IPAddressSpecInput interface {
	pulumi.Input

	ToIPAddressSpecOutput() IPAddressSpecOutput
	ToIPAddressSpecOutputWithContext(context.Context) IPAddressSpecOutput
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpecArgs struct {
	// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
	ParentRef ParentReferencePtrInput `pulumi:"parentRef"`
}

func (IPAddressSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressSpec)(nil)).Elem()
}

func (i IPAddressSpecArgs) ToIPAddressSpecOutput() IPAddressSpecOutput {
	return i.ToIPAddressSpecOutputWithContext(context.Background())
}

func (i IPAddressSpecArgs) ToIPAddressSpecOutputWithContext(ctx context.Context) IPAddressSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecOutput)
}

func (i IPAddressSpecArgs) ToIPAddressSpecPtrOutput() IPAddressSpecPtrOutput {
	return i.ToIPAddressSpecPtrOutputWithContext(context.Background())
}

func (i IPAddressSpecArgs) ToIPAddressSpecPtrOutputWithContext(ctx context.Context) IPAddressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecOutput).ToIPAddressSpecPtrOutputWithContext(ctx)
}

// IPAddressSpecPtrInput is an input type that accepts IPAddressSpecArgs, IPAddressSpecPtr and IPAddressSpecPtrOutput values.
// You can construct a concrete instance of `IPAddressSpecPtrInput` via:
//
//	        IPAddressSpecArgs{...}
//
//	or:
//
//	        nil
type IPAddressSpecPtrInput interface {
	pulumi.Input

	ToIPAddressSpecPtrOutput() IPAddressSpecPtrOutput
	ToIPAddressSpecPtrOutputWithContext(context.Context) IPAddressSpecPtrOutput
}

type ipaddressSpecPtrType IPAddressSpecArgs

func IPAddressSpecPtr(v *IPAddressSpecArgs) IPAddressSpecPtrInput {
	return (*ipaddressSpecPtrType)(v)
}

func (*ipaddressSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressSpec)(nil)).Elem()
}

func (i *ipaddressSpecPtrType) ToIPAddressSpecPtrOutput() IPAddressSpecPtrOutput {
	return i.ToIPAddressSpecPtrOutputWithContext(context.Background())
}

func (i *ipaddressSpecPtrType) ToIPAddressSpecPtrOutputWithContext(ctx context.Context) IPAddressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecPtrOutput)
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpecOutput struct{ *pulumi.OutputState }

func (IPAddressSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressSpec)(nil)).Elem()
}

func (o IPAddressSpecOutput) ToIPAddressSpecOutput() IPAddressSpecOutput {
	return o
}

func (o IPAddressSpecOutput) ToIPAddressSpecOutputWithContext(ctx context.Context) IPAddressSpecOutput {
	return o
}

func (o IPAddressSpecOutput) ToIPAddressSpecPtrOutput() IPAddressSpecPtrOutput {
	return o.ToIPAddressSpecPtrOutputWithContext(context.Background())
}

func (o IPAddressSpecOutput) ToIPAddressSpecPtrOutputWithContext(ctx context.Context) IPAddressSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPAddressSpec) *IPAddressSpec {
		return &v
	}).(IPAddressSpecPtrOutput)
}

// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
func (o IPAddressSpecOutput) ParentRef() ParentReferencePtrOutput {
	return o.ApplyT(func(v IPAddressSpec) *ParentReference { return v.ParentRef }).(ParentReferencePtrOutput)
}

type IPAddressSpecPtrOutput struct{ *pulumi.OutputState }

func (IPAddressSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressSpec)(nil)).Elem()
}

func (o IPAddressSpecPtrOutput) ToIPAddressSpecPtrOutput() IPAddressSpecPtrOutput {
	return o
}

func (o IPAddressSpecPtrOutput) ToIPAddressSpecPtrOutputWithContext(ctx context.Context) IPAddressSpecPtrOutput {
	return o
}

func (o IPAddressSpecPtrOutput) Elem() IPAddressSpecOutput {
	return o.ApplyT(func(v *IPAddressSpec) IPAddressSpec {
		if v != nil {
			return *v
		}
		var ret IPAddressSpec
		return ret
	}).(IPAddressSpecOutput)
}

// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
func (o IPAddressSpecPtrOutput) ParentRef() ParentReferencePtrOutput {
	return o.ApplyT(func(v *IPAddressSpec) *ParentReference {
		if v == nil {
			return nil
		}
		return v.ParentRef
	}).(ParentReferencePtrOutput)
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpecPatch struct {
	// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
	ParentRef *ParentReferencePatch `pulumi:"parentRef"`
}

// IPAddressSpecPatchInput is an input type that accepts IPAddressSpecPatchArgs and IPAddressSpecPatchOutput values.
// You can construct a concrete instance of `IPAddressSpecPatchInput` via:
//
//	IPAddressSpecPatchArgs{...}
type IPAddressSpecPatchInput interface {
	pulumi.Input

	ToIPAddressSpecPatchOutput() IPAddressSpecPatchOutput
	ToIPAddressSpecPatchOutputWithContext(context.Context) IPAddressSpecPatchOutput
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpecPatchArgs struct {
	// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
	ParentRef ParentReferencePatchPtrInput `pulumi:"parentRef"`
}

func (IPAddressSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressSpecPatch)(nil)).Elem()
}

func (i IPAddressSpecPatchArgs) ToIPAddressSpecPatchOutput() IPAddressSpecPatchOutput {
	return i.ToIPAddressSpecPatchOutputWithContext(context.Background())
}

func (i IPAddressSpecPatchArgs) ToIPAddressSpecPatchOutputWithContext(ctx context.Context) IPAddressSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecPatchOutput)
}

func (i IPAddressSpecPatchArgs) ToIPAddressSpecPatchPtrOutput() IPAddressSpecPatchPtrOutput {
	return i.ToIPAddressSpecPatchPtrOutputWithContext(context.Background())
}

func (i IPAddressSpecPatchArgs) ToIPAddressSpecPatchPtrOutputWithContext(ctx context.Context) IPAddressSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecPatchOutput).ToIPAddressSpecPatchPtrOutputWithContext(ctx)
}

// IPAddressSpecPatchPtrInput is an input type that accepts IPAddressSpecPatchArgs, IPAddressSpecPatchPtr and IPAddressSpecPatchPtrOutput values.
// You can construct a concrete instance of `IPAddressSpecPatchPtrInput` via:
//
//	        IPAddressSpecPatchArgs{...}
//
//	or:
//
//	        nil
type IPAddressSpecPatchPtrInput interface {
	pulumi.Input

	ToIPAddressSpecPatchPtrOutput() IPAddressSpecPatchPtrOutput
	ToIPAddressSpecPatchPtrOutputWithContext(context.Context) IPAddressSpecPatchPtrOutput
}

type ipaddressSpecPatchPtrType IPAddressSpecPatchArgs

func IPAddressSpecPatchPtr(v *IPAddressSpecPatchArgs) IPAddressSpecPatchPtrInput {
	return (*ipaddressSpecPatchPtrType)(v)
}

func (*ipaddressSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressSpecPatch)(nil)).Elem()
}

func (i *ipaddressSpecPatchPtrType) ToIPAddressSpecPatchPtrOutput() IPAddressSpecPatchPtrOutput {
	return i.ToIPAddressSpecPatchPtrOutputWithContext(context.Background())
}

func (i *ipaddressSpecPatchPtrType) ToIPAddressSpecPatchPtrOutputWithContext(ctx context.Context) IPAddressSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAddressSpecPatchPtrOutput)
}

// IPAddressSpec describe the attributes in an IP Address.
type IPAddressSpecPatchOutput struct{ *pulumi.OutputState }

func (IPAddressSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAddressSpecPatch)(nil)).Elem()
}

func (o IPAddressSpecPatchOutput) ToIPAddressSpecPatchOutput() IPAddressSpecPatchOutput {
	return o
}

func (o IPAddressSpecPatchOutput) ToIPAddressSpecPatchOutputWithContext(ctx context.Context) IPAddressSpecPatchOutput {
	return o
}

func (o IPAddressSpecPatchOutput) ToIPAddressSpecPatchPtrOutput() IPAddressSpecPatchPtrOutput {
	return o.ToIPAddressSpecPatchPtrOutputWithContext(context.Background())
}

func (o IPAddressSpecPatchOutput) ToIPAddressSpecPatchPtrOutputWithContext(ctx context.Context) IPAddressSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPAddressSpecPatch) *IPAddressSpecPatch {
		return &v
	}).(IPAddressSpecPatchPtrOutput)
}

// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
func (o IPAddressSpecPatchOutput) ParentRef() ParentReferencePatchPtrOutput {
	return o.ApplyT(func(v IPAddressSpecPatch) *ParentReferencePatch { return v.ParentRef }).(ParentReferencePatchPtrOutput)
}

type IPAddressSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (IPAddressSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAddressSpecPatch)(nil)).Elem()
}

func (o IPAddressSpecPatchPtrOutput) ToIPAddressSpecPatchPtrOutput() IPAddressSpecPatchPtrOutput {
	return o
}

func (o IPAddressSpecPatchPtrOutput) ToIPAddressSpecPatchPtrOutputWithContext(ctx context.Context) IPAddressSpecPatchPtrOutput {
	return o
}

func (o IPAddressSpecPatchPtrOutput) Elem() IPAddressSpecPatchOutput {
	return o.ApplyT(func(v *IPAddressSpecPatch) IPAddressSpecPatch {
		if v != nil {
			return *v
		}
		var ret IPAddressSpecPatch
		return ret
	}).(IPAddressSpecPatchOutput)
}

// ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
func (o IPAddressSpecPatchPtrOutput) ParentRef() ParentReferencePatchPtrOutput {
	return o.ApplyT(func(v *IPAddressSpecPatch) *ParentReferencePatch {
		if v == nil {
			return nil
		}
		return v.ParentRef
	}).(ParentReferencePatchPtrOutput)
}

// ParentReference describes a reference to a parent object.
type ParentReference struct {
	// Group is the group of the object being referenced.
	Group *string `pulumi:"group"`
	// Name is the name of the object being referenced.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the object being referenced.
	Namespace *string `pulumi:"namespace"`
	// Resource is the resource of the object being referenced.
	Resource *string `pulumi:"resource"`
	// UID is the uid of the object being referenced.
	Uid *string `pulumi:"uid"`
}

// ParentReferenceInput is an input type that accepts ParentReferenceArgs and ParentReferenceOutput values.
// You can construct a concrete instance of `ParentReferenceInput` via:
//
//	ParentReferenceArgs{...}
type ParentReferenceInput interface {
	pulumi.Input

	ToParentReferenceOutput() ParentReferenceOutput
	ToParentReferenceOutputWithContext(context.Context) ParentReferenceOutput
}

// ParentReference describes a reference to a parent object.
type ParentReferenceArgs struct {
	// Group is the group of the object being referenced.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name is the name of the object being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the object being referenced.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Resource is the resource of the object being referenced.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// UID is the uid of the object being referenced.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ParentReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentReference)(nil)).Elem()
}

func (i ParentReferenceArgs) ToParentReferenceOutput() ParentReferenceOutput {
	return i.ToParentReferenceOutputWithContext(context.Background())
}

func (i ParentReferenceArgs) ToParentReferenceOutputWithContext(ctx context.Context) ParentReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferenceOutput)
}

func (i ParentReferenceArgs) ToParentReferencePtrOutput() ParentReferencePtrOutput {
	return i.ToParentReferencePtrOutputWithContext(context.Background())
}

func (i ParentReferenceArgs) ToParentReferencePtrOutputWithContext(ctx context.Context) ParentReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferenceOutput).ToParentReferencePtrOutputWithContext(ctx)
}

// ParentReferencePtrInput is an input type that accepts ParentReferenceArgs, ParentReferencePtr and ParentReferencePtrOutput values.
// You can construct a concrete instance of `ParentReferencePtrInput` via:
//
//	        ParentReferenceArgs{...}
//
//	or:
//
//	        nil
type ParentReferencePtrInput interface {
	pulumi.Input

	ToParentReferencePtrOutput() ParentReferencePtrOutput
	ToParentReferencePtrOutputWithContext(context.Context) ParentReferencePtrOutput
}

type parentReferencePtrType ParentReferenceArgs

func ParentReferencePtr(v *ParentReferenceArgs) ParentReferencePtrInput {
	return (*parentReferencePtrType)(v)
}

func (*parentReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentReference)(nil)).Elem()
}

func (i *parentReferencePtrType) ToParentReferencePtrOutput() ParentReferencePtrOutput {
	return i.ToParentReferencePtrOutputWithContext(context.Background())
}

func (i *parentReferencePtrType) ToParentReferencePtrOutputWithContext(ctx context.Context) ParentReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferencePtrOutput)
}

// ParentReference describes a reference to a parent object.
type ParentReferenceOutput struct{ *pulumi.OutputState }

func (ParentReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentReference)(nil)).Elem()
}

func (o ParentReferenceOutput) ToParentReferenceOutput() ParentReferenceOutput {
	return o
}

func (o ParentReferenceOutput) ToParentReferenceOutputWithContext(ctx context.Context) ParentReferenceOutput {
	return o
}

func (o ParentReferenceOutput) ToParentReferencePtrOutput() ParentReferencePtrOutput {
	return o.ToParentReferencePtrOutputWithContext(context.Background())
}

func (o ParentReferenceOutput) ToParentReferencePtrOutputWithContext(ctx context.Context) ParentReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParentReference) *ParentReference {
		return &v
	}).(ParentReferencePtrOutput)
}

// Group is the group of the object being referenced.
func (o ParentReferenceOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReference) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the object being referenced.
func (o ParentReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the object being referenced.
func (o ParentReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is the resource of the object being referenced.
func (o ParentReferenceOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReference) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// UID is the uid of the object being referenced.
func (o ParentReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ParentReferencePtrOutput struct{ *pulumi.OutputState }

func (ParentReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentReference)(nil)).Elem()
}

func (o ParentReferencePtrOutput) ToParentReferencePtrOutput() ParentReferencePtrOutput {
	return o
}

func (o ParentReferencePtrOutput) ToParentReferencePtrOutputWithContext(ctx context.Context) ParentReferencePtrOutput {
	return o
}

func (o ParentReferencePtrOutput) Elem() ParentReferenceOutput {
	return o.ApplyT(func(v *ParentReference) ParentReference {
		if v != nil {
			return *v
		}
		var ret ParentReference
		return ret
	}).(ParentReferenceOutput)
}

// Group is the group of the object being referenced.
func (o ParentReferencePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReference) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the object being referenced.
func (o ParentReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the object being referenced.
func (o ParentReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Resource is the resource of the object being referenced.
func (o ParentReferencePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReference) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// UID is the uid of the object being referenced.
func (o ParentReferencePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReference) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ParentReference describes a reference to a parent object.
type ParentReferencePatch struct {
	// Group is the group of the object being referenced.
	Group *string `pulumi:"group"`
	// Name is the name of the object being referenced.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the object being referenced.
	Namespace *string `pulumi:"namespace"`
	// Resource is the resource of the object being referenced.
	Resource *string `pulumi:"resource"`
	// UID is the uid of the object being referenced.
	Uid *string `pulumi:"uid"`
}

// ParentReferencePatchInput is an input type that accepts ParentReferencePatchArgs and ParentReferencePatchOutput values.
// You can construct a concrete instance of `ParentReferencePatchInput` via:
//
//	ParentReferencePatchArgs{...}
type ParentReferencePatchInput interface {
	pulumi.Input

	ToParentReferencePatchOutput() ParentReferencePatchOutput
	ToParentReferencePatchOutputWithContext(context.Context) ParentReferencePatchOutput
}

// ParentReference describes a reference to a parent object.
type ParentReferencePatchArgs struct {
	// Group is the group of the object being referenced.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name is the name of the object being referenced.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the object being referenced.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Resource is the resource of the object being referenced.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// UID is the uid of the object being referenced.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ParentReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentReferencePatch)(nil)).Elem()
}

func (i ParentReferencePatchArgs) ToParentReferencePatchOutput() ParentReferencePatchOutput {
	return i.ToParentReferencePatchOutputWithContext(context.Background())
}

func (i ParentReferencePatchArgs) ToParentReferencePatchOutputWithContext(ctx context.Context) ParentReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferencePatchOutput)
}

func (i ParentReferencePatchArgs) ToParentReferencePatchPtrOutput() ParentReferencePatchPtrOutput {
	return i.ToParentReferencePatchPtrOutputWithContext(context.Background())
}

func (i ParentReferencePatchArgs) ToParentReferencePatchPtrOutputWithContext(ctx context.Context) ParentReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferencePatchOutput).ToParentReferencePatchPtrOutputWithContext(ctx)
}

// ParentReferencePatchPtrInput is an input type that accepts ParentReferencePatchArgs, ParentReferencePatchPtr and ParentReferencePatchPtrOutput values.
// You can construct a concrete instance of `ParentReferencePatchPtrInput` via:
//
//	        ParentReferencePatchArgs{...}
//
//	or:
//
//	        nil
type ParentReferencePatchPtrInput interface {
	pulumi.Input

	ToParentReferencePatchPtrOutput() ParentReferencePatchPtrOutput
	ToParentReferencePatchPtrOutputWithContext(context.Context) ParentReferencePatchPtrOutput
}

type parentReferencePatchPtrType ParentReferencePatchArgs

func ParentReferencePatchPtr(v *ParentReferencePatchArgs) ParentReferencePatchPtrInput {
	return (*parentReferencePatchPtrType)(v)
}

func (*parentReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentReferencePatch)(nil)).Elem()
}

func (i *parentReferencePatchPtrType) ToParentReferencePatchPtrOutput() ParentReferencePatchPtrOutput {
	return i.ToParentReferencePatchPtrOutputWithContext(context.Background())
}

func (i *parentReferencePatchPtrType) ToParentReferencePatchPtrOutputWithContext(ctx context.Context) ParentReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentReferencePatchPtrOutput)
}

// ParentReference describes a reference to a parent object.
type ParentReferencePatchOutput struct{ *pulumi.OutputState }

func (ParentReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentReferencePatch)(nil)).Elem()
}

func (o ParentReferencePatchOutput) ToParentReferencePatchOutput() ParentReferencePatchOutput {
	return o
}

func (o ParentReferencePatchOutput) ToParentReferencePatchOutputWithContext(ctx context.Context) ParentReferencePatchOutput {
	return o
}

func (o ParentReferencePatchOutput) ToParentReferencePatchPtrOutput() ParentReferencePatchPtrOutput {
	return o.ToParentReferencePatchPtrOutputWithContext(context.Background())
}

func (o ParentReferencePatchOutput) ToParentReferencePatchPtrOutputWithContext(ctx context.Context) ParentReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParentReferencePatch) *ParentReferencePatch {
		return &v
	}).(ParentReferencePatchPtrOutput)
}

// Group is the group of the object being referenced.
func (o ParentReferencePatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReferencePatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name is the name of the object being referenced.
func (o ParentReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the object being referenced.
func (o ParentReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Resource is the resource of the object being referenced.
func (o ParentReferencePatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReferencePatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// UID is the uid of the object being referenced.
func (o ParentReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ParentReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (ParentReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentReferencePatch)(nil)).Elem()
}

func (o ParentReferencePatchPtrOutput) ToParentReferencePatchPtrOutput() ParentReferencePatchPtrOutput {
	return o
}

func (o ParentReferencePatchPtrOutput) ToParentReferencePatchPtrOutputWithContext(ctx context.Context) ParentReferencePatchPtrOutput {
	return o
}

func (o ParentReferencePatchPtrOutput) Elem() ParentReferencePatchOutput {
	return o.ApplyT(func(v *ParentReferencePatch) ParentReferencePatch {
		if v != nil {
			return *v
		}
		var ret ParentReferencePatch
		return ret
	}).(ParentReferencePatchOutput)
}

// Group is the group of the object being referenced.
func (o ParentReferencePatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the object being referenced.
func (o ParentReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the object being referenced.
func (o ParentReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Resource is the resource of the object being referenced.
func (o ParentReferencePatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// UID is the uid of the object being referenced.
func (o ParentReferencePatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceCIDRSpec `pulumi:"spec"`
	// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ServiceCIDRStatus `pulumi:"status"`
}

// ServiceCIDRTypeInput is an input type that accepts ServiceCIDRTypeArgs and ServiceCIDRTypeOutput values.
// You can construct a concrete instance of `ServiceCIDRTypeInput` via:
//
//	ServiceCIDRTypeArgs{...}
type ServiceCIDRTypeInput interface {
	pulumi.Input

	ToServiceCIDRTypeOutput() ServiceCIDRTypeOutput
	ToServiceCIDRTypeOutputWithContext(context.Context) ServiceCIDRTypeOutput
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceCIDRSpecPtrInput `pulumi:"spec"`
	// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceCIDRStatusPtrInput `pulumi:"status"`
}

func (ServiceCIDRTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRType)(nil)).Elem()
}

func (i ServiceCIDRTypeArgs) ToServiceCIDRTypeOutput() ServiceCIDRTypeOutput {
	return i.ToServiceCIDRTypeOutputWithContext(context.Background())
}

func (i ServiceCIDRTypeArgs) ToServiceCIDRTypeOutputWithContext(ctx context.Context) ServiceCIDRTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRTypeOutput)
}

// ServiceCIDRTypeArrayInput is an input type that accepts ServiceCIDRTypeArray and ServiceCIDRTypeArrayOutput values.
// You can construct a concrete instance of `ServiceCIDRTypeArrayInput` via:
//
//	ServiceCIDRTypeArray{ ServiceCIDRTypeArgs{...} }
type ServiceCIDRTypeArrayInput interface {
	pulumi.Input

	ToServiceCIDRTypeArrayOutput() ServiceCIDRTypeArrayOutput
	ToServiceCIDRTypeArrayOutputWithContext(context.Context) ServiceCIDRTypeArrayOutput
}

type ServiceCIDRTypeArray []ServiceCIDRTypeInput

func (ServiceCIDRTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCIDRType)(nil)).Elem()
}

func (i ServiceCIDRTypeArray) ToServiceCIDRTypeArrayOutput() ServiceCIDRTypeArrayOutput {
	return i.ToServiceCIDRTypeArrayOutputWithContext(context.Background())
}

func (i ServiceCIDRTypeArray) ToServiceCIDRTypeArrayOutputWithContext(ctx context.Context) ServiceCIDRTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRTypeArrayOutput)
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRTypeOutput struct{ *pulumi.OutputState }

func (ServiceCIDRTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRType)(nil)).Elem()
}

func (o ServiceCIDRTypeOutput) ToServiceCIDRTypeOutput() ServiceCIDRTypeOutput {
	return o
}

func (o ServiceCIDRTypeOutput) ToServiceCIDRTypeOutputWithContext(ctx context.Context) ServiceCIDRTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceCIDRTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceCIDRTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceCIDRTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ServiceCIDRType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDRTypeOutput) Spec() ServiceCIDRSpecPtrOutput {
	return o.ApplyT(func(v ServiceCIDRType) *ServiceCIDRSpec { return v.Spec }).(ServiceCIDRSpecPtrOutput)
}

// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDRTypeOutput) Status() ServiceCIDRStatusPtrOutput {
	return o.ApplyT(func(v ServiceCIDRType) *ServiceCIDRStatus { return v.Status }).(ServiceCIDRStatusPtrOutput)
}

type ServiceCIDRTypeArrayOutput struct{ *pulumi.OutputState }

func (ServiceCIDRTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCIDRType)(nil)).Elem()
}

func (o ServiceCIDRTypeArrayOutput) ToServiceCIDRTypeArrayOutput() ServiceCIDRTypeArrayOutput {
	return o
}

func (o ServiceCIDRTypeArrayOutput) ToServiceCIDRTypeArrayOutputWithContext(ctx context.Context) ServiceCIDRTypeArrayOutput {
	return o
}

func (o ServiceCIDRTypeArrayOutput) Index(i pulumi.IntInput) ServiceCIDRTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCIDRType {
		return vs[0].([]ServiceCIDRType)[vs[1].(int)]
	}).(ServiceCIDRTypeOutput)
}

// ServiceCIDRList contains a list of ServiceCIDR objects.
type ServiceCIDRListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// items is the list of ServiceCIDRs.
	Items []ServiceCIDRType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ServiceCIDRListTypeInput is an input type that accepts ServiceCIDRListTypeArgs and ServiceCIDRListTypeOutput values.
// You can construct a concrete instance of `ServiceCIDRListTypeInput` via:
//
//	ServiceCIDRListTypeArgs{...}
type ServiceCIDRListTypeInput interface {
	pulumi.Input

	ToServiceCIDRListTypeOutput() ServiceCIDRListTypeOutput
	ToServiceCIDRListTypeOutputWithContext(context.Context) ServiceCIDRListTypeOutput
}

// ServiceCIDRList contains a list of ServiceCIDR objects.
type ServiceCIDRListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// items is the list of ServiceCIDRs.
	Items ServiceCIDRTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ServiceCIDRListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRListType)(nil)).Elem()
}

func (i ServiceCIDRListTypeArgs) ToServiceCIDRListTypeOutput() ServiceCIDRListTypeOutput {
	return i.ToServiceCIDRListTypeOutputWithContext(context.Background())
}

func (i ServiceCIDRListTypeArgs) ToServiceCIDRListTypeOutputWithContext(ctx context.Context) ServiceCIDRListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRListTypeOutput)
}

// ServiceCIDRList contains a list of ServiceCIDR objects.
type ServiceCIDRListTypeOutput struct{ *pulumi.OutputState }

func (ServiceCIDRListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRListType)(nil)).Elem()
}

func (o ServiceCIDRListTypeOutput) ToServiceCIDRListTypeOutput() ServiceCIDRListTypeOutput {
	return o
}

func (o ServiceCIDRListTypeOutput) ToServiceCIDRListTypeOutputWithContext(ctx context.Context) ServiceCIDRListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceCIDRListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// items is the list of ServiceCIDRs.
func (o ServiceCIDRListTypeOutput) Items() ServiceCIDRTypeArrayOutput {
	return o.ApplyT(func(v ServiceCIDRListType) []ServiceCIDRType { return v.Items }).(ServiceCIDRTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceCIDRListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceCIDRListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ServiceCIDRListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ServiceCIDRSpecPatch `pulumi:"spec"`
	// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *ServiceCIDRStatusPatch `pulumi:"status"`
}

// ServiceCIDRPatchTypeInput is an input type that accepts ServiceCIDRPatchTypeArgs and ServiceCIDRPatchTypeOutput values.
// You can construct a concrete instance of `ServiceCIDRPatchTypeInput` via:
//
//	ServiceCIDRPatchTypeArgs{...}
type ServiceCIDRPatchTypeInput interface {
	pulumi.Input

	ToServiceCIDRPatchTypeOutput() ServiceCIDRPatchTypeOutput
	ToServiceCIDRPatchTypeOutputWithContext(context.Context) ServiceCIDRPatchTypeOutput
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ServiceCIDRSpecPatchPtrInput `pulumi:"spec"`
	// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status ServiceCIDRStatusPatchPtrInput `pulumi:"status"`
}

func (ServiceCIDRPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRPatchType)(nil)).Elem()
}

func (i ServiceCIDRPatchTypeArgs) ToServiceCIDRPatchTypeOutput() ServiceCIDRPatchTypeOutput {
	return i.ToServiceCIDRPatchTypeOutputWithContext(context.Background())
}

func (i ServiceCIDRPatchTypeArgs) ToServiceCIDRPatchTypeOutputWithContext(ctx context.Context) ServiceCIDRPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRPatchTypeOutput)
}

// ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
type ServiceCIDRPatchTypeOutput struct{ *pulumi.OutputState }

func (ServiceCIDRPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRPatchType)(nil)).Elem()
}

func (o ServiceCIDRPatchTypeOutput) ToServiceCIDRPatchTypeOutput() ServiceCIDRPatchTypeOutput {
	return o
}

func (o ServiceCIDRPatchTypeOutput) ToServiceCIDRPatchTypeOutputWithContext(ctx context.Context) ServiceCIDRPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceCIDRPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceCIDRPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCIDRPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceCIDRPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ServiceCIDRPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDRPatchTypeOutput) Spec() ServiceCIDRSpecPatchPtrOutput {
	return o.ApplyT(func(v ServiceCIDRPatchType) *ServiceCIDRSpecPatch { return v.Spec }).(ServiceCIDRSpecPatchPtrOutput)
}

// status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ServiceCIDRPatchTypeOutput) Status() ServiceCIDRStatusPatchPtrOutput {
	return o.ApplyT(func(v ServiceCIDRPatchType) *ServiceCIDRStatusPatch { return v.Status }).(ServiceCIDRStatusPatchPtrOutput)
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpec struct {
	// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
	Cidrs []string `pulumi:"cidrs"`
}

// ServiceCIDRSpecInput is an input type that accepts ServiceCIDRSpecArgs and ServiceCIDRSpecOutput values.
// You can construct a concrete instance of `ServiceCIDRSpecInput` via:
//
//	ServiceCIDRSpecArgs{...}
type ServiceCIDRSpecInput interface {
	pulumi.Input

	ToServiceCIDRSpecOutput() ServiceCIDRSpecOutput
	ToServiceCIDRSpecOutputWithContext(context.Context) ServiceCIDRSpecOutput
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpecArgs struct {
	// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
}

func (ServiceCIDRSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRSpec)(nil)).Elem()
}

func (i ServiceCIDRSpecArgs) ToServiceCIDRSpecOutput() ServiceCIDRSpecOutput {
	return i.ToServiceCIDRSpecOutputWithContext(context.Background())
}

func (i ServiceCIDRSpecArgs) ToServiceCIDRSpecOutputWithContext(ctx context.Context) ServiceCIDRSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecOutput)
}

func (i ServiceCIDRSpecArgs) ToServiceCIDRSpecPtrOutput() ServiceCIDRSpecPtrOutput {
	return i.ToServiceCIDRSpecPtrOutputWithContext(context.Background())
}

func (i ServiceCIDRSpecArgs) ToServiceCIDRSpecPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecOutput).ToServiceCIDRSpecPtrOutputWithContext(ctx)
}

// ServiceCIDRSpecPtrInput is an input type that accepts ServiceCIDRSpecArgs, ServiceCIDRSpecPtr and ServiceCIDRSpecPtrOutput values.
// You can construct a concrete instance of `ServiceCIDRSpecPtrInput` via:
//
//	        ServiceCIDRSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceCIDRSpecPtrInput interface {
	pulumi.Input

	ToServiceCIDRSpecPtrOutput() ServiceCIDRSpecPtrOutput
	ToServiceCIDRSpecPtrOutputWithContext(context.Context) ServiceCIDRSpecPtrOutput
}

type serviceCIDRSpecPtrType ServiceCIDRSpecArgs

func ServiceCIDRSpecPtr(v *ServiceCIDRSpecArgs) ServiceCIDRSpecPtrInput {
	return (*serviceCIDRSpecPtrType)(v)
}

func (*serviceCIDRSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRSpec)(nil)).Elem()
}

func (i *serviceCIDRSpecPtrType) ToServiceCIDRSpecPtrOutput() ServiceCIDRSpecPtrOutput {
	return i.ToServiceCIDRSpecPtrOutputWithContext(context.Background())
}

func (i *serviceCIDRSpecPtrType) ToServiceCIDRSpecPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecPtrOutput)
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpecOutput struct{ *pulumi.OutputState }

func (ServiceCIDRSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRSpec)(nil)).Elem()
}

func (o ServiceCIDRSpecOutput) ToServiceCIDRSpecOutput() ServiceCIDRSpecOutput {
	return o
}

func (o ServiceCIDRSpecOutput) ToServiceCIDRSpecOutputWithContext(ctx context.Context) ServiceCIDRSpecOutput {
	return o
}

func (o ServiceCIDRSpecOutput) ToServiceCIDRSpecPtrOutput() ServiceCIDRSpecPtrOutput {
	return o.ToServiceCIDRSpecPtrOutputWithContext(context.Background())
}

func (o ServiceCIDRSpecOutput) ToServiceCIDRSpecPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceCIDRSpec) *ServiceCIDRSpec {
		return &v
	}).(ServiceCIDRSpecPtrOutput)
}

// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
func (o ServiceCIDRSpecOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceCIDRSpec) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

type ServiceCIDRSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceCIDRSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRSpec)(nil)).Elem()
}

func (o ServiceCIDRSpecPtrOutput) ToServiceCIDRSpecPtrOutput() ServiceCIDRSpecPtrOutput {
	return o
}

func (o ServiceCIDRSpecPtrOutput) ToServiceCIDRSpecPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPtrOutput {
	return o
}

func (o ServiceCIDRSpecPtrOutput) Elem() ServiceCIDRSpecOutput {
	return o.ApplyT(func(v *ServiceCIDRSpec) ServiceCIDRSpec {
		if v != nil {
			return *v
		}
		var ret ServiceCIDRSpec
		return ret
	}).(ServiceCIDRSpecOutput)
}

// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
func (o ServiceCIDRSpecPtrOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceCIDRSpec) []string {
		if v == nil {
			return nil
		}
		return v.Cidrs
	}).(pulumi.StringArrayOutput)
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpecPatch struct {
	// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
	Cidrs []string `pulumi:"cidrs"`
}

// ServiceCIDRSpecPatchInput is an input type that accepts ServiceCIDRSpecPatchArgs and ServiceCIDRSpecPatchOutput values.
// You can construct a concrete instance of `ServiceCIDRSpecPatchInput` via:
//
//	ServiceCIDRSpecPatchArgs{...}
type ServiceCIDRSpecPatchInput interface {
	pulumi.Input

	ToServiceCIDRSpecPatchOutput() ServiceCIDRSpecPatchOutput
	ToServiceCIDRSpecPatchOutputWithContext(context.Context) ServiceCIDRSpecPatchOutput
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpecPatchArgs struct {
	// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
}

func (ServiceCIDRSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRSpecPatch)(nil)).Elem()
}

func (i ServiceCIDRSpecPatchArgs) ToServiceCIDRSpecPatchOutput() ServiceCIDRSpecPatchOutput {
	return i.ToServiceCIDRSpecPatchOutputWithContext(context.Background())
}

func (i ServiceCIDRSpecPatchArgs) ToServiceCIDRSpecPatchOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecPatchOutput)
}

func (i ServiceCIDRSpecPatchArgs) ToServiceCIDRSpecPatchPtrOutput() ServiceCIDRSpecPatchPtrOutput {
	return i.ToServiceCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i ServiceCIDRSpecPatchArgs) ToServiceCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecPatchOutput).ToServiceCIDRSpecPatchPtrOutputWithContext(ctx)
}

// ServiceCIDRSpecPatchPtrInput is an input type that accepts ServiceCIDRSpecPatchArgs, ServiceCIDRSpecPatchPtr and ServiceCIDRSpecPatchPtrOutput values.
// You can construct a concrete instance of `ServiceCIDRSpecPatchPtrInput` via:
//
//	        ServiceCIDRSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ServiceCIDRSpecPatchPtrInput interface {
	pulumi.Input

	ToServiceCIDRSpecPatchPtrOutput() ServiceCIDRSpecPatchPtrOutput
	ToServiceCIDRSpecPatchPtrOutputWithContext(context.Context) ServiceCIDRSpecPatchPtrOutput
}

type serviceCIDRSpecPatchPtrType ServiceCIDRSpecPatchArgs

func ServiceCIDRSpecPatchPtr(v *ServiceCIDRSpecPatchArgs) ServiceCIDRSpecPatchPtrInput {
	return (*serviceCIDRSpecPatchPtrType)(v)
}

func (*serviceCIDRSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRSpecPatch)(nil)).Elem()
}

func (i *serviceCIDRSpecPatchPtrType) ToServiceCIDRSpecPatchPtrOutput() ServiceCIDRSpecPatchPtrOutput {
	return i.ToServiceCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (i *serviceCIDRSpecPatchPtrType) ToServiceCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRSpecPatchPtrOutput)
}

// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
type ServiceCIDRSpecPatchOutput struct{ *pulumi.OutputState }

func (ServiceCIDRSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRSpecPatch)(nil)).Elem()
}

func (o ServiceCIDRSpecPatchOutput) ToServiceCIDRSpecPatchOutput() ServiceCIDRSpecPatchOutput {
	return o
}

func (o ServiceCIDRSpecPatchOutput) ToServiceCIDRSpecPatchOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchOutput {
	return o
}

func (o ServiceCIDRSpecPatchOutput) ToServiceCIDRSpecPatchPtrOutput() ServiceCIDRSpecPatchPtrOutput {
	return o.ToServiceCIDRSpecPatchPtrOutputWithContext(context.Background())
}

func (o ServiceCIDRSpecPatchOutput) ToServiceCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceCIDRSpecPatch) *ServiceCIDRSpecPatch {
		return &v
	}).(ServiceCIDRSpecPatchPtrOutput)
}

// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
func (o ServiceCIDRSpecPatchOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceCIDRSpecPatch) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

type ServiceCIDRSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ServiceCIDRSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRSpecPatch)(nil)).Elem()
}

func (o ServiceCIDRSpecPatchPtrOutput) ToServiceCIDRSpecPatchPtrOutput() ServiceCIDRSpecPatchPtrOutput {
	return o
}

func (o ServiceCIDRSpecPatchPtrOutput) ToServiceCIDRSpecPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRSpecPatchPtrOutput {
	return o
}

func (o ServiceCIDRSpecPatchPtrOutput) Elem() ServiceCIDRSpecPatchOutput {
	return o.ApplyT(func(v *ServiceCIDRSpecPatch) ServiceCIDRSpecPatch {
		if v != nil {
			return *v
		}
		var ret ServiceCIDRSpecPatch
		return ret
	}).(ServiceCIDRSpecPatchOutput)
}

// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
func (o ServiceCIDRSpecPatchPtrOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceCIDRSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Cidrs
	}).(pulumi.StringArrayOutput)
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatus struct {
	// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
	Conditions []metav1.Condition `pulumi:"conditions"`
}

// ServiceCIDRStatusInput is an input type that accepts ServiceCIDRStatusArgs and ServiceCIDRStatusOutput values.
// You can construct a concrete instance of `ServiceCIDRStatusInput` via:
//
//	ServiceCIDRStatusArgs{...}
type ServiceCIDRStatusInput interface {
	pulumi.Input

	ToServiceCIDRStatusOutput() ServiceCIDRStatusOutput
	ToServiceCIDRStatusOutputWithContext(context.Context) ServiceCIDRStatusOutput
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatusArgs struct {
	// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
	Conditions metav1.ConditionArrayInput `pulumi:"conditions"`
}

func (ServiceCIDRStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRStatus)(nil)).Elem()
}

func (i ServiceCIDRStatusArgs) ToServiceCIDRStatusOutput() ServiceCIDRStatusOutput {
	return i.ToServiceCIDRStatusOutputWithContext(context.Background())
}

func (i ServiceCIDRStatusArgs) ToServiceCIDRStatusOutputWithContext(ctx context.Context) ServiceCIDRStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusOutput)
}

func (i ServiceCIDRStatusArgs) ToServiceCIDRStatusPtrOutput() ServiceCIDRStatusPtrOutput {
	return i.ToServiceCIDRStatusPtrOutputWithContext(context.Background())
}

func (i ServiceCIDRStatusArgs) ToServiceCIDRStatusPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusOutput).ToServiceCIDRStatusPtrOutputWithContext(ctx)
}

// ServiceCIDRStatusPtrInput is an input type that accepts ServiceCIDRStatusArgs, ServiceCIDRStatusPtr and ServiceCIDRStatusPtrOutput values.
// You can construct a concrete instance of `ServiceCIDRStatusPtrInput` via:
//
//	        ServiceCIDRStatusArgs{...}
//
//	or:
//
//	        nil
type ServiceCIDRStatusPtrInput interface {
	pulumi.Input

	ToServiceCIDRStatusPtrOutput() ServiceCIDRStatusPtrOutput
	ToServiceCIDRStatusPtrOutputWithContext(context.Context) ServiceCIDRStatusPtrOutput
}

type serviceCIDRStatusPtrType ServiceCIDRStatusArgs

func ServiceCIDRStatusPtr(v *ServiceCIDRStatusArgs) ServiceCIDRStatusPtrInput {
	return (*serviceCIDRStatusPtrType)(v)
}

func (*serviceCIDRStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRStatus)(nil)).Elem()
}

func (i *serviceCIDRStatusPtrType) ToServiceCIDRStatusPtrOutput() ServiceCIDRStatusPtrOutput {
	return i.ToServiceCIDRStatusPtrOutputWithContext(context.Background())
}

func (i *serviceCIDRStatusPtrType) ToServiceCIDRStatusPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusPtrOutput)
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatusOutput struct{ *pulumi.OutputState }

func (ServiceCIDRStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRStatus)(nil)).Elem()
}

func (o ServiceCIDRStatusOutput) ToServiceCIDRStatusOutput() ServiceCIDRStatusOutput {
	return o
}

func (o ServiceCIDRStatusOutput) ToServiceCIDRStatusOutputWithContext(ctx context.Context) ServiceCIDRStatusOutput {
	return o
}

func (o ServiceCIDRStatusOutput) ToServiceCIDRStatusPtrOutput() ServiceCIDRStatusPtrOutput {
	return o.ToServiceCIDRStatusPtrOutputWithContext(context.Background())
}

func (o ServiceCIDRStatusOutput) ToServiceCIDRStatusPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceCIDRStatus) *ServiceCIDRStatus {
		return &v
	}).(ServiceCIDRStatusPtrOutput)
}

// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
func (o ServiceCIDRStatusOutput) Conditions() metav1.ConditionArrayOutput {
	return o.ApplyT(func(v ServiceCIDRStatus) []metav1.Condition { return v.Conditions }).(metav1.ConditionArrayOutput)
}

type ServiceCIDRStatusPtrOutput struct{ *pulumi.OutputState }

func (ServiceCIDRStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRStatus)(nil)).Elem()
}

func (o ServiceCIDRStatusPtrOutput) ToServiceCIDRStatusPtrOutput() ServiceCIDRStatusPtrOutput {
	return o
}

func (o ServiceCIDRStatusPtrOutput) ToServiceCIDRStatusPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPtrOutput {
	return o
}

func (o ServiceCIDRStatusPtrOutput) Elem() ServiceCIDRStatusOutput {
	return o.ApplyT(func(v *ServiceCIDRStatus) ServiceCIDRStatus {
		if v != nil {
			return *v
		}
		var ret ServiceCIDRStatus
		return ret
	}).(ServiceCIDRStatusOutput)
}

// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
func (o ServiceCIDRStatusPtrOutput) Conditions() metav1.ConditionArrayOutput {
	return o.ApplyT(func(v *ServiceCIDRStatus) []metav1.Condition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(metav1.ConditionArrayOutput)
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatusPatch struct {
	// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
	Conditions []metav1.ConditionPatch `pulumi:"conditions"`
}

// ServiceCIDRStatusPatchInput is an input type that accepts ServiceCIDRStatusPatchArgs and ServiceCIDRStatusPatchOutput values.
// You can construct a concrete instance of `ServiceCIDRStatusPatchInput` via:
//
//	ServiceCIDRStatusPatchArgs{...}
type ServiceCIDRStatusPatchInput interface {
	pulumi.Input

	ToServiceCIDRStatusPatchOutput() ServiceCIDRStatusPatchOutput
	ToServiceCIDRStatusPatchOutputWithContext(context.Context) ServiceCIDRStatusPatchOutput
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatusPatchArgs struct {
	// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
	Conditions metav1.ConditionPatchArrayInput `pulumi:"conditions"`
}

func (ServiceCIDRStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRStatusPatch)(nil)).Elem()
}

func (i ServiceCIDRStatusPatchArgs) ToServiceCIDRStatusPatchOutput() ServiceCIDRStatusPatchOutput {
	return i.ToServiceCIDRStatusPatchOutputWithContext(context.Background())
}

func (i ServiceCIDRStatusPatchArgs) ToServiceCIDRStatusPatchOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusPatchOutput)
}

func (i ServiceCIDRStatusPatchArgs) ToServiceCIDRStatusPatchPtrOutput() ServiceCIDRStatusPatchPtrOutput {
	return i.ToServiceCIDRStatusPatchPtrOutputWithContext(context.Background())
}

func (i ServiceCIDRStatusPatchArgs) ToServiceCIDRStatusPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusPatchOutput).ToServiceCIDRStatusPatchPtrOutputWithContext(ctx)
}

// ServiceCIDRStatusPatchPtrInput is an input type that accepts ServiceCIDRStatusPatchArgs, ServiceCIDRStatusPatchPtr and ServiceCIDRStatusPatchPtrOutput values.
// You can construct a concrete instance of `ServiceCIDRStatusPatchPtrInput` via:
//
//	        ServiceCIDRStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ServiceCIDRStatusPatchPtrInput interface {
	pulumi.Input

	ToServiceCIDRStatusPatchPtrOutput() ServiceCIDRStatusPatchPtrOutput
	ToServiceCIDRStatusPatchPtrOutputWithContext(context.Context) ServiceCIDRStatusPatchPtrOutput
}

type serviceCIDRStatusPatchPtrType ServiceCIDRStatusPatchArgs

func ServiceCIDRStatusPatchPtr(v *ServiceCIDRStatusPatchArgs) ServiceCIDRStatusPatchPtrInput {
	return (*serviceCIDRStatusPatchPtrType)(v)
}

func (*serviceCIDRStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRStatusPatch)(nil)).Elem()
}

func (i *serviceCIDRStatusPatchPtrType) ToServiceCIDRStatusPatchPtrOutput() ServiceCIDRStatusPatchPtrOutput {
	return i.ToServiceCIDRStatusPatchPtrOutputWithContext(context.Background())
}

func (i *serviceCIDRStatusPatchPtrType) ToServiceCIDRStatusPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCIDRStatusPatchPtrOutput)
}

// ServiceCIDRStatus describes the current state of the ServiceCIDR.
type ServiceCIDRStatusPatchOutput struct{ *pulumi.OutputState }

func (ServiceCIDRStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCIDRStatusPatch)(nil)).Elem()
}

func (o ServiceCIDRStatusPatchOutput) ToServiceCIDRStatusPatchOutput() ServiceCIDRStatusPatchOutput {
	return o
}

func (o ServiceCIDRStatusPatchOutput) ToServiceCIDRStatusPatchOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchOutput {
	return o
}

func (o ServiceCIDRStatusPatchOutput) ToServiceCIDRStatusPatchPtrOutput() ServiceCIDRStatusPatchPtrOutput {
	return o.ToServiceCIDRStatusPatchPtrOutputWithContext(context.Background())
}

func (o ServiceCIDRStatusPatchOutput) ToServiceCIDRStatusPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceCIDRStatusPatch) *ServiceCIDRStatusPatch {
		return &v
	}).(ServiceCIDRStatusPatchPtrOutput)
}

// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
func (o ServiceCIDRStatusPatchOutput) Conditions() metav1.ConditionPatchArrayOutput {
	return o.ApplyT(func(v ServiceCIDRStatusPatch) []metav1.ConditionPatch { return v.Conditions }).(metav1.ConditionPatchArrayOutput)
}

type ServiceCIDRStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ServiceCIDRStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCIDRStatusPatch)(nil)).Elem()
}

func (o ServiceCIDRStatusPatchPtrOutput) ToServiceCIDRStatusPatchPtrOutput() ServiceCIDRStatusPatchPtrOutput {
	return o
}

func (o ServiceCIDRStatusPatchPtrOutput) ToServiceCIDRStatusPatchPtrOutputWithContext(ctx context.Context) ServiceCIDRStatusPatchPtrOutput {
	return o
}

func (o ServiceCIDRStatusPatchPtrOutput) Elem() ServiceCIDRStatusPatchOutput {
	return o.ApplyT(func(v *ServiceCIDRStatusPatch) ServiceCIDRStatusPatch {
		if v != nil {
			return *v
		}
		var ret ServiceCIDRStatusPatch
		return ret
	}).(ServiceCIDRStatusPatchOutput)
}

// conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
func (o ServiceCIDRStatusPatchPtrOutput) Conditions() metav1.ConditionPatchArrayOutput {
	return o.ApplyT(func(v *ServiceCIDRStatusPatch) []metav1.ConditionPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(metav1.ConditionPatchArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRTypeInput)(nil)).Elem(), ClusterCIDRTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRTypeArrayInput)(nil)).Elem(), ClusterCIDRTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRListTypeInput)(nil)).Elem(), ClusterCIDRListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRPatchTypeInput)(nil)).Elem(), ClusterCIDRPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecInput)(nil)).Elem(), ClusterCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPtrInput)(nil)).Elem(), ClusterCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPatchInput)(nil)).Elem(), ClusterCIDRSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCIDRSpecPatchPtrInput)(nil)).Elem(), ClusterCIDRSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressTypeInput)(nil)).Elem(), IPAddressTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressTypeArrayInput)(nil)).Elem(), IPAddressTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressListTypeInput)(nil)).Elem(), IPAddressListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressPatchTypeInput)(nil)).Elem(), IPAddressPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressSpecInput)(nil)).Elem(), IPAddressSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressSpecPtrInput)(nil)).Elem(), IPAddressSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressSpecPatchInput)(nil)).Elem(), IPAddressSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAddressSpecPatchPtrInput)(nil)).Elem(), IPAddressSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentReferenceInput)(nil)).Elem(), ParentReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentReferencePtrInput)(nil)).Elem(), ParentReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentReferencePatchInput)(nil)).Elem(), ParentReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentReferencePatchPtrInput)(nil)).Elem(), ParentReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRTypeInput)(nil)).Elem(), ServiceCIDRTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRTypeArrayInput)(nil)).Elem(), ServiceCIDRTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRListTypeInput)(nil)).Elem(), ServiceCIDRListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRPatchTypeInput)(nil)).Elem(), ServiceCIDRPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRSpecInput)(nil)).Elem(), ServiceCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRSpecPtrInput)(nil)).Elem(), ServiceCIDRSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRSpecPatchInput)(nil)).Elem(), ServiceCIDRSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRSpecPatchPtrInput)(nil)).Elem(), ServiceCIDRSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRStatusInput)(nil)).Elem(), ServiceCIDRStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRStatusPtrInput)(nil)).Elem(), ServiceCIDRStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRStatusPatchInput)(nil)).Elem(), ServiceCIDRStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCIDRStatusPatchPtrInput)(nil)).Elem(), ServiceCIDRStatusPatchArgs{})
	pulumi.RegisterOutputType(ClusterCIDRTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterCIDRListTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRPatchTypeOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPatchOutput{})
	pulumi.RegisterOutputType(ClusterCIDRSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(IPAddressTypeOutput{})
	pulumi.RegisterOutputType(IPAddressTypeArrayOutput{})
	pulumi.RegisterOutputType(IPAddressListTypeOutput{})
	pulumi.RegisterOutputType(IPAddressPatchTypeOutput{})
	pulumi.RegisterOutputType(IPAddressSpecOutput{})
	pulumi.RegisterOutputType(IPAddressSpecPtrOutput{})
	pulumi.RegisterOutputType(IPAddressSpecPatchOutput{})
	pulumi.RegisterOutputType(IPAddressSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ParentReferenceOutput{})
	pulumi.RegisterOutputType(ParentReferencePtrOutput{})
	pulumi.RegisterOutputType(ParentReferencePatchOutput{})
	pulumi.RegisterOutputType(ParentReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(ServiceCIDRTypeOutput{})
	pulumi.RegisterOutputType(ServiceCIDRTypeArrayOutput{})
	pulumi.RegisterOutputType(ServiceCIDRListTypeOutput{})
	pulumi.RegisterOutputType(ServiceCIDRPatchTypeOutput{})
	pulumi.RegisterOutputType(ServiceCIDRSpecOutput{})
	pulumi.RegisterOutputType(ServiceCIDRSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceCIDRSpecPatchOutput{})
	pulumi.RegisterOutputType(ServiceCIDRSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ServiceCIDRStatusOutput{})
	pulumi.RegisterOutputType(ServiceCIDRStatusPtrOutput{})
	pulumi.RegisterOutputType(ServiceCIDRStatusPatchOutput{})
	pulumi.RegisterOutputType(ServiceCIDRStatusPatchPtrOutput{})
}
