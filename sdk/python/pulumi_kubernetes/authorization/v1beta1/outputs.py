# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'NonResourceRule',
    'NonResourceRulePatch',
    'ResourceRule',
    'ResourceRulePatch',
    'SelfSubjectRulesReviewSpec',
    'SelfSubjectRulesReviewSpecPatch',
    'SubjectRulesReviewStatus',
    'SubjectRulesReviewStatusPatch',
]

@pulumi.output_type
class NonResourceRule(dict):
    """
    NonResourceRule holds information that describes a rule for the non-resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonResourceURLs":
            suggest = "non_resource_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NonResourceRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NonResourceRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NonResourceRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 verbs: Sequence[str],
                 non_resource_urls: Optional[Sequence[str]] = None):
        """
        NonResourceRule holds information that describes a rule for the non-resource
        :param Sequence[str] verbs: Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
        :param Sequence[str] non_resource_urls: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
        """
        pulumi.set(__self__, "verbs", verbs)
        if non_resource_urls is not None:
            pulumi.set(__self__, "non_resource_urls", non_resource_urls)

    @property
    @pulumi.getter
    def verbs(self) -> Sequence[str]:
        """
        Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
        """
        return pulumi.get(self, "verbs")

    @property
    @pulumi.getter(name="nonResourceURLs")
    def non_resource_urls(self) -> Optional[Sequence[str]]:
        """
        NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
        """
        return pulumi.get(self, "non_resource_urls")


@pulumi.output_type
class NonResourceRulePatch(dict):
    """
    NonResourceRule holds information that describes a rule for the non-resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonResourceURLs":
            suggest = "non_resource_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NonResourceRulePatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NonResourceRulePatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NonResourceRulePatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_resource_urls: Optional[Sequence[str]] = None,
                 verbs: Optional[Sequence[str]] = None):
        """
        NonResourceRule holds information that describes a rule for the non-resource
        :param Sequence[str] non_resource_urls: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
        :param Sequence[str] verbs: Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
        """
        if non_resource_urls is not None:
            pulumi.set(__self__, "non_resource_urls", non_resource_urls)
        if verbs is not None:
            pulumi.set(__self__, "verbs", verbs)

    @property
    @pulumi.getter(name="nonResourceURLs")
    def non_resource_urls(self) -> Optional[Sequence[str]]:
        """
        NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
        """
        return pulumi.get(self, "non_resource_urls")

    @property
    @pulumi.getter
    def verbs(self) -> Optional[Sequence[str]]:
        """
        Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
        """
        return pulumi.get(self, "verbs")


@pulumi.output_type
class ResourceRule(dict):
    """
    ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroups":
            suggest = "api_groups"
        elif key == "resourceNames":
            suggest = "resource_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 verbs: Sequence[str],
                 api_groups: Optional[Sequence[str]] = None,
                 resource_names: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence[str]] = None):
        """
        ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        :param Sequence[str] verbs: Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
        :param Sequence[str] api_groups: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
        :param Sequence[str] resource_names: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
        :param Sequence[str] resources: Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
                "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
        """
        pulumi.set(__self__, "verbs", verbs)
        if api_groups is not None:
            pulumi.set(__self__, "api_groups", api_groups)
        if resource_names is not None:
            pulumi.set(__self__, "resource_names", resource_names)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def verbs(self) -> Sequence[str]:
        """
        Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
        """
        return pulumi.get(self, "verbs")

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[Sequence[str]]:
        """
        APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
        """
        return pulumi.get(self, "api_groups")

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[Sequence[str]]:
        """
        ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
        """
        return pulumi.get(self, "resource_names")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        """
        Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
         "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class ResourceRulePatch(dict):
    """
    ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroups":
            suggest = "api_groups"
        elif key == "resourceNames":
            suggest = "resource_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceRulePatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceRulePatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceRulePatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_groups: Optional[Sequence[str]] = None,
                 resource_names: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence[str]] = None,
                 verbs: Optional[Sequence[str]] = None):
        """
        ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        :param Sequence[str] api_groups: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
        :param Sequence[str] resource_names: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
        :param Sequence[str] resources: Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
                "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
        :param Sequence[str] verbs: Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
        """
        if api_groups is not None:
            pulumi.set(__self__, "api_groups", api_groups)
        if resource_names is not None:
            pulumi.set(__self__, "resource_names", resource_names)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if verbs is not None:
            pulumi.set(__self__, "verbs", verbs)

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[Sequence[str]]:
        """
        APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
        """
        return pulumi.get(self, "api_groups")

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[Sequence[str]]:
        """
        ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
        """
        return pulumi.get(self, "resource_names")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        """
        Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
         "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def verbs(self) -> Optional[Sequence[str]]:
        """
        Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
        """
        return pulumi.get(self, "verbs")


@pulumi.output_type
class SelfSubjectRulesReviewSpec(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None):
        """
        :param str namespace: Namespace to evaluate rules for. Required.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace to evaluate rules for. Required.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class SelfSubjectRulesReviewSpecPatch(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None):
        """
        :param str namespace: Namespace to evaluate rules for. Required.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace to evaluate rules for. Required.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class SubjectRulesReviewStatus(dict):
    """
    SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonResourceRules":
            suggest = "non_resource_rules"
        elif key == "resourceRules":
            suggest = "resource_rules"
        elif key == "evaluationError":
            suggest = "evaluation_error"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubjectRulesReviewStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubjectRulesReviewStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubjectRulesReviewStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 incomplete: bool,
                 non_resource_rules: Sequence['outputs.NonResourceRule'],
                 resource_rules: Sequence['outputs.ResourceRule'],
                 evaluation_error: Optional[str] = None):
        """
        SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
        :param bool incomplete: Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
        :param Sequence['NonResourceRuleArgs'] non_resource_rules: NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        :param Sequence['ResourceRuleArgs'] resource_rules: ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        :param str evaluation_error: EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        """
        pulumi.set(__self__, "incomplete", incomplete)
        pulumi.set(__self__, "non_resource_rules", non_resource_rules)
        pulumi.set(__self__, "resource_rules", resource_rules)
        if evaluation_error is not None:
            pulumi.set(__self__, "evaluation_error", evaluation_error)

    @property
    @pulumi.getter
    def incomplete(self) -> bool:
        """
        Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
        """
        return pulumi.get(self, "incomplete")

    @property
    @pulumi.getter(name="nonResourceRules")
    def non_resource_rules(self) -> Sequence['outputs.NonResourceRule']:
        """
        NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        """
        return pulumi.get(self, "non_resource_rules")

    @property
    @pulumi.getter(name="resourceRules")
    def resource_rules(self) -> Sequence['outputs.ResourceRule']:
        """
        ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        """
        return pulumi.get(self, "resource_rules")

    @property
    @pulumi.getter(name="evaluationError")
    def evaluation_error(self) -> Optional[str]:
        """
        EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        """
        return pulumi.get(self, "evaluation_error")


@pulumi.output_type
class SubjectRulesReviewStatusPatch(dict):
    """
    SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationError":
            suggest = "evaluation_error"
        elif key == "nonResourceRules":
            suggest = "non_resource_rules"
        elif key == "resourceRules":
            suggest = "resource_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubjectRulesReviewStatusPatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubjectRulesReviewStatusPatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubjectRulesReviewStatusPatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 evaluation_error: Optional[str] = None,
                 incomplete: Optional[bool] = None,
                 non_resource_rules: Optional[Sequence['outputs.NonResourceRulePatch']] = None,
                 resource_rules: Optional[Sequence['outputs.ResourceRulePatch']] = None):
        """
        SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
        :param str evaluation_error: EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        :param bool incomplete: Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
        :param Sequence['NonResourceRulePatchArgs'] non_resource_rules: NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        :param Sequence['ResourceRulePatchArgs'] resource_rules: ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        """
        if evaluation_error is not None:
            pulumi.set(__self__, "evaluation_error", evaluation_error)
        if incomplete is not None:
            pulumi.set(__self__, "incomplete", incomplete)
        if non_resource_rules is not None:
            pulumi.set(__self__, "non_resource_rules", non_resource_rules)
        if resource_rules is not None:
            pulumi.set(__self__, "resource_rules", resource_rules)

    @property
    @pulumi.getter(name="evaluationError")
    def evaluation_error(self) -> Optional[str]:
        """
        EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        """
        return pulumi.get(self, "evaluation_error")

    @property
    @pulumi.getter
    def incomplete(self) -> Optional[bool]:
        """
        Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
        """
        return pulumi.get(self, "incomplete")

    @property
    @pulumi.getter(name="nonResourceRules")
    def non_resource_rules(self) -> Optional[Sequence['outputs.NonResourceRulePatch']]:
        """
        NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        """
        return pulumi.get(self, "non_resource_rules")

    @property
    @pulumi.getter(name="resourceRules")
    def resource_rules(self) -> Optional[Sequence['outputs.ResourceRulePatch']]:
        """
        ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        """
        return pulumi.get(self, "resource_rules")


