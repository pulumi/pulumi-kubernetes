# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import utilities, tables


class VolumeAttachmentList(pulumi.CustomResource):
    api_version: pulumi.Output[str]
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    items: pulumi.Output[list]
    """
    Items is the list of VolumeAttachments
      * `api_version` (`str`) - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * `kind` (`str`) - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * `metadata` (`dict`) - Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        * `annotations` (`dict`) - Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
        * `cluster_name` (`str`) - The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
        * `creation_timestamp` (`str`) - CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        * `deletion_grace_period_seconds` (`float`) - Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        * `deletion_timestamp` (`str`) - DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
          
          Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        * `finalizers` (`list`) - Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        * `generate_name` (`str`) - GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
          
          If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
          
          Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        * `generation` (`float`) - A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        * `labels` (`dict`) - Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        * `managed_fields` (`list`) - ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
          * `api_version` (`str`) - APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
          * `fieldsType` (`str`) - FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
          * `fieldsV1` (`dict`) - FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          * `manager` (`str`) - Manager is an identifier of the workflow managing these fields.
          * `operation` (`str`) - Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
          * `time` (`str`) - Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'

        * `name` (`str`) - Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        * `namespace` (`str`) - Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
          
          Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        * `owner_references` (`list`) - List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
          * `api_version` (`str`) - API version of the referent.
          * `blockOwnerDeletion` (`bool`) - If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
          * `controller` (`bool`) - If true, this reference points to the managing controller.
          * `kind` (`str`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          * `name` (`str`) - Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          * `uid` (`str`) - UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

        * `resource_version` (`str`) - An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
          
          Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        * `self_link` (`str`) - SelfLink is a URL representing this object. Populated by the system. Read-only.
          
          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        * `uid` (`str`) - UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
          
          Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

      * `spec` (`dict`) - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
        * `attacher` (`str`) - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
        * `node_name` (`str`) - The node that the volume should be attached to.
        * `source` (`dict`) - Source represents the volume that should be attached.
          * `inline_volume_spec` (`dict`) - inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
            * `access_modes` (`list`) - AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
            * `aws_elastic_block_store` (`dict`) - AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
              * `fs_type` (`str`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
              * `partition` (`float`) - The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
              * `read_only` (`bool`) - Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
              * `volume_id` (`str`) - Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

            * `azure_disk` (`dict`) - AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
              * `caching_mode` (`str`) - Host Caching mode: None, Read Only, Read Write.
              * `disk_name` (`str`) - The Name of the data disk in the blob storage
              * `disk_uri` (`str`) - The URI the data disk in the blob storage
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
              * `kind` (`str`) - Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
              * `read_only` (`bool`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

            * `azure_file` (`dict`) - AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
              * `read_only` (`bool`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `secret_name` (`str`) - the name of secret that contains Azure Storage Account Name and Key
              * `secret_namespace` (`str`) - the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
              * `share_name` (`str`) - Share Name

            * `capacity` (`dict`) - A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            * `cephfs` (`dict`) - CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
              * `monitors` (`list`) - Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
              * `path` (`str`) - Optional: Used as the mounted root, rather than the full Ceph tree, default is /
              * `read_only` (`bool`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
              * `secret_file` (`str`) - Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
              * `secret_ref` (`dict`) - Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                * `name` (`str`) - Name is unique within a namespace to reference a secret resource.
                * `namespace` (`str`) - Namespace defines the space within which the secret name must be unique.

              * `user` (`str`) - Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            * `cinder` (`dict`) - Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
              * `read_only` (`bool`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
              * `secret_ref` (`dict`) - Optional: points to a secret object containing parameters used to connect to OpenStack.
              * `volume_id` (`str`) - volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md

            * `claim_ref` (`dict`) - ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
              * `api_version` (`str`) - API version of the referent.
              * `field_path` (`str`) - If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
              * `kind` (`str`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              * `name` (`str`) - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
              * `namespace` (`str`) - Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
              * `resource_version` (`str`) - Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
              * `uid` (`str`) - UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids

            * `csi` (`dict`) - CSI represents storage that is handled by an external CSI driver (Beta feature).
              * `controller_expand_secret_ref` (`dict`) - ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
              * `controller_publish_secret_ref` (`dict`) - ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
              * `driver` (`str`) - Driver is the name of the driver to use for this volume. Required.
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
              * `node_publish_secret_ref` (`dict`) - NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
              * `node_stage_secret_ref` (`dict`) - NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
              * `read_only` (`bool`) - Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
              * `volume_attributes` (`dict`) - Attributes of the volume to publish.
              * `volume_handle` (`str`) - VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.

            * `fc` (`dict`) - FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
              * `lun` (`float`) - Optional: FC target lun number
              * `read_only` (`bool`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `target_ww_ns` (`list`) - Optional: FC target worldwide names (WWNs)
              * `wwids` (`list`) - Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.

            * `flex_volume` (`dict`) - FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
              * `driver` (`str`) - Driver is the name of the driver to use for this volume.
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
              * `options` (`dict`) - Optional: Extra command options if any.
              * `read_only` (`bool`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `secret_ref` (`dict`) - Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.

            * `flocker` (`dict`) - Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
              * `dataset_name` (`str`) - Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
              * `dataset_uuid` (`str`) - UUID of the dataset. This is unique identifier of a Flocker dataset

            * `gce_persistent_disk` (`dict`) - GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
              * `fs_type` (`str`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
              * `partition` (`float`) - The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
              * `pd_name` (`str`) - Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
              * `read_only` (`bool`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

            * `glusterfs` (`dict`) - Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
              * `endpoints` (`str`) - EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
              * `endpoints_namespace` (`str`) - EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
              * `path` (`str`) - Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
              * `read_only` (`bool`) - ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod

            * `host_path` (`dict`) - HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
              * `path` (`str`) - Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
              * `type` (`str`) - Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

            * `iscsi` (`dict`) - ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
              * `chap_auth_discovery` (`bool`) - whether support iSCSI Discovery CHAP authentication
              * `chap_auth_session` (`bool`) - whether support iSCSI Session CHAP authentication
              * `fs_type` (`str`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
              * `initiator_name` (`str`) - Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
              * `iqn` (`str`) - Target iSCSI Qualified Name.
              * `iscsi_interface` (`str`) - iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
              * `lun` (`float`) - iSCSI Target Lun number.
              * `portals` (`list`) - iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
              * `read_only` (`bool`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
              * `secret_ref` (`dict`) - CHAP Secret for iSCSI target and initiator authentication
              * `target_portal` (`str`) - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).

            * `local` (`dict`) - Local represents directly-attached storage with node affinity
              * `fs_type` (`str`) - Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
              * `path` (`str`) - The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).

            * `mount_options` (`list`) - A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
            * `nfs` (`dict`) - NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
              * `path` (`str`) - Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
              * `read_only` (`bool`) - ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
              * `server` (`str`) - Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

            * `node_affinity` (`dict`) - NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
              * `required` (`dict`) - Required specifies hard node constraints that must be met.
                * `node_selector_terms` (`list`) - Required. A list of node selector terms. The terms are ORed.
                  * `match_expressions` (`list`) - A list of node selector requirements by node's labels.
                    * `key` (`str`) - The label key that the selector applies to.
                    * `operator` (`str`) - Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                    * `values` (`list`) - An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.

                  * `matchFields` (`list`) - A list of node selector requirements by node's fields.

            * `persistent_volume_reclaim_policy` (`str`) - What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
            * `photon_persistent_disk` (`dict`) - PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
              * `pd_id` (`str`) - ID that identifies Photon Controller persistent disk

            * `portworx_volume` (`dict`) - PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
              * `fs_type` (`str`) - FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
              * `read_only` (`bool`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `volume_id` (`str`) - VolumeID uniquely identifies a Portworx volume

            * `quobyte` (`dict`) - Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
              * `group` (`str`) - Group to map volume access to Default is no group
              * `read_only` (`bool`) - ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
              * `registry` (`str`) - Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
              * `tenant` (`str`) - Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
              * `user` (`str`) - User to map volume access to Defaults to serivceaccount user
              * `volume` (`str`) - Volume is a string that references an already created Quobyte volume by name.

            * `rbd` (`dict`) - RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
              * `fs_type` (`str`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
              * `image` (`str`) - The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `keyring` (`str`) - Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `monitors` (`list`) - A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `pool` (`str`) - The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `read_only` (`bool`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `secret_ref` (`dict`) - SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
              * `user` (`str`) - The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            * `scale_io` (`dict`) - ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
              * `gateway` (`str`) - The host address of the ScaleIO API Gateway.
              * `protection_domain` (`str`) - The name of the ScaleIO Protection Domain for the configured storage.
              * `read_only` (`bool`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `secret_ref` (`dict`) - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
              * `ssl_enabled` (`bool`) - Flag to enable/disable SSL communication with Gateway, default false
              * `storage_mode` (`str`) - Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
              * `storage_pool` (`str`) - The ScaleIO Storage Pool associated with the protection domain.
              * `system` (`str`) - The name of the storage system as configured in ScaleIO.
              * `volume_name` (`str`) - The name of a volume already created in the ScaleIO system that is associated with this volume source.

            * `storage_class_name` (`str`) - Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
            * `storageos` (`dict`) - StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
              * `read_only` (`bool`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
              * `secret_ref` (`dict`) - SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
              * `volume_name` (`str`) - VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
              * `volume_namespace` (`str`) - VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.

            * `volume_mode` (`str`) - volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
            * `vsphere_volume` (`dict`) - VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
              * `fs_type` (`str`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
              * `storage_policy_id` (`str`) - Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
              * `storage_policy_name` (`str`) - Storage Policy Based Management (SPBM) profile name.
              * `volume_path` (`str`) - Path that identifies vSphere volume vmdk

          * `persistent_volume_name` (`str`) - Name of the persistent volume to attach.

      * `status` (`dict`) - Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
        * `attach_error` (`dict`) - The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
          * `message` (`str`) - String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
          * `time` (`str`) - Time the error was encountered.

        * `attached` (`bool`) - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
        * `attachment_metadata` (`dict`) - Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
        * `detach_error` (`dict`) - The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
    """
    kind: pulumi.Output[str]
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: pulumi.Output[dict]
    """
    Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * `continue_` (`str`) - continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
      * `remaining_item_count` (`float`) - remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
      * `resource_version` (`str`) - String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
      * `self_link` (`str`) - selfLink is a URL representing this object. Populated by the system. Read-only.
        
        DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
    """
    def __init__(__self__, resource_name, opts=None, api_version=None, items=None, kind=None, metadata=None, __props__=None, __name__=None, __opts__=None):
        """
        VolumeAttachmentList is a collection of VolumeAttachment objects.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[list] items: Items is the list of VolumeAttachments
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[dict] metadata: Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

        The **items** object supports the following:

          * `api_version` (`pulumi.Input[str]`) - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          * `kind` (`pulumi.Input[str]`) - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          * `metadata` (`pulumi.Input[dict]`) - Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            * `annotations` (`pulumi.Input[dict]`) - Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
            * `cluster_name` (`pulumi.Input[str]`) - The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
            * `creation_timestamp` (`pulumi.Input[str]`) - CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
              
              Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            * `deletion_grace_period_seconds` (`pulumi.Input[float]`) - Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
            * `deletion_timestamp` (`pulumi.Input[str]`) - DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
              
              Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            * `finalizers` (`pulumi.Input[list]`) - Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
            * `generate_name` (`pulumi.Input[str]`) - GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
              
              If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
              
              Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            * `generation` (`pulumi.Input[float]`) - A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
            * `labels` (`pulumi.Input[dict]`) - Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
            * `managed_fields` (`pulumi.Input[list]`) - ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
              * `api_version` (`pulumi.Input[str]`) - APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
              * `fieldsType` (`pulumi.Input[str]`) - FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
              * `fieldsV1` (`pulumi.Input[dict]`) - FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
              * `manager` (`pulumi.Input[str]`) - Manager is an identifier of the workflow managing these fields.
              * `operation` (`pulumi.Input[str]`) - Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
              * `time` (`pulumi.Input[str]`) - Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'

            * `name` (`pulumi.Input[str]`) - Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            * `namespace` (`pulumi.Input[str]`) - Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
              
              Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
            * `owner_references` (`pulumi.Input[list]`) - List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
              * `api_version` (`pulumi.Input[str]`) - API version of the referent.
              * `blockOwnerDeletion` (`pulumi.Input[bool]`) - If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
              * `controller` (`pulumi.Input[bool]`) - If true, this reference points to the managing controller.
              * `kind` (`pulumi.Input[str]`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              * `name` (`pulumi.Input[str]`) - Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              * `uid` (`pulumi.Input[str]`) - UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

            * `resource_version` (`pulumi.Input[str]`) - An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
              
              Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            * `self_link` (`pulumi.Input[str]`) - SelfLink is a URL representing this object. Populated by the system. Read-only.
              
              DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
            * `uid` (`pulumi.Input[str]`) - UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
              
              Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

          * `spec` (`pulumi.Input[dict]`) - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
            * `attacher` (`pulumi.Input[str]`) - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
            * `node_name` (`pulumi.Input[str]`) - The node that the volume should be attached to.
            * `source` (`pulumi.Input[dict]`) - Source represents the volume that should be attached.
              * `inline_volume_spec` (`pulumi.Input[dict]`) - inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
                * `access_modes` (`pulumi.Input[list]`) - AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
                * `aws_elastic_block_store` (`pulumi.Input[dict]`) - AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  * `partition` (`pulumi.Input[float]`) - The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                  * `read_only` (`pulumi.Input[bool]`) - Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  * `volume_id` (`pulumi.Input[str]`) - Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

                * `azure_disk` (`pulumi.Input[dict]`) - AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                  * `caching_mode` (`pulumi.Input[str]`) - Host Caching mode: None, Read Only, Read Write.
                  * `disk_name` (`pulumi.Input[str]`) - The Name of the data disk in the blob storage
                  * `disk_uri` (`pulumi.Input[str]`) - The URI the data disk in the blob storage
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  * `kind` (`pulumi.Input[str]`) - Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                  * `read_only` (`pulumi.Input[bool]`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

                * `azure_file` (`pulumi.Input[dict]`) - AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                  * `read_only` (`pulumi.Input[bool]`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `secret_name` (`pulumi.Input[str]`) - the name of secret that contains Azure Storage Account Name and Key
                  * `secret_namespace` (`pulumi.Input[str]`) - the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
                  * `share_name` (`pulumi.Input[str]`) - Share Name

                * `capacity` (`pulumi.Input[dict]`) - A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
                * `cephfs` (`pulumi.Input[dict]`) - CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                  * `monitors` (`pulumi.Input[list]`) - Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  * `path` (`pulumi.Input[str]`) - Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                  * `read_only` (`pulumi.Input[bool]`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  * `secret_file` (`pulumi.Input[str]`) - Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  * `secret_ref` (`pulumi.Input[dict]`) - Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    * `name` (`pulumi.Input[str]`) - Name is unique within a namespace to reference a secret resource.
                    * `namespace` (`pulumi.Input[str]`) - Namespace defines the space within which the secret name must be unique.

                  * `user` (`pulumi.Input[str]`) - Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

                * `cinder` (`pulumi.Input[dict]`) - Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  * `read_only` (`pulumi.Input[bool]`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  * `secret_ref` (`pulumi.Input[dict]`) - Optional: points to a secret object containing parameters used to connect to OpenStack.
                  * `volume_id` (`pulumi.Input[str]`) - volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md

                * `claim_ref` (`pulumi.Input[dict]`) - ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
                  * `api_version` (`pulumi.Input[str]`) - API version of the referent.
                  * `field_path` (`pulumi.Input[str]`) - If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
                  * `kind` (`pulumi.Input[str]`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  * `name` (`pulumi.Input[str]`) - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  * `namespace` (`pulumi.Input[str]`) - Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                  * `resource_version` (`pulumi.Input[str]`) - Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                  * `uid` (`pulumi.Input[str]`) - UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids

                * `csi` (`pulumi.Input[dict]`) - CSI represents storage that is handled by an external CSI driver (Beta feature).
                  * `controller_expand_secret_ref` (`pulumi.Input[dict]`) - ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  * `controller_publish_secret_ref` (`pulumi.Input[dict]`) - ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  * `driver` (`pulumi.Input[str]`) - Driver is the name of the driver to use for this volume. Required.
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
                  * `node_publish_secret_ref` (`pulumi.Input[dict]`) - NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  * `node_stage_secret_ref` (`pulumi.Input[dict]`) - NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  * `read_only` (`pulumi.Input[bool]`) - Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
                  * `volume_attributes` (`pulumi.Input[dict]`) - Attributes of the volume to publish.
                  * `volume_handle` (`pulumi.Input[str]`) - VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.

                * `fc` (`pulumi.Input[dict]`) - FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  * `lun` (`pulumi.Input[float]`) - Optional: FC target lun number
                  * `read_only` (`pulumi.Input[bool]`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `target_ww_ns` (`pulumi.Input[list]`) - Optional: FC target worldwide names (WWNs)
                  * `wwids` (`pulumi.Input[list]`) - Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.

                * `flex_volume` (`pulumi.Input[dict]`) - FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                  * `driver` (`pulumi.Input[str]`) - Driver is the name of the driver to use for this volume.
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                  * `options` (`pulumi.Input[dict]`) - Optional: Extra command options if any.
                  * `read_only` (`pulumi.Input[bool]`) - Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `secret_ref` (`pulumi.Input[dict]`) - Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.

                * `flocker` (`pulumi.Input[dict]`) - Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
                  * `dataset_name` (`pulumi.Input[str]`) - Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
                  * `dataset_uuid` (`pulumi.Input[str]`) - UUID of the dataset. This is unique identifier of a Flocker dataset

                * `gce_persistent_disk` (`pulumi.Input[dict]`) - GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  * `partition` (`pulumi.Input[float]`) - The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  * `pd_name` (`pulumi.Input[str]`) - Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

                * `glusterfs` (`pulumi.Input[dict]`) - Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
                  * `endpoints` (`pulumi.Input[str]`) - EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  * `endpoints_namespace` (`pulumi.Input[str]`) - EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  * `path` (`pulumi.Input[str]`) - Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod

                * `host_path` (`pulumi.Input[dict]`) - HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  * `path` (`pulumi.Input[str]`) - Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  * `type` (`pulumi.Input[str]`) - Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

                * `iscsi` (`pulumi.Input[dict]`) - ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
                  * `chap_auth_discovery` (`pulumi.Input[bool]`) - whether support iSCSI Discovery CHAP authentication
                  * `chap_auth_session` (`pulumi.Input[bool]`) - whether support iSCSI Session CHAP authentication
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                  * `initiator_name` (`pulumi.Input[str]`) - Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                  * `iqn` (`pulumi.Input[str]`) - Target iSCSI Qualified Name.
                  * `iscsi_interface` (`pulumi.Input[str]`) - iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                  * `lun` (`pulumi.Input[float]`) - iSCSI Target Lun number.
                  * `portals` (`pulumi.Input[list]`) - iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                  * `secret_ref` (`pulumi.Input[dict]`) - CHAP Secret for iSCSI target and initiator authentication
                  * `target_portal` (`pulumi.Input[str]`) - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).

                * `local` (`pulumi.Input[dict]`) - Local represents directly-attached storage with node affinity
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
                  * `path` (`pulumi.Input[str]`) - The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).

                * `mount_options` (`pulumi.Input[list]`) - A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
                * `nfs` (`pulumi.Input[dict]`) - NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  * `path` (`pulumi.Input[str]`) - Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  * `server` (`pulumi.Input[str]`) - Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

                * `node_affinity` (`pulumi.Input[dict]`) - NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
                  * `required` (`pulumi.Input[dict]`) - Required specifies hard node constraints that must be met.
                    * `node_selector_terms` (`pulumi.Input[list]`) - Required. A list of node selector terms. The terms are ORed.
                      * `match_expressions` (`pulumi.Input[list]`) - A list of node selector requirements by node's labels.
                        * `key` (`pulumi.Input[str]`) - The label key that the selector applies to.
                        * `operator` (`pulumi.Input[str]`) - Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                        * `values` (`pulumi.Input[list]`) - An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.

                      * `matchFields` (`pulumi.Input[list]`) - A list of node selector requirements by node's fields.

                * `persistent_volume_reclaim_policy` (`pulumi.Input[str]`) - What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
                * `photon_persistent_disk` (`pulumi.Input[dict]`) - PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  * `pd_id` (`pulumi.Input[str]`) - ID that identifies Photon Controller persistent disk

                * `portworx_volume` (`pulumi.Input[dict]`) - PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
                  * `fs_type` (`pulumi.Input[str]`) - FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                  * `read_only` (`pulumi.Input[bool]`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `volume_id` (`pulumi.Input[str]`) - VolumeID uniquely identifies a Portworx volume

                * `quobyte` (`pulumi.Input[dict]`) - Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                  * `group` (`pulumi.Input[str]`) - Group to map volume access to Default is no group
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
                  * `registry` (`pulumi.Input[str]`) - Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
                  * `tenant` (`pulumi.Input[str]`) - Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                  * `user` (`pulumi.Input[str]`) - User to map volume access to Defaults to serivceaccount user
                  * `volume` (`pulumi.Input[str]`) - Volume is a string that references an already created Quobyte volume by name.

                * `rbd` (`pulumi.Input[dict]`) - RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                  * `image` (`pulumi.Input[str]`) - The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `keyring` (`pulumi.Input[str]`) - Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `monitors` (`pulumi.Input[list]`) - A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `pool` (`pulumi.Input[str]`) - The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `read_only` (`pulumi.Input[bool]`) - ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `secret_ref` (`pulumi.Input[dict]`) - SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  * `user` (`pulumi.Input[str]`) - The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

                * `scale_io` (`pulumi.Input[dict]`) - ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
                  * `gateway` (`pulumi.Input[str]`) - The host address of the ScaleIO API Gateway.
                  * `protection_domain` (`pulumi.Input[str]`) - The name of the ScaleIO Protection Domain for the configured storage.
                  * `read_only` (`pulumi.Input[bool]`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `secret_ref` (`pulumi.Input[dict]`) - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                  * `ssl_enabled` (`pulumi.Input[bool]`) - Flag to enable/disable SSL communication with Gateway, default false
                  * `storage_mode` (`pulumi.Input[str]`) - Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                  * `storage_pool` (`pulumi.Input[str]`) - The ScaleIO Storage Pool associated with the protection domain.
                  * `system` (`pulumi.Input[str]`) - The name of the storage system as configured in ScaleIO.
                  * `volume_name` (`pulumi.Input[str]`) - The name of a volume already created in the ScaleIO system that is associated with this volume source.

                * `storage_class_name` (`pulumi.Input[str]`) - Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
                * `storageos` (`pulumi.Input[dict]`) - StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  * `read_only` (`pulumi.Input[bool]`) - Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  * `secret_ref` (`pulumi.Input[dict]`) - SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                  * `volume_name` (`pulumi.Input[str]`) - VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                  * `volume_namespace` (`pulumi.Input[str]`) - VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.

                * `volume_mode` (`pulumi.Input[str]`) - volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
                * `vsphere_volume` (`pulumi.Input[dict]`) - VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                  * `fs_type` (`pulumi.Input[str]`) - Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  * `storage_policy_id` (`pulumi.Input[str]`) - Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                  * `storage_policy_name` (`pulumi.Input[str]`) - Storage Policy Based Management (SPBM) profile name.
                  * `volume_path` (`pulumi.Input[str]`) - Path that identifies vSphere volume vmdk

              * `persistent_volume_name` (`pulumi.Input[str]`) - Name of the persistent volume to attach.

          * `status` (`pulumi.Input[dict]`) - Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
            * `attach_error` (`pulumi.Input[dict]`) - The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
              * `message` (`pulumi.Input[str]`) - String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
              * `time` (`pulumi.Input[str]`) - Time the error was encountered.

            * `attached` (`pulumi.Input[bool]`) - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
            * `attachment_metadata` (`pulumi.Input[dict]`) - Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
            * `detach_error` (`pulumi.Input[dict]`) - The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.

        The **metadata** object supports the following:

          * `continue_` (`pulumi.Input[str]`) - continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
          * `remaining_item_count` (`pulumi.Input[float]`) - remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
          * `resource_version` (`pulumi.Input[str]`) - String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          * `self_link` (`pulumi.Input[str]`) - selfLink is a URL representing this object. Populated by the system. Read-only.
            
            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['api_version'] = api_version
            if items is None:
                raise TypeError("Missing required property 'items'")
            __props__['items'] = items
            __props__['kind'] = kind
            __props__['metadata'] = metadata
        super(VolumeAttachmentList, __self__).__init__(
            'kubernetes:storage.k8s.io/v1beta1:VolumeAttachmentList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing VolumeAttachmentList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return VolumeAttachmentList(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
