# *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
from typing import Optional

import pulumi
import pulumi.runtime
from pulumi import Input, ResourceOptions

from ... import tables, version


class Deployment(pulumi.CustomResource):
    """
    DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the
    release notes for more information. Deployment enables declarative updates for Pods and
    ReplicaSets.
    """

    def __init__(self, resource_name, opts=None, metadata=None, spec=None, status=None, __name__=None, __opts__=None):
        """
        Create a Deployment resource with the given unique name, arguments, and options.
        
        Pulumi uses "await logic" to determine if a Deployment is ready.
        The following conditions are considered by this logic:
        1. '.metadata.annotations["deployment.kubernetes.io/revision"]' in the current Deployment
          must have been incremented by the Deployment controller, i.e., it must not be equal to
          the revision number in the previous outputs. This number is used to indicate the the
          active ReplicaSet. Any time a change is made to the Deployment's Pod template, this
          revision is incremented, and a new ReplicaSet is created with a corresponding revision
          number in its own annotations. This condition overall is a test to make sure that the
          Deployment controller is making progress in rolling forward to the new generation.
        2. '.status.conditions' has a status with 'type' equal to 'Progressing', a 'status' set to
          'True', and a 'reason' set to 'NewReplicaSetAvailable'. Though the condition is called
          "Progressing", this condition indicates that the new ReplicaSet has become healthy and
          available, and the Deployment controller is now free to delete the old ReplicaSet.
        3. '.status.conditions' has a status with 'type' equal to 'Available', a 'status' equal to
          'True'. If the Deployment is not available, we should fail the Deployment immediately.
        
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['apiVersion'] = 'extensions/v1beta1'
        __props__['kind'] = 'Deployment'
        __props__['metadata'] = metadata
        __props__['spec'] = spec
        __props__['status'] = status

        if opts is None:
            opts = pulumi.ResourceOptions()
        if opts.version is None:
            opts.version = version.get_version()

        super(Deployment, self).__init__(
            "kubernetes:extensions/v1beta1:Deployment",
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(name: str, id: Input[str], opts: Optional[ResourceOptions] = None):
        opts = ResourceOptions(id=id) if opts is None else opts.merge(ResourceOptions(id=id))
        return Deployment(name, opts)

    def translate_output_property(self, prop: str) -> str:
        return tables._CASING_FORWARD_TABLE.get(prop) or prop

    def translate_input_property(self, prop: str) -> str:
        return tables._CASING_BACKWARD_TABLE.get(prop) or prop
