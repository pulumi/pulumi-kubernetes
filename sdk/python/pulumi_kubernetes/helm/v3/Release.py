# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReleaseArgs', 'Release']

@pulumi.input_type
class ReleaseArgs:
    def __init__(__self__, *,
                 release_spec: pulumi.Input['ReleaseSpecArgs'],
                 compat: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Release resource.
        """
        pulumi.set(__self__, "release_spec", release_spec)
        if compat is not None:
            pulumi.set(__self__, "compat", 'true')

    @property
    @pulumi.getter(name="releaseSpec")
    def release_spec(self) -> pulumi.Input['ReleaseSpecArgs']:
        return pulumi.get(self, "release_spec")

    @release_spec.setter
    def release_spec(self, value: pulumi.Input['ReleaseSpecArgs']):
        pulumi.set(self, "release_spec", value)

    @property
    @pulumi.getter
    def compat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compat")

    @compat.setter
    def compat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compat", value)


class Release(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compat: Optional[pulumi.Input[str]] = None,
                 release_spec: Optional[pulumi.Input[pulumi.InputType['ReleaseSpecArgs']]] = None,
                 __props__=None):
        """
        A Release is an instance of a chart running in a Kubernetes cluster.

        A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Release is an instance of a chart running in a Kubernetes cluster.

        A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.

        :param str resource_name: The name of the resource.
        :param ReleaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compat: Optional[pulumi.Input[str]] = None,
                 release_spec: Optional[pulumi.Input[pulumi.InputType['ReleaseSpecArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseArgs.__new__(ReleaseArgs)

            __props__.__dict__["compat"] = 'true'
            if release_spec is None and not opts.urn:
                raise TypeError("Missing required property 'release_spec'")
            __props__.__dict__["release_spec"] = release_spec
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
        super(Release, __self__).__init__(
            'kubernetes:helm.sh/v3:Release',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Release':
        """
        Get an existing Release resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ReleaseArgs.__new__(ReleaseArgs)

        __props__.__dict__["release_spec"] = None
        __props__.__dict__["resource_type"] = None
        __props__.__dict__["status"] = None
        return Release(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="releaseSpec")
    def release_spec(self) -> pulumi.Output['outputs.ReleaseSpec']:
        return pulumi.get(self, "release_spec")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ReleaseStatus']:
        """
        Status of the deployed release.
        """
        return pulumi.get(self, "status")

