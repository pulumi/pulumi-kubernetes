# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ReleaseStatus',
    'RepositorySpec',
]

@pulumi.output_type
class ReleaseStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appVersion":
            suggest = "app_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 app_version: Optional[str] = None,
                 chart: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 revision: Optional[int] = None,
                 version: Optional[str] = None):
        """
        :param str status: Status of the release.
        :param str app_version: The version number of the application being deployed.
        :param str chart: The name of the chart.
        :param str name: Name is the name of the release.
        :param str namespace: Namespace is the kubernetes namespace of the release.
        :param int revision: Version is an int32 which represents the version of the release.
        :param str version: A SemVer 2 conformant version string of the chart.
        """
        pulumi.set(__self__, "status", status)
        if app_version is not None:
            pulumi.set(__self__, "app_version", app_version)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the release.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[str]:
        """
        The version number of the application being deployed.
        """
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        The name of the chart.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the release.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the kubernetes namespace of the release.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        """
        Version is an int32 which represents the version of the release.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        A SemVer 2 conformant version string of the chart.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RepositorySpec(dict):
    """
    Specification defining the Helm chart repository to use.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryCAFile":
            suggest = "repository_ca_file"
        elif key == "repositoryCertFile":
            suggest = "repository_cert_file"
        elif key == "repositoryKeyFile":
            suggest = "repository_key_file"
        elif key == "repositoryPassword":
            suggest = "repository_password"
        elif key == "repositoryUsername":
            suggest = "repository_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositorySpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositorySpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositorySpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository: Optional[str] = None,
                 repository_ca_file: Optional[str] = None,
                 repository_cert_file: Optional[str] = None,
                 repository_key_file: Optional[str] = None,
                 repository_password: Optional[str] = None,
                 repository_username: Optional[str] = None):
        """
        Specification defining the Helm chart repository to use.
        :param str repository: Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        :param str repository_ca_file: The Repositories CA File
        :param str repository_cert_file: The repositories cert file
        :param str repository_key_file: The repositories cert key file
        :param str repository_password: Password for HTTP basic authentication
        :param str repository_username: Username for HTTP basic authentication
        """
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if repository_ca_file is not None:
            pulumi.set(__self__, "repository_ca_file", repository_ca_file)
        if repository_cert_file is not None:
            pulumi.set(__self__, "repository_cert_file", repository_cert_file)
        if repository_key_file is not None:
            pulumi.set(__self__, "repository_key_file", repository_key_file)
        if repository_password is not None:
            pulumi.set(__self__, "repository_password", repository_password)
        if repository_username is not None:
            pulumi.set(__self__, "repository_username", repository_username)

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="repositoryCAFile")
    def repository_ca_file(self) -> Optional[str]:
        """
        The Repositories CA File
        """
        return pulumi.get(self, "repository_ca_file")

    @property
    @pulumi.getter(name="repositoryCertFile")
    def repository_cert_file(self) -> Optional[str]:
        """
        The repositories cert file
        """
        return pulumi.get(self, "repository_cert_file")

    @property
    @pulumi.getter(name="repositoryKeyFile")
    def repository_key_file(self) -> Optional[str]:
        """
        The repositories cert key file
        """
        return pulumi.get(self, "repository_key_file")

    @property
    @pulumi.getter(name="repositoryPassword")
    def repository_password(self) -> Optional[str]:
        """
        Password for HTTP basic authentication
        """
        return pulumi.get(self, "repository_password")

    @property
    @pulumi.getter(name="repositoryUsername")
    def repository_username(self) -> Optional[str]:
        """
        Username for HTTP basic authentication
        """
        return pulumi.get(self, "repository_username")


