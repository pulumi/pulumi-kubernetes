# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ReleaseSpec',
    'ReleaseStatus',
    'RepositorySpec',
    'SetValue',
]

@pulumi.output_type
class ReleaseSpec(dict):
    """
    Specification defining the Helm Release to install.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositorySpec":
            suggest = "repository_spec"
        elif key == "cleanupOnFail":
            suggest = "cleanup_on_fail"
        elif key == "createNamespace":
            suggest = "create_namespace"
        elif key == "dependencyUpdate":
            suggest = "dependency_update"
        elif key == "disableCRDHooks":
            suggest = "disable_crd_hooks"
        elif key == "disableOpenapiValidation":
            suggest = "disable_openapi_validation"
        elif key == "disableWebhooks":
            suggest = "disable_webhooks"
        elif key == "forceUpdate":
            suggest = "force_update"
        elif key == "maxHistory":
            suggest = "max_history"
        elif key == "recreatePods":
            suggest = "recreate_pods"
        elif key == "renderSubchartNotes":
            suggest = "render_subchart_notes"
        elif key == "resetValues":
            suggest = "reset_values"
        elif key == "reuseValues":
            suggest = "reuse_values"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "waitForJobs":
            suggest = "wait_for_jobs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: str,
                 name: str,
                 repository_spec: 'outputs.RepositorySpec',
                 set: Sequence['outputs.SetValue'],
                 atomic: Optional[bool] = None,
                 cleanup_on_fail: Optional[bool] = None,
                 create_namespace: Optional[bool] = None,
                 dependency_update: Optional[bool] = None,
                 description: Optional[str] = None,
                 devel: Optional[bool] = None,
                 disable_crd_hooks: Optional[bool] = None,
                 disable_openapi_validation: Optional[bool] = None,
                 disable_webhooks: Optional[bool] = None,
                 force_update: Optional[bool] = None,
                 keyring: Optional[str] = None,
                 lint: Optional[bool] = None,
                 max_history: Optional[int] = None,
                 namespace: Optional[str] = None,
                 postrender: Optional[str] = None,
                 recreate_pods: Optional[bool] = None,
                 render_subchart_notes: Optional[bool] = None,
                 replace: Optional[bool] = None,
                 reset_values: Optional[bool] = None,
                 reuse_values: Optional[bool] = None,
                 skip_crds: Optional[bool] = None,
                 timeout: Optional[int] = None,
                 values: Optional[Sequence[str]] = None,
                 verify: Optional[bool] = None,
                 version: Optional[str] = None,
                 wait: Optional[bool] = None,
                 wait_for_jobs: Optional[bool] = None):
        """
        Specification defining the Helm Release to install.
        :param str chart: Chart name to be installed. A path may be used.
        :param str name: Release name.
        :param 'RepositorySpecArgs' repository_spec: Specification defining the Helm chart repository to use.
        :param Sequence['SetValueArgs'] set: Custom values to be merged with the values.
        :param bool atomic: If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
        :param bool cleanup_on_fail: Allow deletion of new resources created in this upgrade when upgrade fails
        :param bool create_namespace: Create the namespace if it does not exist
        :param bool dependency_update: Run helm dependency update before installing the chart
        :param str description: Add a custom description
        :param bool devel: Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
        :param bool disable_crd_hooks: Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
        :param bool disable_openapi_validation: If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
        :param bool disable_webhooks: Prevent hooks from running.
        :param bool force_update: Force resource update through delete/recreate if needed.
        :param str keyring: Location of public keys used for verification. Used only if `verify` is true
        :param bool lint: Run helm lint when planning
        :param int max_history: Limit the maximum number of revisions saved per release. Use 0 for no limit
        :param str namespace: Namespace to install the release into.
        :param str postrender: Postrender command to run.
        :param bool recreate_pods: Perform pods restart during upgrade/rollback
        :param bool render_subchart_notes: If set, render subchart notes along with the parent
        :param bool replace: Re-use the given name, even if that name is already used. This is unsafe in production
        :param bool reset_values: When upgrading, reset the values to the ones built into the chart
        :param bool reuse_values: When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
        :param bool skip_crds: If set, no CRDs will be installed. By default, CRDs are installed if not already present
        :param int timeout: Time in seconds to wait for any individual kubernetes operation.
        :param Sequence[str] values: List of values in raw yaml format to pass to helm.
        :param bool verify: Verify the package before installing it.
        :param str version: Specify the exact chart version to install. If this is not specified, the latest version is installed.
        :param bool wait: Will wait until all resources are in a ready state before marking the release as successful.
        :param bool wait_for_jobs: If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
        """
        pulumi.set(__self__, "chart", chart)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "repository_spec", repository_spec)
        pulumi.set(__self__, "set", set)
        if atomic is not None:
            pulumi.set(__self__, "atomic", atomic)
        if cleanup_on_fail is not None:
            pulumi.set(__self__, "cleanup_on_fail", cleanup_on_fail)
        if create_namespace is not None:
            pulumi.set(__self__, "create_namespace", create_namespace)
        if dependency_update is not None:
            pulumi.set(__self__, "dependency_update", dependency_update)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if devel is not None:
            pulumi.set(__self__, "devel", devel)
        if disable_crd_hooks is not None:
            pulumi.set(__self__, "disable_crd_hooks", disable_crd_hooks)
        if disable_openapi_validation is not None:
            pulumi.set(__self__, "disable_openapi_validation", disable_openapi_validation)
        if disable_webhooks is not None:
            pulumi.set(__self__, "disable_webhooks", disable_webhooks)
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if lint is not None:
            pulumi.set(__self__, "lint", lint)
        if max_history is not None:
            pulumi.set(__self__, "max_history", max_history)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if postrender is not None:
            pulumi.set(__self__, "postrender", postrender)
        if recreate_pods is not None:
            pulumi.set(__self__, "recreate_pods", recreate_pods)
        if render_subchart_notes is not None:
            pulumi.set(__self__, "render_subchart_notes", render_subchart_notes)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if reset_values is not None:
            pulumi.set(__self__, "reset_values", reset_values)
        if reuse_values is not None:
            pulumi.set(__self__, "reuse_values", reuse_values)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if verify is not None:
            pulumi.set(__self__, "verify", verify)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)
        if wait_for_jobs is not None:
            pulumi.set(__self__, "wait_for_jobs", wait_for_jobs)

    @property
    @pulumi.getter
    def chart(self) -> str:
        """
        Chart name to be installed. A path may be used.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Release name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repositorySpec")
    def repository_spec(self) -> 'outputs.RepositorySpec':
        """
        Specification defining the Helm chart repository to use.
        """
        return pulumi.get(self, "repository_spec")

    @property
    @pulumi.getter
    def set(self) -> Sequence['outputs.SetValue']:
        """
        Custom values to be merged with the values.
        """
        return pulumi.get(self, "set")

    @property
    @pulumi.getter
    def atomic(self) -> Optional[bool]:
        """
        If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
        """
        return pulumi.get(self, "atomic")

    @property
    @pulumi.getter(name="cleanupOnFail")
    def cleanup_on_fail(self) -> Optional[bool]:
        """
        Allow deletion of new resources created in this upgrade when upgrade fails
        """
        return pulumi.get(self, "cleanup_on_fail")

    @property
    @pulumi.getter(name="createNamespace")
    def create_namespace(self) -> Optional[bool]:
        """
        Create the namespace if it does not exist
        """
        return pulumi.get(self, "create_namespace")

    @property
    @pulumi.getter(name="dependencyUpdate")
    def dependency_update(self) -> Optional[bool]:
        """
        Run helm dependency update before installing the chart
        """
        return pulumi.get(self, "dependency_update")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Add a custom description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devel(self) -> Optional[bool]:
        """
        Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
        """
        return pulumi.get(self, "devel")

    @property
    @pulumi.getter(name="disableCRDHooks")
    def disable_crd_hooks(self) -> Optional[bool]:
        """
        Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
        """
        return pulumi.get(self, "disable_crd_hooks")

    @property
    @pulumi.getter(name="disableOpenapiValidation")
    def disable_openapi_validation(self) -> Optional[bool]:
        """
        If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
        """
        return pulumi.get(self, "disable_openapi_validation")

    @property
    @pulumi.getter(name="disableWebhooks")
    def disable_webhooks(self) -> Optional[bool]:
        """
        Prevent hooks from running.
        """
        return pulumi.get(self, "disable_webhooks")

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[bool]:
        """
        Force resource update through delete/recreate if needed.
        """
        return pulumi.get(self, "force_update")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        """
        Location of public keys used for verification. Used only if `verify` is true
        """
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def lint(self) -> Optional[bool]:
        """
        Run helm lint when planning
        """
        return pulumi.get(self, "lint")

    @property
    @pulumi.getter(name="maxHistory")
    def max_history(self) -> Optional[int]:
        """
        Limit the maximum number of revisions saved per release. Use 0 for no limit
        """
        return pulumi.get(self, "max_history")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace to install the release into.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def postrender(self) -> Optional[str]:
        """
        Postrender command to run.
        """
        return pulumi.get(self, "postrender")

    @property
    @pulumi.getter(name="recreatePods")
    def recreate_pods(self) -> Optional[bool]:
        """
        Perform pods restart during upgrade/rollback
        """
        return pulumi.get(self, "recreate_pods")

    @property
    @pulumi.getter(name="renderSubchartNotes")
    def render_subchart_notes(self) -> Optional[bool]:
        """
        If set, render subchart notes along with the parent
        """
        return pulumi.get(self, "render_subchart_notes")

    @property
    @pulumi.getter
    def replace(self) -> Optional[bool]:
        """
        Re-use the given name, even if that name is already used. This is unsafe in production
        """
        return pulumi.get(self, "replace")

    @property
    @pulumi.getter(name="resetValues")
    def reset_values(self) -> Optional[bool]:
        """
        When upgrading, reset the values to the ones built into the chart
        """
        return pulumi.get(self, "reset_values")

    @property
    @pulumi.getter(name="reuseValues")
    def reuse_values(self) -> Optional[bool]:
        """
        When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
        """
        return pulumi.get(self, "reuse_values")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        If set, no CRDs will be installed. By default, CRDs are installed if not already present
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Time in seconds to wait for any individual kubernetes operation.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        List of values in raw yaml format to pass to helm.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def verify(self) -> Optional[bool]:
        """
        Verify the package before installing it.
        """
        return pulumi.get(self, "verify")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specify the exact chart version to install. If this is not specified, the latest version is installed.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def wait(self) -> Optional[bool]:
        """
        Will wait until all resources are in a ready state before marking the release as successful.
        """
        return pulumi.get(self, "wait")

    @property
    @pulumi.getter(name="waitForJobs")
    def wait_for_jobs(self) -> Optional[bool]:
        """
        If wait is enabled, will wait until all Jobs have been completed before marking the release as successful.
        """
        return pulumi.get(self, "wait_for_jobs")


@pulumi.output_type
class ReleaseStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appVersion":
            suggest = "app_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 app_version: Optional[str] = None,
                 chart: Optional[str] = None,
                 manifest: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 revision: Optional[int] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str status: Status of the release.
        :param str app_version: The version number of the application being deployed.
        :param str chart: The name of the chart.
        :param str manifest: The rendered manifest as JSON.
        :param str name: Name is the name of the release.
        :param str namespace: Namespace is the kubernetes namespace of the release.
        :param int revision: Version is an int32 which represents the version of the release.
        :param str values: Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
        :param str version: A SemVer 2 conformant version string of the chart.
        """
        pulumi.set(__self__, "status", status)
        if app_version is not None:
            pulumi.set(__self__, "app_version", app_version)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if manifest is not None:
            pulumi.set(__self__, "manifest", manifest)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the release.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[str]:
        """
        The version number of the application being deployed.
        """
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        The name of the chart.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def manifest(self) -> Optional[str]:
        """
        The rendered manifest as JSON.
        """
        return pulumi.get(self, "manifest")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the release.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the kubernetes namespace of the release.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        """
        Version is an int32 which represents the version of the release.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Set of extra values, added to the chart. The sensitive data is cloaked. JSON encoded.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        A SemVer 2 conformant version string of the chart.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RepositorySpec(dict):
    """
    Specification defining the Helm chart repository to use.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryCAFile":
            suggest = "repository_ca_file"
        elif key == "repositoryCertFile":
            suggest = "repository_cert_file"
        elif key == "repositoryKeyFile":
            suggest = "repository_key_file"
        elif key == "repositoryPassword":
            suggest = "repository_password"
        elif key == "repositoryUsername":
            suggest = "repository_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositorySpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositorySpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositorySpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository: Optional[str] = None,
                 repository_ca_file: Optional[str] = None,
                 repository_cert_file: Optional[str] = None,
                 repository_key_file: Optional[str] = None,
                 repository_password: Optional[str] = None,
                 repository_username: Optional[str] = None):
        """
        Specification defining the Helm chart repository to use.
        :param str repository: Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        :param str repository_ca_file: The Repositories CA File
        :param str repository_cert_file: The repositories cert file
        :param str repository_key_file: The repositories cert key file
        :param str repository_password: Password for HTTP basic authentication
        :param str repository_username: Username for HTTP basic authentication
        """
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if repository_ca_file is not None:
            pulumi.set(__self__, "repository_ca_file", repository_ca_file)
        if repository_cert_file is not None:
            pulumi.set(__self__, "repository_cert_file", repository_cert_file)
        if repository_key_file is not None:
            pulumi.set(__self__, "repository_key_file", repository_key_file)
        if repository_password is not None:
            pulumi.set(__self__, "repository_password", repository_password)
        if repository_username is not None:
            pulumi.set(__self__, "repository_username", repository_username)

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="repositoryCAFile")
    def repository_ca_file(self) -> Optional[str]:
        """
        The Repositories CA File
        """
        return pulumi.get(self, "repository_ca_file")

    @property
    @pulumi.getter(name="repositoryCertFile")
    def repository_cert_file(self) -> Optional[str]:
        """
        The repositories cert file
        """
        return pulumi.get(self, "repository_cert_file")

    @property
    @pulumi.getter(name="repositoryKeyFile")
    def repository_key_file(self) -> Optional[str]:
        """
        The repositories cert key file
        """
        return pulumi.get(self, "repository_key_file")

    @property
    @pulumi.getter(name="repositoryPassword")
    def repository_password(self) -> Optional[str]:
        """
        Password for HTTP basic authentication
        """
        return pulumi.get(self, "repository_password")

    @property
    @pulumi.getter(name="repositoryUsername")
    def repository_username(self) -> Optional[str]:
        """
        Username for HTTP basic authentication
        """
        return pulumi.get(self, "repository_username")


@pulumi.output_type
class SetValue(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


