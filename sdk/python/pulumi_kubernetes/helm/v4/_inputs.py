# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'PostRendererArgs',
]

@pulumi.input_type
class PostRendererArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Specification defining the post-renderer to use.
        :param pulumi.Input[str] command: Path to an executable to be used for post rendering.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to pass to the post-renderer command.
        """
        pulumi.set(__self__, "command", command)
        if args is not None:
            pulumi.set(__self__, "args", args)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[str]:
        """
        Path to an executable to be used for post rendering.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to pass to the post-renderer command.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)


