# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from ... import utilities, tables


class PodSecurityPolicy(pulumi.CustomResource):
    api_version: pulumi.Output[str]
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: pulumi.Output[str]
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: pulumi.Output[dict]
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * `annotations` (`dict`) - Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
      * `cluster_name` (`str`) - The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
      * `creation_timestamp` (`str`) - CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
        
        Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * `deletion_grace_period_seconds` (`float`) - Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      * `deletion_timestamp` (`str`) - DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
        
        Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * `finalizers` (`list`) - Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
      * `generate_name` (`str`) - GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
        
        If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
        
        Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
      * `generation` (`float`) - A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      * `labels` (`dict`) - Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
      * `managed_fields` (`list`) - ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
        * `api_version` (`str`) - APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
        * `fieldsType` (`str`) - FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
        * `fieldsV1` (`dict`) - FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
        * `manager` (`str`) - Manager is an identifier of the workflow managing these fields.
        * `operation` (`str`) - Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
        * `time` (`str`) - Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'

      * `name` (`str`) - Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      * `namespace` (`str`) - Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
        
        Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
      * `owner_references` (`list`) - List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        * `api_version` (`str`) - API version of the referent.
        * `blockOwnerDeletion` (`bool`) - If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        * `controller` (`bool`) - If true, this reference points to the managing controller.
        * `kind` (`str`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        * `name` (`str`) - Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        * `uid` (`str`) - UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

      * `resource_version` (`str`) - An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
        
        Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
      * `self_link` (`str`) - SelfLink is a URL representing this object. Populated by the system. Read-only.
        
        DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
      * `uid` (`str`) - UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
        
        Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    """
    spec: pulumi.Output[dict]
    """
    spec defines the policy enforced.
      * `allow_privilege_escalation` (`bool`) - allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
      * `allowed_csi_drivers` (`list`) - AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
        * `name` (`str`) - Name is the registered name of the CSI driver

      * `allowed_capabilities` (`list`) - allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
      * `allowed_flex_volumes` (`list`) - allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
        * `driver` (`str`) - driver is the name of the Flexvolume driver.

      * `allowed_host_paths` (`list`) - allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
        * `pathPrefix` (`str`) - pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
          
          Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
        * `read_only` (`bool`) - when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.

      * `allowed_proc_mount_types` (`list`) - AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
      * `allowed_unsafe_sysctls` (`list`) - allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
        
        Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
      * `default_add_capabilities` (`list`) - defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
      * `default_allow_privilege_escalation` (`bool`) - defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
      * `forbidden_sysctls` (`list`) - forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
        
        Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
      * `fs_group` (`dict`) - fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
        * `ranges` (`list`) - ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
          * `max` (`float`) - max is the end of the range, inclusive.
          * `min` (`float`) - min is the start of the range, inclusive.

        * `rule` (`str`) - rule is the strategy that will dictate what FSGroup is used in the SecurityContext.

      * `host_ipc` (`bool`) - hostIPC determines if the policy allows the use of HostIPC in the pod spec.
      * `host_network` (`bool`) - hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
      * `host_pid` (`bool`) - hostPID determines if the policy allows the use of HostPID in the pod spec.
      * `host_ports` (`list`) - hostPorts determines which host port ranges are allowed to be exposed.
        * `max` (`float`) - max is the end of the range, inclusive.
        * `min` (`float`) - min is the start of the range, inclusive.

      * `privileged` (`bool`) - privileged determines if a pod can request to be run as privileged.
      * `read_only_root_filesystem` (`bool`) - readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
      * `required_drop_capabilities` (`list`) - requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
      * `run_as_group` (`dict`) - RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
        * `ranges` (`list`) - ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
        * `rule` (`str`) - rule is the strategy that will dictate the allowable RunAsGroup values that may be set.

      * `run_as_user` (`dict`) - runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
        * `ranges` (`list`) - ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
        * `rule` (`str`) - rule is the strategy that will dictate the allowable RunAsUser values that may be set.

      * `runtime_class` (`dict`) - runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
        * `allowed_runtime_class_names` (`list`) - allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
        * `default_runtime_class_name` (`str`) - defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.

      * `se_linux` (`dict`) - seLinux is the strategy that will dictate the allowable labels that may be set.
        * `rule` (`str`) - rule is the strategy that will dictate the allowable labels that may be set.
        * `se_linux_options` (`dict`) - seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
          * `level` (`str`) - Level is SELinux level label that applies to the container.
          * `role` (`str`) - Role is a SELinux role label that applies to the container.
          * `type` (`str`) - Type is a SELinux type label that applies to the container.
          * `user` (`str`) - User is a SELinux user label that applies to the container.

      * `supplemental_groups` (`dict`) - supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
        * `ranges` (`list`) - ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
        * `rule` (`str`) - rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.

      * `volumes` (`list`) - volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
    """
    def __init__(__self__, resource_name, opts=None, api_version=None, kind=None, metadata=None, spec=None, __props__=None, __name__=None, __opts__=None):
        """
        PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[dict] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[dict] spec: spec defines the policy enforced.

        The **metadata** object supports the following:

          * `annotations` (`pulumi.Input[dict]`) - Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
          * `cluster_name` (`pulumi.Input[str]`) - The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          * `creation_timestamp` (`pulumi.Input[str]`) - CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
            
            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          * `deletion_grace_period_seconds` (`pulumi.Input[float]`) - Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
          * `deletion_timestamp` (`pulumi.Input[str]`) - DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
            
            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          * `finalizers` (`pulumi.Input[list]`) - Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
          * `generate_name` (`pulumi.Input[str]`) - GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
            
            If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
            
            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          * `generation` (`pulumi.Input[float]`) - A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
          * `labels` (`pulumi.Input[dict]`) - Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
          * `managed_fields` (`pulumi.Input[list]`) - ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
            * `api_version` (`pulumi.Input[str]`) - APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
            * `fieldsType` (`pulumi.Input[str]`) - FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
            * `fieldsV1` (`pulumi.Input[dict]`) - FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
            * `manager` (`pulumi.Input[str]`) - Manager is an identifier of the workflow managing these fields.
            * `operation` (`pulumi.Input[str]`) - Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
            * `time` (`pulumi.Input[str]`) - Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'

          * `name` (`pulumi.Input[str]`) - Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          * `namespace` (`pulumi.Input[str]`) - Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
            
            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
          * `owner_references` (`pulumi.Input[list]`) - List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
            * `api_version` (`pulumi.Input[str]`) - API version of the referent.
            * `blockOwnerDeletion` (`pulumi.Input[bool]`) - If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
            * `controller` (`pulumi.Input[bool]`) - If true, this reference points to the managing controller.
            * `kind` (`pulumi.Input[str]`) - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            * `name` (`pulumi.Input[str]`) - Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            * `uid` (`pulumi.Input[str]`) - UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

          * `resource_version` (`pulumi.Input[str]`) - An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
            
            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          * `self_link` (`pulumi.Input[str]`) - SelfLink is a URL representing this object. Populated by the system. Read-only.
            
            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
          * `uid` (`pulumi.Input[str]`) - UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
            
            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids

        The **spec** object supports the following:

          * `allow_privilege_escalation` (`pulumi.Input[bool]`) - allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
          * `allowed_csi_drivers` (`pulumi.Input[list]`) - AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
            * `name` (`pulumi.Input[str]`) - Name is the registered name of the CSI driver

          * `allowed_capabilities` (`pulumi.Input[list]`) - allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
          * `allowed_flex_volumes` (`pulumi.Input[list]`) - allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
            * `driver` (`pulumi.Input[str]`) - driver is the name of the Flexvolume driver.

          * `allowed_host_paths` (`pulumi.Input[list]`) - allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
            * `pathPrefix` (`pulumi.Input[str]`) - pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
              
              Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
            * `read_only` (`pulumi.Input[bool]`) - when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.

          * `allowed_proc_mount_types` (`pulumi.Input[list]`) - AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
          * `allowed_unsafe_sysctls` (`pulumi.Input[list]`) - allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
            
            Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
          * `default_add_capabilities` (`pulumi.Input[list]`) - defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
          * `default_allow_privilege_escalation` (`pulumi.Input[bool]`) - defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
          * `forbidden_sysctls` (`pulumi.Input[list]`) - forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
            
            Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
          * `fs_group` (`pulumi.Input[dict]`) - fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
            * `ranges` (`pulumi.Input[list]`) - ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
              * `max` (`pulumi.Input[float]`) - max is the end of the range, inclusive.
              * `min` (`pulumi.Input[float]`) - min is the start of the range, inclusive.

            * `rule` (`pulumi.Input[str]`) - rule is the strategy that will dictate what FSGroup is used in the SecurityContext.

          * `host_ipc` (`pulumi.Input[bool]`) - hostIPC determines if the policy allows the use of HostIPC in the pod spec.
          * `host_network` (`pulumi.Input[bool]`) - hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
          * `host_pid` (`pulumi.Input[bool]`) - hostPID determines if the policy allows the use of HostPID in the pod spec.
          * `host_ports` (`pulumi.Input[list]`) - hostPorts determines which host port ranges are allowed to be exposed.
            * `max` (`pulumi.Input[float]`) - max is the end of the range, inclusive.
            * `min` (`pulumi.Input[float]`) - min is the start of the range, inclusive.

          * `privileged` (`pulumi.Input[bool]`) - privileged determines if a pod can request to be run as privileged.
          * `read_only_root_filesystem` (`pulumi.Input[bool]`) - readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
          * `required_drop_capabilities` (`pulumi.Input[list]`) - requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
          * `run_as_group` (`pulumi.Input[dict]`) - RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
            * `ranges` (`pulumi.Input[list]`) - ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
            * `rule` (`pulumi.Input[str]`) - rule is the strategy that will dictate the allowable RunAsGroup values that may be set.

          * `run_as_user` (`pulumi.Input[dict]`) - runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
            * `ranges` (`pulumi.Input[list]`) - ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
            * `rule` (`pulumi.Input[str]`) - rule is the strategy that will dictate the allowable RunAsUser values that may be set.

          * `runtime_class` (`pulumi.Input[dict]`) - runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
            * `allowed_runtime_class_names` (`pulumi.Input[list]`) - allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
            * `default_runtime_class_name` (`pulumi.Input[str]`) - defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.

          * `se_linux` (`pulumi.Input[dict]`) - seLinux is the strategy that will dictate the allowable labels that may be set.
            * `rule` (`pulumi.Input[str]`) - rule is the strategy that will dictate the allowable labels that may be set.
            * `se_linux_options` (`pulumi.Input[dict]`) - seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
              * `level` (`pulumi.Input[str]`) - Level is SELinux level label that applies to the container.
              * `role` (`pulumi.Input[str]`) - Role is a SELinux role label that applies to the container.
              * `type` (`pulumi.Input[str]`) - Type is a SELinux type label that applies to the container.
              * `user` (`pulumi.Input[str]`) - User is a SELinux user label that applies to the container.

          * `supplemental_groups` (`pulumi.Input[dict]`) - supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
            * `ranges` (`pulumi.Input[list]`) - ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
            * `rule` (`pulumi.Input[str]`) - rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.

          * `volumes` (`pulumi.Input[list]`) - volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['api_version'] = api_version
            __props__['kind'] = kind
            __props__['metadata'] = metadata
            __props__['spec'] = spec
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="kubernetes:extensions/v1beta1:PodSecurityPolicy")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PodSecurityPolicy, __self__).__init__(
            'kubernetes:policy/v1beta1:PodSecurityPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None):
        """
        Get an existing PodSecurityPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return PodSecurityPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
