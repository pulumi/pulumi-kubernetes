# *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from typing import Any, Optional, overload
from .. import _utilities
from .. import meta as _meta

__all__ = ['CustomResourceArgs', 'CustomResource']

@pulumi.input_type
class CustomResourceArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None,
                 spec: Optional[Any] = None):
        """
        The set of arguments for constructing a CustomResource resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: Standard object metadata.
        :param Any spec: Specification of the CustomResource.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]:
        """
        Standard object metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[Any]:
        """
        Specification of the CustomResource.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[Any]):
        pulumi.set(self, "spec", value)

class CustomResource(pulumi.CustomResource):
    @overload
    def __init__(self,
                 resource_name: str,
                 api_version: str,
                 kind: str,
                 spec: Optional[pulumi.Input[Any]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['_meta.v1.ObjectMetaArgs']]] = None,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        CustomResource represents an instance of a CustomResourceDefinition (CRD). For example, the
        CoreOS Prometheus operator exposes a CRD `monitoring.coreos.com/ServiceMonitor`; to
        instantiate this as a Pulumi resource, one could call `new CustomResource`, passing the
        `ServiceMonitor` resource definition as an argument.

        :param str resource_name: _Unique_ name used to register this resource with Pulumi.
        :param str api_version: The API version of the apiExtensions.CustomResource we
               wish to select, as specified by the CustomResourceDefinition that defines it on the
               API server.
        :param str kind: The kind of the apiextensions.CustomResource we wish to select,
               as specified by the CustomResourceDefinition that defines it on the API server.
        :param Optional[pulumi.Input[Any]] spec: Specification of the CustomResource.
        :param Optional[pulumi.Input[pulumi.InputType['_meta.v1.ObjectMetaArgs']]] metadata: Standard object metadata;
               More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
        :param Optional[pulumi.ResourceOptions] opts: A bag of options that control this
               resource's behavior.
        """
        ...
    @overload
    def __init__(self,
                 resource_name: str,
                 args: Optional[CustomResourceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CustomResource represents an instance of a CustomResourceDefinition (CRD). For example, the
        CoreOS Prometheus operator exposes a CRD `monitoring.coreos.com/ServiceMonitor`; to
        instantiate this as a Pulumi resource, one could call `new CustomResource`, passing the
        `ServiceMonitor` resource definition as an argument.

        :param str resource_name: _Unique_ name used to register this resource with Pulumi.
        :param CustomResourceArgs args: The arguments to use to populate this resource's properties.
        :param Optional[pulumi.ResourceOptions] opts: A bag of options that control this
               resource's behavior.
        """
        ...
    def __init__(self, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            self._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            self._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 api_version: Optional[str] = None,
                 kind: Optional[str] = None,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['_meta.v1.ObjectMetaArgs']]] = None,
                 spec: Optional[Any] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomResourceArgs.__new__(CustomResourceArgs)

            if api_version is None and not opts.urn:
                raise TypeError("Missing required property 'api_version'")
            __props__.__dict__["api_version"] = api_version
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["spec"] = spec
        super(CustomResource, __self__).__init__(
            f"kubernetes:{api_version}:{kind}",
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            api_version: str,
            kind: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomResource':
        """
        Get an existing CustomResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: _Unique_ name used to register this resource with Pulumi.
        :param str api_version: The API version of the apiExtensions.CustomResource we
               wish to select, as specified by the CustomResourceDefinition that defines it on the
               API server.
        :param str kind: The kind of the apiextensions.CustomResource we wish to select,
               as specified by the CustomResourceDefinition that defines it on the API server.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param Optional[pulumi.ResourceOptions] opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomResourceArgs.__new__(CustomResourceArgs)

        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["kind"] = kind
        __props__.__dict__["metadata"] = None
        __props__.__dict__["spec"] = None
        return CustomResource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['_meta.v1.outputs.ObjectMeta']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[Any]:
        """
        Specification of the CustomResource.
        """
        return pulumi.get(self, "spec")
