// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * ConfigFile creates a set of Kubernetes resources from a Kubernetes YAML file.
 *
 * ## Example Usage
 * ### Local File
 *
 * ```typescript
 * import * as k8s from "@pulumi/kubernetes";
 *
 * const example = new k8s.yaml.v2.ConfigFile("example", {
 *   file: "foo.yaml",
 * });
 * ```
 * {% /examples %}}
 */
export class ConfigFile extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes:yaml/v2:ConfigFile';

    /**
     * Returns true if the given object is an instance of ConfigFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigFile.__pulumiType;
    }

    /**
     * Resources created by the ConfigFile.
     */
    public /*out*/ readonly resources!: pulumi.Output<any[]>;

    /**
     * Create a ConfigFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigFileArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.file === undefined) && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["resourcePrefix"] = args ? args.resourcePrefix : undefined;
            resourceInputs["skipAwait"] = args ? args.skipAwait : undefined;
            resourceInputs["resources"] = undefined /*out*/;
        } else {
            resourceInputs["resources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigFile.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ConfigFile resource.
 */
export interface ConfigFileArgs {
    /**
     * Path or URL to a Kubernetes manifest file. File must exist.
     */
    file: pulumi.Input<string>;
    /**
     * A prefix for the auto-generated resource names. Defaults to the name of the ConfigFile. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
     */
    resourcePrefix?: pulumi.Input<string>;
    /**
     * Indicates that child resources should skip the await logic.
     */
    skipAwait?: pulumi.Input<boolean>;
}
