// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export * as admissionregistration from "./admissionregistration/input";
export * as apiextensions from "./apiextensions/input";
export * as apiregistration from "./apiregistration/input";
export * as apps from "./apps/input";
export * as auditregistration from "./auditregistration/input";
export * as authentication from "./authentication/input";
export * as authorization from "./authorization/input";
export * as autoscaling from "./autoscaling/input";
export * as batch from "./batch/input";
export * as certificates from "./certificates/input";
export * as coordination from "./coordination/input";
export * as core from "./core/input";
export * as discovery from "./discovery/input";
export * as events from "./events/input";
export * as extensions from "./extensions/input";
export * as flowcontrol from "./flowcontrol/input";
export * as helm from "./helm/input";
export * as meta from "./meta/input";
export * as networking from "./networking/input";
export * as node from "./node/input";
export * as pkg from "./pkg/input";
export * as policy from "./policy/input";
export * as rbac from "./rbac/input";
export * as scheduling from "./scheduling/input";
export * as settings from "./settings/input";
export * as storage from "./storage/input";
/**
 * Options to configure the Helm Release resource.
 */
export interface HelmReleaseSettings {
    /**
     * The backend storage driver for Helm. Values are: configmap, secret, memory, sql.
     */
    driver?: pulumi.Input<string>;
    /**
     * The path to the helm plugins directory.
     */
    pluginsPath?: pulumi.Input<string>;
    /**
     * The path to the registry config file.
     */
    registryConfigPath?: pulumi.Input<string>;
    /**
     * The path to the file containing cached repository indexes.
     */
    repositoryCache?: pulumi.Input<string>;
    /**
     * The path to the file containing repository names and URLs.
     */
    repositoryConfigPath?: pulumi.Input<string>;
}
/**
 * helmReleaseSettingsProvideDefaults sets the appropriate defaults for HelmReleaseSettings
 */
export function helmReleaseSettingsProvideDefaults(val: HelmReleaseSettings): HelmReleaseSettings {
    return {
        ...val,
        driver: (val.driver) ?? utilities.getEnv("PULUMI_K8S_HELM_DRIVER"),
        pluginsPath: (val.pluginsPath) ?? utilities.getEnv("PULUMI_K8S_HELM_PLUGINS_PATH"),
        registryConfigPath: (val.registryConfigPath) ?? utilities.getEnv("PULUMI_K8S_HELM_REGISTRY_CONFIG_PATH"),
        repositoryCache: (val.repositoryCache) ?? utilities.getEnv("PULUMI_K8S_HELM_REPOSITORY_CACHE"),
        repositoryConfigPath: (val.repositoryConfigPath) ?? utilities.getEnv("PULUMI_K8S_HELM_REPOSITORY_CONFIG_PATH"),
    };
}

/**
 * Options for tuning the Kubernetes client used by a Provider.
 */
export interface KubeClientSettings {
    /**
     * Maximum burst for throttle. Default value is 10.
     */
    burst?: pulumi.Input<number>;
    /**
     * Maximum queries per second (QPS) to the API server from this client. Default value is 5.
     */
    qps?: pulumi.Input<number>;
}
/**
 * kubeClientSettingsProvideDefaults sets the appropriate defaults for KubeClientSettings
 */
export function kubeClientSettingsProvideDefaults(val: KubeClientSettings): KubeClientSettings {
    return {
        ...val,
        burst: (val.burst) ?? utilities.getEnvNumber("PULUMI_K8S_CLIENT_BURST"),
        qps: (val.qps) ?? utilities.getEnvNumber("PULUMI_K8S_CLIENT_QPS"),
    };
}
