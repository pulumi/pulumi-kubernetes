// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { core } from "../..";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import { getVersion } from "../../version";

    /**
     * @deprecated extensions/v1beta1/Deployment is not supported by Kubernetes 1.16+ clusters. Use
     * apps/v1/Deployment instead.
     * 
     * Deployment enables declarative updates for Pods and ReplicaSets.
     * 
     * This resource waits until it is ready before registering success for
     * create/update and populating output properties from the current state of the resource.
     * The following conditions are used to determine whether the resource creation has
     * succeeded or failed:
     * 
     * 1. The Deployment has begun to be updated by the Deployment controller. If the current
     *    generation of the Deployment is > 1, then this means that the current generation must
     *    be different from the generation reported by the last outputs.
     * 2. There exists a ReplicaSet whose revision is equal to the current revision of the
     *    Deployment.
     * 3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
     *    member is set to 'True'.
     * 4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
     *    'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
     *    'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
     *    because it doesn't do a rollout (i.e., it simply creates the Deployment and
     *    corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.
     * 
     * If the Deployment has not reached a Ready state after 10 minutes, it will
     * time out and mark the resource update as Failed. You can override the default timeout value
     * by setting the 'customTimeouts' option on the resource.
     */
    export class Deployment extends pulumi.CustomResource {
      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public readonly apiVersion: pulumi.Output<"extensions/v1beta1">;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public readonly kind: pulumi.Output<"Deployment">;

      /**
       * Standard object metadata.
       */
      public readonly metadata: pulumi.Output<outputs.meta.v1.ObjectMeta>;

      /**
       * Specification of the desired behavior of the Deployment.
       */
      public readonly spec: pulumi.Output<outputs.extensions.v1beta1.DeploymentSpec>;

      /**
       * Most recently observed status of the Deployment.
       */
      public readonly status: pulumi.Output<outputs.extensions.v1beta1.DeploymentStatus>;

      /**
       * Get the state of an existing `Deployment` resource, as identified by `id`.
       * The ID is of the form `[namespace]/<name>`; if `namespace` is omitted, then (per
       * Kubernetes convention) the ID becomes `default/<name>`.
       *
       * Pulumi will keep track of this resource using `name` as the Pulumi ID.
       *
       * @param name _Unique_ name used to register this resource with Pulumi.
       * @param id An ID for the Kubernetes resource to retrieve. Takes the form `[namespace]/<name>`.
       * @param opts Uniquely specifies a CustomResource to select.
       */
      public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Deployment {
          return new Deployment(name, undefined, { ...opts, id: id });
      }

      /** @internal */
      private static readonly __pulumiType = "kubernetes:extensions/v1beta1:Deployment";

      /**
       * Returns true if the given object is an instance of Deployment.  This is designed to work even
       * when multiple copies of the Pulumi SDK have been loaded into the same process.
       */
      public static isInstance(obj: any): obj is Deployment {
          if (obj === undefined || obj === null) {
              return false;
          }

          return obj["__pulumiType"] === Deployment.__pulumiType;
      }

      /**
       * Create a extensions.v1beta1.Deployment resource with the given unique name, arguments, and options.
       *
       * @param name The _unique_ name of the resource.
       * @param args The arguments to use to populate this resource's properties.
       * @param opts A bag of options that control this resource's behavior.
       */
      constructor(name: string, args?: inputs.extensions.v1beta1.Deployment, opts?: pulumi.CustomResourceOptions) {
          const props: pulumi.Inputs = {};

          props["apiVersion"] = "extensions/v1beta1";
          props["kind"] = "Deployment";
          props["metadata"] = args && args.metadata || undefined;
          props["spec"] = args && args.spec || undefined;

          props["status"] = undefined;

          if (!opts) {
              opts = {};
          }

          if (!opts.version) {
              opts.version = getVersion();
          }

          opts.additionalSecretOutputs = [
              ...((opts && opts.additionalSecretOutputs) || []),

          ];
          super(Deployment.__pulumiType, name, props, opts);
      }
    }
