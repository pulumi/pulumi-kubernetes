// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ClusterCIDRArgs } from "./clusterCIDR";
export type ClusterCIDR = import("./clusterCIDR").ClusterCIDR;
export const ClusterCIDR: typeof import("./clusterCIDR").ClusterCIDR = null as any;
utilities.lazyLoad(exports, ["ClusterCIDR"], () => require("./clusterCIDR"));

export { ClusterCIDRListArgs } from "./clusterCIDRList";
export type ClusterCIDRList = import("./clusterCIDRList").ClusterCIDRList;
export const ClusterCIDRList: typeof import("./clusterCIDRList").ClusterCIDRList = null as any;
utilities.lazyLoad(exports, ["ClusterCIDRList"], () => require("./clusterCIDRList"));

export { ClusterCIDRPatchArgs } from "./clusterCIDRPatch";
export type ClusterCIDRPatch = import("./clusterCIDRPatch").ClusterCIDRPatch;
export const ClusterCIDRPatch: typeof import("./clusterCIDRPatch").ClusterCIDRPatch = null as any;
utilities.lazyLoad(exports, ["ClusterCIDRPatch"], () => require("./clusterCIDRPatch"));

export { IPAddressArgs } from "./ipaddress";
export type IPAddress = import("./ipaddress").IPAddress;
export const IPAddress: typeof import("./ipaddress").IPAddress = null as any;
utilities.lazyLoad(exports, ["IPAddress"], () => require("./ipaddress"));

export { IPAddressListArgs } from "./ipaddressList";
export type IPAddressList = import("./ipaddressList").IPAddressList;
export const IPAddressList: typeof import("./ipaddressList").IPAddressList = null as any;
utilities.lazyLoad(exports, ["IPAddressList"], () => require("./ipaddressList"));

export { IPAddressPatchArgs } from "./ipaddressPatch";
export type IPAddressPatch = import("./ipaddressPatch").IPAddressPatch;
export const IPAddressPatch: typeof import("./ipaddressPatch").IPAddressPatch = null as any;
utilities.lazyLoad(exports, ["IPAddressPatch"], () => require("./ipaddressPatch"));

export { ServiceCIDRArgs } from "./serviceCIDR";
export type ServiceCIDR = import("./serviceCIDR").ServiceCIDR;
export const ServiceCIDR: typeof import("./serviceCIDR").ServiceCIDR = null as any;
utilities.lazyLoad(exports, ["ServiceCIDR"], () => require("./serviceCIDR"));

export { ServiceCIDRListArgs } from "./serviceCIDRList";
export type ServiceCIDRList = import("./serviceCIDRList").ServiceCIDRList;
export const ServiceCIDRList: typeof import("./serviceCIDRList").ServiceCIDRList = null as any;
utilities.lazyLoad(exports, ["ServiceCIDRList"], () => require("./serviceCIDRList"));

export { ServiceCIDRPatchArgs } from "./serviceCIDRPatch";
export type ServiceCIDRPatch = import("./serviceCIDRPatch").ServiceCIDRPatch;
export const ServiceCIDRPatch: typeof import("./serviceCIDRPatch").ServiceCIDRPatch = null as any;
utilities.lazyLoad(exports, ["ServiceCIDRPatch"], () => require("./serviceCIDRPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:networking.k8s.io/v1alpha1:ClusterCIDR":
                return new ClusterCIDR(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRList":
                return new ClusterCIDRList(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRPatch":
                return new ClusterCIDRPatch(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:IPAddress":
                return new IPAddress(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:IPAddressList":
                return new IPAddressList(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:IPAddressPatch":
                return new IPAddressPatch(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:ServiceCIDR":
                return new ServiceCIDR(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:ServiceCIDRList":
                return new ServiceCIDRList(name, <any>undefined, { urn })
            case "kubernetes:networking.k8s.io/v1alpha1:ServiceCIDRPatch":
                return new ServiceCIDRPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "networking.k8s.io/v1alpha1", _module)
