// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Patch resources are used to modify existing Kubernetes resources by using
 * Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
 * one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
 * Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
 * [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/installation-configuration/#server-side-apply) for
 * additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 */
export class EventPatch extends pulumi.CustomResource {
    /**
     * Get an existing EventPatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventPatch {
        return new EventPatch(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:core/v1:EventPatch';

    /**
     * Returns true if the given object is an instance of EventPatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventPatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventPatch.__pulumiType;
    }

    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    public readonly apiVersion!: pulumi.Output<"v1">;
    /**
     * The number of times this event has occurred.
     */
    public readonly count!: pulumi.Output<number>;
    /**
     * Time when this Event was first observed.
     */
    public readonly eventTime!: pulumi.Output<string>;
    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     */
    public readonly firstTimestamp!: pulumi.Output<string>;
    /**
     * The object that this event is about.
     */
    public readonly involvedObject!: pulumi.Output<outputs.core.v1.ObjectReferencePatch>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    public readonly kind!: pulumi.Output<"Event">;
    /**
     * The time at which the most recent occurrence of this event was recorded.
     */
    public readonly lastTimestamp!: pulumi.Output<string>;
    /**
     * A human-readable description of the status of this operation.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.meta.v1.ObjectMetaPatch>;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     */
    public readonly reason!: pulumi.Output<string>;
    /**
     * Optional secondary object for more complex actions.
     */
    public readonly related!: pulumi.Output<outputs.core.v1.ObjectReferencePatch>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    public readonly reportingComponent!: pulumi.Output<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    public readonly reportingInstance!: pulumi.Output<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    public readonly series!: pulumi.Output<outputs.core.v1.EventSeriesPatch>;
    /**
     * The component reporting this event. Should be a short machine understandable string.
     */
    public readonly source!: pulumi.Output<outputs.core.v1.EventSourcePatch>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a EventPatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventPatchArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["apiVersion"] = "v1";
            resourceInputs["count"] = args ? args.count : undefined;
            resourceInputs["eventTime"] = args ? args.eventTime : undefined;
            resourceInputs["firstTimestamp"] = args ? args.firstTimestamp : undefined;
            resourceInputs["involvedObject"] = args ? args.involvedObject : undefined;
            resourceInputs["kind"] = "Event";
            resourceInputs["lastTimestamp"] = args ? args.lastTimestamp : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["related"] = args ? args.related : undefined;
            resourceInputs["reportingComponent"] = args ? args.reportingComponent : undefined;
            resourceInputs["reportingInstance"] = args ? args.reportingInstance : undefined;
            resourceInputs["series"] = args ? args.series : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        } else {
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["count"] = undefined /*out*/;
            resourceInputs["eventTime"] = undefined /*out*/;
            resourceInputs["firstTimestamp"] = undefined /*out*/;
            resourceInputs["involvedObject"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["lastTimestamp"] = undefined /*out*/;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["reason"] = undefined /*out*/;
            resourceInputs["related"] = undefined /*out*/;
            resourceInputs["reportingComponent"] = undefined /*out*/;
            resourceInputs["reportingInstance"] = undefined /*out*/;
            resourceInputs["series"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "kubernetes:events.k8s.io/v1:EventPatch" }, { type: "kubernetes:events.k8s.io/v1beta1:EventPatch" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(EventPatch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventPatch resource.
 */
export interface EventPatchArgs {
    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    action?: pulumi.Input<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: pulumi.Input<"v1">;
    /**
     * The number of times this event has occurred.
     */
    count?: pulumi.Input<number>;
    /**
     * Time when this Event was first observed.
     */
    eventTime?: pulumi.Input<string>;
    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     */
    firstTimestamp?: pulumi.Input<string>;
    /**
     * The object that this event is about.
     */
    involvedObject?: pulumi.Input<inputs.core.v1.ObjectReferencePatch>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<"Event">;
    /**
     * The time at which the most recent occurrence of this event was recorded.
     */
    lastTimestamp?: pulumi.Input<string>;
    /**
     * A human-readable description of the status of this operation.
     */
    message?: pulumi.Input<string>;
    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.meta.v1.ObjectMetaPatch>;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     */
    reason?: pulumi.Input<string>;
    /**
     * Optional secondary object for more complex actions.
     */
    related?: pulumi.Input<inputs.core.v1.ObjectReferencePatch>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    reportingComponent?: pulumi.Input<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    reportingInstance?: pulumi.Input<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    series?: pulumi.Input<inputs.core.v1.EventSeriesPatch>;
    /**
     * The component reporting this event. Should be a short machine understandable string.
     */
    source?: pulumi.Input<inputs.core.v1.EventSourcePatch>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    type?: pulumi.Input<string>;
}
