// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BindingArgs } from "./binding";
export type Binding = import("./binding").Binding;
export const Binding: typeof import("./binding").Binding = null as any;

export { BindingPatchArgs } from "./bindingPatch";
export type BindingPatch = import("./bindingPatch").BindingPatch;
export const BindingPatch: typeof import("./bindingPatch").BindingPatch = null as any;

export { ConfigMapArgs } from "./configMap";
export type ConfigMap = import("./configMap").ConfigMap;
export const ConfigMap: typeof import("./configMap").ConfigMap = null as any;

export { ConfigMapListArgs } from "./configMapList";
export type ConfigMapList = import("./configMapList").ConfigMapList;
export const ConfigMapList: typeof import("./configMapList").ConfigMapList = null as any;

export { ConfigMapPatchArgs } from "./configMapPatch";
export type ConfigMapPatch = import("./configMapPatch").ConfigMapPatch;
export const ConfigMapPatch: typeof import("./configMapPatch").ConfigMapPatch = null as any;

export { EndpointsArgs } from "./endpoints";
export type Endpoints = import("./endpoints").Endpoints;
export const Endpoints: typeof import("./endpoints").Endpoints = null as any;

export { EndpointsListArgs } from "./endpointsList";
export type EndpointsList = import("./endpointsList").EndpointsList;
export const EndpointsList: typeof import("./endpointsList").EndpointsList = null as any;

export { EndpointsPatchArgs } from "./endpointsPatch";
export type EndpointsPatch = import("./endpointsPatch").EndpointsPatch;
export const EndpointsPatch: typeof import("./endpointsPatch").EndpointsPatch = null as any;

export { EventArgs } from "./event";
export type Event = import("./event").Event;
export const Event: typeof import("./event").Event = null as any;

export { EventListArgs } from "./eventList";
export type EventList = import("./eventList").EventList;
export const EventList: typeof import("./eventList").EventList = null as any;

export { EventPatchArgs } from "./eventPatch";
export type EventPatch = import("./eventPatch").EventPatch;
export const EventPatch: typeof import("./eventPatch").EventPatch = null as any;

export { LimitRangeArgs } from "./limitRange";
export type LimitRange = import("./limitRange").LimitRange;
export const LimitRange: typeof import("./limitRange").LimitRange = null as any;

export { LimitRangeListArgs } from "./limitRangeList";
export type LimitRangeList = import("./limitRangeList").LimitRangeList;
export const LimitRangeList: typeof import("./limitRangeList").LimitRangeList = null as any;

export { LimitRangePatchArgs } from "./limitRangePatch";
export type LimitRangePatch = import("./limitRangePatch").LimitRangePatch;
export const LimitRangePatch: typeof import("./limitRangePatch").LimitRangePatch = null as any;

export { NamespaceArgs } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;

export { NamespaceListArgs } from "./namespaceList";
export type NamespaceList = import("./namespaceList").NamespaceList;
export const NamespaceList: typeof import("./namespaceList").NamespaceList = null as any;

export { NamespacePatchArgs } from "./namespacePatch";
export type NamespacePatch = import("./namespacePatch").NamespacePatch;
export const NamespacePatch: typeof import("./namespacePatch").NamespacePatch = null as any;

export { NodeArgs } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;

export { NodeListArgs } from "./nodeList";
export type NodeList = import("./nodeList").NodeList;
export const NodeList: typeof import("./nodeList").NodeList = null as any;

export { NodePatchArgs } from "./nodePatch";
export type NodePatch = import("./nodePatch").NodePatch;
export const NodePatch: typeof import("./nodePatch").NodePatch = null as any;

export { PersistentVolumeArgs } from "./persistentVolume";
export type PersistentVolume = import("./persistentVolume").PersistentVolume;
export const PersistentVolume: typeof import("./persistentVolume").PersistentVolume = null as any;

export { PersistentVolumeClaimArgs } from "./persistentVolumeClaim";
export type PersistentVolumeClaim = import("./persistentVolumeClaim").PersistentVolumeClaim;
export const PersistentVolumeClaim: typeof import("./persistentVolumeClaim").PersistentVolumeClaim = null as any;

export { PersistentVolumeClaimListArgs } from "./persistentVolumeClaimList";
export type PersistentVolumeClaimList = import("./persistentVolumeClaimList").PersistentVolumeClaimList;
export const PersistentVolumeClaimList: typeof import("./persistentVolumeClaimList").PersistentVolumeClaimList = null as any;

export { PersistentVolumeClaimPatchArgs } from "./persistentVolumeClaimPatch";
export type PersistentVolumeClaimPatch = import("./persistentVolumeClaimPatch").PersistentVolumeClaimPatch;
export const PersistentVolumeClaimPatch: typeof import("./persistentVolumeClaimPatch").PersistentVolumeClaimPatch = null as any;

export { PersistentVolumeListArgs } from "./persistentVolumeList";
export type PersistentVolumeList = import("./persistentVolumeList").PersistentVolumeList;
export const PersistentVolumeList: typeof import("./persistentVolumeList").PersistentVolumeList = null as any;

export { PersistentVolumePatchArgs } from "./persistentVolumePatch";
export type PersistentVolumePatch = import("./persistentVolumePatch").PersistentVolumePatch;
export const PersistentVolumePatch: typeof import("./persistentVolumePatch").PersistentVolumePatch = null as any;

export { PodArgs } from "./pod";
export type Pod = import("./pod").Pod;
export const Pod: typeof import("./pod").Pod = null as any;

export { PodListArgs } from "./podList";
export type PodList = import("./podList").PodList;
export const PodList: typeof import("./podList").PodList = null as any;

export { PodPatchArgs } from "./podPatch";
export type PodPatch = import("./podPatch").PodPatch;
export const PodPatch: typeof import("./podPatch").PodPatch = null as any;

export { PodTemplateArgs } from "./podTemplate";
export type PodTemplate = import("./podTemplate").PodTemplate;
export const PodTemplate: typeof import("./podTemplate").PodTemplate = null as any;

export { PodTemplateListArgs } from "./podTemplateList";
export type PodTemplateList = import("./podTemplateList").PodTemplateList;
export const PodTemplateList: typeof import("./podTemplateList").PodTemplateList = null as any;

export { PodTemplatePatchArgs } from "./podTemplatePatch";
export type PodTemplatePatch = import("./podTemplatePatch").PodTemplatePatch;
export const PodTemplatePatch: typeof import("./podTemplatePatch").PodTemplatePatch = null as any;

export { ReplicationControllerArgs } from "./replicationController";
export type ReplicationController = import("./replicationController").ReplicationController;
export const ReplicationController: typeof import("./replicationController").ReplicationController = null as any;

export { ReplicationControllerListArgs } from "./replicationControllerList";
export type ReplicationControllerList = import("./replicationControllerList").ReplicationControllerList;
export const ReplicationControllerList: typeof import("./replicationControllerList").ReplicationControllerList = null as any;

export { ReplicationControllerPatchArgs } from "./replicationControllerPatch";
export type ReplicationControllerPatch = import("./replicationControllerPatch").ReplicationControllerPatch;
export const ReplicationControllerPatch: typeof import("./replicationControllerPatch").ReplicationControllerPatch = null as any;

export { ResourceQuotaArgs } from "./resourceQuota";
export type ResourceQuota = import("./resourceQuota").ResourceQuota;
export const ResourceQuota: typeof import("./resourceQuota").ResourceQuota = null as any;

export { ResourceQuotaListArgs } from "./resourceQuotaList";
export type ResourceQuotaList = import("./resourceQuotaList").ResourceQuotaList;
export const ResourceQuotaList: typeof import("./resourceQuotaList").ResourceQuotaList = null as any;

export { ResourceQuotaPatchArgs } from "./resourceQuotaPatch";
export type ResourceQuotaPatch = import("./resourceQuotaPatch").ResourceQuotaPatch;
export const ResourceQuotaPatch: typeof import("./resourceQuotaPatch").ResourceQuotaPatch = null as any;

export { SecretArgs } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;

export { SecretListArgs } from "./secretList";
export type SecretList = import("./secretList").SecretList;
export const SecretList: typeof import("./secretList").SecretList = null as any;

export { SecretPatchArgs } from "./secretPatch";
export type SecretPatch = import("./secretPatch").SecretPatch;
export const SecretPatch: typeof import("./secretPatch").SecretPatch = null as any;

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;

export { ServiceAccountArgs } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;

export { ServiceAccountListArgs } from "./serviceAccountList";
export type ServiceAccountList = import("./serviceAccountList").ServiceAccountList;
export const ServiceAccountList: typeof import("./serviceAccountList").ServiceAccountList = null as any;

export { ServiceAccountPatchArgs } from "./serviceAccountPatch";
export type ServiceAccountPatch = import("./serviceAccountPatch").ServiceAccountPatch;
export const ServiceAccountPatch: typeof import("./serviceAccountPatch").ServiceAccountPatch = null as any;

export { ServiceListArgs } from "./serviceList";
export type ServiceList = import("./serviceList").ServiceList;
export const ServiceList: typeof import("./serviceList").ServiceList = null as any;

export { ServicePatchArgs } from "./servicePatch";
export type ServicePatch = import("./servicePatch").ServicePatch;
export const ServicePatch: typeof import("./servicePatch").ServicePatch = null as any;

utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));
utilities.lazyLoad(exports, ["BindingPatch"], () => require("./bindingPatch"));
utilities.lazyLoad(exports, ["ConfigMap"], () => require("./configMap"));
utilities.lazyLoad(exports, ["ConfigMapList"], () => require("./configMapList"));
utilities.lazyLoad(exports, ["ConfigMapPatch"], () => require("./configMapPatch"));
utilities.lazyLoad(exports, ["Endpoints"], () => require("./endpoints"));
utilities.lazyLoad(exports, ["EndpointsList"], () => require("./endpointsList"));
utilities.lazyLoad(exports, ["EndpointsPatch"], () => require("./endpointsPatch"));
utilities.lazyLoad(exports, ["Event"], () => require("./event"));
utilities.lazyLoad(exports, ["EventList"], () => require("./eventList"));
utilities.lazyLoad(exports, ["EventPatch"], () => require("./eventPatch"));
utilities.lazyLoad(exports, ["LimitRange"], () => require("./limitRange"));
utilities.lazyLoad(exports, ["LimitRangeList"], () => require("./limitRangeList"));
utilities.lazyLoad(exports, ["LimitRangePatch"], () => require("./limitRangePatch"));
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));
utilities.lazyLoad(exports, ["NamespaceList"], () => require("./namespaceList"));
utilities.lazyLoad(exports, ["NamespacePatch"], () => require("./namespacePatch"));
utilities.lazyLoad(exports, ["Node"], () => require("./node"));
utilities.lazyLoad(exports, ["NodeList"], () => require("./nodeList"));
utilities.lazyLoad(exports, ["NodePatch"], () => require("./nodePatch"));
utilities.lazyLoad(exports, ["PersistentVolume"], () => require("./persistentVolume"));
utilities.lazyLoad(exports, ["PersistentVolumeClaim"], () => require("./persistentVolumeClaim"));
utilities.lazyLoad(exports, ["PersistentVolumeClaimList"], () => require("./persistentVolumeClaimList"));
utilities.lazyLoad(exports, ["PersistentVolumeClaimPatch"], () => require("./persistentVolumeClaimPatch"));
utilities.lazyLoad(exports, ["PersistentVolumeList"], () => require("./persistentVolumeList"));
utilities.lazyLoad(exports, ["PersistentVolumePatch"], () => require("./persistentVolumePatch"));
utilities.lazyLoad(exports, ["Pod"], () => require("./pod"));
utilities.lazyLoad(exports, ["PodList"], () => require("./podList"));
utilities.lazyLoad(exports, ["PodPatch"], () => require("./podPatch"));
utilities.lazyLoad(exports, ["PodTemplate"], () => require("./podTemplate"));
utilities.lazyLoad(exports, ["PodTemplateList"], () => require("./podTemplateList"));
utilities.lazyLoad(exports, ["PodTemplatePatch"], () => require("./podTemplatePatch"));
utilities.lazyLoad(exports, ["ReplicationController"], () => require("./replicationController"));
utilities.lazyLoad(exports, ["ReplicationControllerList"], () => require("./replicationControllerList"));
utilities.lazyLoad(exports, ["ReplicationControllerPatch"], () => require("./replicationControllerPatch"));
utilities.lazyLoad(exports, ["ResourceQuota"], () => require("./resourceQuota"));
utilities.lazyLoad(exports, ["ResourceQuotaList"], () => require("./resourceQuotaList"));
utilities.lazyLoad(exports, ["ResourceQuotaPatch"], () => require("./resourceQuotaPatch"));
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));
utilities.lazyLoad(exports, ["SecretList"], () => require("./secretList"));
utilities.lazyLoad(exports, ["SecretPatch"], () => require("./secretPatch"));
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));
utilities.lazyLoad(exports, ["ServiceAccountList"], () => require("./serviceAccountList"));
utilities.lazyLoad(exports, ["ServiceAccountPatch"], () => require("./serviceAccountPatch"));
utilities.lazyLoad(exports, ["ServiceList"], () => require("./serviceList"));
utilities.lazyLoad(exports, ["ServicePatch"], () => require("./servicePatch"));

// Export enums:
export * from "../../types/enums/core/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:core/v1:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "kubernetes:core/v1:BindingPatch":
                return new BindingPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ConfigMap":
                return new ConfigMap(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ConfigMapList":
                return new ConfigMapList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ConfigMapPatch":
                return new ConfigMapPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Endpoints":
                return new Endpoints(name, <any>undefined, { urn })
            case "kubernetes:core/v1:EndpointsList":
                return new EndpointsList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:EndpointsPatch":
                return new EndpointsPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Event":
                return new Event(name, <any>undefined, { urn })
            case "kubernetes:core/v1:EventList":
                return new EventList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:EventPatch":
                return new EventPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:LimitRange":
                return new LimitRange(name, <any>undefined, { urn })
            case "kubernetes:core/v1:LimitRangeList":
                return new LimitRangeList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:LimitRangePatch":
                return new LimitRangePatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "kubernetes:core/v1:NamespaceList":
                return new NamespaceList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:NamespacePatch":
                return new NamespacePatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Node":
                return new Node(name, <any>undefined, { urn })
            case "kubernetes:core/v1:NodeList":
                return new NodeList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:NodePatch":
                return new NodePatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolume":
                return new PersistentVolume(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolumeClaim":
                return new PersistentVolumeClaim(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolumeClaimList":
                return new PersistentVolumeClaimList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolumeClaimPatch":
                return new PersistentVolumeClaimPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolumeList":
                return new PersistentVolumeList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PersistentVolumePatch":
                return new PersistentVolumePatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Pod":
                return new Pod(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PodList":
                return new PodList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PodPatch":
                return new PodPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PodTemplate":
                return new PodTemplate(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PodTemplateList":
                return new PodTemplateList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:PodTemplatePatch":
                return new PodTemplatePatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ReplicationController":
                return new ReplicationController(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ReplicationControllerList":
                return new ReplicationControllerList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ReplicationControllerPatch":
                return new ReplicationControllerPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ResourceQuota":
                return new ResourceQuota(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ResourceQuotaList":
                return new ResourceQuotaList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ResourceQuotaPatch":
                return new ResourceQuotaPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "kubernetes:core/v1:SecretList":
                return new SecretList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:SecretPatch":
                return new SecretPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:Service":
                return new Service(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ServiceAccountList":
                return new ServiceAccountList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ServiceAccountPatch":
                return new ServiceAccountPatch(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ServiceList":
                return new ServiceList(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ServicePatch":
                return new ServicePatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "core/v1", _module)
