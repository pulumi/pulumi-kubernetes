// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { core } from "../..";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import { getVersion } from "../../version";

    /**
     * Event is a report of an event somewhere in the cluster.
     */
    export class Event extends pulumi.CustomResource {
      /**
       * What action was taken/failed regarding to the Regarding object.
       */
      public readonly action: pulumi.Output<string>;

      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public readonly apiVersion: pulumi.Output<"v1">;

      /**
       * The number of times this event has occurred.
       */
      public readonly count: pulumi.Output<number>;

      /**
       * Time when this Event was first observed.
       */
      public readonly eventTime: pulumi.Output<string>;

      /**
       * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
       */
      public readonly firstTimestamp: pulumi.Output<string>;

      /**
       * The object that this event is about.
       */
      public readonly involvedObject: pulumi.Output<outputs.core.v1.ObjectReference>;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public readonly kind: pulumi.Output<"Event">;

      /**
       * The time at which the most recent occurrence of this event was recorded.
       */
      public readonly lastTimestamp: pulumi.Output<string>;

      /**
       * A human-readable description of the status of this operation.
       */
      public readonly message: pulumi.Output<string>;

      /**
       * Standard object's metadata. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
       */
      public readonly metadata: pulumi.Output<outputs.meta.v1.ObjectMeta>;

      /**
       * This should be a short, machine understandable string that gives the reason for the
       * transition into the object's current status.
       */
      public readonly reason: pulumi.Output<string>;

      /**
       * Optional secondary object for more complex actions.
       */
      public readonly related: pulumi.Output<outputs.core.v1.ObjectReference>;

      /**
       * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
       */
      public readonly reportingComponent: pulumi.Output<string>;

      /**
       * ID of the controller instance, e.g. `kubelet-xyzf`.
       */
      public readonly reportingInstance: pulumi.Output<string>;

      /**
       * Data about the Event series this event represents or nil if it's a singleton Event.
       */
      public readonly series: pulumi.Output<outputs.core.v1.EventSeries>;

      /**
       * The component reporting this event. Should be a short machine understandable string.
       */
      public readonly source: pulumi.Output<outputs.core.v1.EventSource>;

      /**
       * Type of this event (Normal, Warning), new types could be added in the future
       */
      public readonly type: pulumi.Output<string>;

      /**
       * Get the state of an existing `Event` resource, as identified by `id`.
       * The ID is of the form `[namespace]/<name>`; if `namespace` is omitted, then (per
       * Kubernetes convention) the ID becomes `default/<name>`.
       *
       * Pulumi will keep track of this resource using `name` as the Pulumi ID.
       *
       * @param name _Unique_ name used to register this resource with Pulumi.
       * @param id An ID for the Kubernetes resource to retrieve. Takes the form `[namespace]/<name>`.
       * @param opts Uniquely specifies a CustomResource to select.
       */
      public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Event {
          return new Event(name, undefined, { ...opts, id: id });
      }

      /** @internal */
      private static readonly __pulumiType = "kubernetes:core/v1:Event";

      /**
       * Returns true if the given object is an instance of Event.  This is designed to work even
       * when multiple copies of the Pulumi SDK have been loaded into the same process.
       */
      public static isInstance(obj: any): obj is Event {
          if (obj === undefined || obj === null) {
              return false;
          }

          return obj["__pulumiType"] === Event.__pulumiType;
      }

      /**
       * Create a core.v1.Event resource with the given unique name, arguments, and options.
       *
       * @param name The _unique_ name of the resource.
       * @param args The arguments to use to populate this resource's properties.
       * @param opts A bag of options that control this resource's behavior.
       */
      constructor(name: string, args?: inputs.core.v1.Event, opts?: pulumi.CustomResourceOptions) {
          const props: pulumi.Inputs = {};
          props["involvedObject"] = args?.involvedObject;
          props["metadata"] = args?.metadata;

          props["action"] = args?.action;
          props["apiVersion"] = "v1";
          props["count"] = args?.count;
          props["eventTime"] = args?.eventTime;
          props["firstTimestamp"] = args?.firstTimestamp;
          props["kind"] = "Event";
          props["lastTimestamp"] = args?.lastTimestamp;
          props["message"] = args?.message;
          props["reason"] = args?.reason;
          props["related"] = args?.related;
          props["reportingComponent"] = args?.reportingComponent;
          props["reportingInstance"] = args?.reportingInstance;
          props["series"] = args?.series;
          props["source"] = args?.source;
          props["type"] = args?.type;

          props["status"] = undefined;

          if (!opts) {
              opts = {};
          }

          if (!opts.version) {
              opts.version = getVersion();
          }

          super(Event.__pulumiType, name, props, opts);
      }
    }
