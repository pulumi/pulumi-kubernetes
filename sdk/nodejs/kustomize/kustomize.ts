// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { getVersion } from "../utilities";
import * as yaml from "../yaml";

interface DirectoryOpts {
    /**
     * The directory containing the kustomization to apply. The value can be a local directory or a folder in a
     * git repository.
     * Example: ./helloWorld
     * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
     */
    directory: string

    /**
     * An optional prefix for the auto-generated resource names.
     * Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
     */
    resourcePrefix?: string;

    /**
     * Optional array of transformations to apply to the objects generated by kustomize before they are applied to
     * the cluster. Allows further changes to the kustomization without modifying the directory itself.
     *
     * @example
     * ```typescript
     * transformations: [
     * (obj: any, opts: pulumi.CustomResourceOptions) => {
     *     if (obj.kind === "Deployment" && obj.metadata.name == "cert-manager") {
     *         opts.aliases = [{ type: "apps/v1beta1:Deployment" }]
     *     }
     *
     *     if (obj.metadata) {
     *         obj.metadata.namespace = namespaceName;
     *     } else {
     *         obj.metadata = {namespace: namespaceName};
     *     }
     * }]
     * ```
     */
    transformations?: ((o: any, opts: pulumi.CustomResourceOptions) => void)[];

}

/**
 * Directory is a component representing a collection of resources described by a kustomize directory (kustomization).
 */
export class Directory extends yaml.CollectionComponentResource {
    /**
     * Create an instance of the specified kustomize directory.
     * @param name Name of the kustomization (e.g., nginx-ingress).
     * @param config Configuration options for the kustomization.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(
        name: string,
        config: DirectoryOpts,
        opts?: pulumi.ComponentResourceOptions
    ) {
        if (config.resourcePrefix !== undefined) {
            name = `${config.resourcePrefix}-${name}`
        }
        super("kubernetes:kustomize:Directory", name, config, opts);

        const directory = config.directory

        // Rather than using the default provider for the following invoke call, use the version specified
        // in package.json.
        let invokeOpts: pulumi.InvokeOptions = { async: true, version: getVersion() };

        const promise = pulumi.runtime.invoke("kubernetes:kustomize:directory", {directory}, invokeOpts);
        this.resources = pulumi.output(promise).apply<{[key: string]: pulumi.CustomResource}>(p => yaml.parse(
            {
                resourcePrefix: config.resourcePrefix,
                objs: p.result,
                transformations: config.transformations || [],
            },
            { parent: this, dependsOn: opts?.dependsOn }
        ));
    }
}
