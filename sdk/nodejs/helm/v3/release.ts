// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * A Release is an instance of a chart running in a Kubernetes cluster.
 *
 * A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
 */
export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:helm.sh/v3:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    public readonly releaseSpec!: pulumi.Output<outputs.helm.v3.ReleaseSpec>;
    public /*out*/ readonly resourceType!: pulumi.Output<"true">;
    /**
     * Status of the deployed release.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.helm.v3.ReleaseStatus>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ReleaseArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.releaseSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseSpec'");
            }
            inputs["compat"] = "true";
            inputs["releaseSpec"] = args ? args.releaseSpec : undefined;
            inputs["resourceType"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        } else {
            inputs["releaseSpec"] = undefined /*out*/;
            inputs["resourceType"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Release.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    compat?: pulumi.Input<"true">;
    releaseSpec: pulumi.Input<inputs.helm.v3.ReleaseSpec>;
}
