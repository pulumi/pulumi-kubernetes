// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { PodSchedulingArgs } from "./podScheduling";
export type PodScheduling = import("./podScheduling").PodScheduling;
export const PodScheduling: typeof import("./podScheduling").PodScheduling = null as any;
utilities.lazyLoad(exports, ["PodScheduling"], () => require("./podScheduling"));

export { PodSchedulingListArgs } from "./podSchedulingList";
export type PodSchedulingList = import("./podSchedulingList").PodSchedulingList;
export const PodSchedulingList: typeof import("./podSchedulingList").PodSchedulingList = null as any;
utilities.lazyLoad(exports, ["PodSchedulingList"], () => require("./podSchedulingList"));

export { PodSchedulingPatchArgs } from "./podSchedulingPatch";
export type PodSchedulingPatch = import("./podSchedulingPatch").PodSchedulingPatch;
export const PodSchedulingPatch: typeof import("./podSchedulingPatch").PodSchedulingPatch = null as any;
utilities.lazyLoad(exports, ["PodSchedulingPatch"], () => require("./podSchedulingPatch"));

export { ResourceClaimArgs } from "./resourceClaim";
export type ResourceClaim = import("./resourceClaim").ResourceClaim;
export const ResourceClaim: typeof import("./resourceClaim").ResourceClaim = null as any;
utilities.lazyLoad(exports, ["ResourceClaim"], () => require("./resourceClaim"));

export { ResourceClaimListArgs } from "./resourceClaimList";
export type ResourceClaimList = import("./resourceClaimList").ResourceClaimList;
export const ResourceClaimList: typeof import("./resourceClaimList").ResourceClaimList = null as any;
utilities.lazyLoad(exports, ["ResourceClaimList"], () => require("./resourceClaimList"));

export { ResourceClaimPatchArgs } from "./resourceClaimPatch";
export type ResourceClaimPatch = import("./resourceClaimPatch").ResourceClaimPatch;
export const ResourceClaimPatch: typeof import("./resourceClaimPatch").ResourceClaimPatch = null as any;
utilities.lazyLoad(exports, ["ResourceClaimPatch"], () => require("./resourceClaimPatch"));

export { ResourceClaimTemplateArgs } from "./resourceClaimTemplate";
export type ResourceClaimTemplate = import("./resourceClaimTemplate").ResourceClaimTemplate;
export const ResourceClaimTemplate: typeof import("./resourceClaimTemplate").ResourceClaimTemplate = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplate"], () => require("./resourceClaimTemplate"));

export { ResourceClaimTemplateListArgs } from "./resourceClaimTemplateList";
export type ResourceClaimTemplateList = import("./resourceClaimTemplateList").ResourceClaimTemplateList;
export const ResourceClaimTemplateList: typeof import("./resourceClaimTemplateList").ResourceClaimTemplateList = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplateList"], () => require("./resourceClaimTemplateList"));

export { ResourceClaimTemplatePatchArgs } from "./resourceClaimTemplatePatch";
export type ResourceClaimTemplatePatch = import("./resourceClaimTemplatePatch").ResourceClaimTemplatePatch;
export const ResourceClaimTemplatePatch: typeof import("./resourceClaimTemplatePatch").ResourceClaimTemplatePatch = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplatePatch"], () => require("./resourceClaimTemplatePatch"));

export { ResourceClassArgs } from "./resourceClass";
export type ResourceClass = import("./resourceClass").ResourceClass;
export const ResourceClass: typeof import("./resourceClass").ResourceClass = null as any;
utilities.lazyLoad(exports, ["ResourceClass"], () => require("./resourceClass"));

export { ResourceClassListArgs } from "./resourceClassList";
export type ResourceClassList = import("./resourceClassList").ResourceClassList;
export const ResourceClassList: typeof import("./resourceClassList").ResourceClassList = null as any;
utilities.lazyLoad(exports, ["ResourceClassList"], () => require("./resourceClassList"));

export { ResourceClassPatchArgs } from "./resourceClassPatch";
export type ResourceClassPatch = import("./resourceClassPatch").ResourceClassPatch;
export const ResourceClassPatch: typeof import("./resourceClassPatch").ResourceClassPatch = null as any;
utilities.lazyLoad(exports, ["ResourceClassPatch"], () => require("./resourceClassPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:resource.k8s.io/v1alpha1:PodScheduling":
                return new PodScheduling(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:PodSchedulingList":
                return new PodSchedulingList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:PodSchedulingPatch":
                return new PodSchedulingPatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaim":
                return new ResourceClaim(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaimList":
                return new ResourceClaimList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaimPatch":
                return new ResourceClaimPatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplate":
                return new ResourceClaimTemplate(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplateList":
                return new ResourceClaimTemplateList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplatePatch":
                return new ResourceClaimTemplatePatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClass":
                return new ResourceClass(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClassList":
                return new ResourceClassList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha1:ResourceClassPatch":
                return new ResourceClassPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "resource.k8s.io/v1alpha1", _module)
