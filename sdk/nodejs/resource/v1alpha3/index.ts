// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DeviceClassArgs } from "./deviceClass";
export type DeviceClass = import("./deviceClass").DeviceClass;
export const DeviceClass: typeof import("./deviceClass").DeviceClass = null as any;
utilities.lazyLoad(exports, ["DeviceClass"], () => require("./deviceClass"));

export { DeviceClassListArgs } from "./deviceClassList";
export type DeviceClassList = import("./deviceClassList").DeviceClassList;
export const DeviceClassList: typeof import("./deviceClassList").DeviceClassList = null as any;
utilities.lazyLoad(exports, ["DeviceClassList"], () => require("./deviceClassList"));

export { DeviceClassPatchArgs } from "./deviceClassPatch";
export type DeviceClassPatch = import("./deviceClassPatch").DeviceClassPatch;
export const DeviceClassPatch: typeof import("./deviceClassPatch").DeviceClassPatch = null as any;
utilities.lazyLoad(exports, ["DeviceClassPatch"], () => require("./deviceClassPatch"));

export { DeviceTaintRuleArgs } from "./deviceTaintRule";
export type DeviceTaintRule = import("./deviceTaintRule").DeviceTaintRule;
export const DeviceTaintRule: typeof import("./deviceTaintRule").DeviceTaintRule = null as any;
utilities.lazyLoad(exports, ["DeviceTaintRule"], () => require("./deviceTaintRule"));

export { DeviceTaintRuleListArgs } from "./deviceTaintRuleList";
export type DeviceTaintRuleList = import("./deviceTaintRuleList").DeviceTaintRuleList;
export const DeviceTaintRuleList: typeof import("./deviceTaintRuleList").DeviceTaintRuleList = null as any;
utilities.lazyLoad(exports, ["DeviceTaintRuleList"], () => require("./deviceTaintRuleList"));

export { DeviceTaintRulePatchArgs } from "./deviceTaintRulePatch";
export type DeviceTaintRulePatch = import("./deviceTaintRulePatch").DeviceTaintRulePatch;
export const DeviceTaintRulePatch: typeof import("./deviceTaintRulePatch").DeviceTaintRulePatch = null as any;
utilities.lazyLoad(exports, ["DeviceTaintRulePatch"], () => require("./deviceTaintRulePatch"));

export { PodSchedulingContextArgs } from "./podSchedulingContext";
export type PodSchedulingContext = import("./podSchedulingContext").PodSchedulingContext;
export const PodSchedulingContext: typeof import("./podSchedulingContext").PodSchedulingContext = null as any;
utilities.lazyLoad(exports, ["PodSchedulingContext"], () => require("./podSchedulingContext"));

export { PodSchedulingContextListArgs } from "./podSchedulingContextList";
export type PodSchedulingContextList = import("./podSchedulingContextList").PodSchedulingContextList;
export const PodSchedulingContextList: typeof import("./podSchedulingContextList").PodSchedulingContextList = null as any;
utilities.lazyLoad(exports, ["PodSchedulingContextList"], () => require("./podSchedulingContextList"));

export { PodSchedulingContextPatchArgs } from "./podSchedulingContextPatch";
export type PodSchedulingContextPatch = import("./podSchedulingContextPatch").PodSchedulingContextPatch;
export const PodSchedulingContextPatch: typeof import("./podSchedulingContextPatch").PodSchedulingContextPatch = null as any;
utilities.lazyLoad(exports, ["PodSchedulingContextPatch"], () => require("./podSchedulingContextPatch"));

export { ResourceClaimArgs } from "./resourceClaim";
export type ResourceClaim = import("./resourceClaim").ResourceClaim;
export const ResourceClaim: typeof import("./resourceClaim").ResourceClaim = null as any;
utilities.lazyLoad(exports, ["ResourceClaim"], () => require("./resourceClaim"));

export { ResourceClaimListArgs } from "./resourceClaimList";
export type ResourceClaimList = import("./resourceClaimList").ResourceClaimList;
export const ResourceClaimList: typeof import("./resourceClaimList").ResourceClaimList = null as any;
utilities.lazyLoad(exports, ["ResourceClaimList"], () => require("./resourceClaimList"));

export { ResourceClaimPatchArgs } from "./resourceClaimPatch";
export type ResourceClaimPatch = import("./resourceClaimPatch").ResourceClaimPatch;
export const ResourceClaimPatch: typeof import("./resourceClaimPatch").ResourceClaimPatch = null as any;
utilities.lazyLoad(exports, ["ResourceClaimPatch"], () => require("./resourceClaimPatch"));

export { ResourceClaimTemplateArgs } from "./resourceClaimTemplate";
export type ResourceClaimTemplate = import("./resourceClaimTemplate").ResourceClaimTemplate;
export const ResourceClaimTemplate: typeof import("./resourceClaimTemplate").ResourceClaimTemplate = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplate"], () => require("./resourceClaimTemplate"));

export { ResourceClaimTemplateListArgs } from "./resourceClaimTemplateList";
export type ResourceClaimTemplateList = import("./resourceClaimTemplateList").ResourceClaimTemplateList;
export const ResourceClaimTemplateList: typeof import("./resourceClaimTemplateList").ResourceClaimTemplateList = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplateList"], () => require("./resourceClaimTemplateList"));

export { ResourceClaimTemplatePatchArgs } from "./resourceClaimTemplatePatch";
export type ResourceClaimTemplatePatch = import("./resourceClaimTemplatePatch").ResourceClaimTemplatePatch;
export const ResourceClaimTemplatePatch: typeof import("./resourceClaimTemplatePatch").ResourceClaimTemplatePatch = null as any;
utilities.lazyLoad(exports, ["ResourceClaimTemplatePatch"], () => require("./resourceClaimTemplatePatch"));

export { ResourceSliceArgs } from "./resourceSlice";
export type ResourceSlice = import("./resourceSlice").ResourceSlice;
export const ResourceSlice: typeof import("./resourceSlice").ResourceSlice = null as any;
utilities.lazyLoad(exports, ["ResourceSlice"], () => require("./resourceSlice"));

export { ResourceSliceListArgs } from "./resourceSliceList";
export type ResourceSliceList = import("./resourceSliceList").ResourceSliceList;
export const ResourceSliceList: typeof import("./resourceSliceList").ResourceSliceList = null as any;
utilities.lazyLoad(exports, ["ResourceSliceList"], () => require("./resourceSliceList"));

export { ResourceSlicePatchArgs } from "./resourceSlicePatch";
export type ResourceSlicePatch = import("./resourceSlicePatch").ResourceSlicePatch;
export const ResourceSlicePatch: typeof import("./resourceSlicePatch").ResourceSlicePatch = null as any;
utilities.lazyLoad(exports, ["ResourceSlicePatch"], () => require("./resourceSlicePatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceClass":
                return new DeviceClass(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceClassList":
                return new DeviceClassList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceClassPatch":
                return new DeviceClassPatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceTaintRule":
                return new DeviceTaintRule(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceTaintRuleList":
                return new DeviceTaintRuleList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:DeviceTaintRulePatch":
                return new DeviceTaintRulePatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:PodSchedulingContext":
                return new PodSchedulingContext(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:PodSchedulingContextList":
                return new PodSchedulingContextList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:PodSchedulingContextPatch":
                return new PodSchedulingContextPatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaim":
                return new ResourceClaim(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaimList":
                return new ResourceClaimList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaimPatch":
                return new ResourceClaimPatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaimTemplate":
                return new ResourceClaimTemplate(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaimTemplateList":
                return new ResourceClaimTemplateList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceClaimTemplatePatch":
                return new ResourceClaimTemplatePatch(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceSlice":
                return new ResourceSlice(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceSliceList":
                return new ResourceSliceList(name, <any>undefined, { urn })
            case "kubernetes:resource.k8s.io/v1alpha3:ResourceSlicePatch":
                return new ResourceSlicePatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "resource.k8s.io/v1alpha3", _module)
