// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.core.v1.inputs.NodeSelectorArgs;
import com.pulumi.kubernetes.resource.v1beta2.inputs.DeviceAttributeArgs;
import com.pulumi.kubernetes.resource.v1beta2.inputs.DeviceCapacityArgs;
import com.pulumi.kubernetes.resource.v1beta2.inputs.DeviceCounterConsumptionArgs;
import com.pulumi.kubernetes.resource.v1beta2.inputs.DeviceTaintArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
 * 
 */
public final class DeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceArgs Empty = new DeviceArgs();

    /**
     * AllNodes indicates that all nodes have access to the device.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    @Import(name="allNodes")
    private @Nullable Output<Boolean> allNodes;

    /**
     * @return AllNodes indicates that all nodes have access to the device.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<Output<Boolean>> allNodes() {
        return Optional.ofNullable(this.allNodes);
    }

    /**
     * Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,DeviceAttributeArgs>> attributes;

    /**
     * @return Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    public Optional<Output<Map<String,DeviceAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Map<String,DeviceCapacityArgs>> capacity;

    /**
     * @return Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    public Optional<Output<Map<String,DeviceCapacityArgs>>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
     * 
     * There can only be a single entry per counterSet.
     * 
     * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    @Import(name="consumesCounters")
    private @Nullable Output<List<DeviceCounterConsumptionArgs>> consumesCounters;

    /**
     * @return ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
     * 
     * There can only be a single entry per counterSet.
     * 
     * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    public Optional<Output<List<DeviceCounterConsumptionArgs>>> consumesCounters() {
        return Optional.ofNullable(this.consumesCounters);
    }

    /**
     * Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * NodeName identifies the node where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return NodeName identifies the node where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * NodeSelector defines the nodes where the device is available.
     * 
     * Must use exactly one term.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    @Import(name="nodeSelector")
    private @Nullable Output<NodeSelectorArgs> nodeSelector;

    /**
     * @return NodeSelector defines the nodes where the device is available.
     * 
     * Must use exactly one term.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<Output<NodeSelectorArgs>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * If specified, these are the driver-defined taints.
     * 
     * The maximum number of taints is 4.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<DeviceTaintArgs>> taints;

    /**
     * @return If specified, these are the driver-defined taints.
     * 
     * The maximum number of taints is 4.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    public Optional<Output<List<DeviceTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    private DeviceArgs() {}

    private DeviceArgs(DeviceArgs $) {
        this.allNodes = $.allNodes;
        this.attributes = $.attributes;
        this.capacity = $.capacity;
        this.consumesCounters = $.consumesCounters;
        this.name = $.name;
        this.nodeName = $.nodeName;
        this.nodeSelector = $.nodeSelector;
        this.taints = $.taints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceArgs $;

        public Builder() {
            $ = new DeviceArgs();
        }

        public Builder(DeviceArgs defaults) {
            $ = new DeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allNodes AllNodes indicates that all nodes have access to the device.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder allNodes(@Nullable Output<Boolean> allNodes) {
            $.allNodes = allNodes;
            return this;
        }

        /**
         * @param allNodes AllNodes indicates that all nodes have access to the device.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder allNodes(Boolean allNodes) {
            return allNodes(Output.of(allNodes));
        }

        /**
         * @param attributes Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
         * 
         * The maximum number of attributes and capacities combined is 32.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,DeviceAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
         * 
         * The maximum number of attributes and capacities combined is 32.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,DeviceAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param capacity Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
         * 
         * The maximum number of attributes and capacities combined is 32.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Map<String,DeviceCapacityArgs>> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
         * 
         * The maximum number of attributes and capacities combined is 32.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Map<String,DeviceCapacityArgs> capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param consumesCounters ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
         * 
         * There can only be a single entry per counterSet.
         * 
         * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
         * 
         * @return builder
         * 
         */
        public Builder consumesCounters(@Nullable Output<List<DeviceCounterConsumptionArgs>> consumesCounters) {
            $.consumesCounters = consumesCounters;
            return this;
        }

        /**
         * @param consumesCounters ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
         * 
         * There can only be a single entry per counterSet.
         * 
         * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
         * 
         * @return builder
         * 
         */
        public Builder consumesCounters(List<DeviceCounterConsumptionArgs> consumesCounters) {
            return consumesCounters(Output.of(consumesCounters));
        }

        /**
         * @param consumesCounters ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
         * 
         * There can only be a single entry per counterSet.
         * 
         * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
         * 
         * @return builder
         * 
         */
        public Builder consumesCounters(DeviceCounterConsumptionArgs... consumesCounters) {
            return consumesCounters(List.of(consumesCounters));
        }

        /**
         * @param name Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeName NodeName identifies the node where the device is available.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName NodeName identifies the node where the device is available.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param nodeSelector NodeSelector defines the nodes where the device is available.
         * 
         * Must use exactly one term.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(@Nullable Output<NodeSelectorArgs> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        /**
         * @param nodeSelector NodeSelector defines the nodes where the device is available.
         * 
         * Must use exactly one term.
         * 
         * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(NodeSelectorArgs nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param taints If specified, these are the driver-defined taints.
         * 
         * The maximum number of taints is 4.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<DeviceTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints If specified, these are the driver-defined taints.
         * 
         * The maximum number of taints is 4.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<DeviceTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints If specified, these are the driver-defined taints.
         * 
         * The maximum number of taints is 4.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder taints(DeviceTaintArgs... taints) {
            return taints(List.of(taints));
        }

        public DeviceArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DeviceArgs", "name");
            }
            return $;
        }
    }

}
