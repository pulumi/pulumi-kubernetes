// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.networking.v1.outputs;

import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkPolicyPort {
    /**
     * @return endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     * 
     */
    private @Nullable Integer endPort;
    /**
     * @return port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     * 
     */
    private @Nullable Either<Integer,String> port;
    /**
     * @return protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     * 
     */
    private @Nullable String protocol;

    private NetworkPolicyPort() {}
    /**
     * @return endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     * 
     */
    public Optional<Integer> endPort() {
        return Optional.ofNullable(this.endPort);
    }
    /**
     * @return port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     * 
     */
    public Optional<Either<Integer,String>> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPolicyPort defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer endPort;
        private @Nullable Either<Integer,String> port;
        private @Nullable String protocol;
        public Builder() {}
        public Builder(NetworkPolicyPort defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endPort = defaults.endPort;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder endPort(@Nullable Integer endPort) {
            this.endPort = endPort;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Either<Integer,String> port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        public NetworkPolicyPort build() {
            final var o = new NetworkPolicyPort();
            o.endPort = endPort;
            o.port = port;
            o.protocol = protocol;
            return o;
        }
    }
}
