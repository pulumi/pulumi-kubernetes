// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.DeviceSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceTaintSelector defines which device(s) a DeviceTaintRule applies to. The empty selector matches all devices. Without a selector, no devices are matched.
 * 
 */
public final class DeviceTaintSelectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceTaintSelectorArgs Empty = new DeviceTaintSelectorArgs();

    /**
     * If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
     * 
     * Setting also driver and pool may be required to avoid ambiguity, but is not required.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
     * 
     * Setting also driver and pool may be required to avoid ambiguity, but is not required.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
     * 
     */
    @Import(name="deviceClassName")
    private @Nullable Output<String> deviceClassName;

    /**
     * @return If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
     * 
     */
    public Optional<Output<String>> deviceClassName() {
        return Optional.ofNullable(this.deviceClassName);
    }

    /**
     * If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
     * 
     */
    @Import(name="driver")
    private @Nullable Output<String> driver;

    /**
     * @return If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
     * 
     */
    public Optional<Output<String>> driver() {
        return Optional.ofNullable(this.driver);
    }

    /**
     * If pool is set, only devices in that pool are selected.
     * 
     * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
     * 
     */
    @Import(name="pool")
    private @Nullable Output<String> pool;

    /**
     * @return If pool is set, only devices in that pool are selected.
     * 
     * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
     * 
     */
    public Optional<Output<String>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<DeviceSelectorArgs>> selectors;

    /**
     * @return Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
     * 
     */
    public Optional<Output<List<DeviceSelectorArgs>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    private DeviceTaintSelectorArgs() {}

    private DeviceTaintSelectorArgs(DeviceTaintSelectorArgs $) {
        this.device = $.device;
        this.deviceClassName = $.deviceClassName;
        this.driver = $.driver;
        this.pool = $.pool;
        this.selectors = $.selectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceTaintSelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceTaintSelectorArgs $;

        public Builder() {
            $ = new DeviceTaintSelectorArgs();
        }

        public Builder(DeviceTaintSelectorArgs defaults) {
            $ = new DeviceTaintSelectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
         * 
         * Setting also driver and pool may be required to avoid ambiguity, but is not required.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
         * 
         * Setting also driver and pool may be required to avoid ambiguity, but is not required.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param deviceClassName If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
         * 
         * @return builder
         * 
         */
        public Builder deviceClassName(@Nullable Output<String> deviceClassName) {
            $.deviceClassName = deviceClassName;
            return this;
        }

        /**
         * @param deviceClassName If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
         * 
         * @return builder
         * 
         */
        public Builder deviceClassName(String deviceClassName) {
            return deviceClassName(Output.of(deviceClassName));
        }

        /**
         * @param driver If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
         * 
         * @return builder
         * 
         */
        public Builder driver(@Nullable Output<String> driver) {
            $.driver = driver;
            return this;
        }

        /**
         * @param driver If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
         * 
         * @return builder
         * 
         */
        public Builder driver(String driver) {
            return driver(Output.of(driver));
        }

        /**
         * @param pool If pool is set, only devices in that pool are selected.
         * 
         * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<String> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool If pool is set, only devices in that pool are selected.
         * 
         * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
         * 
         * @return builder
         * 
         */
        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param selectors Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<DeviceSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<DeviceSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
         * 
         * @return builder
         * 
         */
        public Builder selectors(DeviceSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        public DeviceTaintSelectorArgs build() {
            return $;
        }
    }

}
