// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.admissionregistration.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.admissionregistration.v1.inputs.TypeCheckingArgs;
import com.pulumi.kubernetes.meta.v1.inputs.ConditionArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
 * 
 */
public final class ValidatingAdmissionPolicyStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValidatingAdmissionPolicyStatusArgs Empty = new ValidatingAdmissionPolicyStatusArgs();

    /**
     * The conditions represent the latest available observations of a policy&#39;s current state.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<ConditionArgs>> conditions;

    /**
     * @return The conditions represent the latest available observations of a policy&#39;s current state.
     * 
     */
    public Optional<Output<List<ConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The generation observed by the controller.
     * 
     */
    @Import(name="observedGeneration")
    private @Nullable Output<Integer> observedGeneration;

    /**
     * @return The generation observed by the controller.
     * 
     */
    public Optional<Output<Integer>> observedGeneration() {
        return Optional.ofNullable(this.observedGeneration);
    }

    /**
     * The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
     * 
     */
    @Import(name="typeChecking")
    private @Nullable Output<TypeCheckingArgs> typeChecking;

    /**
     * @return The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
     * 
     */
    public Optional<Output<TypeCheckingArgs>> typeChecking() {
        return Optional.ofNullable(this.typeChecking);
    }

    private ValidatingAdmissionPolicyStatusArgs() {}

    private ValidatingAdmissionPolicyStatusArgs(ValidatingAdmissionPolicyStatusArgs $) {
        this.conditions = $.conditions;
        this.observedGeneration = $.observedGeneration;
        this.typeChecking = $.typeChecking;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValidatingAdmissionPolicyStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValidatingAdmissionPolicyStatusArgs $;

        public Builder() {
            $ = new ValidatingAdmissionPolicyStatusArgs();
        }

        public Builder(ValidatingAdmissionPolicyStatusArgs defaults) {
            $ = new ValidatingAdmissionPolicyStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The conditions represent the latest available observations of a policy&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<ConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The conditions represent the latest available observations of a policy&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<ConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The conditions represent the latest available observations of a policy&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param observedGeneration The generation observed by the controller.
         * 
         * @return builder
         * 
         */
        public Builder observedGeneration(@Nullable Output<Integer> observedGeneration) {
            $.observedGeneration = observedGeneration;
            return this;
        }

        /**
         * @param observedGeneration The generation observed by the controller.
         * 
         * @return builder
         * 
         */
        public Builder observedGeneration(Integer observedGeneration) {
            return observedGeneration(Output.of(observedGeneration));
        }

        /**
         * @param typeChecking The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
         * 
         * @return builder
         * 
         */
        public Builder typeChecking(@Nullable Output<TypeCheckingArgs> typeChecking) {
            $.typeChecking = typeChecking;
            return this;
        }

        /**
         * @param typeChecking The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
         * 
         * @return builder
         * 
         */
        public Builder typeChecking(TypeCheckingArgs typeChecking) {
            return typeChecking(Output.of(typeChecking));
        }

        public ValidatingAdmissionPolicyStatusArgs build() {
            return $;
        }
    }

}
