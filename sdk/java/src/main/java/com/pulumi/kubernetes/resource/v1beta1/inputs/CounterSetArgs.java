// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta1.inputs.CounterArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.
 * 
 * The counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.
 * 
 */
public final class CounterSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CounterSetArgs Empty = new CounterSetArgs();

    /**
     * Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
     * 
     * The maximum number of counters is 32.
     * 
     */
    @Import(name="counters", required=true)
    private Output<Map<String,CounterArgs>> counters;

    /**
     * @return Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
     * 
     * The maximum number of counters is 32.
     * 
     */
    public Output<Map<String,CounterArgs>> counters() {
        return this.counters;
    }

    /**
     * Name defines the name of the counter set. It must be a DNS label.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name defines the name of the counter set. It must be a DNS label.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private CounterSetArgs() {}

    private CounterSetArgs(CounterSetArgs $) {
        this.counters = $.counters;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CounterSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CounterSetArgs $;

        public Builder() {
            $ = new CounterSetArgs();
        }

        public Builder(CounterSetArgs defaults) {
            $ = new CounterSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counters Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
         * 
         * The maximum number of counters is 32.
         * 
         * @return builder
         * 
         */
        public Builder counters(Output<Map<String,CounterArgs>> counters) {
            $.counters = counters;
            return this;
        }

        /**
         * @param counters Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
         * 
         * The maximum number of counters is 32.
         * 
         * @return builder
         * 
         */
        public Builder counters(Map<String,CounterArgs> counters) {
            return counters(Output.of(counters));
        }

        /**
         * @param name Name defines the name of the counter set. It must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name defines the name of the counter set. It must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CounterSetArgs build() {
            if ($.counters == null) {
                throw new MissingRequiredPropertyException("CounterSetArgs", "counters");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CounterSetArgs", "name");
            }
            return $;
        }
    }

}
