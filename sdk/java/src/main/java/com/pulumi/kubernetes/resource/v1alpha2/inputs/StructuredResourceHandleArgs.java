// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha2.inputs;

import com.google.gson.JsonElement;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1alpha2.inputs.DriverAllocationResultArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * StructuredResourceHandle is the in-tree representation of the allocation result.
 * 
 */
public final class StructuredResourceHandleArgs extends com.pulumi.resources.ResourceArgs {

    public static final StructuredResourceHandleArgs Empty = new StructuredResourceHandleArgs();

    /**
     * NodeName is the name of the node providing the necessary resources if the resources are local to a node.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return NodeName is the name of the node providing the necessary resources if the resources are local to a node.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * Results lists all allocated driver resources.
     * 
     */
    @Import(name="results", required=true)
    private Output<List<DriverAllocationResultArgs>> results;

    /**
     * @return Results lists all allocated driver resources.
     * 
     */
    public Output<List<DriverAllocationResultArgs>> results() {
        return this.results;
    }

    /**
     * VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
     * 
     */
    @Import(name="vendorClaimParameters")
    private @Nullable Output<JsonElement> vendorClaimParameters;

    /**
     * @return VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
     * 
     */
    public Optional<Output<JsonElement>> vendorClaimParameters() {
        return Optional.ofNullable(this.vendorClaimParameters);
    }

    /**
     * VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
     * 
     */
    @Import(name="vendorClassParameters")
    private @Nullable Output<JsonElement> vendorClassParameters;

    /**
     * @return VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
     * 
     */
    public Optional<Output<JsonElement>> vendorClassParameters() {
        return Optional.ofNullable(this.vendorClassParameters);
    }

    private StructuredResourceHandleArgs() {}

    private StructuredResourceHandleArgs(StructuredResourceHandleArgs $) {
        this.nodeName = $.nodeName;
        this.results = $.results;
        this.vendorClaimParameters = $.vendorClaimParameters;
        this.vendorClassParameters = $.vendorClassParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StructuredResourceHandleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StructuredResourceHandleArgs $;

        public Builder() {
            $ = new StructuredResourceHandleArgs();
        }

        public Builder(StructuredResourceHandleArgs defaults) {
            $ = new StructuredResourceHandleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeName NodeName is the name of the node providing the necessary resources if the resources are local to a node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName NodeName is the name of the node providing the necessary resources if the resources are local to a node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param results Results lists all allocated driver resources.
         * 
         * @return builder
         * 
         */
        public Builder results(Output<List<DriverAllocationResultArgs>> results) {
            $.results = results;
            return this;
        }

        /**
         * @param results Results lists all allocated driver resources.
         * 
         * @return builder
         * 
         */
        public Builder results(List<DriverAllocationResultArgs> results) {
            return results(Output.of(results));
        }

        /**
         * @param results Results lists all allocated driver resources.
         * 
         * @return builder
         * 
         */
        public Builder results(DriverAllocationResultArgs... results) {
            return results(List.of(results));
        }

        /**
         * @param vendorClaimParameters VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
         * 
         * @return builder
         * 
         */
        public Builder vendorClaimParameters(@Nullable Output<JsonElement> vendorClaimParameters) {
            $.vendorClaimParameters = vendorClaimParameters;
            return this;
        }

        /**
         * @param vendorClaimParameters VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
         * 
         * @return builder
         * 
         */
        public Builder vendorClaimParameters(JsonElement vendorClaimParameters) {
            return vendorClaimParameters(Output.of(vendorClaimParameters));
        }

        /**
         * @param vendorClassParameters VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
         * 
         * @return builder
         * 
         */
        public Builder vendorClassParameters(@Nullable Output<JsonElement> vendorClassParameters) {
            $.vendorClassParameters = vendorClassParameters;
            return this;
        }

        /**
         * @param vendorClassParameters VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
         * 
         * @return builder
         * 
         */
        public Builder vendorClassParameters(JsonElement vendorClassParameters) {
            return vendorClassParameters(Output.of(vendorClassParameters));
        }

        public StructuredResourceHandleArgs build() {
            $.results = Objects.requireNonNull($.results, "expected parameter 'results' to be non-null");
            return $;
        }
    }

}
