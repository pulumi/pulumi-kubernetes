// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.storage.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.storage.v1.inputs.VolumeAttachmentSourcePatchArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VolumeAttachmentSpec is the specification of a VolumeAttachment request.
 * 
 */
public final class VolumeAttachmentSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeAttachmentSpecPatchArgs Empty = new VolumeAttachmentSpecPatchArgs();

    /**
     * Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
     * 
     */
    @Import(name="attacher")
    private @Nullable Output<String> attacher;

    /**
     * @return Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
     * 
     */
    public Optional<Output<String>> attacher() {
        return Optional.ofNullable(this.attacher);
    }

    /**
     * The node that the volume should be attached to.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The node that the volume should be attached to.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * Source represents the volume that should be attached.
     * 
     */
    @Import(name="source")
    private @Nullable Output<VolumeAttachmentSourcePatchArgs> source;

    /**
     * @return Source represents the volume that should be attached.
     * 
     */
    public Optional<Output<VolumeAttachmentSourcePatchArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    private VolumeAttachmentSpecPatchArgs() {}

    private VolumeAttachmentSpecPatchArgs(VolumeAttachmentSpecPatchArgs $) {
        this.attacher = $.attacher;
        this.nodeName = $.nodeName;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeAttachmentSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeAttachmentSpecPatchArgs $;

        public Builder() {
            $ = new VolumeAttachmentSpecPatchArgs();
        }

        public Builder(VolumeAttachmentSpecPatchArgs defaults) {
            $ = new VolumeAttachmentSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attacher Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
         * 
         * @return builder
         * 
         */
        public Builder attacher(@Nullable Output<String> attacher) {
            $.attacher = attacher;
            return this;
        }

        /**
         * @param attacher Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
         * 
         * @return builder
         * 
         */
        public Builder attacher(String attacher) {
            return attacher(Output.of(attacher));
        }

        /**
         * @param nodeName The node that the volume should be attached to.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The node that the volume should be attached to.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param source Source represents the volume that should be attached.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<VolumeAttachmentSourcePatchArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source represents the volume that should be attached.
         * 
         * @return builder
         * 
         */
        public Builder source(VolumeAttachmentSourcePatchArgs source) {
            return source(Output.of(source));
        }

        public VolumeAttachmentSpecPatchArgs build() {
            return $;
        }
    }

}
