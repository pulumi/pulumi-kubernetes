// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta1.inputs.DeviceSelectorArgs;
import com.pulumi.kubernetes.resource.v1beta1.inputs.DeviceSubRequestArgs;
import com.pulumi.kubernetes.resource.v1beta1.inputs.DeviceTolerationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.
 * 
 */
public final class DeviceRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceRequestArgs Empty = new DeviceRequestArgs();

    /**
     * AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
     * 
     */
    @Import(name="adminAccess")
    private @Nullable Output<Boolean> adminAccess;

    /**
     * @return AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
     * 
     */
    public Optional<Output<Boolean>> adminAccess() {
        return Optional.ofNullable(this.adminAccess);
    }

    /**
     * AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
     * 
     * - ExactCount: This request is for a specific number of devices.
     * This is the default. The exact number is provided in the
     * count field.
     * 
     * - All: This request is for all of the matching devices in a pool.
     * At least one device must exist on the node for the allocation to succeed.
     * Allocation will fail if some devices are already allocated,
     * unless adminAccess is requested.
     * 
     * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
     * 
     */
    @Import(name="allocationMode")
    private @Nullable Output<String> allocationMode;

    /**
     * @return AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
     * 
     * - ExactCount: This request is for a specific number of devices.
     * This is the default. The exact number is provided in the
     * count field.
     * 
     * - All: This request is for all of the matching devices in a pool.
     * At least one device must exist on the node for the allocation to succeed.
     * Allocation will fail if some devices are already allocated,
     * unless adminAccess is requested.
     * 
     * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
     * 
     */
    public Optional<Output<String>> allocationMode() {
        return Optional.ofNullable(this.allocationMode);
    }

    /**
     * Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    /**
     * @return Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     */
    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
     * 
     * A class is required if no subrequests are specified in the firstAvailable list and no class can be set if subrequests are specified in the firstAvailable list. Which classes are available depends on the cluster.
     * 
     * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
     * 
     */
    @Import(name="deviceClassName")
    private @Nullable Output<String> deviceClassName;

    /**
     * @return DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
     * 
     * A class is required if no subrequests are specified in the firstAvailable list and no class can be set if subrequests are specified in the firstAvailable list. Which classes are available depends on the cluster.
     * 
     * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
     * 
     */
    public Optional<Output<String>> deviceClassName() {
        return Optional.ofNullable(this.deviceClassName);
    }

    /**
     * FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.
     * 
     * This field may only be set in the entries of DeviceClaim.Requests.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    @Import(name="firstAvailable")
    private @Nullable Output<List<DeviceSubRequestArgs>> firstAvailable;

    /**
     * @return FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.
     * 
     * This field may only be set in the entries of DeviceClaim.Requests.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    public Optional<Output<List<DeviceSubRequestArgs>>> firstAvailable() {
        return Optional.ofNullable(this.firstAvailable);
    }

    /**
     * Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * Must be a DNS label and unique among all DeviceRequests in a ResourceClaim.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * Must be a DNS label and unique among all DeviceRequests in a ResourceClaim.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<DeviceSelectorArgs>> selectors;

    /**
     * @return Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     */
    public Optional<Output<List<DeviceSelectorArgs>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    /**
     * If specified, the request&#39;s tolerations.
     * 
     * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
     * 
     * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
     * 
     * The maximum number of tolerations is 16.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<DeviceTolerationArgs>> tolerations;

    /**
     * @return If specified, the request&#39;s tolerations.
     * 
     * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
     * 
     * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
     * 
     * The maximum number of tolerations is 16.
     * 
     * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    public Optional<Output<List<DeviceTolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    private DeviceRequestArgs() {}

    private DeviceRequestArgs(DeviceRequestArgs $) {
        this.adminAccess = $.adminAccess;
        this.allocationMode = $.allocationMode;
        this.count = $.count;
        this.deviceClassName = $.deviceClassName;
        this.firstAvailable = $.firstAvailable;
        this.name = $.name;
        this.selectors = $.selectors;
        this.tolerations = $.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceRequestArgs $;

        public Builder() {
            $ = new DeviceRequestArgs();
        }

        public Builder(DeviceRequestArgs defaults) {
            $ = new DeviceRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminAccess AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder adminAccess(@Nullable Output<Boolean> adminAccess) {
            $.adminAccess = adminAccess;
            return this;
        }

        /**
         * @param adminAccess AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder adminAccess(Boolean adminAccess) {
            return adminAccess(Output.of(adminAccess));
        }

        /**
         * @param allocationMode AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
         * 
         * - ExactCount: This request is for a specific number of devices.
         * This is the default. The exact number is provided in the
         * count field.
         * 
         * - All: This request is for all of the matching devices in a pool.
         * At least one device must exist on the node for the allocation to succeed.
         * Allocation will fail if some devices are already allocated,
         * unless adminAccess is requested.
         * 
         * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
         * 
         * @return builder
         * 
         */
        public Builder allocationMode(@Nullable Output<String> allocationMode) {
            $.allocationMode = allocationMode;
            return this;
        }

        /**
         * @param allocationMode AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
         * 
         * - ExactCount: This request is for a specific number of devices.
         * This is the default. The exact number is provided in the
         * count field.
         * 
         * - All: This request is for all of the matching devices in a pool.
         * At least one device must exist on the node for the allocation to succeed.
         * Allocation will fail if some devices are already allocated,
         * unless adminAccess is requested.
         * 
         * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
         * 
         * @return builder
         * 
         */
        public Builder allocationMode(String allocationMode) {
            return allocationMode(Output.of(allocationMode));
        }

        /**
         * @param count Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param deviceClassName DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
         * 
         * A class is required if no subrequests are specified in the firstAvailable list and no class can be set if subrequests are specified in the firstAvailable list. Which classes are available depends on the cluster.
         * 
         * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
         * 
         * @return builder
         * 
         */
        public Builder deviceClassName(@Nullable Output<String> deviceClassName) {
            $.deviceClassName = deviceClassName;
            return this;
        }

        /**
         * @param deviceClassName DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
         * 
         * A class is required if no subrequests are specified in the firstAvailable list and no class can be set if subrequests are specified in the firstAvailable list. Which classes are available depends on the cluster.
         * 
         * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
         * 
         * @return builder
         * 
         */
        public Builder deviceClassName(String deviceClassName) {
            return deviceClassName(Output.of(deviceClassName));
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.
         * 
         * This field may only be set in the entries of DeviceClaim.Requests.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(@Nullable Output<List<DeviceSubRequestArgs>> firstAvailable) {
            $.firstAvailable = firstAvailable;
            return this;
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.
         * 
         * This field may only be set in the entries of DeviceClaim.Requests.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(List<DeviceSubRequestArgs> firstAvailable) {
            return firstAvailable(Output.of(firstAvailable));
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.
         * 
         * This field may only be set in the entries of DeviceClaim.Requests.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(DeviceSubRequestArgs... firstAvailable) {
            return firstAvailable(List.of(firstAvailable));
        }

        /**
         * @param name Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
         * 
         * Must be a DNS label and unique among all DeviceRequests in a ResourceClaim.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
         * 
         * Must be a DNS label and unique among all DeviceRequests in a ResourceClaim.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param selectors Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<DeviceSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<DeviceSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * @return builder
         * 
         */
        public Builder selectors(DeviceSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        /**
         * @param tolerations If specified, the request&#39;s tolerations.
         * 
         * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
         * 
         * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
         * 
         * The maximum number of tolerations is 16.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<DeviceTolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations If specified, the request&#39;s tolerations.
         * 
         * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
         * 
         * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
         * 
         * The maximum number of tolerations is 16.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<DeviceTolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations If specified, the request&#39;s tolerations.
         * 
         * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
         * 
         * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
         * 
         * The maximum number of tolerations is 16.
         * 
         * This field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.
         * 
         * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(DeviceTolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        public DeviceRequestArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DeviceRequestArgs", "name");
            }
            return $;
        }
    }

}
