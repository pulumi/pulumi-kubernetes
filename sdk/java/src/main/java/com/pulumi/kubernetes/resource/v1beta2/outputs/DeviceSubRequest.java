// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta2.outputs.DeviceSelector;
import com.pulumi.kubernetes.resource.v1beta2.outputs.DeviceToleration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceSubRequest {
    /**
     * @return AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:
     * 
     * - ExactCount: This request is for a specific number of devices.
     * This is the default. The exact number is provided in the
     * count field.
     * 
     * - All: This subrequest is for all of the matching devices in a pool.
     * Allocation will fail if some devices are already allocated,
     * unless adminAccess is requested.
     * 
     * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.
     * 
     * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
     * 
     */
    private @Nullable String allocationMode;
    /**
     * @return Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
     * 
     */
    private @Nullable Integer count;
    /**
     * @return DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.
     * 
     * A class is required. Which classes are available depends on the cluster.
     * 
     * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
     * 
     */
    private String deviceClassName;
    /**
     * @return Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format &lt;main request&gt;/&lt;subrequest&gt;.
     * 
     * Must be a DNS label.
     * 
     */
    private String name;
    /**
     * @return Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.
     * 
     */
    private @Nullable List<DeviceSelector> selectors;
    /**
     * @return If specified, the request&#39;s tolerations.
     * 
     * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
     * 
     * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
     * 
     * The maximum number of tolerations is 16.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    private @Nullable List<DeviceToleration> tolerations;

    private DeviceSubRequest() {}
    /**
     * @return AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:
     * 
     * - ExactCount: This request is for a specific number of devices.
     * This is the default. The exact number is provided in the
     * count field.
     * 
     * - All: This subrequest is for all of the matching devices in a pool.
     * Allocation will fail if some devices are already allocated,
     * unless adminAccess is requested.
     * 
     * If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.
     * 
     * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
     * 
     */
    public Optional<String> allocationMode() {
        return Optional.ofNullable(this.allocationMode);
    }
    /**
     * @return Count is used only when the count mode is &#34;ExactCount&#34;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    /**
     * @return DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.
     * 
     * A class is required. Which classes are available depends on the cluster.
     * 
     * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
     * 
     */
    public String deviceClassName() {
        return this.deviceClassName;
    }
    /**
     * @return Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format &lt;main request&gt;/&lt;subrequest&gt;.
     * 
     * Must be a DNS label.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.
     * 
     */
    public List<DeviceSelector> selectors() {
        return this.selectors == null ? List.of() : this.selectors;
    }
    /**
     * @return If specified, the request&#39;s tolerations.
     * 
     * Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.
     * 
     * In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.
     * 
     * The maximum number of tolerations is 16.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    public List<DeviceToleration> tolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceSubRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allocationMode;
        private @Nullable Integer count;
        private String deviceClassName;
        private String name;
        private @Nullable List<DeviceSelector> selectors;
        private @Nullable List<DeviceToleration> tolerations;
        public Builder() {}
        public Builder(DeviceSubRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationMode = defaults.allocationMode;
    	      this.count = defaults.count;
    	      this.deviceClassName = defaults.deviceClassName;
    	      this.name = defaults.name;
    	      this.selectors = defaults.selectors;
    	      this.tolerations = defaults.tolerations;
        }

        @CustomType.Setter
        public Builder allocationMode(@Nullable String allocationMode) {

            this.allocationMode = allocationMode;
            return this;
        }
        @CustomType.Setter
        public Builder count(@Nullable Integer count) {

            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder deviceClassName(String deviceClassName) {
            if (deviceClassName == null) {
              throw new MissingRequiredPropertyException("DeviceSubRequest", "deviceClassName");
            }
            this.deviceClassName = deviceClassName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DeviceSubRequest", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder selectors(@Nullable List<DeviceSelector> selectors) {

            this.selectors = selectors;
            return this;
        }
        public Builder selectors(DeviceSelector... selectors) {
            return selectors(List.of(selectors));
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable List<DeviceToleration> tolerations) {

            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(DeviceToleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        public DeviceSubRequest build() {
            final var _resultValue = new DeviceSubRequest();
            _resultValue.allocationMode = allocationMode;
            _resultValue.count = count;
            _resultValue.deviceClassName = deviceClassName;
            _resultValue.name = name;
            _resultValue.selectors = selectors;
            _resultValue.tolerations = tolerations;
            return _resultValue;
        }
    }
}
