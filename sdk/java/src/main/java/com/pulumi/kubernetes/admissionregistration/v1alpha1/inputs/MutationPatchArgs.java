// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.ApplyConfigurationPatchArgs;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.JSONPatchPatchArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Mutation specifies the CEL expression which is used to apply the Mutation.
 * 
 */
public final class MutationPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final MutationPatchArgs Empty = new MutationPatchArgs();

    /**
     * applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
     * 
     */
    @Import(name="applyConfiguration")
    private @Nullable Output<ApplyConfigurationPatchArgs> applyConfiguration;

    /**
     * @return applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
     * 
     */
    public Optional<Output<ApplyConfigurationPatchArgs>> applyConfiguration() {
        return Optional.ofNullable(this.applyConfiguration);
    }

    /**
     * jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
     * 
     */
    @Import(name="jsonPatch")
    private @Nullable Output<JSONPatchPatchArgs> jsonPatch;

    /**
     * @return jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
     * 
     */
    public Optional<Output<JSONPatchPatchArgs>> jsonPatch() {
        return Optional.ofNullable(this.jsonPatch);
    }

    /**
     * patchType indicates the patch strategy used. Allowed values are &#34;ApplyConfiguration&#34; and &#34;JSONPatch&#34;. Required.
     * 
     */
    @Import(name="patchType")
    private @Nullable Output<String> patchType;

    /**
     * @return patchType indicates the patch strategy used. Allowed values are &#34;ApplyConfiguration&#34; and &#34;JSONPatch&#34;. Required.
     * 
     */
    public Optional<Output<String>> patchType() {
        return Optional.ofNullable(this.patchType);
    }

    private MutationPatchArgs() {}

    private MutationPatchArgs(MutationPatchArgs $) {
        this.applyConfiguration = $.applyConfiguration;
        this.jsonPatch = $.jsonPatch;
        this.patchType = $.patchType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MutationPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MutationPatchArgs $;

        public Builder() {
            $ = new MutationPatchArgs();
        }

        public Builder(MutationPatchArgs defaults) {
            $ = new MutationPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyConfiguration applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
         * 
         * @return builder
         * 
         */
        public Builder applyConfiguration(@Nullable Output<ApplyConfigurationPatchArgs> applyConfiguration) {
            $.applyConfiguration = applyConfiguration;
            return this;
        }

        /**
         * @param applyConfiguration applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
         * 
         * @return builder
         * 
         */
        public Builder applyConfiguration(ApplyConfigurationPatchArgs applyConfiguration) {
            return applyConfiguration(Output.of(applyConfiguration));
        }

        /**
         * @param jsonPatch jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
         * 
         * @return builder
         * 
         */
        public Builder jsonPatch(@Nullable Output<JSONPatchPatchArgs> jsonPatch) {
            $.jsonPatch = jsonPatch;
            return this;
        }

        /**
         * @param jsonPatch jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
         * 
         * @return builder
         * 
         */
        public Builder jsonPatch(JSONPatchPatchArgs jsonPatch) {
            return jsonPatch(Output.of(jsonPatch));
        }

        /**
         * @param patchType patchType indicates the patch strategy used. Allowed values are &#34;ApplyConfiguration&#34; and &#34;JSONPatch&#34;. Required.
         * 
         * @return builder
         * 
         */
        public Builder patchType(@Nullable Output<String> patchType) {
            $.patchType = patchType;
            return this;
        }

        /**
         * @param patchType patchType indicates the patch strategy used. Allowed values are &#34;ApplyConfiguration&#34; and &#34;JSONPatch&#34;. Required.
         * 
         * @return builder
         * 
         */
        public Builder patchType(String patchType) {
            return patchType(Output.of(patchType));
        }

        public MutationPatchArgs build() {
            return $;
        }
    }

}
