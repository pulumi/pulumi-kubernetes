// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.NodeSelectorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * AllocationResult contains attributed of an allocated resource.
 * 
 */
public final class AllocationResultArgs extends com.pulumi.resources.ResourceArgs {

    public static final AllocationResultArgs Empty = new AllocationResultArgs();

    /**
     * This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
     * 
     * Setting this field is optional. If null, the resource is available everywhere.
     * 
     */
    @Import(name="availableOnNodes")
    private @Nullable Output<NodeSelectorArgs> availableOnNodes;

    /**
     * @return This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
     * 
     * Setting this field is optional. If null, the resource is available everywhere.
     * 
     */
    public Optional<Output<NodeSelectorArgs>> availableOnNodes() {
        return Optional.ofNullable(this.availableOnNodes);
    }

    /**
     * ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
     * 
     * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
     * 
     */
    @Import(name="resourceHandle")
    private @Nullable Output<String> resourceHandle;

    /**
     * @return ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
     * 
     * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
     * 
     */
    public Optional<Output<String>> resourceHandle() {
        return Optional.ofNullable(this.resourceHandle);
    }

    /**
     * Shareable determines whether the resource supports more than one consumer at a time.
     * 
     */
    @Import(name="shareable")
    private @Nullable Output<Boolean> shareable;

    /**
     * @return Shareable determines whether the resource supports more than one consumer at a time.
     * 
     */
    public Optional<Output<Boolean>> shareable() {
        return Optional.ofNullable(this.shareable);
    }

    private AllocationResultArgs() {}

    private AllocationResultArgs(AllocationResultArgs $) {
        this.availableOnNodes = $.availableOnNodes;
        this.resourceHandle = $.resourceHandle;
        this.shareable = $.shareable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AllocationResultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AllocationResultArgs $;

        public Builder() {
            $ = new AllocationResultArgs();
        }

        public Builder(AllocationResultArgs defaults) {
            $ = new AllocationResultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availableOnNodes This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
         * 
         * Setting this field is optional. If null, the resource is available everywhere.
         * 
         * @return builder
         * 
         */
        public Builder availableOnNodes(@Nullable Output<NodeSelectorArgs> availableOnNodes) {
            $.availableOnNodes = availableOnNodes;
            return this;
        }

        /**
         * @param availableOnNodes This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
         * 
         * Setting this field is optional. If null, the resource is available everywhere.
         * 
         * @return builder
         * 
         */
        public Builder availableOnNodes(NodeSelectorArgs availableOnNodes) {
            return availableOnNodes(Output.of(availableOnNodes));
        }

        /**
         * @param resourceHandle ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
         * 
         * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
         * 
         * @return builder
         * 
         */
        public Builder resourceHandle(@Nullable Output<String> resourceHandle) {
            $.resourceHandle = resourceHandle;
            return this;
        }

        /**
         * @param resourceHandle ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
         * 
         * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
         * 
         * @return builder
         * 
         */
        public Builder resourceHandle(String resourceHandle) {
            return resourceHandle(Output.of(resourceHandle));
        }

        /**
         * @param shareable Shareable determines whether the resource supports more than one consumer at a time.
         * 
         * @return builder
         * 
         */
        public Builder shareable(@Nullable Output<Boolean> shareable) {
            $.shareable = shareable;
            return this;
        }

        /**
         * @param shareable Shareable determines whether the resource supports more than one consumer at a time.
         * 
         * @return builder
         * 
         */
        public Builder shareable(Boolean shareable) {
            return shareable(Output.of(shareable));
        }

        public AllocationResultArgs build() {
            return $;
        }
    }

}
