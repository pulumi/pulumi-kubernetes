// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
 * 
 */
public final class LimitRangeItemPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final LimitRangeItemPatchArgs Empty = new LimitRangeItemPatchArgs();

    /**
     * Default resource requirement limit value by resource name if resource limit is omitted.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Map<String,String>> default_;

    /**
     * @return Default resource requirement limit value by resource name if resource limit is omitted.
     * 
     */
    public Optional<Output<Map<String,String>>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
     * 
     */
    @Import(name="defaultRequest")
    private @Nullable Output<Map<String,String>> defaultRequest;

    /**
     * @return DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
     * 
     */
    public Optional<Output<Map<String,String>>> defaultRequest() {
        return Optional.ofNullable(this.defaultRequest);
    }

    /**
     * Max usage constraints on this kind by resource name.
     * 
     */
    @Import(name="max")
    private @Nullable Output<Map<String,String>> max;

    /**
     * @return Max usage constraints on this kind by resource name.
     * 
     */
    public Optional<Output<Map<String,String>>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
     * 
     */
    @Import(name="maxLimitRequestRatio")
    private @Nullable Output<Map<String,String>> maxLimitRequestRatio;

    /**
     * @return MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
     * 
     */
    public Optional<Output<Map<String,String>>> maxLimitRequestRatio() {
        return Optional.ofNullable(this.maxLimitRequestRatio);
    }

    /**
     * Min usage constraints on this kind by resource name.
     * 
     */
    @Import(name="min")
    private @Nullable Output<Map<String,String>> min;

    /**
     * @return Min usage constraints on this kind by resource name.
     * 
     */
    public Optional<Output<Map<String,String>>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * Type of resource that this limit applies to.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of resource that this limit applies to.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LimitRangeItemPatchArgs() {}

    private LimitRangeItemPatchArgs(LimitRangeItemPatchArgs $) {
        this.default_ = $.default_;
        this.defaultRequest = $.defaultRequest;
        this.max = $.max;
        this.maxLimitRequestRatio = $.maxLimitRequestRatio;
        this.min = $.min;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LimitRangeItemPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LimitRangeItemPatchArgs $;

        public Builder() {
            $ = new LimitRangeItemPatchArgs();
        }

        public Builder(LimitRangeItemPatchArgs defaults) {
            $ = new LimitRangeItemPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ Default resource requirement limit value by resource name if resource limit is omitted.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Map<String,String>> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Default resource requirement limit value by resource name if resource limit is omitted.
         * 
         * @return builder
         * 
         */
        public Builder default_(Map<String,String> default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param defaultRequest DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
         * 
         * @return builder
         * 
         */
        public Builder defaultRequest(@Nullable Output<Map<String,String>> defaultRequest) {
            $.defaultRequest = defaultRequest;
            return this;
        }

        /**
         * @param defaultRequest DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
         * 
         * @return builder
         * 
         */
        public Builder defaultRequest(Map<String,String> defaultRequest) {
            return defaultRequest(Output.of(defaultRequest));
        }

        /**
         * @param max Max usage constraints on this kind by resource name.
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Map<String,String>> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max Max usage constraints on this kind by resource name.
         * 
         * @return builder
         * 
         */
        public Builder max(Map<String,String> max) {
            return max(Output.of(max));
        }

        /**
         * @param maxLimitRequestRatio MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
         * 
         * @return builder
         * 
         */
        public Builder maxLimitRequestRatio(@Nullable Output<Map<String,String>> maxLimitRequestRatio) {
            $.maxLimitRequestRatio = maxLimitRequestRatio;
            return this;
        }

        /**
         * @param maxLimitRequestRatio MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
         * 
         * @return builder
         * 
         */
        public Builder maxLimitRequestRatio(Map<String,String> maxLimitRequestRatio) {
            return maxLimitRequestRatio(Output.of(maxLimitRequestRatio));
        }

        /**
         * @param min Min usage constraints on this kind by resource name.
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Map<String,String>> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min Min usage constraints on this kind by resource name.
         * 
         * @return builder
         * 
         */
        public Builder min(Map<String,String> min) {
            return min(Output.of(min));
        }

        /**
         * @param type Type of resource that this limit applies to.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of resource that this limit applies to.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LimitRangeItemPatchArgs build() {
            return $;
        }
    }

}
