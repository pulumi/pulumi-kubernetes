// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.storagemigration.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.storagemigration.v1alpha1.inputs.MigrationConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Status of the storage version migration.
 * 
 */
public final class StorageVersionMigrationStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageVersionMigrationStatusArgs Empty = new StorageVersionMigrationStatusArgs();

    /**
     * The latest available observations of the migration&#39;s current state.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<MigrationConditionArgs>> conditions;

    /**
     * @return The latest available observations of the migration&#39;s current state.
     * 
     */
    public Optional<Output<List<MigrationConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
     * 
     */
    @Import(name="resourceVersion")
    private @Nullable Output<String> resourceVersion;

    /**
     * @return ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
     * 
     */
    public Optional<Output<String>> resourceVersion() {
        return Optional.ofNullable(this.resourceVersion);
    }

    private StorageVersionMigrationStatusArgs() {}

    private StorageVersionMigrationStatusArgs(StorageVersionMigrationStatusArgs $) {
        this.conditions = $.conditions;
        this.resourceVersion = $.resourceVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageVersionMigrationStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageVersionMigrationStatusArgs $;

        public Builder() {
            $ = new StorageVersionMigrationStatusArgs();
        }

        public Builder(StorageVersionMigrationStatusArgs defaults) {
            $ = new StorageVersionMigrationStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The latest available observations of the migration&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<MigrationConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The latest available observations of the migration&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<MigrationConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The latest available observations of the migration&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder conditions(MigrationConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param resourceVersion ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(@Nullable Output<String> resourceVersion) {
            $.resourceVersion = resourceVersion;
            return this;
        }

        /**
         * @param resourceVersion ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(String resourceVersion) {
            return resourceVersion(Output.of(resourceVersion));
        }

        public StorageVersionMigrationStatusArgs build() {
            return $;
        }
    }

}
