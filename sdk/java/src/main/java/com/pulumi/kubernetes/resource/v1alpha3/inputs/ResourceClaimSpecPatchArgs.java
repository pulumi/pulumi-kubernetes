// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.DeviceClaimPatchArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
 * 
 */
public final class ResourceClaimSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceClaimSpecPatchArgs Empty = new ResourceClaimSpecPatchArgs();

    /**
     * Controller is the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.
     * 
     * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     * 
     * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
     * 
     */
    @Import(name="controller")
    private @Nullable Output<String> controller;

    /**
     * @return Controller is the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.
     * 
     * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     * 
     * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
     * 
     */
    public Optional<Output<String>> controller() {
        return Optional.ofNullable(this.controller);
    }

    /**
     * Devices defines how to request devices.
     * 
     */
    @Import(name="devices")
    private @Nullable Output<DeviceClaimPatchArgs> devices;

    /**
     * @return Devices defines how to request devices.
     * 
     */
    public Optional<Output<DeviceClaimPatchArgs>> devices() {
        return Optional.ofNullable(this.devices);
    }

    private ResourceClaimSpecPatchArgs() {}

    private ResourceClaimSpecPatchArgs(ResourceClaimSpecPatchArgs $) {
        this.controller = $.controller;
        this.devices = $.devices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceClaimSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceClaimSpecPatchArgs $;

        public Builder() {
            $ = new ResourceClaimSpecPatchArgs();
        }

        public Builder(ResourceClaimSpecPatchArgs defaults) {
            $ = new ResourceClaimSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controller Controller is the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.
         * 
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
         * 
         * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
         * 
         * @return builder
         * 
         */
        public Builder controller(@Nullable Output<String> controller) {
            $.controller = controller;
            return this;
        }

        /**
         * @param controller Controller is the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.
         * 
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
         * 
         * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
         * 
         * @return builder
         * 
         */
        public Builder controller(String controller) {
            return controller(Output.of(controller));
        }

        /**
         * @param devices Devices defines how to request devices.
         * 
         * @return builder
         * 
         */
        public Builder devices(@Nullable Output<DeviceClaimPatchArgs> devices) {
            $.devices = devices;
            return this;
        }

        /**
         * @param devices Devices defines how to request devices.
         * 
         * @return builder
         * 
         */
        public Builder devices(DeviceClaimPatchArgs devices) {
            return devices(Output.of(devices));
        }

        public ResourceClaimSpecPatchArgs build() {
            return $;
        }
    }

}
