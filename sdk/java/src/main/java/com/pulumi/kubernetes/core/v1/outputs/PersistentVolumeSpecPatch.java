// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.AWSElasticBlockStoreVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.AzureDiskVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.AzureFilePersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.CSIPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.CephFSPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.CinderPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.FCVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.FlexPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.FlockerVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.GCEPersistentDiskVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.GlusterfsPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.HostPathVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.ISCSIPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.LocalVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.NFSVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.ObjectReferencePatch;
import com.pulumi.kubernetes.core.v1.outputs.PhotonPersistentDiskVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.PortworxVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.QuobyteVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.RBDPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.ScaleIOPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.StorageOSPersistentVolumeSourcePatch;
import com.pulumi.kubernetes.core.v1.outputs.VolumeNodeAffinityPatch;
import com.pulumi.kubernetes.core.v1.outputs.VsphereVirtualDiskVolumeSourcePatch;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PersistentVolumeSpecPatch {
    /**
     * @return accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     * 
     */
    private @Nullable List<String> accessModes;
    /**
     * @return awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    private @Nullable AWSElasticBlockStoreVolumeSourcePatch awsElasticBlockStore;
    /**
     * @return azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    private @Nullable AzureDiskVolumeSourcePatch azureDisk;
    /**
     * @return azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    private @Nullable AzureFilePersistentVolumeSourcePatch azureFile;
    /**
     * @return capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    private @Nullable Map<String,String> capacity;
    /**
     * @return cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    private @Nullable CephFSPersistentVolumeSourcePatch cephfs;
    /**
     * @return cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    private @Nullable CinderPersistentVolumeSourcePatch cinder;
    /**
     * @return claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     * 
     */
    private @Nullable ObjectReferencePatch claimRef;
    /**
     * @return csi represents storage that is handled by an external CSI driver (Beta feature).
     * 
     */
    private @Nullable CSIPersistentVolumeSourcePatch csi;
    /**
     * @return fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    private @Nullable FCVolumeSourcePatch fc;
    /**
     * @return flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    private @Nullable FlexPersistentVolumeSourcePatch flexVolume;
    /**
     * @return flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * 
     */
    private @Nullable FlockerVolumeSourcePatch flocker;
    /**
     * @return gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    private @Nullable GCEPersistentDiskVolumeSourcePatch gcePersistentDisk;
    /**
     * @return glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    private @Nullable GlusterfsPersistentVolumeSourcePatch glusterfs;
    /**
     * @return hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    private @Nullable HostPathVolumeSourcePatch hostPath;
    /**
     * @return iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
     * 
     */
    private @Nullable ISCSIPersistentVolumeSourcePatch iscsi;
    /**
     * @return local represents directly-attached storage with node affinity
     * 
     */
    private @Nullable LocalVolumeSourcePatch local;
    /**
     * @return mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     * 
     */
    private @Nullable List<String> mountOptions;
    /**
     * @return nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    private @Nullable NFSVolumeSourcePatch nfs;
    /**
     * @return nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     * 
     */
    private @Nullable VolumeNodeAffinityPatch nodeAffinity;
    /**
     * @return persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     * 
     */
    private @Nullable String persistentVolumeReclaimPolicy;
    /**
     * @return photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    private @Nullable PhotonPersistentDiskVolumeSourcePatch photonPersistentDisk;
    /**
     * @return portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    private @Nullable PortworxVolumeSourcePatch portworxVolume;
    /**
     * @return quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    private @Nullable QuobyteVolumeSourcePatch quobyte;
    /**
     * @return rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    private @Nullable RBDPersistentVolumeSourcePatch rbd;
    /**
     * @return scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    private @Nullable ScaleIOPersistentVolumeSourcePatch scaleIO;
    /**
     * @return storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * 
     */
    private @Nullable String storageClassName;
    /**
     * @return storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
     * 
     */
    private @Nullable StorageOSPersistentVolumeSourcePatch storageos;
    /**
     * @return Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
     * 
     */
    private @Nullable String volumeAttributesClassName;
    /**
     * @return volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     * 
     */
    private @Nullable String volumeMode;
    /**
     * @return vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    private @Nullable VsphereVirtualDiskVolumeSourcePatch vsphereVolume;

    private PersistentVolumeSpecPatch() {}
    /**
     * @return accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     * 
     */
    public List<String> accessModes() {
        return this.accessModes == null ? List.of() : this.accessModes;
    }
    /**
     * @return awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    public Optional<AWSElasticBlockStoreVolumeSourcePatch> awsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }
    /**
     * @return azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    public Optional<AzureDiskVolumeSourcePatch> azureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }
    /**
     * @return azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    public Optional<AzureFilePersistentVolumeSourcePatch> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }
    /**
     * @return capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    public Map<String,String> capacity() {
        return this.capacity == null ? Map.of() : this.capacity;
    }
    /**
     * @return cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<CephFSPersistentVolumeSourcePatch> cephfs() {
        return Optional.ofNullable(this.cephfs);
    }
    /**
     * @return cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    public Optional<CinderPersistentVolumeSourcePatch> cinder() {
        return Optional.ofNullable(this.cinder);
    }
    /**
     * @return claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     * 
     */
    public Optional<ObjectReferencePatch> claimRef() {
        return Optional.ofNullable(this.claimRef);
    }
    /**
     * @return csi represents storage that is handled by an external CSI driver (Beta feature).
     * 
     */
    public Optional<CSIPersistentVolumeSourcePatch> csi() {
        return Optional.ofNullable(this.csi);
    }
    /**
     * @return fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    public Optional<FCVolumeSourcePatch> fc() {
        return Optional.ofNullable(this.fc);
    }
    /**
     * @return flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    public Optional<FlexPersistentVolumeSourcePatch> flexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }
    /**
     * @return flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * 
     */
    public Optional<FlockerVolumeSourcePatch> flocker() {
        return Optional.ofNullable(this.flocker);
    }
    /**
     * @return gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    public Optional<GCEPersistentDiskVolumeSourcePatch> gcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }
    /**
     * @return glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    public Optional<GlusterfsPersistentVolumeSourcePatch> glusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }
    /**
     * @return hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    public Optional<HostPathVolumeSourcePatch> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }
    /**
     * @return iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
     * 
     */
    public Optional<ISCSIPersistentVolumeSourcePatch> iscsi() {
        return Optional.ofNullable(this.iscsi);
    }
    /**
     * @return local represents directly-attached storage with node affinity
     * 
     */
    public Optional<LocalVolumeSourcePatch> local() {
        return Optional.ofNullable(this.local);
    }
    /**
     * @return mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     * 
     */
    public List<String> mountOptions() {
        return this.mountOptions == null ? List.of() : this.mountOptions;
    }
    /**
     * @return nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    public Optional<NFSVolumeSourcePatch> nfs() {
        return Optional.ofNullable(this.nfs);
    }
    /**
     * @return nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     * 
     */
    public Optional<VolumeNodeAffinityPatch> nodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }
    /**
     * @return persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     * 
     */
    public Optional<String> persistentVolumeReclaimPolicy() {
        return Optional.ofNullable(this.persistentVolumeReclaimPolicy);
    }
    /**
     * @return photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    public Optional<PhotonPersistentDiskVolumeSourcePatch> photonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }
    /**
     * @return portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<PortworxVolumeSourcePatch> portworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }
    /**
     * @return quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<QuobyteVolumeSourcePatch> quobyte() {
        return Optional.ofNullable(this.quobyte);
    }
    /**
     * @return rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    public Optional<RBDPersistentVolumeSourcePatch> rbd() {
        return Optional.ofNullable(this.rbd);
    }
    /**
     * @return scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    public Optional<ScaleIOPersistentVolumeSourcePatch> scaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }
    /**
     * @return storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * 
     */
    public Optional<String> storageClassName() {
        return Optional.ofNullable(this.storageClassName);
    }
    /**
     * @return storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
     * 
     */
    public Optional<StorageOSPersistentVolumeSourcePatch> storageos() {
        return Optional.ofNullable(this.storageos);
    }
    /**
     * @return Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
     * 
     */
    public Optional<String> volumeAttributesClassName() {
        return Optional.ofNullable(this.volumeAttributesClassName);
    }
    /**
     * @return volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     * 
     */
    public Optional<String> volumeMode() {
        return Optional.ofNullable(this.volumeMode);
    }
    /**
     * @return vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<VsphereVirtualDiskVolumeSourcePatch> vsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PersistentVolumeSpecPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> accessModes;
        private @Nullable AWSElasticBlockStoreVolumeSourcePatch awsElasticBlockStore;
        private @Nullable AzureDiskVolumeSourcePatch azureDisk;
        private @Nullable AzureFilePersistentVolumeSourcePatch azureFile;
        private @Nullable Map<String,String> capacity;
        private @Nullable CephFSPersistentVolumeSourcePatch cephfs;
        private @Nullable CinderPersistentVolumeSourcePatch cinder;
        private @Nullable ObjectReferencePatch claimRef;
        private @Nullable CSIPersistentVolumeSourcePatch csi;
        private @Nullable FCVolumeSourcePatch fc;
        private @Nullable FlexPersistentVolumeSourcePatch flexVolume;
        private @Nullable FlockerVolumeSourcePatch flocker;
        private @Nullable GCEPersistentDiskVolumeSourcePatch gcePersistentDisk;
        private @Nullable GlusterfsPersistentVolumeSourcePatch glusterfs;
        private @Nullable HostPathVolumeSourcePatch hostPath;
        private @Nullable ISCSIPersistentVolumeSourcePatch iscsi;
        private @Nullable LocalVolumeSourcePatch local;
        private @Nullable List<String> mountOptions;
        private @Nullable NFSVolumeSourcePatch nfs;
        private @Nullable VolumeNodeAffinityPatch nodeAffinity;
        private @Nullable String persistentVolumeReclaimPolicy;
        private @Nullable PhotonPersistentDiskVolumeSourcePatch photonPersistentDisk;
        private @Nullable PortworxVolumeSourcePatch portworxVolume;
        private @Nullable QuobyteVolumeSourcePatch quobyte;
        private @Nullable RBDPersistentVolumeSourcePatch rbd;
        private @Nullable ScaleIOPersistentVolumeSourcePatch scaleIO;
        private @Nullable String storageClassName;
        private @Nullable StorageOSPersistentVolumeSourcePatch storageos;
        private @Nullable String volumeAttributesClassName;
        private @Nullable String volumeMode;
        private @Nullable VsphereVirtualDiskVolumeSourcePatch vsphereVolume;
        public Builder() {}
        public Builder(PersistentVolumeSpecPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessModes = defaults.accessModes;
    	      this.awsElasticBlockStore = defaults.awsElasticBlockStore;
    	      this.azureDisk = defaults.azureDisk;
    	      this.azureFile = defaults.azureFile;
    	      this.capacity = defaults.capacity;
    	      this.cephfs = defaults.cephfs;
    	      this.cinder = defaults.cinder;
    	      this.claimRef = defaults.claimRef;
    	      this.csi = defaults.csi;
    	      this.fc = defaults.fc;
    	      this.flexVolume = defaults.flexVolume;
    	      this.flocker = defaults.flocker;
    	      this.gcePersistentDisk = defaults.gcePersistentDisk;
    	      this.glusterfs = defaults.glusterfs;
    	      this.hostPath = defaults.hostPath;
    	      this.iscsi = defaults.iscsi;
    	      this.local = defaults.local;
    	      this.mountOptions = defaults.mountOptions;
    	      this.nfs = defaults.nfs;
    	      this.nodeAffinity = defaults.nodeAffinity;
    	      this.persistentVolumeReclaimPolicy = defaults.persistentVolumeReclaimPolicy;
    	      this.photonPersistentDisk = defaults.photonPersistentDisk;
    	      this.portworxVolume = defaults.portworxVolume;
    	      this.quobyte = defaults.quobyte;
    	      this.rbd = defaults.rbd;
    	      this.scaleIO = defaults.scaleIO;
    	      this.storageClassName = defaults.storageClassName;
    	      this.storageos = defaults.storageos;
    	      this.volumeAttributesClassName = defaults.volumeAttributesClassName;
    	      this.volumeMode = defaults.volumeMode;
    	      this.vsphereVolume = defaults.vsphereVolume;
        }

        @CustomType.Setter
        public Builder accessModes(@Nullable List<String> accessModes) {
            this.accessModes = accessModes;
            return this;
        }
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }
        @CustomType.Setter
        public Builder awsElasticBlockStore(@Nullable AWSElasticBlockStoreVolumeSourcePatch awsElasticBlockStore) {
            this.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }
        @CustomType.Setter
        public Builder azureDisk(@Nullable AzureDiskVolumeSourcePatch azureDisk) {
            this.azureDisk = azureDisk;
            return this;
        }
        @CustomType.Setter
        public Builder azureFile(@Nullable AzureFilePersistentVolumeSourcePatch azureFile) {
            this.azureFile = azureFile;
            return this;
        }
        @CustomType.Setter
        public Builder capacity(@Nullable Map<String,String> capacity) {
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder cephfs(@Nullable CephFSPersistentVolumeSourcePatch cephfs) {
            this.cephfs = cephfs;
            return this;
        }
        @CustomType.Setter
        public Builder cinder(@Nullable CinderPersistentVolumeSourcePatch cinder) {
            this.cinder = cinder;
            return this;
        }
        @CustomType.Setter
        public Builder claimRef(@Nullable ObjectReferencePatch claimRef) {
            this.claimRef = claimRef;
            return this;
        }
        @CustomType.Setter
        public Builder csi(@Nullable CSIPersistentVolumeSourcePatch csi) {
            this.csi = csi;
            return this;
        }
        @CustomType.Setter
        public Builder fc(@Nullable FCVolumeSourcePatch fc) {
            this.fc = fc;
            return this;
        }
        @CustomType.Setter
        public Builder flexVolume(@Nullable FlexPersistentVolumeSourcePatch flexVolume) {
            this.flexVolume = flexVolume;
            return this;
        }
        @CustomType.Setter
        public Builder flocker(@Nullable FlockerVolumeSourcePatch flocker) {
            this.flocker = flocker;
            return this;
        }
        @CustomType.Setter
        public Builder gcePersistentDisk(@Nullable GCEPersistentDiskVolumeSourcePatch gcePersistentDisk) {
            this.gcePersistentDisk = gcePersistentDisk;
            return this;
        }
        @CustomType.Setter
        public Builder glusterfs(@Nullable GlusterfsPersistentVolumeSourcePatch glusterfs) {
            this.glusterfs = glusterfs;
            return this;
        }
        @CustomType.Setter
        public Builder hostPath(@Nullable HostPathVolumeSourcePatch hostPath) {
            this.hostPath = hostPath;
            return this;
        }
        @CustomType.Setter
        public Builder iscsi(@Nullable ISCSIPersistentVolumeSourcePatch iscsi) {
            this.iscsi = iscsi;
            return this;
        }
        @CustomType.Setter
        public Builder local(@Nullable LocalVolumeSourcePatch local) {
            this.local = local;
            return this;
        }
        @CustomType.Setter
        public Builder mountOptions(@Nullable List<String> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }
        public Builder mountOptions(String... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }
        @CustomType.Setter
        public Builder nfs(@Nullable NFSVolumeSourcePatch nfs) {
            this.nfs = nfs;
            return this;
        }
        @CustomType.Setter
        public Builder nodeAffinity(@Nullable VolumeNodeAffinityPatch nodeAffinity) {
            this.nodeAffinity = nodeAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder persistentVolumeReclaimPolicy(@Nullable String persistentVolumeReclaimPolicy) {
            this.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder photonPersistentDisk(@Nullable PhotonPersistentDiskVolumeSourcePatch photonPersistentDisk) {
            this.photonPersistentDisk = photonPersistentDisk;
            return this;
        }
        @CustomType.Setter
        public Builder portworxVolume(@Nullable PortworxVolumeSourcePatch portworxVolume) {
            this.portworxVolume = portworxVolume;
            return this;
        }
        @CustomType.Setter
        public Builder quobyte(@Nullable QuobyteVolumeSourcePatch quobyte) {
            this.quobyte = quobyte;
            return this;
        }
        @CustomType.Setter
        public Builder rbd(@Nullable RBDPersistentVolumeSourcePatch rbd) {
            this.rbd = rbd;
            return this;
        }
        @CustomType.Setter
        public Builder scaleIO(@Nullable ScaleIOPersistentVolumeSourcePatch scaleIO) {
            this.scaleIO = scaleIO;
            return this;
        }
        @CustomType.Setter
        public Builder storageClassName(@Nullable String storageClassName) {
            this.storageClassName = storageClassName;
            return this;
        }
        @CustomType.Setter
        public Builder storageos(@Nullable StorageOSPersistentVolumeSourcePatch storageos) {
            this.storageos = storageos;
            return this;
        }
        @CustomType.Setter
        public Builder volumeAttributesClassName(@Nullable String volumeAttributesClassName) {
            this.volumeAttributesClassName = volumeAttributesClassName;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMode(@Nullable String volumeMode) {
            this.volumeMode = volumeMode;
            return this;
        }
        @CustomType.Setter
        public Builder vsphereVolume(@Nullable VsphereVirtualDiskVolumeSourcePatch vsphereVolume) {
            this.vsphereVolume = vsphereVolume;
            return this;
        }
        public PersistentVolumeSpecPatch build() {
            final var o = new PersistentVolumeSpecPatch();
            o.accessModes = accessModes;
            o.awsElasticBlockStore = awsElasticBlockStore;
            o.azureDisk = azureDisk;
            o.azureFile = azureFile;
            o.capacity = capacity;
            o.cephfs = cephfs;
            o.cinder = cinder;
            o.claimRef = claimRef;
            o.csi = csi;
            o.fc = fc;
            o.flexVolume = flexVolume;
            o.flocker = flocker;
            o.gcePersistentDisk = gcePersistentDisk;
            o.glusterfs = glusterfs;
            o.hostPath = hostPath;
            o.iscsi = iscsi;
            o.local = local;
            o.mountOptions = mountOptions;
            o.nfs = nfs;
            o.nodeAffinity = nodeAffinity;
            o.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
            o.photonPersistentDisk = photonPersistentDisk;
            o.portworxVolume = portworxVolume;
            o.quobyte = quobyte;
            o.rbd = rbd;
            o.scaleIO = scaleIO;
            o.storageClassName = storageClassName;
            o.storageos = storageos;
            o.volumeAttributesClassName = volumeAttributesClassName;
            o.volumeMode = volumeMode;
            o.vsphereVolume = vsphereVolume;
            return o;
        }
    }
}
