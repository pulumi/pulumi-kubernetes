// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageVolumeSourcePatch {
    /**
     * @return Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn&#39;t present. IfNotPresent: the kubelet pulls if the reference isn&#39;t already present on disk. Container creation will fail if the reference isn&#39;t present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
     * 
     */
    private @Nullable String pullPolicy;
    /**
     * @return Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * 
     */
    private @Nullable String reference;

    private ImageVolumeSourcePatch() {}
    /**
     * @return Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn&#39;t present. IfNotPresent: the kubelet pulls if the reference isn&#39;t already present on disk. Container creation will fail if the reference isn&#39;t present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
     * 
     */
    public Optional<String> pullPolicy() {
        return Optional.ofNullable(this.pullPolicy);
    }
    /**
     * @return Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * 
     */
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageVolumeSourcePatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String pullPolicy;
        private @Nullable String reference;
        public Builder() {}
        public Builder(ImageVolumeSourcePatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pullPolicy = defaults.pullPolicy;
    	      this.reference = defaults.reference;
        }

        @CustomType.Setter
        public Builder pullPolicy(@Nullable String pullPolicy) {

            this.pullPolicy = pullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder reference(@Nullable String reference) {

            this.reference = reference;
            return this;
        }
        public ImageVolumeSourcePatch build() {
            final var _resultValue = new ImageVolumeSourcePatch();
            _resultValue.pullPolicy = pullPolicy;
            _resultValue.reference = reference;
            return _resultValue;
        }
    }
}
