// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.AppArmorProfileArgs;
import com.pulumi.kubernetes.core.v1.inputs.SELinuxOptionsArgs;
import com.pulumi.kubernetes.core.v1.inputs.SeccompProfileArgs;
import com.pulumi.kubernetes.core.v1.inputs.SysctlArgs;
import com.pulumi.kubernetes.core.v1.inputs.WindowsSecurityContextOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
 * 
 */
public final class PodSecurityContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodSecurityContextArgs Empty = new PodSecurityContextArgs();

    /**
     * appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="appArmorProfile")
    private @Nullable Output<AppArmorProfileArgs> appArmorProfile;

    /**
     * @return appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<AppArmorProfileArgs>> appArmorProfile() {
        return Optional.ofNullable(this.appArmorProfile);
    }

    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     * 
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw----
     * 
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="fsGroup")
    private @Nullable Output<Integer> fsGroup;

    /**
     * @return A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     * 
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw----
     * 
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<Integer>> fsGroup() {
        return Optional.ofNullable(this.fsGroup);
    }

    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are &#34;OnRootMismatch&#34; and &#34;Always&#34;. If not specified, &#34;Always&#34; is used. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="fsGroupChangePolicy")
    private @Nullable Output<String> fsGroupChangePolicy;

    /**
     * @return fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are &#34;OnRootMismatch&#34; and &#34;Always&#34;. If not specified, &#34;Always&#34; is used. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<String>> fsGroupChangePolicy() {
        return Optional.ofNullable(this.fsGroupChangePolicy);
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsGroup")
    private @Nullable Output<Integer> runAsGroup;

    /**
     * @return The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<Integer>> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * 
     */
    @Import(name="runAsNonRoot")
    private @Nullable Output<Boolean> runAsNonRoot;

    /**
     * @return Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * 
     */
    public Optional<Output<Boolean>> runAsNonRoot() {
        return Optional.ofNullable(this.runAsNonRoot);
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsUser")
    private @Nullable Output<Integer> runAsUser;

    /**
     * @return The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<Integer>> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }

    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seLinuxOptions")
    private @Nullable Output<SELinuxOptionsArgs> seLinuxOptions;

    /**
     * @return The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<SELinuxOptionsArgs>> seLinuxOptions() {
        return Optional.ofNullable(this.seLinuxOptions);
    }

    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seccompProfile")
    private @Nullable Output<SeccompProfileArgs> seccompProfile;

    /**
     * @return The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<SeccompProfileArgs>> seccompProfile() {
        return Optional.ofNullable(this.seccompProfile);
    }

    /**
     * A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="supplementalGroups")
    private @Nullable Output<List<Integer>> supplementalGroups;

    /**
     * @return A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<List<Integer>>> supplementalGroups() {
        return Optional.ofNullable(this.supplementalGroups);
    }

    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="sysctls")
    private @Nullable Output<List<SysctlArgs>> sysctls;

    /**
     * @return Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    public Optional<Output<List<SysctlArgs>>> sysctls() {
        return Optional.ofNullable(this.sysctls);
    }

    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container&#39;s SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     * 
     */
    @Import(name="windowsOptions")
    private @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions;

    /**
     * @return The Windows specific settings applied to all containers. If unspecified, the options within a container&#39;s SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     * 
     */
    public Optional<Output<WindowsSecurityContextOptionsArgs>> windowsOptions() {
        return Optional.ofNullable(this.windowsOptions);
    }

    private PodSecurityContextArgs() {}

    private PodSecurityContextArgs(PodSecurityContextArgs $) {
        this.appArmorProfile = $.appArmorProfile;
        this.fsGroup = $.fsGroup;
        this.fsGroupChangePolicy = $.fsGroupChangePolicy;
        this.runAsGroup = $.runAsGroup;
        this.runAsNonRoot = $.runAsNonRoot;
        this.runAsUser = $.runAsUser;
        this.seLinuxOptions = $.seLinuxOptions;
        this.seccompProfile = $.seccompProfile;
        this.supplementalGroups = $.supplementalGroups;
        this.sysctls = $.sysctls;
        this.windowsOptions = $.windowsOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodSecurityContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodSecurityContextArgs $;

        public Builder() {
            $ = new PodSecurityContextArgs();
        }

        public Builder(PodSecurityContextArgs defaults) {
            $ = new PodSecurityContextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appArmorProfile appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder appArmorProfile(@Nullable Output<AppArmorProfileArgs> appArmorProfile) {
            $.appArmorProfile = appArmorProfile;
            return this;
        }

        /**
         * @param appArmorProfile appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder appArmorProfile(AppArmorProfileArgs appArmorProfile) {
            return appArmorProfile(Output.of(appArmorProfile));
        }

        /**
         * @param fsGroup A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
         * 
         * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw----
         * 
         * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder fsGroup(@Nullable Output<Integer> fsGroup) {
            $.fsGroup = fsGroup;
            return this;
        }

        /**
         * @param fsGroup A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
         * 
         * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw----
         * 
         * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder fsGroup(Integer fsGroup) {
            return fsGroup(Output.of(fsGroup));
        }

        /**
         * @param fsGroupChangePolicy fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are &#34;OnRootMismatch&#34; and &#34;Always&#34;. If not specified, &#34;Always&#34; is used. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder fsGroupChangePolicy(@Nullable Output<String> fsGroupChangePolicy) {
            $.fsGroupChangePolicy = fsGroupChangePolicy;
            return this;
        }

        /**
         * @param fsGroupChangePolicy fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are &#34;OnRootMismatch&#34; and &#34;Always&#34;. If not specified, &#34;Always&#34; is used. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder fsGroupChangePolicy(String fsGroupChangePolicy) {
            return fsGroupChangePolicy(Output.of(fsGroupChangePolicy));
        }

        /**
         * @param runAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(@Nullable Output<Integer> runAsGroup) {
            $.runAsGroup = runAsGroup;
            return this;
        }

        /**
         * @param runAsGroup The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(Integer runAsGroup) {
            return runAsGroup(Output.of(runAsGroup));
        }

        /**
         * @param runAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder runAsNonRoot(@Nullable Output<Boolean> runAsNonRoot) {
            $.runAsNonRoot = runAsNonRoot;
            return this;
        }

        /**
         * @param runAsNonRoot Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder runAsNonRoot(Boolean runAsNonRoot) {
            return runAsNonRoot(Output.of(runAsNonRoot));
        }

        /**
         * @param runAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        /**
         * @param runAsUser The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(Integer runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        /**
         * @param seLinuxOptions The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder seLinuxOptions(@Nullable Output<SELinuxOptionsArgs> seLinuxOptions) {
            $.seLinuxOptions = seLinuxOptions;
            return this;
        }

        /**
         * @param seLinuxOptions The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder seLinuxOptions(SELinuxOptionsArgs seLinuxOptions) {
            return seLinuxOptions(Output.of(seLinuxOptions));
        }

        /**
         * @param seccompProfile The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder seccompProfile(@Nullable Output<SeccompProfileArgs> seccompProfile) {
            $.seccompProfile = seccompProfile;
            return this;
        }

        /**
         * @param seccompProfile The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder seccompProfile(SeccompProfileArgs seccompProfile) {
            return seccompProfile(Output.of(seccompProfile));
        }

        /**
         * @param supplementalGroups A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder supplementalGroups(@Nullable Output<List<Integer>> supplementalGroups) {
            $.supplementalGroups = supplementalGroups;
            return this;
        }

        /**
         * @param supplementalGroups A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder supplementalGroups(List<Integer> supplementalGroups) {
            return supplementalGroups(Output.of(supplementalGroups));
        }

        /**
         * @param supplementalGroups A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder supplementalGroups(Integer... supplementalGroups) {
            return supplementalGroups(List.of(supplementalGroups));
        }

        /**
         * @param sysctls Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(@Nullable Output<List<SysctlArgs>> sysctls) {
            $.sysctls = sysctls;
            return this;
        }

        /**
         * @param sysctls Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(List<SysctlArgs> sysctls) {
            return sysctls(Output.of(sysctls));
        }

        /**
         * @param sysctls Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(SysctlArgs... sysctls) {
            return sysctls(List.of(sysctls));
        }

        /**
         * @param windowsOptions The Windows specific settings applied to all containers. If unspecified, the options within a container&#39;s SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         * 
         * @return builder
         * 
         */
        public Builder windowsOptions(@Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions) {
            $.windowsOptions = windowsOptions;
            return this;
        }

        /**
         * @param windowsOptions The Windows specific settings applied to all containers. If unspecified, the options within a container&#39;s SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         * 
         * @return builder
         * 
         */
        public Builder windowsOptions(WindowsSecurityContextOptionsArgs windowsOptions) {
            return windowsOptions(Output.of(windowsOptions));
        }

        public PodSecurityContextArgs build() {
            return $;
        }
    }

}
