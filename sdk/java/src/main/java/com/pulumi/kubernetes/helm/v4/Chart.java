// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.helm.v4;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.Utilities;
import com.pulumi.kubernetes.helm.v4.ChartArgs;
import java.lang.Object;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Chart is a component representing a collection of resources described by an arbitrary Helm Chart.
 * 
 * The Helm Chart can be fetched from any source that is accessible to the `helm` command line. Values in the `values.yml` file can be overridden using `ChartOpts.values` (equivalent to `--set` or having multiple `values.yml` files). Objects can be transformed arbitrarily by supplying callbacks to `ChartOpts.transformations`.
 * 
 * The `Chart` resource renders the templates from your chart and then manage them directly with the Pulumi Kubernetes provider.
 * 
 * `Chart` does not use Tiller. The Chart specified is copied and expanded locally; the semantics are equivalent to running `helm template` and then using Pulumi to manage the resulting YAML manifests. Any values that would be retrieved in-cluster are assigned fake values, and none of Tiller&#39;s server-side validity testing is executed.
 * 
 * You may also want to consider the `Release` resource as an alternative method for managing helm charts. For more information about the trade-offs between these options see: [Choosing the right Helm resource for your use case](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/choosing-the-right-helm-resource-for-your-use-case)
 * 
 * ## Example Usage
 * 
 */
@ResourceType(type="kubernetes:helm.sh/v4:Chart")
public class Chart extends com.pulumi.resources.ComponentResource {
    /**
     * Resources created by the Chart.
     * 
     */
    @Export(name="resources", refs={List.class,Object.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Object>> resources;

    /**
     * @return Resources created by the Chart.
     * 
     */
    public Output<Optional<List<Object>>> resources() {
        return Codegen.optional(this.resources);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Chart(String name) {
        this(name, ChartArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Chart(String name, ChartArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Chart(String name, ChartArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes:helm.sh/v4:Chart", name, args == null ? ChartArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
