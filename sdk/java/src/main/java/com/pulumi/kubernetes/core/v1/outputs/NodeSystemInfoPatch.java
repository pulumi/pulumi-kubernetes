// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodeSystemInfoPatch {
    /**
     * @return The Architecture reported by the node
     * 
     */
    private @Nullable String architecture;
    /**
     * @return Boot ID reported by the node.
     * 
     */
    private @Nullable String bootID;
    /**
     * @return ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     * 
     */
    private @Nullable String containerRuntimeVersion;
    /**
     * @return Kernel Version reported by the node from &#39;uname -r&#39; (e.g. 3.16.0-0.bpo.4-amd64).
     * 
     */
    private @Nullable String kernelVersion;
    /**
     * @return KubeProxy Version reported by the node.
     * 
     */
    private @Nullable String kubeProxyVersion;
    /**
     * @return Kubelet Version reported by the node.
     * 
     */
    private @Nullable String kubeletVersion;
    /**
     * @return MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
     * 
     */
    private @Nullable String machineID;
    /**
     * @return The Operating System reported by the node
     * 
     */
    private @Nullable String operatingSystem;
    /**
     * @return OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     * 
     */
    private @Nullable String osImage;
    /**
     * @return SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
     * 
     */
    private @Nullable String systemUUID;

    private NodeSystemInfoPatch() {}
    /**
     * @return The Architecture reported by the node
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return Boot ID reported by the node.
     * 
     */
    public Optional<String> bootID() {
        return Optional.ofNullable(this.bootID);
    }
    /**
     * @return ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     * 
     */
    public Optional<String> containerRuntimeVersion() {
        return Optional.ofNullable(this.containerRuntimeVersion);
    }
    /**
     * @return Kernel Version reported by the node from &#39;uname -r&#39; (e.g. 3.16.0-0.bpo.4-amd64).
     * 
     */
    public Optional<String> kernelVersion() {
        return Optional.ofNullable(this.kernelVersion);
    }
    /**
     * @return KubeProxy Version reported by the node.
     * 
     */
    public Optional<String> kubeProxyVersion() {
        return Optional.ofNullable(this.kubeProxyVersion);
    }
    /**
     * @return Kubelet Version reported by the node.
     * 
     */
    public Optional<String> kubeletVersion() {
        return Optional.ofNullable(this.kubeletVersion);
    }
    /**
     * @return MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
     * 
     */
    public Optional<String> machineID() {
        return Optional.ofNullable(this.machineID);
    }
    /**
     * @return The Operating System reported by the node
     * 
     */
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    /**
     * @return OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     * 
     */
    public Optional<String> osImage() {
        return Optional.ofNullable(this.osImage);
    }
    /**
     * @return SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
     * 
     */
    public Optional<String> systemUUID() {
        return Optional.ofNullable(this.systemUUID);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeSystemInfoPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable String bootID;
        private @Nullable String containerRuntimeVersion;
        private @Nullable String kernelVersion;
        private @Nullable String kubeProxyVersion;
        private @Nullable String kubeletVersion;
        private @Nullable String machineID;
        private @Nullable String operatingSystem;
        private @Nullable String osImage;
        private @Nullable String systemUUID;
        public Builder() {}
        public Builder(NodeSystemInfoPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.bootID = defaults.bootID;
    	      this.containerRuntimeVersion = defaults.containerRuntimeVersion;
    	      this.kernelVersion = defaults.kernelVersion;
    	      this.kubeProxyVersion = defaults.kubeProxyVersion;
    	      this.kubeletVersion = defaults.kubeletVersion;
    	      this.machineID = defaults.machineID;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.osImage = defaults.osImage;
    	      this.systemUUID = defaults.systemUUID;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder bootID(@Nullable String bootID) {
            this.bootID = bootID;
            return this;
        }
        @CustomType.Setter
        public Builder containerRuntimeVersion(@Nullable String containerRuntimeVersion) {
            this.containerRuntimeVersion = containerRuntimeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder kernelVersion(@Nullable String kernelVersion) {
            this.kernelVersion = kernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder kubeProxyVersion(@Nullable String kubeProxyVersion) {
            this.kubeProxyVersion = kubeProxyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder kubeletVersion(@Nullable String kubeletVersion) {
            this.kubeletVersion = kubeletVersion;
            return this;
        }
        @CustomType.Setter
        public Builder machineID(@Nullable String machineID) {
            this.machineID = machineID;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder osImage(@Nullable String osImage) {
            this.osImage = osImage;
            return this;
        }
        @CustomType.Setter
        public Builder systemUUID(@Nullable String systemUUID) {
            this.systemUUID = systemUUID;
            return this;
        }
        public NodeSystemInfoPatch build() {
            final var o = new NodeSystemInfoPatch();
            o.architecture = architecture;
            o.bootID = bootID;
            o.containerRuntimeVersion = containerRuntimeVersion;
            o.kernelVersion = kernelVersion;
            o.kubeProxyVersion = kubeProxyVersion;
            o.kubeletVersion = kubeletVersion;
            o.machineID = machineID;
            o.operatingSystem = operatingSystem;
            o.osImage = osImage;
            o.systemUUID = systemUUID;
            return o;
        }
    }
}
