// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.ContainerStateRunningArgs;
import com.pulumi.kubernetes.core.v1.inputs.ContainerStateTerminatedArgs;
import com.pulumi.kubernetes.core.v1.inputs.ContainerStateWaitingArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
 * 
 */
public final class ContainerStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerStateArgs Empty = new ContainerStateArgs();

    /**
     * Details about a running container
     * 
     */
    @Import(name="running")
    private @Nullable Output<ContainerStateRunningArgs> running;

    /**
     * @return Details about a running container
     * 
     */
    public Optional<Output<ContainerStateRunningArgs>> running() {
        return Optional.ofNullable(this.running);
    }

    /**
     * Details about a terminated container
     * 
     */
    @Import(name="terminated")
    private @Nullable Output<ContainerStateTerminatedArgs> terminated;

    /**
     * @return Details about a terminated container
     * 
     */
    public Optional<Output<ContainerStateTerminatedArgs>> terminated() {
        return Optional.ofNullable(this.terminated);
    }

    /**
     * Details about a waiting container
     * 
     */
    @Import(name="waiting")
    private @Nullable Output<ContainerStateWaitingArgs> waiting;

    /**
     * @return Details about a waiting container
     * 
     */
    public Optional<Output<ContainerStateWaitingArgs>> waiting() {
        return Optional.ofNullable(this.waiting);
    }

    private ContainerStateArgs() {}

    private ContainerStateArgs(ContainerStateArgs $) {
        this.running = $.running;
        this.terminated = $.terminated;
        this.waiting = $.waiting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerStateArgs $;

        public Builder() {
            $ = new ContainerStateArgs();
        }

        public Builder(ContainerStateArgs defaults) {
            $ = new ContainerStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param running Details about a running container
         * 
         * @return builder
         * 
         */
        public Builder running(@Nullable Output<ContainerStateRunningArgs> running) {
            $.running = running;
            return this;
        }

        /**
         * @param running Details about a running container
         * 
         * @return builder
         * 
         */
        public Builder running(ContainerStateRunningArgs running) {
            return running(Output.of(running));
        }

        /**
         * @param terminated Details about a terminated container
         * 
         * @return builder
         * 
         */
        public Builder terminated(@Nullable Output<ContainerStateTerminatedArgs> terminated) {
            $.terminated = terminated;
            return this;
        }

        /**
         * @param terminated Details about a terminated container
         * 
         * @return builder
         * 
         */
        public Builder terminated(ContainerStateTerminatedArgs terminated) {
            return terminated(Output.of(terminated));
        }

        /**
         * @param waiting Details about a waiting container
         * 
         * @return builder
         * 
         */
        public Builder waiting(@Nullable Output<ContainerStateWaitingArgs> waiting) {
            $.waiting = waiting;
            return this;
        }

        /**
         * @param waiting Details about a waiting container
         * 
         * @return builder
         * 
         */
        public Builder waiting(ContainerStateWaitingArgs waiting) {
            return waiting(Output.of(waiting));
        }

        public ContainerStateArgs build() {
            return $;
        }
    }

}
