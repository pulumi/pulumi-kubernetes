// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.ContainerStatePatch;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerStatusPatch {
    /**
     * @return Container&#39;s ID in the format &#39;&lt;type&gt;://&lt;container_id&gt;&#39;.
     * 
     */
    private @Nullable String containerID;
    /**
     * @return The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
     * 
     */
    private @Nullable String image;
    /**
     * @return ImageID of the container&#39;s image.
     * 
     */
    private @Nullable String imageID;
    /**
     * @return Details about the container&#39;s last termination condition.
     * 
     */
    private @Nullable ContainerStatePatch lastState;
    /**
     * @return This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
     * 
     */
    private @Nullable String name;
    /**
     * @return Specifies whether the container has passed its readiness probe.
     * 
     */
    private @Nullable Boolean ready;
    /**
     * @return The number of times the container has been restarted.
     * 
     */
    private @Nullable Integer restartCount;
    /**
     * @return Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
     * 
     */
    private @Nullable Boolean started;
    /**
     * @return Details about the container&#39;s current condition.
     * 
     */
    private @Nullable ContainerStatePatch state;

    private ContainerStatusPatch() {}
    /**
     * @return Container&#39;s ID in the format &#39;&lt;type&gt;://&lt;container_id&gt;&#39;.
     * 
     */
    public Optional<String> containerID() {
        return Optional.ofNullable(this.containerID);
    }
    /**
     * @return The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return ImageID of the container&#39;s image.
     * 
     */
    public Optional<String> imageID() {
        return Optional.ofNullable(this.imageID);
    }
    /**
     * @return Details about the container&#39;s last termination condition.
     * 
     */
    public Optional<ContainerStatePatch> lastState() {
        return Optional.ofNullable(this.lastState);
    }
    /**
     * @return This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Specifies whether the container has passed its readiness probe.
     * 
     */
    public Optional<Boolean> ready() {
        return Optional.ofNullable(this.ready);
    }
    /**
     * @return The number of times the container has been restarted.
     * 
     */
    public Optional<Integer> restartCount() {
        return Optional.ofNullable(this.restartCount);
    }
    /**
     * @return Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
     * 
     */
    public Optional<Boolean> started() {
        return Optional.ofNullable(this.started);
    }
    /**
     * @return Details about the container&#39;s current condition.
     * 
     */
    public Optional<ContainerStatePatch> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerStatusPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String containerID;
        private @Nullable String image;
        private @Nullable String imageID;
        private @Nullable ContainerStatePatch lastState;
        private @Nullable String name;
        private @Nullable Boolean ready;
        private @Nullable Integer restartCount;
        private @Nullable Boolean started;
        private @Nullable ContainerStatePatch state;
        public Builder() {}
        public Builder(ContainerStatusPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerID = defaults.containerID;
    	      this.image = defaults.image;
    	      this.imageID = defaults.imageID;
    	      this.lastState = defaults.lastState;
    	      this.name = defaults.name;
    	      this.ready = defaults.ready;
    	      this.restartCount = defaults.restartCount;
    	      this.started = defaults.started;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder containerID(@Nullable String containerID) {
            this.containerID = containerID;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imageID(@Nullable String imageID) {
            this.imageID = imageID;
            return this;
        }
        @CustomType.Setter
        public Builder lastState(@Nullable ContainerStatePatch lastState) {
            this.lastState = lastState;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ready(@Nullable Boolean ready) {
            this.ready = ready;
            return this;
        }
        @CustomType.Setter
        public Builder restartCount(@Nullable Integer restartCount) {
            this.restartCount = restartCount;
            return this;
        }
        @CustomType.Setter
        public Builder started(@Nullable Boolean started) {
            this.started = started;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable ContainerStatePatch state) {
            this.state = state;
            return this;
        }
        public ContainerStatusPatch build() {
            final var o = new ContainerStatusPatch();
            o.containerID = containerID;
            o.image = image;
            o.imageID = imageID;
            o.lastState = lastState;
            o.name = name;
            o.ready = ready;
            o.restartCount = restartCount;
            o.started = started;
            o.state = state;
            return o;
        }
    }
}
