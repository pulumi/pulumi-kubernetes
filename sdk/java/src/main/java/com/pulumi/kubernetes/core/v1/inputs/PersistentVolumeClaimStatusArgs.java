// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.PersistentVolumeClaimConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 * 
 */
public final class PersistentVolumeClaimStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final PersistentVolumeClaimStatusArgs Empty = new PersistentVolumeClaimStatusArgs();

    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * 
     */
    @Import(name="accessModes")
    private @Nullable Output<List<String>> accessModes;

    /**
     * @return accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * 
     */
    public Optional<Output<List<String>>> accessModes() {
        return Optional.ofNullable(this.accessModes);
    }

    /**
     * allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * 
     */
    @Import(name="allocatedResources")
    private @Nullable Output<Map<String,String>> allocatedResources;

    /**
     * @return allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * 
     */
    public Optional<Output<Map<String,String>>> allocatedResources() {
        return Optional.ofNullable(this.allocatedResources);
    }

    /**
     * capacity represents the actual resources of the underlying volume.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Map<String,String>> capacity;

    /**
     * @return capacity represents the actual resources of the underlying volume.
     * 
     */
    public Optional<Output<Map<String,String>>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<PersistentVolumeClaimConditionArgs>> conditions;

    /**
     * @return conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
     * 
     */
    public Optional<Output<List<PersistentVolumeClaimConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * phase represents the current phase of PersistentVolumeClaim.
     * 
     */
    @Import(name="phase")
    private @Nullable Output<String> phase;

    /**
     * @return phase represents the current phase of PersistentVolumeClaim.
     * 
     */
    public Optional<Output<String>> phase() {
        return Optional.ofNullable(this.phase);
    }

    /**
     * resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * 
     */
    @Import(name="resizeStatus")
    private @Nullable Output<String> resizeStatus;

    /**
     * @return resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * 
     */
    public Optional<Output<String>> resizeStatus() {
        return Optional.ofNullable(this.resizeStatus);
    }

    private PersistentVolumeClaimStatusArgs() {}

    private PersistentVolumeClaimStatusArgs(PersistentVolumeClaimStatusArgs $) {
        this.accessModes = $.accessModes;
        this.allocatedResources = $.allocatedResources;
        this.capacity = $.capacity;
        this.conditions = $.conditions;
        this.phase = $.phase;
        this.resizeStatus = $.resizeStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PersistentVolumeClaimStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PersistentVolumeClaimStatusArgs $;

        public Builder() {
            $ = new PersistentVolumeClaimStatusArgs();
        }

        public Builder(PersistentVolumeClaimStatusArgs defaults) {
            $ = new PersistentVolumeClaimStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessModes accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
         * 
         * @return builder
         * 
         */
        public Builder accessModes(@Nullable Output<List<String>> accessModes) {
            $.accessModes = accessModes;
            return this;
        }

        /**
         * @param accessModes accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
         * 
         * @return builder
         * 
         */
        public Builder accessModes(List<String> accessModes) {
            return accessModes(Output.of(accessModes));
        }

        /**
         * @param accessModes accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
         * 
         * @return builder
         * 
         */
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }

        /**
         * @param allocatedResources allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         * 
         * @return builder
         * 
         */
        public Builder allocatedResources(@Nullable Output<Map<String,String>> allocatedResources) {
            $.allocatedResources = allocatedResources;
            return this;
        }

        /**
         * @param allocatedResources allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         * 
         * @return builder
         * 
         */
        public Builder allocatedResources(Map<String,String> allocatedResources) {
            return allocatedResources(Output.of(allocatedResources));
        }

        /**
         * @param capacity capacity represents the actual resources of the underlying volume.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Map<String,String>> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity capacity represents the actual resources of the underlying volume.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Map<String,String> capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param conditions conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<PersistentVolumeClaimConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<PersistentVolumeClaimConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
         * 
         * @return builder
         * 
         */
        public Builder conditions(PersistentVolumeClaimConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param phase phase represents the current phase of PersistentVolumeClaim.
         * 
         * @return builder
         * 
         */
        public Builder phase(@Nullable Output<String> phase) {
            $.phase = phase;
            return this;
        }

        /**
         * @param phase phase represents the current phase of PersistentVolumeClaim.
         * 
         * @return builder
         * 
         */
        public Builder phase(String phase) {
            return phase(Output.of(phase));
        }

        /**
         * @param resizeStatus resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         * 
         * @return builder
         * 
         */
        public Builder resizeStatus(@Nullable Output<String> resizeStatus) {
            $.resizeStatus = resizeStatus;
            return this;
        }

        /**
         * @param resizeStatus resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         * 
         * @return builder
         * 
         */
        public Builder resizeStatus(String resizeStatus) {
            return resizeStatus(Output.of(resizeStatus));
        }

        public PersistentVolumeClaimStatusArgs build() {
            return $;
        }
    }

}
