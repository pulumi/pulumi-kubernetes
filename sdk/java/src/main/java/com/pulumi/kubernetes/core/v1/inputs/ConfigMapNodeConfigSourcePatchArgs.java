// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
 * 
 */
public final class ConfigMapNodeConfigSourcePatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigMapNodeConfigSourcePatchArgs Empty = new ConfigMapNodeConfigSourcePatchArgs();

    /**
     * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     * 
     */
    @Import(name="kubeletConfigKey")
    private @Nullable Output<String> kubeletConfigKey;

    /**
     * @return KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     * 
     */
    public Optional<Output<String>> kubeletConfigKey() {
        return Optional.ofNullable(this.kubeletConfigKey);
    }

    /**
     * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     * 
     */
    @Import(name="resourceVersion")
    private @Nullable Output<String> resourceVersion;

    /**
     * @return ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     * 
     */
    public Optional<Output<String>> resourceVersion() {
        return Optional.ofNullable(this.resourceVersion);
    }

    /**
     * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private ConfigMapNodeConfigSourcePatchArgs() {}

    private ConfigMapNodeConfigSourcePatchArgs(ConfigMapNodeConfigSourcePatchArgs $) {
        this.kubeletConfigKey = $.kubeletConfigKey;
        this.name = $.name;
        this.namespace = $.namespace;
        this.resourceVersion = $.resourceVersion;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigMapNodeConfigSourcePatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigMapNodeConfigSourcePatchArgs $;

        public Builder() {
            $ = new ConfigMapNodeConfigSourcePatchArgs();
        }

        public Builder(ConfigMapNodeConfigSourcePatchArgs defaults) {
            $ = new ConfigMapNodeConfigSourcePatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kubeletConfigKey KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfigKey(@Nullable Output<String> kubeletConfigKey) {
            $.kubeletConfigKey = kubeletConfigKey;
            return this;
        }

        /**
         * @param kubeletConfigKey KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfigKey(String kubeletConfigKey) {
            return kubeletConfigKey(Output.of(kubeletConfigKey));
        }

        /**
         * @param name Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceVersion ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(@Nullable Output<String> resourceVersion) {
            $.resourceVersion = resourceVersion;
            return this;
        }

        /**
         * @param resourceVersion ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(String resourceVersion) {
            return resourceVersion(Output.of(resourceVersion));
        }

        /**
         * @param uid UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public ConfigMapNodeConfigSourcePatchArgs build() {
            return $;
        }
    }

}
