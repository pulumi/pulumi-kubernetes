// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta2.inputs.CounterArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.
 * 
 */
public final class DeviceCounterConsumptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceCounterConsumptionArgs Empty = new DeviceCounterConsumptionArgs();

    /**
     * CounterSet is the name of the set from which the counters defined will be consumed.
     * 
     */
    @Import(name="counterSet", required=true)
    private Output<String> counterSet;

    /**
     * @return CounterSet is the name of the set from which the counters defined will be consumed.
     * 
     */
    public Output<String> counterSet() {
        return this.counterSet;
    }

    /**
     * Counters defines the counters that will be consumed by the device.
     * 
     * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    @Import(name="counters", required=true)
    private Output<Map<String,CounterArgs>> counters;

    /**
     * @return Counters defines the counters that will be consumed by the device.
     * 
     * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    public Output<Map<String,CounterArgs>> counters() {
        return this.counters;
    }

    private DeviceCounterConsumptionArgs() {}

    private DeviceCounterConsumptionArgs(DeviceCounterConsumptionArgs $) {
        this.counterSet = $.counterSet;
        this.counters = $.counters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceCounterConsumptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceCounterConsumptionArgs $;

        public Builder() {
            $ = new DeviceCounterConsumptionArgs();
        }

        public Builder(DeviceCounterConsumptionArgs defaults) {
            $ = new DeviceCounterConsumptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counterSet CounterSet is the name of the set from which the counters defined will be consumed.
         * 
         * @return builder
         * 
         */
        public Builder counterSet(Output<String> counterSet) {
            $.counterSet = counterSet;
            return this;
        }

        /**
         * @param counterSet CounterSet is the name of the set from which the counters defined will be consumed.
         * 
         * @return builder
         * 
         */
        public Builder counterSet(String counterSet) {
            return counterSet(Output.of(counterSet));
        }

        /**
         * @param counters Counters defines the counters that will be consumed by the device.
         * 
         * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
         * 
         * @return builder
         * 
         */
        public Builder counters(Output<Map<String,CounterArgs>> counters) {
            $.counters = counters;
            return this;
        }

        /**
         * @param counters Counters defines the counters that will be consumed by the device.
         * 
         * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
         * 
         * @return builder
         * 
         */
        public Builder counters(Map<String,CounterArgs> counters) {
            return counters(Output.of(counters));
        }

        public DeviceCounterConsumptionArgs build() {
            if ($.counterSet == null) {
                throw new MissingRequiredPropertyException("DeviceCounterConsumptionArgs", "counterSet");
            }
            if ($.counters == null) {
                throw new MissingRequiredPropertyException("DeviceCounterConsumptionArgs", "counters");
            }
            return $;
        }
    }

}
