// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta2.inputs.DeviceSubRequestArgs;
import com.pulumi.kubernetes.resource.v1beta2.inputs.ExactDeviceRequestArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices. With FirstAvailable it is also possible to provide a prioritized list of requests.
 * 
 */
public final class DeviceRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceRequestArgs Empty = new DeviceRequestArgs();

    /**
     * Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
     * 
     * One of Exactly or FirstAvailable must be set.
     * 
     */
    @Import(name="exactly")
    private @Nullable Output<ExactDeviceRequestArgs> exactly;

    /**
     * @return Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
     * 
     * One of Exactly or FirstAvailable must be set.
     * 
     */
    public Optional<Output<ExactDeviceRequestArgs>> exactly() {
        return Optional.ofNullable(this.exactly);
    }

    /**
     * FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    @Import(name="firstAvailable")
    private @Nullable Output<List<DeviceSubRequestArgs>> firstAvailable;

    /**
     * @return FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    public Optional<Output<List<DeviceSubRequestArgs>>> firstAvailable() {
        return Optional.ofNullable(this.firstAvailable);
    }

    /**
     * Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
     * 
     * Must be a DNS label.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
     * 
     * Must be a DNS label.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DeviceRequestArgs() {}

    private DeviceRequestArgs(DeviceRequestArgs $) {
        this.exactly = $.exactly;
        this.firstAvailable = $.firstAvailable;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceRequestArgs $;

        public Builder() {
            $ = new DeviceRequestArgs();
        }

        public Builder(DeviceRequestArgs defaults) {
            $ = new DeviceRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exactly Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
         * 
         * One of Exactly or FirstAvailable must be set.
         * 
         * @return builder
         * 
         */
        public Builder exactly(@Nullable Output<ExactDeviceRequestArgs> exactly) {
            $.exactly = exactly;
            return this;
        }

        /**
         * @param exactly Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
         * 
         * One of Exactly or FirstAvailable must be set.
         * 
         * @return builder
         * 
         */
        public Builder exactly(ExactDeviceRequestArgs exactly) {
            return exactly(Output.of(exactly));
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(@Nullable Output<List<DeviceSubRequestArgs>> firstAvailable) {
            $.firstAvailable = firstAvailable;
            return this;
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(List<DeviceSubRequestArgs> firstAvailable) {
            return firstAvailable(Output.of(firstAvailable));
        }

        /**
         * @param firstAvailable FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
         * 
         * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailable(DeviceSubRequestArgs... firstAvailable) {
            return firstAvailable(List.of(firstAvailable));
        }

        /**
         * @param name Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
         * 
         * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
         * 
         * Must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
         * 
         * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
         * 
         * Must be a DNS label.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DeviceRequestArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DeviceRequestArgs", "name");
            }
            return $;
        }
    }

}
