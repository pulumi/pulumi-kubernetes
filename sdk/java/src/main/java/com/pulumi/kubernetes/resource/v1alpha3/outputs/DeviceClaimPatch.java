// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceClaimConfigurationPatch;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceConstraintPatch;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceRequestPatch;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DeviceClaimPatch {
    /**
     * @return This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
     * 
     */
    private @Nullable List<DeviceClaimConfigurationPatch> config;
    /**
     * @return These constraints must be satisfied by the set of devices that get allocated for the claim.
     * 
     */
    private @Nullable List<DeviceConstraintPatch> constraints;
    /**
     * @return Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
     * 
     */
    private @Nullable List<DeviceRequestPatch> requests;

    private DeviceClaimPatch() {}
    /**
     * @return This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
     * 
     */
    public List<DeviceClaimConfigurationPatch> config() {
        return this.config == null ? List.of() : this.config;
    }
    /**
     * @return These constraints must be satisfied by the set of devices that get allocated for the claim.
     * 
     */
    public List<DeviceConstraintPatch> constraints() {
        return this.constraints == null ? List.of() : this.constraints;
    }
    /**
     * @return Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
     * 
     */
    public List<DeviceRequestPatch> requests() {
        return this.requests == null ? List.of() : this.requests;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceClaimPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DeviceClaimConfigurationPatch> config;
        private @Nullable List<DeviceConstraintPatch> constraints;
        private @Nullable List<DeviceRequestPatch> requests;
        public Builder() {}
        public Builder(DeviceClaimPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.constraints = defaults.constraints;
    	      this.requests = defaults.requests;
        }

        @CustomType.Setter
        public Builder config(@Nullable List<DeviceClaimConfigurationPatch> config) {

            this.config = config;
            return this;
        }
        public Builder config(DeviceClaimConfigurationPatch... config) {
            return config(List.of(config));
        }
        @CustomType.Setter
        public Builder constraints(@Nullable List<DeviceConstraintPatch> constraints) {

            this.constraints = constraints;
            return this;
        }
        public Builder constraints(DeviceConstraintPatch... constraints) {
            return constraints(List.of(constraints));
        }
        @CustomType.Setter
        public Builder requests(@Nullable List<DeviceRequestPatch> requests) {

            this.requests = requests;
            return this;
        }
        public Builder requests(DeviceRequestPatch... requests) {
            return requests(List.of(requests));
        }
        public DeviceClaimPatch build() {
            final var _resultValue = new DeviceClaimPatch();
            _resultValue.config = config;
            _resultValue.constraints = constraints;
            _resultValue.requests = requests;
            return _resultValue;
        }
    }
}
