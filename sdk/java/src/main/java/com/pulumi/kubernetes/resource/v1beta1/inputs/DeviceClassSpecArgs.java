// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1beta1.inputs.DeviceClassConfigurationArgs;
import com.pulumi.kubernetes.resource.v1beta1.inputs.DeviceSelectorArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
 * 
 */
public final class DeviceClassSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceClassSpecArgs Empty = new DeviceClassSpecArgs();

    /**
     * Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
     * 
     * They are passed to the driver, but are not considered while allocating the claim.
     * 
     */
    @Import(name="config")
    private @Nullable Output<List<DeviceClassConfigurationArgs>> config;

    /**
     * @return Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
     * 
     * They are passed to the driver, but are not considered while allocating the claim.
     * 
     */
    public Optional<Output<List<DeviceClassConfigurationArgs>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Each selector must be satisfied by a device which is claimed via this class.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<DeviceSelectorArgs>> selectors;

    /**
     * @return Each selector must be satisfied by a device which is claimed via this class.
     * 
     */
    public Optional<Output<List<DeviceSelectorArgs>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    private DeviceClassSpecArgs() {}

    private DeviceClassSpecArgs(DeviceClassSpecArgs $) {
        this.config = $.config;
        this.selectors = $.selectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceClassSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceClassSpecArgs $;

        public Builder() {
            $ = new DeviceClassSpecArgs();
        }

        public Builder(DeviceClassSpecArgs defaults) {
            $ = new DeviceClassSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
         * 
         * They are passed to the driver, but are not considered while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<List<DeviceClassConfigurationArgs>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
         * 
         * They are passed to the driver, but are not considered while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(List<DeviceClassConfigurationArgs> config) {
            return config(Output.of(config));
        }

        /**
         * @param config Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
         * 
         * They are passed to the driver, but are not considered while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(DeviceClassConfigurationArgs... config) {
            return config(List.of(config));
        }

        /**
         * @param selectors Each selector must be satisfied by a device which is claimed via this class.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<DeviceSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Each selector must be satisfied by a device which is claimed via this class.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<DeviceSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Each selector must be satisfied by a device which is claimed via this class.
         * 
         * @return builder
         * 
         */
        public Builder selectors(DeviceSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        public DeviceClassSpecArgs build() {
            return $;
        }
    }

}
