// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.MatchResourcesPatchArgs;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.ParamRefPatchArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
 * 
 */
public final class ValidatingAdmissionPolicyBindingSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValidatingAdmissionPolicyBindingSpecPatchArgs Empty = new ValidatingAdmissionPolicyBindingSpecPatchArgs();

    /**
     * MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy&#39;s matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
     * 
     */
    @Import(name="matchResources")
    private @Nullable Output<MatchResourcesPatchArgs> matchResources;

    /**
     * @return MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy&#39;s matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
     * 
     */
    public Optional<Output<MatchResourcesPatchArgs>> matchResources() {
        return Optional.ofNullable(this.matchResources);
    }

    /**
     * ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
     * 
     */
    @Import(name="paramRef")
    private @Nullable Output<ParamRefPatchArgs> paramRef;

    /**
     * @return ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
     * 
     */
    public Optional<Output<ParamRefPatchArgs>> paramRef() {
        return Optional.ofNullable(this.paramRef);
    }

    /**
     * PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    private ValidatingAdmissionPolicyBindingSpecPatchArgs() {}

    private ValidatingAdmissionPolicyBindingSpecPatchArgs(ValidatingAdmissionPolicyBindingSpecPatchArgs $) {
        this.matchResources = $.matchResources;
        this.paramRef = $.paramRef;
        this.policyName = $.policyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValidatingAdmissionPolicyBindingSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValidatingAdmissionPolicyBindingSpecPatchArgs $;

        public Builder() {
            $ = new ValidatingAdmissionPolicyBindingSpecPatchArgs();
        }

        public Builder(ValidatingAdmissionPolicyBindingSpecPatchArgs defaults) {
            $ = new ValidatingAdmissionPolicyBindingSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchResources MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy&#39;s matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
         * 
         * @return builder
         * 
         */
        public Builder matchResources(@Nullable Output<MatchResourcesPatchArgs> matchResources) {
            $.matchResources = matchResources;
            return this;
        }

        /**
         * @param matchResources MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy&#39;s matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
         * 
         * @return builder
         * 
         */
        public Builder matchResources(MatchResourcesPatchArgs matchResources) {
            return matchResources(Output.of(matchResources));
        }

        /**
         * @param paramRef ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
         * 
         * @return builder
         * 
         */
        public Builder paramRef(@Nullable Output<ParamRefPatchArgs> paramRef) {
            $.paramRef = paramRef;
            return this;
        }

        /**
         * @param paramRef ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
         * 
         * @return builder
         * 
         */
        public Builder paramRef(ParamRefPatchArgs paramRef) {
            return paramRef(Output.of(paramRef));
        }

        /**
         * @param policyName PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public ValidatingAdmissionPolicyBindingSpecPatchArgs build() {
            return $;
        }
    }

}
