// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.OpaqueDeviceConfigurationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceAllocationConfiguration gets embedded in an AllocationResult.
 * 
 */
public final class DeviceAllocationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceAllocationConfigurationArgs Empty = new DeviceAllocationConfigurationArgs();

    /**
     * Opaque provides driver-specific configuration parameters.
     * 
     */
    @Import(name="opaque")
    private @Nullable Output<OpaqueDeviceConfigurationArgs> opaque;

    /**
     * @return Opaque provides driver-specific configuration parameters.
     * 
     */
    public Optional<Output<OpaqueDeviceConfigurationArgs>> opaque() {
        return Optional.ofNullable(this.opaque);
    }

    /**
     * Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<String>> requests;

    /**
     * @return Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
     * 
     */
    public Optional<Output<List<String>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    /**
     * Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private DeviceAllocationConfigurationArgs() {}

    private DeviceAllocationConfigurationArgs(DeviceAllocationConfigurationArgs $) {
        this.opaque = $.opaque;
        this.requests = $.requests;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceAllocationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceAllocationConfigurationArgs $;

        public Builder() {
            $ = new DeviceAllocationConfigurationArgs();
        }

        public Builder(DeviceAllocationConfigurationArgs defaults) {
            $ = new DeviceAllocationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param opaque Opaque provides driver-specific configuration parameters.
         * 
         * @return builder
         * 
         */
        public Builder opaque(@Nullable Output<OpaqueDeviceConfigurationArgs> opaque) {
            $.opaque = opaque;
            return this;
        }

        /**
         * @param opaque Opaque provides driver-specific configuration parameters.
         * 
         * @return builder
         * 
         */
        public Builder opaque(OpaqueDeviceConfigurationArgs opaque) {
            return opaque(Output.of(opaque));
        }

        /**
         * @param requests Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<String>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<String> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
         * 
         * @return builder
         * 
         */
        public Builder requests(String... requests) {
            return requests(List.of(requests));
        }

        /**
         * @param source Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public DeviceAllocationConfigurationArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("DeviceAllocationConfigurationArgs", "source");
            }
            return $;
        }
    }

}
