// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.batch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
 * 
 */
public final class PodFailurePolicyOnPodConditionsPatternArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodFailurePolicyOnPodConditionsPatternArgs Empty = new PodFailurePolicyOnPodConditionsPatternArgs();

    /**
     * Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PodFailurePolicyOnPodConditionsPatternArgs() {}

    private PodFailurePolicyOnPodConditionsPatternArgs(PodFailurePolicyOnPodConditionsPatternArgs $) {
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodFailurePolicyOnPodConditionsPatternArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodFailurePolicyOnPodConditionsPatternArgs $;

        public Builder() {
            $ = new PodFailurePolicyOnPodConditionsPatternArgs();
        }

        public Builder(PodFailurePolicyOnPodConditionsPatternArgs defaults) {
            $ = new PodFailurePolicyOnPodConditionsPatternArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param status Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PodFailurePolicyOnPodConditionsPatternArgs build() {
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
