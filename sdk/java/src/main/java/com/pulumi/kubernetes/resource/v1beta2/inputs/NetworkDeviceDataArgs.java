// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.
 * 
 */
public final class NetworkDeviceDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkDeviceDataArgs Empty = new NetworkDeviceDataArgs();

    /**
     * HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
     * 
     * Must not be longer than 128 characters.
     * 
     */
    @Import(name="hardwareAddress")
    private @Nullable Output<String> hardwareAddress;

    /**
     * @return HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
     * 
     * Must not be longer than 128 characters.
     * 
     */
    public Optional<Output<String>> hardwareAddress() {
        return Optional.ofNullable(this.hardwareAddress);
    }

    /**
     * InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
     * 
     * Must not be longer than 256 characters.
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
     * 
     * Must not be longer than 256 characters.
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
     * 
     */
    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    /**
     * @return IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
     * 
     */
    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    private NetworkDeviceDataArgs() {}

    private NetworkDeviceDataArgs(NetworkDeviceDataArgs $) {
        this.hardwareAddress = $.hardwareAddress;
        this.interfaceName = $.interfaceName;
        this.ips = $.ips;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkDeviceDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkDeviceDataArgs $;

        public Builder() {
            $ = new NetworkDeviceDataArgs();
        }

        public Builder(NetworkDeviceDataArgs defaults) {
            $ = new NetworkDeviceDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hardwareAddress HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
         * 
         * Must not be longer than 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder hardwareAddress(@Nullable Output<String> hardwareAddress) {
            $.hardwareAddress = hardwareAddress;
            return this;
        }

        /**
         * @param hardwareAddress HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
         * 
         * Must not be longer than 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder hardwareAddress(String hardwareAddress) {
            return hardwareAddress(Output.of(hardwareAddress));
        }

        /**
         * @param interfaceName InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
         * 
         * Must not be longer than 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
         * 
         * Must not be longer than 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param ips IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
         * 
         * @return builder
         * 
         */
        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        public NetworkDeviceDataArgs build() {
            return $;
        }
    }

}
