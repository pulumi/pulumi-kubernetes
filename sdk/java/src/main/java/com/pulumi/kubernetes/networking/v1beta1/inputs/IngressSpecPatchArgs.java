// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.networking.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.networking.v1beta1.inputs.IngressBackendPatchArgs;
import com.pulumi.kubernetes.networking.v1beta1.inputs.IngressRulePatchArgs;
import com.pulumi.kubernetes.networking.v1beta1.inputs.IngressTLSPatchArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * IngressSpec describes the Ingress the user wishes to exist.
 * 
 */
public final class IngressSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressSpecPatchArgs Empty = new IngressSpecPatchArgs();

    /**
     * A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<IngressBackendPatchArgs> backend;

    /**
     * @return A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
     * 
     */
    public Optional<Output<IngressBackendPatchArgs>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
     * 
     */
    @Import(name="ingressClassName")
    private @Nullable Output<String> ingressClassName;

    /**
     * @return IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
     * 
     */
    public Optional<Output<String>> ingressClassName() {
        return Optional.ofNullable(this.ingressClassName);
    }

    /**
     * A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<IngressRulePatchArgs>> rules;

    /**
     * @return A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
     * 
     */
    public Optional<Output<List<IngressRulePatchArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<List<IngressTLSPatchArgs>> tls;

    /**
     * @return TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     * 
     */
    public Optional<Output<List<IngressTLSPatchArgs>>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private IngressSpecPatchArgs() {}

    private IngressSpecPatchArgs(IngressSpecPatchArgs $) {
        this.backend = $.backend;
        this.ingressClassName = $.ingressClassName;
        this.rules = $.rules;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressSpecPatchArgs $;

        public Builder() {
            $ = new IngressSpecPatchArgs();
        }

        public Builder(IngressSpecPatchArgs defaults) {
            $ = new IngressSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<IngressBackendPatchArgs> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
         * 
         * @return builder
         * 
         */
        public Builder backend(IngressBackendPatchArgs backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param ingressClassName IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
         * 
         * @return builder
         * 
         */
        public Builder ingressClassName(@Nullable Output<String> ingressClassName) {
            $.ingressClassName = ingressClassName;
            return this;
        }

        /**
         * @param ingressClassName IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
         * 
         * @return builder
         * 
         */
        public Builder ingressClassName(String ingressClassName) {
            return ingressClassName(Output.of(ingressClassName));
        }

        /**
         * @param rules A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<IngressRulePatchArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<IngressRulePatchArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
         * 
         * @return builder
         * 
         */
        public Builder rules(IngressRulePatchArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param tls TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<List<IngressTLSPatchArgs>> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
         * 
         * @return builder
         * 
         */
        public Builder tls(List<IngressTLSPatchArgs> tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param tls TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
         * 
         * @return builder
         * 
         */
        public Builder tls(IngressTLSPatchArgs... tls) {
            return tls(List.of(tls));
        }

        public IngressSpecPatchArgs build() {
            return $;
        }
    }

}
