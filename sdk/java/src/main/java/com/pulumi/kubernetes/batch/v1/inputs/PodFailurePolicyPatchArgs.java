// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.batch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.batch.v1.inputs.PodFailurePolicyRulePatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PodFailurePolicy describes how failed pods influence the backoffLimit.
 * 
 */
public final class PodFailurePolicyPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodFailurePolicyPatchArgs Empty = new PodFailurePolicyPatchArgs();

    /**
     * A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<PodFailurePolicyRulePatchArgs>> rules;

    /**
     * @return A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
     * 
     */
    public Optional<Output<List<PodFailurePolicyRulePatchArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private PodFailurePolicyPatchArgs() {}

    private PodFailurePolicyPatchArgs(PodFailurePolicyPatchArgs $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodFailurePolicyPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodFailurePolicyPatchArgs $;

        public Builder() {
            $ = new PodFailurePolicyPatchArgs();
        }

        public Builder(PodFailurePolicyPatchArgs defaults) {
            $ = new PodFailurePolicyPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<PodFailurePolicyRulePatchArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<PodFailurePolicyRulePatchArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(PodFailurePolicyRulePatchArgs... rules) {
            return rules(List.of(rules));
        }

        public PodFailurePolicyPatchArgs build() {
            return $;
        }
    }

}
