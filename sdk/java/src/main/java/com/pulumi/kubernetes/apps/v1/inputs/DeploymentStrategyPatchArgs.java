// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.apps.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.apps.v1.inputs.RollingUpdateDeploymentPatchArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeploymentStrategy describes how to replace existing pods with new ones.
 * 
 */
public final class DeploymentStrategyPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentStrategyPatchArgs Empty = new DeploymentStrategyPatchArgs();

    /**
     * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
     * 
     */
    @Import(name="rollingUpdate")
    private @Nullable Output<RollingUpdateDeploymentPatchArgs> rollingUpdate;

    /**
     * @return Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
     * 
     */
    public Optional<Output<RollingUpdateDeploymentPatchArgs>> rollingUpdate() {
        return Optional.ofNullable(this.rollingUpdate);
    }

    /**
     * Type of deployment. Can be &#34;Recreate&#34; or &#34;RollingUpdate&#34;. Default is RollingUpdate.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of deployment. Can be &#34;Recreate&#34; or &#34;RollingUpdate&#34;. Default is RollingUpdate.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DeploymentStrategyPatchArgs() {}

    private DeploymentStrategyPatchArgs(DeploymentStrategyPatchArgs $) {
        this.rollingUpdate = $.rollingUpdate;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentStrategyPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentStrategyPatchArgs $;

        public Builder() {
            $ = new DeploymentStrategyPatchArgs();
        }

        public Builder(DeploymentStrategyPatchArgs defaults) {
            $ = new DeploymentStrategyPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rollingUpdate Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
         * 
         * @return builder
         * 
         */
        public Builder rollingUpdate(@Nullable Output<RollingUpdateDeploymentPatchArgs> rollingUpdate) {
            $.rollingUpdate = rollingUpdate;
            return this;
        }

        /**
         * @param rollingUpdate Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
         * 
         * @return builder
         * 
         */
        public Builder rollingUpdate(RollingUpdateDeploymentPatchArgs rollingUpdate) {
            return rollingUpdate(Output.of(rollingUpdate));
        }

        /**
         * @param type Type of deployment. Can be &#34;Recreate&#34; or &#34;RollingUpdate&#34;. Default is RollingUpdate.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of deployment. Can be &#34;Recreate&#34; or &#34;RollingUpdate&#34;. Default is RollingUpdate.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DeploymentStrategyPatchArgs build() {
            return $;
        }
    }

}
