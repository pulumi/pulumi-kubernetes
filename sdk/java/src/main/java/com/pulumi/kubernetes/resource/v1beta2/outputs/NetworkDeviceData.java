// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkDeviceData {
    /**
     * @return HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
     * 
     * Must not be longer than 128 characters.
     * 
     */
    private @Nullable String hardwareAddress;
    /**
     * @return InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
     * 
     * Must not be longer than 256 characters.
     * 
     */
    private @Nullable String interfaceName;
    /**
     * @return IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
     * 
     */
    private @Nullable List<String> ips;

    private NetworkDeviceData() {}
    /**
     * @return HardwareAddress represents the hardware address (e.g. MAC Address) of the device&#39;s network interface.
     * 
     * Must not be longer than 128 characters.
     * 
     */
    public Optional<String> hardwareAddress() {
        return Optional.ofNullable(this.hardwareAddress);
    }
    /**
     * @return InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.
     * 
     * Must not be longer than 256 characters.
     * 
     */
    public Optional<String> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }
    /**
     * @return IPs lists the network addresses assigned to the device&#39;s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: &#34;192.0.2.5/24&#34; for IPv4 and &#34;2001:db8::5/64&#34; for IPv6.
     * 
     */
    public List<String> ips() {
        return this.ips == null ? List.of() : this.ips;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkDeviceData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hardwareAddress;
        private @Nullable String interfaceName;
        private @Nullable List<String> ips;
        public Builder() {}
        public Builder(NetworkDeviceData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hardwareAddress = defaults.hardwareAddress;
    	      this.interfaceName = defaults.interfaceName;
    	      this.ips = defaults.ips;
        }

        @CustomType.Setter
        public Builder hardwareAddress(@Nullable String hardwareAddress) {

            this.hardwareAddress = hardwareAddress;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(@Nullable String interfaceName) {

            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder ips(@Nullable List<String> ips) {

            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        public NetworkDeviceData build() {
            final var _resultValue = new NetworkDeviceData();
            _resultValue.hardwareAddress = hardwareAddress;
            _resultValue.interfaceName = interfaceName;
            _resultValue.ips = ips;
            return _resultValue;
        }
    }
}
