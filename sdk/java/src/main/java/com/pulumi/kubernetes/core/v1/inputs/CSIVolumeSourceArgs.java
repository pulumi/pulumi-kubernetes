// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.LocalObjectReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a source location of a volume to mount, managed by an external CSI driver
 * 
 */
public final class CSIVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CSIVolumeSourceArgs Empty = new CSIVolumeSourceArgs();

    /**
     * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
     * 
     */
    @Import(name="driver", required=true)
    private Output<String> driver;

    /**
     * @return driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
     * 
     */
    public Output<String> driver() {
        return this.driver;
    }

    /**
     * fsType to mount. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    /**
     * @return fsType to mount. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
     * 
     */
    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
     * 
     */
    @Import(name="nodePublishSecretRef")
    private @Nullable Output<LocalObjectReferenceArgs> nodePublishSecretRef;

    /**
     * @return nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
     * 
     */
    public Optional<Output<LocalObjectReferenceArgs>> nodePublishSecretRef() {
        return Optional.ofNullable(this.nodePublishSecretRef);
    }

    /**
     * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
     * 
     */
    @Import(name="volumeAttributes")
    private @Nullable Output<Map<String,String>> volumeAttributes;

    /**
     * @return volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
     * 
     */
    public Optional<Output<Map<String,String>>> volumeAttributes() {
        return Optional.ofNullable(this.volumeAttributes);
    }

    private CSIVolumeSourceArgs() {}

    private CSIVolumeSourceArgs(CSIVolumeSourceArgs $) {
        this.driver = $.driver;
        this.fsType = $.fsType;
        this.nodePublishSecretRef = $.nodePublishSecretRef;
        this.readOnly = $.readOnly;
        this.volumeAttributes = $.volumeAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CSIVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CSIVolumeSourceArgs $;

        public Builder() {
            $ = new CSIVolumeSourceArgs();
        }

        public Builder(CSIVolumeSourceArgs defaults) {
            $ = new CSIVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param driver driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder driver(Output<String> driver) {
            $.driver = driver;
            return this;
        }

        /**
         * @param driver driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder driver(String driver) {
            return driver(Output.of(driver));
        }

        /**
         * @param fsType fsType to mount. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
         * 
         * @return builder
         * 
         */
        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        /**
         * @param fsType fsType to mount. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
         * 
         * @return builder
         * 
         */
        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        /**
         * @param nodePublishSecretRef nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         * 
         * @return builder
         * 
         */
        public Builder nodePublishSecretRef(@Nullable Output<LocalObjectReferenceArgs> nodePublishSecretRef) {
            $.nodePublishSecretRef = nodePublishSecretRef;
            return this;
        }

        /**
         * @param nodePublishSecretRef nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         * 
         * @return builder
         * 
         */
        public Builder nodePublishSecretRef(LocalObjectReferenceArgs nodePublishSecretRef) {
            return nodePublishSecretRef(Output.of(nodePublishSecretRef));
        }

        /**
         * @param readOnly readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param volumeAttributes volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
         * 
         * @return builder
         * 
         */
        public Builder volumeAttributes(@Nullable Output<Map<String,String>> volumeAttributes) {
            $.volumeAttributes = volumeAttributes;
            return this;
        }

        /**
         * @param volumeAttributes volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
         * 
         * @return builder
         * 
         */
        public Builder volumeAttributes(Map<String,String> volumeAttributes) {
            return volumeAttributes(Output.of(volumeAttributes));
        }

        public CSIVolumeSourceArgs build() {
            $.driver = Objects.requireNonNull($.driver, "expected parameter 'driver' to be non-null");
            return $;
        }
    }

}
