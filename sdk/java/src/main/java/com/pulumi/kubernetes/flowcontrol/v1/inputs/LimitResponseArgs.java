// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.flowcontrol.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.flowcontrol.v1.inputs.QueuingConfigurationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * LimitResponse defines how to handle requests that can not be executed right now.
 * 
 */
public final class LimitResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final LimitResponseArgs Empty = new LimitResponseArgs();

    /**
     * `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `&#34;Queue&#34;`.
     * 
     */
    @Import(name="queuing")
    private @Nullable Output<QueuingConfigurationArgs> queuing;

    /**
     * @return `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `&#34;Queue&#34;`.
     * 
     */
    public Optional<Output<QueuingConfigurationArgs>> queuing() {
        return Optional.ofNullable(this.queuing);
    }

    /**
     * `type` is &#34;Queue&#34; or &#34;Reject&#34;. &#34;Queue&#34; means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. &#34;Reject&#34; means that requests that can not be executed upon arrival are rejected. Required.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return `type` is &#34;Queue&#34; or &#34;Reject&#34;. &#34;Queue&#34; means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. &#34;Reject&#34; means that requests that can not be executed upon arrival are rejected. Required.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private LimitResponseArgs() {}

    private LimitResponseArgs(LimitResponseArgs $) {
        this.queuing = $.queuing;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LimitResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LimitResponseArgs $;

        public Builder() {
            $ = new LimitResponseArgs();
        }

        public Builder(LimitResponseArgs defaults) {
            $ = new LimitResponseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param queuing `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `&#34;Queue&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queuing(@Nullable Output<QueuingConfigurationArgs> queuing) {
            $.queuing = queuing;
            return this;
        }

        /**
         * @param queuing `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `&#34;Queue&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queuing(QueuingConfigurationArgs queuing) {
            return queuing(Output.of(queuing));
        }

        /**
         * @param type `type` is &#34;Queue&#34; or &#34;Reject&#34;. &#34;Queue&#34; means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. &#34;Reject&#34; means that requests that can not be executed upon arrival are rejected. Required.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type `type` is &#34;Queue&#34; or &#34;Reject&#34;. &#34;Queue&#34; means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. &#34;Reject&#34; means that requests that can not be executed upon arrival are rejected. Required.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LimitResponseArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
