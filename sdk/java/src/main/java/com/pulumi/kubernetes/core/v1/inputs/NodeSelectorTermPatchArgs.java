// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.NodeSelectorRequirementPatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * 
 */
public final class NodeSelectorTermPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeSelectorTermPatchArgs Empty = new NodeSelectorTermPatchArgs();

    /**
     * A list of node selector requirements by node&#39;s labels.
     * 
     */
    @Import(name="matchExpressions")
    private @Nullable Output<List<NodeSelectorRequirementPatchArgs>> matchExpressions;

    /**
     * @return A list of node selector requirements by node&#39;s labels.
     * 
     */
    public Optional<Output<List<NodeSelectorRequirementPatchArgs>>> matchExpressions() {
        return Optional.ofNullable(this.matchExpressions);
    }

    /**
     * A list of node selector requirements by node&#39;s fields.
     * 
     */
    @Import(name="matchFields")
    private @Nullable Output<List<NodeSelectorRequirementPatchArgs>> matchFields;

    /**
     * @return A list of node selector requirements by node&#39;s fields.
     * 
     */
    public Optional<Output<List<NodeSelectorRequirementPatchArgs>>> matchFields() {
        return Optional.ofNullable(this.matchFields);
    }

    private NodeSelectorTermPatchArgs() {}

    private NodeSelectorTermPatchArgs(NodeSelectorTermPatchArgs $) {
        this.matchExpressions = $.matchExpressions;
        this.matchFields = $.matchFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeSelectorTermPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeSelectorTermPatchArgs $;

        public Builder() {
            $ = new NodeSelectorTermPatchArgs();
        }

        public Builder(NodeSelectorTermPatchArgs defaults) {
            $ = new NodeSelectorTermPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(@Nullable Output<List<NodeSelectorRequirementPatchArgs>> matchExpressions) {
            $.matchExpressions = matchExpressions;
            return this;
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(List<NodeSelectorRequirementPatchArgs> matchExpressions) {
            return matchExpressions(Output.of(matchExpressions));
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(NodeSelectorRequirementPatchArgs... matchExpressions) {
            return matchExpressions(List.of(matchExpressions));
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(@Nullable Output<List<NodeSelectorRequirementPatchArgs>> matchFields) {
            $.matchFields = matchFields;
            return this;
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(List<NodeSelectorRequirementPatchArgs> matchFields) {
            return matchFields(Output.of(matchFields));
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(NodeSelectorRequirementPatchArgs... matchFields) {
            return matchFields(List.of(matchFields));
        }

        public NodeSelectorTermPatchArgs build() {
            return $;
        }
    }

}
