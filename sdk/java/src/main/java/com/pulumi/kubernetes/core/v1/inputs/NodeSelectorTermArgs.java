// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.NodeSelectorRequirementArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * 
 */
public final class NodeSelectorTermArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeSelectorTermArgs Empty = new NodeSelectorTermArgs();

    /**
     * A list of node selector requirements by node&#39;s labels.
     * 
     */
    @Import(name="matchExpressions")
    private @Nullable Output<List<NodeSelectorRequirementArgs>> matchExpressions;

    /**
     * @return A list of node selector requirements by node&#39;s labels.
     * 
     */
    public Optional<Output<List<NodeSelectorRequirementArgs>>> matchExpressions() {
        return Optional.ofNullable(this.matchExpressions);
    }

    /**
     * A list of node selector requirements by node&#39;s fields.
     * 
     */
    @Import(name="matchFields")
    private @Nullable Output<List<NodeSelectorRequirementArgs>> matchFields;

    /**
     * @return A list of node selector requirements by node&#39;s fields.
     * 
     */
    public Optional<Output<List<NodeSelectorRequirementArgs>>> matchFields() {
        return Optional.ofNullable(this.matchFields);
    }

    private NodeSelectorTermArgs() {}

    private NodeSelectorTermArgs(NodeSelectorTermArgs $) {
        this.matchExpressions = $.matchExpressions;
        this.matchFields = $.matchFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeSelectorTermArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeSelectorTermArgs $;

        public Builder() {
            $ = new NodeSelectorTermArgs();
        }

        public Builder(NodeSelectorTermArgs defaults) {
            $ = new NodeSelectorTermArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(@Nullable Output<List<NodeSelectorRequirementArgs>> matchExpressions) {
            $.matchExpressions = matchExpressions;
            return this;
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(List<NodeSelectorRequirementArgs> matchExpressions) {
            return matchExpressions(Output.of(matchExpressions));
        }

        /**
         * @param matchExpressions A list of node selector requirements by node&#39;s labels.
         * 
         * @return builder
         * 
         */
        public Builder matchExpressions(NodeSelectorRequirementArgs... matchExpressions) {
            return matchExpressions(List.of(matchExpressions));
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(@Nullable Output<List<NodeSelectorRequirementArgs>> matchFields) {
            $.matchFields = matchFields;
            return this;
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(List<NodeSelectorRequirementArgs> matchFields) {
            return matchFields(Output.of(matchFields));
        }

        /**
         * @param matchFields A list of node selector requirements by node&#39;s fields.
         * 
         * @return builder
         * 
         */
        public Builder matchFields(NodeSelectorRequirementArgs... matchFields) {
            return matchFields(List.of(matchFields));
        }

        public NodeSelectorTermArgs build() {
            return $;
        }
    }

}
