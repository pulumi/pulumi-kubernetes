// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.CounterArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.
 * 
 * The counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.
 * 
 */
public final class CounterSetPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final CounterSetPatchArgs Empty = new CounterSetPatchArgs();

    /**
     * Counters defines the counters that will be consumed by the device. The name of each counter must be unique in that set and must be a DNS label.
     * 
     * To ensure this uniqueness, capacities defined by the vendor must be listed without the driver name as domain prefix in their name. All others must be listed with their domain prefix.
     * 
     * The maximum number of counters is 32.
     * 
     */
    @Import(name="counters")
    private @Nullable Output<Map<String,CounterArgs>> counters;

    /**
     * @return Counters defines the counters that will be consumed by the device. The name of each counter must be unique in that set and must be a DNS label.
     * 
     * To ensure this uniqueness, capacities defined by the vendor must be listed without the driver name as domain prefix in their name. All others must be listed with their domain prefix.
     * 
     * The maximum number of counters is 32.
     * 
     */
    public Optional<Output<Map<String,CounterArgs>>> counters() {
        return Optional.ofNullable(this.counters);
    }

    /**
     * CounterSet is the name of the set from which the counters defined will be consumed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return CounterSet is the name of the set from which the counters defined will be consumed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CounterSetPatchArgs() {}

    private CounterSetPatchArgs(CounterSetPatchArgs $) {
        this.counters = $.counters;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CounterSetPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CounterSetPatchArgs $;

        public Builder() {
            $ = new CounterSetPatchArgs();
        }

        public Builder(CounterSetPatchArgs defaults) {
            $ = new CounterSetPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counters Counters defines the counters that will be consumed by the device. The name of each counter must be unique in that set and must be a DNS label.
         * 
         * To ensure this uniqueness, capacities defined by the vendor must be listed without the driver name as domain prefix in their name. All others must be listed with their domain prefix.
         * 
         * The maximum number of counters is 32.
         * 
         * @return builder
         * 
         */
        public Builder counters(@Nullable Output<Map<String,CounterArgs>> counters) {
            $.counters = counters;
            return this;
        }

        /**
         * @param counters Counters defines the counters that will be consumed by the device. The name of each counter must be unique in that set and must be a DNS label.
         * 
         * To ensure this uniqueness, capacities defined by the vendor must be listed without the driver name as domain prefix in their name. All others must be listed with their domain prefix.
         * 
         * The maximum number of counters is 32.
         * 
         * @return builder
         * 
         */
        public Builder counters(Map<String,CounterArgs> counters) {
            return counters(Output.of(counters));
        }

        /**
         * @param name CounterSet is the name of the set from which the counters defined will be consumed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name CounterSet is the name of the set from which the counters defined will be consumed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CounterSetPatchArgs build() {
            return $;
        }
    }

}
