// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta2.outputs.DeviceSubRequest;
import com.pulumi.kubernetes.resource.v1beta2.outputs.ExactDeviceRequest;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceRequest {
    /**
     * @return Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
     * 
     * One of Exactly or FirstAvailable must be set.
     * 
     */
    private @Nullable ExactDeviceRequest exactly;
    /**
     * @return FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    private @Nullable List<DeviceSubRequest> firstAvailable;
    /**
     * @return Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
     * 
     * Must be a DNS label.
     * 
     */
    private String name;

    private DeviceRequest() {}
    /**
     * @return Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.
     * 
     * One of Exactly or FirstAvailable must be set.
     * 
     */
    public Optional<ExactDeviceRequest> exactly() {
        return Optional.ofNullable(this.exactly);
    }
    /**
     * @return FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.
     * 
     * DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.
     * 
     */
    public List<DeviceSubRequest> firstAvailable() {
        return this.firstAvailable == null ? List.of() : this.firstAvailable;
    }
    /**
     * @return Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
     * 
     * References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.
     * 
     * Must be a DNS label.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ExactDeviceRequest exactly;
        private @Nullable List<DeviceSubRequest> firstAvailable;
        private String name;
        public Builder() {}
        public Builder(DeviceRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactly = defaults.exactly;
    	      this.firstAvailable = defaults.firstAvailable;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder exactly(@Nullable ExactDeviceRequest exactly) {

            this.exactly = exactly;
            return this;
        }
        @CustomType.Setter
        public Builder firstAvailable(@Nullable List<DeviceSubRequest> firstAvailable) {

            this.firstAvailable = firstAvailable;
            return this;
        }
        public Builder firstAvailable(DeviceSubRequest... firstAvailable) {
            return firstAvailable(List.of(firstAvailable));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DeviceRequest", "name");
            }
            this.name = name;
            return this;
        }
        public DeviceRequest build() {
            final var _resultValue = new DeviceRequest();
            _resultValue.exactly = exactly;
            _resultValue.firstAvailable = firstAvailable;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
