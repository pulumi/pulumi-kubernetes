// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.MatchResourcesArgs;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.ParamKindArgs;
import com.pulumi.kubernetes.admissionregistration.v1alpha1.inputs.ValidationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
 * 
 */
public final class ValidatingAdmissionPolicySpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValidatingAdmissionPolicySpecArgs Empty = new ValidatingAdmissionPolicySpecArgs();

    /**
     * FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
     * 
     */
    @Import(name="failurePolicy")
    private @Nullable Output<String> failurePolicy;

    /**
     * @return FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
     * 
     */
    public Optional<Output<String>> failurePolicy() {
        return Optional.ofNullable(this.failurePolicy);
    }

    /**
     * MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
     * 
     */
    @Import(name="matchConstraints")
    private @Nullable Output<MatchResourcesArgs> matchConstraints;

    /**
     * @return MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
     * 
     */
    public Optional<Output<MatchResourcesArgs>> matchConstraints() {
        return Optional.ofNullable(this.matchConstraints);
    }

    /**
     * ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
     * 
     */
    @Import(name="paramKind")
    private @Nullable Output<ParamKindArgs> paramKind;

    /**
     * @return ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
     * 
     */
    public Optional<Output<ParamKindArgs>> paramKind() {
        return Optional.ofNullable(this.paramKind);
    }

    /**
     * Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
     * 
     */
    @Import(name="validations", required=true)
    private Output<List<ValidationArgs>> validations;

    /**
     * @return Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
     * 
     */
    public Output<List<ValidationArgs>> validations() {
        return this.validations;
    }

    private ValidatingAdmissionPolicySpecArgs() {}

    private ValidatingAdmissionPolicySpecArgs(ValidatingAdmissionPolicySpecArgs $) {
        this.failurePolicy = $.failurePolicy;
        this.matchConstraints = $.matchConstraints;
        this.paramKind = $.paramKind;
        this.validations = $.validations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValidatingAdmissionPolicySpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValidatingAdmissionPolicySpecArgs $;

        public Builder() {
            $ = new ValidatingAdmissionPolicySpecArgs();
        }

        public Builder(ValidatingAdmissionPolicySpecArgs defaults) {
            $ = new ValidatingAdmissionPolicySpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failurePolicy FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(@Nullable Output<String> failurePolicy) {
            $.failurePolicy = failurePolicy;
            return this;
        }

        /**
         * @param failurePolicy FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(String failurePolicy) {
            return failurePolicy(Output.of(failurePolicy));
        }

        /**
         * @param matchConstraints MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
         * 
         * @return builder
         * 
         */
        public Builder matchConstraints(@Nullable Output<MatchResourcesArgs> matchConstraints) {
            $.matchConstraints = matchConstraints;
            return this;
        }

        /**
         * @param matchConstraints MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
         * 
         * @return builder
         * 
         */
        public Builder matchConstraints(MatchResourcesArgs matchConstraints) {
            return matchConstraints(Output.of(matchConstraints));
        }

        /**
         * @param paramKind ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
         * 
         * @return builder
         * 
         */
        public Builder paramKind(@Nullable Output<ParamKindArgs> paramKind) {
            $.paramKind = paramKind;
            return this;
        }

        /**
         * @param paramKind ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
         * 
         * @return builder
         * 
         */
        public Builder paramKind(ParamKindArgs paramKind) {
            return paramKind(Output.of(paramKind));
        }

        /**
         * @param validations Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
         * 
         * @return builder
         * 
         */
        public Builder validations(Output<List<ValidationArgs>> validations) {
            $.validations = validations;
            return this;
        }

        /**
         * @param validations Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
         * 
         * @return builder
         * 
         */
        public Builder validations(List<ValidationArgs> validations) {
            return validations(Output.of(validations));
        }

        /**
         * @param validations Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
         * 
         * @return builder
         * 
         */
        public Builder validations(ValidationArgs... validations) {
            return validations(List.of(validations));
        }

        public ValidatingAdmissionPolicySpecArgs build() {
            $.validations = Objects.requireNonNull($.validations, "expected parameter 'validations' to be non-null");
            return $;
        }
    }

}
