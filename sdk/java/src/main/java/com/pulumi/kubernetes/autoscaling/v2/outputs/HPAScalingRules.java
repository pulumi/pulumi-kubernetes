// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.autoscaling.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.autoscaling.v2.outputs.HPAScalingPolicy;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HPAScalingRules {
    /**
     * @return policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
     * 
     */
    private @Nullable List<HPAScalingPolicy> policies;
    /**
     * @return selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
     * 
     */
    private @Nullable String selectPolicy;
    /**
     * @return stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     * 
     */
    private @Nullable Integer stabilizationWindowSeconds;
    /**
     * @return tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
     * 
     * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
     * 
     * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
     * 
     */
    private @Nullable String tolerance;

    private HPAScalingRules() {}
    /**
     * @return policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
     * 
     */
    public List<HPAScalingPolicy> policies() {
        return this.policies == null ? List.of() : this.policies;
    }
    /**
     * @return selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
     * 
     */
    public Optional<String> selectPolicy() {
        return Optional.ofNullable(this.selectPolicy);
    }
    /**
     * @return stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     * 
     */
    public Optional<Integer> stabilizationWindowSeconds() {
        return Optional.ofNullable(this.stabilizationWindowSeconds);
    }
    /**
     * @return tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
     * 
     * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
     * 
     * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
     * 
     */
    public Optional<String> tolerance() {
        return Optional.ofNullable(this.tolerance);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HPAScalingRules defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<HPAScalingPolicy> policies;
        private @Nullable String selectPolicy;
        private @Nullable Integer stabilizationWindowSeconds;
        private @Nullable String tolerance;
        public Builder() {}
        public Builder(HPAScalingRules defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policies = defaults.policies;
    	      this.selectPolicy = defaults.selectPolicy;
    	      this.stabilizationWindowSeconds = defaults.stabilizationWindowSeconds;
    	      this.tolerance = defaults.tolerance;
        }

        @CustomType.Setter
        public Builder policies(@Nullable List<HPAScalingPolicy> policies) {

            this.policies = policies;
            return this;
        }
        public Builder policies(HPAScalingPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder selectPolicy(@Nullable String selectPolicy) {

            this.selectPolicy = selectPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder stabilizationWindowSeconds(@Nullable Integer stabilizationWindowSeconds) {

            this.stabilizationWindowSeconds = stabilizationWindowSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tolerance(@Nullable String tolerance) {

            this.tolerance = tolerance;
            return this;
        }
        public HPAScalingRules build() {
            final var _resultValue = new HPAScalingRules();
            _resultValue.policies = policies;
            _resultValue.selectPolicy = selectPolicy;
            _resultValue.stabilizationWindowSeconds = stabilizationWindowSeconds;
            _resultValue.tolerance = tolerance;
            return _resultValue;
        }
    }
}
