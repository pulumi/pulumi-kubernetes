// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.kustomize.v2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryArgs Empty = new DirectoryArgs();

    /**
     * The directory containing the kustomization to apply. The value can be a local directory or a folder in a
     * git repository.
     * Example: ./helloWorld
     * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
     * 
     */
    @Import(name="directory", required=true)
    private Output<String> directory;

    /**
     * @return The directory containing the kustomization to apply. The value can be a local directory or a folder in a
     * git repository.
     * Example: ./helloWorld
     * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
     * 
     */
    public Output<String> directory() {
        return this.directory;
    }

    /**
     * The default namespace to apply to the resources. Defaults to the provider&#39;s namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The default namespace to apply to the resources. Defaults to the provider&#39;s namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix=&#34;foo&#34; would produce a resource named &#34;foo:resourceName&#34;.
     * 
     */
    @Import(name="resourcePrefix")
    private @Nullable Output<String> resourcePrefix;

    /**
     * @return A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix=&#34;foo&#34; would produce a resource named &#34;foo:resourceName&#34;.
     * 
     */
    public Optional<Output<String>> resourcePrefix() {
        return Optional.ofNullable(this.resourcePrefix);
    }

    /**
     * Indicates that child resources should skip the await logic.
     * 
     */
    @Import(name="skipAwait")
    private @Nullable Output<Boolean> skipAwait;

    /**
     * @return Indicates that child resources should skip the await logic.
     * 
     */
    public Optional<Output<Boolean>> skipAwait() {
        return Optional.ofNullable(this.skipAwait);
    }

    private DirectoryArgs() {}

    private DirectoryArgs(DirectoryArgs $) {
        this.directory = $.directory;
        this.namespace = $.namespace;
        this.resourcePrefix = $.resourcePrefix;
        this.skipAwait = $.skipAwait;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryArgs $;

        public Builder() {
            $ = new DirectoryArgs();
        }

        public Builder(DirectoryArgs defaults) {
            $ = new DirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param directory The directory containing the kustomization to apply. The value can be a local directory or a folder in a
         * git repository.
         * Example: ./helloWorld
         * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
         * 
         * @return builder
         * 
         */
        public Builder directory(Output<String> directory) {
            $.directory = directory;
            return this;
        }

        /**
         * @param directory The directory containing the kustomization to apply. The value can be a local directory or a folder in a
         * git repository.
         * Example: ./helloWorld
         * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
         * 
         * @return builder
         * 
         */
        public Builder directory(String directory) {
            return directory(Output.of(directory));
        }

        /**
         * @param namespace The default namespace to apply to the resources. Defaults to the provider&#39;s namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The default namespace to apply to the resources. Defaults to the provider&#39;s namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourcePrefix A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix=&#34;foo&#34; would produce a resource named &#34;foo:resourceName&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourcePrefix(@Nullable Output<String> resourcePrefix) {
            $.resourcePrefix = resourcePrefix;
            return this;
        }

        /**
         * @param resourcePrefix A prefix for the auto-generated resource names. Defaults to the name of the Directory resource. Example: A resource created with resourcePrefix=&#34;foo&#34; would produce a resource named &#34;foo:resourceName&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourcePrefix(String resourcePrefix) {
            return resourcePrefix(Output.of(resourcePrefix));
        }

        /**
         * @param skipAwait Indicates that child resources should skip the await logic.
         * 
         * @return builder
         * 
         */
        public Builder skipAwait(@Nullable Output<Boolean> skipAwait) {
            $.skipAwait = skipAwait;
            return this;
        }

        /**
         * @param skipAwait Indicates that child resources should skip the await logic.
         * 
         * @return builder
         * 
         */
        public Builder skipAwait(Boolean skipAwait) {
            return skipAwait(Output.of(skipAwait));
        }

        public DirectoryArgs build() {
            if ($.directory == null) {
                throw new MissingRequiredPropertyException("DirectoryArgs", "directory");
            }
            return $;
        }
    }

}
