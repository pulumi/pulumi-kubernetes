// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.autoscaling.v2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.autoscaling.v2.inputs.HPAScalingPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * HPAScalingRules configures the scaling behavior for one direction via scaling Policy Rules and a configurable metric tolerance.
 * 
 * Scaling Policy Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
 * 
 * The tolerance is applied to the metric values and prevents scaling too eagerly for small metric variations. (Note that setting a tolerance requires enabling the alpha HPAConfigurableTolerance feature gate.)
 * 
 */
public final class HPAScalingRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final HPAScalingRulesArgs Empty = new HPAScalingRulesArgs();

    /**
     * policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<HPAScalingPolicyArgs>> policies;

    /**
     * @return policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
     * 
     */
    public Optional<Output<List<HPAScalingPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
     * 
     */
    @Import(name="selectPolicy")
    private @Nullable Output<String> selectPolicy;

    /**
     * @return selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
     * 
     */
    public Optional<Output<String>> selectPolicy() {
        return Optional.ofNullable(this.selectPolicy);
    }

    /**
     * stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     * 
     */
    @Import(name="stabilizationWindowSeconds")
    private @Nullable Output<Integer> stabilizationWindowSeconds;

    /**
     * @return stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     * 
     */
    public Optional<Output<Integer>> stabilizationWindowSeconds() {
        return Optional.ofNullable(this.stabilizationWindowSeconds);
    }

    /**
     * tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
     * 
     * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
     * 
     * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
     * 
     */
    @Import(name="tolerance")
    private @Nullable Output<String> tolerance;

    /**
     * @return tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
     * 
     * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
     * 
     * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
     * 
     */
    public Optional<Output<String>> tolerance() {
        return Optional.ofNullable(this.tolerance);
    }

    private HPAScalingRulesArgs() {}

    private HPAScalingRulesArgs(HPAScalingRulesArgs $) {
        this.policies = $.policies;
        this.selectPolicy = $.selectPolicy;
        this.stabilizationWindowSeconds = $.stabilizationWindowSeconds;
        this.tolerance = $.tolerance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HPAScalingRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HPAScalingRulesArgs $;

        public Builder() {
            $ = new HPAScalingRulesArgs();
        }

        public Builder(HPAScalingRulesArgs defaults) {
            $ = new HPAScalingRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policies policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<HPAScalingPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<HPAScalingPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
         * 
         * @return builder
         * 
         */
        public Builder policies(HPAScalingPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param selectPolicy selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
         * 
         * @return builder
         * 
         */
        public Builder selectPolicy(@Nullable Output<String> selectPolicy) {
            $.selectPolicy = selectPolicy;
            return this;
        }

        /**
         * @param selectPolicy selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
         * 
         * @return builder
         * 
         */
        public Builder selectPolicy(String selectPolicy) {
            return selectPolicy(Output.of(selectPolicy));
        }

        /**
         * @param stabilizationWindowSeconds stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
         * 
         * @return builder
         * 
         */
        public Builder stabilizationWindowSeconds(@Nullable Output<Integer> stabilizationWindowSeconds) {
            $.stabilizationWindowSeconds = stabilizationWindowSeconds;
            return this;
        }

        /**
         * @param stabilizationWindowSeconds stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
         * 
         * @return builder
         * 
         */
        public Builder stabilizationWindowSeconds(Integer stabilizationWindowSeconds) {
            return stabilizationWindowSeconds(Output.of(stabilizationWindowSeconds));
        }

        /**
         * @param tolerance tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
         * 
         * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
         * 
         * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
         * 
         * @return builder
         * 
         */
        public Builder tolerance(@Nullable Output<String> tolerance) {
            $.tolerance = tolerance;
            return this;
        }

        /**
         * @param tolerance tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).
         * 
         * For example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
         * 
         * This is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.
         * 
         * @return builder
         * 
         */
        public Builder tolerance(String tolerance) {
            return tolerance(Output.of(tolerance));
        }

        public HPAScalingRulesArgs build() {
            return $;
        }
    }

}
