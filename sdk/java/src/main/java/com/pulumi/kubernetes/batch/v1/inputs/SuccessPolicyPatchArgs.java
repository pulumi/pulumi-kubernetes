// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.batch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.batch.v1.inputs.SuccessPolicyRulePatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
 * 
 */
public final class SuccessPolicyPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final SuccessPolicyPatchArgs Empty = new SuccessPolicyPatchArgs();

    /**
     * rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the &#34;SucceededCriteriaMet&#34; condition is added, and the lingering pods are removed. The terminal state for such a Job has the &#34;Complete&#34; condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<SuccessPolicyRulePatchArgs>> rules;

    /**
     * @return rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the &#34;SucceededCriteriaMet&#34; condition is added, and the lingering pods are removed. The terminal state for such a Job has the &#34;Complete&#34; condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
     * 
     */
    public Optional<Output<List<SuccessPolicyRulePatchArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private SuccessPolicyPatchArgs() {}

    private SuccessPolicyPatchArgs(SuccessPolicyPatchArgs $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SuccessPolicyPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SuccessPolicyPatchArgs $;

        public Builder() {
            $ = new SuccessPolicyPatchArgs();
        }

        public Builder(SuccessPolicyPatchArgs defaults) {
            $ = new SuccessPolicyPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the &#34;SucceededCriteriaMet&#34; condition is added, and the lingering pods are removed. The terminal state for such a Job has the &#34;Complete&#34; condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<SuccessPolicyRulePatchArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the &#34;SucceededCriteriaMet&#34; condition is added, and the lingering pods are removed. The terminal state for such a Job has the &#34;Complete&#34; condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<SuccessPolicyRulePatchArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the &#34;SucceededCriteriaMet&#34; condition is added, and the lingering pods are removed. The terminal state for such a Job has the &#34;Complete&#34; condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(SuccessPolicyRulePatchArgs... rules) {
            return rules(List.of(rules));
        }

        public SuccessPolicyPatchArgs build() {
            return $;
        }
    }

}
