// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.storage.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.storage.v1.outputs.VolumeError;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeAttachmentStatus {
    /**
     * @return attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    private @Nullable VolumeError attachError;
    /**
     * @return attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    private Boolean attached;
    /**
     * @return attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    private @Nullable Map<String,String> attachmentMetadata;
    /**
     * @return detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
     * 
     */
    private @Nullable VolumeError detachError;

    private VolumeAttachmentStatus() {}
    /**
     * @return attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    public Optional<VolumeError> attachError() {
        return Optional.ofNullable(this.attachError);
    }
    /**
     * @return attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    public Boolean attached() {
        return this.attached;
    }
    /**
     * @return attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
     * 
     */
    public Map<String,String> attachmentMetadata() {
        return this.attachmentMetadata == null ? Map.of() : this.attachmentMetadata;
    }
    /**
     * @return detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
     * 
     */
    public Optional<VolumeError> detachError() {
        return Optional.ofNullable(this.detachError);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeAttachmentStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable VolumeError attachError;
        private Boolean attached;
        private @Nullable Map<String,String> attachmentMetadata;
        private @Nullable VolumeError detachError;
        public Builder() {}
        public Builder(VolumeAttachmentStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachError = defaults.attachError;
    	      this.attached = defaults.attached;
    	      this.attachmentMetadata = defaults.attachmentMetadata;
    	      this.detachError = defaults.detachError;
        }

        @CustomType.Setter
        public Builder attachError(@Nullable VolumeError attachError) {
            this.attachError = attachError;
            return this;
        }
        @CustomType.Setter
        public Builder attached(Boolean attached) {
            this.attached = Objects.requireNonNull(attached);
            return this;
        }
        @CustomType.Setter
        public Builder attachmentMetadata(@Nullable Map<String,String> attachmentMetadata) {
            this.attachmentMetadata = attachmentMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder detachError(@Nullable VolumeError detachError) {
            this.detachError = detachError;
            return this;
        }
        public VolumeAttachmentStatus build() {
            final var o = new VolumeAttachmentStatus();
            o.attachError = attachError;
            o.attached = attached;
            o.attachmentMetadata = attachmentMetadata;
            o.detachError = detachError;
            return o;
        }
    }
}
